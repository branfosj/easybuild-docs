{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the EasyBuild documentation! \u00b6 Warning This is the new EasyBuild documentation, made with Material for MkDocs and written in MarkDown . We intend to replace the https://docs.easybuild.io , which is made with Sphinx and written in reStructuredText with this documentation soon... If you want to help with porting the EasyBuild documentation to MarkDown, you can! Please see https://github.com/easybuilders/easybuild-docs . Getting started \u00b6 What is EasyBuild? EasyBuild terminology Installing and configuring EasyBuild Using EasyBuild Getting help","title":"Home"},{"location":"#welcome-to-the-easybuild-documentation","text":"Warning This is the new EasyBuild documentation, made with Material for MkDocs and written in MarkDown . We intend to replace the https://docs.easybuild.io , which is made with Sphinx and written in reStructuredText with this documentation soon... If you want to help with porting the EasyBuild documentation to MarkDown, you can! Please see https://github.com/easybuilders/easybuild-docs .","title":"Welcome to the EasyBuild documentation!"},{"location":"#getting-started","text":"What is EasyBuild? EasyBuild terminology Installing and configuring EasyBuild Using EasyBuild Getting help","title":"Getting started"},{"location":"archived-easyconfigs/","text":"Archived easyconfigs \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Archived-easyconfigs.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Archived-easyconfigs.rst in easybuilders/easybuild repo target: docs/archived-easyconfigs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _archived_easyconfigs: Archived easyconfigs ==================== Since EasyBuild v3.0.0, easyconfig files using deprecated (i.e., old and inactive) toolchains are *archived* . .. contents :: :depth: 3 :backlinks: none .. _archived_easyconfigs_toolchain_deprecation: Toolchain deprecation ---------------------- Once in a blue moon, we review the list of toolchains (& versions) that are included in EasyBuild. Easyconfig files that use toolchains that become *deprecated* are then moved to the *easyconfigs archive* , i.e. the ``__archive__`` subdirectory in the ``easybuild-easyconfigs`` repository (see https://github.com/easybuilders/easybuild-easyconfigs/tree/main/easybuild/easyconfigs/__archive__). .. _archived_easyconfigs_deprecated_toolchains_what: What are deprecated toolchains? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Toolchains become deprecated if: * no easyconfig files using that toolchain have been contributed recently (e.g., in the last year) * that toolchain is considered to be inactive, after consulting the EasyBuild community (via mailing list, bi-weekly conf calls) Deprecating a toolchain implies that all easyconfigs using that toolchain are moved to the easyconfigs archive, and that they are no longer included in the EasyBuild regression test. In addition, these easyconfigs are 'hidden' from plain sight, in the sense that you need to use ``--consider-archived-easyconfigs`` to make EasyBuild consider them when it is looking for easyconfigs (e.g., with ```--search`` or ``--robot`` ). This does *not* mean that the support for using these toolchains is removed from the EasyBuild framework, although not testing them anymore may imply that using them may no longer work at some point in time. For toolchains for which no active versions are available (outside of the easyconfigs archive), it is possible that they will be reactivated, if a new toolchain version is contributed. .. _archived_easyconfigs_deprecated_toolchains_why: Why are toolchains being deprecated? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * using old toolchains (incl. old compilers and/or libraries) is likely to become more and more difficult on modern operating systems * these toolchains put a significant burden on the regression testing for EasyBuild releases * easyconfigs using old toolchains are likely to be for old software versions, which may no longer be relevant anyway .. _archived_easyconfigs_consider: Using ``--consider-archived-easyconfigs`` ----------------------------------------- To make EasyBuild consider archived easyconfig files, you need to enable the ``--consider-archived-easyconfigs`` configuration option :: $ eb -S '^goolfc' CFGS=/home/example/work/easybuild-easyconfigs/easybuild/easyconfigs * $CFGS1/g/goolfc/goolfc-2016.08.eb * $CFGS1/g/goolfc/goolfc-2016.10.eb Note: 6 matching archived easyconfig(s) found, use --consider-archived-easyconfigs to see them .. code :: $ eb -S '^goolfc' --consider-archived-easyconfigs CFGS=/home/example/easybuild-easyconfigs/easybuild/easyconfigs * $CFGS/g/goolfc/goolfc-2016.08.eb * $CFGS/g/goolfc/goolfc-2016.10.eb Matching archived easyconfigs: * $CFGS/__archive__/g/goolfc/goolfc-1.3.12.eb * $CFGS/__archive__/g/goolfc/goolfc-1.4.10.eb * $CFGS/__archive__/g/goolfc/goolfc-2.6.10.eb","title":"Archived easyconfigs"},{"location":"archived-easyconfigs/#archived-easyconfigs","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Archived-easyconfigs.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Archived-easyconfigs.rst in easybuilders/easybuild repo target: docs/archived-easyconfigs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _archived_easyconfigs: Archived easyconfigs ==================== Since EasyBuild v3.0.0, easyconfig files using deprecated (i.e., old and inactive) toolchains are *archived* . .. contents :: :depth: 3 :backlinks: none .. _archived_easyconfigs_toolchain_deprecation: Toolchain deprecation ---------------------- Once in a blue moon, we review the list of toolchains (& versions) that are included in EasyBuild. Easyconfig files that use toolchains that become *deprecated* are then moved to the *easyconfigs archive* , i.e. the ``__archive__`` subdirectory in the ``easybuild-easyconfigs`` repository (see https://github.com/easybuilders/easybuild-easyconfigs/tree/main/easybuild/easyconfigs/__archive__). .. _archived_easyconfigs_deprecated_toolchains_what: What are deprecated toolchains? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Toolchains become deprecated if: * no easyconfig files using that toolchain have been contributed recently (e.g., in the last year) * that toolchain is considered to be inactive, after consulting the EasyBuild community (via mailing list, bi-weekly conf calls) Deprecating a toolchain implies that all easyconfigs using that toolchain are moved to the easyconfigs archive, and that they are no longer included in the EasyBuild regression test. In addition, these easyconfigs are 'hidden' from plain sight, in the sense that you need to use ``--consider-archived-easyconfigs`` to make EasyBuild consider them when it is looking for easyconfigs (e.g., with ```--search`` or ``--robot`` ). This does *not* mean that the support for using these toolchains is removed from the EasyBuild framework, although not testing them anymore may imply that using them may no longer work at some point in time. For toolchains for which no active versions are available (outside of the easyconfigs archive), it is possible that they will be reactivated, if a new toolchain version is contributed. .. _archived_easyconfigs_deprecated_toolchains_why: Why are toolchains being deprecated? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * using old toolchains (incl. old compilers and/or libraries) is likely to become more and more difficult on modern operating systems * these toolchains put a significant burden on the regression testing for EasyBuild releases * easyconfigs using old toolchains are likely to be for old software versions, which may no longer be relevant anyway .. _archived_easyconfigs_consider: Using ``--consider-archived-easyconfigs`` ----------------------------------------- To make EasyBuild consider archived easyconfig files, you need to enable the ``--consider-archived-easyconfigs`` configuration option :: $ eb -S '^goolfc' CFGS=/home/example/work/easybuild-easyconfigs/easybuild/easyconfigs * $CFGS1/g/goolfc/goolfc-2016.08.eb * $CFGS1/g/goolfc/goolfc-2016.10.eb Note: 6 matching archived easyconfig(s) found, use --consider-archived-easyconfigs to see them .. code :: $ eb -S '^goolfc' --consider-archived-easyconfigs CFGS=/home/example/easybuild-easyconfigs/easybuild/easyconfigs * $CFGS/g/goolfc/goolfc-2016.08.eb * $CFGS/g/goolfc/goolfc-2016.10.eb Matching archived easyconfigs: * $CFGS/__archive__/g/goolfc/goolfc-1.3.12.eb * $CFGS/__archive__/g/goolfc/goolfc-1.4.10.eb * $CFGS/__archive__/g/goolfc/goolfc-2.6.10.eb","title":"Archived easyconfigs"},{"location":"backup-modules/","text":"Backing up of existing modules \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Backup_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Backup_modules.rst in easybuilders/easybuild repo target: docs/backup-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _backup_modules: Backing up of existing modules (``--backup-modules``) ----------------------------------------------------- While regenerating existing module files, you may want to preserve the existing module files to compare and assess that the changes in the newly generated module file match expectations. Backing up of existing modules can be enabled with ``--backup-modules`` . Backups are stored in the same directory as where the module file was located, and the files are given an additional extension of the form ``.bak_<year><month><day><hour><min><sec>`` . * With module files in Tcl syntax, the backup module file is hidden by adding a leading dot to the filename; this is done to avoid that it is displayed as a normal module in ``module avail`` . * With module files in Lua syntax, the backup module file is not made hidden (unless Lmod 6.x is used), since the additional ``.bak_*`` extension prevents from picking it up as a valid module file; only files ending in ``.lua`` are considered to be module files by Lmod 7+ . The location of the backed up module file will be printed, as well as a \"unified diff\" comparison (very similar to what ``diff -u`` produces) between the backed up module file and the newly generated module file (or a message mentioning that no differences were found). .. _backup_modules_disable: Disabling automatic backup of modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When ``--skip`` or ``--module-only`` is used, backing up of existing modules is enabled automatically. This can be disabled with ``--disable-backup-modules`` . .. _backup_modules_example: Example ~~~~~~~ Suppose existing modules in both Tcl & Lua syntax are present ( ``bzip2/1.0.6`` ). Both these module files are missing an update statement for $PATH because the ``/bin`` subdirectory was missing in the installation, for the purpose of this example :: $ ls -la $EASYBUILD_PREFIX/modules/all/bzip2 total 16 drwxr-xr-x 2 example example 136 Aug 24 10:20 . drwxr-xr-x 3 example example 102 Aug 24 10:18 .. -rw-r--r-- 1 example example 1256 Aug 24 10:19 1.0.6 -rw-r--r-- 1 example example 1303 Aug 24 10:18 1.0.6.lua Using ``--force`` and ``--backup-modules`` , we can reinstall the ``bzip2/1.0.6`` modules and get a clear view on what has changed. To reinstall the ``bzip2/1.0.6`` module in Lua syntax while retaining a backup of the existing module :: $ eb bzip2-1.0.6.eb --module-syntax=Lua --force --backup-modules ... == creating build dir, resetting environment... == backup of existing module file stored at /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603 ... == creating module... == comparing module file with backup /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603; diff is: --- /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603 +++ /example/modules/all/bzip2/1.0.6.lua @@ -25,9 +25,10 @@ prepend_path(\"LD_LIBRARY_PATH\", pathJoin(root, \"lib\")) prepend_path(\"LIBRARY_PATH\", pathJoin(root, \"lib\")) prepend_path(\"MANPATH\", pathJoin(root, \"man\")) +prepend_path(\"PATH\", pathJoin(root, \"bin\")) setenv(\"EBROOTBZIP2\", root) setenv(\"EBVERSIONBZIP2\", \"1.0.6\") setenv(\"EBDEVELBZIP2\", pathJoin(root, \"easybuild/bzip2-1.0.6-easybuild-devel\")) ... Equivalently, we can reinstall the module in Tcl syntax using :: $ eb bzip2-1.0.6.eb --module-syntax=Tcl --force --backup-modules Afterwards, both the newly generated modules and the backups are in place :: $ ls -la $EASYBUILD_PREFIX/modules/all/bzip2 total 32 drwxr-xr-x 2 example example 204 Aug 24 10:26 . drwxr-xr-x 3 example example 102 Jul 11 10:18 .. -rw-r--r-- 1 example example 1227 Aug 24 10:24 .1.0.6.bak_20170824102412 -rw-r--r-- 1 example example 1256 Jul 11 01:24 1.0.6 -rw-r--r-- 1 example example 1303 Jul 11 01:26 1.0.6.lua -rw-r--r-- 1 example example 1259 Aug 24 10:26 1.0.6.lua.bak_20170824102603 Cleaning up the backup module files can be done with the following command (for example) :: $ find $EASYBUILD_PREFIX/modules/all/bzip2 -name '*.bak*' | xargs rm -v /example/modules/all/bzip2/.1.0.6.bak_20170824102412 /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603","title":"Backing up of existing modules"},{"location":"backup-modules/#backing-up-of-existing-modules","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Backup_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Backup_modules.rst in easybuilders/easybuild repo target: docs/backup-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _backup_modules: Backing up of existing modules (``--backup-modules``) ----------------------------------------------------- While regenerating existing module files, you may want to preserve the existing module files to compare and assess that the changes in the newly generated module file match expectations. Backing up of existing modules can be enabled with ``--backup-modules`` . Backups are stored in the same directory as where the module file was located, and the files are given an additional extension of the form ``.bak_<year><month><day><hour><min><sec>`` . * With module files in Tcl syntax, the backup module file is hidden by adding a leading dot to the filename; this is done to avoid that it is displayed as a normal module in ``module avail`` . * With module files in Lua syntax, the backup module file is not made hidden (unless Lmod 6.x is used), since the additional ``.bak_*`` extension prevents from picking it up as a valid module file; only files ending in ``.lua`` are considered to be module files by Lmod 7+ . The location of the backed up module file will be printed, as well as a \"unified diff\" comparison (very similar to what ``diff -u`` produces) between the backed up module file and the newly generated module file (or a message mentioning that no differences were found). .. _backup_modules_disable: Disabling automatic backup of modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When ``--skip`` or ``--module-only`` is used, backing up of existing modules is enabled automatically. This can be disabled with ``--disable-backup-modules`` . .. _backup_modules_example: Example ~~~~~~~ Suppose existing modules in both Tcl & Lua syntax are present ( ``bzip2/1.0.6`` ). Both these module files are missing an update statement for $PATH because the ``/bin`` subdirectory was missing in the installation, for the purpose of this example :: $ ls -la $EASYBUILD_PREFIX/modules/all/bzip2 total 16 drwxr-xr-x 2 example example 136 Aug 24 10:20 . drwxr-xr-x 3 example example 102 Aug 24 10:18 .. -rw-r--r-- 1 example example 1256 Aug 24 10:19 1.0.6 -rw-r--r-- 1 example example 1303 Aug 24 10:18 1.0.6.lua Using ``--force`` and ``--backup-modules`` , we can reinstall the ``bzip2/1.0.6`` modules and get a clear view on what has changed. To reinstall the ``bzip2/1.0.6`` module in Lua syntax while retaining a backup of the existing module :: $ eb bzip2-1.0.6.eb --module-syntax=Lua --force --backup-modules ... == creating build dir, resetting environment... == backup of existing module file stored at /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603 ... == creating module... == comparing module file with backup /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603; diff is: --- /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603 +++ /example/modules/all/bzip2/1.0.6.lua @@ -25,9 +25,10 @@ prepend_path(\"LD_LIBRARY_PATH\", pathJoin(root, \"lib\")) prepend_path(\"LIBRARY_PATH\", pathJoin(root, \"lib\")) prepend_path(\"MANPATH\", pathJoin(root, \"man\")) +prepend_path(\"PATH\", pathJoin(root, \"bin\")) setenv(\"EBROOTBZIP2\", root) setenv(\"EBVERSIONBZIP2\", \"1.0.6\") setenv(\"EBDEVELBZIP2\", pathJoin(root, \"easybuild/bzip2-1.0.6-easybuild-devel\")) ... Equivalently, we can reinstall the module in Tcl syntax using :: $ eb bzip2-1.0.6.eb --module-syntax=Tcl --force --backup-modules Afterwards, both the newly generated modules and the backups are in place :: $ ls -la $EASYBUILD_PREFIX/modules/all/bzip2 total 32 drwxr-xr-x 2 example example 204 Aug 24 10:26 . drwxr-xr-x 3 example example 102 Jul 11 10:18 .. -rw-r--r-- 1 example example 1227 Aug 24 10:24 .1.0.6.bak_20170824102412 -rw-r--r-- 1 example example 1256 Jul 11 01:24 1.0.6 -rw-r--r-- 1 example example 1303 Jul 11 01:26 1.0.6.lua -rw-r--r-- 1 example example 1259 Aug 24 10:26 1.0.6.lua.bak_20170824102603 Cleaning up the backup module files can be done with the following command (for example) :: $ find $EASYBUILD_PREFIX/modules/all/bzip2 -name '*.bak*' | xargs rm -v /example/modules/all/bzip2/.1.0.6.bak_20170824102412 /example/modules/all/bzip2/1.0.6.lua.bak_20170824102603","title":"Backing up of existing modules"},{"location":"changelog-docs/","text":"Changelog for EasyBuild documentation \u00b6 Note For the EasyBuild release notes, see here . Warning This page will soon replace https://docs.easybuild.io/en/latest/Changelog.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Changelog.rst in easybuilders/easybuild repo target: docs/changelog-docs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _changelog: Changelog for EasyBuild documentation ------------------------------------- (for EasyBuild release notes, see :ref: `release_notes` ) * **release 20221021.01** ( `Oct 21st 2022` ): update release notes for EasyBuild v4.6.2 (see :ref: `release_notes_eb462` ) * **release 20220912.01** ( `Sep 12th 2022` ): update release notes for EasyBuild v4.6.1 (see :ref: `release_notes_eb461` ) * **release 20220708.01** ( `Jul 8th 2022` ): update release notes for EasyBuild v4.6.0 (see :ref: `release_notes_eb460` ) * **release 20220608.01** ( `Jun 8th 2022` ): update release notes for EasyBuild v4.5.5 (see :ref: `release_notes_eb455` ) * **release 20220331.01** ( `Mar 31st 2022` ): update release notes for EasyBuild v4.5.4 (see :ref: `release_notes_eb454` ) * **release 20220211.01** ( `Feb 11th 2022` ): update release notes for EasyBuild v4.5.3 (see :ref: `release_notes_eb453` ) * **release 20220124.01** ( `Jan 24th 2022` ): update release notes for EasyBuild v4.5.2 (see :ref: `release_notes_eb452` ) * **release 20211213.01** ( `Dec 13th 2021` ): update release notes for EasyBuild v4.5.1 (see :ref: `release_notes_eb451` ) * **release 20211029.01** ( `Oct 29th 2021` ): update release notes for EasyBuild v4.5.0 (see :ref: `release_notes_eb450` ) * **release 20210907.01** ( `Sep 7th 2021` ): update release notes for EasyBuild v4.4.2 (see :ref: `release_notes_eb442` ) * **release 20210706.01** ( `Jul 6th 2021` ): update release notes for EasyBuild v4.4.1 (see :ref: `release_notes_eb441` ) * **release 20210602.01** ( `Jun 2nd 2021` ): update release notes for EasyBuild v4.4.0 (see :ref: `release_notes_eb440` ) * **release 20210409.01** ( `Apr 9th 2021` ): update release notes for EasyBuild v4.3.4 (see :ref: `release_notes_eb434` ) * **release 20210223.01** ( `Feb 23rd 2021` ): update release notes for EasyBuild v4.3.3 (see :ref: `release_notes_eb433` ) * **release 20201210.01** ( `Dec 10th 2020` ): update release notes for EasyBuild v4.3.2 (see :ref: `release_notes_eb432` ) * **release 20201029.01** ( `Oct 29th 2020` ): update release notes for EasyBuild v4.3.1 (see :ref: `release_notes_eb431` ) * **release 20200913.01** ( `Sep 13th 2020` ): update release notes for EasyBuild v4.3.0 (see :ref: `release_notes_eb430` ) * **release 20200708.01** ( `July 8th 2020` ): update release notes for EasyBuild v4.2.2 (see :ref: `release_notes_eb422` ) * **release 20200520.01** ( `May 20th 2020` ): update release notes for EasyBuild v4.2.1 (see :ref: `release_notes_eb421` ) * **release 20200414.01** ( `Apr 14th 2020` ): * document new EasyBuild locking mechanism (see :ref: `locks` ) * document support for creating index files (see :ref: `easyconfigs_index` ) * update release notes for EasyBuild v4.2.0 (see :ref: `release_notes_eb420` ) * **release 20200316.01** ( `Mar 16th 2020` ): update release notes for EasyBuild v4.1.2 (see :ref: `release_notes_eb412` ) * **release 20200116.01** ( `Jan 16th 2020` ): update release notes for EasyBuild v4.1.1 (see :ref: `release_notes_eb411` ) * **release 20191204.01** ( `Dec 4th 2019` ): update release notes for EasyBuild v4.1.0 (see :ref: `release_notes_eb410` ) * **release 20191015.01** ( `Oct 15th 2019` ): update release notes for EasyBuild v4.0.1 (see :ref: `release_notes_eb401` ) * **release 20190920.01** ( `Sep 20th 2019` ): update release notes for EasyBuild v4.0.0 (see :ref: `release_notes_eb400` ); see also :ref: `eb4_changes_overview` * **release 20190823.01** ( `Aug 23rd 2019` ): update release notes for EasyBuild v3.9.4 (see :ref: `release_notes_eb394` ) * **release 20190708.01** ( `Jul 8th 2019` ): update release notes for EasyBuild v3.9.3 (see :ref: `release_notes_eb393` ) * **release 20190609.01** ( `Jun 9th 2019` ): update release notes for EasyBuild v3.9.2 (see :ref: `release_notes_eb392` ) * **release 20190908.01** ( `Jun 8th 2019` ): update documentation on support for generating (Singularity) container recipes/images (see :ref: `containers` ) * **release 20190520.01** ( `May 20th 2019` ): update release notes for EasyBuild v3.9.1 (see :ref: `release_notes_eb391` ) * **release 20190412.01** ( `Apr 12th 2019` ): update release notes for EasyBuild v3.9.0 (see :ref: `release_notes_eb390` ) * **release 20190129.01** ( `Jan 29th 2019` ): update release notes for EasyBuild v3.8.1 (see :ref: `release_notes_eb381` ) * **release 20190124.01** ( `Jan 24th 2019` ): add definitions for ``2019a`` common toolchains (see :ref: `common_toolchains` ) * **release 20181218.01** ( `Dec 18th 2018` ): update release notes for EasyBuild v3.8.0 (see :ref: `release_notes_eb380` ) * **release 20181114.01** ( `Nov 14th 2018` ): add documentation on deprecated easyconfigs & toolchains ( :ref: `deprecated_easyconfigs` ) * **release 20181104.01** ( `Nov 4th 2018` ): update ``--job`` documentation to also cover ``Slurm`` job backend (see :ref: `submitting_jobs` ) * **release 20181018.01** ( `Oct 18th 2018` ): update release notes for EasyBuild v3.7.1 (see :ref: `release_notes_eb371` ) * **release 20180925.01** ( `Sep 25th 2018` ): update release notes for EasyBuild v3.7.0 (see :ref: `release_notes_eb370` ) * **release 20180921.01** ( `Sep 21st 2018` ): document support for wrapping dependencies (see :ref: `wrapping_dependencies` ) * **release 20180920.01** ( `Sep 20th 2018` ): document support for downloading sources directly from a Git repository (see :ref: `common_easyconfig_param_sources_git_config` ) * **release 20180711.01** ( `Jul 11th 2018` ): update release notes for EasyBuild v3.6.2 (see :ref: `release_notes_eb362` ) * **release 20180710.01** ( `Jul 10th 2018` ): add definitions for ``2018b`` common toolchains (see :ref: `common_toolchains` ) * **release 20180528.01** ( `May 28th 2018` ): update release notes for EasyBuild v3.6.1 (see :ref: `release_notes_eb361` ) * **release 20180427.01** ( `Apr 27th 2018` ): update release notes for EasyBuild v3.6.0 (see :ref: `release_notes_eb360` ) * **release 20180425.01** ( `Apr 25th 2018` ): add documentation on support for generating container recipes & images (see :ref: `containers` ) * **release 20180307.01** ( `Mar 7th 2018` ): update release notes for EasyBuild v3.5.3 (see :ref: `release_notes_eb353` ) * **release 20180302.01** ( `Mar 2nd 2018` ): update release notes for EasyBuild v3.5.2 (see :ref: `release_notes_eb352` ) * **release 20180116.01** ( `Jan 16th 2018` ): update release notes for EasyBuild v3.5.1 (see :ref: `release_notes_eb351` ) * **release 20180112.01** ( `Jan 12th 2018` ): add definitions for ``2018a`` common toolchains (see :ref: `common_toolchains` ) * **release 20171215.01** ( `Dec 15th 2017` ): update release notes for EasyBuild v3.5.0 (see :ref: `release_notes_eb350` ) * **release 20171208.01** ( `Dec 8th 2017` ): document support for user-defined hooks (see :ref: `hooks` ) * **release 20171017.01** ( `Oct 17th 2017` ): update release notes for EasyBuild v3.4.1 (see :ref: `release_notes_eb341` ) * **release 20170910.01** ( `Sept 10th 2017` ): update release notes for EasyBuild v3.4.0 (see :ref: `release_notes_eb340` ) * **release 20170906.01** ( `Sept 6th 2017` ): document ``--trace`` (see :ref: `trace` ) * **release 20170824.02** ( `Aug 24th 2017` ): document ``--inject-checksums`` (see :ref: `inject_checksums` ) * **release 20170824.01** ( `Aug 24th 2017` ): document ``--backup-modules`` (see :ref: `backup_modules` ) * **release 20170712.01** ( `July 12th 2017` ): update release notes for EasyBuild v3.3.1 (see :ref: `release_notes_eb331` ) * **release 20170708.01** ( `July 8th 2017` ): add documentation on :ref: `github_merge_pr` * **release 20170705.01** ( `July 5th 2017` ): clarify :ref: `contributing_review_process_pr_requirements` , add page listing :ref: `maintainers` * **release 20170626.01** ( `June 26th 2017` ): update release notes for EasyBuild v3.3.0 (see :ref: `release_notes_eb330` ) * **release 20170623.01** ( `June 23rd 2017` ): document use of ``checksums`` & alternative formats for ``sources`` (see :ref: `common_easyconfig_param_sources` ) * **release 20170622.01** ( `June 22nd 2017` ): document support for detecting loaded modules (see :ref: `detect_loaded_modules` ) * **release 20170522.01** ( `May 22nd 2017` ): document deprecated behaviour in EasyBuild v3.2.0 (see :ref: `overview_deprecated` ) * **release 20170512.01** ( `May 12th 2017` ): update release notes for EasyBuild v3.2.1 (see :ref: `release_notes_eb321` ) * **release 20170505.01** ( `May 5th 2017` ): update release notes for EasyBuild v3.2.0 (see :ref: `release_notes_eb320` ) * **release 20170320.01** ( `Mar 20th 2017` ): update release notes for EasyBuild v3.1.2 (see :ref: `release_notes_eb312` ) * **release 20170307.01** ( `Mar 7th 2017` ): update release notes for EasyBuild v3.1.1 (see :ref: `release_notes_eb311` ) * **release 20170221.01** ( `Feb 21st 2017` ): add documentation on :ref: `contributing` * **release 20170209.01** ( `Feb 9th 2017` ): add documentation on implementing easyblocks (see :ref: `implementing_easyblocks` ) * **release 20170203.01** ( `Feb 3rd 2017` ): update release notes for EasyBuild v3.1.0 (see :ref: `release_notes_eb310` ) * **release 20170129.01** ( `Jan 29th 2017` ): update ``--optarch`` documentation (see :ref: `controlling_compiler_optimization_flags_optarch_per_compiler` ) * **release 20170109.01** ( `Jan 9th 2017` ): add documentation on :ref: `common_toolchains` * **release 20161222.01** ( `Dec 22nd 2016` ): update documentation and release notes for EasyBuild v3.0.2 (see :ref: `release_notes_eb302` ) * **release 20161218.01** ( `Dec 18th 2016` ): document need to download ``vsc-*`` source tarballs from PyPI (see :ref: `bootstrap_offline` ) * **release 20161202.01** ( `Dec 2nd 2016` ): add documentation on Cray support (see :ref: `cray_support` ) * **release 20161130.01** ( `Nov 16th 2016` ): update release notes for EasyBuild v3.0.1 (see :ref: `release_notes_eb301` ) * **release 20161117.01** ( `Nov 17th 2016` ): update mentions of default configuration according to updated default in EasyBuild v3.0.0 * **release 20161116.01** ( `Nov 16th 2016` ): update documentation and release notes for EasyBuild v3.0.0 (see :ref: `release_notes_eb300` ) * :ref: `archived_easyconfigs` * :ref: `rpath_support` * **release 20161028.01** ( `Oct 28th 2016` ): recommend using ``--rebuild`` rather than ``--force`` (see :ref: `rebuild_option` ) * **release 20161023.01** ( `Oct 24th 2016` ): add section on iterating over configure/build/install options (see :ref: `configure_build_install_command_options_iterate` ) * **release 20161014.01** ( `Oct 14th 2016` ): update documentation on deprecated functionality (see :ref: `deprecated` ) * **release 20161010.01** ( `Oct 10th 2016` ): add page for EasyBuild demos (see :ref: `demos` ) * **release 20160923.02** ( `Sept 23rd 2016` ): update release notes for EasyBuild v2.9.0 (see :ref: `release_notes_eb290` ) * **release 20160923.01** ( `Sept 23rd 2016` ): add generated list of supported software (see :ref: `list_software` ) * **release 20160713.01** ( `July 13th 2016` ): update release notes for EasyBuild v2.8.2 (see :ref: `release_notes_eb282` ) * **release 20160613.01** ( `June 13th 2016` ): clarify required dependencies (setuptools, vsc-install) (see :ref: `required_python_packages` ) * **release 20160607.01** ( `June 7th 2016` ): update/complete documentation on GitHub integration (see :ref: `integration_with_github` ) * **release 20160530.01** ( `May 30th 2016` ): update release notes for EasyBuild v2.8.1 (see :ref: `release_notes_eb281` ) * **release 20160518.01** ( `May 18th 2016` ): update release notes for EasyBuild v2.8.0 (see :ref: `release_notes_eb280` ) * **release 20160429.01** ( `April 29th 2016` ): add section on updating EasyBuild, see :ref: `updating` * **release 20160320.01** ( `March 20th 2016` ): update release notes for EasyBuild v2.7.0 (see :ref: `release_notes_eb270` ) * **release 20160228.01** ( `February 28th 2016` ): * update documentation on external modules metadata (see :ref: `using_external_modules_metadata` ) * **release 20160214.01** ( `February 14th 2016` ): * add section on ``--show-config`` (see :ref: `configuration_show_config` ) * **release 20160126.02** ( `January 26th 2016` ): packaging support is stable since EasyBuild v2.5.0 (see :ref: `packaging_support` ) * **release 20160126.01** ( `January 26th 2016` ): update release notes for EasyBuild v2.6.0 (see :ref: `release_notes_eb260` ) * **release 20151217.01** ( `December 17th 2015` ): update release notes for EasyBuild v2.5.0 (see :ref: `release_notes_eb250` ) * **release 20151209.01** ( `December 9th 2015` ): * add documentation on controlling compiler optimizations flags, see :ref: `controlling_compiler_optimization_flags` * **release 20151110.01** ( `November 10th 2015` ): update release notes for EasyBuild v2.4.0 (see :ref: `release_notes_eb240` ) * **release 20151108.01** ( `November 8th 2015` ): * document (experimental) support for using minimal toolchains (see :ref: `minimal_toolchains` ) * **release 20151028.01** ( `October 28th 2015` ): document extended dry run mechanism (see :ref: `extended_dry_run` ) * **release 20151021.01** ( `October 21st 2015` ): * include initial documentation on experimental support for easyconfig files in YAML syntax ( ``.yeb`` ), see :ref: `easyconfig_yeb_format` * **release 20150902.01** ( `September 2nd 2015` ): update release notes for EasyBuild v2.3.0 (see :ref: `release_notes_eb230` ) * **release 20150715.01** ( `July 15th 2015` ): update release notes for EasyBuild v2.2.0 (see :ref: `release_notes_eb220` ) * **release 20150714.01** ( `July 14th 2015` ): add documentation on :ref: `packaging_support` * **release 20150709.01** ( `July 9th 2015` ): add documentation on :ref: `submitting_jobs` * **release 20150708.01** ( `July 8th 2015` ): * add documentation on ``--include-*`` options (see :ref: `including_additional_python_modules` ) * **release 20150703.01** ( `July 3rd 2015` ): * fix outdated documentation on ``easyblock`` parameter (see :ref: `writing_easyconfigs_easyblock_spec` ) * **release 20150624.01** ( `June 24th 2015` ): mention ``MigrateFromEBToHMNS`` module naming scheme in section on ``--module-only`` (see :ref: `module_only_additional` ) * **release 20150610.01** ( `June 10th 2015` ): update :ref: `installing_lmod` for Lmod v6.0 * **release 20150518.01** ( `May 18th 2015` ): * update section on ``--search`` : better examples + highlight ability to search via regular expression (see :ref: `searching_for_easyconfigs` ) * update release notes for EasyBuild v2.1.1 (see :ref: `release_notes_eb211` ) * **release 20150506.01** ( `May 6th 2015` ): updated documentation for EasyBuild v2.1.1 * add note on ``$LMOD_CMD`` fallback to find full path to ``lmod`` binary (see :ref: `required_modules_tool` ) * **release 20150430.01** ( `Apr 30th 2015` ): updated documentation for EasyBuild v2.1.0 * also cover extensions in page on concepts and terminology (see :ref: `extensions` ) * add documentation on :ref: `partial_installations` , covering ``--stop`` , ``--skip`` and ``--module-only`` * add documentation on :ref: `manipulating_dependencies` , covering ``--filter-deps`` and ``--hide-deps`` * document ``-module-syntax`` configuration option (see :ref: `module_syntax` ) * add note on detection of unknown ``$EASYBUILD`` -prefixed environment variables (see :ref: `configuration_env_vars` ) * mention support for prepending/appending to ``--robot-paths`` (see :ref: `robot_search_path_prepend_append` ) * update release notes for EasyBuild v2.1.0 (see :ref: `release_notes` ) * **release 20150425.01** ( `Apr 25th 2015` ): * add documentation on :ref: `using_external_modules` * **release 20150407.01** ( `Apr 7th 2015` ): * add link to :ref: `unit_tests` page in dedicated section at :ref: `installation` page (see :ref: `install_running_unit_tests` ) * clarify relation between ``--installpath`` , ``--prefix`` , ``-subdir-*`` and ``--installpath-*`` configuration options (see :ref: `installpath` ) * mention ``--show-default-configfiles`` command line option in relevant section (see :ref: `default_configuration_files` ) * **release 20150327.01** ( `Mar 27th 2015` ): * documented deprecated functionality w.r.t. error reporting (see :ref: `depr_error_reporting` ) * **release 20150316.01** ( `Mar 16th 2015` ): * include list of EasyBuild repositories cloned by ``install-EasyBuild-develop.sh`` script (see :ref: `install_latest_develop_using_script` ) * **release 20150312.01** ( `Mar 12th 2015` ): * enhance documentation w.r.t. template values in configuration files (see :ref: `configuration_file_templates_constants` ) * improve documentation on ``--robot`` and ``--robot-paths`` (see :ref: `controlling_robot_search_path` ) * **release 20150310.01** ( `Mar 10th 2015` ): * document peculiarties w.r.t. dependencies in combination with a ``dummy`` toolchain (see :ref: `dependency_specs` ) * document ``clean_gists.py`` script (see :ref: `clean_gists_script` ) * mention taking into account of proxy settings for downloading sources (see :ref: `common_easyconfig_param_sources` ) * **release 20150306.03** ( `Mar 6th 2015` ): add release notes for EasyBuild v2.0.0 (see :ref: `release_notes` ) * **release 20150306.02** ( `Mar 6th 2015` ): * add documentation on GitHub integration features (see :ref: `integration_with_github` ), mainly ``--from-pr`` (see :ref: `from_pr` ) * document locations where (specified) easyconfig files are being searched for (see :ref: `specifying_easyconfigs` ) * **release 20150306.01** ( `Mar 6th 2015` ): * add documentation on removed functionality (see :ref: `removed_functionality` ) * clean up documentation on deprecated functionality (see :ref: `deprecated` ) * add documentation on provided scripts, in particular ``fix-broken-easyconfigs.py`` (see :ref: `useful_scripts` ) * **release 20150302.01** ( `Mar 2nd 2015` ): update/cleanup documentation on :ref: `alt_inst_methods` * **release 20150227.02** ( `Feb 27th 2015` ): add documentation on the EasyBuild unit test suites, see :ref: `unit_tests` * **release 20150227.01** ( `Feb 27th 2015` ): enhance documentation w.r.t. to (optional dependencies), see :ref: `installation` * **release 20150220.01** ( `Feb 20th 2015` ): * document new advanced bootstrapping options: skipping stage 0 and providing source tarballs (see :ref: `installation` ) * **release 20150219.01** ( `Feb 19th 2015` ): first updates for EasyBuild v2.0.0 * extend section on (default) EasyBuild configuration files to also cover ``$XDG_CONFIG_DIRS`` (see :ref: `configuration_file:` ) * **release 20150205.01** ( `Feb 5th 2015` ): include information on deprecated functionality in (generic) easyblocks (see :ref: `deprecated` ) * **release 20150126.01** ( `Jan 26th 2015` ): * fix ``pip`` installation prefix option ( :ref: `alt_inst_methods` ) * clarify need to have modules tool binary available in ``$PATH`` ( :ref: `installation` ) * **release 20150112.01** ( `Jan 12th 2015` ): mention need to escape ``%`` when setting log file format via config file (see :ref: `logfile_format` ) * **release 20150107.01** ( `Jan 7th 2015` ): document behaviour of `dummy` toolchain ( :ref: `dummy_toolchain` ) * **release 20141219.01** ( `Dec 19th 2014` ): add release notes for EasyBuild v1.16.1 (see :ref: `release_notes` ) * **release 20141218.01** ( `Dec 18th 2014` ): add release notes for EasyBuild v1.16.0 (see :ref: `release_notes` ) * **release 20141217.01** ( `Dec 17th 2014` ): document deprecated functionality in EasyBuild v1.x ( :ref: `deprecated` ) * **release 20141204.02** ( `Dec 4th 2014` ): add EasyBuild release notes (see :ref: `release_notes` ) * **release 20141204.01** ( `Dec 4th 2014` ): updates for EasyBuild v1.16.0 * document details w.r.t. (controlling of) robot search path, incl. ``--robot-paths`` ( :ref: `using_the_easybuild_command_line` ) * document use of templates and constants in EasyBuild configuration files ( :ref: `configuring_easybuild` ) * bump EasyBuild version to 1.16.0 * changed release number scheme for documentation (based on datestamp) * **release 1.0.3** ( `Dec 3rd 2014` ): add page on :ref: `code_style` * **release 1.0.2** ( `Nov 6th 2014` ): typo and grammar fixes, update Lmod installation instructions for Lmod v5.8 * **release 1.0.1** ( `Nov 4th 2014` ): fix issues with Changelog * **release 1.0.0** `(Nov 4th 2014)` : initial release of revamped EasyBuild documentation @ http://easybuild.readthedocs.org, covering basic topics: * introductory topics: * :ref: `what_is_easybuild` * :ref: `concepts_and_terminology` * :ref: `typical_workflow` * getting started: * :ref: `installation` * :ref: `configuring_easybuild` * basic usage topics: * :ref: `using_the_easybuild_command_line` * :ref: `writing_easyconfig_files` * :ref: `understanding_easyBuild_logs`","title":"Changelog for EasyBuild documentation"},{"location":"changelog-docs/#changelog-for-easybuild-documentation","text":"Note For the EasyBuild release notes, see here . Warning This page will soon replace https://docs.easybuild.io/en/latest/Changelog.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Changelog.rst in easybuilders/easybuild repo target: docs/changelog-docs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _changelog: Changelog for EasyBuild documentation ------------------------------------- (for EasyBuild release notes, see :ref: `release_notes` ) * **release 20221021.01** ( `Oct 21st 2022` ): update release notes for EasyBuild v4.6.2 (see :ref: `release_notes_eb462` ) * **release 20220912.01** ( `Sep 12th 2022` ): update release notes for EasyBuild v4.6.1 (see :ref: `release_notes_eb461` ) * **release 20220708.01** ( `Jul 8th 2022` ): update release notes for EasyBuild v4.6.0 (see :ref: `release_notes_eb460` ) * **release 20220608.01** ( `Jun 8th 2022` ): update release notes for EasyBuild v4.5.5 (see :ref: `release_notes_eb455` ) * **release 20220331.01** ( `Mar 31st 2022` ): update release notes for EasyBuild v4.5.4 (see :ref: `release_notes_eb454` ) * **release 20220211.01** ( `Feb 11th 2022` ): update release notes for EasyBuild v4.5.3 (see :ref: `release_notes_eb453` ) * **release 20220124.01** ( `Jan 24th 2022` ): update release notes for EasyBuild v4.5.2 (see :ref: `release_notes_eb452` ) * **release 20211213.01** ( `Dec 13th 2021` ): update release notes for EasyBuild v4.5.1 (see :ref: `release_notes_eb451` ) * **release 20211029.01** ( `Oct 29th 2021` ): update release notes for EasyBuild v4.5.0 (see :ref: `release_notes_eb450` ) * **release 20210907.01** ( `Sep 7th 2021` ): update release notes for EasyBuild v4.4.2 (see :ref: `release_notes_eb442` ) * **release 20210706.01** ( `Jul 6th 2021` ): update release notes for EasyBuild v4.4.1 (see :ref: `release_notes_eb441` ) * **release 20210602.01** ( `Jun 2nd 2021` ): update release notes for EasyBuild v4.4.0 (see :ref: `release_notes_eb440` ) * **release 20210409.01** ( `Apr 9th 2021` ): update release notes for EasyBuild v4.3.4 (see :ref: `release_notes_eb434` ) * **release 20210223.01** ( `Feb 23rd 2021` ): update release notes for EasyBuild v4.3.3 (see :ref: `release_notes_eb433` ) * **release 20201210.01** ( `Dec 10th 2020` ): update release notes for EasyBuild v4.3.2 (see :ref: `release_notes_eb432` ) * **release 20201029.01** ( `Oct 29th 2020` ): update release notes for EasyBuild v4.3.1 (see :ref: `release_notes_eb431` ) * **release 20200913.01** ( `Sep 13th 2020` ): update release notes for EasyBuild v4.3.0 (see :ref: `release_notes_eb430` ) * **release 20200708.01** ( `July 8th 2020` ): update release notes for EasyBuild v4.2.2 (see :ref: `release_notes_eb422` ) * **release 20200520.01** ( `May 20th 2020` ): update release notes for EasyBuild v4.2.1 (see :ref: `release_notes_eb421` ) * **release 20200414.01** ( `Apr 14th 2020` ): * document new EasyBuild locking mechanism (see :ref: `locks` ) * document support for creating index files (see :ref: `easyconfigs_index` ) * update release notes for EasyBuild v4.2.0 (see :ref: `release_notes_eb420` ) * **release 20200316.01** ( `Mar 16th 2020` ): update release notes for EasyBuild v4.1.2 (see :ref: `release_notes_eb412` ) * **release 20200116.01** ( `Jan 16th 2020` ): update release notes for EasyBuild v4.1.1 (see :ref: `release_notes_eb411` ) * **release 20191204.01** ( `Dec 4th 2019` ): update release notes for EasyBuild v4.1.0 (see :ref: `release_notes_eb410` ) * **release 20191015.01** ( `Oct 15th 2019` ): update release notes for EasyBuild v4.0.1 (see :ref: `release_notes_eb401` ) * **release 20190920.01** ( `Sep 20th 2019` ): update release notes for EasyBuild v4.0.0 (see :ref: `release_notes_eb400` ); see also :ref: `eb4_changes_overview` * **release 20190823.01** ( `Aug 23rd 2019` ): update release notes for EasyBuild v3.9.4 (see :ref: `release_notes_eb394` ) * **release 20190708.01** ( `Jul 8th 2019` ): update release notes for EasyBuild v3.9.3 (see :ref: `release_notes_eb393` ) * **release 20190609.01** ( `Jun 9th 2019` ): update release notes for EasyBuild v3.9.2 (see :ref: `release_notes_eb392` ) * **release 20190908.01** ( `Jun 8th 2019` ): update documentation on support for generating (Singularity) container recipes/images (see :ref: `containers` ) * **release 20190520.01** ( `May 20th 2019` ): update release notes for EasyBuild v3.9.1 (see :ref: `release_notes_eb391` ) * **release 20190412.01** ( `Apr 12th 2019` ): update release notes for EasyBuild v3.9.0 (see :ref: `release_notes_eb390` ) * **release 20190129.01** ( `Jan 29th 2019` ): update release notes for EasyBuild v3.8.1 (see :ref: `release_notes_eb381` ) * **release 20190124.01** ( `Jan 24th 2019` ): add definitions for ``2019a`` common toolchains (see :ref: `common_toolchains` ) * **release 20181218.01** ( `Dec 18th 2018` ): update release notes for EasyBuild v3.8.0 (see :ref: `release_notes_eb380` ) * **release 20181114.01** ( `Nov 14th 2018` ): add documentation on deprecated easyconfigs & toolchains ( :ref: `deprecated_easyconfigs` ) * **release 20181104.01** ( `Nov 4th 2018` ): update ``--job`` documentation to also cover ``Slurm`` job backend (see :ref: `submitting_jobs` ) * **release 20181018.01** ( `Oct 18th 2018` ): update release notes for EasyBuild v3.7.1 (see :ref: `release_notes_eb371` ) * **release 20180925.01** ( `Sep 25th 2018` ): update release notes for EasyBuild v3.7.0 (see :ref: `release_notes_eb370` ) * **release 20180921.01** ( `Sep 21st 2018` ): document support for wrapping dependencies (see :ref: `wrapping_dependencies` ) * **release 20180920.01** ( `Sep 20th 2018` ): document support for downloading sources directly from a Git repository (see :ref: `common_easyconfig_param_sources_git_config` ) * **release 20180711.01** ( `Jul 11th 2018` ): update release notes for EasyBuild v3.6.2 (see :ref: `release_notes_eb362` ) * **release 20180710.01** ( `Jul 10th 2018` ): add definitions for ``2018b`` common toolchains (see :ref: `common_toolchains` ) * **release 20180528.01** ( `May 28th 2018` ): update release notes for EasyBuild v3.6.1 (see :ref: `release_notes_eb361` ) * **release 20180427.01** ( `Apr 27th 2018` ): update release notes for EasyBuild v3.6.0 (see :ref: `release_notes_eb360` ) * **release 20180425.01** ( `Apr 25th 2018` ): add documentation on support for generating container recipes & images (see :ref: `containers` ) * **release 20180307.01** ( `Mar 7th 2018` ): update release notes for EasyBuild v3.5.3 (see :ref: `release_notes_eb353` ) * **release 20180302.01** ( `Mar 2nd 2018` ): update release notes for EasyBuild v3.5.2 (see :ref: `release_notes_eb352` ) * **release 20180116.01** ( `Jan 16th 2018` ): update release notes for EasyBuild v3.5.1 (see :ref: `release_notes_eb351` ) * **release 20180112.01** ( `Jan 12th 2018` ): add definitions for ``2018a`` common toolchains (see :ref: `common_toolchains` ) * **release 20171215.01** ( `Dec 15th 2017` ): update release notes for EasyBuild v3.5.0 (see :ref: `release_notes_eb350` ) * **release 20171208.01** ( `Dec 8th 2017` ): document support for user-defined hooks (see :ref: `hooks` ) * **release 20171017.01** ( `Oct 17th 2017` ): update release notes for EasyBuild v3.4.1 (see :ref: `release_notes_eb341` ) * **release 20170910.01** ( `Sept 10th 2017` ): update release notes for EasyBuild v3.4.0 (see :ref: `release_notes_eb340` ) * **release 20170906.01** ( `Sept 6th 2017` ): document ``--trace`` (see :ref: `trace` ) * **release 20170824.02** ( `Aug 24th 2017` ): document ``--inject-checksums`` (see :ref: `inject_checksums` ) * **release 20170824.01** ( `Aug 24th 2017` ): document ``--backup-modules`` (see :ref: `backup_modules` ) * **release 20170712.01** ( `July 12th 2017` ): update release notes for EasyBuild v3.3.1 (see :ref: `release_notes_eb331` ) * **release 20170708.01** ( `July 8th 2017` ): add documentation on :ref: `github_merge_pr` * **release 20170705.01** ( `July 5th 2017` ): clarify :ref: `contributing_review_process_pr_requirements` , add page listing :ref: `maintainers` * **release 20170626.01** ( `June 26th 2017` ): update release notes for EasyBuild v3.3.0 (see :ref: `release_notes_eb330` ) * **release 20170623.01** ( `June 23rd 2017` ): document use of ``checksums`` & alternative formats for ``sources`` (see :ref: `common_easyconfig_param_sources` ) * **release 20170622.01** ( `June 22nd 2017` ): document support for detecting loaded modules (see :ref: `detect_loaded_modules` ) * **release 20170522.01** ( `May 22nd 2017` ): document deprecated behaviour in EasyBuild v3.2.0 (see :ref: `overview_deprecated` ) * **release 20170512.01** ( `May 12th 2017` ): update release notes for EasyBuild v3.2.1 (see :ref: `release_notes_eb321` ) * **release 20170505.01** ( `May 5th 2017` ): update release notes for EasyBuild v3.2.0 (see :ref: `release_notes_eb320` ) * **release 20170320.01** ( `Mar 20th 2017` ): update release notes for EasyBuild v3.1.2 (see :ref: `release_notes_eb312` ) * **release 20170307.01** ( `Mar 7th 2017` ): update release notes for EasyBuild v3.1.1 (see :ref: `release_notes_eb311` ) * **release 20170221.01** ( `Feb 21st 2017` ): add documentation on :ref: `contributing` * **release 20170209.01** ( `Feb 9th 2017` ): add documentation on implementing easyblocks (see :ref: `implementing_easyblocks` ) * **release 20170203.01** ( `Feb 3rd 2017` ): update release notes for EasyBuild v3.1.0 (see :ref: `release_notes_eb310` ) * **release 20170129.01** ( `Jan 29th 2017` ): update ``--optarch`` documentation (see :ref: `controlling_compiler_optimization_flags_optarch_per_compiler` ) * **release 20170109.01** ( `Jan 9th 2017` ): add documentation on :ref: `common_toolchains` * **release 20161222.01** ( `Dec 22nd 2016` ): update documentation and release notes for EasyBuild v3.0.2 (see :ref: `release_notes_eb302` ) * **release 20161218.01** ( `Dec 18th 2016` ): document need to download ``vsc-*`` source tarballs from PyPI (see :ref: `bootstrap_offline` ) * **release 20161202.01** ( `Dec 2nd 2016` ): add documentation on Cray support (see :ref: `cray_support` ) * **release 20161130.01** ( `Nov 16th 2016` ): update release notes for EasyBuild v3.0.1 (see :ref: `release_notes_eb301` ) * **release 20161117.01** ( `Nov 17th 2016` ): update mentions of default configuration according to updated default in EasyBuild v3.0.0 * **release 20161116.01** ( `Nov 16th 2016` ): update documentation and release notes for EasyBuild v3.0.0 (see :ref: `release_notes_eb300` ) * :ref: `archived_easyconfigs` * :ref: `rpath_support` * **release 20161028.01** ( `Oct 28th 2016` ): recommend using ``--rebuild`` rather than ``--force`` (see :ref: `rebuild_option` ) * **release 20161023.01** ( `Oct 24th 2016` ): add section on iterating over configure/build/install options (see :ref: `configure_build_install_command_options_iterate` ) * **release 20161014.01** ( `Oct 14th 2016` ): update documentation on deprecated functionality (see :ref: `deprecated` ) * **release 20161010.01** ( `Oct 10th 2016` ): add page for EasyBuild demos (see :ref: `demos` ) * **release 20160923.02** ( `Sept 23rd 2016` ): update release notes for EasyBuild v2.9.0 (see :ref: `release_notes_eb290` ) * **release 20160923.01** ( `Sept 23rd 2016` ): add generated list of supported software (see :ref: `list_software` ) * **release 20160713.01** ( `July 13th 2016` ): update release notes for EasyBuild v2.8.2 (see :ref: `release_notes_eb282` ) * **release 20160613.01** ( `June 13th 2016` ): clarify required dependencies (setuptools, vsc-install) (see :ref: `required_python_packages` ) * **release 20160607.01** ( `June 7th 2016` ): update/complete documentation on GitHub integration (see :ref: `integration_with_github` ) * **release 20160530.01** ( `May 30th 2016` ): update release notes for EasyBuild v2.8.1 (see :ref: `release_notes_eb281` ) * **release 20160518.01** ( `May 18th 2016` ): update release notes for EasyBuild v2.8.0 (see :ref: `release_notes_eb280` ) * **release 20160429.01** ( `April 29th 2016` ): add section on updating EasyBuild, see :ref: `updating` * **release 20160320.01** ( `March 20th 2016` ): update release notes for EasyBuild v2.7.0 (see :ref: `release_notes_eb270` ) * **release 20160228.01** ( `February 28th 2016` ): * update documentation on external modules metadata (see :ref: `using_external_modules_metadata` ) * **release 20160214.01** ( `February 14th 2016` ): * add section on ``--show-config`` (see :ref: `configuration_show_config` ) * **release 20160126.02** ( `January 26th 2016` ): packaging support is stable since EasyBuild v2.5.0 (see :ref: `packaging_support` ) * **release 20160126.01** ( `January 26th 2016` ): update release notes for EasyBuild v2.6.0 (see :ref: `release_notes_eb260` ) * **release 20151217.01** ( `December 17th 2015` ): update release notes for EasyBuild v2.5.0 (see :ref: `release_notes_eb250` ) * **release 20151209.01** ( `December 9th 2015` ): * add documentation on controlling compiler optimizations flags, see :ref: `controlling_compiler_optimization_flags` * **release 20151110.01** ( `November 10th 2015` ): update release notes for EasyBuild v2.4.0 (see :ref: `release_notes_eb240` ) * **release 20151108.01** ( `November 8th 2015` ): * document (experimental) support for using minimal toolchains (see :ref: `minimal_toolchains` ) * **release 20151028.01** ( `October 28th 2015` ): document extended dry run mechanism (see :ref: `extended_dry_run` ) * **release 20151021.01** ( `October 21st 2015` ): * include initial documentation on experimental support for easyconfig files in YAML syntax ( ``.yeb`` ), see :ref: `easyconfig_yeb_format` * **release 20150902.01** ( `September 2nd 2015` ): update release notes for EasyBuild v2.3.0 (see :ref: `release_notes_eb230` ) * **release 20150715.01** ( `July 15th 2015` ): update release notes for EasyBuild v2.2.0 (see :ref: `release_notes_eb220` ) * **release 20150714.01** ( `July 14th 2015` ): add documentation on :ref: `packaging_support` * **release 20150709.01** ( `July 9th 2015` ): add documentation on :ref: `submitting_jobs` * **release 20150708.01** ( `July 8th 2015` ): * add documentation on ``--include-*`` options (see :ref: `including_additional_python_modules` ) * **release 20150703.01** ( `July 3rd 2015` ): * fix outdated documentation on ``easyblock`` parameter (see :ref: `writing_easyconfigs_easyblock_spec` ) * **release 20150624.01** ( `June 24th 2015` ): mention ``MigrateFromEBToHMNS`` module naming scheme in section on ``--module-only`` (see :ref: `module_only_additional` ) * **release 20150610.01** ( `June 10th 2015` ): update :ref: `installing_lmod` for Lmod v6.0 * **release 20150518.01** ( `May 18th 2015` ): * update section on ``--search`` : better examples + highlight ability to search via regular expression (see :ref: `searching_for_easyconfigs` ) * update release notes for EasyBuild v2.1.1 (see :ref: `release_notes_eb211` ) * **release 20150506.01** ( `May 6th 2015` ): updated documentation for EasyBuild v2.1.1 * add note on ``$LMOD_CMD`` fallback to find full path to ``lmod`` binary (see :ref: `required_modules_tool` ) * **release 20150430.01** ( `Apr 30th 2015` ): updated documentation for EasyBuild v2.1.0 * also cover extensions in page on concepts and terminology (see :ref: `extensions` ) * add documentation on :ref: `partial_installations` , covering ``--stop`` , ``--skip`` and ``--module-only`` * add documentation on :ref: `manipulating_dependencies` , covering ``--filter-deps`` and ``--hide-deps`` * document ``-module-syntax`` configuration option (see :ref: `module_syntax` ) * add note on detection of unknown ``$EASYBUILD`` -prefixed environment variables (see :ref: `configuration_env_vars` ) * mention support for prepending/appending to ``--robot-paths`` (see :ref: `robot_search_path_prepend_append` ) * update release notes for EasyBuild v2.1.0 (see :ref: `release_notes` ) * **release 20150425.01** ( `Apr 25th 2015` ): * add documentation on :ref: `using_external_modules` * **release 20150407.01** ( `Apr 7th 2015` ): * add link to :ref: `unit_tests` page in dedicated section at :ref: `installation` page (see :ref: `install_running_unit_tests` ) * clarify relation between ``--installpath`` , ``--prefix`` , ``-subdir-*`` and ``--installpath-*`` configuration options (see :ref: `installpath` ) * mention ``--show-default-configfiles`` command line option in relevant section (see :ref: `default_configuration_files` ) * **release 20150327.01** ( `Mar 27th 2015` ): * documented deprecated functionality w.r.t. error reporting (see :ref: `depr_error_reporting` ) * **release 20150316.01** ( `Mar 16th 2015` ): * include list of EasyBuild repositories cloned by ``install-EasyBuild-develop.sh`` script (see :ref: `install_latest_develop_using_script` ) * **release 20150312.01** ( `Mar 12th 2015` ): * enhance documentation w.r.t. template values in configuration files (see :ref: `configuration_file_templates_constants` ) * improve documentation on ``--robot`` and ``--robot-paths`` (see :ref: `controlling_robot_search_path` ) * **release 20150310.01** ( `Mar 10th 2015` ): * document peculiarties w.r.t. dependencies in combination with a ``dummy`` toolchain (see :ref: `dependency_specs` ) * document ``clean_gists.py`` script (see :ref: `clean_gists_script` ) * mention taking into account of proxy settings for downloading sources (see :ref: `common_easyconfig_param_sources` ) * **release 20150306.03** ( `Mar 6th 2015` ): add release notes for EasyBuild v2.0.0 (see :ref: `release_notes` ) * **release 20150306.02** ( `Mar 6th 2015` ): * add documentation on GitHub integration features (see :ref: `integration_with_github` ), mainly ``--from-pr`` (see :ref: `from_pr` ) * document locations where (specified) easyconfig files are being searched for (see :ref: `specifying_easyconfigs` ) * **release 20150306.01** ( `Mar 6th 2015` ): * add documentation on removed functionality (see :ref: `removed_functionality` ) * clean up documentation on deprecated functionality (see :ref: `deprecated` ) * add documentation on provided scripts, in particular ``fix-broken-easyconfigs.py`` (see :ref: `useful_scripts` ) * **release 20150302.01** ( `Mar 2nd 2015` ): update/cleanup documentation on :ref: `alt_inst_methods` * **release 20150227.02** ( `Feb 27th 2015` ): add documentation on the EasyBuild unit test suites, see :ref: `unit_tests` * **release 20150227.01** ( `Feb 27th 2015` ): enhance documentation w.r.t. to (optional dependencies), see :ref: `installation` * **release 20150220.01** ( `Feb 20th 2015` ): * document new advanced bootstrapping options: skipping stage 0 and providing source tarballs (see :ref: `installation` ) * **release 20150219.01** ( `Feb 19th 2015` ): first updates for EasyBuild v2.0.0 * extend section on (default) EasyBuild configuration files to also cover ``$XDG_CONFIG_DIRS`` (see :ref: `configuration_file:` ) * **release 20150205.01** ( `Feb 5th 2015` ): include information on deprecated functionality in (generic) easyblocks (see :ref: `deprecated` ) * **release 20150126.01** ( `Jan 26th 2015` ): * fix ``pip`` installation prefix option ( :ref: `alt_inst_methods` ) * clarify need to have modules tool binary available in ``$PATH`` ( :ref: `installation` ) * **release 20150112.01** ( `Jan 12th 2015` ): mention need to escape ``%`` when setting log file format via config file (see :ref: `logfile_format` ) * **release 20150107.01** ( `Jan 7th 2015` ): document behaviour of `dummy` toolchain ( :ref: `dummy_toolchain` ) * **release 20141219.01** ( `Dec 19th 2014` ): add release notes for EasyBuild v1.16.1 (see :ref: `release_notes` ) * **release 20141218.01** ( `Dec 18th 2014` ): add release notes for EasyBuild v1.16.0 (see :ref: `release_notes` ) * **release 20141217.01** ( `Dec 17th 2014` ): document deprecated functionality in EasyBuild v1.x ( :ref: `deprecated` ) * **release 20141204.02** ( `Dec 4th 2014` ): add EasyBuild release notes (see :ref: `release_notes` ) * **release 20141204.01** ( `Dec 4th 2014` ): updates for EasyBuild v1.16.0 * document details w.r.t. (controlling of) robot search path, incl. ``--robot-paths`` ( :ref: `using_the_easybuild_command_line` ) * document use of templates and constants in EasyBuild configuration files ( :ref: `configuring_easybuild` ) * bump EasyBuild version to 1.16.0 * changed release number scheme for documentation (based on datestamp) * **release 1.0.3** ( `Dec 3rd 2014` ): add page on :ref: `code_style` * **release 1.0.2** ( `Nov 6th 2014` ): typo and grammar fixes, update Lmod installation instructions for Lmod v5.8 * **release 1.0.1** ( `Nov 4th 2014` ): fix issues with Changelog * **release 1.0.0** `(Nov 4th 2014)` : initial release of revamped EasyBuild documentation @ http://easybuild.readthedocs.org, covering basic topics: * introductory topics: * :ref: `what_is_easybuild` * :ref: `concepts_and_terminology` * :ref: `typical_workflow` * getting started: * :ref: `installation` * :ref: `configuring_easybuild` * basic usage topics: * :ref: `using_the_easybuild_command_line` * :ref: `writing_easyconfig_files` * :ref: `understanding_easyBuild_logs`","title":"Changelog for EasyBuild documentation"},{"location":"code-style/","text":"Code style \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Code_style.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Code_style.rst in easybuilders/easybuild repo target: docs/code-style.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _code_style: Code style ========== The code style we follow in the EasyBuild code repository is mainly dictated by the Python standard `PEP8`_ . Highlighted PEP8 code style rules: * use **4 spaces** for indentation, **do not use tabs** for example, use ``:set tabstop 4`` and ``:set expandtab`` in Vim * indent items in a list at an extra 4 spaces nested lists can be indented at the same indentation as the first item in the list if it is on the first line, closing brackets must match visual indentation * use `optional underscores` , not camelCase, for variable, function and method names (i.e. ``poll.get_unique_voters()`` , **not** ``poll.getUniqueVoters`` ) * use ``InitialCaps`` for class names * in docstrings, don't use \"action words\" The only (major) exception to PEP8 is our preference for longer line lengths: line lengths **must be limited to 120 characters** , and should by preference be `shorter than 100 characters` (as opposed to the 80-character limit in PEP8). .. _PEP8: http://www.python.org/dev/peps/pep-0008 Notes ~~~~~ Code style in easyconfig files can be **automatically checked** using ``--check-contrib`` , for example: ``eb --check-contrib sympy-1.3-intel-2018a-Python-2.7.14.eb`` (see :ref: `contributing_review_process_code_style` for more details). Style guides that go a step beyond PEP8: * http://www.gramps-project.org/wiki/index.php?title=Programming_guidelines * http://code.google.com/p/volatility/wiki/StyleGuide Automatic rewriting of Python code: http://pypi.python.org/pypi/PythonTidy/1.22 ``pep8`` might be a useful tool to check PEP8 compliance: https://github.com/jcrocholl/pep8","title":"Code style"},{"location":"code-style/#code-style","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Code_style.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Code_style.rst in easybuilders/easybuild repo target: docs/code-style.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _code_style: Code style ========== The code style we follow in the EasyBuild code repository is mainly dictated by the Python standard `PEP8`_ . Highlighted PEP8 code style rules: * use **4 spaces** for indentation, **do not use tabs** for example, use ``:set tabstop 4`` and ``:set expandtab`` in Vim * indent items in a list at an extra 4 spaces nested lists can be indented at the same indentation as the first item in the list if it is on the first line, closing brackets must match visual indentation * use `optional underscores` , not camelCase, for variable, function and method names (i.e. ``poll.get_unique_voters()`` , **not** ``poll.getUniqueVoters`` ) * use ``InitialCaps`` for class names * in docstrings, don't use \"action words\" The only (major) exception to PEP8 is our preference for longer line lengths: line lengths **must be limited to 120 characters** , and should by preference be `shorter than 100 characters` (as opposed to the 80-character limit in PEP8). .. _PEP8: http://www.python.org/dev/peps/pep-0008 Notes ~~~~~ Code style in easyconfig files can be **automatically checked** using ``--check-contrib`` , for example: ``eb --check-contrib sympy-1.3-intel-2018a-Python-2.7.14.eb`` (see :ref: `contributing_review_process_code_style` for more details). Style guides that go a step beyond PEP8: * http://www.gramps-project.org/wiki/index.php?title=Programming_guidelines * http://code.google.com/p/volatility/wiki/StyleGuide Automatic rewriting of Python code: http://pypi.python.org/pypi/PythonTidy/1.22 ``pep8`` might be a useful tool to check PEP8 compliance: https://github.com/jcrocholl/pep8","title":"Code style"},{"location":"common-toolchains/","text":"Common toolchains \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Common-toolchains.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Common-toolchains.rst in easybuilders/easybuild repo target: docs/common-toolchains.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _common_toolchains: Common toolchains ================= This page documents the concept of *common toolchains* in the EasyBuild community; for a more general definition of what (compiler) toolchains are, see :ref: `toolchains` . .. contents :: :depth: 3 :backlinks: none .. _common_toolchains_what: Definition and motivation ------------------------- Picking a :ref: `compiler toolchain <toolchains>` to use is one of the first things you (need to) do when starting to use EasyBuild. This can be a daunting task, since a whole bunch of toolchains and different toolchain versions are readily available in EasyBuild. It may be difficult to determine which toolchain would be most rewarding to use, in terms of stability, performance of the resulting binaries and readily available easyconfig files. In an attempt to focus the effort of the EasyBuild community, the concept of so-called *common toolchains* was introduced. The idea is to compose and maintain a limited set of specific compiler toolchains, and try and convince many HPC sites to employ these toolchains. This helps in assuring stability of these toolchains w.r.t. which software can be built (correctly) with them, since they get significantly more testing. In addition, the expectation/hope is that more easyconfigs are contributed back to the central easyconfigs repository (https://github.com/easybuilders/easybuild-easyconfigs), resulting in a wide range of readily available easyconfig files using the common toolchains. The intention is to revise/update the definitions of the common toolchains regularly (see :ref: `common_toolchains_update_cycle` ), which again can be a joint effort that benefits many HPC sites. Currently, two different common toolchains are being maintained: ``foss`` and ``intel`` ; see below for more details, and also :ref: `common_toolchains_overview` . .. _common_toolchains_foss: ``foss`` toolchain ~~~~~~~~~~~~~~~~~~ The ``foss`` common compiler toolchain consists entirely of open source software (hence the name, derived from the common term 'FOSS', which is short for \"Free and Open Source Software\"). This toolchain consists of: * binutils (https://www.gnu.org/software/binutils/) * the GNU Compiler Collection (GCC, https://gcc.gnu.org/), i.e. ``gcc`` (C), ``g++`` (C++) and ``gfortran`` (Fortran) * the Open MPI library (https://www.open-mpi.org/) * the OpenBLAS (http://www.openblas.net/) + LAPACK (http://netlib.org/lapack) libraries (for ``foss`` < 2021a) * the FlexiBLAS library (https://www.mpi-magdeburg.mpg.de/projects/flexiblas), with OpenBLAS + LAPACK as backend (for ``foss`` >= 2021a) * the ScaLAPACK (http://netlib.org/scalapack) library is also included * the FFTW library (http://fftw.org/) .. note :: The toolchain name was deliberately chosen to be generic, to allow for swapping any of the toolchain components with a better (open source) alternative in the future, should the need or opportunity arise. .. _common_toolchains_intel: ``intel`` toolchain ~~~~~~~~~~~~~~~~~~~ The ``intel`` common compiler toolchain consists of the Intel compilers and libraries, i.e.: * the Intel C/C++/Fortran compilers (https://software.intel.com/en-us/intel-compilers), i.e. ``icc`` , ``icpc`` and ``ifort`` , * binutils and GCC, which serve as a base for the Intel compilers, are also included * the Intel MPI library (https://software.intel.com/en-us/intel-mpi-library) * the Intel Math Kernel Library (MKL, https://software.intel.com/en-us/intel-mkl) for BLAS/LAPACK/FFT functionality .. note :: This compiler toolchain includes licensed software; valid licenses must be available to install and use it. .. _common_toolchains_versioning_scheme: Versioning scheme for common toolchains --------------------------------------- The common toolchains follow a specific versioning scheme, which takes the :ref: `6-month update cycle <common_toolchains_update_cycle>` into account. Each revision of the common toolchains is versioned as the *year* in which it was defined, plus an additional ' ``a`` ' or ' ``b`` ' to indicate whether the toolchain was defined at the start of the year (' ``a`` ') or halfway through the year (' ``b`` '); in short, the common toolchains are versioned as ``<year>{a,b}`` . For example, ``foss/2016b`` is a revision of the ``foss`` that was composed mid-2016. A full historic overview of the ``foss`` and ``intel`` common toolchains is available in :ref: `common_toolchains_overview` . .. note :: Next to the versions that follow the ``<year>{a,b}`` versioning scheme, additional versions of the ``foss`` and ``intel`` versions are available as well. These versions are **not** considered to be part of the series of common toolchains (even though they consists of the same toolchain components). These versions may be site-specific, or compositions that were put in place to evaluate a potential future common toolchain. Typically, they are versioned as ``<year>.<month>`` , indicating when the most recent component included was released, or when that particular toolchain composition was defined. .. _common_toolchains_update_cycle: Update cycle for common toolchains ---------------------------------- The intention is to revise and update the common toolchains every 6 months: once in late December/early January (version ``<year>a`` ), and once in late June/early July (version ``<year>b`` ). This is meant be to be a community effort, in the sense that a proposal for an updated composition is shared and discussed before it is set in stone. Recent versions of each of the toolchain components are considered, taking into account stability, performance improvements, added features, known bugs/issues and experiences with those versions. Moreover, the proposed toolchain compositions are tested extensively, typically by rebuilding all available easyconfigs that are using the most recent revision of the common toolchains at that time. .. _common_toolchains_overview: Overview of common toolchains ----------------------------- .. _common_toolchains_overview_foss: Component versions in ``foss`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``foss`` | *date* | *binutils* | *GCC* | *Open MPI* | *FlexiBLAS* | *OpenBLAS* | *LAPACK* | *ScaLAPACK* | *FFTW* | +================+=============+============+===========+============+=============+============+=======================+==============+=============+ | ``2019a`` | Jan '19 | 2.31.1 | 8.2.0 | 3.1.3 | *(none)* | 0.3.5 | (incl. with OpenBLAS) | 2.0.2 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2019b`` | Sept '19 | 2.32 | 8.3.0 | 3.1.4 | *(none)* | 0.3.7 | (incl. with OpenBLAS) | 2.0.2 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2020a`` | May '20 | 2.34 | 9.3.0 | 4.0.3 | *(none)* | 0.3.9 | (incl. with OpenBLAS) | 2.1.0 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2020b`` | Nov '20 | 2.35 | 10.2.0 | 4.0.5 | *(none)* | 0.3.12 | (incl. with OpenBLAS) | 2.1.0 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2021a`` | May '21 | 2.36.1 | 10.3.0 | 4.1.1 | 3.0.4 | 0.3.15 | (incl. with OpenBLAS) | 2.1.0 | 3.3.9 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2021b`` | Oct '21 | 2.37 | 11.2.0 | 4.1.1 | 3.0.4 | 0.3.18 | (incl. with OpenBLAS) | 2.1.0 | 3.3.10 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2022a`` | Jun '22 | 2.38 | 11.3.0 | 4.1.4 | 3.2.0 | 0.3.20 | (incl. with OpenBLAS) | 2.2.0 | 3.3.10 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ *(components marked with* * * were patched)* .. _common_toolchains_overview_intel: Component versions in ``intel`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``intel`` | *date* | *binutils* | *GCC* | *Intel compilers* | *Intel MPI* | *Intel MKL* | +================+=============+=============+===========+====================+=============+==============+ | ``2019a`` | Jan '19 | 2.31.1 | 8.2.0 | 2019.1.144 | 2018.4.274 | 2019.1.144 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2019b`` | Sept '19 | 2.32 | 8.3.0 | 2019.5.281 | 2018.5.288 | 2019.5.281 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2020a`` | May'20 | 2.34 | 9.3.0 | 2020.1.217 | 2019.7.217 | 2020.1.217 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2020b`` | Nov'20 | 2.35 | 10.2.0 | 2020.4.304 | 2019.9.304 | 2020.4.304 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2021a`` | May'21 | 2.36.1 | 10.3.0 | 2021.2.0 | 2021.2.0 | 2021.2.0 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2021b`` | Oct'21 | 2.37 | 11.2.0 | 2021.4.0 | 2021.4.0 | 2021.4.0 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2022a`` | Jun'22 | 2.38 | 11.3.0 | 2022.1.0 | 2021.6.0 | 2022.1.0 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ .. _common_toolchains_overview_deprecated: Overview of common toolchains (deprecated versions) --------------------------------------------------- .. _common_toolchains_overview_foss_deprecated: Component versions in ``foss`` toolchain (deprecated versions) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``foss`` | *date* | *binutils* | *GCC* | *Open MPI* | *FlexiBLAS* | *OpenBLAS* | *LAPACK* | *ScaLAPACK* | *FFTW* | +================+=============+============+===========+============+=============+============+=======================+==============+=============+ | ``2014b`` | Jul '14 | ' *(none)* | 4.8.3 | 1.8.1 | *(none)* | 0.2.9 | 3.5.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2015a`` | Jan '15 | ' *(none)* | 4.9.2 | 1.8.4 | *(none)* | 0.2.13 | 3.5.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2015b`` | Jul '15 | 2.25 | 4.9.3 | 1.8.8 | *(none)* | 0.2.14 | 3.5.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2016a`` | Jan '16 | 2.25 | 4.9.3 | 1.10.2 | *(none)* | 0.2.15 | 3.6.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2016b`` | Jul '16 | 2.26 | 5.4.0 | 1.10.3 | *(none)* | 0.2.18 | 3.6.1 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2017a`` | Jan '17 | 2.27 | 6.3.0 | 2.0.2 | *(none)* | 0.2.19 | 3.7.0 | 2.0.2 | 3.3.6(-pl2) | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2017b`` | Jul '17 | 2.28 | 6.4.0 | 2.1.1 | *(none)* | 0.2.20* | (incl. with OpenBLAS) | 2.0.2 | 3.3.6(-pl2) | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2018a`` | Jan '18 | 2.28 | 6.4.0 | 2.1.2 | *(none)* | 0.2.20* | (incl. with OpenBLAS) | 2.0.2 | 3.3.7 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2018b`` | Jul '18 | 2.30 | 7.3.0 | 3.1.1 | *(none)* | 0.3.1 | (incl. with OpenBLAS) | 2.0.2 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ .. _common_toolchains_overview_intel_deprecated: Component versions in ``intel`` toolchain (deprecated versions) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``intel`` | *date* | *binutils* | *GCC* | *Intel compilers* | *Intel MPI* | *Intel MKL* | +================+=============+=============+===========+====================+=============+==============+ | ``2014b`` | Jul '14 | ' *(none)* | 4.8.3 | 2013.5.192 | 4.1.3.049 | 11.1.2.144 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2015a`` | Jan '15 | ' *(none)* | 4.9.2 | 2015.1.133 | 5.0.2.044 | 11.2.1.133 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2015b`` | Jul '15 | 2.25 | 4.9.3 | 2015.3.187 | 5.0.3.048 | 11.2.3.187 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2016a`` | Jan '16 | 2.26 | 4.9.3 | 2016.1.150 | 5.1.2.150 | 11.3.1.150 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2016b`` | Jul '16 | 2.26 | 5.4.0 | 2016.3.210 | 5.1.3.181 | 11.3.3.210 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2017a`` | Jan '17 | 2.27 | 6.3.0 | 2017.1.132 | 2017.1.132 | 2017.1.132 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2017b`` | Jul '17 | 2.28 | 6.4.0 | 2017.4.196 | 2017.3.196 | 2017.3.196 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2018a`` | Jan '18 | 2.28 | 6.4.0 | 2018.1.163 | 2018.1.163 | 2018.1.163 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2018b`` | Jul '18 | 2.30 | 7.3.0 | 2018.3.222 | 2018.3.222 | 2018.3.222 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ .. _common_toolchains_customizing: Customizing common toolchains ----------------------------- Sometimes the need arises to customize one or more components of a common toolchain w.r.t. site-specific aspects. One common example is using additional configuration options for Open MPI. To customize a toolchain component, you should copy the corresponding easyconfig file, modify according to your needs, and make sure it is included in a location in the robot search path that precedes the location of the easyconfig files that are included with EasyBuild (see also :ref: `robot_search_path` ), before building and installation the toolchain. More information about toolchains --------------------------------- Please see the :ref: `toolchains_table` for how to obtain a listing of the currently known toolchains. For a detailed listing of the compiler options available with each toolchain, please see :ref: `avail_toolchain_opts` .","title":"Common toolchains"},{"location":"common-toolchains/#common-toolchains","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Common-toolchains.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Common-toolchains.rst in easybuilders/easybuild repo target: docs/common-toolchains.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _common_toolchains: Common toolchains ================= This page documents the concept of *common toolchains* in the EasyBuild community; for a more general definition of what (compiler) toolchains are, see :ref: `toolchains` . .. contents :: :depth: 3 :backlinks: none .. _common_toolchains_what: Definition and motivation ------------------------- Picking a :ref: `compiler toolchain <toolchains>` to use is one of the first things you (need to) do when starting to use EasyBuild. This can be a daunting task, since a whole bunch of toolchains and different toolchain versions are readily available in EasyBuild. It may be difficult to determine which toolchain would be most rewarding to use, in terms of stability, performance of the resulting binaries and readily available easyconfig files. In an attempt to focus the effort of the EasyBuild community, the concept of so-called *common toolchains* was introduced. The idea is to compose and maintain a limited set of specific compiler toolchains, and try and convince many HPC sites to employ these toolchains. This helps in assuring stability of these toolchains w.r.t. which software can be built (correctly) with them, since they get significantly more testing. In addition, the expectation/hope is that more easyconfigs are contributed back to the central easyconfigs repository (https://github.com/easybuilders/easybuild-easyconfigs), resulting in a wide range of readily available easyconfig files using the common toolchains. The intention is to revise/update the definitions of the common toolchains regularly (see :ref: `common_toolchains_update_cycle` ), which again can be a joint effort that benefits many HPC sites. Currently, two different common toolchains are being maintained: ``foss`` and ``intel`` ; see below for more details, and also :ref: `common_toolchains_overview` . .. _common_toolchains_foss: ``foss`` toolchain ~~~~~~~~~~~~~~~~~~ The ``foss`` common compiler toolchain consists entirely of open source software (hence the name, derived from the common term 'FOSS', which is short for \"Free and Open Source Software\"). This toolchain consists of: * binutils (https://www.gnu.org/software/binutils/) * the GNU Compiler Collection (GCC, https://gcc.gnu.org/), i.e. ``gcc`` (C), ``g++`` (C++) and ``gfortran`` (Fortran) * the Open MPI library (https://www.open-mpi.org/) * the OpenBLAS (http://www.openblas.net/) + LAPACK (http://netlib.org/lapack) libraries (for ``foss`` < 2021a) * the FlexiBLAS library (https://www.mpi-magdeburg.mpg.de/projects/flexiblas), with OpenBLAS + LAPACK as backend (for ``foss`` >= 2021a) * the ScaLAPACK (http://netlib.org/scalapack) library is also included * the FFTW library (http://fftw.org/) .. note :: The toolchain name was deliberately chosen to be generic, to allow for swapping any of the toolchain components with a better (open source) alternative in the future, should the need or opportunity arise. .. _common_toolchains_intel: ``intel`` toolchain ~~~~~~~~~~~~~~~~~~~ The ``intel`` common compiler toolchain consists of the Intel compilers and libraries, i.e.: * the Intel C/C++/Fortran compilers (https://software.intel.com/en-us/intel-compilers), i.e. ``icc`` , ``icpc`` and ``ifort`` , * binutils and GCC, which serve as a base for the Intel compilers, are also included * the Intel MPI library (https://software.intel.com/en-us/intel-mpi-library) * the Intel Math Kernel Library (MKL, https://software.intel.com/en-us/intel-mkl) for BLAS/LAPACK/FFT functionality .. note :: This compiler toolchain includes licensed software; valid licenses must be available to install and use it. .. _common_toolchains_versioning_scheme: Versioning scheme for common toolchains --------------------------------------- The common toolchains follow a specific versioning scheme, which takes the :ref: `6-month update cycle <common_toolchains_update_cycle>` into account. Each revision of the common toolchains is versioned as the *year* in which it was defined, plus an additional ' ``a`` ' or ' ``b`` ' to indicate whether the toolchain was defined at the start of the year (' ``a`` ') or halfway through the year (' ``b`` '); in short, the common toolchains are versioned as ``<year>{a,b}`` . For example, ``foss/2016b`` is a revision of the ``foss`` that was composed mid-2016. A full historic overview of the ``foss`` and ``intel`` common toolchains is available in :ref: `common_toolchains_overview` . .. note :: Next to the versions that follow the ``<year>{a,b}`` versioning scheme, additional versions of the ``foss`` and ``intel`` versions are available as well. These versions are **not** considered to be part of the series of common toolchains (even though they consists of the same toolchain components). These versions may be site-specific, or compositions that were put in place to evaluate a potential future common toolchain. Typically, they are versioned as ``<year>.<month>`` , indicating when the most recent component included was released, or when that particular toolchain composition was defined. .. _common_toolchains_update_cycle: Update cycle for common toolchains ---------------------------------- The intention is to revise and update the common toolchains every 6 months: once in late December/early January (version ``<year>a`` ), and once in late June/early July (version ``<year>b`` ). This is meant be to be a community effort, in the sense that a proposal for an updated composition is shared and discussed before it is set in stone. Recent versions of each of the toolchain components are considered, taking into account stability, performance improvements, added features, known bugs/issues and experiences with those versions. Moreover, the proposed toolchain compositions are tested extensively, typically by rebuilding all available easyconfigs that are using the most recent revision of the common toolchains at that time. .. _common_toolchains_overview: Overview of common toolchains ----------------------------- .. _common_toolchains_overview_foss: Component versions in ``foss`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``foss`` | *date* | *binutils* | *GCC* | *Open MPI* | *FlexiBLAS* | *OpenBLAS* | *LAPACK* | *ScaLAPACK* | *FFTW* | +================+=============+============+===========+============+=============+============+=======================+==============+=============+ | ``2019a`` | Jan '19 | 2.31.1 | 8.2.0 | 3.1.3 | *(none)* | 0.3.5 | (incl. with OpenBLAS) | 2.0.2 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2019b`` | Sept '19 | 2.32 | 8.3.0 | 3.1.4 | *(none)* | 0.3.7 | (incl. with OpenBLAS) | 2.0.2 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2020a`` | May '20 | 2.34 | 9.3.0 | 4.0.3 | *(none)* | 0.3.9 | (incl. with OpenBLAS) | 2.1.0 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2020b`` | Nov '20 | 2.35 | 10.2.0 | 4.0.5 | *(none)* | 0.3.12 | (incl. with OpenBLAS) | 2.1.0 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2021a`` | May '21 | 2.36.1 | 10.3.0 | 4.1.1 | 3.0.4 | 0.3.15 | (incl. with OpenBLAS) | 2.1.0 | 3.3.9 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2021b`` | Oct '21 | 2.37 | 11.2.0 | 4.1.1 | 3.0.4 | 0.3.18 | (incl. with OpenBLAS) | 2.1.0 | 3.3.10 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2022a`` | Jun '22 | 2.38 | 11.3.0 | 4.1.4 | 3.2.0 | 0.3.20 | (incl. with OpenBLAS) | 2.2.0 | 3.3.10 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ *(components marked with* * * were patched)* .. _common_toolchains_overview_intel: Component versions in ``intel`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``intel`` | *date* | *binutils* | *GCC* | *Intel compilers* | *Intel MPI* | *Intel MKL* | +================+=============+=============+===========+====================+=============+==============+ | ``2019a`` | Jan '19 | 2.31.1 | 8.2.0 | 2019.1.144 | 2018.4.274 | 2019.1.144 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2019b`` | Sept '19 | 2.32 | 8.3.0 | 2019.5.281 | 2018.5.288 | 2019.5.281 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2020a`` | May'20 | 2.34 | 9.3.0 | 2020.1.217 | 2019.7.217 | 2020.1.217 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2020b`` | Nov'20 | 2.35 | 10.2.0 | 2020.4.304 | 2019.9.304 | 2020.4.304 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2021a`` | May'21 | 2.36.1 | 10.3.0 | 2021.2.0 | 2021.2.0 | 2021.2.0 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2021b`` | Oct'21 | 2.37 | 11.2.0 | 2021.4.0 | 2021.4.0 | 2021.4.0 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2022a`` | Jun'22 | 2.38 | 11.3.0 | 2022.1.0 | 2021.6.0 | 2022.1.0 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ .. _common_toolchains_overview_deprecated: Overview of common toolchains (deprecated versions) --------------------------------------------------- .. _common_toolchains_overview_foss_deprecated: Component versions in ``foss`` toolchain (deprecated versions) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``foss`` | *date* | *binutils* | *GCC* | *Open MPI* | *FlexiBLAS* | *OpenBLAS* | *LAPACK* | *ScaLAPACK* | *FFTW* | +================+=============+============+===========+============+=============+============+=======================+==============+=============+ | ``2014b`` | Jul '14 | ' *(none)* | 4.8.3 | 1.8.1 | *(none)* | 0.2.9 | 3.5.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2015a`` | Jan '15 | ' *(none)* | 4.9.2 | 1.8.4 | *(none)* | 0.2.13 | 3.5.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2015b`` | Jul '15 | 2.25 | 4.9.3 | 1.8.8 | *(none)* | 0.2.14 | 3.5.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2016a`` | Jan '16 | 2.25 | 4.9.3 | 1.10.2 | *(none)* | 0.2.15 | 3.6.0 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2016b`` | Jul '16 | 2.26 | 5.4.0 | 1.10.3 | *(none)* | 0.2.18 | 3.6.1 | 2.0.2 | 3.3.4 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2017a`` | Jan '17 | 2.27 | 6.3.0 | 2.0.2 | *(none)* | 0.2.19 | 3.7.0 | 2.0.2 | 3.3.6(-pl2) | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2017b`` | Jul '17 | 2.28 | 6.4.0 | 2.1.1 | *(none)* | 0.2.20* | (incl. with OpenBLAS) | 2.0.2 | 3.3.6(-pl2) | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2018a`` | Jan '18 | 2.28 | 6.4.0 | 2.1.2 | *(none)* | 0.2.20* | (incl. with OpenBLAS) | 2.0.2 | 3.3.7 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ | ``2018b`` | Jul '18 | 2.30 | 7.3.0 | 3.1.1 | *(none)* | 0.3.1 | (incl. with OpenBLAS) | 2.0.2 | 3.3.8 | +----------------+-------------+------------+-----------+------------+-------------+------------+-----------------------+--------------+-------------+ .. _common_toolchains_overview_intel_deprecated: Component versions in ``intel`` toolchain (deprecated versions) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``intel`` | *date* | *binutils* | *GCC* | *Intel compilers* | *Intel MPI* | *Intel MKL* | +================+=============+=============+===========+====================+=============+==============+ | ``2014b`` | Jul '14 | ' *(none)* | 4.8.3 | 2013.5.192 | 4.1.3.049 | 11.1.2.144 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2015a`` | Jan '15 | ' *(none)* | 4.9.2 | 2015.1.133 | 5.0.2.044 | 11.2.1.133 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2015b`` | Jul '15 | 2.25 | 4.9.3 | 2015.3.187 | 5.0.3.048 | 11.2.3.187 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2016a`` | Jan '16 | 2.26 | 4.9.3 | 2016.1.150 | 5.1.2.150 | 11.3.1.150 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2016b`` | Jul '16 | 2.26 | 5.4.0 | 2016.3.210 | 5.1.3.181 | 11.3.3.210 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2017a`` | Jan '17 | 2.27 | 6.3.0 | 2017.1.132 | 2017.1.132 | 2017.1.132 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2017b`` | Jul '17 | 2.28 | 6.4.0 | 2017.4.196 | 2017.3.196 | 2017.3.196 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2018a`` | Jan '18 | 2.28 | 6.4.0 | 2018.1.163 | 2018.1.163 | 2018.1.163 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ | ``2018b`` | Jul '18 | 2.30 | 7.3.0 | 2018.3.222 | 2018.3.222 | 2018.3.222 | +----------------+-------------+-------------+-----------+--------------------+-------------+--------------+ .. _common_toolchains_customizing: Customizing common toolchains ----------------------------- Sometimes the need arises to customize one or more components of a common toolchain w.r.t. site-specific aspects. One common example is using additional configuration options for Open MPI. To customize a toolchain component, you should copy the corresponding easyconfig file, modify according to your needs, and make sure it is included in a location in the robot search path that precedes the location of the easyconfig files that are included with EasyBuild (see also :ref: `robot_search_path` ), before building and installation the toolchain. More information about toolchains --------------------------------- Please see the :ref: `toolchains_table` for how to obtain a listing of the currently known toolchains. For a detailed listing of the compiler options available with each toolchain, please see :ref: `avail_toolchain_opts` .","title":"Common toolchains"},{"location":"configuration/","text":"Configuring EasyBuild \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Configuration.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Configuration.rst in easybuilders/easybuild repo target: docs/configuration.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _configuring_easybuild: Configuring EasyBuild ===================== This page discusses the recommended style of configuring EasyBuild, which is supported since EasyBuild v1.3.0. A demo on configuring EasyBuild is available :ref: `here <demo_configuring>` . .. contents :: :depth: 3 :backlinks: none .. _configuration_types: Supported configuration types ----------------------------- Configuring EasyBuild can be done by: * using ``eb`` with **command line arguments** * setting **environment variables** ( ``$EASYBUILD_...`` ) * providing one or more **configuration files** Of course, combining any of these types of configuration works too (and is even fairly common). The order of preference for the different configuration types is as listed above, that is: * environment variables override the corresponding entries in the configuration file * command line arguments in turn override the corresponding environment variables *and* matching entries in the configuration file .. _configuration_consistency: Consistency across supported configuration types ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note that the various available configuration options are handled **consistently** across the supported configuration types. For example: to configure EasyBuild to use Lmod as modules tool, the following alternatives are available: * configuration file entry (key-value assignment): .. code :: ini [config] modules-tool = Lmod * environment variable (upper case, ``EASYBUILD_`` prefix, ``-`` 's becomes ``_`` 's): .. code :: $ export EASYBUILD_MODULES_TOOL=Lmod * command line argument (long options preceded by ``--`` and (optionally) using ``=`` ): .. code :: $ eb --modules-tool=Lmod or .. code :: $ eb --modules-tool Lmod For more details w.r.t. each of the supported configuration types, see below. .. _configuration_file: Configuration file(s) ~~~~~~~~~~~~~~~~~~~~~ .. _list_of_configuration_files: List of used configuration files ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The list of configuration files that will be used by EasyBuild is determined in the following order of preference: * the path(s) specified via the **command line argument** ``--configfiles`` * the path(s) specified via the ``$EASYBUILD_CONFIGFILES`` **environment variable** * the **default paths** for EasyBuild configuration files .. _default_configuration_files: Default configuration files +++++++++++++++++++++++++++ By default, EasyBuild will use existing configuration files at the following paths: * ``$dir/easybuild.d/*.cfg`` , for each directory ``$dir`` listed in ``$XDG_CONFIG_DIRS`` (where ``$XDG_CONFIG_DIRS`` defaults to ``/etc`` ) * ``$XDG_CONFIG_HOME/easybuild/config.cfg`` (where ``$XDG_CONFIG_HOME`` defaults to ``$HOME/.config`` ) Hence, if ``$XDG_CONFIG_HOME`` and ``$XDG_CONFIG_DIRS`` are not defined, EasyBuild will only consider default configuration files at ``/etc/easybuild.d/*.cfg`` and ``$HOME/.config/easybuild/config.cfg`` . The configuration file located in ``$XDG_CONFIG_HOME`` will be listed *after* the ones obtained via ``$XDG_CONFIG_DIRS`` , such that user-defined configuration settings have preference over system defaults. A detailed overview of the list of default configuration files is available via ``eb --show-default-configfiles`` (available since EasyBuild v2.1.0). For example :: $ XDG_CONFIG_DIRS=/tmp/etc:/tmp/moreetc eb --show-default-configfiles Default list of configuration files: [with $XDG_CONFIG_HOME: (not set), $XDG_CONFIG_DIRS: /tmp/etc:/tmp/moreetc] * user-level: ${XDG_CONFIG_HOME:-$HOME/.config}/easybuild/config.cfg -> /home/example/.config/easybuild/config.cfg => found * system-level: ${XDG_CONFIG_DIRS:-/etc}/easybuild.d/*.cfg -> {/tmp/etc, /tmp/moreetc}/easybuild.d/*.cfg => /tmp/etc/easybuild.d/config.cfg, /tmp/moreetc/easybuild.d/bar.cfg, /tmp/moreetc/easybuild.d/foo.cfg Default list of existing configuration files (4): /tmp/etc/easybuild.d/config.cfg, /tmp/moreetc/easybuild.d/bar.cfg, /tmp/moreetc/easybuild.d/foo.cfg, /home/example/.config/easybuild/config.cfg Multiple configuration files ++++++++++++++++++++++++++++ If multiple configuration files are listed via a mechanism listed above, the settings in the last configuration file have preference over the others. Each available configuration file will be used, and the configuration settings specified in these files will be retained according to the order of preference as indicated above: settings in configuration files specified via ``--configfiles`` override those in configuration files specified via ``$EASYBUILD_CONFIGFILES`` , which in turns override settings in default configuration files. Ignored configuration files +++++++++++++++++++++++++++ On top of this, the ``--ignoreconfigfiles`` configuration option allows to specify configuration files that should be *ignored* by EasyBuild (regardless of whether they are specified via any of the options above). Configuration file format ^^^^^^^^^^^^^^^^^^^^^^^^^ The EasyBuild configuration file follows the default Python configuration format as parsed by the ``configparser`` module (see `http://docs.python.org/2/library/configparser.html`_ ). Configuration files are organized in sections, the section name for a particular configuration setting is indicated in the output of ``eb --help`` . Some examples sections are: ``MAIN`` , ``basic`` , ``config`` , ``informative`` , ``override`` , ``regtest`` , ``software`` , ``unittest`` , etc. Sections are indicated by specifying the section name in square brackets on a dedicated line, e.g., ``[basic]`` . Configuration settings are specified in a ``key = value`` or ``key: value`` format, **without using quotes for string-like values** . For boolean configuration settings, values that evaluated to ``True`` (e.g., ``true`` , ``1`` , \u2026) are all equivalent to enabling the setting. Comment lines start with a hash character ``#`` (just like in Python code). An example configuration file that should make everything clear is shown below. .. code :: python [ basic ] # always enable logging to stdout logtostdout = true [ config ] # use Lmod as modules tool modules - tool : Lmod # use different default installation path prefix =/ home / you / work / easybuild / .. _configuration_file_templates_constants: Templates and constants supported in configuration files ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Two types of template values ``%(...)s`` are supported in configuration files: * for configuration options defined in the configuration file (and only those) * *syntax:* ``%(opt)s`` , i.e., using the (lowercase) name of the configuration option * for the default value of selected configuration options (see ``eb --avail-cfgfile-constants`` ) * *syntax:* ``%(DEFAULT_OPT)s`` , i.e., using the uppercase name of the configuration option and prefixed with ``DEFAULT_`` .. note :: These template values are only supported in configuration files, *not* in environment variable values or command line option values. .. note :: Using an unknown template value, i.e. either one for a configuration option that was not defined in the configuration file, or a non-existing one for a particular default value, will result in an error like: ``ConfigParser.InterpolationMissingOptionError: Bad value substitution`` . Example +++++++ To include both the (custom) location for the easyconfigs archive repository and the default list of robot search paths in the active robot search path, the following configuration file entry can be used, featuring the template for the ``repositorypath`` configuration option and the provided ``DEFAULT_ROBOT_PATHS`` constant :: [basic] repositorypath = /home/example/easybuild/easyconfigs_archive robot-paths = %(repositorypath)s:%(DEFAULT_ROBOT_PATHS)s See also :ref: `controlling_robot_search_path` . Generating a template configuration file ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v1.10, a command line option ``--confighelp`` is available that prints out the help text as an annotated configuration file. This can be used as an empty template configuration file: .. code :: shell-session $ mkdir -p $HOME /.config/easybuild $ eb --confighelp > $HOME /.config/easybuild/config.cfg .. code :: shell-session $ head $HOME /.easybuild/config.cfg [MAIN] # Enable debug log mode ( def False ) # debug = # Enable info log mode ( def False ) # info = # Enable info quiet/warning mode ( def False ) # quiet = [basic] # Print build overview incl. dependencies ( full paths ) ( def False ) .. _configuration_env_vars: Environment variables ~~~~~~~~~~~~~~~~~~~~~ All configuration settings listed as long options in ``eb --help`` can also be specified via ``EASYBUILD_`` -prefixed environment variables. Configuration settings specified this way always override the corresponding setting specified in a configuration file. For example, to enable debug logging using an environment variable: .. code :: shell-session $ export EASYBUILD_DEBUG = 1 More examples of using environment variables to configure EasyBuild are shown in the sections below. .. tip :: Any configuration option of EasyBuild which can be tuned by command line or via the configuration file, can also be tuned via a corresponding environment variable. .. note :: If any ``$EASYBUILD`` -prefixed environment variables are defined that do not correspond to a known configuration option, EasyBuild will report an error message and exit. .. _configuration_cmdline: Command line arguments ~~~~~~~~~~~~~~~~~~~~~~ The configuration type with the highest precedence are the ``eb`` command line arguments, which override settings specified through environment variables or in configuration files. For some configuration options, both short and long command line arguments are available (see ``eb --help`` ); the long options indicate how the configuration setting should be specified in a configuration file or via an environment variable ( ``$EASYBUILD_<LONGOPTION>`` ). For boolean configuration settings, both the ``--<option>`` and ``--disable-<option>`` variants are always available. Examples (more below): * enable debug logging (long option) and logging to stdout (short option) .. code :: shell-session $ eb --debug -l ... * use ``/dev/shm`` as build path, install to temporary install path, disable debug logging .. code :: shell-session $ eb --buildpath = /dev/shm --installpath = /tmp/ $USER --disable-debug ... .. _configuration_show_config: Overview of current configuration (``--show-config``, ``--show-full-config``) ----------------------------------------------------------------------------- To get an overview of the current EasyBuild configuration across all configuration types, you can use ``eb --show-config`` . The output will specify: * any configuration setting for which the current value is different from the default value * a couple of selected important configuration settings (even if they are still set to the default value), i.e.: * build path (see :ref: `buildpath` ) * install path (see :ref: `installpath` ) * path to easyconfigs repository (see :ref: `easyconfigs_repo` ) * the robot search path (see :ref: `robot_search_path` ) * source path (see :ref: `sourcepath` ) * through which configuration type each setting was defined * i.e., default value, configuration file, environment variable or command line argument Example output :: $ cat $HOME/.config/easybuild/config.cfg [config] buildpath = /tmp/eb-build $ export EASYBUILD_MODULES_TOOL=Lmod $ export EASYBUILD_OPTARCH='' $ eb --show-config --installpath=$HOME/apps --job-cores=4 # # Current EasyBuild configuration # (C: command line argument, D: default value, E: environment variable, F: configuration file) # buildpath (F) = /tmp/eb-build installpath (C) = /Users/example/apps job-cores (C) = 4 modules-tool (E) = Lmod optarch (E) = '' repositorypath (D) = /Users/example/.local/easybuild/ebfiles_repo robot-paths (D) = /Users/example/easybuild-easyconfigs/easybuild/easyconfigs sourcepath (D) = /Users/example/.local/easybuild/sources For a full overview of the current configuration, including *all* configuration settings, see ``eb --show-full-config`` . .. _configuration_available_settings: Available configuration settings -------------------------------- To obtain a full and up-to-date list of available configuration settings, see ``eb --help`` . We refrain from listing all available configuration settings here, to avoid outdated documentation. A couple of selected configuration settings are discussed below, in particular the mandatory settings. .. _configuration_mandatory_settings: Mandatory configuration settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A handful of configuration settings are **mandatory** , and should be provided using one of the supported configuration types. The following configuration settings are currently mandatory (more details in the sections below): * :ref: `sourcepath` * :ref: `buildpath` * :ref: `installpath` * :ref: `easyconfigs_repo` * :ref: `logfile_format` If any of these configuration settings is not provided in one way or another, EasyBuild will complain and exit. In practice, all of these have reasonable defaults (see ``eb --help`` for the default settings). .. note :: The mandatory path-related options can be tweaked collectively via ``--prefix`` , see :ref: `prefix` for more information. .. _sourcepath: Source path (``--sourcepath``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``$HOME/.local/easybuild/sources/`` (determined via :ref: `prefix` ) The ``sourcepath`` configuration setting specifies the parent path of the directory in which EasyBuild looks for software source and install files. Looking for the files specified via the ``sources`` parameter in the .eb easyconfig file is done in the following order of preference: * ``<sourcepath>/<name>`` : a subdirectory determined by the name of the software package * ``<sourcepath>/<letter>/<name>`` : in the style of the ``easyblocks`` / ``easyconfigs`` directories: in a subdirectory determined by the first letter (in lower case) of the software package and by its full ``name`` * ``<sourcepath>`` : directly in the source path Note that these locations are also used when EasyBuild looks for patch files in addition to the various ``easybuild/easyconfigs`` directories that are listed in the $PYTHONPATH. You can specify multiple paths, separated with ``:`` , in which EasyBuild will look for sources, but only the first one will be used for downloading, so one needs to make sure at least the first path is writable by the user invoking ``eb`` . .. _buildpath: Build path (``--buildpath``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``$HOME/.local/easybuild/build/`` (determined via :ref: `prefix` ) The ``buildpath`` configuration setting specifies the parent path of the (temporary) directories in which EasyBuild builds its software packages. Each software package is (by default) built in a subdirectory of the specified ``buildpath`` under ``<name>/<version>/<toolchain><versionsuffix>`` . Note that the build directories are emptied and removed by EasyBuild when the installation is completed (by default). .. tip :: Using ``/dev/shm`` as build path can significantly speed up builds, if it is available and provides a sufficient amount of space. Setting up the variable ``EASYBUILD_BUILDPATH`` in your shell startup files makes this default. However be aware that, fi., two parallel GCC builds may fill up ``/dev/shm`` ! .. _installpath: Software and modules install path (``--installpath``, ``--installpath-software``, ``--installpath-modules``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ defaults: * *software install path:* ``$HOME/.local/easybuild/software`` (determined via :ref: `prefix` and ``--subdir-software`` ) * *modules install path:* ``$HOME/.local/easybuild/modules/all`` (determined via :ref: `prefix` , ``--subdir-modules`` and ``--suffix-modules-path`` ) There are several ways in which the software and modules install path used by EasyBuild can be configured: * using the direct configuration options ``--installpath-software`` and ``--installpath-modules`` (see below) * via the parent install path configuration option ``--installpath`` (see below) * via the overall prefix path configuration option ``--prefix`` (see :ref: `prefix` ) .. _installpath_direct_options: Direct options: ``--installpath-software`` and ``--installpath-modules`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *default* : *(no default specified)* The ``--installpath-software`` and ``--installpath-modules`` configuration options (available since EasyBuild v2.1.0) allow to directly specify the software and modules install paths, respectively. These configuration options have precedence over all of the other configuration options that relate to specifying the install path for software and/or modules (see below). .. _parent_installpath: Parent install path: ``--installpath`` ++++++++++++++++++++++++++++++++++++++ *default* : *(no default specified)* The ``--installpath`` configuration option specifies the *parent* path of the directories in which EasyBuild should install software packages and the corresponding module files. The install path for software and modules specifically is determined by combining ``--installpath`` with ``--subdir-software`` , and combining ``--installpath`` with ``--subdir-modules`` and ``--suffix-modules-path`` , respectively. For more information on these companion configuration options, see :ref: `installpath_subdirs` . Full install path for software and module file ++++++++++++++++++++++++++++++++++++++++++++++ The full software and module install paths for a particular software package are determined by the active module naming scheme along with the general software and modules install paths specified by the EasyBuild configuration. Both the software itself and the corresponding module file will be installed in a subdirectory of the corresponding install path named according to the active module naming scheme (default format: ``<name>/<version>-<toolchain><versionsuffix>`` ). Additionally, symlinks to the actual module file are installed in a subdirectory of the modules install path named according to the value of the ``moduleclass`` easyconfig parameter. For more information on the module naming scheme used by EasyBuild, see :ref: `module_naming_scheme` . Updating ``$MODULEPATH`` ++++++++++++++++++++++++ To make the modules generated by EasyBuild available, the ``$MODULEPATH`` environment variable must be updated to include the modules install path. The recommended way to do this is to use the ``module use`` command. For example: .. code :: shell-session $ eb --installpath = $HOME /easybuild $ module use $HOME /easybuild/modules/all It is probably a good idea to add this to your (favourite) shell ``.rc`` file, e.g., ``~/.bashrc`` , and/or the ``~/.profile`` login scripts, so you do not need to adjust ``$MODULEPATH`` every time you start a new session. .. note :: Updating ``$MODULEPATH`` is not required for EasyBuild itself, since ``eb`` updates ``$MODULEPATH`` itself at runtime according to the modules install path it is configured with. .. _easyconfigs_repo: Easyconfigs repository (``--repository``, ``--repositorypath``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``FileRepository`` at ``$HOME/.local/easybuild/ebfiles_repo`` (determined via :ref: `prefix` ) EasyBuild has support for archiving (tested) ``.eb`` easyconfig files. After successfully installing a software package using EasyBuild, the corresponding ``.eb`` file is uploaded to a repository defined by the ``repository`` and ``repositorypath`` configuration settings. Currently, EasyBuild supports the following repository types (see also ``eb --avail-repositories`` ): * ``FileRepository('path', 'subdir')`` : a plain flat file repository; ``path`` is the path where files will be stored, ``subdir`` is an *optional* subdirectory of that path where the files should be stored * ``GitRepository('path', 'subdir/in/repo'`` : a *non-empty* **bare** git repository (created with ``git init --bare`` or ``git clone --bare`` ); ``path`` is the path to the git repository (can also be a URL); ``subdir/in/repo`` is optional, and specifies a subdirectory of the repository where files should be stored in * ``SvnRepository('path', 'subdir/in/repo')`` : an SVN repository; ``path`` contains the subversion repository location (directory or URL), the optional second value specifies a subdirectory in the repository You need to set the ``repository`` setting inside a configuration file like this: .. code :: python [ config ] repository = FileRepository repositorypath = < path > Or, optionally an extra argument representing a subdirectory can be specified, e.g.: .. code :: shell-session $ export EASYBUILD_REPOSITORY = GitRepository $ export EASYBUILD_REPOSITORYPATH = <path>,<subdir> You do not have to worry about importing these classes, EasyBuild will make them available to the configuration file. Using ``git`` requires the ``GitPython`` Python modules, using ``svn`` requires the ``pysvn`` Python module (see :ref: `dependencies` ). If access to the easyconfigs repository fails for some reason (e.g., no network or a missing required Python module), EasyBuild will issue a warning. The software package will still be installed, but the (successful) easyconfig will not be automatically added to the archive (i.e., it is not considered a fatal error). .. _logfile_format: Logfile format (``--logfile-format``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``easybuild, easybuild-%(name)s-%(version)s-%(date)s.%(time)s.log`` The `logfile format` configuration setting contains a tuple specifying a log directory name and a template log file name. In both of these values, using the following string templates is supported: * ``%(name)s`` : the name of the software package to install * ``%(version)s`` : the version of the software package to install * ``%(date)s`` : the date on which the installation was performed (in ``YYYYMMDD`` format, e.g. ``20120324`` ) * ``%(time)s`` : the time at which the installation was started (in ``HHMMSS`` format, e.g. ``214359`` ) .. note :: Because templating is supported in configuration files themselves (see :ref: `configuration_file_templates_constants` ), the ' ``%`` ' character in these template values must be escaped when used in a configuration file (and only then), e.g., ' ``%%(name)s`` '. Without escaping, an error like ``InterpolationMissingOptionError: Bad value substitution`` will be thrown by ``ConfigParser`` . For example, configuring EasyBuild to generate a log file mentioning only the software name in a directory named ``easybuild`` can be done via the ``--logfile-format`` command line option :: eb --logfile-format=\"easybuild,easybuild-%(name)s.log\" ... or the ``$EASYBUILD_LOGFILE_FORMAT`` environment variable :: export EASYBUILD_LOGFILE_FORMAT=\"easybuild,easybuild-%(name)s.log\" or by including the following in an EasyBuild configuration file (note the use of ' ``%%`` ' to escape the ``name`` template value here) :: logfile-format = easybuild,easybuild-%%(name)s.log .. _configuration_optional_settings: Optional configuration settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The subsections below discuss a couple of commonly used optional configuration settings. .. _prefix: Overall prefix path (``--prefix``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default:* ``$HOME/.local/easybuild`` The overall prefix path used by EasyBuild can be specified using the ``--prefix`` configuration option. This affects the default value of several configuration options: * source path (see :ref: `sourcepath` ) * build path (see :ref: `buildpath` ) * software and modules install path (see :ref: `installpath` ) * easyconfigs repository path (see :ref: `easyconfigs_repo` ) * package path (see :ref: `packaging_config` ) * container path (see :ref: `containers_cfg_path` ) .. _installpath_subdirs: Software and modules install path subdirectories (``--subdir-software``, ``--subdir-modules``, ``--suffix-modules-path``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *defaults* : * *software install path subdirectory* ( ``--subdir-software`` ): ``software`` * *modules install path subdirectory* ( ``--subdir-modules`` ): ``modules`` * *modules install path suffix* ( ``--suffix-modules-path`` ): ``all`` The subdirectories for the software and modules install paths (relative to ``--installpath`` , see :ref: `installpath` ) can be specified using the corresponding dedicated configuration options (available since EasyBuild v1.14.0). For example: .. code :: shell-session $ export EASYBUILD_SUBDIR_SOFTWARE = installs $ eb --installpath = $HOME /easybuild --subdir-modules = module_files ... .. _modules_tool: Modules tool (``--modules-tool``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``Lmod`` Specifying the modules tool that should be used by EasyBuild can be done using the ``modules-tool`` configuration setting. A list of supported modules tools can be obtained using ``eb --avail-modules-tools`` . Currently, the following modules tools are supported: * ``Lmod`` *(default)* : Lmod, an modern alternative to environment modules, written in Lua ( ``lmod`` ) * ``EnvironmentModules`` : modern Tcl-only version of environment modules (4.x) ( ``modulecmd.tcl`` ) * ``EnvironmentModulesC`` : Tcl/C version of environment modules, usually version 3.2.10 ( ``modulecmd`` ) * ``EnvironmentModulesTcl`` : (ancient) Tcl-only version of environment modules ( ``modulecmd.tcl`` ) You can determine which modules tool you are using by checking the output of ``type -f module`` (in a ``bash`` shell), or ``alias module`` (in a ``tcsh`` shell). The actual module command (i.e., ``modulecmd`` , ``modulecmd.tcl`` , ``lmod`` , ...) must be available via ``$PATH`` (which is not standard), except when using Lmod (in that case the ``lmod`` binary can also be located via ``$LMOD_CMD`` ). For example, to indicate that EasyBuild should be using ``Lmod`` as modules tool: .. code :: shell-session $ eb --modules-tool = Lmod ... .. _module_naming_scheme: Active module naming scheme (``--module-naming-scheme``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``EasyBuildModuleNamingScheme`` The module naming scheme that should be used by EasyBuild can be specified using the ``module-naming-scheme`` configuration setting. .. code :: shell-session $ eb --module-naming-scheme = HierarchicalMNS ... For more details, see the dedicated page: https://github.com/easybuilders/easybuild/wiki/Using-a-custom-module-naming-scheme . .. _`http: //docs.python.org/2/library/configparser.html`: http://docs.python.org/2/library/configparser.html .. _module_syntax: Module files syntax (``--module-syntax``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``Lua`` *supported since* : EasyBuild v2.1 The syntax to use for generated module files can be specified using the ``--module-syntax`` configuration setting. Possible values are: * ``Lua`` : generate module files in Lua syntax * this requires the use of Lmod as a modules tool to consume the module files (see :ref: `modules_tool` ) * module file names will have the ``.lua`` extension * ``Tcl`` : generate module files in Tcl syntax * Tcl module files can be consumed by all supported modules tools * module files will contain a header string ``#%Module`` indicating that they are composed in Tcl syntax .. note :: Lmod is able to deal with having module files in place in both Tcl and Lua syntax. When a module file in Lua syntax (i.e., with a ``.lua`` file name extension) is available, a Tcl module file with the same name will be ignored. The Tcl-based environment modules tool will simply ignore module files in Lua syntax, since they do not contain the header string that is included in Tcl module files. .. note :: Using module files in Lua syntax has the advantage that Lmod does not need to translate from Lua to Tcl internally when processing the module files, which benefits responsiveness of Lmod when used interactively by users. In terms of Lmod-specific aspects of module files, the syntax of the module file does *not* matter; Lmod-specific statements supported by EasyBuild can be included in Tcl module files as well, by guarding them by a condition that only evaluates positively when Lmod is consuming the module file, i.e. ' ``if { [ string match \"*tcl2lua.tcl\" $env(_) ] } { ... }`` '. Only conditional load statements like ' ``load(atleast(\"gcc\",\"4.8\"))`` ' can only be used in Lua module files.","title":"Configuration"},{"location":"configuration/#configuring-easybuild","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Configuration.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Configuration.rst in easybuilders/easybuild repo target: docs/configuration.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _configuring_easybuild: Configuring EasyBuild ===================== This page discusses the recommended style of configuring EasyBuild, which is supported since EasyBuild v1.3.0. A demo on configuring EasyBuild is available :ref: `here <demo_configuring>` . .. contents :: :depth: 3 :backlinks: none .. _configuration_types: Supported configuration types ----------------------------- Configuring EasyBuild can be done by: * using ``eb`` with **command line arguments** * setting **environment variables** ( ``$EASYBUILD_...`` ) * providing one or more **configuration files** Of course, combining any of these types of configuration works too (and is even fairly common). The order of preference for the different configuration types is as listed above, that is: * environment variables override the corresponding entries in the configuration file * command line arguments in turn override the corresponding environment variables *and* matching entries in the configuration file .. _configuration_consistency: Consistency across supported configuration types ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note that the various available configuration options are handled **consistently** across the supported configuration types. For example: to configure EasyBuild to use Lmod as modules tool, the following alternatives are available: * configuration file entry (key-value assignment): .. code :: ini [config] modules-tool = Lmod * environment variable (upper case, ``EASYBUILD_`` prefix, ``-`` 's becomes ``_`` 's): .. code :: $ export EASYBUILD_MODULES_TOOL=Lmod * command line argument (long options preceded by ``--`` and (optionally) using ``=`` ): .. code :: $ eb --modules-tool=Lmod or .. code :: $ eb --modules-tool Lmod For more details w.r.t. each of the supported configuration types, see below. .. _configuration_file: Configuration file(s) ~~~~~~~~~~~~~~~~~~~~~ .. _list_of_configuration_files: List of used configuration files ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The list of configuration files that will be used by EasyBuild is determined in the following order of preference: * the path(s) specified via the **command line argument** ``--configfiles`` * the path(s) specified via the ``$EASYBUILD_CONFIGFILES`` **environment variable** * the **default paths** for EasyBuild configuration files .. _default_configuration_files: Default configuration files +++++++++++++++++++++++++++ By default, EasyBuild will use existing configuration files at the following paths: * ``$dir/easybuild.d/*.cfg`` , for each directory ``$dir`` listed in ``$XDG_CONFIG_DIRS`` (where ``$XDG_CONFIG_DIRS`` defaults to ``/etc`` ) * ``$XDG_CONFIG_HOME/easybuild/config.cfg`` (where ``$XDG_CONFIG_HOME`` defaults to ``$HOME/.config`` ) Hence, if ``$XDG_CONFIG_HOME`` and ``$XDG_CONFIG_DIRS`` are not defined, EasyBuild will only consider default configuration files at ``/etc/easybuild.d/*.cfg`` and ``$HOME/.config/easybuild/config.cfg`` . The configuration file located in ``$XDG_CONFIG_HOME`` will be listed *after* the ones obtained via ``$XDG_CONFIG_DIRS`` , such that user-defined configuration settings have preference over system defaults. A detailed overview of the list of default configuration files is available via ``eb --show-default-configfiles`` (available since EasyBuild v2.1.0). For example :: $ XDG_CONFIG_DIRS=/tmp/etc:/tmp/moreetc eb --show-default-configfiles Default list of configuration files: [with $XDG_CONFIG_HOME: (not set), $XDG_CONFIG_DIRS: /tmp/etc:/tmp/moreetc] * user-level: ${XDG_CONFIG_HOME:-$HOME/.config}/easybuild/config.cfg -> /home/example/.config/easybuild/config.cfg => found * system-level: ${XDG_CONFIG_DIRS:-/etc}/easybuild.d/*.cfg -> {/tmp/etc, /tmp/moreetc}/easybuild.d/*.cfg => /tmp/etc/easybuild.d/config.cfg, /tmp/moreetc/easybuild.d/bar.cfg, /tmp/moreetc/easybuild.d/foo.cfg Default list of existing configuration files (4): /tmp/etc/easybuild.d/config.cfg, /tmp/moreetc/easybuild.d/bar.cfg, /tmp/moreetc/easybuild.d/foo.cfg, /home/example/.config/easybuild/config.cfg Multiple configuration files ++++++++++++++++++++++++++++ If multiple configuration files are listed via a mechanism listed above, the settings in the last configuration file have preference over the others. Each available configuration file will be used, and the configuration settings specified in these files will be retained according to the order of preference as indicated above: settings in configuration files specified via ``--configfiles`` override those in configuration files specified via ``$EASYBUILD_CONFIGFILES`` , which in turns override settings in default configuration files. Ignored configuration files +++++++++++++++++++++++++++ On top of this, the ``--ignoreconfigfiles`` configuration option allows to specify configuration files that should be *ignored* by EasyBuild (regardless of whether they are specified via any of the options above). Configuration file format ^^^^^^^^^^^^^^^^^^^^^^^^^ The EasyBuild configuration file follows the default Python configuration format as parsed by the ``configparser`` module (see `http://docs.python.org/2/library/configparser.html`_ ). Configuration files are organized in sections, the section name for a particular configuration setting is indicated in the output of ``eb --help`` . Some examples sections are: ``MAIN`` , ``basic`` , ``config`` , ``informative`` , ``override`` , ``regtest`` , ``software`` , ``unittest`` , etc. Sections are indicated by specifying the section name in square brackets on a dedicated line, e.g., ``[basic]`` . Configuration settings are specified in a ``key = value`` or ``key: value`` format, **without using quotes for string-like values** . For boolean configuration settings, values that evaluated to ``True`` (e.g., ``true`` , ``1`` , \u2026) are all equivalent to enabling the setting. Comment lines start with a hash character ``#`` (just like in Python code). An example configuration file that should make everything clear is shown below. .. code :: python [ basic ] # always enable logging to stdout logtostdout = true [ config ] # use Lmod as modules tool modules - tool : Lmod # use different default installation path prefix =/ home / you / work / easybuild / .. _configuration_file_templates_constants: Templates and constants supported in configuration files ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Two types of template values ``%(...)s`` are supported in configuration files: * for configuration options defined in the configuration file (and only those) * *syntax:* ``%(opt)s`` , i.e., using the (lowercase) name of the configuration option * for the default value of selected configuration options (see ``eb --avail-cfgfile-constants`` ) * *syntax:* ``%(DEFAULT_OPT)s`` , i.e., using the uppercase name of the configuration option and prefixed with ``DEFAULT_`` .. note :: These template values are only supported in configuration files, *not* in environment variable values or command line option values. .. note :: Using an unknown template value, i.e. either one for a configuration option that was not defined in the configuration file, or a non-existing one for a particular default value, will result in an error like: ``ConfigParser.InterpolationMissingOptionError: Bad value substitution`` . Example +++++++ To include both the (custom) location for the easyconfigs archive repository and the default list of robot search paths in the active robot search path, the following configuration file entry can be used, featuring the template for the ``repositorypath`` configuration option and the provided ``DEFAULT_ROBOT_PATHS`` constant :: [basic] repositorypath = /home/example/easybuild/easyconfigs_archive robot-paths = %(repositorypath)s:%(DEFAULT_ROBOT_PATHS)s See also :ref: `controlling_robot_search_path` . Generating a template configuration file ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v1.10, a command line option ``--confighelp`` is available that prints out the help text as an annotated configuration file. This can be used as an empty template configuration file: .. code :: shell-session $ mkdir -p $HOME /.config/easybuild $ eb --confighelp > $HOME /.config/easybuild/config.cfg .. code :: shell-session $ head $HOME /.easybuild/config.cfg [MAIN] # Enable debug log mode ( def False ) # debug = # Enable info log mode ( def False ) # info = # Enable info quiet/warning mode ( def False ) # quiet = [basic] # Print build overview incl. dependencies ( full paths ) ( def False ) .. _configuration_env_vars: Environment variables ~~~~~~~~~~~~~~~~~~~~~ All configuration settings listed as long options in ``eb --help`` can also be specified via ``EASYBUILD_`` -prefixed environment variables. Configuration settings specified this way always override the corresponding setting specified in a configuration file. For example, to enable debug logging using an environment variable: .. code :: shell-session $ export EASYBUILD_DEBUG = 1 More examples of using environment variables to configure EasyBuild are shown in the sections below. .. tip :: Any configuration option of EasyBuild which can be tuned by command line or via the configuration file, can also be tuned via a corresponding environment variable. .. note :: If any ``$EASYBUILD`` -prefixed environment variables are defined that do not correspond to a known configuration option, EasyBuild will report an error message and exit. .. _configuration_cmdline: Command line arguments ~~~~~~~~~~~~~~~~~~~~~~ The configuration type with the highest precedence are the ``eb`` command line arguments, which override settings specified through environment variables or in configuration files. For some configuration options, both short and long command line arguments are available (see ``eb --help`` ); the long options indicate how the configuration setting should be specified in a configuration file or via an environment variable ( ``$EASYBUILD_<LONGOPTION>`` ). For boolean configuration settings, both the ``--<option>`` and ``--disable-<option>`` variants are always available. Examples (more below): * enable debug logging (long option) and logging to stdout (short option) .. code :: shell-session $ eb --debug -l ... * use ``/dev/shm`` as build path, install to temporary install path, disable debug logging .. code :: shell-session $ eb --buildpath = /dev/shm --installpath = /tmp/ $USER --disable-debug ... .. _configuration_show_config: Overview of current configuration (``--show-config``, ``--show-full-config``) ----------------------------------------------------------------------------- To get an overview of the current EasyBuild configuration across all configuration types, you can use ``eb --show-config`` . The output will specify: * any configuration setting for which the current value is different from the default value * a couple of selected important configuration settings (even if they are still set to the default value), i.e.: * build path (see :ref: `buildpath` ) * install path (see :ref: `installpath` ) * path to easyconfigs repository (see :ref: `easyconfigs_repo` ) * the robot search path (see :ref: `robot_search_path` ) * source path (see :ref: `sourcepath` ) * through which configuration type each setting was defined * i.e., default value, configuration file, environment variable or command line argument Example output :: $ cat $HOME/.config/easybuild/config.cfg [config] buildpath = /tmp/eb-build $ export EASYBUILD_MODULES_TOOL=Lmod $ export EASYBUILD_OPTARCH='' $ eb --show-config --installpath=$HOME/apps --job-cores=4 # # Current EasyBuild configuration # (C: command line argument, D: default value, E: environment variable, F: configuration file) # buildpath (F) = /tmp/eb-build installpath (C) = /Users/example/apps job-cores (C) = 4 modules-tool (E) = Lmod optarch (E) = '' repositorypath (D) = /Users/example/.local/easybuild/ebfiles_repo robot-paths (D) = /Users/example/easybuild-easyconfigs/easybuild/easyconfigs sourcepath (D) = /Users/example/.local/easybuild/sources For a full overview of the current configuration, including *all* configuration settings, see ``eb --show-full-config`` . .. _configuration_available_settings: Available configuration settings -------------------------------- To obtain a full and up-to-date list of available configuration settings, see ``eb --help`` . We refrain from listing all available configuration settings here, to avoid outdated documentation. A couple of selected configuration settings are discussed below, in particular the mandatory settings. .. _configuration_mandatory_settings: Mandatory configuration settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A handful of configuration settings are **mandatory** , and should be provided using one of the supported configuration types. The following configuration settings are currently mandatory (more details in the sections below): * :ref: `sourcepath` * :ref: `buildpath` * :ref: `installpath` * :ref: `easyconfigs_repo` * :ref: `logfile_format` If any of these configuration settings is not provided in one way or another, EasyBuild will complain and exit. In practice, all of these have reasonable defaults (see ``eb --help`` for the default settings). .. note :: The mandatory path-related options can be tweaked collectively via ``--prefix`` , see :ref: `prefix` for more information. .. _sourcepath: Source path (``--sourcepath``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``$HOME/.local/easybuild/sources/`` (determined via :ref: `prefix` ) The ``sourcepath`` configuration setting specifies the parent path of the directory in which EasyBuild looks for software source and install files. Looking for the files specified via the ``sources`` parameter in the .eb easyconfig file is done in the following order of preference: * ``<sourcepath>/<name>`` : a subdirectory determined by the name of the software package * ``<sourcepath>/<letter>/<name>`` : in the style of the ``easyblocks`` / ``easyconfigs`` directories: in a subdirectory determined by the first letter (in lower case) of the software package and by its full ``name`` * ``<sourcepath>`` : directly in the source path Note that these locations are also used when EasyBuild looks for patch files in addition to the various ``easybuild/easyconfigs`` directories that are listed in the $PYTHONPATH. You can specify multiple paths, separated with ``:`` , in which EasyBuild will look for sources, but only the first one will be used for downloading, so one needs to make sure at least the first path is writable by the user invoking ``eb`` . .. _buildpath: Build path (``--buildpath``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``$HOME/.local/easybuild/build/`` (determined via :ref: `prefix` ) The ``buildpath`` configuration setting specifies the parent path of the (temporary) directories in which EasyBuild builds its software packages. Each software package is (by default) built in a subdirectory of the specified ``buildpath`` under ``<name>/<version>/<toolchain><versionsuffix>`` . Note that the build directories are emptied and removed by EasyBuild when the installation is completed (by default). .. tip :: Using ``/dev/shm`` as build path can significantly speed up builds, if it is available and provides a sufficient amount of space. Setting up the variable ``EASYBUILD_BUILDPATH`` in your shell startup files makes this default. However be aware that, fi., two parallel GCC builds may fill up ``/dev/shm`` ! .. _installpath: Software and modules install path (``--installpath``, ``--installpath-software``, ``--installpath-modules``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ defaults: * *software install path:* ``$HOME/.local/easybuild/software`` (determined via :ref: `prefix` and ``--subdir-software`` ) * *modules install path:* ``$HOME/.local/easybuild/modules/all`` (determined via :ref: `prefix` , ``--subdir-modules`` and ``--suffix-modules-path`` ) There are several ways in which the software and modules install path used by EasyBuild can be configured: * using the direct configuration options ``--installpath-software`` and ``--installpath-modules`` (see below) * via the parent install path configuration option ``--installpath`` (see below) * via the overall prefix path configuration option ``--prefix`` (see :ref: `prefix` ) .. _installpath_direct_options: Direct options: ``--installpath-software`` and ``--installpath-modules`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *default* : *(no default specified)* The ``--installpath-software`` and ``--installpath-modules`` configuration options (available since EasyBuild v2.1.0) allow to directly specify the software and modules install paths, respectively. These configuration options have precedence over all of the other configuration options that relate to specifying the install path for software and/or modules (see below). .. _parent_installpath: Parent install path: ``--installpath`` ++++++++++++++++++++++++++++++++++++++ *default* : *(no default specified)* The ``--installpath`` configuration option specifies the *parent* path of the directories in which EasyBuild should install software packages and the corresponding module files. The install path for software and modules specifically is determined by combining ``--installpath`` with ``--subdir-software`` , and combining ``--installpath`` with ``--subdir-modules`` and ``--suffix-modules-path`` , respectively. For more information on these companion configuration options, see :ref: `installpath_subdirs` . Full install path for software and module file ++++++++++++++++++++++++++++++++++++++++++++++ The full software and module install paths for a particular software package are determined by the active module naming scheme along with the general software and modules install paths specified by the EasyBuild configuration. Both the software itself and the corresponding module file will be installed in a subdirectory of the corresponding install path named according to the active module naming scheme (default format: ``<name>/<version>-<toolchain><versionsuffix>`` ). Additionally, symlinks to the actual module file are installed in a subdirectory of the modules install path named according to the value of the ``moduleclass`` easyconfig parameter. For more information on the module naming scheme used by EasyBuild, see :ref: `module_naming_scheme` . Updating ``$MODULEPATH`` ++++++++++++++++++++++++ To make the modules generated by EasyBuild available, the ``$MODULEPATH`` environment variable must be updated to include the modules install path. The recommended way to do this is to use the ``module use`` command. For example: .. code :: shell-session $ eb --installpath = $HOME /easybuild $ module use $HOME /easybuild/modules/all It is probably a good idea to add this to your (favourite) shell ``.rc`` file, e.g., ``~/.bashrc`` , and/or the ``~/.profile`` login scripts, so you do not need to adjust ``$MODULEPATH`` every time you start a new session. .. note :: Updating ``$MODULEPATH`` is not required for EasyBuild itself, since ``eb`` updates ``$MODULEPATH`` itself at runtime according to the modules install path it is configured with. .. _easyconfigs_repo: Easyconfigs repository (``--repository``, ``--repositorypath``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``FileRepository`` at ``$HOME/.local/easybuild/ebfiles_repo`` (determined via :ref: `prefix` ) EasyBuild has support for archiving (tested) ``.eb`` easyconfig files. After successfully installing a software package using EasyBuild, the corresponding ``.eb`` file is uploaded to a repository defined by the ``repository`` and ``repositorypath`` configuration settings. Currently, EasyBuild supports the following repository types (see also ``eb --avail-repositories`` ): * ``FileRepository('path', 'subdir')`` : a plain flat file repository; ``path`` is the path where files will be stored, ``subdir`` is an *optional* subdirectory of that path where the files should be stored * ``GitRepository('path', 'subdir/in/repo'`` : a *non-empty* **bare** git repository (created with ``git init --bare`` or ``git clone --bare`` ); ``path`` is the path to the git repository (can also be a URL); ``subdir/in/repo`` is optional, and specifies a subdirectory of the repository where files should be stored in * ``SvnRepository('path', 'subdir/in/repo')`` : an SVN repository; ``path`` contains the subversion repository location (directory or URL), the optional second value specifies a subdirectory in the repository You need to set the ``repository`` setting inside a configuration file like this: .. code :: python [ config ] repository = FileRepository repositorypath = < path > Or, optionally an extra argument representing a subdirectory can be specified, e.g.: .. code :: shell-session $ export EASYBUILD_REPOSITORY = GitRepository $ export EASYBUILD_REPOSITORYPATH = <path>,<subdir> You do not have to worry about importing these classes, EasyBuild will make them available to the configuration file. Using ``git`` requires the ``GitPython`` Python modules, using ``svn`` requires the ``pysvn`` Python module (see :ref: `dependencies` ). If access to the easyconfigs repository fails for some reason (e.g., no network or a missing required Python module), EasyBuild will issue a warning. The software package will still be installed, but the (successful) easyconfig will not be automatically added to the archive (i.e., it is not considered a fatal error). .. _logfile_format: Logfile format (``--logfile-format``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``easybuild, easybuild-%(name)s-%(version)s-%(date)s.%(time)s.log`` The `logfile format` configuration setting contains a tuple specifying a log directory name and a template log file name. In both of these values, using the following string templates is supported: * ``%(name)s`` : the name of the software package to install * ``%(version)s`` : the version of the software package to install * ``%(date)s`` : the date on which the installation was performed (in ``YYYYMMDD`` format, e.g. ``20120324`` ) * ``%(time)s`` : the time at which the installation was started (in ``HHMMSS`` format, e.g. ``214359`` ) .. note :: Because templating is supported in configuration files themselves (see :ref: `configuration_file_templates_constants` ), the ' ``%`` ' character in these template values must be escaped when used in a configuration file (and only then), e.g., ' ``%%(name)s`` '. Without escaping, an error like ``InterpolationMissingOptionError: Bad value substitution`` will be thrown by ``ConfigParser`` . For example, configuring EasyBuild to generate a log file mentioning only the software name in a directory named ``easybuild`` can be done via the ``--logfile-format`` command line option :: eb --logfile-format=\"easybuild,easybuild-%(name)s.log\" ... or the ``$EASYBUILD_LOGFILE_FORMAT`` environment variable :: export EASYBUILD_LOGFILE_FORMAT=\"easybuild,easybuild-%(name)s.log\" or by including the following in an EasyBuild configuration file (note the use of ' ``%%`` ' to escape the ``name`` template value here) :: logfile-format = easybuild,easybuild-%%(name)s.log .. _configuration_optional_settings: Optional configuration settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The subsections below discuss a couple of commonly used optional configuration settings. .. _prefix: Overall prefix path (``--prefix``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default:* ``$HOME/.local/easybuild`` The overall prefix path used by EasyBuild can be specified using the ``--prefix`` configuration option. This affects the default value of several configuration options: * source path (see :ref: `sourcepath` ) * build path (see :ref: `buildpath` ) * software and modules install path (see :ref: `installpath` ) * easyconfigs repository path (see :ref: `easyconfigs_repo` ) * package path (see :ref: `packaging_config` ) * container path (see :ref: `containers_cfg_path` ) .. _installpath_subdirs: Software and modules install path subdirectories (``--subdir-software``, ``--subdir-modules``, ``--suffix-modules-path``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *defaults* : * *software install path subdirectory* ( ``--subdir-software`` ): ``software`` * *modules install path subdirectory* ( ``--subdir-modules`` ): ``modules`` * *modules install path suffix* ( ``--suffix-modules-path`` ): ``all`` The subdirectories for the software and modules install paths (relative to ``--installpath`` , see :ref: `installpath` ) can be specified using the corresponding dedicated configuration options (available since EasyBuild v1.14.0). For example: .. code :: shell-session $ export EASYBUILD_SUBDIR_SOFTWARE = installs $ eb --installpath = $HOME /easybuild --subdir-modules = module_files ... .. _modules_tool: Modules tool (``--modules-tool``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``Lmod`` Specifying the modules tool that should be used by EasyBuild can be done using the ``modules-tool`` configuration setting. A list of supported modules tools can be obtained using ``eb --avail-modules-tools`` . Currently, the following modules tools are supported: * ``Lmod`` *(default)* : Lmod, an modern alternative to environment modules, written in Lua ( ``lmod`` ) * ``EnvironmentModules`` : modern Tcl-only version of environment modules (4.x) ( ``modulecmd.tcl`` ) * ``EnvironmentModulesC`` : Tcl/C version of environment modules, usually version 3.2.10 ( ``modulecmd`` ) * ``EnvironmentModulesTcl`` : (ancient) Tcl-only version of environment modules ( ``modulecmd.tcl`` ) You can determine which modules tool you are using by checking the output of ``type -f module`` (in a ``bash`` shell), or ``alias module`` (in a ``tcsh`` shell). The actual module command (i.e., ``modulecmd`` , ``modulecmd.tcl`` , ``lmod`` , ...) must be available via ``$PATH`` (which is not standard), except when using Lmod (in that case the ``lmod`` binary can also be located via ``$LMOD_CMD`` ). For example, to indicate that EasyBuild should be using ``Lmod`` as modules tool: .. code :: shell-session $ eb --modules-tool = Lmod ... .. _module_naming_scheme: Active module naming scheme (``--module-naming-scheme``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``EasyBuildModuleNamingScheme`` The module naming scheme that should be used by EasyBuild can be specified using the ``module-naming-scheme`` configuration setting. .. code :: shell-session $ eb --module-naming-scheme = HierarchicalMNS ... For more details, see the dedicated page: https://github.com/easybuilders/easybuild/wiki/Using-a-custom-module-naming-scheme . .. _`http: //docs.python.org/2/library/configparser.html`: http://docs.python.org/2/library/configparser.html .. _module_syntax: Module files syntax (``--module-syntax``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *default* : ``Lua`` *supported since* : EasyBuild v2.1 The syntax to use for generated module files can be specified using the ``--module-syntax`` configuration setting. Possible values are: * ``Lua`` : generate module files in Lua syntax * this requires the use of Lmod as a modules tool to consume the module files (see :ref: `modules_tool` ) * module file names will have the ``.lua`` extension * ``Tcl`` : generate module files in Tcl syntax * Tcl module files can be consumed by all supported modules tools * module files will contain a header string ``#%Module`` indicating that they are composed in Tcl syntax .. note :: Lmod is able to deal with having module files in place in both Tcl and Lua syntax. When a module file in Lua syntax (i.e., with a ``.lua`` file name extension) is available, a Tcl module file with the same name will be ignored. The Tcl-based environment modules tool will simply ignore module files in Lua syntax, since they do not contain the header string that is included in Tcl module files. .. note :: Using module files in Lua syntax has the advantage that Lmod does not need to translate from Lua to Tcl internally when processing the module files, which benefits responsiveness of Lmod when used interactively by users. In terms of Lmod-specific aspects of module files, the syntax of the module file does *not* matter; Lmod-specific statements supported by EasyBuild can be included in Tcl module files as well, by guarding them by a condition that only evaluates positively when Lmod is consuming the module file, i.e. ' ``if { [ string match \"*tcl2lua.tcl\" $env(_) ] } { ... }`` '. Only conditional load statements like ' ``load(atleast(\"gcc\",\"4.8\"))`` ' can only be used in Lua module files.","title":"Configuring EasyBuild"},{"location":"containers/","text":"Generating container recipes & images \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Containers.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Containers.rst in easybuilders/easybuild repo target: docs/containers.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _containers: Generating container recipes & images ===================================== EasyBuild has support for generating Singularity and Docker *container recipes* which will use EasyBuild to build and install a specified software stack. In addition, EasyBuild can (optionally) leverage the build tool provided by the container software of choice to create *container images* . .. note :: The features documented here have been available since EasyBuild v3.6.0 but are still *experimental* , which implies they are subject to change in upcoming versions of EasyBuild. **You will need to enable the** ``--experimental`` **configuration option in order to use them.** See :ref: `experimental_features` for more information. Initially (since EasyBuild v3.6.0), only Singularity (https://www.sylabs.io/singularity) was supported. Since EasyBuild v3.6.2, generating (recipes for) Docker (https://www.docker.com/) containers is also supported. In EasyBuild v3.9.2 the support for generating Singularity container recipes/images was enhanced significantly. .. contents :: :depth: 3 :backlinks: none .. _containers_req: Requirements ------------ * Docker, or Singularity version 2.4 (or more recent, incl. version 3.x) * ``sudo`` permissions *(only required to actually build container images, see* :ref: `containers_usage_build_image` *)* .. _containers_usage: Usage ----- .. _containers_usage_containerize: Generating container recipes (``--containerize`` / ``-C``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To generate container recipes, use ``eb --containerize`` , or ``eb -C`` for short. The resulting container recipe will, in turn, leverage EasyBuild to build and install the software that corresponds to the easyconfig files that are specified as arguments to the ``eb`` command (and all required dependencies, if needed). .. note :: EasyBuild will refuse to overwrite existing container recipes. To re-generate an already existing recipe file, use the ``--force`` command line option. .. _containers_usage_template_recipe: Container template recipe (``--container-template-recipe``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Via the ``--container-template-recipe`` configuration option, you can specify a specific container template recipe that EasyBuild should use to generate container recipes. This gives you control over a variety of aspects, including: * the operating system (version) used in the container image * the location where EasyBuild installs software within the container * how EasyBuild is configured when installing software in the container * etc. When generating container recipes, EasyBuild will replace the following template values: * ``%(bootstrap)s`` : bootstrap agent to use * see also https://www.sylabs.io/guides/latest/user-guide/definition_files.html#header * ``%(bootstrap_config)s`` : configuration for the bootstrap agent * this is expected to include lines that specify ``From:`` , ``MirrorURL:`` , etc. * for more information, see :ref: `containers_usage_config` * ``%(easyconfigs)s`` : (list of) easyconfig file name(s)/path(s) to pass to ``eb`` command * ``%(eb_args)s`` : additional arguments for 'eb' command * ``%(include)s`` : list of additional OS packages to include * see also :ref: `container_bootstrap_agent_linux_distro_include` * ``%(install_eb)s`` : list of commands to install EasyBuild * ``%(install_os_deps)s`` : list of commands to install required OS packages (for example ``yum install -y openssl`` ) * incl. ``osdependencies`` specified in easyconfig files * ``%(mirrorurl)`` : URI to use to download OS * see also :ref: `container_bootstrap_agent_linux_distro_mirrorurl` * ``%(modname)s`` : module name(s) to load in environment * ``%(osversion)`` : OS version to use * see also :ref: `container_bootstrap_agent_linux_distro_osversion` * ``%(post_commands)s`` : additional commands for the ``post`` section of the (Singularity) container recipe .. _containers_usage_config: Container configuration (``--container-config``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using ``--container-config`` , values for specific template values can be specified. Values can be specified as a comma-separated list of ``<key>=<value>`` pairs; for example: ``--container-config bootstrap=localimage,from:example.sif`` . Currently supported keywords include: * ``bootstrap`` : bootstrap agent to use * two types of values are supported: * :ref: `container_bootstrap_agent_image_based` * :ref: `container_bootstrap_agent_linux_distro` * ``eb_args`` : additional arguments for 'eb' command * ``from`` : argument to pass to bootstrap agent * *required/only valid with* ``docker`` , ``library`` , ``localimage`` *and* ``shub`` *bootstrap agents* * for more details, see :ref: `container_bootstrap_agent_image_based` * ``include`` : list of additional OS packages to include * see also :ref: `container_bootstrap_agent_linux_distro_include` * ``install_eb`` : commands to install EasyBuild * ``mirrorurl`` : URI to use to download OS * see also :ref: `container_bootstrap_agent_linux_distro_mirrorurl` * ``osversion`` : OS version to use * see also :ref: `container_bootstrap_agent_linux_distro_osversion` * ``post_commands`` : additional commands for ``post`` section of (Singularity) container recipe For more details on the last three, see :ref: `container_bootstrap_agent_linux_distro` . .. note :: Specifying any unknown keywords will results in an error. .. _container_bootstrap_agent_image_based: Image-based bootstrap agents (``docker``, ``library``, ``localimage``, ``shub``) ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ These bootstrap agents involve using an existing container image as a base. Supported values include: * ``docker`` : base container image hosted on Docker Hub (https://hub.docker.com/) * ``library`` : base container image hosted on Sylabs Container Library (https://cloud.sylabs.io/) * ``localimage`` : local base container image file * ``shub`` : base container image hosted on Singularity Hub (https://singularity-hub.org/) **The** ``from`` **keyword must also be specified when using one of these bootstrap agents.** The ``localimage`` bootstrap agents corresponds to using a local container image file as a base, where it's path is specified using the ``from`` keyword. For example: \" ``bootstrap=localimage,from=/home/example/base.sif`` \". Each of the other image-based bootstrap agents imply that the container image to use as a base is downloaded from the corresponding registry, ad specified through the ``from`` keyword, with a specific format: * for ``docker`` bootstrap agent: ``<registry>/<namespace>/<container>:<tag>@<digest>`` * for ``library`` bootstrap agent: ``<entity>/<collection>/<container>:<tag>`` * for ``shub`` bootstrap agent: ``<registry>/<username>/<container-name>:<tag>@digest`` For more details, see https://www.sylabs.io/guides/latest/user-guide/appendix.html#build-modules. .. _containers_usage_container_base_image_requirements: Requirements for base container image ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ There are a couple of specific requirements for the base container image: * all dependencies of EasyBuild must be installed, including: * Python 2.6 or 2.7 * Lmod * standard tools & utilities like ``make`` , ``patch`` , ``tar`` , etc. * OS packages for system libraries like OpenSSL See also :ref: `requirements` . Each generated container recipe will include commands to create the ``easybuild`` user if it doesn't exist yet, as well as commands to create the ``/app`` and ``/scratch`` directories and give the ``easybuild`` user write permissions to those locations. .. note :: The generated container recipe currently hardcodes some of this. We intend to make this more configurable in a future version of EasyBuild. .. _container_bootstrap_agent_linux_distro: Linux distro bootstrap agents (``arch``, ``busybox``, ``debootstrap``, ``yum``, ``zypper``) +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Dedicated bootstrap agents are supported for different flavors of Linux distributions, including: * ``arch`` : Arch Linux * ``busybox`` : BusyBox Linux * ``debootstrap`` : apt-based systems like Ubuntu/Debian * ``yum`` : yum-based systems like CentOS * ``zypper`` : zypper-based systems like openSUSE When one of these bootstrap agents is used, additional keywords can be specified: * :ref: `container_bootstrap_agent_linux_distro_include` * :ref: `container_bootstrap_agent_linux_distro_mirrorurl` * :ref: `container_bootstrap_agent_linux_distro_osversion` .. _container_bootstrap_agent_linux_distro_include: ``include`` keyword: OS packages to include ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Via the ``include`` keywords, a list of packages can be specified that should be include on top of the base OS installation. For some bootstrap agents, a default value is used if no value is specified: * for the ``yum`` bootstrap agent: ``yum`` * for the ``zypper`` bootstrap agent: ``zypper`` See also https://www.sylabs.io/guides/latest/user-guide/appendix.html#yum-bootstrap-agent and https://www.sylabs.io/guides/latest/user-guide/appendix.html#zypper-bootstrap-agent. .. _container_bootstrap_agent_linux_distro_mirrorurl: ``mirrorurl`` keyword: mirror URL to use to download OS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For most of the Linux distro bootstrap agents (all except ``arch`` ), Singularity requires that a mirror URL is specified that will be used when downloading the corresponding OS. You can specify a value using the ``mirrorurl`` keyword. For example: \" ``bootstrap=yum,mirrorurl=https://example.com`` \". EasyBuild will use a default value for ``mirrorurl`` if no other value is specified: * ``busybox`` : ``https://www.busybox.net/downloads/binaries/%{OSVERSION}/busybox-x86_64`` * ``debootstrap`` : ``http://us.archive.ubuntu.com/ubuntu/`` * ``yum`` : ``http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/x86_64/`` * ``zypper`` :: ``http://download.opensuse.org/distribution/leap/%{OSVERSION}/repo/oss/`` .. _container_bootstrap_agent_linux_distro_osversion: ``osversion`` keyword: OS version to use ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Using the ``osversion`` keyword you can specify which OS version should be installed. Note that is this only required/used if value for the ``mirrorurl`` value contains ``%{OSVERSION}s`` . For example: \" ``bootstrap=yum,osversion=7`` \". .. _containers_usage_build_image: Building container images (``--container-build-image``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To instruct EasyBuild to also build a container image from the generated container recipe, use ``--container-build-image`` (in combination with ``-C`` or ``--containerize`` ). EasyBuild will leverage functionality provided by the container software of choice (see :ref: `containers_cfg_image_type` ) to build the container image. For example, in the case of Singularity, EasyBuild will run ``sudo /path/to/singularity build`` on the generated container recipe. .. note :: In order to leverage the image building functionality of the container software, admin privileges are typically required. Therefore, EasyBuild will run the command to build the container image with ``sudo`` . You may need to enter your password to let the command execute. EasyBuild will only run the actual container image build command with ``sudo`` . It will not use elevated privileges for anything else. In case of doubt, you can use ``--extended-dry-run`` or ``-x`` do perform a dry run, so you can evaluate which commands will be executed (see also :ref: `extended_dry_run` ). If you're not comfortable with this, you can just let EasyBuild generate the container recipe, and then use that to build the actual container images yourself, either locally or through Singularity Hub (https://singularity-hub.org). The container image will be placed in the location specified by the ``--containerpath`` configuration option (see :ref: `containers_cfg_path` ), next to the generated container recipe that was used to build the image. .. note :: When building container images, make sure to use a file system location with sufficient available storage space. Singularity may pull metadata during the build, and each image can range from several hundred MBs to GBs, depending on software stack you are including in the container image. .. note :: EasyBuild will refuse to overwrite existing container images. To re-generate an already existing image file, use the ``--force`` command line option. .. _containers_usage_example: Example usage ~~~~~~~~~~~~~ In this example, we will use a pre-built base container image located at ``example.sif`` (see also :ref: `container_bootstrap_agent_image_based` ). To let EasyBuild generate a container recipe for GCC 6.4.0 + binutils 2.28 :: eb GCC-6.4.0-2.28.eb --containerize --container-config bootstrap=localimage,from=example.sif --experimental With other configuration options left to default (see output of ``eb --show-config`` ), this will result in a Singularity container recipe using ``example.sif`` as base image, which will be stored in ``$HOME/.local/easybuild/containers`` :: $ eb GCC-6.4.0-2.28.eb --containerize --container-config bootstrap=localimage,from=example.sif --experimental == temporary log file in case of crash /tmp/eb-dLZTNF/easybuild-LPLeG0.log == Singularity definition file created at /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28 == Temporary log file(s) /tmp/eb-dLZTNF/easybuild-LPLeG0.log* have been removed. == Temporary directory /tmp/eb-dLZTNF has been removed. Docker supports a limited set of the container options. Example of commands that can be used to generate Docker containers are :: eb --containerize --container-type=docker --experimental --container-config=ubuntu:20.04 zlib-1.2.11.eb eb --containerize --container-type=docker --experimental --container-config=centos:7 zlib-1.2.11.eb .. _containers_example_recipe: Example of a generated container recipe +++++++++++++++++++++++++++++++++++++++ Below is an example of container recipe for that was generated by EasyBuild, using the following command :: eb Python-3.6.4-foss-2018a.eb -C --container-config bootstrap=yum,osversion=7 --experimental .. code :: Bootstrap: yum OSVersion: 7 MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/x86_64/ Include: yum %post yum install --quiet --assumeyes epel-release yum install --quiet --assumeyes python setuptools Lmod yum install --quiet --assumeyes python-pip yum install --quiet --assumeyes bzip2 gzip tar zip unzip xz yum install --quiet --assumeyes curl wget yum install --quiet --assumeyes patch make yum install --quiet --assumeyes file git which yum install --quiet --assumeyes gcc-c++ yum install --quiet --assumeyes perl-Data-Dumper yum install --quiet --assumeyes perl-Thread-Queue yum --skip-broken --quiet --assumeyes install libibverbs-dev libibverbs-devel rdma-core-devel yum --skip-broken --quiet --assumeyes install openssl-devel libssl-dev libopenssl-devel # install EasyBuild using pip pip install -U setuptools pip install 'vsc-install<0.11.4' 'vsc-base<2.9.0' pip install easybuild # create 'easybuild' user (if missing) id easybuild || useradd easybuild # create /app software installation prefix + /scratch sandbox directory if [ ! -d /app ]; then mkdir -p /app; chown easybuild:easybuild -R /app; fi if [ ! -d /scratch ]; then mkdir -p /scratch; chown easybuild:easybuild -R /scratch; fi # install Lmod RC file cat > /etc/lmodrc.lua << EOF scDescriptT = { { [\"dir\"] = \"/app/lmodcache\", [\"timestamp\"] = \"/app/lmodcache/timestamp\", }, } EOF # change to 'easybuild' user su - easybuild # verbose commands, exit on first error set -ve # configure EasyBuild # use /scratch as general prefix, used for sources, build directories, etc. export EASYBUILD_PREFIX=/scratch # also use /scratch for temporary directories export EASYBUILD_TMPDIR=/scratch/tmp # download sources to /scratch/sources, but also consider files located in /tmp/easybuild/sources; # that way, source files that can not be downloaded can be seeded in export EASYBUILD_SOURCEPATH=/scratch/sources:/tmp/easybuild/sources # install software & modules into /app export EASYBUILD_INSTALLPATH=/app # use EasyBuild to install specified software eb Python-3.6.4-foss-2018a.eb --robot # update Lmod cache mkdir -p /app/lmodcache $LMOD_DIR/update_lmod_system_cache_files -d /app/lmodcache -t /app/lmodcache/timestamp /app/modules/all # exit from 'easybuild' user exit # cleanup, everything in /scratch is assumed to be temporary rm -rf /scratch/* %runscript eval \"$@\" %environment # make sure that 'module' and 'ml' commands are defined source /etc/profile # increase threshold time for Lmod to write cache in $HOME (which we don't want to do) export LMOD_SHORT_TIME=86400 # purge any modules that may be loaded outside container module --force purge # avoid picking up modules from outside of container module unuse $MODULEPATH # pick up modules installed in /app module use /app/modules/all # load module(s) corresponding to installed software module load Python/3.6.4-foss-2018a %labels The generated container recipe includes a bunch of ``yum install`` commands to install additional required/useful OS packages, ``pip install`` commands to install EasyBuild (if it's not installed yet), commands to create the ``easybuild`` user and provide write access to the ``/app`` and ``/scratch`` directories, and to configure Lmod and update the Lmod cache after software was installed with EasyBuild. In addition, the generated module files will follow the default module naming scheme ( ``EasyBuildMNS`` ). The modules that correspond to the easyconfig files that were specified on the command line will be loaded automatically, see the statements in the ``%environment`` section of the generated container recipe. .. _containers_example_build_image: Example of building container image +++++++++++++++++++++++++++++++++++ You can instruct EasyBuild to also build the container image by also using ``--container-build-image`` . Note that you will need to enter your ``sudo`` password (unless you recently executed a ``sudo`` command in the same shell session) :: $ eb GCC-6.4.0-2.28.eb --containerize --container-config bootstrap=localimage,from=/tmp/example.sif --container-build-image --experimental == temporary log file in case of crash /tmp/eb-aYXYC8/easybuild-8uXhvu.log == Singularity tool found at /usr/bin/singularity == Singularity version '2.4.6' is 2.4 or higher ... OK == Singularity definition file created at /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28 == Running 'sudo /usr/bin/singularity build /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28', you may need to enter your 'sudo' password... == (streaming) output for command 'sudo /usr/bin/singularity build /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28': Using container recipe deffile: /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28 Sanitizing environment Adding base Singularity environment to container ... == temporary log file in case of crash /scratch/tmp/eb-WnmCI_/easybuild-GcKyY9.log == resolving dependencies ... ... == building and installing GCCcore/6.4.0... ... == building and installing binutils/2.28-GCCcore-6.4.0... ... == building and installing GCC/6.4.0-2.28... ... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file(s) /app/software/GCC/6.4.0-2.28/easybuild/easybuild-GCC-6.4.0-20180424.084946.log == Build succeeded for 15 out of 15 ... Building Singularity image... Singularity container built: /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif Cleaning up... == Singularity image created at /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif == Temporary log file(s) /tmp/eb-aYXYC8/easybuild-8uXhvu.log* have been removed. == Temporary directory /tmp/eb-aYXYC8 has been removed. The inspect the container image, you can use ``singularity shell`` to start a shell session *in* the container :: $ singularity shell --shell \"/bin/bash --norc\" $HOME/.local/easybuild/containers/GCC-6.4.0-2.28.sif Singularity GCC-6.4.0-2.28.sif:~> module list Currently Loaded Modules: 1) GCCcore/6.4.0 2) binutils/2.28-GCCcore-6.4.0 3) GCC/6.4.0-2.28 Singularity GCC-6.4.0-2.28.sif:~> which gcc /app/software/GCCcore/6.4.0/bin/gcc Singularity GCC-6.4.0-2.28.sif:~> gcc --version gcc (GCC) 6.4.0 ... .. note :: We are passing ``--shell \"/bin/bash --norc`` to ``singularity shell`` to avoid that the ``.bashrc`` login script that may be present in your home directory is sourced, since that may include statements that are not relevant in the container environment. Or, you can use ``singularity exec`` to execute a command in the container. Compare the output of running ``which gcc`` and ``gcc --version`` locally :: $ which gcc /usr/bin/gcc $ gcc --version gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-16) ... and the output when running the same commands in the container :: $ singularity exec GCC-6.4.0-2.28.sif which gcc /app/software/GCCcore/6.4.0/bin/gcc $ singularity exec GCC-6.4.0-2.28.sif gcc --version gcc (GCC) 6.4.0 ... Configuration ------------- .. note :: You can specify each of these configuration options either as options to the ``eb`` command, via the equivalent ``$EASYBUILD_CONTAINER*`` environment variable, or via an EasyBuild configuration file; see :ref: `configuration_types` . .. _containers_cfg_path: Location for generated container recipes & images (``--containerpath``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To control the location where EasyBuild will put generated container recipes & images, use the ``--containerpath`` configuration setting. Next to providing this as an option to the ``eb`` command, you can also define the ``$EASYBUILD_CONTAINERPATH`` environment variable or specify ``containerpath`` in an EasyBuild configuration file. The default value for this location is ``$HOME/.local/easybuild/containers`` , unless the ``--prefix`` configuration setting was provided, in which case it becomes ``<prefix>/containers`` (see :ref: `prefix` ). Use ``eb --show-full-config | grep containerpath`` to determine the currently active setting. .. _containers_cfg_image_format: Container image format (``--container-image-format``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: This is only relevant when creating Singularity container images; the value for ``--container-image-format`` is ignored when creating Docker container images. The format for container images that EasyBuild is produces via the functionality provided by the container software can be controlled via the ``--container-image-format`` configuration setting. For Singularity containers (see :ref: `containers_cfg_type` ), three image formats are supported: * ``squashfs`` *(default when using Singularity 2.x)* : compressed images using ``squashfs`` read-only file system * ``sif`` *(default when using Singularity 3.x)* : compressed read-only Singularity Image File (SIF) * ``ext3`` : writable image file using ``ext3`` file system *(only supported with Singularity 2.x)* * ``sandbox`` : container image in a regular directory See also https://www.sylabs.io/guides/latest/user-guide/build_a_container.html . .. _containers_cfg_image_name: Name for container recipe & image (``--container-image-name``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ By default, EasyBuild will use the name of the first easyconfig file (without the ``.eb`` suffix) as a name for both the container recipe and image. You can specify an altername name using the ``--container-image-name`` configuration setting. The filename of generated container recipe will be ``Singularity.<name>`` . The filename of the container image will be ``<name><extension>`` , where the value for ``<extension>`` depends on the image format (see :ref: `containers_cfg_image_format` ): * ' ``.simg`` ' for ``squashfs`` Singularity container images *(only with Singularity 2.x)* * ' ``.img`` ' for ``ext3`` Singularity container images *(only with Singularity 2.x)* * ' ``.sif`` ' for Singularity container images in Singularity Image Format (SIF) *(only with Singularity 3.x)* * *empty* for ``sandbox`` Singularity container images (in which case the container image is actually a directory rather than a file) * *empty* for Docker container images .. _containers_tmpdir: Temporary directory for creating container images (``--container-tmpdir``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The container software that EasyBuild leverages to build container images may be using a temporary directory in a location that doesn't have sufficient free space. You can instruct EasyBuild to pass an alternate location via the ``--container-tmpdir`` configuration setting. For Singularity, the default is to use ``/tmp`` , see https://www.sylabs.io/guides/latest/user-guide/build_env.html#temporary-folders. If ``--container-tmpdir`` is specified, the ``$SINGULARITY_TMPDIR`` environment variable will be defined accordingly to let Singularity use that location instead. .. _containers_cfg_type: Type of container recipe/image to generate (``--container-type``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ With the ``--container-type`` configuration option, you can specify what type of container recipe/image EasyBuild should generated. Possible values are: * ``docker`` : Docker (https://docs.docker.com/) container recipe & images (supported since EasyBuild v3.6.2) * ``singularity`` *(default)* : Singularity (https://www.sylabs.io/singularity) container recipes & images .. _containers_stacking: 'Stacking' container images --------------------------- To avoid long build times and excessive large container images, you can construct your target container image step-by-step, by first building a base container image for the compiler toolchain you want to use, and then using it to build a container images for a particular (set of) software package(s). For example, to build a container image for Python 3.6.4 built with the ``foss/2018a`` toolchain :: $ cd /tmp # use current directory as location for generated container recipes & images $ export EASYBUILD_CONTAINERPATH=$PWD # build base container image for OpenMPI + GCC parts of foss/2018a toolchain, on top of CentOS 7.4 base image $ eb -C --container-build-image OpenMPI-2.1.2-GCC-6.4.0-2.28.eb --container-config bootstrap=yum,osversion=7 --experimental ... == Singularity image created at /tmp/OpenMPI-2.1.2-GCC-6.4.0-2.28.sif ... $ ls -lh OpenMPI-2.1.2-GCC-6.4.0-2.28.sif -rwxr-xr-x 1 root root 590M Apr 24 11:43 OpenMPI-2.1.2-GCC-6.4.0-2.28.sif # build another container image for the for the full foss/2018a toolchain, using the OpenMPI + GCC container as a base $ eb -C --container-build-image foss-2018a.eb --container-config bootstrap=localimage,from=OpenMPI-2.1.2-GCC-6.4.0-2.28.sif --experimental ... == Singularity image created at /tmp/foss-2018a.sif ... $ ls -lh foss-2018a.sif -rwxr-xr-x 1 root root 614M Apr 24 13:11 foss-2018a.sif # build container image for Python 3.6.4 with foss/2018a toolchain by leveraging base container image foss-2018a.sif $ eb -C --container-build-image Python-3.6.4-foss-2018a.eb --container-config bootstrap=localimage,from=foss-2018a.sif --experimental ... == Singularity image created at /tmp/Python-3.6.4-foss-2018a.sif ... $ ls -lh Python-3.6.4-foss-2018a.sif -rwxr-xr-x 1 root root 759M Apr 24 14:01 Python-3.6.4-foss-2018a.sif $ singularity exec Python-3.6.4-foss-2018a.sif which python /app/software/Python/3.6.4-foss-2018a/bin/python $ singularity exec Python-3.6.4-foss-2018a.sif python -V vsc40023 belongs to gsingularity Python 3.6.4 .. _containers_stacking: Seeding in source files for container build process --------------------------------------------------- In some cases, you may need to \"seed in\" manually downloaded source files into the container build environment, because the sources can not be downloaded automatically. As shown in :ref: `containers_example_recipe` , the container recipe generated by EasyBuild includes ``/tmp/easybuild/sources/`` as a fallback directory in the list of locations considered by EasyBuild when looking for sources/patches (see also :ref: `sourcepath` ). That way, you can copy source files that should be available when building the container image into ``/tmp/easybuild/sources/`` .","title":"Generating container recipes & images"},{"location":"containers/#generating-container-recipes-images","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Containers.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Containers.rst in easybuilders/easybuild repo target: docs/containers.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _containers: Generating container recipes & images ===================================== EasyBuild has support for generating Singularity and Docker *container recipes* which will use EasyBuild to build and install a specified software stack. In addition, EasyBuild can (optionally) leverage the build tool provided by the container software of choice to create *container images* . .. note :: The features documented here have been available since EasyBuild v3.6.0 but are still *experimental* , which implies they are subject to change in upcoming versions of EasyBuild. **You will need to enable the** ``--experimental`` **configuration option in order to use them.** See :ref: `experimental_features` for more information. Initially (since EasyBuild v3.6.0), only Singularity (https://www.sylabs.io/singularity) was supported. Since EasyBuild v3.6.2, generating (recipes for) Docker (https://www.docker.com/) containers is also supported. In EasyBuild v3.9.2 the support for generating Singularity container recipes/images was enhanced significantly. .. contents :: :depth: 3 :backlinks: none .. _containers_req: Requirements ------------ * Docker, or Singularity version 2.4 (or more recent, incl. version 3.x) * ``sudo`` permissions *(only required to actually build container images, see* :ref: `containers_usage_build_image` *)* .. _containers_usage: Usage ----- .. _containers_usage_containerize: Generating container recipes (``--containerize`` / ``-C``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To generate container recipes, use ``eb --containerize`` , or ``eb -C`` for short. The resulting container recipe will, in turn, leverage EasyBuild to build and install the software that corresponds to the easyconfig files that are specified as arguments to the ``eb`` command (and all required dependencies, if needed). .. note :: EasyBuild will refuse to overwrite existing container recipes. To re-generate an already existing recipe file, use the ``--force`` command line option. .. _containers_usage_template_recipe: Container template recipe (``--container-template-recipe``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Via the ``--container-template-recipe`` configuration option, you can specify a specific container template recipe that EasyBuild should use to generate container recipes. This gives you control over a variety of aspects, including: * the operating system (version) used in the container image * the location where EasyBuild installs software within the container * how EasyBuild is configured when installing software in the container * etc. When generating container recipes, EasyBuild will replace the following template values: * ``%(bootstrap)s`` : bootstrap agent to use * see also https://www.sylabs.io/guides/latest/user-guide/definition_files.html#header * ``%(bootstrap_config)s`` : configuration for the bootstrap agent * this is expected to include lines that specify ``From:`` , ``MirrorURL:`` , etc. * for more information, see :ref: `containers_usage_config` * ``%(easyconfigs)s`` : (list of) easyconfig file name(s)/path(s) to pass to ``eb`` command * ``%(eb_args)s`` : additional arguments for 'eb' command * ``%(include)s`` : list of additional OS packages to include * see also :ref: `container_bootstrap_agent_linux_distro_include` * ``%(install_eb)s`` : list of commands to install EasyBuild * ``%(install_os_deps)s`` : list of commands to install required OS packages (for example ``yum install -y openssl`` ) * incl. ``osdependencies`` specified in easyconfig files * ``%(mirrorurl)`` : URI to use to download OS * see also :ref: `container_bootstrap_agent_linux_distro_mirrorurl` * ``%(modname)s`` : module name(s) to load in environment * ``%(osversion)`` : OS version to use * see also :ref: `container_bootstrap_agent_linux_distro_osversion` * ``%(post_commands)s`` : additional commands for the ``post`` section of the (Singularity) container recipe .. _containers_usage_config: Container configuration (``--container-config``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using ``--container-config`` , values for specific template values can be specified. Values can be specified as a comma-separated list of ``<key>=<value>`` pairs; for example: ``--container-config bootstrap=localimage,from:example.sif`` . Currently supported keywords include: * ``bootstrap`` : bootstrap agent to use * two types of values are supported: * :ref: `container_bootstrap_agent_image_based` * :ref: `container_bootstrap_agent_linux_distro` * ``eb_args`` : additional arguments for 'eb' command * ``from`` : argument to pass to bootstrap agent * *required/only valid with* ``docker`` , ``library`` , ``localimage`` *and* ``shub`` *bootstrap agents* * for more details, see :ref: `container_bootstrap_agent_image_based` * ``include`` : list of additional OS packages to include * see also :ref: `container_bootstrap_agent_linux_distro_include` * ``install_eb`` : commands to install EasyBuild * ``mirrorurl`` : URI to use to download OS * see also :ref: `container_bootstrap_agent_linux_distro_mirrorurl` * ``osversion`` : OS version to use * see also :ref: `container_bootstrap_agent_linux_distro_osversion` * ``post_commands`` : additional commands for ``post`` section of (Singularity) container recipe For more details on the last three, see :ref: `container_bootstrap_agent_linux_distro` . .. note :: Specifying any unknown keywords will results in an error. .. _container_bootstrap_agent_image_based: Image-based bootstrap agents (``docker``, ``library``, ``localimage``, ``shub``) ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ These bootstrap agents involve using an existing container image as a base. Supported values include: * ``docker`` : base container image hosted on Docker Hub (https://hub.docker.com/) * ``library`` : base container image hosted on Sylabs Container Library (https://cloud.sylabs.io/) * ``localimage`` : local base container image file * ``shub`` : base container image hosted on Singularity Hub (https://singularity-hub.org/) **The** ``from`` **keyword must also be specified when using one of these bootstrap agents.** The ``localimage`` bootstrap agents corresponds to using a local container image file as a base, where it's path is specified using the ``from`` keyword. For example: \" ``bootstrap=localimage,from=/home/example/base.sif`` \". Each of the other image-based bootstrap agents imply that the container image to use as a base is downloaded from the corresponding registry, ad specified through the ``from`` keyword, with a specific format: * for ``docker`` bootstrap agent: ``<registry>/<namespace>/<container>:<tag>@<digest>`` * for ``library`` bootstrap agent: ``<entity>/<collection>/<container>:<tag>`` * for ``shub`` bootstrap agent: ``<registry>/<username>/<container-name>:<tag>@digest`` For more details, see https://www.sylabs.io/guides/latest/user-guide/appendix.html#build-modules. .. _containers_usage_container_base_image_requirements: Requirements for base container image ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ There are a couple of specific requirements for the base container image: * all dependencies of EasyBuild must be installed, including: * Python 2.6 or 2.7 * Lmod * standard tools & utilities like ``make`` , ``patch`` , ``tar`` , etc. * OS packages for system libraries like OpenSSL See also :ref: `requirements` . Each generated container recipe will include commands to create the ``easybuild`` user if it doesn't exist yet, as well as commands to create the ``/app`` and ``/scratch`` directories and give the ``easybuild`` user write permissions to those locations. .. note :: The generated container recipe currently hardcodes some of this. We intend to make this more configurable in a future version of EasyBuild. .. _container_bootstrap_agent_linux_distro: Linux distro bootstrap agents (``arch``, ``busybox``, ``debootstrap``, ``yum``, ``zypper``) +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Dedicated bootstrap agents are supported for different flavors of Linux distributions, including: * ``arch`` : Arch Linux * ``busybox`` : BusyBox Linux * ``debootstrap`` : apt-based systems like Ubuntu/Debian * ``yum`` : yum-based systems like CentOS * ``zypper`` : zypper-based systems like openSUSE When one of these bootstrap agents is used, additional keywords can be specified: * :ref: `container_bootstrap_agent_linux_distro_include` * :ref: `container_bootstrap_agent_linux_distro_mirrorurl` * :ref: `container_bootstrap_agent_linux_distro_osversion` .. _container_bootstrap_agent_linux_distro_include: ``include`` keyword: OS packages to include ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Via the ``include`` keywords, a list of packages can be specified that should be include on top of the base OS installation. For some bootstrap agents, a default value is used if no value is specified: * for the ``yum`` bootstrap agent: ``yum`` * for the ``zypper`` bootstrap agent: ``zypper`` See also https://www.sylabs.io/guides/latest/user-guide/appendix.html#yum-bootstrap-agent and https://www.sylabs.io/guides/latest/user-guide/appendix.html#zypper-bootstrap-agent. .. _container_bootstrap_agent_linux_distro_mirrorurl: ``mirrorurl`` keyword: mirror URL to use to download OS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For most of the Linux distro bootstrap agents (all except ``arch`` ), Singularity requires that a mirror URL is specified that will be used when downloading the corresponding OS. You can specify a value using the ``mirrorurl`` keyword. For example: \" ``bootstrap=yum,mirrorurl=https://example.com`` \". EasyBuild will use a default value for ``mirrorurl`` if no other value is specified: * ``busybox`` : ``https://www.busybox.net/downloads/binaries/%{OSVERSION}/busybox-x86_64`` * ``debootstrap`` : ``http://us.archive.ubuntu.com/ubuntu/`` * ``yum`` : ``http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/x86_64/`` * ``zypper`` :: ``http://download.opensuse.org/distribution/leap/%{OSVERSION}/repo/oss/`` .. _container_bootstrap_agent_linux_distro_osversion: ``osversion`` keyword: OS version to use ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Using the ``osversion`` keyword you can specify which OS version should be installed. Note that is this only required/used if value for the ``mirrorurl`` value contains ``%{OSVERSION}s`` . For example: \" ``bootstrap=yum,osversion=7`` \". .. _containers_usage_build_image: Building container images (``--container-build-image``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To instruct EasyBuild to also build a container image from the generated container recipe, use ``--container-build-image`` (in combination with ``-C`` or ``--containerize`` ). EasyBuild will leverage functionality provided by the container software of choice (see :ref: `containers_cfg_image_type` ) to build the container image. For example, in the case of Singularity, EasyBuild will run ``sudo /path/to/singularity build`` on the generated container recipe. .. note :: In order to leverage the image building functionality of the container software, admin privileges are typically required. Therefore, EasyBuild will run the command to build the container image with ``sudo`` . You may need to enter your password to let the command execute. EasyBuild will only run the actual container image build command with ``sudo`` . It will not use elevated privileges for anything else. In case of doubt, you can use ``--extended-dry-run`` or ``-x`` do perform a dry run, so you can evaluate which commands will be executed (see also :ref: `extended_dry_run` ). If you're not comfortable with this, you can just let EasyBuild generate the container recipe, and then use that to build the actual container images yourself, either locally or through Singularity Hub (https://singularity-hub.org). The container image will be placed in the location specified by the ``--containerpath`` configuration option (see :ref: `containers_cfg_path` ), next to the generated container recipe that was used to build the image. .. note :: When building container images, make sure to use a file system location with sufficient available storage space. Singularity may pull metadata during the build, and each image can range from several hundred MBs to GBs, depending on software stack you are including in the container image. .. note :: EasyBuild will refuse to overwrite existing container images. To re-generate an already existing image file, use the ``--force`` command line option. .. _containers_usage_example: Example usage ~~~~~~~~~~~~~ In this example, we will use a pre-built base container image located at ``example.sif`` (see also :ref: `container_bootstrap_agent_image_based` ). To let EasyBuild generate a container recipe for GCC 6.4.0 + binutils 2.28 :: eb GCC-6.4.0-2.28.eb --containerize --container-config bootstrap=localimage,from=example.sif --experimental With other configuration options left to default (see output of ``eb --show-config`` ), this will result in a Singularity container recipe using ``example.sif`` as base image, which will be stored in ``$HOME/.local/easybuild/containers`` :: $ eb GCC-6.4.0-2.28.eb --containerize --container-config bootstrap=localimage,from=example.sif --experimental == temporary log file in case of crash /tmp/eb-dLZTNF/easybuild-LPLeG0.log == Singularity definition file created at /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28 == Temporary log file(s) /tmp/eb-dLZTNF/easybuild-LPLeG0.log* have been removed. == Temporary directory /tmp/eb-dLZTNF has been removed. Docker supports a limited set of the container options. Example of commands that can be used to generate Docker containers are :: eb --containerize --container-type=docker --experimental --container-config=ubuntu:20.04 zlib-1.2.11.eb eb --containerize --container-type=docker --experimental --container-config=centos:7 zlib-1.2.11.eb .. _containers_example_recipe: Example of a generated container recipe +++++++++++++++++++++++++++++++++++++++ Below is an example of container recipe for that was generated by EasyBuild, using the following command :: eb Python-3.6.4-foss-2018a.eb -C --container-config bootstrap=yum,osversion=7 --experimental .. code :: Bootstrap: yum OSVersion: 7 MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/x86_64/ Include: yum %post yum install --quiet --assumeyes epel-release yum install --quiet --assumeyes python setuptools Lmod yum install --quiet --assumeyes python-pip yum install --quiet --assumeyes bzip2 gzip tar zip unzip xz yum install --quiet --assumeyes curl wget yum install --quiet --assumeyes patch make yum install --quiet --assumeyes file git which yum install --quiet --assumeyes gcc-c++ yum install --quiet --assumeyes perl-Data-Dumper yum install --quiet --assumeyes perl-Thread-Queue yum --skip-broken --quiet --assumeyes install libibverbs-dev libibverbs-devel rdma-core-devel yum --skip-broken --quiet --assumeyes install openssl-devel libssl-dev libopenssl-devel # install EasyBuild using pip pip install -U setuptools pip install 'vsc-install<0.11.4' 'vsc-base<2.9.0' pip install easybuild # create 'easybuild' user (if missing) id easybuild || useradd easybuild # create /app software installation prefix + /scratch sandbox directory if [ ! -d /app ]; then mkdir -p /app; chown easybuild:easybuild -R /app; fi if [ ! -d /scratch ]; then mkdir -p /scratch; chown easybuild:easybuild -R /scratch; fi # install Lmod RC file cat > /etc/lmodrc.lua << EOF scDescriptT = { { [\"dir\"] = \"/app/lmodcache\", [\"timestamp\"] = \"/app/lmodcache/timestamp\", }, } EOF # change to 'easybuild' user su - easybuild # verbose commands, exit on first error set -ve # configure EasyBuild # use /scratch as general prefix, used for sources, build directories, etc. export EASYBUILD_PREFIX=/scratch # also use /scratch for temporary directories export EASYBUILD_TMPDIR=/scratch/tmp # download sources to /scratch/sources, but also consider files located in /tmp/easybuild/sources; # that way, source files that can not be downloaded can be seeded in export EASYBUILD_SOURCEPATH=/scratch/sources:/tmp/easybuild/sources # install software & modules into /app export EASYBUILD_INSTALLPATH=/app # use EasyBuild to install specified software eb Python-3.6.4-foss-2018a.eb --robot # update Lmod cache mkdir -p /app/lmodcache $LMOD_DIR/update_lmod_system_cache_files -d /app/lmodcache -t /app/lmodcache/timestamp /app/modules/all # exit from 'easybuild' user exit # cleanup, everything in /scratch is assumed to be temporary rm -rf /scratch/* %runscript eval \"$@\" %environment # make sure that 'module' and 'ml' commands are defined source /etc/profile # increase threshold time for Lmod to write cache in $HOME (which we don't want to do) export LMOD_SHORT_TIME=86400 # purge any modules that may be loaded outside container module --force purge # avoid picking up modules from outside of container module unuse $MODULEPATH # pick up modules installed in /app module use /app/modules/all # load module(s) corresponding to installed software module load Python/3.6.4-foss-2018a %labels The generated container recipe includes a bunch of ``yum install`` commands to install additional required/useful OS packages, ``pip install`` commands to install EasyBuild (if it's not installed yet), commands to create the ``easybuild`` user and provide write access to the ``/app`` and ``/scratch`` directories, and to configure Lmod and update the Lmod cache after software was installed with EasyBuild. In addition, the generated module files will follow the default module naming scheme ( ``EasyBuildMNS`` ). The modules that correspond to the easyconfig files that were specified on the command line will be loaded automatically, see the statements in the ``%environment`` section of the generated container recipe. .. _containers_example_build_image: Example of building container image +++++++++++++++++++++++++++++++++++ You can instruct EasyBuild to also build the container image by also using ``--container-build-image`` . Note that you will need to enter your ``sudo`` password (unless you recently executed a ``sudo`` command in the same shell session) :: $ eb GCC-6.4.0-2.28.eb --containerize --container-config bootstrap=localimage,from=/tmp/example.sif --container-build-image --experimental == temporary log file in case of crash /tmp/eb-aYXYC8/easybuild-8uXhvu.log == Singularity tool found at /usr/bin/singularity == Singularity version '2.4.6' is 2.4 or higher ... OK == Singularity definition file created at /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28 == Running 'sudo /usr/bin/singularity build /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28', you may need to enter your 'sudo' password... == (streaming) output for command 'sudo /usr/bin/singularity build /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28': Using container recipe deffile: /home/example/.local/easybuild/containers/Singularity.GCC-6.4.0-2.28 Sanitizing environment Adding base Singularity environment to container ... == temporary log file in case of crash /scratch/tmp/eb-WnmCI_/easybuild-GcKyY9.log == resolving dependencies ... ... == building and installing GCCcore/6.4.0... ... == building and installing binutils/2.28-GCCcore-6.4.0... ... == building and installing GCC/6.4.0-2.28... ... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file(s) /app/software/GCC/6.4.0-2.28/easybuild/easybuild-GCC-6.4.0-20180424.084946.log == Build succeeded for 15 out of 15 ... Building Singularity image... Singularity container built: /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif Cleaning up... == Singularity image created at /home/example/.local/easybuild/containers/GCC-6.4.0-2.28.sif == Temporary log file(s) /tmp/eb-aYXYC8/easybuild-8uXhvu.log* have been removed. == Temporary directory /tmp/eb-aYXYC8 has been removed. The inspect the container image, you can use ``singularity shell`` to start a shell session *in* the container :: $ singularity shell --shell \"/bin/bash --norc\" $HOME/.local/easybuild/containers/GCC-6.4.0-2.28.sif Singularity GCC-6.4.0-2.28.sif:~> module list Currently Loaded Modules: 1) GCCcore/6.4.0 2) binutils/2.28-GCCcore-6.4.0 3) GCC/6.4.0-2.28 Singularity GCC-6.4.0-2.28.sif:~> which gcc /app/software/GCCcore/6.4.0/bin/gcc Singularity GCC-6.4.0-2.28.sif:~> gcc --version gcc (GCC) 6.4.0 ... .. note :: We are passing ``--shell \"/bin/bash --norc`` to ``singularity shell`` to avoid that the ``.bashrc`` login script that may be present in your home directory is sourced, since that may include statements that are not relevant in the container environment. Or, you can use ``singularity exec`` to execute a command in the container. Compare the output of running ``which gcc`` and ``gcc --version`` locally :: $ which gcc /usr/bin/gcc $ gcc --version gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-16) ... and the output when running the same commands in the container :: $ singularity exec GCC-6.4.0-2.28.sif which gcc /app/software/GCCcore/6.4.0/bin/gcc $ singularity exec GCC-6.4.0-2.28.sif gcc --version gcc (GCC) 6.4.0 ... Configuration ------------- .. note :: You can specify each of these configuration options either as options to the ``eb`` command, via the equivalent ``$EASYBUILD_CONTAINER*`` environment variable, or via an EasyBuild configuration file; see :ref: `configuration_types` . .. _containers_cfg_path: Location for generated container recipes & images (``--containerpath``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To control the location where EasyBuild will put generated container recipes & images, use the ``--containerpath`` configuration setting. Next to providing this as an option to the ``eb`` command, you can also define the ``$EASYBUILD_CONTAINERPATH`` environment variable or specify ``containerpath`` in an EasyBuild configuration file. The default value for this location is ``$HOME/.local/easybuild/containers`` , unless the ``--prefix`` configuration setting was provided, in which case it becomes ``<prefix>/containers`` (see :ref: `prefix` ). Use ``eb --show-full-config | grep containerpath`` to determine the currently active setting. .. _containers_cfg_image_format: Container image format (``--container-image-format``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: This is only relevant when creating Singularity container images; the value for ``--container-image-format`` is ignored when creating Docker container images. The format for container images that EasyBuild is produces via the functionality provided by the container software can be controlled via the ``--container-image-format`` configuration setting. For Singularity containers (see :ref: `containers_cfg_type` ), three image formats are supported: * ``squashfs`` *(default when using Singularity 2.x)* : compressed images using ``squashfs`` read-only file system * ``sif`` *(default when using Singularity 3.x)* : compressed read-only Singularity Image File (SIF) * ``ext3`` : writable image file using ``ext3`` file system *(only supported with Singularity 2.x)* * ``sandbox`` : container image in a regular directory See also https://www.sylabs.io/guides/latest/user-guide/build_a_container.html . .. _containers_cfg_image_name: Name for container recipe & image (``--container-image-name``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ By default, EasyBuild will use the name of the first easyconfig file (without the ``.eb`` suffix) as a name for both the container recipe and image. You can specify an altername name using the ``--container-image-name`` configuration setting. The filename of generated container recipe will be ``Singularity.<name>`` . The filename of the container image will be ``<name><extension>`` , where the value for ``<extension>`` depends on the image format (see :ref: `containers_cfg_image_format` ): * ' ``.simg`` ' for ``squashfs`` Singularity container images *(only with Singularity 2.x)* * ' ``.img`` ' for ``ext3`` Singularity container images *(only with Singularity 2.x)* * ' ``.sif`` ' for Singularity container images in Singularity Image Format (SIF) *(only with Singularity 3.x)* * *empty* for ``sandbox`` Singularity container images (in which case the container image is actually a directory rather than a file) * *empty* for Docker container images .. _containers_tmpdir: Temporary directory for creating container images (``--container-tmpdir``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The container software that EasyBuild leverages to build container images may be using a temporary directory in a location that doesn't have sufficient free space. You can instruct EasyBuild to pass an alternate location via the ``--container-tmpdir`` configuration setting. For Singularity, the default is to use ``/tmp`` , see https://www.sylabs.io/guides/latest/user-guide/build_env.html#temporary-folders. If ``--container-tmpdir`` is specified, the ``$SINGULARITY_TMPDIR`` environment variable will be defined accordingly to let Singularity use that location instead. .. _containers_cfg_type: Type of container recipe/image to generate (``--container-type``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ With the ``--container-type`` configuration option, you can specify what type of container recipe/image EasyBuild should generated. Possible values are: * ``docker`` : Docker (https://docs.docker.com/) container recipe & images (supported since EasyBuild v3.6.2) * ``singularity`` *(default)* : Singularity (https://www.sylabs.io/singularity) container recipes & images .. _containers_stacking: 'Stacking' container images --------------------------- To avoid long build times and excessive large container images, you can construct your target container image step-by-step, by first building a base container image for the compiler toolchain you want to use, and then using it to build a container images for a particular (set of) software package(s). For example, to build a container image for Python 3.6.4 built with the ``foss/2018a`` toolchain :: $ cd /tmp # use current directory as location for generated container recipes & images $ export EASYBUILD_CONTAINERPATH=$PWD # build base container image for OpenMPI + GCC parts of foss/2018a toolchain, on top of CentOS 7.4 base image $ eb -C --container-build-image OpenMPI-2.1.2-GCC-6.4.0-2.28.eb --container-config bootstrap=yum,osversion=7 --experimental ... == Singularity image created at /tmp/OpenMPI-2.1.2-GCC-6.4.0-2.28.sif ... $ ls -lh OpenMPI-2.1.2-GCC-6.4.0-2.28.sif -rwxr-xr-x 1 root root 590M Apr 24 11:43 OpenMPI-2.1.2-GCC-6.4.0-2.28.sif # build another container image for the for the full foss/2018a toolchain, using the OpenMPI + GCC container as a base $ eb -C --container-build-image foss-2018a.eb --container-config bootstrap=localimage,from=OpenMPI-2.1.2-GCC-6.4.0-2.28.sif --experimental ... == Singularity image created at /tmp/foss-2018a.sif ... $ ls -lh foss-2018a.sif -rwxr-xr-x 1 root root 614M Apr 24 13:11 foss-2018a.sif # build container image for Python 3.6.4 with foss/2018a toolchain by leveraging base container image foss-2018a.sif $ eb -C --container-build-image Python-3.6.4-foss-2018a.eb --container-config bootstrap=localimage,from=foss-2018a.sif --experimental ... == Singularity image created at /tmp/Python-3.6.4-foss-2018a.sif ... $ ls -lh Python-3.6.4-foss-2018a.sif -rwxr-xr-x 1 root root 759M Apr 24 14:01 Python-3.6.4-foss-2018a.sif $ singularity exec Python-3.6.4-foss-2018a.sif which python /app/software/Python/3.6.4-foss-2018a/bin/python $ singularity exec Python-3.6.4-foss-2018a.sif python -V vsc40023 belongs to gsingularity Python 3.6.4 .. _containers_stacking: Seeding in source files for container build process --------------------------------------------------- In some cases, you may need to \"seed in\" manually downloaded source files into the container build environment, because the sources can not be downloaded automatically. As shown in :ref: `containers_example_recipe` , the container recipe generated by EasyBuild includes ``/tmp/easybuild/sources/`` as a fallback directory in the list of locations considered by EasyBuild when looking for sources/patches (see also :ref: `sourcepath` ). That way, you can copy source files that should be available when building the container image into ``/tmp/easybuild/sources/`` .","title":"Generating container recipes &amp; images"},{"location":"contributing/","text":"Contributing \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Contributing.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Contributing.rst in easybuilders/easybuild repo target: docs/contributing.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _contributing: Contributing ============ This documentation explains how you can contribute to EasyBuild, and discusses the review process for contributions. .. contents :: :depth: 3 :backlinks: none .. _contributing_how: How to contribute ----------------- It is a common misconception that contributing to an open source project requires being intimately familiar with its codebase. There are various ways to contribute, even if you don't have any experience with the programming language(s) being used by the project you are interested in. You can contribute to EasyBuild by: * :ref: `contributing_feedback` * :ref: `contributing_bugs` * :ref: `contributing_requests` * :ref: `contributing_helping_others` * :ref: `contributing_easyconfigs` * :ref: `contributing_code` * :ref: `contributing_docs` * :ref: `contributing_conversation` .. _contributing_feedback: Giving feedback ~~~~~~~~~~~~~~~ An easy way to contribute to EasyBuild, even without having a lot of hands-on experience with it, is to **provide feedback** on your experiences. Feedback from people new to EasyBuild is valuable, since it provides a perspective that is easily overlooked by more experienced users. You can contact the EasyBuild community via the EasyBuild mailing list ( ``easybuild@lists.ugent.be`` ), the ``#easybuild`` IRC channel (see also :ref: `getting_help` ). .. _contributing_bugs: Reporting bugs ~~~~~~~~~~~~~~ If you run into unexpected problems when using EasyBuild, please **open a bug report** in the issue tracker of the relevant GitHub repository: * https://github.com/easybuilders/easybuild-framework/issues: for general problems with ``eb`` , the EasyBuild framework, etc. * https://github.com/easybuilders/easybuild-easyblocks/issues: for problems specific to a particular (generic or software-specific) easyblock, etc. * https://github.com/easybuilders/easybuild-easyconfigs/issues: for problems specific to a particular software package, e.g., with building and installing a particular version of that software, or when using a particular toolchain, etc. * https://github.com/easybuilders/easybuild/issues: for problems with the EasyBuild documentation, etc. Please try and provide all relevant information, which may include: * the EasyBuild version you are using * the specifics of the system you are using, incl. OS + version, Python version, modules tool & version, etc. * the active EasyBuild configuration; usually the output of ``eb --show-config`` is sufficient * the full ``eb`` command line that was used * warning or error messages, or other relevant informative messages * filename or contents of easyconfig file(s) being used * EasyBuild log file (for example via https://gist.github.com/), preferably collected with ``eb --debug`` .. _contributing_requests: Submitting feature/change requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If you have **suggestions for enhancements or ideas for new features** that could be useful, please open an issue in the relevant GitHub repository (see :ref: `contributing_bugs` ). Describe what you have in mind, and maybe also provide a concrete example to illustrate how your suggestion would improve the current functionality. .. _contributing_helping_others: Helping others ~~~~~~~~~~~~~~ Try and **help others** based on your experience, or help them figure out an answer to their question or a solution to their problem using the EasyBuild documentation or by reaching out to someone else in the EasyBuild community that may know the answer. The EasyBuild community is known to be very welcoming and helpful, and you too can be a part of that. .. _contributing_easyconfigs: Contributing easyconfig files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Please **contribute easyconfig files** that are not included yet in (the ``develop`` branch of) the ``easybuild-easyconfigs`` GitHub repository at https://github.com/easybuilders/easybuild-easyconfigs. This includes easyconfigs for software that is not supported yet by EasyBuild, as well as updates to existing easyconfigs (e.g., version updates, using a different toolchain, etc.), even if you consider the updates to be trivial. Keep in mind that being able to use something that is known to work out-of-the-box can save quite a bit of time compared to having to tweak existing easyconfigs and validate the result installations. We highly recommend using the ``--new-pr`` and ``--update-pr`` command line options for contributing easyconfig files; see :ref: `github_new_update_pr` . .. _contributing_code: Contributing code changes ~~~~~~~~~~~~~~~~~~~~~~~~~ Of course you can also **contribute code changes** , including bug fixes, enhancements or additional features in the EasyBuild framework, the easyblocks repository, the test suites or in related scripts. Do keep in mind that this requires some experience with Python, although you should be able to go a long way by using the existing code base as support. See :ref: `contributing_pull_requests` for more information on the practical aspects of contributing code. .. _contributing_docs: Writing documentation ~~~~~~~~~~~~~~~~~~~~~ Another way to contribute to EasyBuild without having to implement Python code is by **writing documentation** , i.e. enhancing or updating existing documentation or documenting features that are not covered yet. To contribute to the documentation hosted at http://easybuild.readthedocs.io/, you should open a pull request to the ``develop`` branch of the main EasyBuild repository at https://github.com/easybuilders/easybuild; see the ``docs`` subdirectory. A particularly useful tool is http://rst.ninjs.org/, which can be used to preview how the documentation written in ``reStructuredText`` format will be rendered on ``readthedocs.org`` (select the ``Nature`` theme for optimal results). .. _contributing_conversation: Joining the conversation ~~~~~~~~~~~~~~~~~~~~~~~~ Last but not least, you can actively **join the conversation** that arise on the EasyBuild mailing list, the ``#easybuild`` IRC channel and during the bi-weekly EasyBuild conference calls (see https://github.com/easybuilders/easybuild/wiki/Conference-calls). Engage with the EasyBuild community, and help steer EasyBuild development by participating in the conversations regarding a variety of topics related to building and installing (scientific) software. .. _contributing_pull_requests: Pull requests ------------- To contribute to the EasyBuild framework, easyblocks, easyconfig files or the EasyBuild documentation, you will need to open a **pull request** to the corresponding GitHub repository: * EasyBuild framework: https://github.com/easybuilders/easybuild-framework * easyblocks: https://github.com/easybuilders/easybuild-easyblocks * easyconfigs: https://github.com/easybuilders/easybuild-easyconfigs * documentation: https://github.com/easybuilders/easybuild (see ``docs`` subdirectory) Doing this the traditional way requires some knowledge about using ``git`` (i.e. creating commits, using branches, pushing to and pulling from remote Git repositories, etc.), and being familiar with GitHub. **However, this can be largely circumvented by using the GitHub integration provided by EasyBuild, see ** :ref:`integration_with_github` ** .** .. _contributing_pull_request_setup: Setting up ~~~~~~~~~~ .. note :: These instructions assume that you already have a working GitHub account. If you don't have a GitHub account yet, visit https://github.com/ to create one. We highly recommend registering your SSH public key in your GitHub account, via https://github.com/settings/keys. This allows pushing to your fork of the GitHub repositories without using a password. Before you can open pull requests, you will need to **fork** the GitHub repository you are targeting, and create a local **working copy** of that repository. This only needs to be done *once* for every of the EasyBuild repositories. .. note :: For the purpose of this guide, we will be using the ``easybuild-framework`` repository. However, the instructions are equivalent for the other EasyBuild repositories. .. _contributing_pull_request_setup_fork_repo: Forking the repository ++++++++++++++++++++++ First, create your own *fork* of the repository in your GitHub account using the ' ``Fork`` ' button on the top right at https://github.com/easybuilders/easybuild-framework. This will create a 'copy' of the ``easybuild-framework`` repository owned by the ``easybuilders`` GitHub organisation to your own personal GitHub account. You will have to use this fork as a staging area for your work, to prepare your contributions before creating the actual pull requests. .. _contributing_pull_request_setup_working_copy: Creating a working copy +++++++++++++++++++++++ .. note :: Do not forget to replace ' ``EXAMPLE`` ' with your GitHub account name in the instructions below. In addition to forking the repository on GitHub, you also need to create a local *working copy* of the repository. This is basically a local checkout of the repository where you can track the changes you are making. First, *clone* your fork of the repository: .. code :: shell git clone git@github.com:EXAMPLE/easybuild-framework.git If that worked as expected, you should have a new directory named ``easybuild-framework`` . Move into the ``easybuild-framework`` directory: .. code :: shell cd easybuild-framework Finally, we recommended to also check out the ``develop`` branch, which will be used as the base for your own branches: .. code :: shell git checkout -b develop origin/develop With this in place, you are all set to open pull requests for your contributions. Keeping the ``develop`` branch in sync ###################################### It is important to keep the ``develop`` branch in your working copy in sync with the upstream repository in the GitHub ``easybuilders`` organization. For this, you need to add the upstream repository as a ' *remote* ' repository: .. code :: shell git remote add upstream git@github.com:easybuilders/easybuild-framework.git .. note :: ' ``upstream`` ' is just a name that you give to the remote the central ``easybuilders`` repository on GitHub; you can modify this to your liking if desired (but do take that into account for the further instructions if you do so). For your fork of the repository, a default remote named ``origin`` should have been created via ``git clone`` (see the output of ``git remote -v`` ). To sync your ``develop`` branch, use ``git pull upstream develop`` after making sure you have the ``develop`` branch checked out: .. code :: shell git checkout develop git pull upstream develop .. _contributing_creating_pull_requests: Opening a new pull request ~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: This section describes the manual procedure to open a new pull request. Please consider using ``eb --new-pr`` instead, see :ref: `github_new_pr` . .. note :: We assume you are already located in your local working copy of the repository you want to contribute to (e.g., ``easybuild-framework`` ). To open a pull request for your contribution, you must follow these steps: i. :ref: `contributing_creating_pull_requests_branch` ii. :ref: `contributing_creating_pull_requests_commit` iii. :ref: `contributing_creating_pull_requests_push` iv. :ref: `contributing_creating_pull_requests_pr_title` v. :ref: `contributing_creating_pull_requests_open_pr` .. _contributing_creating_pull_requests_branch: Creating a new branch +++++++++++++++++++++ First, create a new branch for your work. You can do this either before or after making the changes that you would like to contribute, but we recommend to create a new branch before making any changes. Make sure you have the ``develop`` branch checked out before creating your branch: .. code :: shell git checkout develop To create a new branch, you should use ``git branch <branch_name>`` followed by ``git checkout <branch_name>`` , or equivalently ``git checkout -b <branch_name>`` . For example, to create a new branch named ``mybranch`` : .. code :: shell git checkout -b mybranch You can choose the branch name freely, but make it sufficiently descriptive -- your future self will thank you. .. _contributing_creating_pull_requests_commit: Committing your changes +++++++++++++++++++++++ To 'save' your changes, you should create one or more *commits* in the branch you created. We recommended making separate commits for different 'units of work'. First, make sure you have checked out the branch were you want to commit the changes to. For example, to prepare for committing changes to the ``mybranch`` branch: .. code :: shell git checkout mybranch To check which branch is currently checked out, use ``git branch`` . To get a high-level overview of the changes before committing them, you can use ``git status`` . To see the actual changes that were made, use ``git diff`` . To commit the changes you want to contribute, use ``git add <files>`` to *stage* the changes, followed by ``git commit -m \"<message>\"`` to create the actual commit. For example, to commit the changes that were made to ``easybuild/tools/filetools.py`` : .. code :: shell git add easybuild/tools/filetools.py git status # check which files are staged for commit git commit -m \"example commit message for changes to filetools.py\" .. note :: Please use a concise commit message that describes the changes you made. .. note :: For files that are already being tracked, you can use ``git commit -am <message>`` to commit all changes at once. To verify that your work was committed, use ``git log`` to see all commits on the current branch. Use ``git log --stat`` and/or ``git log --diff`` to see more details about which changes are included in each of the commits. .. _contributing_creating_pull_requests_push: Pushing your branch +++++++++++++++++++ Once you have committed your changes to a branch, you should *push* your branch to your fork of the GitHub repository using ``git push`` . For example, to push the ``mybranch`` branch to your fork of the GitHub repository (via the ``origin`` remote, see :ref: `contributing_pull_request_setup_working_copy` ): .. code :: shell git push origin mybranch Note: this will make your work public. .. _contributing_creating_pull_requests_pr_title: Pull request title & description ++++++++++++++++++++++++++++++++ Please use a descriptive (short) title for your pull requests, and clarify (if needed) in the pull request description. If any other pull requests are required, refer to them in the description using ``#<PR number>`` (only for pull requests to the same repository), or by copy-pasting the URL to the pull request. For pull requests to the easyconfig repository, we recommend using this format for the pull request title when contributing new easyconfig files :: {<moduleclass>}[<toolchain>] <software name> <software version> <extra info> For example: * ``{tools}[dummy] EasyBuild v3.2.1`` * ``{math}[intel/2017a] numpy 1.13.0 w/ Python 2.7.13`` * ``{math,numlib}[foss/2017a] METIS v5.1.0, ParMETIS v4.0.3, SuiteSparse v4.5.5, ...`` If you are opening a work-in-progress pull request, for example to solicit feedback, tag it using ``(WIP)`` . in the pull request title. .. _contributing_creating_pull_requests_open_pr: Opening the pull request ++++++++++++++++++++++++ To open a pull request using the branch you pushed, you should use the GitHub interface, and follow the steps outlined below. .. note :: Replace ' ``EXAMPLE`` ' with your GitHub account name, and ' ``easybuild-framework`` ' with the name of the target EasyBuild repository. i. visit https://github.com/EXAMPLE/easybuild-framework; ii. switch to the branch that includes the changes you want to contribute using the ' ``Branch: main`` ' button on the left, for example by selecting ``Branch: mybranch`` from the dropdown list iii. click the ' ``New pull request`` ' button; iv. change the target branch to ``develop`` using the ' ``base: main`` ' button; v. review your changes using the 'diff' view presented by GitHub; vi. provide an appropriate title and description for your contribution; vii. open the pull request by clicking the green ' ``Create pull request`` ' button Next, your pull request will be reviewed & tested, see :ref: `contributing_review_process` . .. _contributing_updating_pull_requests: Updating existing pull requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: This section describes the manual procedure to create a new pull request. Please consider using ``eb --update-pr`` instead, see :ref: `github_update_pr` . It is quite common to update a pull request after creating it, for example if the test suite run in GitHub Actions reports problems with the changes being made, or as a response to someone reviewing your contribution. To update an existing pull request, it suffices to add commits to the branch that was used for opening the pull request, and pushing the updated branch to GitHub. For example, to update the pull request that was created using the ``mybranch`` branch: .. code :: shell git checkout mybranch # make changes... git add <paths to changed files> git commit -m \"example commit message for additional changes\" git push origin mybranch Updating a pull request will trigger GitHub Actions to re-test your contribution, and a notification will be sent out to whoever is 'watching' your pull request. .. _contributing_merging_pull_requests: Merging of pull requests ~~~~~~~~~~~~~~~~~~~~~~~~ Once your pull request has been given the green light by GitHub Actions and one or more people reviewing have approved the changes, it can be merged into the ``develop`` branch. **This can only be done by a member of the EasyBuild maintainers team. Only pull requests that meet the requirements are eligible for merging, see ** :ref:`contributing_review_process_pr_requirements` ** .** Merging a pull request usually implies that the changes will be part of the next EasyBuild release. .. _contributing_review_process: Review process for contributions -------------------------------- Each contribution is thoroughly reviewed and tested before it gets merged in. Some aspects of this are automated, others require human intervention. .. _contributing_review_process_pr_requirements: Requirements for pull requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **Only pull requests (PRs) that fulfill these requirements are eligible to be merged:** (i) *the PR must target the* ``develop`` *branch of the repository* ; see :ref: `contributing_review_process_develop_branch` (ii) *the test suite must (still) pass* , i.e. GitHub Actions *must* give a green light; see :ref: `contributing_review_process_travis` * *tests should be added or enhanced when appropriate* ; see :ref: `contributing_review_process_adding_tests` , especially for PRs to the ``easybuild-framework`` repository (iii) *backward compatibility should be retained* ; see :ref: `contributing_review_process_backward_compatibility` (iv) *code style must be kept consistent* ; see :ref: `contributing_review_process_code_style` * *easyconfigs should be kept consistent across versions & toolchains* ; see :ref: `contributing_review_process_review_pr` (v) *(successful) test reports must be submitted for easyconfig PRs* ; see :ref: `contributing_review_process_test_reports` (vi) *the PR is approved by one or more maintainers of the repository* ; see :ref: `maintainers` (vii) *the PR should be merged by one of the maintainers, other than the author of the PR* ; see :ref: `contributing_review_process_do_not_merge_your_own_prs` .. _contributing_review_process_develop_branch: ``develop`` branch ~~~~~~~~~~~~~~~~~~ **Pull requests are only merged in the** ' ``develop`` ' **branch** of the EasyBuild repositories, which contains the changes that will be included in the next EasyBuild release. The ' ``main`` ' branch provides the latest stable release of EasyBuild at all times. Only the EasyBuild release manager should issue a pull request to the EasyBuild ' ``main`` ' branch, when preparing a new EasyBuild release. Occasionally, an additional version branch (e.g. ' ``3.3.x`` ') may be introduced temporarily, in case an intermittent bugfix release is being worked on. .. _contributing_review_process_github_actions: Test suite (GitHub Actions) ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Each pull request is tested automatically by `GitHub Actions <https://github.com/features/actions> `_ and the test result is reported in the pull request. **Only pull requests that have been tested and approved by GitHub Actions are eligible for being merged!** Note that GitHub Actions will only run the *test suite* for that particular repository. That is, for easyconfig contributions it does *not* include actually building and installing software. For more information on the test suites, see :ref: `unit_tests` . .. _contributing_review_process_adding_tests: Adding tests ++++++++++++ An implicit requirement for contributions, in particular contributions to the EasyBuild framework, is that they **must be accompanied by additional tests or test cases** . For new features or enhancements, a dedicated test (case) must be added which verifies that the feature implementation works as expected. For bug fixes, a test (case) must be added that triggers the code path where the bug manifested, and which verifies that the bug was indeed fixed. Tests not only confirm that the implementation is correct, it also helps to ensure that any future changes will not break the functionality you contributed. .. _contributing_review_process_backward_compatibility: Backward compatibility ~~~~~~~~~~~~~~~~~~~~~~ **Contributions should retain backward compatibility** , i.e., they should *not* make any changes that alter the (default) functionality of the existing code base. Of course, enhancements to existing code that retain backward compatibility can be made. One exception to this rule is *bug fixes* , where the whole point is usually to fix functionality that was implemented incorrectly. This also applies to existing easyconfig files; for example, the versions of dependencies should *not* be altered. Adding dependencies that were missing or otherwise enhancing existing easyconfigs (e.g., adding extra extensions, enabling additional features, etc.) are usually considered acceptable. Changes that break backward compatibility have to be motivated well with technical arguments, and must be approved by the EasyBuild maintainers. .. _contributing_review_process_code_style: Code style review ~~~~~~~~~~~~~~~~~ Next to functional evaluation of contributions, care is also taken to maintain a consistent code style across the EasyBuild code base (see also :ref: `code_style` ); **contributions must take the (mostly PEP8) code style into account.** This aspect is sometimes considered to be needless overhead, yet it is an important aspect of the review process. A consistent code style is invaluable in a large code base that is constantly being updated by a worldwide community. This also applies to easyconfig files, where we try to maintain a strict style that mostly matches the established PEP8 coding style for Python (since easyconfigs are written in Python syntax). However, also the grouping and ordering of easyconfig parameters is a part of the 'code' style we maintain. An automated (partial) check to see whether easyconfig files are ready to be contributed can be performed via ``eb --check-contrib`` . This will check: * style aspects for the specified easyconfig files * whether SHA256 checksums are included for all source files & patches This check is also a part of the test suite run by GitHub Actions for easyconfig PRs. .. _contributing_review_process_review_pr: Comparing with existing easyconfigs (``--review-pr``) +++++++++++++++++++++++++++++++++++++++++++++++++++++ We try to maintain **consistency across easyconfig files** for a particular software package, across multiple software versions, toolchains and variants (with a different ``versionsuffix`` ). Therefore, easyconfig contributions are also reviewed using ``eb --review-pr <PR #>`` , which compares the touched easyconfig files to those in the current ``develop`` branch that are most closely related. The easyconfig files to compare with are selected based on similarity, by combining two criteria, in order. First, the software version is taken into account, using one of the following criteria: * exact match on software version match * match on major/minor software version * match on major software version * no match on software version This is combined with one of the criteria below (in order): * matching versionsuffix and toolchain name/version * matching versionsuffix and toolchain name (any toolchain version) * matching versionsuffix (any toolchain name/version) * matching toolchain name/version (any versionsuffix) * matching toolchain name (any versionsuffix, toolchain version) * no extra requirements (any versionsuffix, toolchain name/version) The first combination of one of the software version criteria with one of the other criteria that yields one or more matching easyconfig files is used. If none of the combinations match, no easyconfig files for that particular software package are available yet, and no comparison is made. The output of ``--review-pr`` provides a 'multidiff' comparison, which highlights the differences between the easyconfig file in the pull request and the most similar selected ones from the current ``develop`` branch. For example: .. raw :: html <script type=\"text/javascript\" src=\"https://asciinema.org/a/103889.js\" id=\"asciicast-103889\" async></script> Interpreting this output is a quick and easy way to assess how different the contributed easyconfig files are from the existing easyconfigs, although it does require a bit of practice because of the density of the provided information. .. _contributing_review_process_test_reports: Test reports for easyconfig contributions (``upload-test-report``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For easyconfig contributions, one or more accompanying **test reports must be submitted** to confirm that the added and/or changed easyconfig files (still) work as expected. We recommend that you submit a test report for your own easyconfig pull requests. Other people can also submit test reports to confirm that your contribution works as expected on their system(s). With EasyBuild being properly configured (see :ref: `github_configuration` ), this should be as simple as running ``eb --from-pr <PR#> --upload-test-report --force --robot`` . See :ref: `github_upload_test_report` for more information. .. _contributing_review_process_do_not_merge_your_own_prs: Pull requests are merged by a maintainer other than the author ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **A pull request should never be merged by its author.** This policy is maintained in order to ensure a *\"two-pairs-of-eyes\"* review process of all contributions. .. _contributing_review_process_why_pr_closed_by_maintainer: Why a pull request may be closed by a maintainer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Although it is generally avoided, there are a few reasons why maintainers might close a pull request: * uses an archived toolchain * no activity for > 6 months * obsolete because more recent PRs for newer versions of the software have been merged already This is done routinely as a way of focusing everyone's efforts on relevant contributions, and should not be seen as a rejection. In fact, contributors are encouraged to reopen the pull request if they feel it is still relevant.","title":"Contributing"},{"location":"contributing/#contributing","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Contributing.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Contributing.rst in easybuilders/easybuild repo target: docs/contributing.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _contributing: Contributing ============ This documentation explains how you can contribute to EasyBuild, and discusses the review process for contributions. .. contents :: :depth: 3 :backlinks: none .. _contributing_how: How to contribute ----------------- It is a common misconception that contributing to an open source project requires being intimately familiar with its codebase. There are various ways to contribute, even if you don't have any experience with the programming language(s) being used by the project you are interested in. You can contribute to EasyBuild by: * :ref: `contributing_feedback` * :ref: `contributing_bugs` * :ref: `contributing_requests` * :ref: `contributing_helping_others` * :ref: `contributing_easyconfigs` * :ref: `contributing_code` * :ref: `contributing_docs` * :ref: `contributing_conversation` .. _contributing_feedback: Giving feedback ~~~~~~~~~~~~~~~ An easy way to contribute to EasyBuild, even without having a lot of hands-on experience with it, is to **provide feedback** on your experiences. Feedback from people new to EasyBuild is valuable, since it provides a perspective that is easily overlooked by more experienced users. You can contact the EasyBuild community via the EasyBuild mailing list ( ``easybuild@lists.ugent.be`` ), the ``#easybuild`` IRC channel (see also :ref: `getting_help` ). .. _contributing_bugs: Reporting bugs ~~~~~~~~~~~~~~ If you run into unexpected problems when using EasyBuild, please **open a bug report** in the issue tracker of the relevant GitHub repository: * https://github.com/easybuilders/easybuild-framework/issues: for general problems with ``eb`` , the EasyBuild framework, etc. * https://github.com/easybuilders/easybuild-easyblocks/issues: for problems specific to a particular (generic or software-specific) easyblock, etc. * https://github.com/easybuilders/easybuild-easyconfigs/issues: for problems specific to a particular software package, e.g., with building and installing a particular version of that software, or when using a particular toolchain, etc. * https://github.com/easybuilders/easybuild/issues: for problems with the EasyBuild documentation, etc. Please try and provide all relevant information, which may include: * the EasyBuild version you are using * the specifics of the system you are using, incl. OS + version, Python version, modules tool & version, etc. * the active EasyBuild configuration; usually the output of ``eb --show-config`` is sufficient * the full ``eb`` command line that was used * warning or error messages, or other relevant informative messages * filename or contents of easyconfig file(s) being used * EasyBuild log file (for example via https://gist.github.com/), preferably collected with ``eb --debug`` .. _contributing_requests: Submitting feature/change requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If you have **suggestions for enhancements or ideas for new features** that could be useful, please open an issue in the relevant GitHub repository (see :ref: `contributing_bugs` ). Describe what you have in mind, and maybe also provide a concrete example to illustrate how your suggestion would improve the current functionality. .. _contributing_helping_others: Helping others ~~~~~~~~~~~~~~ Try and **help others** based on your experience, or help them figure out an answer to their question or a solution to their problem using the EasyBuild documentation or by reaching out to someone else in the EasyBuild community that may know the answer. The EasyBuild community is known to be very welcoming and helpful, and you too can be a part of that. .. _contributing_easyconfigs: Contributing easyconfig files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Please **contribute easyconfig files** that are not included yet in (the ``develop`` branch of) the ``easybuild-easyconfigs`` GitHub repository at https://github.com/easybuilders/easybuild-easyconfigs. This includes easyconfigs for software that is not supported yet by EasyBuild, as well as updates to existing easyconfigs (e.g., version updates, using a different toolchain, etc.), even if you consider the updates to be trivial. Keep in mind that being able to use something that is known to work out-of-the-box can save quite a bit of time compared to having to tweak existing easyconfigs and validate the result installations. We highly recommend using the ``--new-pr`` and ``--update-pr`` command line options for contributing easyconfig files; see :ref: `github_new_update_pr` . .. _contributing_code: Contributing code changes ~~~~~~~~~~~~~~~~~~~~~~~~~ Of course you can also **contribute code changes** , including bug fixes, enhancements or additional features in the EasyBuild framework, the easyblocks repository, the test suites or in related scripts. Do keep in mind that this requires some experience with Python, although you should be able to go a long way by using the existing code base as support. See :ref: `contributing_pull_requests` for more information on the practical aspects of contributing code. .. _contributing_docs: Writing documentation ~~~~~~~~~~~~~~~~~~~~~ Another way to contribute to EasyBuild without having to implement Python code is by **writing documentation** , i.e. enhancing or updating existing documentation or documenting features that are not covered yet. To contribute to the documentation hosted at http://easybuild.readthedocs.io/, you should open a pull request to the ``develop`` branch of the main EasyBuild repository at https://github.com/easybuilders/easybuild; see the ``docs`` subdirectory. A particularly useful tool is http://rst.ninjs.org/, which can be used to preview how the documentation written in ``reStructuredText`` format will be rendered on ``readthedocs.org`` (select the ``Nature`` theme for optimal results). .. _contributing_conversation: Joining the conversation ~~~~~~~~~~~~~~~~~~~~~~~~ Last but not least, you can actively **join the conversation** that arise on the EasyBuild mailing list, the ``#easybuild`` IRC channel and during the bi-weekly EasyBuild conference calls (see https://github.com/easybuilders/easybuild/wiki/Conference-calls). Engage with the EasyBuild community, and help steer EasyBuild development by participating in the conversations regarding a variety of topics related to building and installing (scientific) software. .. _contributing_pull_requests: Pull requests ------------- To contribute to the EasyBuild framework, easyblocks, easyconfig files or the EasyBuild documentation, you will need to open a **pull request** to the corresponding GitHub repository: * EasyBuild framework: https://github.com/easybuilders/easybuild-framework * easyblocks: https://github.com/easybuilders/easybuild-easyblocks * easyconfigs: https://github.com/easybuilders/easybuild-easyconfigs * documentation: https://github.com/easybuilders/easybuild (see ``docs`` subdirectory) Doing this the traditional way requires some knowledge about using ``git`` (i.e. creating commits, using branches, pushing to and pulling from remote Git repositories, etc.), and being familiar with GitHub. **However, this can be largely circumvented by using the GitHub integration provided by EasyBuild, see ** :ref:`integration_with_github` ** .** .. _contributing_pull_request_setup: Setting up ~~~~~~~~~~ .. note :: These instructions assume that you already have a working GitHub account. If you don't have a GitHub account yet, visit https://github.com/ to create one. We highly recommend registering your SSH public key in your GitHub account, via https://github.com/settings/keys. This allows pushing to your fork of the GitHub repositories without using a password. Before you can open pull requests, you will need to **fork** the GitHub repository you are targeting, and create a local **working copy** of that repository. This only needs to be done *once* for every of the EasyBuild repositories. .. note :: For the purpose of this guide, we will be using the ``easybuild-framework`` repository. However, the instructions are equivalent for the other EasyBuild repositories. .. _contributing_pull_request_setup_fork_repo: Forking the repository ++++++++++++++++++++++ First, create your own *fork* of the repository in your GitHub account using the ' ``Fork`` ' button on the top right at https://github.com/easybuilders/easybuild-framework. This will create a 'copy' of the ``easybuild-framework`` repository owned by the ``easybuilders`` GitHub organisation to your own personal GitHub account. You will have to use this fork as a staging area for your work, to prepare your contributions before creating the actual pull requests. .. _contributing_pull_request_setup_working_copy: Creating a working copy +++++++++++++++++++++++ .. note :: Do not forget to replace ' ``EXAMPLE`` ' with your GitHub account name in the instructions below. In addition to forking the repository on GitHub, you also need to create a local *working copy* of the repository. This is basically a local checkout of the repository where you can track the changes you are making. First, *clone* your fork of the repository: .. code :: shell git clone git@github.com:EXAMPLE/easybuild-framework.git If that worked as expected, you should have a new directory named ``easybuild-framework`` . Move into the ``easybuild-framework`` directory: .. code :: shell cd easybuild-framework Finally, we recommended to also check out the ``develop`` branch, which will be used as the base for your own branches: .. code :: shell git checkout -b develop origin/develop With this in place, you are all set to open pull requests for your contributions. Keeping the ``develop`` branch in sync ###################################### It is important to keep the ``develop`` branch in your working copy in sync with the upstream repository in the GitHub ``easybuilders`` organization. For this, you need to add the upstream repository as a ' *remote* ' repository: .. code :: shell git remote add upstream git@github.com:easybuilders/easybuild-framework.git .. note :: ' ``upstream`` ' is just a name that you give to the remote the central ``easybuilders`` repository on GitHub; you can modify this to your liking if desired (but do take that into account for the further instructions if you do so). For your fork of the repository, a default remote named ``origin`` should have been created via ``git clone`` (see the output of ``git remote -v`` ). To sync your ``develop`` branch, use ``git pull upstream develop`` after making sure you have the ``develop`` branch checked out: .. code :: shell git checkout develop git pull upstream develop .. _contributing_creating_pull_requests: Opening a new pull request ~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: This section describes the manual procedure to open a new pull request. Please consider using ``eb --new-pr`` instead, see :ref: `github_new_pr` . .. note :: We assume you are already located in your local working copy of the repository you want to contribute to (e.g., ``easybuild-framework`` ). To open a pull request for your contribution, you must follow these steps: i. :ref: `contributing_creating_pull_requests_branch` ii. :ref: `contributing_creating_pull_requests_commit` iii. :ref: `contributing_creating_pull_requests_push` iv. :ref: `contributing_creating_pull_requests_pr_title` v. :ref: `contributing_creating_pull_requests_open_pr` .. _contributing_creating_pull_requests_branch: Creating a new branch +++++++++++++++++++++ First, create a new branch for your work. You can do this either before or after making the changes that you would like to contribute, but we recommend to create a new branch before making any changes. Make sure you have the ``develop`` branch checked out before creating your branch: .. code :: shell git checkout develop To create a new branch, you should use ``git branch <branch_name>`` followed by ``git checkout <branch_name>`` , or equivalently ``git checkout -b <branch_name>`` . For example, to create a new branch named ``mybranch`` : .. code :: shell git checkout -b mybranch You can choose the branch name freely, but make it sufficiently descriptive -- your future self will thank you. .. _contributing_creating_pull_requests_commit: Committing your changes +++++++++++++++++++++++ To 'save' your changes, you should create one or more *commits* in the branch you created. We recommended making separate commits for different 'units of work'. First, make sure you have checked out the branch were you want to commit the changes to. For example, to prepare for committing changes to the ``mybranch`` branch: .. code :: shell git checkout mybranch To check which branch is currently checked out, use ``git branch`` . To get a high-level overview of the changes before committing them, you can use ``git status`` . To see the actual changes that were made, use ``git diff`` . To commit the changes you want to contribute, use ``git add <files>`` to *stage* the changes, followed by ``git commit -m \"<message>\"`` to create the actual commit. For example, to commit the changes that were made to ``easybuild/tools/filetools.py`` : .. code :: shell git add easybuild/tools/filetools.py git status # check which files are staged for commit git commit -m \"example commit message for changes to filetools.py\" .. note :: Please use a concise commit message that describes the changes you made. .. note :: For files that are already being tracked, you can use ``git commit -am <message>`` to commit all changes at once. To verify that your work was committed, use ``git log`` to see all commits on the current branch. Use ``git log --stat`` and/or ``git log --diff`` to see more details about which changes are included in each of the commits. .. _contributing_creating_pull_requests_push: Pushing your branch +++++++++++++++++++ Once you have committed your changes to a branch, you should *push* your branch to your fork of the GitHub repository using ``git push`` . For example, to push the ``mybranch`` branch to your fork of the GitHub repository (via the ``origin`` remote, see :ref: `contributing_pull_request_setup_working_copy` ): .. code :: shell git push origin mybranch Note: this will make your work public. .. _contributing_creating_pull_requests_pr_title: Pull request title & description ++++++++++++++++++++++++++++++++ Please use a descriptive (short) title for your pull requests, and clarify (if needed) in the pull request description. If any other pull requests are required, refer to them in the description using ``#<PR number>`` (only for pull requests to the same repository), or by copy-pasting the URL to the pull request. For pull requests to the easyconfig repository, we recommend using this format for the pull request title when contributing new easyconfig files :: {<moduleclass>}[<toolchain>] <software name> <software version> <extra info> For example: * ``{tools}[dummy] EasyBuild v3.2.1`` * ``{math}[intel/2017a] numpy 1.13.0 w/ Python 2.7.13`` * ``{math,numlib}[foss/2017a] METIS v5.1.0, ParMETIS v4.0.3, SuiteSparse v4.5.5, ...`` If you are opening a work-in-progress pull request, for example to solicit feedback, tag it using ``(WIP)`` . in the pull request title. .. _contributing_creating_pull_requests_open_pr: Opening the pull request ++++++++++++++++++++++++ To open a pull request using the branch you pushed, you should use the GitHub interface, and follow the steps outlined below. .. note :: Replace ' ``EXAMPLE`` ' with your GitHub account name, and ' ``easybuild-framework`` ' with the name of the target EasyBuild repository. i. visit https://github.com/EXAMPLE/easybuild-framework; ii. switch to the branch that includes the changes you want to contribute using the ' ``Branch: main`` ' button on the left, for example by selecting ``Branch: mybranch`` from the dropdown list iii. click the ' ``New pull request`` ' button; iv. change the target branch to ``develop`` using the ' ``base: main`` ' button; v. review your changes using the 'diff' view presented by GitHub; vi. provide an appropriate title and description for your contribution; vii. open the pull request by clicking the green ' ``Create pull request`` ' button Next, your pull request will be reviewed & tested, see :ref: `contributing_review_process` . .. _contributing_updating_pull_requests: Updating existing pull requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: This section describes the manual procedure to create a new pull request. Please consider using ``eb --update-pr`` instead, see :ref: `github_update_pr` . It is quite common to update a pull request after creating it, for example if the test suite run in GitHub Actions reports problems with the changes being made, or as a response to someone reviewing your contribution. To update an existing pull request, it suffices to add commits to the branch that was used for opening the pull request, and pushing the updated branch to GitHub. For example, to update the pull request that was created using the ``mybranch`` branch: .. code :: shell git checkout mybranch # make changes... git add <paths to changed files> git commit -m \"example commit message for additional changes\" git push origin mybranch Updating a pull request will trigger GitHub Actions to re-test your contribution, and a notification will be sent out to whoever is 'watching' your pull request. .. _contributing_merging_pull_requests: Merging of pull requests ~~~~~~~~~~~~~~~~~~~~~~~~ Once your pull request has been given the green light by GitHub Actions and one or more people reviewing have approved the changes, it can be merged into the ``develop`` branch. **This can only be done by a member of the EasyBuild maintainers team. Only pull requests that meet the requirements are eligible for merging, see ** :ref:`contributing_review_process_pr_requirements` ** .** Merging a pull request usually implies that the changes will be part of the next EasyBuild release. .. _contributing_review_process: Review process for contributions -------------------------------- Each contribution is thoroughly reviewed and tested before it gets merged in. Some aspects of this are automated, others require human intervention. .. _contributing_review_process_pr_requirements: Requirements for pull requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **Only pull requests (PRs) that fulfill these requirements are eligible to be merged:** (i) *the PR must target the* ``develop`` *branch of the repository* ; see :ref: `contributing_review_process_develop_branch` (ii) *the test suite must (still) pass* , i.e. GitHub Actions *must* give a green light; see :ref: `contributing_review_process_travis` * *tests should be added or enhanced when appropriate* ; see :ref: `contributing_review_process_adding_tests` , especially for PRs to the ``easybuild-framework`` repository (iii) *backward compatibility should be retained* ; see :ref: `contributing_review_process_backward_compatibility` (iv) *code style must be kept consistent* ; see :ref: `contributing_review_process_code_style` * *easyconfigs should be kept consistent across versions & toolchains* ; see :ref: `contributing_review_process_review_pr` (v) *(successful) test reports must be submitted for easyconfig PRs* ; see :ref: `contributing_review_process_test_reports` (vi) *the PR is approved by one or more maintainers of the repository* ; see :ref: `maintainers` (vii) *the PR should be merged by one of the maintainers, other than the author of the PR* ; see :ref: `contributing_review_process_do_not_merge_your_own_prs` .. _contributing_review_process_develop_branch: ``develop`` branch ~~~~~~~~~~~~~~~~~~ **Pull requests are only merged in the** ' ``develop`` ' **branch** of the EasyBuild repositories, which contains the changes that will be included in the next EasyBuild release. The ' ``main`` ' branch provides the latest stable release of EasyBuild at all times. Only the EasyBuild release manager should issue a pull request to the EasyBuild ' ``main`` ' branch, when preparing a new EasyBuild release. Occasionally, an additional version branch (e.g. ' ``3.3.x`` ') may be introduced temporarily, in case an intermittent bugfix release is being worked on. .. _contributing_review_process_github_actions: Test suite (GitHub Actions) ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Each pull request is tested automatically by `GitHub Actions <https://github.com/features/actions> `_ and the test result is reported in the pull request. **Only pull requests that have been tested and approved by GitHub Actions are eligible for being merged!** Note that GitHub Actions will only run the *test suite* for that particular repository. That is, for easyconfig contributions it does *not* include actually building and installing software. For more information on the test suites, see :ref: `unit_tests` . .. _contributing_review_process_adding_tests: Adding tests ++++++++++++ An implicit requirement for contributions, in particular contributions to the EasyBuild framework, is that they **must be accompanied by additional tests or test cases** . For new features or enhancements, a dedicated test (case) must be added which verifies that the feature implementation works as expected. For bug fixes, a test (case) must be added that triggers the code path where the bug manifested, and which verifies that the bug was indeed fixed. Tests not only confirm that the implementation is correct, it also helps to ensure that any future changes will not break the functionality you contributed. .. _contributing_review_process_backward_compatibility: Backward compatibility ~~~~~~~~~~~~~~~~~~~~~~ **Contributions should retain backward compatibility** , i.e., they should *not* make any changes that alter the (default) functionality of the existing code base. Of course, enhancements to existing code that retain backward compatibility can be made. One exception to this rule is *bug fixes* , where the whole point is usually to fix functionality that was implemented incorrectly. This also applies to existing easyconfig files; for example, the versions of dependencies should *not* be altered. Adding dependencies that were missing or otherwise enhancing existing easyconfigs (e.g., adding extra extensions, enabling additional features, etc.) are usually considered acceptable. Changes that break backward compatibility have to be motivated well with technical arguments, and must be approved by the EasyBuild maintainers. .. _contributing_review_process_code_style: Code style review ~~~~~~~~~~~~~~~~~ Next to functional evaluation of contributions, care is also taken to maintain a consistent code style across the EasyBuild code base (see also :ref: `code_style` ); **contributions must take the (mostly PEP8) code style into account.** This aspect is sometimes considered to be needless overhead, yet it is an important aspect of the review process. A consistent code style is invaluable in a large code base that is constantly being updated by a worldwide community. This also applies to easyconfig files, where we try to maintain a strict style that mostly matches the established PEP8 coding style for Python (since easyconfigs are written in Python syntax). However, also the grouping and ordering of easyconfig parameters is a part of the 'code' style we maintain. An automated (partial) check to see whether easyconfig files are ready to be contributed can be performed via ``eb --check-contrib`` . This will check: * style aspects for the specified easyconfig files * whether SHA256 checksums are included for all source files & patches This check is also a part of the test suite run by GitHub Actions for easyconfig PRs. .. _contributing_review_process_review_pr: Comparing with existing easyconfigs (``--review-pr``) +++++++++++++++++++++++++++++++++++++++++++++++++++++ We try to maintain **consistency across easyconfig files** for a particular software package, across multiple software versions, toolchains and variants (with a different ``versionsuffix`` ). Therefore, easyconfig contributions are also reviewed using ``eb --review-pr <PR #>`` , which compares the touched easyconfig files to those in the current ``develop`` branch that are most closely related. The easyconfig files to compare with are selected based on similarity, by combining two criteria, in order. First, the software version is taken into account, using one of the following criteria: * exact match on software version match * match on major/minor software version * match on major software version * no match on software version This is combined with one of the criteria below (in order): * matching versionsuffix and toolchain name/version * matching versionsuffix and toolchain name (any toolchain version) * matching versionsuffix (any toolchain name/version) * matching toolchain name/version (any versionsuffix) * matching toolchain name (any versionsuffix, toolchain version) * no extra requirements (any versionsuffix, toolchain name/version) The first combination of one of the software version criteria with one of the other criteria that yields one or more matching easyconfig files is used. If none of the combinations match, no easyconfig files for that particular software package are available yet, and no comparison is made. The output of ``--review-pr`` provides a 'multidiff' comparison, which highlights the differences between the easyconfig file in the pull request and the most similar selected ones from the current ``develop`` branch. For example: .. raw :: html <script type=\"text/javascript\" src=\"https://asciinema.org/a/103889.js\" id=\"asciicast-103889\" async></script> Interpreting this output is a quick and easy way to assess how different the contributed easyconfig files are from the existing easyconfigs, although it does require a bit of practice because of the density of the provided information. .. _contributing_review_process_test_reports: Test reports for easyconfig contributions (``upload-test-report``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For easyconfig contributions, one or more accompanying **test reports must be submitted** to confirm that the added and/or changed easyconfig files (still) work as expected. We recommend that you submit a test report for your own easyconfig pull requests. Other people can also submit test reports to confirm that your contribution works as expected on their system(s). With EasyBuild being properly configured (see :ref: `github_configuration` ), this should be as simple as running ``eb --from-pr <PR#> --upload-test-report --force --robot`` . See :ref: `github_upload_test_report` for more information. .. _contributing_review_process_do_not_merge_your_own_prs: Pull requests are merged by a maintainer other than the author ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **A pull request should never be merged by its author.** This policy is maintained in order to ensure a *\"two-pairs-of-eyes\"* review process of all contributions. .. _contributing_review_process_why_pr_closed_by_maintainer: Why a pull request may be closed by a maintainer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Although it is generally avoided, there are a few reasons why maintainers might close a pull request: * uses an archived toolchain * no activity for > 6 months * obsolete because more recent PRs for newer versions of the software have been merged already This is done routinely as a way of focusing everyone's efforts on relevant contributions, and should not be seen as a rejection. In fact, contributors are encouraged to reopen the pull request if they feel it is still relevant.","title":"Contributing"},{"location":"controlling-compiler-optimization-flags/","text":"Controlling compiler optimization flags \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Controlling_compiler_optimization_flags.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Controlling_compiler_optimization_flags.rst in easybuilders/easybuild repo target: docs/controlling-compiler-optimization-flags.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _controlling_compiler_optimization_flags: Controlling compiler optimization flags ======================================= This page provides an overview on the different ways in which compiler optimization flags used by EasyBuild can be controlled. .. contents :: :depth: 3 :backlinks: none .. _controlling_compiler_optimization_flags_optarch: Controlling target architecture specific optimizations via ``--optarch`` ------------------------------------------------------------------------ .. _controlling_compiler_optimization_flags_optarch_default: Default behaviour ~~~~~~~~~~~~~~~~~ By default, EasyBuild optimizes builds for the CPU architecture of the build host, by instructing the compiler to generate instructions for the highest instruction set supported by the process architecture of the build host processor. This is done by including specific compiler flags in ``$CFLAGS`` , ``$CXXFLAGS`` , ``$FFLAGS`` , ``$F90FLAGS`` , etc. For example: * for toolchains using the GCC compilers, ``--march=native`` will be used (see https://gcc.gnu.org/onlinedocs/gcc-4.9.0/gcc/i386-and-x86-64-Options.html) * for toolchains using the Intel compilers, ``-xHost`` will be used (https://software.intel.com/en-us/node/522846) .. _controlling_compiler_optimization_flags_optarch_caveats: Caveats ~~~~~~~ .. _controlling_compiler_optimization_flags_optarch_caveats_heterogeneous: Heterogeneous clusters ^^^^^^^^^^^^^^^^^^^^^^ Optimizing for the processor architecture of the build host is usually what you want in an HPC cluster, but it has some implications if your cluster is heterogeneous (i.e., has different processor generations), or if you want to execute your applications in a machine with a processor architecture that is different from the one of the build host. For example, if you compile your application optimized for an Intel Haswell processor (i.e. using AVX2 instructions), it will not run on a system with an older Intel Nehalem processor. One possible workaround for heterogeneous HPC clusters is to build as many copies of the software stack as you have processor generations in your cluster, and to configure your system so each compute node uses the right software stack matching its processor architecture type. Details for one way of doing this, using automounter/autofs are available at https://easybuilders.github.io/easybuild/files/sciCORE-software-management_20150611.pdf . Another solution is to configure EasyBuild to not optimize for the processor architecture of the build host via ``--optarch`` , see below. .. _controlling_compiler_optimization_flags_optarch_caveats_hardcoding: Build environment vs hardcoding in build scripts ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Be aware that that using ``--optarch`` as described below does not provide hard guarantees that the build will be executed using the intended compiler flags. EasyBuild will define the appropriate environment variables ( ``$CFLAGS`` and co) to use the compiler flags as specified, but some MakeFiles or build systems could have hardcoded values that have not been dealt with yet (for example, via a patch file or by specifying options to the ``make`` command). For example, the OpenBLAS build system will autodetect the processor architecture in the build host, and will optimize for that processor architecture by default. If you want a generic OpenBLAS build you will need to tweak the OpenBLAS easyconfig file to define the desired ``TARGET`` to use. For this you will need to modify the ``buildopts`` easyconfig parameter, for example :: buildopts = 'TARGET=PRESCOTT BINARY=64 ' + threading + ' CC=\"$CC\" FC=\"$F77\"' See these links for more details w.r.t. OpenBLAS: * https://github.com/xianyi/OpenBLAS/blob/develop/TargetList.txt * https://github.com/xianyi/OpenBLAS/issues/685 .. _controlling_compiler_optimization_flags_optarch_flags: Specifying target architecture specific optimization flags to use via ``--optarch=<flags>`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``--optarch`` EasyBuild configuration option, specific compiler flags can be provided that EasyBuild should use, rather than the ones used by default (depending on the compiler in the toolchain being used). Like any other configuration setting, this can also be specified via ``$EASYBUILD_OPTARCH`` , or by defining ``optarch`` in an EasyBuild configuration file (cfr. :ref: `configuration_consistency` ). For example, by specifying ``--optarch=march=core2`` , EasyBuild will use ``-march=core2`` rather than the default flag ``--march=native`` (when using GCC compilers). Likewise, to avoid using the default ``-xHost`` flag with the Intel compilers and using ``-xSSSE3`` instead, you can define ``$EASYBUILD_OPTARCH`` to be equal to ``xSSSE3`` . .. note :: The first dash ( ``-`` ) is added automagically to the value specified to ``--optarch`` , because of technicalities with the current implementation. The ``--optarch`` configuration option gives you flexibility to define the specific target architecture optimization flags you want, but requires that you take care of specifying different flags for different compilers and choose the right flags depending on your specific processor architecture. .. _controlling_compiler_optimization_flags_optarch_generic: Optimizing for a generic processor architecture via ``--optarch=GENERIC`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To make EasyBuild optimize for a *generic* processor architecture, ``--optarch`` can be set to ' ``GENERIC`` '. When this is the case, EasyBuild will use the right compiler flags to optimize for a generic processor architecture, i.e. avoid using machine instructions that are only supported by very recent processors. The ``GENERIC`` keyword for ``--optarch`` is recognized since EasyBuild v2.5.0, and is supported for GCC and Intel compilers on x86-64 systems (Intel or AMD). For other compilers that can be used in toolchains and other system architectures, the necessary compiler flags will be defined in later EasyBuild versions. Currently, using ``--optarch=GENERIC`` will result in the following target architecture optimization flags being used, (on a Linux x86-64 system): * for toolchains using GCC compilers: ``-march=x86-64 -mtune=generic`` * for toolchains using Intel compilers: ``-xSSE2`` On other systems or for other compilers, you can check which compiler flags will be used via :ref: `extended_dry_run` . .. _controlling_compiler_optimization_flags_optarch_per_compiler: Setting architecture flags for different compilers via ``--optarch=<compiler:flags>;<compiler:flags>`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Starting with version 3.1.0, EasyBuild supports specifying architecture flags on a per-compiler basis. This enables to \"set and forget\" the ``--optarch`` option for your compilers of interest, as opposed to change it depending on the compiler used on the packages to be installed. The syntax is ``<compiler:flags>;<compiler:flags>`` , where ``:`` separates the compiler name from the compiler flags, and ``;`` separates different compilers. This is an example for the Intel and GCC compilers: ``--optarch='Intel:xHost;GCC:march=x86-64 -mtune=generic'`` . As in the simple cases, EasyBuild adds one ``-`` to the flags specified, so the flags passed to the Intel and GCC compilers in this case are ``-xHost`` and ``-march=x86-64 -mtune=generic`` . Please note the quotes to escape the space in the GCC flags. Additionally, ``GENERIC`` is also supported on a compiler basis, allowing to specify a generic compilation for the desired compilers. This is an example of this usage: ``--optarch=Intel:xHost;GCC:GENERIC`` . Of course, this is supported just for compiler toolchains that recognize ``GENERIC`` . The options for each compiler are set independently. That means that if a GCC-based toolchain is used, but the only compiler specified is ``Intel`` (for example with ``--optarch=Intel:xCORE-AVX2`` ), then EasyBuild will behave as if ``--optarch`` was not specified for this toolchain. The compiler name corresponds to the value of the ``COMPILER_FAMILY`` constant of the toolchain. Two common examples are ``GCC`` and ``Intel`` . Due to the special treatment of ``--optarch`` in Cray environments, this feature is not supported on this platform.","title":"Controlling compiler optimization flags"},{"location":"controlling-compiler-optimization-flags/#controlling-compiler-optimization-flags","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Controlling_compiler_optimization_flags.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Controlling_compiler_optimization_flags.rst in easybuilders/easybuild repo target: docs/controlling-compiler-optimization-flags.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _controlling_compiler_optimization_flags: Controlling compiler optimization flags ======================================= This page provides an overview on the different ways in which compiler optimization flags used by EasyBuild can be controlled. .. contents :: :depth: 3 :backlinks: none .. _controlling_compiler_optimization_flags_optarch: Controlling target architecture specific optimizations via ``--optarch`` ------------------------------------------------------------------------ .. _controlling_compiler_optimization_flags_optarch_default: Default behaviour ~~~~~~~~~~~~~~~~~ By default, EasyBuild optimizes builds for the CPU architecture of the build host, by instructing the compiler to generate instructions for the highest instruction set supported by the process architecture of the build host processor. This is done by including specific compiler flags in ``$CFLAGS`` , ``$CXXFLAGS`` , ``$FFLAGS`` , ``$F90FLAGS`` , etc. For example: * for toolchains using the GCC compilers, ``--march=native`` will be used (see https://gcc.gnu.org/onlinedocs/gcc-4.9.0/gcc/i386-and-x86-64-Options.html) * for toolchains using the Intel compilers, ``-xHost`` will be used (https://software.intel.com/en-us/node/522846) .. _controlling_compiler_optimization_flags_optarch_caveats: Caveats ~~~~~~~ .. _controlling_compiler_optimization_flags_optarch_caveats_heterogeneous: Heterogeneous clusters ^^^^^^^^^^^^^^^^^^^^^^ Optimizing for the processor architecture of the build host is usually what you want in an HPC cluster, but it has some implications if your cluster is heterogeneous (i.e., has different processor generations), or if you want to execute your applications in a machine with a processor architecture that is different from the one of the build host. For example, if you compile your application optimized for an Intel Haswell processor (i.e. using AVX2 instructions), it will not run on a system with an older Intel Nehalem processor. One possible workaround for heterogeneous HPC clusters is to build as many copies of the software stack as you have processor generations in your cluster, and to configure your system so each compute node uses the right software stack matching its processor architecture type. Details for one way of doing this, using automounter/autofs are available at https://easybuilders.github.io/easybuild/files/sciCORE-software-management_20150611.pdf . Another solution is to configure EasyBuild to not optimize for the processor architecture of the build host via ``--optarch`` , see below. .. _controlling_compiler_optimization_flags_optarch_caveats_hardcoding: Build environment vs hardcoding in build scripts ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Be aware that that using ``--optarch`` as described below does not provide hard guarantees that the build will be executed using the intended compiler flags. EasyBuild will define the appropriate environment variables ( ``$CFLAGS`` and co) to use the compiler flags as specified, but some MakeFiles or build systems could have hardcoded values that have not been dealt with yet (for example, via a patch file or by specifying options to the ``make`` command). For example, the OpenBLAS build system will autodetect the processor architecture in the build host, and will optimize for that processor architecture by default. If you want a generic OpenBLAS build you will need to tweak the OpenBLAS easyconfig file to define the desired ``TARGET`` to use. For this you will need to modify the ``buildopts`` easyconfig parameter, for example :: buildopts = 'TARGET=PRESCOTT BINARY=64 ' + threading + ' CC=\"$CC\" FC=\"$F77\"' See these links for more details w.r.t. OpenBLAS: * https://github.com/xianyi/OpenBLAS/blob/develop/TargetList.txt * https://github.com/xianyi/OpenBLAS/issues/685 .. _controlling_compiler_optimization_flags_optarch_flags: Specifying target architecture specific optimization flags to use via ``--optarch=<flags>`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``--optarch`` EasyBuild configuration option, specific compiler flags can be provided that EasyBuild should use, rather than the ones used by default (depending on the compiler in the toolchain being used). Like any other configuration setting, this can also be specified via ``$EASYBUILD_OPTARCH`` , or by defining ``optarch`` in an EasyBuild configuration file (cfr. :ref: `configuration_consistency` ). For example, by specifying ``--optarch=march=core2`` , EasyBuild will use ``-march=core2`` rather than the default flag ``--march=native`` (when using GCC compilers). Likewise, to avoid using the default ``-xHost`` flag with the Intel compilers and using ``-xSSSE3`` instead, you can define ``$EASYBUILD_OPTARCH`` to be equal to ``xSSSE3`` . .. note :: The first dash ( ``-`` ) is added automagically to the value specified to ``--optarch`` , because of technicalities with the current implementation. The ``--optarch`` configuration option gives you flexibility to define the specific target architecture optimization flags you want, but requires that you take care of specifying different flags for different compilers and choose the right flags depending on your specific processor architecture. .. _controlling_compiler_optimization_flags_optarch_generic: Optimizing for a generic processor architecture via ``--optarch=GENERIC`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To make EasyBuild optimize for a *generic* processor architecture, ``--optarch`` can be set to ' ``GENERIC`` '. When this is the case, EasyBuild will use the right compiler flags to optimize for a generic processor architecture, i.e. avoid using machine instructions that are only supported by very recent processors. The ``GENERIC`` keyword for ``--optarch`` is recognized since EasyBuild v2.5.0, and is supported for GCC and Intel compilers on x86-64 systems (Intel or AMD). For other compilers that can be used in toolchains and other system architectures, the necessary compiler flags will be defined in later EasyBuild versions. Currently, using ``--optarch=GENERIC`` will result in the following target architecture optimization flags being used, (on a Linux x86-64 system): * for toolchains using GCC compilers: ``-march=x86-64 -mtune=generic`` * for toolchains using Intel compilers: ``-xSSE2`` On other systems or for other compilers, you can check which compiler flags will be used via :ref: `extended_dry_run` . .. _controlling_compiler_optimization_flags_optarch_per_compiler: Setting architecture flags for different compilers via ``--optarch=<compiler:flags>;<compiler:flags>`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Starting with version 3.1.0, EasyBuild supports specifying architecture flags on a per-compiler basis. This enables to \"set and forget\" the ``--optarch`` option for your compilers of interest, as opposed to change it depending on the compiler used on the packages to be installed. The syntax is ``<compiler:flags>;<compiler:flags>`` , where ``:`` separates the compiler name from the compiler flags, and ``;`` separates different compilers. This is an example for the Intel and GCC compilers: ``--optarch='Intel:xHost;GCC:march=x86-64 -mtune=generic'`` . As in the simple cases, EasyBuild adds one ``-`` to the flags specified, so the flags passed to the Intel and GCC compilers in this case are ``-xHost`` and ``-march=x86-64 -mtune=generic`` . Please note the quotes to escape the space in the GCC flags. Additionally, ``GENERIC`` is also supported on a compiler basis, allowing to specify a generic compilation for the desired compilers. This is an example of this usage: ``--optarch=Intel:xHost;GCC:GENERIC`` . Of course, this is supported just for compiler toolchains that recognize ``GENERIC`` . The options for each compiler are set independently. That means that if a GCC-based toolchain is used, but the only compiler specified is ``Intel`` (for example with ``--optarch=Intel:xCORE-AVX2`` ), then EasyBuild will behave as if ``--optarch`` was not specified for this toolchain. The compiler name corresponds to the value of the ``COMPILER_FAMILY`` constant of the toolchain. Two common examples are ``GCC`` and ``Intel`` . Due to the special treatment of ``--optarch`` in Cray environments, this feature is not supported on this platform.","title":"Controlling compiler optimization flags"},{"location":"cray-support/","text":"Using EasyBuild on HPE Cray systems \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Cray-support.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Cray-support.rst in easybuilders/easybuild repo target: docs/cray-support.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _cray_support: EasyBuild on Cray ================= As of EasyBuild v2.7.0, the support for using EasyBuild on Cray systems is considered stable. Tt enables building/installing software using the ``PrgEnv`` modules provided by Cray. This page provides an overview of the current status. For more information about this, contact: * Guilherme Peretti-Pezzi (CSCS, Switzerland, peretti@cscs.ch) * Kenneth Hoste (HPC-UGent, Belgium; kenneth.hoste@ugent.be) * Petar Forai (IMBA/IMP, Austria; petar.forai@imp.ac.at). Thanks to: * Olli-Pekka Letho (CSC.fi) * Tim Robinson and Guilherme Peretti-Pezzi (CSCS.ch) * Eric Bavier (Cray) * Brett Bode (NCSA) for providing us access to Cray systems, for their support and for testing and contributing to this work. Test systems ------------ * Piz Daint & Piz Dora @ CSCS.ch (http://www.cscs.ch/computers/piz_daint_piz_dora/index.html) * Santis & Brisi (TDS) @ CSCS.ch * Sisu @ CSC.fi (https://research.csc.fi/sisu-supercomputer) * Swan (TDS) @ Cray * Blue Waters @ NCSA EasyBuild toolchains -------------------- * ``CrayCCE`` : ``PrgEnv-cray`` with pinned versions of ``cce`` , ``cray-libsci`` and ``cray-mpich`` * ``CrayGNU`` : ``PrgEnv-gnu`` with pinned versions of ``gcc`` , ``cray-libsci`` and ``cray-mpich`` * ``CrayIntel`` : ``PrgEnv-intel`` with pinned versions of ``intel`` , ``cray-libsci`` and ``cray-mpich`` * ``CrayPGI`` : ``PrgEnv-pgi`` with pinned versions of ``pgi`` and ``cray-mpich`` versions: * ``Cray{CCE,GNU,Intel}/2015.06`` (requires Cray PE June/2015) * ``Cray{CCE,GNU,Intel}/2015.11`` (requires Cray PE November/2015) * ``CrayGNU/2016.03`` (requires Cray PE March/2016) * ``Cray{GNU,PGI}/2016.04`` (requires Cray PE April/2016) * ``Cray{GNU,Intel}/2016.06`` (requires Cray PE June/2016) What works already? ------------------- (see below for more information) * **HPL** (LINPACK) benchmark version 2.1 Major scientific software applications ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * **CP2K** 2.6.0 * **GROMACS** 4.6.7 * **Python** 2.7.9 + numpy 1.9.2 + scipy 0.15.1 * **WRF** 3.6.1 (pending on Sisu) An up-to-date list of software applications built on Cray systems at CSCS can be found https://github.com/eth-cscs/production/, see https://github.com/eth-cscs/production/tree/master/jenkins-builds . Required EasyBuild configuration -------------------------------- Modules tool ~~~~~~~~~~~~ * Sisu: self-installed Lmod 5.8 * Piz Daint, Dora, Swan, Santis, Brisi: system-provided environment modules 3.2.10 Example for environment modules 3.2.10 :: source /opt/modules/3.2.10.3/init/bash export PATH=/opt/modules/3.2.10.3/bin/:$PATH export EASYBUILD_MODULES_TOOL=EnvironmentModulesC export EASYBUILD_MODULE_SYNTAX=Tcl Architecture ~~~~~~~~~~~~ * the ``craype-<target>`` module to load must be specified using ``--optarch`` * e.g., ``--optarch=sandybridge`` results in ``craype-sandybridge`` being loaded in the build environment used by EasyBuild You can also export this option as a shell variable. Example for ``sandybridge`` :: $ export EASYBUILD_OPTARCH=sandybridge Metadata for Cray-provided modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * Easybuild provides a sample metadata file in order to use modules provided by Cray: :: easybuild-framework/etc/cray_external_modules_metadata.cfg This file is loaded by default and contains enough information to build the easyconfig files shipped with EasyBuild. If you need to use a customized file, it can be specified using ``--external-modules-metadata`` . For more details see :ref: `using_external_modules_metadata` . Major supported/tested applications ----------------------------------- (in alphabetical order) CP2K ~~~~ * http://www.cp2k.org * version(s): 2.6.0 :: $ eb CP2K-2.6.0-CrayGNU-2015.06.eb -dr GROMACS ~~~~~~~ * http://www.gromacs.org * version(s): 4.6.7 :: eb GROMACS-4.6.7-CrayGNU-2015.06-mpi.eb -dr HPL ~~~ * http://www.netlib.org/benchmark/hpl * version(s): 2.1 :: eb HPL-2.1-CrayCCE-2015.06.eb -dr eb HPL-2.1-CrayGNU-2015.06.eb -dr eb HPL-2.1-CrayIntel-2015.06.eb -dr Python + numpy/scipy ~~~~~~~~~~~~~~~~~~~~ * http://python.org, http://www.numpy.org, http://www.scipy.org * version(s): Python 2.7.9, numpy 1.9.2, scipy 0.15.1 :: eb Python-2.7.9-CrayGNU-2015.06.eb -dr # includes a few python packages (such as mpi4py, numpy and scipy) WRF ~~~ * http://www.wrf-model.org * version(s): 3.6.1 :: eb WRF-3.6.1-CrayGNU-2015.06-dmpar.eb --dr","title":"Using EasyBuild on HPE Cray systems"},{"location":"cray-support/#using-easybuild-on-hpe-cray-systems","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Cray-support.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Cray-support.rst in easybuilders/easybuild repo target: docs/cray-support.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _cray_support: EasyBuild on Cray ================= As of EasyBuild v2.7.0, the support for using EasyBuild on Cray systems is considered stable. Tt enables building/installing software using the ``PrgEnv`` modules provided by Cray. This page provides an overview of the current status. For more information about this, contact: * Guilherme Peretti-Pezzi (CSCS, Switzerland, peretti@cscs.ch) * Kenneth Hoste (HPC-UGent, Belgium; kenneth.hoste@ugent.be) * Petar Forai (IMBA/IMP, Austria; petar.forai@imp.ac.at). Thanks to: * Olli-Pekka Letho (CSC.fi) * Tim Robinson and Guilherme Peretti-Pezzi (CSCS.ch) * Eric Bavier (Cray) * Brett Bode (NCSA) for providing us access to Cray systems, for their support and for testing and contributing to this work. Test systems ------------ * Piz Daint & Piz Dora @ CSCS.ch (http://www.cscs.ch/computers/piz_daint_piz_dora/index.html) * Santis & Brisi (TDS) @ CSCS.ch * Sisu @ CSC.fi (https://research.csc.fi/sisu-supercomputer) * Swan (TDS) @ Cray * Blue Waters @ NCSA EasyBuild toolchains -------------------- * ``CrayCCE`` : ``PrgEnv-cray`` with pinned versions of ``cce`` , ``cray-libsci`` and ``cray-mpich`` * ``CrayGNU`` : ``PrgEnv-gnu`` with pinned versions of ``gcc`` , ``cray-libsci`` and ``cray-mpich`` * ``CrayIntel`` : ``PrgEnv-intel`` with pinned versions of ``intel`` , ``cray-libsci`` and ``cray-mpich`` * ``CrayPGI`` : ``PrgEnv-pgi`` with pinned versions of ``pgi`` and ``cray-mpich`` versions: * ``Cray{CCE,GNU,Intel}/2015.06`` (requires Cray PE June/2015) * ``Cray{CCE,GNU,Intel}/2015.11`` (requires Cray PE November/2015) * ``CrayGNU/2016.03`` (requires Cray PE March/2016) * ``Cray{GNU,PGI}/2016.04`` (requires Cray PE April/2016) * ``Cray{GNU,Intel}/2016.06`` (requires Cray PE June/2016) What works already? ------------------- (see below for more information) * **HPL** (LINPACK) benchmark version 2.1 Major scientific software applications ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * **CP2K** 2.6.0 * **GROMACS** 4.6.7 * **Python** 2.7.9 + numpy 1.9.2 + scipy 0.15.1 * **WRF** 3.6.1 (pending on Sisu) An up-to-date list of software applications built on Cray systems at CSCS can be found https://github.com/eth-cscs/production/, see https://github.com/eth-cscs/production/tree/master/jenkins-builds . Required EasyBuild configuration -------------------------------- Modules tool ~~~~~~~~~~~~ * Sisu: self-installed Lmod 5.8 * Piz Daint, Dora, Swan, Santis, Brisi: system-provided environment modules 3.2.10 Example for environment modules 3.2.10 :: source /opt/modules/3.2.10.3/init/bash export PATH=/opt/modules/3.2.10.3/bin/:$PATH export EASYBUILD_MODULES_TOOL=EnvironmentModulesC export EASYBUILD_MODULE_SYNTAX=Tcl Architecture ~~~~~~~~~~~~ * the ``craype-<target>`` module to load must be specified using ``--optarch`` * e.g., ``--optarch=sandybridge`` results in ``craype-sandybridge`` being loaded in the build environment used by EasyBuild You can also export this option as a shell variable. Example for ``sandybridge`` :: $ export EASYBUILD_OPTARCH=sandybridge Metadata for Cray-provided modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * Easybuild provides a sample metadata file in order to use modules provided by Cray: :: easybuild-framework/etc/cray_external_modules_metadata.cfg This file is loaded by default and contains enough information to build the easyconfig files shipped with EasyBuild. If you need to use a customized file, it can be specified using ``--external-modules-metadata`` . For more details see :ref: `using_external_modules_metadata` . Major supported/tested applications ----------------------------------- (in alphabetical order) CP2K ~~~~ * http://www.cp2k.org * version(s): 2.6.0 :: $ eb CP2K-2.6.0-CrayGNU-2015.06.eb -dr GROMACS ~~~~~~~ * http://www.gromacs.org * version(s): 4.6.7 :: eb GROMACS-4.6.7-CrayGNU-2015.06-mpi.eb -dr HPL ~~~ * http://www.netlib.org/benchmark/hpl * version(s): 2.1 :: eb HPL-2.1-CrayCCE-2015.06.eb -dr eb HPL-2.1-CrayGNU-2015.06.eb -dr eb HPL-2.1-CrayIntel-2015.06.eb -dr Python + numpy/scipy ~~~~~~~~~~~~~~~~~~~~ * http://python.org, http://www.numpy.org, http://www.scipy.org * version(s): Python 2.7.9, numpy 1.9.2, scipy 0.15.1 :: eb Python-2.7.9-CrayGNU-2015.06.eb -dr # includes a few python packages (such as mpi4py, numpy and scipy) WRF ~~~ * http://www.wrf-model.org * version(s): 3.6.1 :: eb WRF-3.6.1-CrayGNU-2015.06-dmpar.eb --dr","title":"Using EasyBuild on HPE Cray systems"},{"location":"deprecated-easyconfigs/","text":"Deprecated easyconfigs \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Deprecated-easyconfigs.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Deprecated-easyconfigs.rst in easybuilders/easybuild repo target: docs/deprecated-easyconfigs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _deprecated_easyconfigs: Deprecated easyconfigs ====================== Since EasyBuild v3.8.0, individual easyconfig files or particular (versions of) toolchains can be marked as deprecated. .. contents :: :depth: 3 :backlinks: none .. _deprecated_easyconfigs_symptoms: Symptoms -------- Using an easyconfig file or toolchain that was marked as deprecated results in a warning message like: :: WARNING: Deprecated functionality, will no longer work in v4.0: easyconfig file '/home/example/test.eb' is marked as deprecated: This is an example message explaining why the easyconfig file was deprecated. (see also http://easybuild.readthedocs.org/en/latest/Deprecated-easyconfigs.html) Or, in case you are trying to use an easyconfig file or toolchain that was marked deprecated in a previous major version of EasyBuild: :: ERROR: Failed to process easyconfig /home/example/test.eb: DEPRECATED (since v4.0) functionality used: easyconfig file '/home/example/test.eb' is marked as deprecated: This is an example message explaining why the easyconfig file was deprecated. (see also http://easybuild.readthedocs.org/en/latest/Deprecated-easyconfigs.html) .. _deprecated_easyconfigs_why: Reasons for deprecation ----------------------- There are several possible reasons why a particular easyconfig file or toolchain was deprecated, some of which include: * old/obsolete versions of software or toolchain components * toolchains that are superseded by other toolchains * known installation problems that are hard to resolve (or not worth the effort to resolve) .. _deprecated_easyconfigs_implications: Implications ------------ Easyconfig files that are deprecated or which use a deprecated toolchain are *not actively maintained* , and are *no longer included in the EasyBuild regression test* (which means they may be broken by recent changes to the EasyBuild framework or relevant easyblocks). In a future major version of EasyBuild, these easyconfig files will be archived (see also :ref: `archived_easyconfigs` ). .. _deprecated_easyconfigs_toolchains: Deprecated toolchains --------------------- Overview of deprecated toolchains: * :ref: `deprecated_easyconfigs_toolchains_foss` * :ref: `deprecated_easyconfigs_toolchains_gcc` * :ref: `deprecated_easyconfigs_toolchains_gcccuda` * :ref: `deprecated_easyconfigs_toolchains_gompi` * :ref: `deprecated_easyconfigs_toolchains_goolf` * :ref: `deprecated_easyconfigs_toolchains_ictce` * :ref: `deprecated_easyconfigs_toolchains_intel` * :ref: `deprecated_easyconfigs_toolchains_iomkl` .. _deprecated_easyconfigs_toolchains_foss: ``foss`` and ``fosscuda`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``foss`` and ``fosscuda`` toolchains have been deprecated, which currently includes any version older than ``foss/2019a`` and ``fosscuda/2019a`` . .. _deprecated_easyconfigs_toolchains_gcc: ``GCCcore`` and ``GCC`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``GCCcore`` and ``GCC`` toolchains have been deprecated, which currently includes any version older than ``8.0`` . .. _deprecated_easyconfigs_toolchains_gcccuda: ``gcccuda`` toolchain ~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``gcccuda`` toolchains have been deprecated, which currently includes any version older than ``gcccuda/2019a`` . .. _deprecated_easyconfigs_toolchains_gompi: ``gompi`` and ``gompic`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 Versions of the ``gompi`` and ``gompic`` toolchains that were used as a subtoolchain for a deprecated toolchain have also been deprecated; this includes versions older than ``gompi/2019a`` and ``gompic/2019a`` . .. _deprecated_easyconfigs_toolchains_goolf: ``goolf`` and ``goolfc`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 * *archived in:* EasyBuild v4.0.0 The ``goolf`` and ``goolfc`` toolchains have been deprecated, since they are superseded by the :ref: `common_toolchains_foss` and ``fosscuda`` toolchains, respectively. The ``foss*`` toolchains are equivalent to the ``goolf*`` toolchains, except that ``binutils`` is also included as a companion to ``GCC(core)`` in the ``foss*`` toolchains. .. _deprecated_easyconfigs_toolchains_ictce: ``ictce`` toolchain ~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 * *archived in:* EasyBuild v4.0.0 The ``ictce`` toolchain has been deprecated, since it is superseded by the :ref: `common_toolchains_intel` . The ``ictce`` toolchain is equivalent to ``intel`` w.r.t. toolchain components, except that ``binutils`` is also included as a companion to ``GCC(core)`` (which serves as a base for the Intel compilers) in the ``intel`` toolchain. .. _deprecated_easyconfigs_toolchains_intel: ``iccifort``, ``iimpi``, ``iimpic``, ``intel``, and ``intelcuda`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``iccifort`` , ``iimpi`` and :ref: `common_toolchains_intel` have been deprecated. Deprecated versions include: * ``iccifort`` versions older than ``2019.0`` * ``iimpi`` and ``iimpic`` versions older than ``2019a`` * ``intel`` and ``intelcuda`` versions older than ``2019a`` .. _deprecated_easyconfigs_toolchains_iomkl: ``iompi``, ``iompic``, ``iomkl``, and ``iomklc`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``iompi`` , ``iompic`` , ``iomkl`` and ``iomklc`` toolchains have been deprecated, which currently includes any version older than ``2019a`` .","title":"Deprecated easyconfigs"},{"location":"deprecated-easyconfigs/#deprecated-easyconfigs","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Deprecated-easyconfigs.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Deprecated-easyconfigs.rst in easybuilders/easybuild repo target: docs/deprecated-easyconfigs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _deprecated_easyconfigs: Deprecated easyconfigs ====================== Since EasyBuild v3.8.0, individual easyconfig files or particular (versions of) toolchains can be marked as deprecated. .. contents :: :depth: 3 :backlinks: none .. _deprecated_easyconfigs_symptoms: Symptoms -------- Using an easyconfig file or toolchain that was marked as deprecated results in a warning message like: :: WARNING: Deprecated functionality, will no longer work in v4.0: easyconfig file '/home/example/test.eb' is marked as deprecated: This is an example message explaining why the easyconfig file was deprecated. (see also http://easybuild.readthedocs.org/en/latest/Deprecated-easyconfigs.html) Or, in case you are trying to use an easyconfig file or toolchain that was marked deprecated in a previous major version of EasyBuild: :: ERROR: Failed to process easyconfig /home/example/test.eb: DEPRECATED (since v4.0) functionality used: easyconfig file '/home/example/test.eb' is marked as deprecated: This is an example message explaining why the easyconfig file was deprecated. (see also http://easybuild.readthedocs.org/en/latest/Deprecated-easyconfigs.html) .. _deprecated_easyconfigs_why: Reasons for deprecation ----------------------- There are several possible reasons why a particular easyconfig file or toolchain was deprecated, some of which include: * old/obsolete versions of software or toolchain components * toolchains that are superseded by other toolchains * known installation problems that are hard to resolve (or not worth the effort to resolve) .. _deprecated_easyconfigs_implications: Implications ------------ Easyconfig files that are deprecated or which use a deprecated toolchain are *not actively maintained* , and are *no longer included in the EasyBuild regression test* (which means they may be broken by recent changes to the EasyBuild framework or relevant easyblocks). In a future major version of EasyBuild, these easyconfig files will be archived (see also :ref: `archived_easyconfigs` ). .. _deprecated_easyconfigs_toolchains: Deprecated toolchains --------------------- Overview of deprecated toolchains: * :ref: `deprecated_easyconfigs_toolchains_foss` * :ref: `deprecated_easyconfigs_toolchains_gcc` * :ref: `deprecated_easyconfigs_toolchains_gcccuda` * :ref: `deprecated_easyconfigs_toolchains_gompi` * :ref: `deprecated_easyconfigs_toolchains_goolf` * :ref: `deprecated_easyconfigs_toolchains_ictce` * :ref: `deprecated_easyconfigs_toolchains_intel` * :ref: `deprecated_easyconfigs_toolchains_iomkl` .. _deprecated_easyconfigs_toolchains_foss: ``foss`` and ``fosscuda`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``foss`` and ``fosscuda`` toolchains have been deprecated, which currently includes any version older than ``foss/2019a`` and ``fosscuda/2019a`` . .. _deprecated_easyconfigs_toolchains_gcc: ``GCCcore`` and ``GCC`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``GCCcore`` and ``GCC`` toolchains have been deprecated, which currently includes any version older than ``8.0`` . .. _deprecated_easyconfigs_toolchains_gcccuda: ``gcccuda`` toolchain ~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``gcccuda`` toolchains have been deprecated, which currently includes any version older than ``gcccuda/2019a`` . .. _deprecated_easyconfigs_toolchains_gompi: ``gompi`` and ``gompic`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 Versions of the ``gompi`` and ``gompic`` toolchains that were used as a subtoolchain for a deprecated toolchain have also been deprecated; this includes versions older than ``gompi/2019a`` and ``gompic/2019a`` . .. _deprecated_easyconfigs_toolchains_goolf: ``goolf`` and ``goolfc`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 * *archived in:* EasyBuild v4.0.0 The ``goolf`` and ``goolfc`` toolchains have been deprecated, since they are superseded by the :ref: `common_toolchains_foss` and ``fosscuda`` toolchains, respectively. The ``foss*`` toolchains are equivalent to the ``goolf*`` toolchains, except that ``binutils`` is also included as a companion to ``GCC(core)`` in the ``foss*`` toolchains. .. _deprecated_easyconfigs_toolchains_ictce: ``ictce`` toolchain ~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 * *archived in:* EasyBuild v4.0.0 The ``ictce`` toolchain has been deprecated, since it is superseded by the :ref: `common_toolchains_intel` . The ``ictce`` toolchain is equivalent to ``intel`` w.r.t. toolchain components, except that ``binutils`` is also included as a companion to ``GCC(core)`` (which serves as a base for the Intel compilers) in the ``intel`` toolchain. .. _deprecated_easyconfigs_toolchains_intel: ``iccifort``, ``iimpi``, ``iimpic``, ``intel``, and ``intelcuda`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``iccifort`` , ``iimpi`` and :ref: `common_toolchains_intel` have been deprecated. Deprecated versions include: * ``iccifort`` versions older than ``2019.0`` * ``iimpi`` and ``iimpic`` versions older than ``2019a`` * ``intel`` and ``intelcuda`` versions older than ``2019a`` .. _deprecated_easyconfigs_toolchains_iomkl: ``iompi``, ``iompic``, ``iomkl``, and ``iomklc`` toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.5.0 * *will be archived in:* EasyBuild v5.0.0 The oldest versions of the ``iompi`` , ``iompic`` , ``iomkl`` and ``iomklc`` toolchains have been deprecated, which currently includes any version older than ``2019a`` .","title":"Deprecated easyconfigs"},{"location":"deprecated-functionality/","text":"Deprecated functionality \u00b6 :s Warning This page will soon replace https://docs.easybuild.io/en/latest/Deprecated-functionality.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Deprecated-functionality.rst in easybuilders/easybuild repo target: docs/deprecated-functionality.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _deprecated: Deprecated functionality ======================== Some of the functionality that was available in previous EasyBuild versions is *deprecated* , and should no longer be used. This functionality will be removed in a future version of EasyBuild (see :ref: `removed_functionality` for more information about functionality that has been removed already). This page: * provides an :ref: `overview of currently deprecated functionality <overview_deprecated>` together with available alternatives * describes the :ref: `EasyBuild deprecation policy <deprecation_policy>` * explains how to easily :ref:`check whether you are still relying on deprecated functionality <how_to_check_use_of_deprecated_functionality>` .. _overview_deprecated: Overview of deprecated functionality in EasyBuild version |version| ------------------------------------------------------------------- The different section below document the functionality that is deprecated in EasyBuild version |version|, for which support will be removed in EasyBuild version 5.0. For EasyBuild users: * :ref: `depr_lmod6` For authors of easyconfig files: * :ref: `depr_dummy_toolchain` For developers of easyblocks: *(nothing yet)* For EasyBuild framework developers: *(nothing yet)* .. _depr_lmod6: Support for using Lmod 6.x ~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.1.0 (Nov'19) * *removed in:* EasyBuild v5.0 * *alternative(s)* : **use Lmod 7.x or more recent** Support for using Lmod 6.x as modules tool with EasyBuild has been deprecated, and will be removed in a future version of EasyBuild. .. _depr_dummy_toolchain: ``dummy`` toolchain ~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.0.0 (Sept'19) * *removed in:* EasyBuild v5.0 * *alternative(s)* : **use** ``system`` **toolchain instead** The ``dummy`` toolchain is has been deprecated, and is replaced with the ``system`` toolchain. For more information, see :ref: `system_toolchain` . .. _deprecation_policy: Deprecation policy ------------------ With every EasyBuild release, we try very hard to maintain *backward compatibility* . That is, EasyBuild version ``X.Y`` should still build software packages that could be built with EasyBuild version ``X.(Y-1)`` , without requiring modifications to the used easyconfig file or easyblock. However, every now and then a breaking change needs to be made to EasyBuild, because of design decisions or to resolve mistakes that were made in the past. These changes involve *deprecating* the behaviour or functionality we want to get rid of, together with supporting a better alternative. **Deprecating functionaliy:** * using a ``log.deprecated(\"msg\", 'X.Y')`` statement in EasyBuild version ``X.(Y-n)`` a certain block of code is tagged as *deprecated* , indicating that the corresponding functionality will no longer be supported in EasyBuild version ``X.Y`` ; for example, to deprecate the use of the ``makeopts`` easyconfig parameter with EasyBuild v2.0 :: if self.cfg['makeopts']: self.log.deprecated(\"Easyconfig parameter 'makeopts' is deprecated, use 'buildopts' instead\", '2.0') * until EasyBuild version ``X.Y`` , the deprecation log message will manifest itself as a *warning* , highlighting the use of deprecated functionality; for example:: == 2014-12-16 16:29:07,906 main.easyconfig.easyconfig WARNING Deprecated functionality, will no longer work in v2.0: Easyconfig parameter 'makeopts' is deprecated, use 'buildopts' instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information **Removing support for deprecated behavior:** * starting with EasyBuild version ``X.Y`` , the deprecation log message will result in an *error* , indicating that the deprecated behavior is no longer supported; for example :: ERROR: EasyBuild encountered an exception (at easybuild/framework/easyconfig/easyconfig.py:937 in process_easyconfig): Failed to process easyconfig /home/example/gzip-1.5-goolf-1.4.10.eb: DEPRECATED (since v2.0) functionality used: Easyconfig parameter 'makeopts' is deprecated, use 'buildopts' instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information. * the code supporting the deprecated functionality is *removed* in EasyBuild version ``X.(Y+1)`` (i.e., the first non-bugfix-only release after version ``X.Y`` ), see also :ref: `removed_functionality` * until EasyBuild version ``X.(Y+1)`` , the code supporting the deprecated functionality will still be available; using the ``--deprecated`` command line option (or, equivalently, the ``$EASYBUILD_DEPRECATED`` environment variable), the deprecated functionality can be reactivated by specifying a *lower* version; for example, to avoid running into an error with EasyBuild v2.0 for functionality that was deprecated for EasyBuild v2.0 :: eb gzip-1.5-goolf-1.4.10.eb --deprecated=1.0 .. _how_to_check_use_of_deprecated_functionality: How to check for use of deprecated functionality ------------------------------------------------ Since EasyBuild v1.16.0, the ``--deprecated`` command line option can be used to check whether deprecated behavior is still being triggered in your EasyBuild setup. For example, using ``--deprecated=5.0`` with EasyBuild v4.x will transform any deprecation warning for functionality that will no longer be supported in EasyBuild v5.0 into an error message. For example :: $ eb test.eb --deprecated=5.0 == temporary log file in case of crash /tmp/easybuild-WWalWX/easybuild-aoL9Nd.log ERROR: Failed to process easyconfig /home/example/test.eb: DEPRECATED (since v5.0) functionality used: Use of 'dummy' toolchain is deprecated, use 'system' toolchain instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information be used; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information .. tip :: Define ``deprecated`` to the next major EasyBuild version in one of your EasyBuild configuration files (see :ref: `configuration_file` ) or by defining ``$EASYBUILD_DEPRECATED=5.0`` , to ensure you are made aware of deprecated behavior as early as possible. You can (temporarily) still rely on the deprecated functionality by specifying a *lower* version via ``--deprecated`` to overrule that setting, until the functionality is actually disabled.","title":"Deprecated functionality"},{"location":"deprecated-functionality/#deprecated-functionality","text":":s Warning This page will soon replace https://docs.easybuild.io/en/latest/Deprecated-functionality.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Deprecated-functionality.rst in easybuilders/easybuild repo target: docs/deprecated-functionality.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _deprecated: Deprecated functionality ======================== Some of the functionality that was available in previous EasyBuild versions is *deprecated* , and should no longer be used. This functionality will be removed in a future version of EasyBuild (see :ref: `removed_functionality` for more information about functionality that has been removed already). This page: * provides an :ref: `overview of currently deprecated functionality <overview_deprecated>` together with available alternatives * describes the :ref: `EasyBuild deprecation policy <deprecation_policy>` * explains how to easily :ref:`check whether you are still relying on deprecated functionality <how_to_check_use_of_deprecated_functionality>` .. _overview_deprecated: Overview of deprecated functionality in EasyBuild version |version| ------------------------------------------------------------------- The different section below document the functionality that is deprecated in EasyBuild version |version|, for which support will be removed in EasyBuild version 5.0. For EasyBuild users: * :ref: `depr_lmod6` For authors of easyconfig files: * :ref: `depr_dummy_toolchain` For developers of easyblocks: *(nothing yet)* For EasyBuild framework developers: *(nothing yet)* .. _depr_lmod6: Support for using Lmod 6.x ~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.1.0 (Nov'19) * *removed in:* EasyBuild v5.0 * *alternative(s)* : **use Lmod 7.x or more recent** Support for using Lmod 6.x as modules tool with EasyBuild has been deprecated, and will be removed in a future version of EasyBuild. .. _depr_dummy_toolchain: ``dummy`` toolchain ~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v4.0.0 (Sept'19) * *removed in:* EasyBuild v5.0 * *alternative(s)* : **use** ``system`` **toolchain instead** The ``dummy`` toolchain is has been deprecated, and is replaced with the ``system`` toolchain. For more information, see :ref: `system_toolchain` . .. _deprecation_policy: Deprecation policy ------------------ With every EasyBuild release, we try very hard to maintain *backward compatibility* . That is, EasyBuild version ``X.Y`` should still build software packages that could be built with EasyBuild version ``X.(Y-1)`` , without requiring modifications to the used easyconfig file or easyblock. However, every now and then a breaking change needs to be made to EasyBuild, because of design decisions or to resolve mistakes that were made in the past. These changes involve *deprecating* the behaviour or functionality we want to get rid of, together with supporting a better alternative. **Deprecating functionaliy:** * using a ``log.deprecated(\"msg\", 'X.Y')`` statement in EasyBuild version ``X.(Y-n)`` a certain block of code is tagged as *deprecated* , indicating that the corresponding functionality will no longer be supported in EasyBuild version ``X.Y`` ; for example, to deprecate the use of the ``makeopts`` easyconfig parameter with EasyBuild v2.0 :: if self.cfg['makeopts']: self.log.deprecated(\"Easyconfig parameter 'makeopts' is deprecated, use 'buildopts' instead\", '2.0') * until EasyBuild version ``X.Y`` , the deprecation log message will manifest itself as a *warning* , highlighting the use of deprecated functionality; for example:: == 2014-12-16 16:29:07,906 main.easyconfig.easyconfig WARNING Deprecated functionality, will no longer work in v2.0: Easyconfig parameter 'makeopts' is deprecated, use 'buildopts' instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information **Removing support for deprecated behavior:** * starting with EasyBuild version ``X.Y`` , the deprecation log message will result in an *error* , indicating that the deprecated behavior is no longer supported; for example :: ERROR: EasyBuild encountered an exception (at easybuild/framework/easyconfig/easyconfig.py:937 in process_easyconfig): Failed to process easyconfig /home/example/gzip-1.5-goolf-1.4.10.eb: DEPRECATED (since v2.0) functionality used: Easyconfig parameter 'makeopts' is deprecated, use 'buildopts' instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information. * the code supporting the deprecated functionality is *removed* in EasyBuild version ``X.(Y+1)`` (i.e., the first non-bugfix-only release after version ``X.Y`` ), see also :ref: `removed_functionality` * until EasyBuild version ``X.(Y+1)`` , the code supporting the deprecated functionality will still be available; using the ``--deprecated`` command line option (or, equivalently, the ``$EASYBUILD_DEPRECATED`` environment variable), the deprecated functionality can be reactivated by specifying a *lower* version; for example, to avoid running into an error with EasyBuild v2.0 for functionality that was deprecated for EasyBuild v2.0 :: eb gzip-1.5-goolf-1.4.10.eb --deprecated=1.0 .. _how_to_check_use_of_deprecated_functionality: How to check for use of deprecated functionality ------------------------------------------------ Since EasyBuild v1.16.0, the ``--deprecated`` command line option can be used to check whether deprecated behavior is still being triggered in your EasyBuild setup. For example, using ``--deprecated=5.0`` with EasyBuild v4.x will transform any deprecation warning for functionality that will no longer be supported in EasyBuild v5.0 into an error message. For example :: $ eb test.eb --deprecated=5.0 == temporary log file in case of crash /tmp/easybuild-WWalWX/easybuild-aoL9Nd.log ERROR: Failed to process easyconfig /home/example/test.eb: DEPRECATED (since v5.0) functionality used: Use of 'dummy' toolchain is deprecated, use 'system' toolchain instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information be used; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information .. tip :: Define ``deprecated`` to the next major EasyBuild version in one of your EasyBuild configuration files (see :ref: `configuration_file` ) or by defining ``$EASYBUILD_DEPRECATED=5.0`` , to ensure you are made aware of deprecated behavior as early as possible. You can (temporarily) still rely on the deprecated functionality by specifying a *lower* version via ``--deprecated`` to overrule that setting, until the functionality is actually disabled.","title":"Deprecated functionality"},{"location":"detecting-loaded-modules/","text":"Detecting loaded modules \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Detecting_loaded_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Detecting_loaded_modules.rst in easybuilders/easybuild repo target: docs/detecting-loaded-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _detecting_loaded_modules: Detection of loaded modules =========================== Since EasyBuild v3.3.0, the ``eb`` command performs a check to see if any (EasyBuild-generated) modules have been loaded in the current environment. This check can be controlled via the ``--detect-loaded-modules`` and ``--allow-loaded-modules`` configuration options. In addition any unknown ``$EBROOT*`` environment variables are detected and acted upon, according to how the ``--check-ebroot-env-vars`` configuration option was set. .. contents :: :depth: 3 :backlinks: none .. _detecting_loaded_modules_motivation: Motivation ---------- Running EasyBuild in an environment where one or more (EasyBuild-generated) modules are loaded may interfere with the software installations performed by EasyBuild, i.e.: * they may cause installations failures, for example due to incompatibilities with the modules being loaded during the installation procedure being performed; * they may cause installations to work in that particular environment, for example by providing a necessary dependency Since manually loading modules may affect the reproducibility of software installations, it should be discouraged. In EasyBuild versions before v3.3.0, having a loaded module for the same software packages as the one being installed resulted in an EasyBuild error message. Since EasyBuild v3.3.0 a more extensive detection mechanism is available and the action that should be taken for loaded modules can be controlled via ``--detect-loaded-modules`` . Having a module loaded for any software package that is being installed still results in a hard error. .. _detecting_loaded_modules_mechanism: Detection mechanism ------------------- Detecting loaded EasyBuild-generated modules is done by checking the environment for defined ``$EBROOT*`` environment variables. If any are found, the corresponding loaded module is determined for better reporting. In case defined ``$EBROOT*`` environment variables are found that do not match a loaded modules, action is taken as well; see :ref: `detecting_loaded_modules_EBROOT_env_vars` . .. _detecting_loaded_modules_action: Action to take if loaded modules are detected --------------------------------------------- The action that should be taken when one or more loaded (EasyBuild-generated) modules are detected can be specified via the ``--detect-loaded-modules`` configuration option. Supported values include: * :ref: `detecting_loadeD_modules_action_error` * :ref: `detecting_loadeD_modules_action_ignore` * :ref: `detecting_loadeD_modules_action_purge` * :ref: `detecting_loadeD_modules_action_unload` * :ref: `detecting_loadeD_modules_action_warn` (current default) The specified action is only taken for non-allowed loaded modules, see :ref: `detecting_loaded_modules_allow` . .. _detecting_loaded_modules_action_error: ``error``: report error and stop EasyBuild upon detection of loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When EasyBuild is configured with ``--detect-loaded-modules=error`` , it will print a clear error and stop when any (non-allowed) loaded modules are detected. For example :: $ eb example.eb --detect-loaded-modules=error == temporary log file in case of crash /tmp/eb-UlKMRN/easybuild-MgfEHi.log ERROR: Found one or more non-allowed loaded (EasyBuild-generated) modules in current environment: * Spack/0.10.0 To make EasyBuild allow particular loaded modules, use the --allow-loaded-modules configuration option. Use --detect-loaded-modules={error,ignore,purge,unload,warn} to specify action to take when loaded modules are detected. See http://easybuild.readthedocs.io/en/latest/Detecting_loaded_modules.html for more information. .. _detecting_loaded_modules_action_ignore: ``ignore``: ignore any loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ With ``--detect-loaded-modules=ignore`` in place, any loaded modules are simply ignored and EasyBuild continues silently. This is equivalent to the behaviour of EasyBuild versions prior to version 3.3.0. .. note :: This is **not** recommended! .. _detecting_loaded_modules_action_purge: ``purge``: run '``module purge``' to clean environment of loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using ``--detect-loaded-modules=purge`` , EasyBuild will run ``module purge`` if any (non-allowed) loaded modules are detected, in an attempt to restore the environment to a clean state before starting software installations. A short warning message is printed in case ``module purge`` was used to clean up the environment :: $ export EASYBUILD_DETECT_LOADED_MODULES=purge $ eb example.eb == temporary log file in case of crash /tmp/eb-QLTV9v/easybuild-6mOmIN.log WARNING: Found non-allowed loaded (EasyBuild-generated) modules (Spack/0.10.0), running 'module purge' ... .. note :: Whether or not ``module purge`` is a suitable action is site-specific, since this will unload *all* loaded modules (except for 'sticky' modules when Lmod is used), including modules that were not installed with EasyBuild and which may be always required. Configuring EasyBuild to use ``module purge`` when (non-allowed) loaded modules are found should *not* be done on Cray systems, since it will result in a broken environment. .. _detecting_loaded_modules_action_unload: ``unload``: unload loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When ``--detect-loaded-modules=unload`` is used, EasyBuild will only unload the (non-allowed & EasyBuild-generated) modules. The modules are unloaded in reverse order, i.e. the last loaded module is unloaded first. This is an alternative to using ``module purge`` , in case some other (allowed) modules are loaded and should remain loaded. A short warning message is printed when loaded modules are unloaded :: $ eb example.eb --detect-loaded-modules=unload == temporary log file in case of crash /tmp/eb-JyyaEF/easybuild-WyGqZs.log WARNING: Unloading non-allowed loaded (EasyBuild-generated) modules: Spack/0.10.0 ... .. _detecting_loaded_modules_action_warn: ``warn``: print warning and continue upon detection of loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When EasyBuild is configured with ``--detect-loaded-modules=warn`` , EasyBuild will print a warning mentioning that one or more loaded (EasyBuild-generated) were detected, before continuing as normal. The warning is intended to make the user aware that the environment in which EasyBuild is being run is not clean. For example :: $ export EASYBUILD_DETECT_LOADED_MODULES=warn $ eb example.eb == temporary log file in case of crash /tmp/eb-9HD20m/easybuild-WAYzK2.log WARNING: Found one or more non-allowed loaded (EasyBuild-generated) modules in current environment: * Spack/0.10.0 To make EasyBuild allow particular loaded modules, use the --allow-loaded-modules configuration option. Use --detect-loaded-modules={error,ignore,purge,unload,warn} to specify action to take when loaded modules are detected. See http://easybuild.readthedocs.io/en/latest/Detecting_loaded_modules.html for more information. ... .. note :: This is the default behaviour in EasyBuild v3.3.0 and newer. .. _detecting_loaded_modules_allow: Allowing particular loaded modules ---------------------------------- By default, only EasyBuild itself is considered as an allowed module. EasyBuild can be configured to allow particular modules to be loaded via ``--allow-loaded-modules`` , by specifying a comma-seperated list of software names. For example :: $ export EASYBUILD_DETECT_LOADED_MODULES=error $ export EASYBUILD_ALLOW_LOADED_MODULES=EasyBuild,GC3Pie $ module load EasyBuild $ module load GC3Pie $ eb example.eb ... When ``--allow-loaded-modules`` is used, the EasyBuild module is no more allowed by default and must be explicitly listed if you want to allow an EasyBuild installation provided through a module. .. _detecting_loaded_modules_EBROOT_env_vars: Checking of ``$EBROOT*`` environment variables ---------------------------------------------- The detection mechanism for loaded modules relies on defined ``$EBROOT*`` environment variables, and determining by which loaded module they were set. When one or more ``$EBROOT*`` environment variables are found for which the corresponding loaded modules can not be found, this can lead to problems. Hence, EasyBuild will detect this and act on it, according to the value specified to ``--check-ebroot-env-vars`` : * :ref: `detecting_loaded_modules_EBROOT_env_vars_error` * :ref: `detecting_loaded_modules_EBROOT_env_vars_ignore` * :ref: `detecting_loaded_modules_EBROOT_env_vars_unset` * :ref: `detecting_loaded_modules_EBROOT_env_vars_warn` (current default) .. _detecting_loaded_modules_EBROOT_env_vars_error: ``error``: report error and stop EasyBuild on unknown ``$EBROOT*`` environment variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When configured with ``--check-ebroot-env-vars=error`` , EasyBuild will stop with a clear error message when it discovers one or more ``$EBROOT*`` environment variables that do not correspond to a loaded module :: $ export EBROOTUNKNOWN=just_an_example $ eb example.eb --check-ebroot-env-vars=error == temporary log file in case of crash /tmp/eb-cNqOzG/easybuild-xmV8vc.log ERROR: Found defined $EBROOT* environment variables without matching loaded module: $EBROOTUNKNOWN (control action via --check-ebroot-env-vars={error,ignore,unset,warn}) .. _detecting_loaded_modules_EBROOT_env_vars_ignore: ``ignore``: ignore unknown ``$EBROOT*`` environment variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To simply ignore any defined ``$EBROOT*`` environment variables that do not correspond with a loaded module, configure EasyBuild with ``--check-ebroot-env-vars=ignore`` . .. _detecting_loaded_modules_EBROOT_env_vars_unset: ``unset``: unset unknown ``$EBROOT*`` environment variables and print warning ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If you are confident that the defined ``$EBROOT*`` environment variables for which no matching loaded module was found are harmless, you can specify that EasyBuild should clean up the environment by unsetting them, before continuing. A clear warning message will be printed whenever this occurs :: $ export EBROOTUNKNOWN=just_an_example $ eb bzip2-1.0.6.eb --check-ebroot-env-vars=unset == temporary log file in case of crash /tmp/eb-IvXik8/easybuild-cjHjhs.log WARNING: Found defined $EBROOT* environment variables without matching loaded module: $EBROOTUNKNOWN; unsetting them ... Note that these unknown ``$EBROOT*`` will only be unset in the environment of the running EasyBuild session, not in the current session in which ``eb`` is being run. .. _detecting_loaded_modules_EBROOT_env_vars_warn: ``warn``: print warning for unknown ``$EBROOT*`` environment variables and continue ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If EasyBuild was configured with ``--check-ebroot-env-vars=warn`` , a warning will be printed when one or more defined ``$EBROOT*`` environment variables are encountered for which no corresponding loaded module was found :: $ export EBROOTUNKNOWN=just_an_example $ export EASYBUILD_CHECK_EBROOT_ENV_VARS=warn $ eb example.eb == temporary log file in case of crash /tmp/eb-1h_LQ9/easybuild-BHrPk4.log WARNING: Found defined $EBROOT* environment variables without matching loaded module: $EBROOTUNKNOWN (control action via --check-ebroot-env-vars={error,ignore,unset,warn}) ... .. note :: This is the default behaviour in EasyBuild v3.3.0 and newer.","title":"Detecting loaded modules"},{"location":"detecting-loaded-modules/#detecting-loaded-modules","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Detecting_loaded_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Detecting_loaded_modules.rst in easybuilders/easybuild repo target: docs/detecting-loaded-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _detecting_loaded_modules: Detection of loaded modules =========================== Since EasyBuild v3.3.0, the ``eb`` command performs a check to see if any (EasyBuild-generated) modules have been loaded in the current environment. This check can be controlled via the ``--detect-loaded-modules`` and ``--allow-loaded-modules`` configuration options. In addition any unknown ``$EBROOT*`` environment variables are detected and acted upon, according to how the ``--check-ebroot-env-vars`` configuration option was set. .. contents :: :depth: 3 :backlinks: none .. _detecting_loaded_modules_motivation: Motivation ---------- Running EasyBuild in an environment where one or more (EasyBuild-generated) modules are loaded may interfere with the software installations performed by EasyBuild, i.e.: * they may cause installations failures, for example due to incompatibilities with the modules being loaded during the installation procedure being performed; * they may cause installations to work in that particular environment, for example by providing a necessary dependency Since manually loading modules may affect the reproducibility of software installations, it should be discouraged. In EasyBuild versions before v3.3.0, having a loaded module for the same software packages as the one being installed resulted in an EasyBuild error message. Since EasyBuild v3.3.0 a more extensive detection mechanism is available and the action that should be taken for loaded modules can be controlled via ``--detect-loaded-modules`` . Having a module loaded for any software package that is being installed still results in a hard error. .. _detecting_loaded_modules_mechanism: Detection mechanism ------------------- Detecting loaded EasyBuild-generated modules is done by checking the environment for defined ``$EBROOT*`` environment variables. If any are found, the corresponding loaded module is determined for better reporting. In case defined ``$EBROOT*`` environment variables are found that do not match a loaded modules, action is taken as well; see :ref: `detecting_loaded_modules_EBROOT_env_vars` . .. _detecting_loaded_modules_action: Action to take if loaded modules are detected --------------------------------------------- The action that should be taken when one or more loaded (EasyBuild-generated) modules are detected can be specified via the ``--detect-loaded-modules`` configuration option. Supported values include: * :ref: `detecting_loadeD_modules_action_error` * :ref: `detecting_loadeD_modules_action_ignore` * :ref: `detecting_loadeD_modules_action_purge` * :ref: `detecting_loadeD_modules_action_unload` * :ref: `detecting_loadeD_modules_action_warn` (current default) The specified action is only taken for non-allowed loaded modules, see :ref: `detecting_loaded_modules_allow` . .. _detecting_loaded_modules_action_error: ``error``: report error and stop EasyBuild upon detection of loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When EasyBuild is configured with ``--detect-loaded-modules=error`` , it will print a clear error and stop when any (non-allowed) loaded modules are detected. For example :: $ eb example.eb --detect-loaded-modules=error == temporary log file in case of crash /tmp/eb-UlKMRN/easybuild-MgfEHi.log ERROR: Found one or more non-allowed loaded (EasyBuild-generated) modules in current environment: * Spack/0.10.0 To make EasyBuild allow particular loaded modules, use the --allow-loaded-modules configuration option. Use --detect-loaded-modules={error,ignore,purge,unload,warn} to specify action to take when loaded modules are detected. See http://easybuild.readthedocs.io/en/latest/Detecting_loaded_modules.html for more information. .. _detecting_loaded_modules_action_ignore: ``ignore``: ignore any loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ With ``--detect-loaded-modules=ignore`` in place, any loaded modules are simply ignored and EasyBuild continues silently. This is equivalent to the behaviour of EasyBuild versions prior to version 3.3.0. .. note :: This is **not** recommended! .. _detecting_loaded_modules_action_purge: ``purge``: run '``module purge``' to clean environment of loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using ``--detect-loaded-modules=purge`` , EasyBuild will run ``module purge`` if any (non-allowed) loaded modules are detected, in an attempt to restore the environment to a clean state before starting software installations. A short warning message is printed in case ``module purge`` was used to clean up the environment :: $ export EASYBUILD_DETECT_LOADED_MODULES=purge $ eb example.eb == temporary log file in case of crash /tmp/eb-QLTV9v/easybuild-6mOmIN.log WARNING: Found non-allowed loaded (EasyBuild-generated) modules (Spack/0.10.0), running 'module purge' ... .. note :: Whether or not ``module purge`` is a suitable action is site-specific, since this will unload *all* loaded modules (except for 'sticky' modules when Lmod is used), including modules that were not installed with EasyBuild and which may be always required. Configuring EasyBuild to use ``module purge`` when (non-allowed) loaded modules are found should *not* be done on Cray systems, since it will result in a broken environment. .. _detecting_loaded_modules_action_unload: ``unload``: unload loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When ``--detect-loaded-modules=unload`` is used, EasyBuild will only unload the (non-allowed & EasyBuild-generated) modules. The modules are unloaded in reverse order, i.e. the last loaded module is unloaded first. This is an alternative to using ``module purge`` , in case some other (allowed) modules are loaded and should remain loaded. A short warning message is printed when loaded modules are unloaded :: $ eb example.eb --detect-loaded-modules=unload == temporary log file in case of crash /tmp/eb-JyyaEF/easybuild-WyGqZs.log WARNING: Unloading non-allowed loaded (EasyBuild-generated) modules: Spack/0.10.0 ... .. _detecting_loaded_modules_action_warn: ``warn``: print warning and continue upon detection of loaded modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When EasyBuild is configured with ``--detect-loaded-modules=warn`` , EasyBuild will print a warning mentioning that one or more loaded (EasyBuild-generated) were detected, before continuing as normal. The warning is intended to make the user aware that the environment in which EasyBuild is being run is not clean. For example :: $ export EASYBUILD_DETECT_LOADED_MODULES=warn $ eb example.eb == temporary log file in case of crash /tmp/eb-9HD20m/easybuild-WAYzK2.log WARNING: Found one or more non-allowed loaded (EasyBuild-generated) modules in current environment: * Spack/0.10.0 To make EasyBuild allow particular loaded modules, use the --allow-loaded-modules configuration option. Use --detect-loaded-modules={error,ignore,purge,unload,warn} to specify action to take when loaded modules are detected. See http://easybuild.readthedocs.io/en/latest/Detecting_loaded_modules.html for more information. ... .. note :: This is the default behaviour in EasyBuild v3.3.0 and newer. .. _detecting_loaded_modules_allow: Allowing particular loaded modules ---------------------------------- By default, only EasyBuild itself is considered as an allowed module. EasyBuild can be configured to allow particular modules to be loaded via ``--allow-loaded-modules`` , by specifying a comma-seperated list of software names. For example :: $ export EASYBUILD_DETECT_LOADED_MODULES=error $ export EASYBUILD_ALLOW_LOADED_MODULES=EasyBuild,GC3Pie $ module load EasyBuild $ module load GC3Pie $ eb example.eb ... When ``--allow-loaded-modules`` is used, the EasyBuild module is no more allowed by default and must be explicitly listed if you want to allow an EasyBuild installation provided through a module. .. _detecting_loaded_modules_EBROOT_env_vars: Checking of ``$EBROOT*`` environment variables ---------------------------------------------- The detection mechanism for loaded modules relies on defined ``$EBROOT*`` environment variables, and determining by which loaded module they were set. When one or more ``$EBROOT*`` environment variables are found for which the corresponding loaded modules can not be found, this can lead to problems. Hence, EasyBuild will detect this and act on it, according to the value specified to ``--check-ebroot-env-vars`` : * :ref: `detecting_loaded_modules_EBROOT_env_vars_error` * :ref: `detecting_loaded_modules_EBROOT_env_vars_ignore` * :ref: `detecting_loaded_modules_EBROOT_env_vars_unset` * :ref: `detecting_loaded_modules_EBROOT_env_vars_warn` (current default) .. _detecting_loaded_modules_EBROOT_env_vars_error: ``error``: report error and stop EasyBuild on unknown ``$EBROOT*`` environment variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When configured with ``--check-ebroot-env-vars=error`` , EasyBuild will stop with a clear error message when it discovers one or more ``$EBROOT*`` environment variables that do not correspond to a loaded module :: $ export EBROOTUNKNOWN=just_an_example $ eb example.eb --check-ebroot-env-vars=error == temporary log file in case of crash /tmp/eb-cNqOzG/easybuild-xmV8vc.log ERROR: Found defined $EBROOT* environment variables without matching loaded module: $EBROOTUNKNOWN (control action via --check-ebroot-env-vars={error,ignore,unset,warn}) .. _detecting_loaded_modules_EBROOT_env_vars_ignore: ``ignore``: ignore unknown ``$EBROOT*`` environment variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To simply ignore any defined ``$EBROOT*`` environment variables that do not correspond with a loaded module, configure EasyBuild with ``--check-ebroot-env-vars=ignore`` . .. _detecting_loaded_modules_EBROOT_env_vars_unset: ``unset``: unset unknown ``$EBROOT*`` environment variables and print warning ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If you are confident that the defined ``$EBROOT*`` environment variables for which no matching loaded module was found are harmless, you can specify that EasyBuild should clean up the environment by unsetting them, before continuing. A clear warning message will be printed whenever this occurs :: $ export EBROOTUNKNOWN=just_an_example $ eb bzip2-1.0.6.eb --check-ebroot-env-vars=unset == temporary log file in case of crash /tmp/eb-IvXik8/easybuild-cjHjhs.log WARNING: Found defined $EBROOT* environment variables without matching loaded module: $EBROOTUNKNOWN; unsetting them ... Note that these unknown ``$EBROOT*`` will only be unset in the environment of the running EasyBuild session, not in the current session in which ``eb`` is being run. .. _detecting_loaded_modules_EBROOT_env_vars_warn: ``warn``: print warning for unknown ``$EBROOT*`` environment variables and continue ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If EasyBuild was configured with ``--check-ebroot-env-vars=warn`` , a warning will be printed when one or more defined ``$EBROOT*`` environment variables are encountered for which no corresponding loaded module was found :: $ export EBROOTUNKNOWN=just_an_example $ export EASYBUILD_CHECK_EBROOT_ENV_VARS=warn $ eb example.eb == temporary log file in case of crash /tmp/eb-1h_LQ9/easybuild-BHrPk4.log WARNING: Found defined $EBROOT* environment variables without matching loaded module: $EBROOTUNKNOWN (control action via --check-ebroot-env-vars={error,ignore,unset,warn}) ... .. note :: This is the default behaviour in EasyBuild v3.3.0 and newer.","title":"Detecting loaded modules"},{"location":"easyconfig-files-local-variables/","text":"Local variables in easyconfig files \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Easyconfig-files-local-variables.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Easyconfig-files-local-variables.rst in easybuilders/easybuild repo target: docs/easyconfig-files-local-variables.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _easyconfig_files_local_variables: Local variables in easyconfig files =================================== This page discusses the use of *local variables in easyconfig files* . For more general information on writing easyconfig files, please see :ref: `writing_easyconfig_files` . .. contents :: :depth: 3 :backlinks: none .. _easyconfig_files_local_variables_motivation: Motivation & context -------------------- When composing easyconfig files, it can sometimes make sense to use one or more *local variables* to define easyconfig parameters in a cleaner way, for example to avoid copy-pasting values that are used multiple times, or to avoid too long lines (longer than the maximum width of 120 characters as specified in :ref: `code style` ). A local variable within the context of easyconfig files is any variable that does not correspond to a known easyconfig parameter (either general of easyblock-specific). One thing that is easily overlooked is the importance of how these local variables are named: you should try and avoid that the names of local variables will match with the name of an easyconfig parameter that may get introduced in future EasyBuild versions. If that would happen, the semantics of the easyconfig file will change which may either result in a broken installation or perhaps a different installation than was intended (which could be worse than a broken one). Avoiding that names of local variables are *close* to the name of (future) easyconfig parameters is also important, because of the \"typo detection\" feature that EasyBuild has: if the name of a local variable is too close to a known easyconfig parameter, EasyBuild will assume you have made a mistake, and will report a typo error, for example :: ERROR: Failed to process easyconfig example.eb: You may have some typos in your easyconfig file: configopt -> configopts .. _easyconfig_files_local_variables_easybuild4: Changes in EasyBuild v4.0 w.r.t. local variables in easyconfig files -------------------------------------------------------------------- Some changes were made in EasyBuild v4.0 to discourage the use of poorly named local variables: * a :ref: `easyconfig_files_local_variables_naming_scheme` was defined; * a mechanism was implemented to detect the use of local variables in easyconfig files, which will print a :ref: `easyconfig_files_local_variables_naming_warning` * EasyBuild can be configured to report an error for local variables that do not follow the recommended naming scheme; see :ref: `easyconfig_files_local_variables_strict_naming` * using ``eb --fix-deprecated-easyconfigs`` , the names of local variables can be changed automatically to match the recommended naming scheme; see :ref: `easyconfig_files_local_variables_fix_deprecated_easyconfigs` .. _easyconfig_files_local_variables_naming_scheme: Recommended naming scheme for local variables in easyconfig files ----------------------------------------------------------------- To ensure that local variables used in easyconfig files do not clash with easyconfig parameters that get added in future EasyBuild versions, we have defined a recommended naming scheme for local variables. Names of local variables should either: * **start with** ``local_`` , to make it explicit that it is a *local* variable (examples: ``local_example`` , ``local_var`` ) * **consist of a single letter** (examples: ``f`` , ``l`` , ``x`` ); this is typically only done within the context of a `list comprehension <https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions> `_ * **start with a single underscore** ( ``_`` ), which matches the common convention in Python code that these variables are only for \"internal use\" (examples: ``_example`` , ``_local_var`` ) .. note :: A check was added in EasyBuild v4.0 to ensure that the names of known easyconfig parameters do *not* conform to any of these rules, to ensure that local variables can always be discriminated from known easyconfig parameters. .. _easyconfig_files_local_variables_naming_warning: Warning for local variables that do not follow the recommended naming scheme ---------------------------------------------------------------------------- By default, EasyBuild will produce a clear warning when one or more local variables are used that do not conform to the :ref: `recommended naming scheme easyconfig_files_local_variables_naming_scheme` . For example, when using an easyconfig file that includes a local variable named ``var`` :: $ eb example.eb ... WARNING: Use of 1 unknown easyconfig parameters detected in example.eb: var If these are just local variables please rename them to start with 'local_', or try using --fix-deprecated-easyconfigs to do this automatically. To get rid of this warning, you can either: * rename the local variable, either manually to something like ``local_var`` or using ``eb --fix-deprecated-easyconfigs example.eb`` (see also :ref: `easyconfig_files_local_variables_fix_deprecated_easyconfigs` ) * configure EasyBuild to only log the warning (not print it), via ``--local-var-naming-check=log`` (see also :ref: `easyconfig_files_local_variables_check_mode` ; note that silencing the printed warning is **not recommended** , see the motivation in :ref: `motivation above easyconfig_files_local_variables_motivation` .. _easyconfig_files_local_variables_check_mode: Specifying what should be done when non-confirming local variables are found via ``--local-var-naming-check`` ------------------------------------------------------------------------------------------------------------- Using the ``--local-var-naming-check`` configuration option, you can specify what should be done when one or more local variables are found that do not follow the :ref: `recommended naming scheme easyconfig_files_local_variables_naming_scheme` : * ``--local-var-naming-check=error`` : **fail with an error** if any easyconfig file that was parsed includes local variables that do not follow the recommended naming scheme; * ``--local-var-naming-check=log`` : only *log* a warning (but do not print it) if any easyconfig file that was parsed includes local variables that do not follow the recommended naming scheme; * ``--local-var-naming-check=warn`` *[default]* : *print* a warning if any easyconfig file that was parsed includes local variables that do not follow the recommended naming scheme; The default is set such that non-confirming local variables are only reported through a printed warning, but do not result in cancelling the installation (since they're usually not actually problematic). .. _easyconfig_files_local_variables_fix_deprecated_easyconfigs: Renaming local variables to match the recommended naming scheme using ``eb --fix-deprecated-easyconfigs`` --------------------------------------------------------------------------------------------------------- To fix one or more easyconfig files that includes local variables that do not follow the :ref: `recommended naming scheme easyconfig_files_local_variables_naming_scheme` , ``eb --fix-deprecated-easyconfigs`` can be used. For example :: eb --fix-deprecated-easyconfigs bzip2.eb zlib.eb == temporary log file in case of crash /tmp/eb-Z7r_KJ/easybuild-dHtPY4.log * [1/2] fixing /tmp/example/bzip2.eb... FIXED! (changes made in place, original copied to /tmp/example/bzip2.eb.orig_20190815180106_53972) * [2/2] fixing /tmp/example/zlib.eb... FIXED! (changes made in place, original copied to /tmp/example/zlib.eb.orig_20190815180106_53972) All done! Fixed 2 easyconfigs (out of 2 found). == Temporary log file(s) /tmp/eb-Z7r_KJ/easybuild-dHtPY4.log* have been removed. == Temporary directory /tmp/eb-Z7r_KJ has been removed. There are a couple of caveats here though... While ``--fix-deprecated-easyconfigs`` can be very useful, it's certainly not perfect since all it does is simple search and replace of the names of non-conforming local variables (as whole words) to prefix them with ``local_`` . This means that it may make some unintended changes, so make sure to **always double check which changes were made!** In addition, it sometimes make more sense to simply *eliminate* the local variable rather than renaming it, for example when it wasn't really needed at all: maybe it was only actually used once, or maybe using a template like ``%(pyver)s`` or ``(pyshortver)s`` (see also :ref: `avail_easyconfig_templates` ) renders it obsolete.","title":"Local variables in easyconfig files"},{"location":"easyconfig-files-local-variables/#local-variables-in-easyconfig-files","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Easyconfig-files-local-variables.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Easyconfig-files-local-variables.rst in easybuilders/easybuild repo target: docs/easyconfig-files-local-variables.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _easyconfig_files_local_variables: Local variables in easyconfig files =================================== This page discusses the use of *local variables in easyconfig files* . For more general information on writing easyconfig files, please see :ref: `writing_easyconfig_files` . .. contents :: :depth: 3 :backlinks: none .. _easyconfig_files_local_variables_motivation: Motivation & context -------------------- When composing easyconfig files, it can sometimes make sense to use one or more *local variables* to define easyconfig parameters in a cleaner way, for example to avoid copy-pasting values that are used multiple times, or to avoid too long lines (longer than the maximum width of 120 characters as specified in :ref: `code style` ). A local variable within the context of easyconfig files is any variable that does not correspond to a known easyconfig parameter (either general of easyblock-specific). One thing that is easily overlooked is the importance of how these local variables are named: you should try and avoid that the names of local variables will match with the name of an easyconfig parameter that may get introduced in future EasyBuild versions. If that would happen, the semantics of the easyconfig file will change which may either result in a broken installation or perhaps a different installation than was intended (which could be worse than a broken one). Avoiding that names of local variables are *close* to the name of (future) easyconfig parameters is also important, because of the \"typo detection\" feature that EasyBuild has: if the name of a local variable is too close to a known easyconfig parameter, EasyBuild will assume you have made a mistake, and will report a typo error, for example :: ERROR: Failed to process easyconfig example.eb: You may have some typos in your easyconfig file: configopt -> configopts .. _easyconfig_files_local_variables_easybuild4: Changes in EasyBuild v4.0 w.r.t. local variables in easyconfig files -------------------------------------------------------------------- Some changes were made in EasyBuild v4.0 to discourage the use of poorly named local variables: * a :ref: `easyconfig_files_local_variables_naming_scheme` was defined; * a mechanism was implemented to detect the use of local variables in easyconfig files, which will print a :ref: `easyconfig_files_local_variables_naming_warning` * EasyBuild can be configured to report an error for local variables that do not follow the recommended naming scheme; see :ref: `easyconfig_files_local_variables_strict_naming` * using ``eb --fix-deprecated-easyconfigs`` , the names of local variables can be changed automatically to match the recommended naming scheme; see :ref: `easyconfig_files_local_variables_fix_deprecated_easyconfigs` .. _easyconfig_files_local_variables_naming_scheme: Recommended naming scheme for local variables in easyconfig files ----------------------------------------------------------------- To ensure that local variables used in easyconfig files do not clash with easyconfig parameters that get added in future EasyBuild versions, we have defined a recommended naming scheme for local variables. Names of local variables should either: * **start with** ``local_`` , to make it explicit that it is a *local* variable (examples: ``local_example`` , ``local_var`` ) * **consist of a single letter** (examples: ``f`` , ``l`` , ``x`` ); this is typically only done within the context of a `list comprehension <https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions> `_ * **start with a single underscore** ( ``_`` ), which matches the common convention in Python code that these variables are only for \"internal use\" (examples: ``_example`` , ``_local_var`` ) .. note :: A check was added in EasyBuild v4.0 to ensure that the names of known easyconfig parameters do *not* conform to any of these rules, to ensure that local variables can always be discriminated from known easyconfig parameters. .. _easyconfig_files_local_variables_naming_warning: Warning for local variables that do not follow the recommended naming scheme ---------------------------------------------------------------------------- By default, EasyBuild will produce a clear warning when one or more local variables are used that do not conform to the :ref: `recommended naming scheme easyconfig_files_local_variables_naming_scheme` . For example, when using an easyconfig file that includes a local variable named ``var`` :: $ eb example.eb ... WARNING: Use of 1 unknown easyconfig parameters detected in example.eb: var If these are just local variables please rename them to start with 'local_', or try using --fix-deprecated-easyconfigs to do this automatically. To get rid of this warning, you can either: * rename the local variable, either manually to something like ``local_var`` or using ``eb --fix-deprecated-easyconfigs example.eb`` (see also :ref: `easyconfig_files_local_variables_fix_deprecated_easyconfigs` ) * configure EasyBuild to only log the warning (not print it), via ``--local-var-naming-check=log`` (see also :ref: `easyconfig_files_local_variables_check_mode` ; note that silencing the printed warning is **not recommended** , see the motivation in :ref: `motivation above easyconfig_files_local_variables_motivation` .. _easyconfig_files_local_variables_check_mode: Specifying what should be done when non-confirming local variables are found via ``--local-var-naming-check`` ------------------------------------------------------------------------------------------------------------- Using the ``--local-var-naming-check`` configuration option, you can specify what should be done when one or more local variables are found that do not follow the :ref: `recommended naming scheme easyconfig_files_local_variables_naming_scheme` : * ``--local-var-naming-check=error`` : **fail with an error** if any easyconfig file that was parsed includes local variables that do not follow the recommended naming scheme; * ``--local-var-naming-check=log`` : only *log* a warning (but do not print it) if any easyconfig file that was parsed includes local variables that do not follow the recommended naming scheme; * ``--local-var-naming-check=warn`` *[default]* : *print* a warning if any easyconfig file that was parsed includes local variables that do not follow the recommended naming scheme; The default is set such that non-confirming local variables are only reported through a printed warning, but do not result in cancelling the installation (since they're usually not actually problematic). .. _easyconfig_files_local_variables_fix_deprecated_easyconfigs: Renaming local variables to match the recommended naming scheme using ``eb --fix-deprecated-easyconfigs`` --------------------------------------------------------------------------------------------------------- To fix one or more easyconfig files that includes local variables that do not follow the :ref: `recommended naming scheme easyconfig_files_local_variables_naming_scheme` , ``eb --fix-deprecated-easyconfigs`` can be used. For example :: eb --fix-deprecated-easyconfigs bzip2.eb zlib.eb == temporary log file in case of crash /tmp/eb-Z7r_KJ/easybuild-dHtPY4.log * [1/2] fixing /tmp/example/bzip2.eb... FIXED! (changes made in place, original copied to /tmp/example/bzip2.eb.orig_20190815180106_53972) * [2/2] fixing /tmp/example/zlib.eb... FIXED! (changes made in place, original copied to /tmp/example/zlib.eb.orig_20190815180106_53972) All done! Fixed 2 easyconfigs (out of 2 found). == Temporary log file(s) /tmp/eb-Z7r_KJ/easybuild-dHtPY4.log* have been removed. == Temporary directory /tmp/eb-Z7r_KJ has been removed. There are a couple of caveats here though... While ``--fix-deprecated-easyconfigs`` can be very useful, it's certainly not perfect since all it does is simple search and replace of the names of non-conforming local variables (as whole words) to prefix them with ``local_`` . This means that it may make some unintended changes, so make sure to **always double check which changes were made!** In addition, it sometimes make more sense to simply *eliminate* the local variable rather than renaming it, for example when it wasn't really needed at all: maybe it was only actually used once, or maybe using a template like ``%(pyver)s`` or ``(pyshortver)s`` (see also :ref: `avail_easyconfig_templates` ) renders it obsolete.","title":"Local variables in easyconfig files"},{"location":"easyconfigs-search-index/","text":"Using an index to speed up searching for easyconfigs \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Easyconfigs_index.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Easyconfigs_index.rst in easybuilders/easybuild repo target: docs/easyconfigs-search-index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Using an index to speed up searching for easyconfigs"},{"location":"easyconfigs-search-index/#using-an-index-to-speed-up-searching-for-easyconfigs","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Easyconfigs_index.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Easyconfigs_index.rst in easybuilders/easybuild repo target: docs/easyconfigs-search-index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Using an index to speed up searching for easyconfigs"},{"location":"easystack-files/","text":"Easystack files \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Easystack-files.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Easystack-files.rst in easybuilders/easybuild repo target: docs/easystack-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _easystack: Easystack files =============== This documentation covers aspects of specifying a software stack to install with Easybuild with *easystack files* . **Note: this is an** :ref: `experimental feature <experimental_features>` . **Some of the mentioned functionality may be subject to change or be prone to errors.** .. contents :: :depth: 3 :backlinks: none .. _easystack_basics: The basics ---------- *Easystack files* describe an entire software stack, and can be used to specify to EasyBuild what to install. .. _easystack_usage: Usage ----- To build software with *Easystack* , type: .. code :: eb --easystack example.yaml --experimental where ``example.yaml`` is the file with specifications that you just created (more about this in the next section). .. _easystack_structure: Structure of an easystack file ------------------------------ Easystack files are written in `YAML syntax <https://learnxinyminutes.com/docs/yaml> `_ . General options, which should be applied to each software (for example ``robot`` ), are defined at the top of the file. Afterwards, particular software specifications follow. It is mandatory to specify basic software-related keywords: *software name* , *toolchains* and *versions* . - *software name* : Name of the software. - *toolchains* : Names and versions of compiler :ref: `toolchains` . - *versions* : Versions of software. If multiple entries are provided, EasyBuild will install all of them. Can be in form of a list or consecutive line entries (see example). **General structure of YAML-formatted easystack:** .. code :: yaml software : <software_name> : toolchains : <toolchain name and version> : <software_version> : versionsuffix : '<-example>' **Example of YAML-formatted easystack:** .. code :: yaml software : Bioconductor : toolchains : foss-2020a : versions : 3.11 : EasyBuild : toolchains : SYSTEM : versions : [ 4.3.1 ] GROMACS : toolchains : foss-2020a : versions : 2020.1 : 2020.3 : fosscuda-2020a : versions : [ 2020.1 ] OpenFOAM : toolchains : foss-2020a : versions : [ 8 , v2006 ] R : toolchains : foss-2020a : versions : [ 4.0.0 ] To install the software specified in this *easystack file* named ' ``myeasystack.yaml`` ', run: .. code :: eb --easystack myeasystack.yaml This is equivalent to running: .. code :: eb Bioconductor-3.11-foss-2020a.eb EasyBuild-4.3.1-SYSTEM.eb GROMACS-2020.1-foss-2020a.eb GROMACS-2020.3-foss-2020a.eb GROMACS-2020.1-fosscuda-2020a.eb OpenFOAM-8-foss-2020a.eb OpenFOAM-v2006-foss-2020a.eb R-4.0.0-foss-2020a.eb To be developed --------------- Optionally, more advanced keywords can be specified: *easybuild_version* , *robot* , *from_pr* , *versionsuffix* , *include-labels* , *exclude-labels* . - *easybuild_version:* if present, EasyBuild will check if the easystack file was intended for the current version of EasyBuild. - *robot:* enables dependency resolution; see :ref: `Using_the_EasyBuild_command_line` for more details. - *from_pr:* easyconfig files that are added or modified by a particular pull request to the easybuild-easyconfigs GitHub repository can be used (regardless of whether the pull request is merged or not). (see :ref: `Integration_with_GitHub` for more details). - *versionsuffix:* additional suffix for software version (placed after toolchain name) - *include-labels:* only include this software when EasyBuild is configured with one of the specified labels - *exclude-labels:* **do not** include this software when EasyBuild is configured with one of the specified labels","title":"Easystack files"},{"location":"easystack-files/#easystack-files","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Easystack-files.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Easystack-files.rst in easybuilders/easybuild repo target: docs/easystack-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _easystack: Easystack files =============== This documentation covers aspects of specifying a software stack to install with Easybuild with *easystack files* . **Note: this is an** :ref: `experimental feature <experimental_features>` . **Some of the mentioned functionality may be subject to change or be prone to errors.** .. contents :: :depth: 3 :backlinks: none .. _easystack_basics: The basics ---------- *Easystack files* describe an entire software stack, and can be used to specify to EasyBuild what to install. .. _easystack_usage: Usage ----- To build software with *Easystack* , type: .. code :: eb --easystack example.yaml --experimental where ``example.yaml`` is the file with specifications that you just created (more about this in the next section). .. _easystack_structure: Structure of an easystack file ------------------------------ Easystack files are written in `YAML syntax <https://learnxinyminutes.com/docs/yaml> `_ . General options, which should be applied to each software (for example ``robot`` ), are defined at the top of the file. Afterwards, particular software specifications follow. It is mandatory to specify basic software-related keywords: *software name* , *toolchains* and *versions* . - *software name* : Name of the software. - *toolchains* : Names and versions of compiler :ref: `toolchains` . - *versions* : Versions of software. If multiple entries are provided, EasyBuild will install all of them. Can be in form of a list or consecutive line entries (see example). **General structure of YAML-formatted easystack:** .. code :: yaml software : <software_name> : toolchains : <toolchain name and version> : <software_version> : versionsuffix : '<-example>' **Example of YAML-formatted easystack:** .. code :: yaml software : Bioconductor : toolchains : foss-2020a : versions : 3.11 : EasyBuild : toolchains : SYSTEM : versions : [ 4.3.1 ] GROMACS : toolchains : foss-2020a : versions : 2020.1 : 2020.3 : fosscuda-2020a : versions : [ 2020.1 ] OpenFOAM : toolchains : foss-2020a : versions : [ 8 , v2006 ] R : toolchains : foss-2020a : versions : [ 4.0.0 ] To install the software specified in this *easystack file* named ' ``myeasystack.yaml`` ', run: .. code :: eb --easystack myeasystack.yaml This is equivalent to running: .. code :: eb Bioconductor-3.11-foss-2020a.eb EasyBuild-4.3.1-SYSTEM.eb GROMACS-2020.1-foss-2020a.eb GROMACS-2020.3-foss-2020a.eb GROMACS-2020.1-fosscuda-2020a.eb OpenFOAM-8-foss-2020a.eb OpenFOAM-v2006-foss-2020a.eb R-4.0.0-foss-2020a.eb To be developed --------------- Optionally, more advanced keywords can be specified: *easybuild_version* , *robot* , *from_pr* , *versionsuffix* , *include-labels* , *exclude-labels* . - *easybuild_version:* if present, EasyBuild will check if the easystack file was intended for the current version of EasyBuild. - *robot:* enables dependency resolution; see :ref: `Using_the_EasyBuild_command_line` for more details. - *from_pr:* easyconfig files that are added or modified by a particular pull request to the easybuild-easyconfigs GitHub repository can be used (regardless of whether the pull request is merged or not). (see :ref: `Integration_with_GitHub` for more details). - *versionsuffix:* additional suffix for software version (placed after toolchain name) - *include-labels:* only include this software when EasyBuild is configured with one of the specified labels - *exclude-labels:* **do not** include this software when EasyBuild is configured with one of the specified labels","title":"Easystack files"},{"location":"experimental-features/","text":"Experimental features \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Experimental_features.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Experimental_features.rst in easybuilders/easybuild repo target: docs/experimental-features.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _experimental_features: Experimental features ===================== First introduced in EasyBuild v2.1.0 (see :ref: `EasyBuild v2.1.0 Release Notes <release_notes_v2.1.0>` ), experimental features can only be used by enabling the ``--experimental`` configuration option. An experimental feature indicates to users that these features may change significantly in a future release and should be used only for testing, not (yet) for production usage. Currently enabled experimental features include: * support for easyconfig files in YAML syntax (see :ref: `easyconfig_yeb_format` ) * support for generating container recipes & images (see :ref: `containers` ) * support for using easystack files (see :ref: `easystack` ) * support for trying to update versions of the dependencies of an easyconfig based on what is available in the robot path (see :ref: `basic_usage_help` ) * support for installing extensions in parallel (see :ref: `installing_extensions_in_parallel` )","title":"Experimental features"},{"location":"experimental-features/#experimental-features","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Experimental_features.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Experimental_features.rst in easybuilders/easybuild repo target: docs/experimental-features.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _experimental_features: Experimental features ===================== First introduced in EasyBuild v2.1.0 (see :ref: `EasyBuild v2.1.0 Release Notes <release_notes_v2.1.0>` ), experimental features can only be used by enabling the ``--experimental`` configuration option. An experimental feature indicates to users that these features may change significantly in a future release and should be used only for testing, not (yet) for production usage. Currently enabled experimental features include: * support for easyconfig files in YAML syntax (see :ref: `easyconfig_yeb_format` ) * support for generating container recipes & images (see :ref: `containers` ) * support for using easystack files (see :ref: `easystack` ) * support for trying to update versions of the dependencies of an easyconfig based on what is available in the robot path (see :ref: `basic_usage_help` ) * support for installing extensions in parallel (see :ref: `installing_extensions_in_parallel` )","title":"Experimental features"},{"location":"extended-dry-run/","text":"Extended dry run \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Extended_dry_run.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Extended_dry_run.rst in easybuilders/easybuild repo target: docs/extended-dry-run.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. Examples \u00b6 Warning This section will soon replace https://docs.easybuild.io/en/latest/Extended_dry_run_examples.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Extended_dry_run_examples.rst in easybuilders/easybuild repo target: examples section of docs/extended-dry-run.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _extended_dry_run_examples: Extended dry run: examples ========================== Output examples for ``eb --extended-dry-run`` / ``eb -x`` , see also :ref: `extended_dry_run` . .. contents :: :depth: 2 :backlinks: none .. _extended_dry_run_examples_make382_GCC482: make v3.82 with GCC/4.8.2 ------------------------- .. code :: $ eb make-3.82-GCC-4.8.2.eb -x == temporary log file in case of crash /tmp/eb-ksVC07/easybuild-MmAugb.log == processing EasyBuild easyconfig /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/m/make/make-3.82-GCC-4.8.2.eb Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined below, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information below for quick debugging purposes. *** DRY RUN using 'ConfigureMake' easyblock (easybuild.easyblocks.generic.configuremake @ /home/example/eb/easybuild-easyblocks/easybuild/easyblocks/generic/configuremake.pyc) ** * == building and installing make/3.82-GCC-4.8.2... fetching files... [DRY RUN] [fetch_step method] Available download URLs for sources/patches: * http://ftpmirror.gnu.org/make/$source List of sources: * make-3.82.tar.bz2 will be downloaded to /home/example/eb/sources/m/make/make-3.82.tar.bz2 List of patches: (none) creating build dir, resetting environment... [DRY RUN] [check_readiness_step method] [make_builddir method] [reset_changes method] [handle_iterate_opts method] unpacking... [DRY RUN] [checksum_step method] * expected checksum for make-3.82.tar.bz2: (none) [extract_step method] running command \"tar xjf /home/example/eb/sources/m/make/make-3.82.tar.bz2\" (in /home/example/eb/build/make/3.82/GCC-4.8.2) patching... [DRY RUN] [patch_step method] preparing... [DRY RUN] [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load GCC/4.8.2 Loading modules for dependencies... Full list of loaded modules: 1) GCC/4.8.2 Defining build environment... export CC=\"gcc\" export CFLAGS=\"-O2\" export CXX=\"g++\" export CXXFLAGS=\"-O2\" export F77=\"gfortran\" export F90=\"gfortran\" export F90FLAGS=\"-O2\" export FFLAGS=\"-O2\" export FLIBS=\"-lgfortran\" export LDFLAGS=\"-L/home/example/eb/software/GCC/4.8.2/lib\" export LIBS=\"-lm -lpthread\" export OPTFLAGS=\"-O2\" export PRECFLAGS=\"\" configuring... [DRY RUN] [configure_step method] running command \" ./configure --prefix=/home/example/eb/software/make/3.82-GCC-4.8.2 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) building... [DRY RUN] [build_step method] running command \" make -j 4 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) testing... [DRY RUN] [test_step method] installing... [DRY RUN] [stage_install_step method] [make_installdir method] [install_step method] running command \" make install \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) taking care of extensions... [DRY RUN] [extensions_step method] postprocessing... [DRY RUN] [post_install_step method] sanity checking... [DRY RUN] [sanity_check_step method] Sanity check paths - file ['files'] * bin/make Sanity check paths - (non-empty) directory ['dirs'] (none) Sanity check commands (none) cleaning up... [DRY RUN] [cleanup_step method] creating module... [DRY RUN] [make_module_step method] Generating module file /home/example/eb/modules/all/make/3.82-GCC-4.8.2, with contents: #%Module proc ModulesHelp { } { puts stderr { make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html } } module-whatis {Description: make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html} set root /home/example/eb/software/make/3.82-GCC-4.8.2 conflict make if { ![ is-loaded GCC/4.8.2 ] } { module load GCC/4.8.2 } setenv EBROOTMAKE \"$root\" setenv EBVERSIONMAKE \"3.82\" setenv EBDEVELMAKE \"$root/easybuild/make-3.82-GCC-4.8.2-easybuild-devel\" # Built with EasyBuild version 2.4.0 permissions... [DRY RUN] [permissions_step method] packaging... [DRY RUN] [package_step method] == COMPLETED: Installation ended successfully Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined above, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information above for quick debugging purposes. (no ignored errors during dry run) == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-ksVC07/easybuild-MmAugb.log* have been removed. == Temporary directory /tmp/eb-ksVC07 has been removed. .. _extended_dry_run_examples_WRF361_intel2015a: WRF v3.6.1 with intel/2015a --------------------------- .. code :: $ eb WRF-3.6.1-intel-2015a-dmpar.eb -x == temporary log file in case of crash /tmp/eb-Dh1wOp/easybuild-0bu9u9.log == processing EasyBuild easyconfig /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1-intel-2015a-dmpar.eb Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined below, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information below for quick debugging purposes. *** DRY RUN using 'EB_WRF' easyblock (easybuild.easyblocks.wrf @ /home/example/eb/easybuild-easyblocks/easybuild/easyblocks/w/wrf.py) ** * == building and installing WRF/3.6.1-intel-2015a-dmpar... fetching files... [DRY RUN] [fetch_step method] Available download URLs for sources/patches: * http://www2.mmm.ucar.edu/wrf/src//$source * http://www.mmm.ucar.edu/wrf/src//$source List of sources: * WRFV3.6.1.TAR.gz will be downloaded to /home/example/eb/sources/w/WRF/WRFV3.6.1.TAR.gz List of patches: * WRF_parallel_build_fix.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_parallel_build_fix.patch * WRF-3.6.1_netCDF-Fortran_separate_path.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_netCDF-Fortran_separate_path.patch * WRF-3.6.1_known_problems.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_known_problems.patch * WRF_tests_limit-runtimes.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_tests_limit-runtimes.patch creating build dir, resetting environment... [DRY RUN] [check_readiness_step method] [make_builddir method] [reset_changes method] [handle_iterate_opts method] unpacking... [DRY RUN] [checksum_step method] * expected checksum for WRFV3.6.1.TAR.gz: (none) * expected checksum for WRF_parallel_build_fix.patch: (none) * expected checksum for WRF-3.6.1_netCDF-Fortran_separate_path.patch: (none) * expected checksum for WRF-3.6.1_known_problems.patch: (none) * expected checksum for WRF_tests_limit-runtimes.patch: (none) [extract_step method] running command \"tar xzf /home/example/eb/sources/w/WRF/WRFV3.6.1.TAR.gz\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) patching... [DRY RUN] [patch_step method] * applying patch file WRF_parallel_build_fix.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_parallel_build_fix.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF-3.6.1_netCDF-Fortran_separate_path.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_netCDF-Fortran_separate_path.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF-3.6.1_known_problems.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_known_problems.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF_tests_limit-runtimes.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_tests_limit-runtimes.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) preparing... [DRY RUN] [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load icc/2015.1.133-GCC-4.9.2 [SIMULATED] module load ifort/2015.1.133-GCC-4.9.2 [SIMULATED] module load impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2 [SIMULATED] module load imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2 [SIMULATED] module load intel/2015a [SIMULATED] Loading modules for dependencies... module load JasPer/1.900.1-intel-2015a [SIMULATED] module load netCDF/4.3.2-intel-2015a [SIMULATED] module load netCDF-Fortran/4.4.0-intel-2015a [SIMULATED] module load tcsh/6.18.01-intel-2015a [SIMULATED] Full list of loaded modules: (none) !!! !!! WARNING: Not all FFTW interface libraries ['fftw3xc_intel', 'mkl_intel_lp64', 'mkl_sequential', 'mkl_core'] are found in ['$EBROOTIMKL/mkl/lib/intel64', '$EBROOTIMKL/compiler/lib/intel64'], can't set $FFT_LIB. !!! Defining build environment... export BLACS_INC_DIR=\"\" export BLACS_LIB_DIR=\"\" export BLACS_MT_STATIC_LIBS=\"libmkl_blacs_intelmpi_lp64.a\" export BLACS_STATIC_LIBS=\"libmkl_blacs_intelmpi_lp64.a\" export BLAS_INC_DIR=\"\" export BLAS_LAPACK_INC_DIR=\"\" export BLAS_LAPACK_LIB_DIR=\"\" export BLAS_LAPACK_MT_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export BLAS_LAPACK_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" export BLAS_LIB_DIR=\"\" export BLAS_MT_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export BLAS_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" export CC=\"icc\" export CFLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export CPPFLAGS=\"\" export CXX=\"icpc\" export CXXFLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export F77=\"ifort\" export F90=\"ifort\" export F90FLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export FFLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export FFTW_INC_DIR=\"\" export FFTW_LIB_DIR=\"\" export FFTW_STATIC_LIBS=\"\" export FFT_INC_DIR=\"\" export FFT_LIB_DIR=\"\" export FFT_STATIC_LIBS=\"\" export I_MPI_CC=\"icc\" export I_MPI_CXX=\"icpc\" export I_MPI_F77=\"ifort\" export I_MPI_F90=\"ifort\" export LAPACK_INC_DIR=\"\" export LAPACK_LIB_DIR=\"\" export LAPACK_MT_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export LAPACK_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" export LDFLAGS=\"\" export LIBBLACS=\"-Wl,-Bstatic -Wl,--start-group -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -Wl,-Bdynamic\" export LIBBLACS_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -Wl,-Bdynamic\" export LIBBLAS=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBBLAS_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBFFT=\"\" export LIBLAPACK=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBLAPACK_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBLAPACK_MT_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBLAPACK_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBS=\"-liomp5 -lpthread\" export LIBSCALAPACK=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBSCALAPACK_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBSCALAPACK_MT_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBSCALAPACK_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -Wl,--end-group -Wl,-Bdynamic\" export MPICC=\"mpicc\" export MPICH_CC=\"icc\" export MPICH_CXX=\"icpc\" export MPICH_F77=\"ifort\" export MPICH_F90=\"ifort\" export MPICXX=\"mpicxx\" export MPIF77=\"mpif77\" export MPIF90=\"mpif90\" export MPI_INC_DIR=\"\" export MPI_LIB_DIR=\"\" export MPI_LIB_SHARED=\"\" export MPI_LIB_STATIC=\"\" export OPTFLAGS=\"-O2\" export PRECFLAGS=\"-ftz -fp-speculation=safe -fp-model source\" export SCALAPACK_INC_DIR=\"\" export SCALAPACK_LIB_DIR=\"\" export SCALAPACK_MT_STATIC_LIBS=\"libmkl_scalapack_lp64.a,libmkl_blacs_intelmpi_lp64.a,libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export SCALAPACK_STATIC_LIBS=\"libmkl_scalapack_lp64.a,libmkl_blacs_intelmpi_lp64.a,libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" configuring... [DRY RUN] [configure_step method] export NETCDF=\"$EBROOTNETCDF\" export NETCDFF=\"$EBROOTNETCDFMINFORTRAN\" export JASPERINC=\"$EBROOTJASPER/include\" export JASPERLIB=\"$EBROOTJASPER/lib\" export WRFIO_NCD_LARGE_FILE_SUPPORT=\"1\" Perl script patched: arch/Config_new.pl running interactive command \"./configure\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) applying regex substitutions to file configure.wrf * regex pattern '^(DM_FC\\s *=\\s* ).*$', replacement string '\\1 mpif90' * regex pattern '^(DM_CC\\s *=\\s* ).*$', replacement string '\\1 mpicc -DMPI2_SUPPORT' * regex pattern '^(SFC\\s *=\\s* ).*$', replacement string '\\1 ifort' * regex pattern '^(SCC\\s *=\\s* ).*$', replacement string '\\1 icc' * regex pattern '^(CCOMP\\s *=\\s* ).*$', replacement string '\\1 icc' applying regex substitutions to file configure.wrf * regex pattern '^(FCOPTIM. *)(\\s-O3)(\\s.* )$', replacement string '\\1 -O2 -ftz -fp-speculation=safe -fp-model source \\3' * regex pattern '^(CFLAGS_LOCAL. *)(\\s-O3)(\\s.* )$', replacement string '\\1 -O2 -ftz -fp-speculation=safe -fp-model source \\3' building... [DRY RUN] [build_step method] running command \"tcsh ./compile -j 4 wrf\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) running command \"tcsh ./compile -j 4 em_real\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) running command \"tcsh ./compile -j 4 em_b_wave\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) testing... [DRY RUN] [test_step method] export I_MPI_MPD_TMPDIR=\"/tmp/eb-Dh1wOp\" export PBS_ENVIRONMENT=\"PBS_BATCH_MPI\" export I_MPI_PROCESS_MANAGER=\"mpd\" file written: /tmp/eb-Dh1wOp/mpi_cmd_for-nzyh5V/mpdboot file written: /tmp/eb-Dh1wOp/mpi_cmd_for-nzyh5V/nodes export I_MPI_MPD_TMPDIR=\"/tmp/eb-Dh1wOp\" export PBS_ENVIRONMENT=\"PBS_BATCH_MPI\" export I_MPI_PROCESS_MANAGER=\"mpd\" file written: /tmp/eb-Dh1wOp/mpi_cmd_for-hIOEd_/mpdboot file written: /tmp/eb-Dh1wOp/mpi_cmd_for-hIOEd_/nodes installing... [DRY RUN] [stage_install_step method] [make_installdir method] [install_step method] taking care of extensions... [DRY RUN] [extensions_step method] postprocessing... [DRY RUN] [post_install_step method] sanity checking... [DRY RUN] [sanity_check_step method] Sanity check paths - file ['files'] * WRFV3/main/ideal.exe * WRFV3/main/libwrflib.a * WRFV3/main/ndown.exe * WRFV3/main/nup.exe * WRFV3/main/real.exe * WRFV3/main/tc.exe * WRFV3/main/wrf.exe Sanity check paths - (non-empty) directory ['dirs'] * WRFV3/main * WRFV3/run Sanity check commands (none) cleaning up... [DRY RUN] [cleanup_step method] creating module... [DRY RUN] [make_module_step method] Generating module file /home/example/eb/modules/all/WRF/3.6.1-intel-2015a-dmpar, with contents: #%Module proc ModulesHelp { } { puts stderr { The Weather Research and Forecasting (WRF) Model is a next-generation mesoscale numerical weather prediction system designed to serve both operational forecasting and atmospheric research needs. - Homepage: http://www.wrf-model.org } } module-whatis {Description: The Weather Research and Forecasting (WRF) Model is a next-generation mesoscale numerical weather prediction system designed to serve both operational forecasting and atmospheric research needs. - Homepage: http://www.wrf-model.org} set root /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar conflict WRF if { ![ is-loaded intel/2015a ] } { module load intel/2015a } if { ![ is-loaded JasPer/1.900.1-intel-2015a ] } { module load JasPer/1.900.1-intel-2015a } if { ![ is-loaded netCDF/4.3.2-intel-2015a ] } { module load netCDF/4.3.2-intel-2015a } if { ![ is-loaded netCDF-Fortran/4.4.0-intel-2015a ] } { module load netCDF-Fortran/4.4.0-intel-2015a } setenv EBROOTWRF \"$root\" setenv EBVERSIONWRF \"3.6.1\" setenv EBDEVELWRF \"$root/easybuild/WRF-3.6.1-intel-2015a-dmpar-easybuild-devel\" setenv NETCDF \"$EBROOTNETCDF\" setenv NETCDFF \"$EBROOTNETCDFMINFORTRAN\" # Built with EasyBuild version 2.4.0 permissions... [DRY RUN] [permissions_step method] packaging... [DRY RUN] [package_step method] == COMPLETED: Installation ended successfully Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined above, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information above for quick debugging purposes. (no ignored errors during dry run) == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-Dh1wOp/easybuild-0bu9u9.log* have been removed. == Temporary directory /tmp/eb-Dh1wOp has been removed. .. _extended_dry_run: Extended dry run ================ Using ``--extended-dry-run`` or ``-x`` (supported since EasyBuild v2.4.0, see release notes for :ref: `release_notes_eb240` ), a detailed overview of the build and install procedure that EasyBuild is going to execute can be obtained almost instantly. All time-consuming operations, including executing commands to configure/build/install the software, are only *reported* rather than being actually performed. Example output is available at :ref: `extended_dry_run_examples` . .. contents :: :depth: 3 :backlinks: none .. _extended_dry_run_notes: Important notes --------------- There are a couple of things you should be aware of when using ``--extended-dry-run`` and interpreting the output it produces. .. _extended_dry_run_notes_differences: Build/install procedure reported by dry run may be (slightly) different ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The actual build and install procedure may (slightly) differ from the one reported by ``--extended-dry-run`` , due to conditional checks in the easyblock being used. For example, expressions that are conditional on the presence of certain files or directories in the build directory will always be false, since the build directory is never actually populated. .. _extended_dry_run_notes_ignored_errors: Errors are ignored (by default) during dry run ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Any errors that occur are ignored, and are reported with a clear warning message. This is done because it is possible that these errors occur because of the dry run mechanism. For example, the install step could assume that certain files created by a previous step will be present, but they will not be there since the commands that are supposed to produce them were not actually performed in dry run mode. Errors are ignored *on a per-step basis* . When an error is ignored in a particular step, that step is aborted, which may result in partial dry run output for that particular step. Subsequent steps will still be run (in dry run mode), however. Since it's possible that these errors occur due to a bug in the easyblock being used, it's important to pay attention to these ignored errors. Ignored errors are reported as follows, for example :: == testing... [DRY RUN] [test_step method] !!! !!! WARNING: ignoring error \"[Errno 2] No such file or directory: 'test'\" !!! At the end of dry run output, anonother warning message is shown if any ignored errors occurred :: == COMPLETED: Installation ended successfully !!! !!! WARNING: One or more errors were ignored, see warnings above !!! .. _extended_dry_run_notes_ignored_errors_disabling: Disabling ignoring errors during dry run ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Ignoring errors that occur during a dry run is enabled by default; it can be disabled using the configuration option that is available for it, i.e. by: * the ``--disable-extended-dry-run-ignore-errors`` command line option * by defining the ``$EASYBUILD_DISABLE_EXTENDED_DRY_RUN_IGNORE_ERRORS`` environment variable * or by defining ``disable-extended-dry-run-ignore-errors`` in an EasyBuild configuration file (see also :ref: `configuring_easybuild` ) .. _extended_dry_run_overview: Overview of dry run mechanism ----------------------------- During an extended dry run, several operations are not performed, or are only simulated. The sections below give a detailed overview of the dry run mechanism. .. _extended_dry_run_overview_build_install_dirs: Temporary directories as build/install directories ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To make very sure that EasyBuild does not touch any files or directories during the dry run, the build and (software/module) install directories are replaced by subdirectories of the temporary directory used by that particular EasyBuild session. In the background, the values for ``self.builddir`` , ``self.installdir`` and ``self.installdir_mod`` are changed in the ``EasyBlock`` instance(s) being used; this also affects the use of the ``%(builddir)s`` and ``$(installdir)s`` values in easyconfig files. Although the build and install directories are effectively temporary directories during a dry run (under a prefix like ``/tmp/eb-aD_yNu/__ROOT__`` ), this is not visible in the dry run output: the 'fake' build and install directories are replaced by the corresponding original value in the dry run output. For example :: [extract_step method] running command \"tar xzf /home/example/easybuild/sources/b/bzip2/bzip2-1.0.6.tar.gz\" (in /tmp/example/eb_build/bzip2/1.0.6/GCC-4.9.2) .. _extended_dry_run_overview_build_dir_guess: Note on build directory in dry run mode ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The build (sub)directory used during an actual (non-dry run) EasyBuild session may be different than the one mentioned in the dry run output. This is because during a dry run, EasyBuild will *guess* the name of the subdirectory that is created by unpacking the first source file in the build directory as being ``<name>-<version>`` . Although this is a common pattern, it is not always 100% correct. For example, you may see this in the dry run output for WRF (for which a build-in-installdir procedure is used) :: [build_step method] running command \"tcsh ./compile -j 4 wrf\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) The actual build (and install) subdirectory is slightly different while not in dry run mode however, i.e.: ``/home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRFV3`` . .. _extended_dry_run_overview_downloading: No downloading of missing source files/patches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Required files (source files/patches) are not downloaded during a dry run if they are not available yet. The dry run output will specify whether files are found (and if so, at which path) or not; the exact output for files that were not found depends on whether or not source URLs are available. For example: if the required source file for ``bzip2`` is not available yet, it is indicated where EasyBuild will try to download it to :: [fetch_step method] Available download URLs for sources/patches: * http://www.bzip.org/1.0.6/$source List of sources: * bzip2-1.0.6.tar.gz downloaded to /home/example/easybuild/sources/b/bzip2/bzip2-1.0.6.tar.gz List of patches: (none) If the source file is already available in the source path that EasyBuild was configured with, it is indicated as such :: List of sources: * bzip2-1.0.6.tar.gz found at /home/example/easybuild/sources/b/bzip2/bzip2-1.0.6.tar.gz In case no source URLs are available and required files are missing, they are simply marked as such :: Available download URLs for sources/patches: (none) List of sources: * bzip2-1.0.6.tar.bz2 (MISSING) However, since the dry run mechanism never actually uses the source files/patches, this does not affect the remainder of the output of ``--extended-dry-run`` / ``-x`` . .. _extended_dry_run_overview_checksum_verification: Checksum verification is skipped ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Computing checksums of sources files/patches, and verifying them against specified checksums (if available) is *skipped* during a dry run, because it is considered potentially too time-consuming. In addition, source files/patches may not be available anyway. If checksums are available they are only reported, for example (for GCC v4.9.3) :: [checksum_step method] * expected checksum for gcc-4.9.3.tar.bz2: 6f831b4d251872736e8e9cc09746f327 * expected checksum for gmp-6.0.0a.tar.bz2: b7ff2d88cae7f8085bd5006096eed470 * expected checksum for mpfr-3.1.2.tar.gz: 181aa7bb0e452c409f2788a4a7f38476 * expected checksum for mpc-1.0.2.tar.gz: 68fadff3358fb3e7976c7a398a0af4c3 * expected checksum for mpfr-3.1.2-allpatches-20141204.patch: 58aec98d15982f9744a043d2f1c5af82 .. _extended_dry_run_overview_unpacking_sources: Source files are not unpacked ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Source files are *not* unpacked, since this may require too much time (in case of large source files). Additionally, source files may not be available anyway. This has a number of implications: * files or directories that may be expected to be there are not, which may lead to (ignored) errors if the used easyblock does not take this into account (see also :ref: `extended_dry_run_notes_ignored_errors` ) * the build directory in which commands are executed may be incorrect in the dry run output (see also :ref: `extended_dry_run_overview_build_dir_guess` ) The extraction command is mentioned in the dry run output however, for example :: [extract_step method] running command \"tar xjf bzip2-1.0.6.tar.bz2\" (in /tmp/example/eb_build/bzip2/1.0.6/GCC-4.9.2) .. _extended_dry_run_overview_patching: Patch files are not applied, no runtime patching ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since source files are not unpacked, patch files can not applied either. The dry run output does provide an overview of patch files, together with where they are found and how they are applied :: [patch_step method] * applying patch file WRF_parallel_build_fix.patch running command \"patch -b -p<derived> -i /home/example/easybuild/sources/w/WRF/WRF_parallel_build_fix.patch\" (in /home/example/easybuild/easybuild/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF-3.6.1_known_problems.patch running command \"patch -b -p<derived> -i /home/example/easybuild/sources/w/WRF/WRF-3.6.1_known_problems.patch\" (in /home/example/easybuild/easybuild/software/WRF/3.6.1-intel-2015a-dmpar) Likewise, runtime patching performed by the easyblock itself can not work either. If the ``apply_regex_substitutions`` function (available from ``easybuild.tools.filetools`` ) is used, a clear overview is included in the dry run output (see also :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_runtime_patching` ). For example, in the ``configure`` step of the WRF easyblock when using the Intel compilers, this yields :: [configure_step method] ... applying regex substitutions to file configure.wrf * regex pattern '^(DM_FC\\s*=\\s*).*$', replacement string '\\1 mpif90' * regex pattern '^(DM_CC\\s*=\\s*).*$', replacement string '\\1 mpicc -DMPI2_SUPPORT' If the ``apply_regex_substitutions`` function provided for runtime patching is not used (and ``fileinput`` is used directly, for example), runtime patching performed by the easyblock will most likely result in an error, leading to the step in which it is being performed being aborted (see :ref: `extended_dry_run_notes_ignored_errors` ). .. _extended_dry_run_overview_module_load: Module ``load`` statements are executed or simulated ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ``module load`` statements are either effectively executed or simulated, dependending on whether the corresponding module files are available or not. .. _extended_dry_run_overview_module_load_available: Available modules are loaded ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ``module load`` statements are fairly light-weight, so they are effectively executed if the module being loaded is available. The dry run output includes an overview of the modules being loaded. In addition an overview of all loaded modules, including the ones that were loaded indirectly, is shown. For example :: [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load GCC/4.9.2 Loading modules for dependencies... module load M4/1.4.17-GCC-4.9.2 Full list of loaded modules: 1) GCC/4.8.2 2) M4/1.4.17-GCC-4.9.2 .. _extended_dry_run_overview_module_load_simulated: Loading of non-available modules is simulated ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ If the module file required to execute a particular ``module load`` statement is not available, the dry run mechanism will *simulate* the loading of the module. The ``module load`` statements that were simulated rather than actually performed are clearly indicated using ``[SIMULATED]`` in the dry run output, for example :: [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load intel/2015a Loading modules for dependencies... module load JasPer/1.900.1-intel-2015a module load netCDF/4.3.2-intel-2015a [SIMULATED] module load netCDF-Fortran/4.4.0-intel-2015a [SIMULATED] module load tcsh/6.18.01-intel-2015a Only modules that were effectively loaded will appear in the full list of modules being printed; modules for which the load was simulated will not be included. .. _extended_dry_run_overview_module_load_simulated_deps: Simulated loading of non-available *dependency* modules ####################################################### For dependencies, simulating a ``module load`` statement basically (only) entails defining the ``$EBROOT*`` and ``$EBVERSION*`` environment variables (the full variable names are determined by the software name), which are picked up by resp. the ``get_software_root`` and ``get_software_version`` functions often used in easyblocks. The ``$EBVERSION*`` environment variable is defined with the actual software version of the dependency. For the ``$EBROOT*`` environment variable, the name of the environment variable itself prefixed with a ' ``$`` ' is used as a dummy value, rather than using an fake installation software prefix. For example, when simulating the load statement for a ``GCC`` module, the environment variable ``$EBROOTGCC`` is defined as the string value ``'$EBROOTGCC'`` (literally). This results in sensible output when this value is picked up via ``get_software_root`` by the easyblock. For example, for netCDF used as a dependency for WRF the following is included in the module file contents included in the dry run output :: setenv NETCDF \"$EBROOTNETCDF\" setenv NETCDFF \"$EBROOTNETCDFMINFORTRAN\" .. _extended_dry_run_overview_module_load_simulated_toolchain: Simulated loading of non-available *toolchain* module ##################################################### When the module that corresponds to the toolchain being used is not available, the dry run mechanism will also simulate the ``module load`` statements for the individual toolchain components, to ensure that version checks on the toolchain components can work as expected. For example, if the toolchain module ``intel/2015a`` is not available, the loading of the ``icc`` , ``ifort`` , ``impi`` and ``imkl`` modules that would be loaded by the ``intel`` module is also simulated :: [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load icc/2015.1.133-GCC-4.9.2 [SIMULATED] module load ifort/2015.1.133-GCC-4.9.2 [SIMULATED] module load impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2 [SIMULATED] module load imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2 [SIMULATED] module load intel/2015a [SIMULATED] .. _extended_dry_run_build_environment: Build environment is reported ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The build environment that is set up based on the toolchain (and toolchain options) being used, and the dependencies being loaded is reported as a part of the dry run output. For example, when ``GCC`` is used as a toolchain something like this will be included in the ``prepare_step`` part of the dry run output :: Defining build environment... export CC=\"gcc\" export CFLAGS=\"-O2\" export CXX=\"g++\" export CXXFLAGS=\"-O2\" export F77=\"gfortran\" export F90=\"gfortran\" export F90FLAGS=\"-O2\" export FFLAGS=\"-O2\" export FLIBS=\"-lgfortran\" export LDFLAGS=\"-L/home/example/eb/software/GCC/4.8.2/lib\" export LIBS=\"-lm -lpthread\" export OPTFLAGS=\"-O2\" export PRECFLAGS=\"\" This is particularly useful as an overview of which environment variables that are defined by the toolchain mechanism, and to assess the effect of changing toolchain options. The output is deliberately formatted such that is can be easily copy-pasted, which can be useful to mimic the environment in which EasyBuild will perform the build and install procedure. .. _extended_dry_run_overview_run_cmd: Shell commands are not executed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Any shell commands that are executed via the ``run_cmd`` and ``run_cmd_qa`` functions that are provided by the EasyBuild framework via the ``easybuild.tools.run`` are *not* executed, only reported (see also :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd` ). This typically includes the commands that are defined in the easyblock to be run as a part of the configure/build/install steps. For example :: configuring... [DRY RUN] [configure_step method] running command \" ./configure --prefix=/home/example/eb/software/make/3.82-GCC-4.8.2 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) building... [DRY RUN] [build_step method] running command \" make -j 4 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) ... installing... [DRY RUN] [stage_install_step method] [make_installdir method] [install_step method] running command \" make install \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) There are a couple of minor exceptions though. Some (light-weight) commands are always run by the EasyBuild framework, even in dry run mode, and an easyblock can specify that particular commands *must* always be run (see also :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd` ). .. _extended_dry_run_overview_sanity_check: Sanity check paths/commands are not checked ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since nothing is actually being installed during a dry run, the sanity check paths/commands can not be checked. Instead, the dry run mechanism will produce a clear overview of which paths are expected to be found in the installation directory, and which commands are expected to work (if any). For example :: sanity checking... [DRY RUN] [sanity_check_step method] Sanity check paths - file ['files'] * WRFV3/main/ideal.exe * WRFV3/main/libwrflib.a * WRFV3/main/ndown.exe * WRFV3/main/nup.exe * WRFV3/main/real.exe * WRFV3/main/tc.exe * WRFV3/main/wrf.exe Sanity check paths - (non-empty) directory ['dirs'] * WRFV3/main * WRFV3/run Sanity check commands (none) .. _extended_dry_run_overview_no_downloading: Module file is incomplete and only printed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ During a dry run, the contents of the module file that would be installed is still generated, but only printed; it is not actually written to file. More importantly however, the module file being reported is bound to be **incomplete** , since the module generator only includes certain statements conditionally, for example only if the files/directories to which they relate actually exist. This typically affects ``prepend-path`` statements, e.g. for ``$PATH`` , ``$LD_LIBRARY_PATH`` , etc. For example, the reported module file for make v3.82 built with ``GCC/4.8.2`` may look something like :: creating module... [DRY RUN] [make_module_step method] Generating module file /home/example/eb/modules/all/make/3.82-GCC-4.8.2, with contents: #%Module proc ModulesHelp { } { puts stderr { make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html } } module-whatis {Description: make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html} set root /home/example/eb/software/make/3.82-GCC-4.8.2 conflict make if { ![ is-loaded GCC/4.8.2 ] } { module load GCC/4.8.2 } setenv EBROOTMAKE \"$root\" setenv EBVERSIONMAKE \"3.82\" setenv EBDEVELMAKE \"$root/easybuild/make-3.82-GCC-4.8.2-easybuild-devel\" # Built with EasyBuild version 2.4.0 Note that there is no ``prepend-path PATH`` statement for the ``bin`` subdirectory, for example. .. _extended_dry_run_guidelines_easyblocks: Guidelines for easyblocks ------------------------- To ensure useful output under ``--extended-dry-run`` , easyblocks should be implemented keeping in mind that some operations are possible not performed, to avoid generating errors in dry run mode. Although errors are just ignored by the dry run mechanism on a per-step basis, they may hide subsequent operations and useful information for the remainder of the step (see also :ref: `extended_dry_run_notes_ignored_errors` ). .. _extended_dry_run_guidelines_easyblocks_detect_dry_run: Detecting dry run mode and enhancing the dry run output ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To detect whether an easyblock is being used in dry run mode, it suffices to check the ``self.dry_run`` class variable. Additional messages can be included in the dry run output using the ``self.dry_run_msg`` method. For example :: class Example(EasyBlock): def configure_step(self): if self.dry_run: self.dry_run_msg(\"Dry run mode detected, not reading template configuration files\") ... .. _extended_dry_run_guidelines_files_dirs_checks: Check whether files/directories exist before accessing them ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Rather than assuming that particular files or directories will be there, easyblocks should take into that they may not be, for example because EasyBuild is being run in dry run mode. For example, instead of simply assuming that a directory named ' ``test`` ' will be there, the existence should be checked first. If not, an appropriate error should be produced, but only when the easyblock is *not* being used in dry run mode. **Bad** example :: # *BAD* example: maybe the 'test' directory is not there (e.g., because we're in dry run mode)! try: testcases = os.listdir('test') except OSError as err: raise EasyBuildError(\"Unexpected error when determining list of test cases: %s\", err) Good example :: # make sure the 'test' directory is there before trying to access it if os.path.exists('test'): try: testcases = os.listdir('test') except OSError as err: raise EasyBuildError(\"Unexpected error when determining list of test cases: %s\", err) # only raise an error if we're not in dry run mode elif not self.dry_run: raise EasyBuildError(\"Test directory not found, failed to determine list of test cases\") Easyblocks that do not take this into account are likely to result in ignored errors during a dry run (see also :ref: `extended_dry_run_notes_ignored_errors` ). For example, for the bad example shown above :: !!! !!! WARNING: ignoring error \"Unexpected error when determining list of test cases: [Errno 2] No such file or directory: 'test'\" !!! .. _extended_dry_run_guidelines_easyblocks_framework_functions: Use functions provided by the EasyBuild framework ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The EasyBuild framework provides a bunch of functions that are \" *dry run-aware* \", and which can significantly help in keeping easyblocks free from conditional statements checking ``self.dry_run`` : * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_setvar` * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_write_file` * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_runtime_patching` * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd` .. _extended_dry_run_guidelines_easyblocks_framework_functions_setvar: Defining environment variables: ``setvar`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For defining environment variables, the ``setvar`` function available in the ``easybuild.tools.environment`` module should be used. For example, from the WRF easyblock :: jasper = get_software_root('JasPer') if jasper: env.setvar('JASPERINC', os.path.join(jasper, 'include')) When triggered in dry run mode, this will result in a clear dry run message like :: export JASPERINC=\"$EBROOTJASPER/include\" The actual output depends on whether or not the required module for ``JasPer`` is available (see :ref: `extended_dry_run_overview_module_load_simulated_deps` ). Silently defining environment variables ####################################### The ``setvar`` function also supports defining environment variables *silently* , i.e. without producing a corresponding dry run message, via the named argument ``verbose`` . This is used in a couple of places in the EasyBuild framework, to avoid some environment variables being defined cluttering the dry run output without added value. It can be used for similar reasons in easyblocks. For example, the ``PythonPackage`` uses it in the *install* step, to modify ``$PYTHONPATH`` as required by the ``python setup.py install`` procedure (which is considered not relevant to include in the dry run output, since it's a technicality) :: env.setvar('PYTHONPATH', new_pythonpath, verbose=False) .. _extended_dry_run_guidelines_easyblocks_framework_functions_write_file: Writing or appending to files: ``write_file`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For writing and appending to files, the EasyBuild framework provides the ``write_file`` function (available from the ``easybuild.tools.filetools`` module). Using it is straightforward, for example :: write_file('example.txt', \"Contents for the example file\") To append to an existing file, ``write_file`` support a named argument ``append`` . When used in dry run mode, ``write_file`` does not actually (attempt to) write to the file; instead, it just produces an appropriate dry run message and returns. For example :: file written: /tmp/eb-ksVC07/tmp.conf .. _extended_dry_run_guidelines_easyblocks_framework_functions_runtime_patching: Runtime patching of files: ``apply_regex_substitutions`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To make runtime patching of files in easyblocks easier, and to do it with taking the possibility of being in dry run module into account, the EasyBuild framework provides the ``apply_regex_substitutions`` function (available from the ``easybuild.tools.filetools`` module, since EasyBuild v2.4.0). This function takes two arguments: a path to the file that should be patched, and a list of tuples specifying the regular expression pattern to match on, and the string value that should be used as replacement text. For example (simple fictional example) :: # replace value for C++ compiler apply_regex_substitutions('config.mk', [('^(CPLUSPLUS\\s*=).*', '\\1 %s' % os.environ['CXX'])]) When used in dry run mode, it will produce a message like :: applying regex substitutions to file config.mk * regex pattern '^(CPLUSPLUS\\s*=\\s).*', replacement string '\\1 g++' .. _extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd: Executing commands: ``run_cmd`` and ``run_cmd_qa`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To execute shell commands, the ``run_cmd`` and ``run_cmd_qa`` functions are provided by the EasyBuild framework in the ``easybuild.tools.run`` module, with the latter providing support for running interactive commands. In their simplest form, they simply take the command to execute as a string. For example :: run_cmd(\"tcsh ./compile -j %s wrf\" % self.cfg['parallel']) In dry run mode, these functions just produce a dry run message, rather than actually executing the specified command. For example :: running command \"tcsh ./compile -j 4 wrf\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) Take into account that the directory included in the message may not be 100% accurate, see :ref: `extended_dry_run_overview_build_dir_guess` . Silently executing commands ########################### The ``verbose`` named argument supported by the ``run_cmd`` function allows to execute a particular command silently, i.e. without producing a dry run message. For example :: # only run for debugging purposes run_cmd(\"ulimit -v\", verbose=False) Forced execution of particular commands ####################################### Sometimes, it can be required that specific (light-weight) commands are *always* executed, because they have side-effects that are assumed to have taken place later in the easyblock. For this, the ``run_cmd`` function support another named argument, i.e. ``force_in_dry_run`` . When set to ``True`` , the specified command will always be executed, even when in dry run mode. This is mainly intended for use in the EasyBuild framework itself, where commands that verify certain things must be executed, but it can also be useful for easyblocks (if used correctly). For example :: out, exit_code = run_cmd(\"type module\", simple=False, force_in_dry_run=True) Example output -------------- Output examples for ``eb --extended-dry-run`` / ``eb -x`` : * :ref: `extended_dry_run_examples_make382_GCC482` * :ref: `extended_dry_run_examples_WRF361_intel2015a`","title":"Extended dry run"},{"location":"extended-dry-run/#extended-dry-run","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Extended_dry_run.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Extended_dry_run.rst in easybuilders/easybuild repo target: docs/extended-dry-run.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Extended dry run"},{"location":"extended-dry-run/#examples","text":"Warning This section will soon replace https://docs.easybuild.io/en/latest/Extended_dry_run_examples.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Extended_dry_run_examples.rst in easybuilders/easybuild repo target: examples section of docs/extended-dry-run.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _extended_dry_run_examples: Extended dry run: examples ========================== Output examples for ``eb --extended-dry-run`` / ``eb -x`` , see also :ref: `extended_dry_run` . .. contents :: :depth: 2 :backlinks: none .. _extended_dry_run_examples_make382_GCC482: make v3.82 with GCC/4.8.2 ------------------------- .. code :: $ eb make-3.82-GCC-4.8.2.eb -x == temporary log file in case of crash /tmp/eb-ksVC07/easybuild-MmAugb.log == processing EasyBuild easyconfig /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/m/make/make-3.82-GCC-4.8.2.eb Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined below, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information below for quick debugging purposes. *** DRY RUN using 'ConfigureMake' easyblock (easybuild.easyblocks.generic.configuremake @ /home/example/eb/easybuild-easyblocks/easybuild/easyblocks/generic/configuremake.pyc) ** * == building and installing make/3.82-GCC-4.8.2... fetching files... [DRY RUN] [fetch_step method] Available download URLs for sources/patches: * http://ftpmirror.gnu.org/make/$source List of sources: * make-3.82.tar.bz2 will be downloaded to /home/example/eb/sources/m/make/make-3.82.tar.bz2 List of patches: (none) creating build dir, resetting environment... [DRY RUN] [check_readiness_step method] [make_builddir method] [reset_changes method] [handle_iterate_opts method] unpacking... [DRY RUN] [checksum_step method] * expected checksum for make-3.82.tar.bz2: (none) [extract_step method] running command \"tar xjf /home/example/eb/sources/m/make/make-3.82.tar.bz2\" (in /home/example/eb/build/make/3.82/GCC-4.8.2) patching... [DRY RUN] [patch_step method] preparing... [DRY RUN] [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load GCC/4.8.2 Loading modules for dependencies... Full list of loaded modules: 1) GCC/4.8.2 Defining build environment... export CC=\"gcc\" export CFLAGS=\"-O2\" export CXX=\"g++\" export CXXFLAGS=\"-O2\" export F77=\"gfortran\" export F90=\"gfortran\" export F90FLAGS=\"-O2\" export FFLAGS=\"-O2\" export FLIBS=\"-lgfortran\" export LDFLAGS=\"-L/home/example/eb/software/GCC/4.8.2/lib\" export LIBS=\"-lm -lpthread\" export OPTFLAGS=\"-O2\" export PRECFLAGS=\"\" configuring... [DRY RUN] [configure_step method] running command \" ./configure --prefix=/home/example/eb/software/make/3.82-GCC-4.8.2 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) building... [DRY RUN] [build_step method] running command \" make -j 4 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) testing... [DRY RUN] [test_step method] installing... [DRY RUN] [stage_install_step method] [make_installdir method] [install_step method] running command \" make install \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) taking care of extensions... [DRY RUN] [extensions_step method] postprocessing... [DRY RUN] [post_install_step method] sanity checking... [DRY RUN] [sanity_check_step method] Sanity check paths - file ['files'] * bin/make Sanity check paths - (non-empty) directory ['dirs'] (none) Sanity check commands (none) cleaning up... [DRY RUN] [cleanup_step method] creating module... [DRY RUN] [make_module_step method] Generating module file /home/example/eb/modules/all/make/3.82-GCC-4.8.2, with contents: #%Module proc ModulesHelp { } { puts stderr { make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html } } module-whatis {Description: make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html} set root /home/example/eb/software/make/3.82-GCC-4.8.2 conflict make if { ![ is-loaded GCC/4.8.2 ] } { module load GCC/4.8.2 } setenv EBROOTMAKE \"$root\" setenv EBVERSIONMAKE \"3.82\" setenv EBDEVELMAKE \"$root/easybuild/make-3.82-GCC-4.8.2-easybuild-devel\" # Built with EasyBuild version 2.4.0 permissions... [DRY RUN] [permissions_step method] packaging... [DRY RUN] [package_step method] == COMPLETED: Installation ended successfully Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined above, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information above for quick debugging purposes. (no ignored errors during dry run) == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-ksVC07/easybuild-MmAugb.log* have been removed. == Temporary directory /tmp/eb-ksVC07 has been removed. .. _extended_dry_run_examples_WRF361_intel2015a: WRF v3.6.1 with intel/2015a --------------------------- .. code :: $ eb WRF-3.6.1-intel-2015a-dmpar.eb -x == temporary log file in case of crash /tmp/eb-Dh1wOp/easybuild-0bu9u9.log == processing EasyBuild easyconfig /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1-intel-2015a-dmpar.eb Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined below, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information below for quick debugging purposes. *** DRY RUN using 'EB_WRF' easyblock (easybuild.easyblocks.wrf @ /home/example/eb/easybuild-easyblocks/easybuild/easyblocks/w/wrf.py) ** * == building and installing WRF/3.6.1-intel-2015a-dmpar... fetching files... [DRY RUN] [fetch_step method] Available download URLs for sources/patches: * http://www2.mmm.ucar.edu/wrf/src//$source * http://www.mmm.ucar.edu/wrf/src//$source List of sources: * WRFV3.6.1.TAR.gz will be downloaded to /home/example/eb/sources/w/WRF/WRFV3.6.1.TAR.gz List of patches: * WRF_parallel_build_fix.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_parallel_build_fix.patch * WRF-3.6.1_netCDF-Fortran_separate_path.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_netCDF-Fortran_separate_path.patch * WRF-3.6.1_known_problems.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_known_problems.patch * WRF_tests_limit-runtimes.patch found at /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_tests_limit-runtimes.patch creating build dir, resetting environment... [DRY RUN] [check_readiness_step method] [make_builddir method] [reset_changes method] [handle_iterate_opts method] unpacking... [DRY RUN] [checksum_step method] * expected checksum for WRFV3.6.1.TAR.gz: (none) * expected checksum for WRF_parallel_build_fix.patch: (none) * expected checksum for WRF-3.6.1_netCDF-Fortran_separate_path.patch: (none) * expected checksum for WRF-3.6.1_known_problems.patch: (none) * expected checksum for WRF_tests_limit-runtimes.patch: (none) [extract_step method] running command \"tar xzf /home/example/eb/sources/w/WRF/WRFV3.6.1.TAR.gz\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) patching... [DRY RUN] [patch_step method] * applying patch file WRF_parallel_build_fix.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_parallel_build_fix.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF-3.6.1_netCDF-Fortran_separate_path.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_netCDF-Fortran_separate_path.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF-3.6.1_known_problems.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF-3.6.1_known_problems.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF_tests_limit-runtimes.patch running command \"patch -b -p<derived> -i /home/example/eb/easybuild-easyconfigs/easybuild/easyconfigs/w/WRF/WRF_tests_limit-runtimes.patch\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar) preparing... [DRY RUN] [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load icc/2015.1.133-GCC-4.9.2 [SIMULATED] module load ifort/2015.1.133-GCC-4.9.2 [SIMULATED] module load impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2 [SIMULATED] module load imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2 [SIMULATED] module load intel/2015a [SIMULATED] Loading modules for dependencies... module load JasPer/1.900.1-intel-2015a [SIMULATED] module load netCDF/4.3.2-intel-2015a [SIMULATED] module load netCDF-Fortran/4.4.0-intel-2015a [SIMULATED] module load tcsh/6.18.01-intel-2015a [SIMULATED] Full list of loaded modules: (none) !!! !!! WARNING: Not all FFTW interface libraries ['fftw3xc_intel', 'mkl_intel_lp64', 'mkl_sequential', 'mkl_core'] are found in ['$EBROOTIMKL/mkl/lib/intel64', '$EBROOTIMKL/compiler/lib/intel64'], can't set $FFT_LIB. !!! Defining build environment... export BLACS_INC_DIR=\"\" export BLACS_LIB_DIR=\"\" export BLACS_MT_STATIC_LIBS=\"libmkl_blacs_intelmpi_lp64.a\" export BLACS_STATIC_LIBS=\"libmkl_blacs_intelmpi_lp64.a\" export BLAS_INC_DIR=\"\" export BLAS_LAPACK_INC_DIR=\"\" export BLAS_LAPACK_LIB_DIR=\"\" export BLAS_LAPACK_MT_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export BLAS_LAPACK_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" export BLAS_LIB_DIR=\"\" export BLAS_MT_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export BLAS_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" export CC=\"icc\" export CFLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export CPPFLAGS=\"\" export CXX=\"icpc\" export CXXFLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export F77=\"ifort\" export F90=\"ifort\" export F90FLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export FFLAGS=\"-O2 -ftz -fp-speculation=safe -fp-model source\" export FFTW_INC_DIR=\"\" export FFTW_LIB_DIR=\"\" export FFTW_STATIC_LIBS=\"\" export FFT_INC_DIR=\"\" export FFT_LIB_DIR=\"\" export FFT_STATIC_LIBS=\"\" export I_MPI_CC=\"icc\" export I_MPI_CXX=\"icpc\" export I_MPI_F77=\"ifort\" export I_MPI_F90=\"ifort\" export LAPACK_INC_DIR=\"\" export LAPACK_LIB_DIR=\"\" export LAPACK_MT_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export LAPACK_STATIC_LIBS=\"libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" export LDFLAGS=\"\" export LIBBLACS=\"-Wl,-Bstatic -Wl,--start-group -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -Wl,-Bdynamic\" export LIBBLACS_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -Wl,-Bdynamic\" export LIBBLAS=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBBLAS_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBFFT=\"\" export LIBLAPACK=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBLAPACK_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBLAPACK_MT_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBLAPACK_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBS=\"-liomp5 -lpthread\" export LIBSCALAPACK=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -Wl,-Bdynamic\" export LIBSCALAPACK_MT=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBSCALAPACK_MT_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -Wl,--end-group -Wl,-Bdynamic -liomp5 -lpthread\" export LIBSCALAPACK_ONLY=\"-Wl,-Bstatic -Wl,--start-group -lmkl_scalapack_lp64 -Wl,--end-group -Wl,-Bdynamic\" export MPICC=\"mpicc\" export MPICH_CC=\"icc\" export MPICH_CXX=\"icpc\" export MPICH_F77=\"ifort\" export MPICH_F90=\"ifort\" export MPICXX=\"mpicxx\" export MPIF77=\"mpif77\" export MPIF90=\"mpif90\" export MPI_INC_DIR=\"\" export MPI_LIB_DIR=\"\" export MPI_LIB_SHARED=\"\" export MPI_LIB_STATIC=\"\" export OPTFLAGS=\"-O2\" export PRECFLAGS=\"-ftz -fp-speculation=safe -fp-model source\" export SCALAPACK_INC_DIR=\"\" export SCALAPACK_LIB_DIR=\"\" export SCALAPACK_MT_STATIC_LIBS=\"libmkl_scalapack_lp64.a,libmkl_blacs_intelmpi_lp64.a,libmkl_intel_lp64.a,libmkl_intel_thread.a,libmkl_core.a,libiomp5.a,libpthread.a\" export SCALAPACK_STATIC_LIBS=\"libmkl_scalapack_lp64.a,libmkl_blacs_intelmpi_lp64.a,libmkl_intel_lp64.a,libmkl_sequential.a,libmkl_core.a\" configuring... [DRY RUN] [configure_step method] export NETCDF=\"$EBROOTNETCDF\" export NETCDFF=\"$EBROOTNETCDFMINFORTRAN\" export JASPERINC=\"$EBROOTJASPER/include\" export JASPERLIB=\"$EBROOTJASPER/lib\" export WRFIO_NCD_LARGE_FILE_SUPPORT=\"1\" Perl script patched: arch/Config_new.pl running interactive command \"./configure\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) applying regex substitutions to file configure.wrf * regex pattern '^(DM_FC\\s *=\\s* ).*$', replacement string '\\1 mpif90' * regex pattern '^(DM_CC\\s *=\\s* ).*$', replacement string '\\1 mpicc -DMPI2_SUPPORT' * regex pattern '^(SFC\\s *=\\s* ).*$', replacement string '\\1 ifort' * regex pattern '^(SCC\\s *=\\s* ).*$', replacement string '\\1 icc' * regex pattern '^(CCOMP\\s *=\\s* ).*$', replacement string '\\1 icc' applying regex substitutions to file configure.wrf * regex pattern '^(FCOPTIM. *)(\\s-O3)(\\s.* )$', replacement string '\\1 -O2 -ftz -fp-speculation=safe -fp-model source \\3' * regex pattern '^(CFLAGS_LOCAL. *)(\\s-O3)(\\s.* )$', replacement string '\\1 -O2 -ftz -fp-speculation=safe -fp-model source \\3' building... [DRY RUN] [build_step method] running command \"tcsh ./compile -j 4 wrf\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) running command \"tcsh ./compile -j 4 em_real\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) running command \"tcsh ./compile -j 4 em_b_wave\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) testing... [DRY RUN] [test_step method] export I_MPI_MPD_TMPDIR=\"/tmp/eb-Dh1wOp\" export PBS_ENVIRONMENT=\"PBS_BATCH_MPI\" export I_MPI_PROCESS_MANAGER=\"mpd\" file written: /tmp/eb-Dh1wOp/mpi_cmd_for-nzyh5V/mpdboot file written: /tmp/eb-Dh1wOp/mpi_cmd_for-nzyh5V/nodes export I_MPI_MPD_TMPDIR=\"/tmp/eb-Dh1wOp\" export PBS_ENVIRONMENT=\"PBS_BATCH_MPI\" export I_MPI_PROCESS_MANAGER=\"mpd\" file written: /tmp/eb-Dh1wOp/mpi_cmd_for-hIOEd_/mpdboot file written: /tmp/eb-Dh1wOp/mpi_cmd_for-hIOEd_/nodes installing... [DRY RUN] [stage_install_step method] [make_installdir method] [install_step method] taking care of extensions... [DRY RUN] [extensions_step method] postprocessing... [DRY RUN] [post_install_step method] sanity checking... [DRY RUN] [sanity_check_step method] Sanity check paths - file ['files'] * WRFV3/main/ideal.exe * WRFV3/main/libwrflib.a * WRFV3/main/ndown.exe * WRFV3/main/nup.exe * WRFV3/main/real.exe * WRFV3/main/tc.exe * WRFV3/main/wrf.exe Sanity check paths - (non-empty) directory ['dirs'] * WRFV3/main * WRFV3/run Sanity check commands (none) cleaning up... [DRY RUN] [cleanup_step method] creating module... [DRY RUN] [make_module_step method] Generating module file /home/example/eb/modules/all/WRF/3.6.1-intel-2015a-dmpar, with contents: #%Module proc ModulesHelp { } { puts stderr { The Weather Research and Forecasting (WRF) Model is a next-generation mesoscale numerical weather prediction system designed to serve both operational forecasting and atmospheric research needs. - Homepage: http://www.wrf-model.org } } module-whatis {Description: The Weather Research and Forecasting (WRF) Model is a next-generation mesoscale numerical weather prediction system designed to serve both operational forecasting and atmospheric research needs. - Homepage: http://www.wrf-model.org} set root /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar conflict WRF if { ![ is-loaded intel/2015a ] } { module load intel/2015a } if { ![ is-loaded JasPer/1.900.1-intel-2015a ] } { module load JasPer/1.900.1-intel-2015a } if { ![ is-loaded netCDF/4.3.2-intel-2015a ] } { module load netCDF/4.3.2-intel-2015a } if { ![ is-loaded netCDF-Fortran/4.4.0-intel-2015a ] } { module load netCDF-Fortran/4.4.0-intel-2015a } setenv EBROOTWRF \"$root\" setenv EBVERSIONWRF \"3.6.1\" setenv EBDEVELWRF \"$root/easybuild/WRF-3.6.1-intel-2015a-dmpar-easybuild-devel\" setenv NETCDF \"$EBROOTNETCDF\" setenv NETCDFF \"$EBROOTNETCDFMINFORTRAN\" # Built with EasyBuild version 2.4.0 permissions... [DRY RUN] [permissions_step method] packaging... [DRY RUN] [package_step method] == COMPLETED: Installation ended successfully Important note: the actual build & install procedure that will be performed may diverge (slightly) from what is outlined above, due to conditions in the easyblock which are incorrectly handled in a dry run. Any errors that may occur are ignored and reported as warnings, on a per-step basis. Please be aware of this, and only use the information above for quick debugging purposes. (no ignored errors during dry run) == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-Dh1wOp/easybuild-0bu9u9.log* have been removed. == Temporary directory /tmp/eb-Dh1wOp has been removed. .. _extended_dry_run: Extended dry run ================ Using ``--extended-dry-run`` or ``-x`` (supported since EasyBuild v2.4.0, see release notes for :ref: `release_notes_eb240` ), a detailed overview of the build and install procedure that EasyBuild is going to execute can be obtained almost instantly. All time-consuming operations, including executing commands to configure/build/install the software, are only *reported* rather than being actually performed. Example output is available at :ref: `extended_dry_run_examples` . .. contents :: :depth: 3 :backlinks: none .. _extended_dry_run_notes: Important notes --------------- There are a couple of things you should be aware of when using ``--extended-dry-run`` and interpreting the output it produces. .. _extended_dry_run_notes_differences: Build/install procedure reported by dry run may be (slightly) different ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The actual build and install procedure may (slightly) differ from the one reported by ``--extended-dry-run`` , due to conditional checks in the easyblock being used. For example, expressions that are conditional on the presence of certain files or directories in the build directory will always be false, since the build directory is never actually populated. .. _extended_dry_run_notes_ignored_errors: Errors are ignored (by default) during dry run ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Any errors that occur are ignored, and are reported with a clear warning message. This is done because it is possible that these errors occur because of the dry run mechanism. For example, the install step could assume that certain files created by a previous step will be present, but they will not be there since the commands that are supposed to produce them were not actually performed in dry run mode. Errors are ignored *on a per-step basis* . When an error is ignored in a particular step, that step is aborted, which may result in partial dry run output for that particular step. Subsequent steps will still be run (in dry run mode), however. Since it's possible that these errors occur due to a bug in the easyblock being used, it's important to pay attention to these ignored errors. Ignored errors are reported as follows, for example :: == testing... [DRY RUN] [test_step method] !!! !!! WARNING: ignoring error \"[Errno 2] No such file or directory: 'test'\" !!! At the end of dry run output, anonother warning message is shown if any ignored errors occurred :: == COMPLETED: Installation ended successfully !!! !!! WARNING: One or more errors were ignored, see warnings above !!! .. _extended_dry_run_notes_ignored_errors_disabling: Disabling ignoring errors during dry run ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Ignoring errors that occur during a dry run is enabled by default; it can be disabled using the configuration option that is available for it, i.e. by: * the ``--disable-extended-dry-run-ignore-errors`` command line option * by defining the ``$EASYBUILD_DISABLE_EXTENDED_DRY_RUN_IGNORE_ERRORS`` environment variable * or by defining ``disable-extended-dry-run-ignore-errors`` in an EasyBuild configuration file (see also :ref: `configuring_easybuild` ) .. _extended_dry_run_overview: Overview of dry run mechanism ----------------------------- During an extended dry run, several operations are not performed, or are only simulated. The sections below give a detailed overview of the dry run mechanism. .. _extended_dry_run_overview_build_install_dirs: Temporary directories as build/install directories ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To make very sure that EasyBuild does not touch any files or directories during the dry run, the build and (software/module) install directories are replaced by subdirectories of the temporary directory used by that particular EasyBuild session. In the background, the values for ``self.builddir`` , ``self.installdir`` and ``self.installdir_mod`` are changed in the ``EasyBlock`` instance(s) being used; this also affects the use of the ``%(builddir)s`` and ``$(installdir)s`` values in easyconfig files. Although the build and install directories are effectively temporary directories during a dry run (under a prefix like ``/tmp/eb-aD_yNu/__ROOT__`` ), this is not visible in the dry run output: the 'fake' build and install directories are replaced by the corresponding original value in the dry run output. For example :: [extract_step method] running command \"tar xzf /home/example/easybuild/sources/b/bzip2/bzip2-1.0.6.tar.gz\" (in /tmp/example/eb_build/bzip2/1.0.6/GCC-4.9.2) .. _extended_dry_run_overview_build_dir_guess: Note on build directory in dry run mode ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The build (sub)directory used during an actual (non-dry run) EasyBuild session may be different than the one mentioned in the dry run output. This is because during a dry run, EasyBuild will *guess* the name of the subdirectory that is created by unpacking the first source file in the build directory as being ``<name>-<version>`` . Although this is a common pattern, it is not always 100% correct. For example, you may see this in the dry run output for WRF (for which a build-in-installdir procedure is used) :: [build_step method] running command \"tcsh ./compile -j 4 wrf\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) The actual build (and install) subdirectory is slightly different while not in dry run mode however, i.e.: ``/home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRFV3`` . .. _extended_dry_run_overview_downloading: No downloading of missing source files/patches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Required files (source files/patches) are not downloaded during a dry run if they are not available yet. The dry run output will specify whether files are found (and if so, at which path) or not; the exact output for files that were not found depends on whether or not source URLs are available. For example: if the required source file for ``bzip2`` is not available yet, it is indicated where EasyBuild will try to download it to :: [fetch_step method] Available download URLs for sources/patches: * http://www.bzip.org/1.0.6/$source List of sources: * bzip2-1.0.6.tar.gz downloaded to /home/example/easybuild/sources/b/bzip2/bzip2-1.0.6.tar.gz List of patches: (none) If the source file is already available in the source path that EasyBuild was configured with, it is indicated as such :: List of sources: * bzip2-1.0.6.tar.gz found at /home/example/easybuild/sources/b/bzip2/bzip2-1.0.6.tar.gz In case no source URLs are available and required files are missing, they are simply marked as such :: Available download URLs for sources/patches: (none) List of sources: * bzip2-1.0.6.tar.bz2 (MISSING) However, since the dry run mechanism never actually uses the source files/patches, this does not affect the remainder of the output of ``--extended-dry-run`` / ``-x`` . .. _extended_dry_run_overview_checksum_verification: Checksum verification is skipped ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Computing checksums of sources files/patches, and verifying them against specified checksums (if available) is *skipped* during a dry run, because it is considered potentially too time-consuming. In addition, source files/patches may not be available anyway. If checksums are available they are only reported, for example (for GCC v4.9.3) :: [checksum_step method] * expected checksum for gcc-4.9.3.tar.bz2: 6f831b4d251872736e8e9cc09746f327 * expected checksum for gmp-6.0.0a.tar.bz2: b7ff2d88cae7f8085bd5006096eed470 * expected checksum for mpfr-3.1.2.tar.gz: 181aa7bb0e452c409f2788a4a7f38476 * expected checksum for mpc-1.0.2.tar.gz: 68fadff3358fb3e7976c7a398a0af4c3 * expected checksum for mpfr-3.1.2-allpatches-20141204.patch: 58aec98d15982f9744a043d2f1c5af82 .. _extended_dry_run_overview_unpacking_sources: Source files are not unpacked ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Source files are *not* unpacked, since this may require too much time (in case of large source files). Additionally, source files may not be available anyway. This has a number of implications: * files or directories that may be expected to be there are not, which may lead to (ignored) errors if the used easyblock does not take this into account (see also :ref: `extended_dry_run_notes_ignored_errors` ) * the build directory in which commands are executed may be incorrect in the dry run output (see also :ref: `extended_dry_run_overview_build_dir_guess` ) The extraction command is mentioned in the dry run output however, for example :: [extract_step method] running command \"tar xjf bzip2-1.0.6.tar.bz2\" (in /tmp/example/eb_build/bzip2/1.0.6/GCC-4.9.2) .. _extended_dry_run_overview_patching: Patch files are not applied, no runtime patching ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since source files are not unpacked, patch files can not applied either. The dry run output does provide an overview of patch files, together with where they are found and how they are applied :: [patch_step method] * applying patch file WRF_parallel_build_fix.patch running command \"patch -b -p<derived> -i /home/example/easybuild/sources/w/WRF/WRF_parallel_build_fix.patch\" (in /home/example/easybuild/easybuild/software/WRF/3.6.1-intel-2015a-dmpar) * applying patch file WRF-3.6.1_known_problems.patch running command \"patch -b -p<derived> -i /home/example/easybuild/sources/w/WRF/WRF-3.6.1_known_problems.patch\" (in /home/example/easybuild/easybuild/software/WRF/3.6.1-intel-2015a-dmpar) Likewise, runtime patching performed by the easyblock itself can not work either. If the ``apply_regex_substitutions`` function (available from ``easybuild.tools.filetools`` ) is used, a clear overview is included in the dry run output (see also :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_runtime_patching` ). For example, in the ``configure`` step of the WRF easyblock when using the Intel compilers, this yields :: [configure_step method] ... applying regex substitutions to file configure.wrf * regex pattern '^(DM_FC\\s*=\\s*).*$', replacement string '\\1 mpif90' * regex pattern '^(DM_CC\\s*=\\s*).*$', replacement string '\\1 mpicc -DMPI2_SUPPORT' If the ``apply_regex_substitutions`` function provided for runtime patching is not used (and ``fileinput`` is used directly, for example), runtime patching performed by the easyblock will most likely result in an error, leading to the step in which it is being performed being aborted (see :ref: `extended_dry_run_notes_ignored_errors` ). .. _extended_dry_run_overview_module_load: Module ``load`` statements are executed or simulated ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ``module load`` statements are either effectively executed or simulated, dependending on whether the corresponding module files are available or not. .. _extended_dry_run_overview_module_load_available: Available modules are loaded ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ``module load`` statements are fairly light-weight, so they are effectively executed if the module being loaded is available. The dry run output includes an overview of the modules being loaded. In addition an overview of all loaded modules, including the ones that were loaded indirectly, is shown. For example :: [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load GCC/4.9.2 Loading modules for dependencies... module load M4/1.4.17-GCC-4.9.2 Full list of loaded modules: 1) GCC/4.8.2 2) M4/1.4.17-GCC-4.9.2 .. _extended_dry_run_overview_module_load_simulated: Loading of non-available modules is simulated ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ If the module file required to execute a particular ``module load`` statement is not available, the dry run mechanism will *simulate* the loading of the module. The ``module load`` statements that were simulated rather than actually performed are clearly indicated using ``[SIMULATED]`` in the dry run output, for example :: [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load intel/2015a Loading modules for dependencies... module load JasPer/1.900.1-intel-2015a module load netCDF/4.3.2-intel-2015a [SIMULATED] module load netCDF-Fortran/4.4.0-intel-2015a [SIMULATED] module load tcsh/6.18.01-intel-2015a Only modules that were effectively loaded will appear in the full list of modules being printed; modules for which the load was simulated will not be included. .. _extended_dry_run_overview_module_load_simulated_deps: Simulated loading of non-available *dependency* modules ####################################################### For dependencies, simulating a ``module load`` statement basically (only) entails defining the ``$EBROOT*`` and ``$EBVERSION*`` environment variables (the full variable names are determined by the software name), which are picked up by resp. the ``get_software_root`` and ``get_software_version`` functions often used in easyblocks. The ``$EBVERSION*`` environment variable is defined with the actual software version of the dependency. For the ``$EBROOT*`` environment variable, the name of the environment variable itself prefixed with a ' ``$`` ' is used as a dummy value, rather than using an fake installation software prefix. For example, when simulating the load statement for a ``GCC`` module, the environment variable ``$EBROOTGCC`` is defined as the string value ``'$EBROOTGCC'`` (literally). This results in sensible output when this value is picked up via ``get_software_root`` by the easyblock. For example, for netCDF used as a dependency for WRF the following is included in the module file contents included in the dry run output :: setenv NETCDF \"$EBROOTNETCDF\" setenv NETCDFF \"$EBROOTNETCDFMINFORTRAN\" .. _extended_dry_run_overview_module_load_simulated_toolchain: Simulated loading of non-available *toolchain* module ##################################################### When the module that corresponds to the toolchain being used is not available, the dry run mechanism will also simulate the ``module load`` statements for the individual toolchain components, to ensure that version checks on the toolchain components can work as expected. For example, if the toolchain module ``intel/2015a`` is not available, the loading of the ``icc`` , ``ifort`` , ``impi`` and ``imkl`` modules that would be loaded by the ``intel`` module is also simulated :: [prepare_step method] Defining build environment, based on toolchain (options) and specified dependencies... Loading toolchain module... module load icc/2015.1.133-GCC-4.9.2 [SIMULATED] module load ifort/2015.1.133-GCC-4.9.2 [SIMULATED] module load impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2 [SIMULATED] module load imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2 [SIMULATED] module load intel/2015a [SIMULATED] .. _extended_dry_run_build_environment: Build environment is reported ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The build environment that is set up based on the toolchain (and toolchain options) being used, and the dependencies being loaded is reported as a part of the dry run output. For example, when ``GCC`` is used as a toolchain something like this will be included in the ``prepare_step`` part of the dry run output :: Defining build environment... export CC=\"gcc\" export CFLAGS=\"-O2\" export CXX=\"g++\" export CXXFLAGS=\"-O2\" export F77=\"gfortran\" export F90=\"gfortran\" export F90FLAGS=\"-O2\" export FFLAGS=\"-O2\" export FLIBS=\"-lgfortran\" export LDFLAGS=\"-L/home/example/eb/software/GCC/4.8.2/lib\" export LIBS=\"-lm -lpthread\" export OPTFLAGS=\"-O2\" export PRECFLAGS=\"\" This is particularly useful as an overview of which environment variables that are defined by the toolchain mechanism, and to assess the effect of changing toolchain options. The output is deliberately formatted such that is can be easily copy-pasted, which can be useful to mimic the environment in which EasyBuild will perform the build and install procedure. .. _extended_dry_run_overview_run_cmd: Shell commands are not executed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Any shell commands that are executed via the ``run_cmd`` and ``run_cmd_qa`` functions that are provided by the EasyBuild framework via the ``easybuild.tools.run`` are *not* executed, only reported (see also :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd` ). This typically includes the commands that are defined in the easyblock to be run as a part of the configure/build/install steps. For example :: configuring... [DRY RUN] [configure_step method] running command \" ./configure --prefix=/home/example/eb/software/make/3.82-GCC-4.8.2 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) building... [DRY RUN] [build_step method] running command \" make -j 4 \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) ... installing... [DRY RUN] [stage_install_step method] [make_installdir method] [install_step method] running command \" make install \" (in /home/example/eb/build/make/3.82/GCC-4.8.2/make-3.82) There are a couple of minor exceptions though. Some (light-weight) commands are always run by the EasyBuild framework, even in dry run mode, and an easyblock can specify that particular commands *must* always be run (see also :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd` ). .. _extended_dry_run_overview_sanity_check: Sanity check paths/commands are not checked ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since nothing is actually being installed during a dry run, the sanity check paths/commands can not be checked. Instead, the dry run mechanism will produce a clear overview of which paths are expected to be found in the installation directory, and which commands are expected to work (if any). For example :: sanity checking... [DRY RUN] [sanity_check_step method] Sanity check paths - file ['files'] * WRFV3/main/ideal.exe * WRFV3/main/libwrflib.a * WRFV3/main/ndown.exe * WRFV3/main/nup.exe * WRFV3/main/real.exe * WRFV3/main/tc.exe * WRFV3/main/wrf.exe Sanity check paths - (non-empty) directory ['dirs'] * WRFV3/main * WRFV3/run Sanity check commands (none) .. _extended_dry_run_overview_no_downloading: Module file is incomplete and only printed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ During a dry run, the contents of the module file that would be installed is still generated, but only printed; it is not actually written to file. More importantly however, the module file being reported is bound to be **incomplete** , since the module generator only includes certain statements conditionally, for example only if the files/directories to which they relate actually exist. This typically affects ``prepend-path`` statements, e.g. for ``$PATH`` , ``$LD_LIBRARY_PATH`` , etc. For example, the reported module file for make v3.82 built with ``GCC/4.8.2`` may look something like :: creating module... [DRY RUN] [make_module_step method] Generating module file /home/example/eb/modules/all/make/3.82-GCC-4.8.2, with contents: #%Module proc ModulesHelp { } { puts stderr { make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html } } module-whatis {Description: make-3.82: GNU version of make utility - Homepage: http://www.gnu.org/software/make/make.html} set root /home/example/eb/software/make/3.82-GCC-4.8.2 conflict make if { ![ is-loaded GCC/4.8.2 ] } { module load GCC/4.8.2 } setenv EBROOTMAKE \"$root\" setenv EBVERSIONMAKE \"3.82\" setenv EBDEVELMAKE \"$root/easybuild/make-3.82-GCC-4.8.2-easybuild-devel\" # Built with EasyBuild version 2.4.0 Note that there is no ``prepend-path PATH`` statement for the ``bin`` subdirectory, for example. .. _extended_dry_run_guidelines_easyblocks: Guidelines for easyblocks ------------------------- To ensure useful output under ``--extended-dry-run`` , easyblocks should be implemented keeping in mind that some operations are possible not performed, to avoid generating errors in dry run mode. Although errors are just ignored by the dry run mechanism on a per-step basis, they may hide subsequent operations and useful information for the remainder of the step (see also :ref: `extended_dry_run_notes_ignored_errors` ). .. _extended_dry_run_guidelines_easyblocks_detect_dry_run: Detecting dry run mode and enhancing the dry run output ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To detect whether an easyblock is being used in dry run mode, it suffices to check the ``self.dry_run`` class variable. Additional messages can be included in the dry run output using the ``self.dry_run_msg`` method. For example :: class Example(EasyBlock): def configure_step(self): if self.dry_run: self.dry_run_msg(\"Dry run mode detected, not reading template configuration files\") ... .. _extended_dry_run_guidelines_files_dirs_checks: Check whether files/directories exist before accessing them ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Rather than assuming that particular files or directories will be there, easyblocks should take into that they may not be, for example because EasyBuild is being run in dry run mode. For example, instead of simply assuming that a directory named ' ``test`` ' will be there, the existence should be checked first. If not, an appropriate error should be produced, but only when the easyblock is *not* being used in dry run mode. **Bad** example :: # *BAD* example: maybe the 'test' directory is not there (e.g., because we're in dry run mode)! try: testcases = os.listdir('test') except OSError as err: raise EasyBuildError(\"Unexpected error when determining list of test cases: %s\", err) Good example :: # make sure the 'test' directory is there before trying to access it if os.path.exists('test'): try: testcases = os.listdir('test') except OSError as err: raise EasyBuildError(\"Unexpected error when determining list of test cases: %s\", err) # only raise an error if we're not in dry run mode elif not self.dry_run: raise EasyBuildError(\"Test directory not found, failed to determine list of test cases\") Easyblocks that do not take this into account are likely to result in ignored errors during a dry run (see also :ref: `extended_dry_run_notes_ignored_errors` ). For example, for the bad example shown above :: !!! !!! WARNING: ignoring error \"Unexpected error when determining list of test cases: [Errno 2] No such file or directory: 'test'\" !!! .. _extended_dry_run_guidelines_easyblocks_framework_functions: Use functions provided by the EasyBuild framework ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The EasyBuild framework provides a bunch of functions that are \" *dry run-aware* \", and which can significantly help in keeping easyblocks free from conditional statements checking ``self.dry_run`` : * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_setvar` * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_write_file` * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_runtime_patching` * :ref: `extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd` .. _extended_dry_run_guidelines_easyblocks_framework_functions_setvar: Defining environment variables: ``setvar`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For defining environment variables, the ``setvar`` function available in the ``easybuild.tools.environment`` module should be used. For example, from the WRF easyblock :: jasper = get_software_root('JasPer') if jasper: env.setvar('JASPERINC', os.path.join(jasper, 'include')) When triggered in dry run mode, this will result in a clear dry run message like :: export JASPERINC=\"$EBROOTJASPER/include\" The actual output depends on whether or not the required module for ``JasPer`` is available (see :ref: `extended_dry_run_overview_module_load_simulated_deps` ). Silently defining environment variables ####################################### The ``setvar`` function also supports defining environment variables *silently* , i.e. without producing a corresponding dry run message, via the named argument ``verbose`` . This is used in a couple of places in the EasyBuild framework, to avoid some environment variables being defined cluttering the dry run output without added value. It can be used for similar reasons in easyblocks. For example, the ``PythonPackage`` uses it in the *install* step, to modify ``$PYTHONPATH`` as required by the ``python setup.py install`` procedure (which is considered not relevant to include in the dry run output, since it's a technicality) :: env.setvar('PYTHONPATH', new_pythonpath, verbose=False) .. _extended_dry_run_guidelines_easyblocks_framework_functions_write_file: Writing or appending to files: ``write_file`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For writing and appending to files, the EasyBuild framework provides the ``write_file`` function (available from the ``easybuild.tools.filetools`` module). Using it is straightforward, for example :: write_file('example.txt', \"Contents for the example file\") To append to an existing file, ``write_file`` support a named argument ``append`` . When used in dry run mode, ``write_file`` does not actually (attempt to) write to the file; instead, it just produces an appropriate dry run message and returns. For example :: file written: /tmp/eb-ksVC07/tmp.conf .. _extended_dry_run_guidelines_easyblocks_framework_functions_runtime_patching: Runtime patching of files: ``apply_regex_substitutions`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To make runtime patching of files in easyblocks easier, and to do it with taking the possibility of being in dry run module into account, the EasyBuild framework provides the ``apply_regex_substitutions`` function (available from the ``easybuild.tools.filetools`` module, since EasyBuild v2.4.0). This function takes two arguments: a path to the file that should be patched, and a list of tuples specifying the regular expression pattern to match on, and the string value that should be used as replacement text. For example (simple fictional example) :: # replace value for C++ compiler apply_regex_substitutions('config.mk', [('^(CPLUSPLUS\\s*=).*', '\\1 %s' % os.environ['CXX'])]) When used in dry run mode, it will produce a message like :: applying regex substitutions to file config.mk * regex pattern '^(CPLUSPLUS\\s*=\\s).*', replacement string '\\1 g++' .. _extended_dry_run_guidelines_easyblocks_framework_functions_run_cmd: Executing commands: ``run_cmd`` and ``run_cmd_qa`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To execute shell commands, the ``run_cmd`` and ``run_cmd_qa`` functions are provided by the EasyBuild framework in the ``easybuild.tools.run`` module, with the latter providing support for running interactive commands. In their simplest form, they simply take the command to execute as a string. For example :: run_cmd(\"tcsh ./compile -j %s wrf\" % self.cfg['parallel']) In dry run mode, these functions just produce a dry run message, rather than actually executing the specified command. For example :: running command \"tcsh ./compile -j 4 wrf\" (in /home/example/eb/software/WRF/3.6.1-intel-2015a-dmpar/WRF-3.6.1) Take into account that the directory included in the message may not be 100% accurate, see :ref: `extended_dry_run_overview_build_dir_guess` . Silently executing commands ########################### The ``verbose`` named argument supported by the ``run_cmd`` function allows to execute a particular command silently, i.e. without producing a dry run message. For example :: # only run for debugging purposes run_cmd(\"ulimit -v\", verbose=False) Forced execution of particular commands ####################################### Sometimes, it can be required that specific (light-weight) commands are *always* executed, because they have side-effects that are assumed to have taken place later in the easyblock. For this, the ``run_cmd`` function support another named argument, i.e. ``force_in_dry_run`` . When set to ``True`` , the specified command will always be executed, even when in dry run mode. This is mainly intended for use in the EasyBuild framework itself, where commands that verify certain things must be executed, but it can also be useful for easyblocks (if used correctly). For example :: out, exit_code = run_cmd(\"type module\", simple=False, force_in_dry_run=True) Example output -------------- Output examples for ``eb --extended-dry-run`` / ``eb -x`` : * :ref: `extended_dry_run_examples_make382_GCC482` * :ref: `extended_dry_run_examples_WRF361_intel2015a`","title":"Examples"},{"location":"getting-help/","text":"Getting help \u00b6 Having trouble? We would like to help! Search this documentation using the search box on top; Search for information in the archives of the EasyBuild mailing list ; Subscribe to the EasyBuild mailing list easybuild@lists.ugent.be to post a question; Check the output of eb --help ; Ask a question in the EasyBuild Slack channel ; Consider participating in an EasyBuild conference call ; Report issues with EasyBuild framework in the easybuild-framework GitHub repository; Report issues with easyblocks in the easybuild-easyblocks GitHub repository; Report issues with easyconfigs in the easybuild-easyconfigs GitHub repository; Report issues with the EasyBuild documentation in the easybuild-docs GitHub repository; Report issues on other aspects in the general easybuild GitHub repository;","title":"Getting help"},{"location":"getting-help/#getting-help","text":"Having trouble? We would like to help! Search this documentation using the search box on top; Search for information in the archives of the EasyBuild mailing list ; Subscribe to the EasyBuild mailing list easybuild@lists.ugent.be to post a question; Check the output of eb --help ; Ask a question in the EasyBuild Slack channel ; Consider participating in an EasyBuild conference call ; Report issues with EasyBuild framework in the easybuild-framework GitHub repository; Report issues with easyblocks in the easybuild-easyblocks GitHub repository; Report issues with easyconfigs in the easybuild-easyconfigs GitHub repository; Report issues with the EasyBuild documentation in the easybuild-docs GitHub repository; Report issues on other aspects in the general easybuild GitHub repository;","title":"Getting help"},{"location":"hooks/","text":"Hooks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Hooks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Hooks.rst in easybuilders/easybuild repo target: docs/hooks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _hooks: Hooks ===== Since v3.5.0, EasyBuild supports *hooks* that can be used to customise the behaviour of EasyBuild according to site policies if needed, without having to change the EasyBuild framework or the existing easyblocks. .. contents :: :depth: 3 :backlinks: none .. _hooks_what: What are hooks? --------------- *Hooks* are user-defined functions that are called by the EasyBuild framework at specific times during the installation procedure. They can be leveraged to alter or augment the installation procedure. This is usually done to conform with site-specific policies that are difficult to enforce otherwise, but it can also be (ab)used to fix specific problems or inject self-implemented enhancements (before you flesh them out in a proper contribution, for example). Both the ``EasyBlock`` instance and the parsed easyconfig file that are being used are fully accessible (and modifiable) from within hook implementations. Hence, this mechanism provides a lot of flexibility to change the EasyBuild functionality should you require it, without having to modify the codebase of EasyBuild itself. .. _hooks_configuration: Configuring EasyBuild to use your hook implementations ------------------------------------------------------ To instruct EasyBuild to use your hook implementations, you only need to specify the location of the Python module ( ``*.py`` ) that implements them. This is done via the ``--hooks`` configuration option (or equivalently via the ``$EASYBUILD_HOOKS`` environment variable, or via ``hooks = ...`` in an EasyBuild configuration file, see also :ref: `configuring_easybuild` ). For example :: eb --hooks=$HOME/my_eb_hooks.py ... or :: export EASYBUILD_HOOKS=$HOME/my_eb_hooks.py eb ... .. _hooks_available: Available hooks --------------- Currently (since EasyBuild v3.7.0), three types of hooks are supported: * ``start_hook`` and ``end_hook`` , which are triggered *once* before starting software installations, and *once* right after completing all installations, respectively * ``parse_hook`` , which is triggered when an easyconfig file is being parsed * ``module_write_hook`` , which is triggered right before a module file is written. This includes the temporary module file used when installing extensions and during the sanity check, as well as the devel module. * \" *step* \" hooks that are triggered before and after every step of each installation procedure that is performed, also aptly named ' ``pre`` '- and ' ``post`` '-hooks The list of currently available hooks in order of execution, which can also be consulted using ``eb --avail-hooks`` , is: * ``start_hook`` *(only called once in an EasyBuild session)* * ``parse_hook`` *(available since EasyBuild v3.7.0)* * ``pre_fetch_hook`` , ``post_fetch_hook`` * ``pre_ready_hook`` , ``post_ready_hook`` * ``pre_source_hook`` , ``post_source_hook`` * ``pre_patch_hook`` , ``post_patch_hook`` * ``pre_prepare_hook`` , ``post_prepare_hook`` * ``pre_configure_hook`` , ``post_configure_hook`` * ``pre_build_hook`` , ``post_build_hook`` * ``pre_test_hook`` , ``post_test_hook`` * ``pre_install_hook`` , ``post_install_hook`` * ``pre_extensions_hook`` , ``post_extensions_hook`` * ``pre_postproc_hook`` , ``post_postproc_hook`` * ``pre_sanitycheck_hook`` , ``post_sanitycheck_hook`` * ``pre_cleanup_hook`` , ``post_cleanup_hook`` * ``pre_module_hook`` , ``post_module_hook`` * ``pre_permissions_hook`` , ``post_permissions_hook`` * ``pre_package_hook`` , ``post_package_hook`` * ``pre_testcases_hook`` , ``post_testcases_hook`` * ``end_hook`` *(only called once in an EasyBuild session)* * ``module_write_hook`` *(called multiple times per installation, available since EasyBuild v4.4.1)* All functions implemented in the provided Python module for which the name ends with ``_hook`` are considered. If any ``*_hook`` functions are encountered that do not match any of the available hooks, an error is reported. EasyBuild will try to provide suggestions for available hooks that closely match the encountered unknown hook. For example :: $ eb --hooks wrong_hooks.py example.eb == temporary log file in case of crash /tmp/eb-nMawy1/easybuild-Gu2ZP6.log ERROR: Found one or more unknown hooks: * stat_hook (did you mean 'start_hook'?) * this_is_not_a_hook * install_hook (did you mean 'pre_install_hook', or 'post_install_hook'?) Run 'eb --avail-hooks' to get an overview of known hooks .. _hooks_implementation: Implementing hooks ------------------ To implement hooks, simply define one or more functions in a Python module ( ``*.py`` ), each named after an available hook. Do take into account the following: * for ``start_hook`` and ``end_hook`` , no arguments are provided * for ``parse_hook`` , one argument is provided: the ``EasyConfig`` instance that corresponds to the easyconfig file being parsed (usually referred to as ``ec`` ) * for ``module_write_hook`` , 3 arguments are provided: * the ``EasyBlock`` instance used to perform the installation (usually referred to as ``self`` ) * the filepath of the module that will be written * the module text as a string The return value of this hook, when set, will replace the original text that is then written to the module file. * for the step hooks, one argument is provided: the ``EasyBlock`` instance used to perform the installation (usually referred to as ``self`` ) * the parsed easyconfig file can be accessed in the step hooks via the ``EasyBlock`` instance, i.e., via ``self.cfg`` It is recommended to anticipate possible changes in the provided (named) arguments, using the ``*args`` and ``**kwargs`` mechanism commonly used in Python. This avoids that your hook implementations may break when updating to future EasyBuild versions. For example :: # example pre-configure hook that anticipates changes in provided arguments def pre_configure_hook(self, *args, **kwargs): ... In hooks you have access to the full functionality provided by the EasyBuild framework, so do ``import`` from ``easybuild.tools.*`` (or other ``easybuild.*`` namespaces) to leverage those functions. .. _hooks_parse_hook: Parse hook specifics ++++++++++++++++++++ ``parse_hook`` is triggered right *after* reading the easyconfig file, before further parsing of some easyconfig parameters (like ``*dependencies`` ) into custom data structures is done. This is important since it allows to dynamically modify easyconfig files while they are still \"raw\", i.e. when the easyconfig parameter values are still basic Python data structures like lists, dictionaries, etc. that are easy to manipulate (see also :ref: `hooks_caveats_manipulating` ). In ``parse_hook`` easyconfig parameters can be accessed and/or modified in a straightforward way, see :ref: `hooks_examples_inject_patch` . .. _hooks_caveats: Caveats ------- Due to internal details of the EasyBuild framework, you may run into some surprises when implementing hooks. Here are some things to take into account: .. _hooks_caveats_template_values: Resolving of template values ++++++++++++++++++++++++++++ In all *step* hooks, template values in easyconfig parameters will be resolved whenever they are accessed. That is, if the ``%(version)`` template is used in for example the ``sources`` easyconfig parameter, it will be replaced with the actual value of the ``version`` easyconfig parameter whenever the ``sources`` value is used. This can be avoided by temporarily disabling templating by wrapping the code in ``with self.cfg.disable_templating:`` . There is one notable exception to this: Templates in easyconfig parameters are *not* resolved in ``parse_hook`` , because templating has been disabled explicitly before ``parse_hook`` is called; this helps significantly to simplify manipulating of easyconfig parameter values (see also :ref: `hooks_caveats_manipulating` ). .. _hooks_caveats_manipulating: Manipulating easyconfig parameters ++++++++++++++++++++++++++++++++++ You may run into surprises when trying to manipulate easyconfig parameters, for various reasons. First of all, the original easyconfig parameters may already be processed in another data structure which does not resemble the original format in which the parameter was defined in the easyconfig file. Moreover, this processing could be done either \"in place\" by replacing the original easyconfig parameter value, or in a separate variable, which effectively means that any changes to the original easyconfig parameter value are simply ignored. In addition, because of how the templating mechanism for easyconfig parameter works, changes to easyconfig parameters with non-string values (i.e. lists, dictionaries, etc.) will go up in smoke if not done correctly. More specifically, the following approach will *not* work in any of the (step) hooks, except for ``parse_hook`` : .. code :: python def pre_fetch_hook ( self ): \"Example of pre-fetch hook to manipulate list of patches.\" # this does NOT have the intended affect in any pre- or post-step hook self . cfg [ 'patches' ] . append ( 'example.patch' ) The problem here is that the value obtained via ``self.cfg['patches']`` is not a reference to the actual easyconfig parameter value but a reference to a temporary copy thereof; hence any updates on the copy are effectively lost immediately. To achieve the intended effect, you can either: * temporarily disable the templating mechanism: .. code :: python def pre_fetch_hook(self): \"Example of pre-fetch hook to manipulate list of patches.\" # temporarily disable templating, so changes to 'patches' easyconfig parameter are picked up with self.cfg.disable_templating: # add patch self.cfg['patches'].append('example.patch') # templating state restored * or replace the original value entirely: .. code :: python def pre_fetch_hook(self): \"Example of pre-fetch hook to manipulate list of patches.\" self.cfg['patches'] = self.cfg['patches'] + ['example.patch'] A better approach for manipulating easyconfig parameters is to use the ``parse_hook`` that was introduced in EasyBuild v3.7.0 (see :ref: `hooks_parse_hook` ), where these kind of surprises will not occur (because templating is automatically disabled before ``parse_hook`` is called and restored immediately afterwards). See also :ref: `hooks_examples_inject_patch` . .. _hooks_caveats_archived_easyconfig: Archived easyconfig file vs hooks +++++++++++++++++++++++++++++++++ EasyBuild archives the easyconfig file that was used for a particular installation: A copy is stored both in the ``easybuild`` subdirectory of the software installation directory and in the easyconfigs repository (see :ref: `easyconfigs_repo` ). If any changes were made to the easyconfig file via hooks, these changes will *not* be reflected in these copies. The assumption here is that the hooks will also be in place for future (re-)installations. EasyBuild does however store an additional copy of the easyconfig file which includes any modifications that were done dynamically, for example by hooks. If subtoolchains were used to resolve dependencies, they will also be hardwired in this copy. This \" *reproducible easyconfig* \" is stored in the ``easybuild/reprod`` subdirectory of the software installation directory. .. _hooks_examples: Examples of hook implementations -------------------------------- .. _hooks_examples_openmpi_configopts: Example hook to replace ``--with-verbs`` with ``--without-verbs`` in OpenMPI configure options ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ .. code :: python def pre_configure_hook ( self , * args , ** kwargs ): \"\"\"Example pre-configure hook to replace --with-verbs with --without -verbs for OpenMPI.\"\"\" if self . name == 'OpenMPI' and '--with-verbs' in self . cfg [ 'configopts' ]: self . log . info ( \"[pre-configure hook] Replacing --with-verbs with --without-verbs\" ) self . cfg [ 'configopts' ] = self . cfg [ 'configopts' ] . replace ( '--with-verbs' , '--without-verbs' ) .. _hooks_examples_inject_patch: Example hook to inject a custom patch file ++++++++++++++++++++++++++++++++++++++++++ .. code :: python def parse_hook ( ec , * args , ** kwargs ): \"\"\"Example parse hook to inject a patch file for a fictive software package named 'Example'.\"\"\" if ec . name == 'Example' : patch_file = 'example.patch' ec . log . info ( \"[parse hook] Injecting additional patch file ' %s '\" , patch_file ) ec [ 'patches' ] . append ( patch_file ) Example hook to replace PYTHONPATH by EBPYTHONPREFIXES in (Lua) modules +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ .. code :: python def module_write_hook ( self , filepath , module_txt , * args , ** kwargs ): # note: if `self.mod_filepath == filepath` => final module file if 'Python' in ( dep [ 'name' ] for dep in self . cfg . dependencies ()): search = r 'prepend_path\\(\"PYTHONPATH\", pathJoin\\(root, \"lib/python\\d.\\d/site-packages\"\\)\\)' replace = 'prepend_path(\"EBPYTHONPREFIXES\", root)' return re . sub ( search , replace , module_txt )","title":"Hooks"},{"location":"hooks/#hooks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Hooks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Hooks.rst in easybuilders/easybuild repo target: docs/hooks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _hooks: Hooks ===== Since v3.5.0, EasyBuild supports *hooks* that can be used to customise the behaviour of EasyBuild according to site policies if needed, without having to change the EasyBuild framework or the existing easyblocks. .. contents :: :depth: 3 :backlinks: none .. _hooks_what: What are hooks? --------------- *Hooks* are user-defined functions that are called by the EasyBuild framework at specific times during the installation procedure. They can be leveraged to alter or augment the installation procedure. This is usually done to conform with site-specific policies that are difficult to enforce otherwise, but it can also be (ab)used to fix specific problems or inject self-implemented enhancements (before you flesh them out in a proper contribution, for example). Both the ``EasyBlock`` instance and the parsed easyconfig file that are being used are fully accessible (and modifiable) from within hook implementations. Hence, this mechanism provides a lot of flexibility to change the EasyBuild functionality should you require it, without having to modify the codebase of EasyBuild itself. .. _hooks_configuration: Configuring EasyBuild to use your hook implementations ------------------------------------------------------ To instruct EasyBuild to use your hook implementations, you only need to specify the location of the Python module ( ``*.py`` ) that implements them. This is done via the ``--hooks`` configuration option (or equivalently via the ``$EASYBUILD_HOOKS`` environment variable, or via ``hooks = ...`` in an EasyBuild configuration file, see also :ref: `configuring_easybuild` ). For example :: eb --hooks=$HOME/my_eb_hooks.py ... or :: export EASYBUILD_HOOKS=$HOME/my_eb_hooks.py eb ... .. _hooks_available: Available hooks --------------- Currently (since EasyBuild v3.7.0), three types of hooks are supported: * ``start_hook`` and ``end_hook`` , which are triggered *once* before starting software installations, and *once* right after completing all installations, respectively * ``parse_hook`` , which is triggered when an easyconfig file is being parsed * ``module_write_hook`` , which is triggered right before a module file is written. This includes the temporary module file used when installing extensions and during the sanity check, as well as the devel module. * \" *step* \" hooks that are triggered before and after every step of each installation procedure that is performed, also aptly named ' ``pre`` '- and ' ``post`` '-hooks The list of currently available hooks in order of execution, which can also be consulted using ``eb --avail-hooks`` , is: * ``start_hook`` *(only called once in an EasyBuild session)* * ``parse_hook`` *(available since EasyBuild v3.7.0)* * ``pre_fetch_hook`` , ``post_fetch_hook`` * ``pre_ready_hook`` , ``post_ready_hook`` * ``pre_source_hook`` , ``post_source_hook`` * ``pre_patch_hook`` , ``post_patch_hook`` * ``pre_prepare_hook`` , ``post_prepare_hook`` * ``pre_configure_hook`` , ``post_configure_hook`` * ``pre_build_hook`` , ``post_build_hook`` * ``pre_test_hook`` , ``post_test_hook`` * ``pre_install_hook`` , ``post_install_hook`` * ``pre_extensions_hook`` , ``post_extensions_hook`` * ``pre_postproc_hook`` , ``post_postproc_hook`` * ``pre_sanitycheck_hook`` , ``post_sanitycheck_hook`` * ``pre_cleanup_hook`` , ``post_cleanup_hook`` * ``pre_module_hook`` , ``post_module_hook`` * ``pre_permissions_hook`` , ``post_permissions_hook`` * ``pre_package_hook`` , ``post_package_hook`` * ``pre_testcases_hook`` , ``post_testcases_hook`` * ``end_hook`` *(only called once in an EasyBuild session)* * ``module_write_hook`` *(called multiple times per installation, available since EasyBuild v4.4.1)* All functions implemented in the provided Python module for which the name ends with ``_hook`` are considered. If any ``*_hook`` functions are encountered that do not match any of the available hooks, an error is reported. EasyBuild will try to provide suggestions for available hooks that closely match the encountered unknown hook. For example :: $ eb --hooks wrong_hooks.py example.eb == temporary log file in case of crash /tmp/eb-nMawy1/easybuild-Gu2ZP6.log ERROR: Found one or more unknown hooks: * stat_hook (did you mean 'start_hook'?) * this_is_not_a_hook * install_hook (did you mean 'pre_install_hook', or 'post_install_hook'?) Run 'eb --avail-hooks' to get an overview of known hooks .. _hooks_implementation: Implementing hooks ------------------ To implement hooks, simply define one or more functions in a Python module ( ``*.py`` ), each named after an available hook. Do take into account the following: * for ``start_hook`` and ``end_hook`` , no arguments are provided * for ``parse_hook`` , one argument is provided: the ``EasyConfig`` instance that corresponds to the easyconfig file being parsed (usually referred to as ``ec`` ) * for ``module_write_hook`` , 3 arguments are provided: * the ``EasyBlock`` instance used to perform the installation (usually referred to as ``self`` ) * the filepath of the module that will be written * the module text as a string The return value of this hook, when set, will replace the original text that is then written to the module file. * for the step hooks, one argument is provided: the ``EasyBlock`` instance used to perform the installation (usually referred to as ``self`` ) * the parsed easyconfig file can be accessed in the step hooks via the ``EasyBlock`` instance, i.e., via ``self.cfg`` It is recommended to anticipate possible changes in the provided (named) arguments, using the ``*args`` and ``**kwargs`` mechanism commonly used in Python. This avoids that your hook implementations may break when updating to future EasyBuild versions. For example :: # example pre-configure hook that anticipates changes in provided arguments def pre_configure_hook(self, *args, **kwargs): ... In hooks you have access to the full functionality provided by the EasyBuild framework, so do ``import`` from ``easybuild.tools.*`` (or other ``easybuild.*`` namespaces) to leverage those functions. .. _hooks_parse_hook: Parse hook specifics ++++++++++++++++++++ ``parse_hook`` is triggered right *after* reading the easyconfig file, before further parsing of some easyconfig parameters (like ``*dependencies`` ) into custom data structures is done. This is important since it allows to dynamically modify easyconfig files while they are still \"raw\", i.e. when the easyconfig parameter values are still basic Python data structures like lists, dictionaries, etc. that are easy to manipulate (see also :ref: `hooks_caveats_manipulating` ). In ``parse_hook`` easyconfig parameters can be accessed and/or modified in a straightforward way, see :ref: `hooks_examples_inject_patch` . .. _hooks_caveats: Caveats ------- Due to internal details of the EasyBuild framework, you may run into some surprises when implementing hooks. Here are some things to take into account: .. _hooks_caveats_template_values: Resolving of template values ++++++++++++++++++++++++++++ In all *step* hooks, template values in easyconfig parameters will be resolved whenever they are accessed. That is, if the ``%(version)`` template is used in for example the ``sources`` easyconfig parameter, it will be replaced with the actual value of the ``version`` easyconfig parameter whenever the ``sources`` value is used. This can be avoided by temporarily disabling templating by wrapping the code in ``with self.cfg.disable_templating:`` . There is one notable exception to this: Templates in easyconfig parameters are *not* resolved in ``parse_hook`` , because templating has been disabled explicitly before ``parse_hook`` is called; this helps significantly to simplify manipulating of easyconfig parameter values (see also :ref: `hooks_caveats_manipulating` ). .. _hooks_caveats_manipulating: Manipulating easyconfig parameters ++++++++++++++++++++++++++++++++++ You may run into surprises when trying to manipulate easyconfig parameters, for various reasons. First of all, the original easyconfig parameters may already be processed in another data structure which does not resemble the original format in which the parameter was defined in the easyconfig file. Moreover, this processing could be done either \"in place\" by replacing the original easyconfig parameter value, or in a separate variable, which effectively means that any changes to the original easyconfig parameter value are simply ignored. In addition, because of how the templating mechanism for easyconfig parameter works, changes to easyconfig parameters with non-string values (i.e. lists, dictionaries, etc.) will go up in smoke if not done correctly. More specifically, the following approach will *not* work in any of the (step) hooks, except for ``parse_hook`` : .. code :: python def pre_fetch_hook ( self ): \"Example of pre-fetch hook to manipulate list of patches.\" # this does NOT have the intended affect in any pre- or post-step hook self . cfg [ 'patches' ] . append ( 'example.patch' ) The problem here is that the value obtained via ``self.cfg['patches']`` is not a reference to the actual easyconfig parameter value but a reference to a temporary copy thereof; hence any updates on the copy are effectively lost immediately. To achieve the intended effect, you can either: * temporarily disable the templating mechanism: .. code :: python def pre_fetch_hook(self): \"Example of pre-fetch hook to manipulate list of patches.\" # temporarily disable templating, so changes to 'patches' easyconfig parameter are picked up with self.cfg.disable_templating: # add patch self.cfg['patches'].append('example.patch') # templating state restored * or replace the original value entirely: .. code :: python def pre_fetch_hook(self): \"Example of pre-fetch hook to manipulate list of patches.\" self.cfg['patches'] = self.cfg['patches'] + ['example.patch'] A better approach for manipulating easyconfig parameters is to use the ``parse_hook`` that was introduced in EasyBuild v3.7.0 (see :ref: `hooks_parse_hook` ), where these kind of surprises will not occur (because templating is automatically disabled before ``parse_hook`` is called and restored immediately afterwards). See also :ref: `hooks_examples_inject_patch` . .. _hooks_caveats_archived_easyconfig: Archived easyconfig file vs hooks +++++++++++++++++++++++++++++++++ EasyBuild archives the easyconfig file that was used for a particular installation: A copy is stored both in the ``easybuild`` subdirectory of the software installation directory and in the easyconfigs repository (see :ref: `easyconfigs_repo` ). If any changes were made to the easyconfig file via hooks, these changes will *not* be reflected in these copies. The assumption here is that the hooks will also be in place for future (re-)installations. EasyBuild does however store an additional copy of the easyconfig file which includes any modifications that were done dynamically, for example by hooks. If subtoolchains were used to resolve dependencies, they will also be hardwired in this copy. This \" *reproducible easyconfig* \" is stored in the ``easybuild/reprod`` subdirectory of the software installation directory. .. _hooks_examples: Examples of hook implementations -------------------------------- .. _hooks_examples_openmpi_configopts: Example hook to replace ``--with-verbs`` with ``--without-verbs`` in OpenMPI configure options ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ .. code :: python def pre_configure_hook ( self , * args , ** kwargs ): \"\"\"Example pre-configure hook to replace --with-verbs with --without -verbs for OpenMPI.\"\"\" if self . name == 'OpenMPI' and '--with-verbs' in self . cfg [ 'configopts' ]: self . log . info ( \"[pre-configure hook] Replacing --with-verbs with --without-verbs\" ) self . cfg [ 'configopts' ] = self . cfg [ 'configopts' ] . replace ( '--with-verbs' , '--without-verbs' ) .. _hooks_examples_inject_patch: Example hook to inject a custom patch file ++++++++++++++++++++++++++++++++++++++++++ .. code :: python def parse_hook ( ec , * args , ** kwargs ): \"\"\"Example parse hook to inject a patch file for a fictive software package named 'Example'.\"\"\" if ec . name == 'Example' : patch_file = 'example.patch' ec . log . info ( \"[parse hook] Injecting additional patch file ' %s '\" , patch_file ) ec [ 'patches' ] . append ( patch_file ) Example hook to replace PYTHONPATH by EBPYTHONPREFIXES in (Lua) modules +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ .. code :: python def module_write_hook ( self , filepath , module_txt , * args , ** kwargs ): # note: if `self.mod_filepath == filepath` => final module file if 'Python' in ( dep [ 'name' ] for dep in self . cfg . dependencies ()): search = r 'prepend_path\\(\"PYTHONPATH\", pathJoin\\(root, \"lib/python\\d.\\d/site-packages\"\\)\\)' replace = 'prepend_path(\"EBPYTHONPREFIXES\", root)' return re . sub ( search , replace , module_txt )","title":"Hooks"},{"location":"implementing-easyblocks/","text":"Implementing easyblocks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Implementing-easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Implementing-easyblocks.rst in easybuilders/easybuild repo target: docs/implementing-easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _implementing_easyblocks: Implementing easyblocks ======================= This documentation covers aspects of implementing *easyblocks* and how to use them. For a concise definition of easyblocks, see :ref: `easyblocks` . .. contents :: :depth: 3 :backlinks: none .. _implementing_easyblocks_basics: The basics ---------- An *easyblock* is a Python module that implements a software build and installation procedure. This concept is essentially implemented as a Python script that plugs into the :ref: `framework` . EasyBuild will leverage easyblocks as needed, depending on which software packages it needs to install. Which easyblock is required is determined by the ``easyblock`` easyconfig parameter, if it is present, or the software name (see :ref: `implementing_easyblocks_generic_vs_software_specific` ). .. _implementing_easyblocks_generic_vs_software_specific: Generic vs software-specific easyblocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Easyblocks can either be *generic* or *software-specific* . Generic easyblocks implement a 'standard' software build and installation procedure that is used by multiple different software packages. A commonly used example is the `ConfigureMake <https://github.com/easybuilders/easybuild-easyblocks/blob/main/easybuild/easyblocks/generic/configuremake.py> `_ generic easyblock, which implements the standard ``configure`` - ``make`` - ``make install`` installation procedure used by most GNU software packages. Software-specific easyblocks implement the build and installation procedure for a particular software package (see also :ref: `implementing_easyblocks_naming_scheme_module` ). Typically this involves highly customised substeps, for example specifying dedicated configuration options, creating or adjusting specific files, executing non-standard shell commands, etc. Usually a custom implementation of the sanity check is also included. Since EasyBuild v2.0, using a generic easyblock requires specifying the ``easyblock`` parameter in the easyconfig file. If it is not specified, EasyBuild will try and find the software-specific easyblock derived from the software name. The distinction between generic and software-specific easyblocks can be made based on the naming scheme that is used for an easyblock (see also :ref: `implementing_easyblocks_naming_scheme` ). See also :ref: `generic_easyblocks` . .. _implementing_easyblocks_vs_easyconfigs: Easyblocks vs easyconfigs ------------------------- Before you start implementing an easyblock, you should determine whether or not you really need an easyblock. :ref: `easyconfig_files` provide quite a bit of flexibility that alleviate the need for implementing many (software-specific) easyblocks. Examples include easyconfig parameters like ``(pre){config,build,installopts}`` (available for any easyblock), ``install_cmd`` (only for ``Binary`` generic easyblock or derivates), etc. See :ref: `writing_easyconfig_files` for an overview of what is supported in easyconfig files, and :ref: `generic_easyblocks` for custom easyconfig parameters for the existing generic easyblocks (see also ' ``eb -e <easyblock> -a`` '). On the other hand, somewhat complex or heavily customised software build and installation procedures may be handled better via a custom easyblock. Easyblocks are \"do once and forget\", and can provide a *central* solution for peculiarities of installations. Since they are basically Python scripts, they are very flexible and can take care of the 'heavy lifting' that goes beyond the key-value defining scope of easyconfig files. Hence, there is a fine line between using 'fat' easyconfigs with a generic easyblock and using a custom software-specific easyblock. Reasons to consider implementing a custom easyblock include: * 'critical' values for easyconfig parameters, which are required to make the installation succeed * compiler- or toolchain-specific aspects of the build and installation procedure (e.g., configure/build/install options) * interactive commands that need to be run * custom (configure) options for dependencies * having to create or adjust specific (configuration) files * 'hackish' usage of existing (generic) easyblocks and available easyconfig parameters One important aspect to consider of course is that implementing easyblocks requires some familiarity with Python, while easyconfig files can mostly be seen as a set of pure key-value definitions and hence are easier to create or update. .. _implementing_easyblocks_naming_scheme: Naming scheme for easyblocks ---------------------------- Easyblocks need to follow a strict naming scheme, to ensure that EasyBuild can pick them up as needed. This involves two aspects: i) the name of the Python class, and ii) the name and location of the Python module file. .. _implementing_easyblocks_naming_scheme_class_name_specific: Class name for software-specific easyblocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The name of the Python class is determined by the *software name* for software-specific easyblocks. It consists of a prefix ' ``EB_`` ', followed by the (original) software name. Because of limitations in Python on characters allowed in names of Python classes, only alphanumeric characters and ``_`` are allowed. Any other characters are replaced following an encoding scheme: * spaces are replaced by underscores ( ``_`` ) * dashes ``-`` are replaced by ``_minus_`` * underscores are replaced by ``_underscore_`` * etc. The ``encode_class_name`` function provided in ``easybuild.tools.filetools`` returns the expected class name for a given software name; for example: .. code :: >>> from easybuild.tools.filetools import encode_class_name >>> encode_class_name('netCDF-Fortran') 'EB_netCDF_minus_Fortran' .. _implementing_easyblocks_naming_scheme_class_name_generic: Class name for generic easyblocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For *generic* easyblocks, the class name does *not* include an ``EB_`` prefix (since there is no need for an escaping mechanism) and hence the name is fully free to choose, taking into account the restriction to alphanumeric characters and underscores. For code style reasons, the class name should start with a capital letter. Examples include ``Bundle`` , ``ConfigureMake`` , ``CMakePythonPackage`` . .. _implementing_easyblocks_naming_scheme_module: Module name/location ~~~~~~~~~~~~~~~~~~~~ The *name* of the Python module file is directly related to the name of Python class (i.e., the actual easyblock) that it provides. It should: * *not* include the ``EB_`` prefix of the class name for software-specific easyblocks * consists only of lower-case alphanumeric characters ( ``[a-z0-9]`` ) and underscores ( ``_`` ) * dashes ( ``-`` ) are replaced by underscores ( ``_`` ) * any other non-alphanumeric characters (incl. spaces) are simply dropped Examples include: * ``gcc.py`` (for *GCC* ) * ``netcdf_fortran.py`` (for *netCDF-Fortran* ) * ``gamess_us.py`` (for *GAMESS (US)* ) The ``get_module_path`` function provided in ``easybuild.framework.easyconfig.easyconfig`` returns the (full) module location for a particular software name or easyblock class name; for example: .. code :: >>> from easybuild.framework.easyconfig.easyconfig import get_module_path >>> get_module_path('netCDF-Fortran') 'easybuild.easyblocks.netcdf_fortran' >>> get_module_path('EB_netCDF_minus_Fortran') 'easybuild.easyblocks.netcdf_fortran' The location of the Python module is determined by whether the easyblock is generic or software-specific. Generic easyblocks are located in the ``easybuid.easyblocks.generic`` namespace, while software-specific easyblocks live in the ``easybuild.easyblocks`` namespace directly. To keep things organised, the actual Python module file for software-specific easyblocks are kept in 'letter' subdirectories, rather than in one large ' ``easyblocks`` ' directory (see https://github.com/easybuilders/easybuild-easyblocks/blob/main/easybuild/easyblocks/). Note that you shouldn't concern yourself too much with getting the location of an easyblock right, as long as you use ``--include-easyblocks`` to make EasyBuild use additional or customised easyblocks (see :ref: `include_easyblocks` for more information). .. _implementing_easyblocks_structure: Structure of an easyblock ------------------------- The example below shows the overall structure of an easyblock: .. code :: python from easybuild.framework.easyblock import EasyBlock from easybuild.tools.run import run_cmd class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def configure_step ( self ): \"\"\"Custom implementation of configure step for Example\"\"\" # run configure.sh to configure the build run_cmd ( \"./configure.sh --install-prefix= %s \" % self . installdir ) Each easyblock includes an implementation of a ``class`` that (directly or indirectly) derives from the abstract ``EasyBlock`` class. Typically some useful functions provided by the EasyBuild framework are imported at the top of the Python module. In the class definition, one or more ' ``*_step`` ' methods are redefined, to implement the corresponding step in the build and installation procedure. Each easyblock *must* implement the ``configure`` , ``build`` and ``install`` steps, since these are not implemented in the abstract ``EasyBlock`` class. This could be done explicitly by redefining the corresponding ``*_step`` methods, or implicitly by deriving from existing (generic) easyblocks. .. _implementing_easyblocks_deriving: Deriving from existing (generic) easyblocks ------------------------------------------- When implementing an easyblock, it is common to derive from an existing (usually generic) easyblock, and to leverage the functionality provided by it. This approach is typically used when only a specific part of the build and installation procedure needs to be customised. In the (fictitious) example below, we derive from the generic ``ConfigureMake`` easyblock to redefine the ``configure`` step. In this case, we are *extending* the ``configure`` step as implemented by ``ConfigureMake`` rather than redefining it entirely, since we call out to the original ``configure_step`` method at the end. .. code :: python from easybuild.easyblocks.generic.configuremake import ConfigureMake from easybuild.tools.filetools import copy_file class EB_Example ( ConfigureMake ): \"\"\"Custom easyblock for Example\"\"\" def configure_step ( self ): \"\"\"Custom implementation of configure step for Example\"\"\" # use example make.cfg for x86-64 copy_file ( 'make.cfg.x86' , 'make.cfg' ) # call out to original configure_step implementation of ConfigureMake easyblock super ( EB_Example , self ) . configure_step () .. _implementing_easyblocks_specifics: Specific aspects of easyblocks ------------------------------ .. _implementing_easyblocks_default_parameters: Default easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ All of the parameters which are \"set\" in an easyconfig file (see :ref: `vsd_avail_easyconfig_params` ) become key-value pairs in the ``self.cfg`` dictionary. For instance, if the easyconfig file specifies .. code :: python name = 'example' version = '2.5.3' versionsuffix = '-Python-3.7.4' then these three parameters are accessible within an easyblock via .. code :: python longform = '' . join ( self . cfg [ 'name' ], '/' , self . cfg [ 'version' ], self . cfg [ 'versionsuffix' ]) You can use this notation successfully in your easyblock. A few of the most commonly used parameters can be referenced directly, * **self.name** = ``self.cfg['name']`` * **self.version** = ``self.cfg['version']`` * **self.toolchain** = ``self.cfg['toolchain']`` * **self.all_dependencies** : combines ``builddependencies`` , ``dependencies`` , and ``toolchain`` , in one dictionary So in your easyblock code, you may replace the above expression with .. code :: python longform = '' . join ( self . name , '/' , self . version , self . cfg [ 'versionsuffix' ]) The other easyconfig parameters, and any additional :ref:`custom parameters <implementing_easyblocks_custom_parameters> ` which you define for your own easyblock, will not be automatically mapped. You will need to use ``self.cfg`` to access them in your code. .. _implementing_easyblocks_custom_parameters: Custom easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ In an easyblock, additional custom easyconfig parameters can be defined to steer the behaviour of the easyblock. This is done via the ``extra_options`` static method. Custom parameters can be defined to be mandatory or optional. The example below shows how this can be implemented: .. code :: python from easybuild.easyblocks.generic.configuremake import ConfigureMake from easybuild.framework.easyconfig import CUSTOM , MANDATORY class EB_Example ( ConfigureMake ): \"\"\"Custom easyblock for Example\"\"\" @staticmethod def extra_options (): \"\"\"Custom easyconfig parameters for Example\"\"\" extra_vars = { 'required_example_param' : [ None , \"Help text for required example custom parameter\" , MANDATORY ], 'optional_example_param' : [ None , \"Help text for (optional) example custom parameter\" , CUSTOM ], } return ConfigureMake . extra_options ( extra_vars ) The first element in the list of a defined custom parameter corresponds to the default value for that parameter (both ``None`` in the example above). The second element provides some informative help text, and the last element indicates whether the parameter is mandatory ( ``MANDATORY`` ) or just a custom parameter ( ``CUSTOM`` ). .. _implementing_easyblocks_constructor: Easyblock constructor ~~~~~~~~~~~~~~~~~~~~~ In the ``class`` constructor of the easyblock, i.e. the ``__init__`` method, one or more class variables can be initialised. These can be used for sharing information between different ``*_step`` methods in the easyblock. For example: .. code :: python from easybuild.framework.easyblock import EasyBlock class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def __init__ ( self , * args , ** kwargs ): \"\"\"Constructor for Example easyblock, initialises class variables.\"\"\" # call out to original constructor first, so 'self' (i.e. the class instance) is initialised super ( EB_Example , self ) . __init__ ( * args , ** kwargs ) # initialise class variables self . var1 = None self . var2 = None .. _implementing_easyblocks_files: Reading/writing/copying/patching files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ File manipulation is a common use case for implementing easyblocks, hence the EasyBuild framework provides a number of useful functions related to this, including: * ``read_file(<path>)`` : read file at a specified location and returns its contents * ``write_file(<path>, <text>)`` at a specified location with provided contents; to append to an existing file, use ``append=True`` as an extra argument * ``copy_file(<src>, <dest>)`` to copy an existing file * ``apply_regex_substitutions(<path>, <list of regex substitutions>)`` to patch an existing file All of these functions are provided by the ``easybuild.tools.filetools`` module. .. _implementing_easyblocks_commands: Executing (interactive) shell commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For executing shell commands two functions are provided by the ``easybuild.tools.run`` module: * ``run_cmd(<cmd>)`` to run a non-interactive shell command * ``run_cmd_qa(<cmd>, <dict with questions & answers>)`` to run an interactive shell command Both of these accept a number of optional arguments: * ``simple=True`` to just return ``True`` or ``False`` to indicate a successful execution, rather than the default return value, i.e., a tuple that provides the command output and the exit code (in that order) * ``path=<path>`` to run the command in a specific subdirectory The ``run_cmd_qa`` function takes two additional specific arguments: * ``no_qa=<list>`` to specify a list of patterns to recognize non-questions * ``std_qa=<dict>`` to specify patterns for common questions and the matching answer .. _implementing_easyblocks_environment: Manipulating the environment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To (re)define environment variables, the ``setvar`` function provided by the ``easybuild.tools.environment`` module should be used. This makes sure that the changes being made to the specified environment variable are kept track of, and that they are handled correctly under ``--extended-dry-run`` . .. _implementing_easyblocks_logging: Log statements ~~~~~~~~~~~~~~ It is good practice to include meaningful log messages in the ``*_step`` methods being customised in the easyblock, to enrich the build log with useful information for later debugging or diagnostics. For logging, the provided ``self.log`` logger class should be used, i.e. the ``self.log.info`` or ``self.log.debug`` methods should be called. .. _implementing_easyblocks_sanity_check: Custom (default) sanity check ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For software-specific easyblocks, a custom sanity check is usually included to verify that the installation was successful or not. This is done by redefining the ``sanity_check_step`` method in the easyblock. For example: .. code :: python from easybuild.framework.easyblock import EasyBlock class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def sanity_check_step ( self ): \"\"\"Custom sanity check for Example.\"\"\" custom_paths = { 'files' : [ 'bin/example' ], 'dirs' : [], } custom_commands = [ 'example --version' ] # call out to parent to do the actual sanity checking, pass through custom paths and commands super ( EB_Example , self ) . sanity_check_step ( custom_paths = custom_paths , custom_commands = custom_commands ) You can both specify file path and subdirectories to check for, which are specified relative to the installation directory, as well as simple commands that should execute successfully after completing the installation and loading the generated module file. Note that it is up to you how extensive you make the sanity check, but it is recommended to make the check as complete as possible to catch any potential build or installation problems that may occur. .. _implementing_easyblocks_version_specific: Version-specific parts ~~~~~~~~~~~~~~~~~~~~~~ In some case, version-specific actions or checks need to be included in an easyblock. For this, it is recommended to use ``LooseVersion`` rather than directly comparing version numbers using string values. For example: .. code :: python from distutils.version import LooseVersion from easybuild.framework.easyblock import EasyBlock class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def sanity_check_step ( self ): \"\"\"Custom sanity check for Example.\"\"\" custom_paths = { 'files' : [], 'dirs' : [], } # in older version, the binary used to be named 'EXAMPLE' rather than 'example' if LooseVersion ( self . version ) < LooseVersion ( '1.0' ): custom_paths [ 'files' ] . append ( 'bin/EXAMPLE' ) else : custom_paths [ 'files' ] . append ( 'bin/example' ) super ( EB_Example , self ) . sanity_check_step ( custom_paths = custom_paths ) .. _implementing_easyblocks_module_only_compatibility: Compatibility with ``--extended-dry-run``/``-x`` and ``--module-only`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Some special care must be taken to ensure that an easyblock is fully compatible with ``--extended-dry-run`` / ``-x`` (see :ref: `extended_dry_run` ) and ``--module-only`` (see :ref: `module_only` ). For ``--extended-dry-run`` / ``-x`` , this is already well covered at :ref: `extended_dry_run_guidelines_easyblocks_detect_dry_run` . For ``--module-only`` , you should make sure that both the ``make_module_step`` , including the ``make_module_*`` submethods, and the ``sanity_check_step`` methods do not make any assumptions about the presence of certain environment variables or that class variables have been defined already. This needs to be handled with care since under ``--module-only`` the large majority of the ``*_step`` functions is simply skipped entirely. So, if the ``configure_step`` method is responsible for defining class variables that are picked up in ``sanity_check_step`` , the latter may run into unexpected initial values like ``None`` . A possible workaround is to define a separate custom method to define the class variables, and to call out to this method from ``configure_step`` and ``sanity_check_step`` (for the latter, conditionally, i.e., only if the class variables still have the initial values). .. _implementing_easyblocks_using: Using new/custom easyblocks --------------------------- The best way to make EasyBuild aware of new or customized easyblocks is via ``--include-easyblocks`` , see :ref: `include_easyblocks` for more information. To verify that your easyblocks are indeed picked up correctly, you can use ``--list-easyblocks=detailed`` , see also :ref: `list_easyblocks` . .. _implementing_easyblocks_testing: Testing easyblocks ------------------ Before testing your easyblock implementation by actually building and installing the software package(s) it was implemented for, it is recommended to: * study the output produced by ``--extended-dry-run`` / ``-x`` * evaluate the generated module file that is obtained by using ``--module-only --force`` For the output of ``--extended-dry-run`` / ``-x`` , there should be no ignored errors (cfr. :ref: `extended_dry_run_notes_ignored_errors` ), that is the end of the output produced should include this message: .. code :: (no ignored errors during dry run) With ``--module-only --force`` , the easyblock complete successfully without crashing, and should generate a module file that includes everything that is expected (except for statements that require that the actual installation was performend). .. _implementing_easyblocks_use_case_tensorlow: Use case: an easyblock for Tensorflow ------------------------------------- *(work in progress)*","title":"Implementing easyblocks"},{"location":"implementing-easyblocks/#implementing-easyblocks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Implementing-easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Implementing-easyblocks.rst in easybuilders/easybuild repo target: docs/implementing-easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _implementing_easyblocks: Implementing easyblocks ======================= This documentation covers aspects of implementing *easyblocks* and how to use them. For a concise definition of easyblocks, see :ref: `easyblocks` . .. contents :: :depth: 3 :backlinks: none .. _implementing_easyblocks_basics: The basics ---------- An *easyblock* is a Python module that implements a software build and installation procedure. This concept is essentially implemented as a Python script that plugs into the :ref: `framework` . EasyBuild will leverage easyblocks as needed, depending on which software packages it needs to install. Which easyblock is required is determined by the ``easyblock`` easyconfig parameter, if it is present, or the software name (see :ref: `implementing_easyblocks_generic_vs_software_specific` ). .. _implementing_easyblocks_generic_vs_software_specific: Generic vs software-specific easyblocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Easyblocks can either be *generic* or *software-specific* . Generic easyblocks implement a 'standard' software build and installation procedure that is used by multiple different software packages. A commonly used example is the `ConfigureMake <https://github.com/easybuilders/easybuild-easyblocks/blob/main/easybuild/easyblocks/generic/configuremake.py> `_ generic easyblock, which implements the standard ``configure`` - ``make`` - ``make install`` installation procedure used by most GNU software packages. Software-specific easyblocks implement the build and installation procedure for a particular software package (see also :ref: `implementing_easyblocks_naming_scheme_module` ). Typically this involves highly customised substeps, for example specifying dedicated configuration options, creating or adjusting specific files, executing non-standard shell commands, etc. Usually a custom implementation of the sanity check is also included. Since EasyBuild v2.0, using a generic easyblock requires specifying the ``easyblock`` parameter in the easyconfig file. If it is not specified, EasyBuild will try and find the software-specific easyblock derived from the software name. The distinction between generic and software-specific easyblocks can be made based on the naming scheme that is used for an easyblock (see also :ref: `implementing_easyblocks_naming_scheme` ). See also :ref: `generic_easyblocks` . .. _implementing_easyblocks_vs_easyconfigs: Easyblocks vs easyconfigs ------------------------- Before you start implementing an easyblock, you should determine whether or not you really need an easyblock. :ref: `easyconfig_files` provide quite a bit of flexibility that alleviate the need for implementing many (software-specific) easyblocks. Examples include easyconfig parameters like ``(pre){config,build,installopts}`` (available for any easyblock), ``install_cmd`` (only for ``Binary`` generic easyblock or derivates), etc. See :ref: `writing_easyconfig_files` for an overview of what is supported in easyconfig files, and :ref: `generic_easyblocks` for custom easyconfig parameters for the existing generic easyblocks (see also ' ``eb -e <easyblock> -a`` '). On the other hand, somewhat complex or heavily customised software build and installation procedures may be handled better via a custom easyblock. Easyblocks are \"do once and forget\", and can provide a *central* solution for peculiarities of installations. Since they are basically Python scripts, they are very flexible and can take care of the 'heavy lifting' that goes beyond the key-value defining scope of easyconfig files. Hence, there is a fine line between using 'fat' easyconfigs with a generic easyblock and using a custom software-specific easyblock. Reasons to consider implementing a custom easyblock include: * 'critical' values for easyconfig parameters, which are required to make the installation succeed * compiler- or toolchain-specific aspects of the build and installation procedure (e.g., configure/build/install options) * interactive commands that need to be run * custom (configure) options for dependencies * having to create or adjust specific (configuration) files * 'hackish' usage of existing (generic) easyblocks and available easyconfig parameters One important aspect to consider of course is that implementing easyblocks requires some familiarity with Python, while easyconfig files can mostly be seen as a set of pure key-value definitions and hence are easier to create or update. .. _implementing_easyblocks_naming_scheme: Naming scheme for easyblocks ---------------------------- Easyblocks need to follow a strict naming scheme, to ensure that EasyBuild can pick them up as needed. This involves two aspects: i) the name of the Python class, and ii) the name and location of the Python module file. .. _implementing_easyblocks_naming_scheme_class_name_specific: Class name for software-specific easyblocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The name of the Python class is determined by the *software name* for software-specific easyblocks. It consists of a prefix ' ``EB_`` ', followed by the (original) software name. Because of limitations in Python on characters allowed in names of Python classes, only alphanumeric characters and ``_`` are allowed. Any other characters are replaced following an encoding scheme: * spaces are replaced by underscores ( ``_`` ) * dashes ``-`` are replaced by ``_minus_`` * underscores are replaced by ``_underscore_`` * etc. The ``encode_class_name`` function provided in ``easybuild.tools.filetools`` returns the expected class name for a given software name; for example: .. code :: >>> from easybuild.tools.filetools import encode_class_name >>> encode_class_name('netCDF-Fortran') 'EB_netCDF_minus_Fortran' .. _implementing_easyblocks_naming_scheme_class_name_generic: Class name for generic easyblocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For *generic* easyblocks, the class name does *not* include an ``EB_`` prefix (since there is no need for an escaping mechanism) and hence the name is fully free to choose, taking into account the restriction to alphanumeric characters and underscores. For code style reasons, the class name should start with a capital letter. Examples include ``Bundle`` , ``ConfigureMake`` , ``CMakePythonPackage`` . .. _implementing_easyblocks_naming_scheme_module: Module name/location ~~~~~~~~~~~~~~~~~~~~ The *name* of the Python module file is directly related to the name of Python class (i.e., the actual easyblock) that it provides. It should: * *not* include the ``EB_`` prefix of the class name for software-specific easyblocks * consists only of lower-case alphanumeric characters ( ``[a-z0-9]`` ) and underscores ( ``_`` ) * dashes ( ``-`` ) are replaced by underscores ( ``_`` ) * any other non-alphanumeric characters (incl. spaces) are simply dropped Examples include: * ``gcc.py`` (for *GCC* ) * ``netcdf_fortran.py`` (for *netCDF-Fortran* ) * ``gamess_us.py`` (for *GAMESS (US)* ) The ``get_module_path`` function provided in ``easybuild.framework.easyconfig.easyconfig`` returns the (full) module location for a particular software name or easyblock class name; for example: .. code :: >>> from easybuild.framework.easyconfig.easyconfig import get_module_path >>> get_module_path('netCDF-Fortran') 'easybuild.easyblocks.netcdf_fortran' >>> get_module_path('EB_netCDF_minus_Fortran') 'easybuild.easyblocks.netcdf_fortran' The location of the Python module is determined by whether the easyblock is generic or software-specific. Generic easyblocks are located in the ``easybuid.easyblocks.generic`` namespace, while software-specific easyblocks live in the ``easybuild.easyblocks`` namespace directly. To keep things organised, the actual Python module file for software-specific easyblocks are kept in 'letter' subdirectories, rather than in one large ' ``easyblocks`` ' directory (see https://github.com/easybuilders/easybuild-easyblocks/blob/main/easybuild/easyblocks/). Note that you shouldn't concern yourself too much with getting the location of an easyblock right, as long as you use ``--include-easyblocks`` to make EasyBuild use additional or customised easyblocks (see :ref: `include_easyblocks` for more information). .. _implementing_easyblocks_structure: Structure of an easyblock ------------------------- The example below shows the overall structure of an easyblock: .. code :: python from easybuild.framework.easyblock import EasyBlock from easybuild.tools.run import run_cmd class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def configure_step ( self ): \"\"\"Custom implementation of configure step for Example\"\"\" # run configure.sh to configure the build run_cmd ( \"./configure.sh --install-prefix= %s \" % self . installdir ) Each easyblock includes an implementation of a ``class`` that (directly or indirectly) derives from the abstract ``EasyBlock`` class. Typically some useful functions provided by the EasyBuild framework are imported at the top of the Python module. In the class definition, one or more ' ``*_step`` ' methods are redefined, to implement the corresponding step in the build and installation procedure. Each easyblock *must* implement the ``configure`` , ``build`` and ``install`` steps, since these are not implemented in the abstract ``EasyBlock`` class. This could be done explicitly by redefining the corresponding ``*_step`` methods, or implicitly by deriving from existing (generic) easyblocks. .. _implementing_easyblocks_deriving: Deriving from existing (generic) easyblocks ------------------------------------------- When implementing an easyblock, it is common to derive from an existing (usually generic) easyblock, and to leverage the functionality provided by it. This approach is typically used when only a specific part of the build and installation procedure needs to be customised. In the (fictitious) example below, we derive from the generic ``ConfigureMake`` easyblock to redefine the ``configure`` step. In this case, we are *extending* the ``configure`` step as implemented by ``ConfigureMake`` rather than redefining it entirely, since we call out to the original ``configure_step`` method at the end. .. code :: python from easybuild.easyblocks.generic.configuremake import ConfigureMake from easybuild.tools.filetools import copy_file class EB_Example ( ConfigureMake ): \"\"\"Custom easyblock for Example\"\"\" def configure_step ( self ): \"\"\"Custom implementation of configure step for Example\"\"\" # use example make.cfg for x86-64 copy_file ( 'make.cfg.x86' , 'make.cfg' ) # call out to original configure_step implementation of ConfigureMake easyblock super ( EB_Example , self ) . configure_step () .. _implementing_easyblocks_specifics: Specific aspects of easyblocks ------------------------------ .. _implementing_easyblocks_default_parameters: Default easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ All of the parameters which are \"set\" in an easyconfig file (see :ref: `vsd_avail_easyconfig_params` ) become key-value pairs in the ``self.cfg`` dictionary. For instance, if the easyconfig file specifies .. code :: python name = 'example' version = '2.5.3' versionsuffix = '-Python-3.7.4' then these three parameters are accessible within an easyblock via .. code :: python longform = '' . join ( self . cfg [ 'name' ], '/' , self . cfg [ 'version' ], self . cfg [ 'versionsuffix' ]) You can use this notation successfully in your easyblock. A few of the most commonly used parameters can be referenced directly, * **self.name** = ``self.cfg['name']`` * **self.version** = ``self.cfg['version']`` * **self.toolchain** = ``self.cfg['toolchain']`` * **self.all_dependencies** : combines ``builddependencies`` , ``dependencies`` , and ``toolchain`` , in one dictionary So in your easyblock code, you may replace the above expression with .. code :: python longform = '' . join ( self . name , '/' , self . version , self . cfg [ 'versionsuffix' ]) The other easyconfig parameters, and any additional :ref:`custom parameters <implementing_easyblocks_custom_parameters> ` which you define for your own easyblock, will not be automatically mapped. You will need to use ``self.cfg`` to access them in your code. .. _implementing_easyblocks_custom_parameters: Custom easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ In an easyblock, additional custom easyconfig parameters can be defined to steer the behaviour of the easyblock. This is done via the ``extra_options`` static method. Custom parameters can be defined to be mandatory or optional. The example below shows how this can be implemented: .. code :: python from easybuild.easyblocks.generic.configuremake import ConfigureMake from easybuild.framework.easyconfig import CUSTOM , MANDATORY class EB_Example ( ConfigureMake ): \"\"\"Custom easyblock for Example\"\"\" @staticmethod def extra_options (): \"\"\"Custom easyconfig parameters for Example\"\"\" extra_vars = { 'required_example_param' : [ None , \"Help text for required example custom parameter\" , MANDATORY ], 'optional_example_param' : [ None , \"Help text for (optional) example custom parameter\" , CUSTOM ], } return ConfigureMake . extra_options ( extra_vars ) The first element in the list of a defined custom parameter corresponds to the default value for that parameter (both ``None`` in the example above). The second element provides some informative help text, and the last element indicates whether the parameter is mandatory ( ``MANDATORY`` ) or just a custom parameter ( ``CUSTOM`` ). .. _implementing_easyblocks_constructor: Easyblock constructor ~~~~~~~~~~~~~~~~~~~~~ In the ``class`` constructor of the easyblock, i.e. the ``__init__`` method, one or more class variables can be initialised. These can be used for sharing information between different ``*_step`` methods in the easyblock. For example: .. code :: python from easybuild.framework.easyblock import EasyBlock class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def __init__ ( self , * args , ** kwargs ): \"\"\"Constructor for Example easyblock, initialises class variables.\"\"\" # call out to original constructor first, so 'self' (i.e. the class instance) is initialised super ( EB_Example , self ) . __init__ ( * args , ** kwargs ) # initialise class variables self . var1 = None self . var2 = None .. _implementing_easyblocks_files: Reading/writing/copying/patching files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ File manipulation is a common use case for implementing easyblocks, hence the EasyBuild framework provides a number of useful functions related to this, including: * ``read_file(<path>)`` : read file at a specified location and returns its contents * ``write_file(<path>, <text>)`` at a specified location with provided contents; to append to an existing file, use ``append=True`` as an extra argument * ``copy_file(<src>, <dest>)`` to copy an existing file * ``apply_regex_substitutions(<path>, <list of regex substitutions>)`` to patch an existing file All of these functions are provided by the ``easybuild.tools.filetools`` module. .. _implementing_easyblocks_commands: Executing (interactive) shell commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For executing shell commands two functions are provided by the ``easybuild.tools.run`` module: * ``run_cmd(<cmd>)`` to run a non-interactive shell command * ``run_cmd_qa(<cmd>, <dict with questions & answers>)`` to run an interactive shell command Both of these accept a number of optional arguments: * ``simple=True`` to just return ``True`` or ``False`` to indicate a successful execution, rather than the default return value, i.e., a tuple that provides the command output and the exit code (in that order) * ``path=<path>`` to run the command in a specific subdirectory The ``run_cmd_qa`` function takes two additional specific arguments: * ``no_qa=<list>`` to specify a list of patterns to recognize non-questions * ``std_qa=<dict>`` to specify patterns for common questions and the matching answer .. _implementing_easyblocks_environment: Manipulating the environment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To (re)define environment variables, the ``setvar`` function provided by the ``easybuild.tools.environment`` module should be used. This makes sure that the changes being made to the specified environment variable are kept track of, and that they are handled correctly under ``--extended-dry-run`` . .. _implementing_easyblocks_logging: Log statements ~~~~~~~~~~~~~~ It is good practice to include meaningful log messages in the ``*_step`` methods being customised in the easyblock, to enrich the build log with useful information for later debugging or diagnostics. For logging, the provided ``self.log`` logger class should be used, i.e. the ``self.log.info`` or ``self.log.debug`` methods should be called. .. _implementing_easyblocks_sanity_check: Custom (default) sanity check ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For software-specific easyblocks, a custom sanity check is usually included to verify that the installation was successful or not. This is done by redefining the ``sanity_check_step`` method in the easyblock. For example: .. code :: python from easybuild.framework.easyblock import EasyBlock class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def sanity_check_step ( self ): \"\"\"Custom sanity check for Example.\"\"\" custom_paths = { 'files' : [ 'bin/example' ], 'dirs' : [], } custom_commands = [ 'example --version' ] # call out to parent to do the actual sanity checking, pass through custom paths and commands super ( EB_Example , self ) . sanity_check_step ( custom_paths = custom_paths , custom_commands = custom_commands ) You can both specify file path and subdirectories to check for, which are specified relative to the installation directory, as well as simple commands that should execute successfully after completing the installation and loading the generated module file. Note that it is up to you how extensive you make the sanity check, but it is recommended to make the check as complete as possible to catch any potential build or installation problems that may occur. .. _implementing_easyblocks_version_specific: Version-specific parts ~~~~~~~~~~~~~~~~~~~~~~ In some case, version-specific actions or checks need to be included in an easyblock. For this, it is recommended to use ``LooseVersion`` rather than directly comparing version numbers using string values. For example: .. code :: python from distutils.version import LooseVersion from easybuild.framework.easyblock import EasyBlock class EB_Example ( EasyBlock ): \"\"\"Custom easyblock for Example\"\"\" def sanity_check_step ( self ): \"\"\"Custom sanity check for Example.\"\"\" custom_paths = { 'files' : [], 'dirs' : [], } # in older version, the binary used to be named 'EXAMPLE' rather than 'example' if LooseVersion ( self . version ) < LooseVersion ( '1.0' ): custom_paths [ 'files' ] . append ( 'bin/EXAMPLE' ) else : custom_paths [ 'files' ] . append ( 'bin/example' ) super ( EB_Example , self ) . sanity_check_step ( custom_paths = custom_paths ) .. _implementing_easyblocks_module_only_compatibility: Compatibility with ``--extended-dry-run``/``-x`` and ``--module-only`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Some special care must be taken to ensure that an easyblock is fully compatible with ``--extended-dry-run`` / ``-x`` (see :ref: `extended_dry_run` ) and ``--module-only`` (see :ref: `module_only` ). For ``--extended-dry-run`` / ``-x`` , this is already well covered at :ref: `extended_dry_run_guidelines_easyblocks_detect_dry_run` . For ``--module-only`` , you should make sure that both the ``make_module_step`` , including the ``make_module_*`` submethods, and the ``sanity_check_step`` methods do not make any assumptions about the presence of certain environment variables or that class variables have been defined already. This needs to be handled with care since under ``--module-only`` the large majority of the ``*_step`` functions is simply skipped entirely. So, if the ``configure_step`` method is responsible for defining class variables that are picked up in ``sanity_check_step`` , the latter may run into unexpected initial values like ``None`` . A possible workaround is to define a separate custom method to define the class variables, and to call out to this method from ``configure_step`` and ``sanity_check_step`` (for the latter, conditionally, i.e., only if the class variables still have the initial values). .. _implementing_easyblocks_using: Using new/custom easyblocks --------------------------- The best way to make EasyBuild aware of new or customized easyblocks is via ``--include-easyblocks`` , see :ref: `include_easyblocks` for more information. To verify that your easyblocks are indeed picked up correctly, you can use ``--list-easyblocks=detailed`` , see also :ref: `list_easyblocks` . .. _implementing_easyblocks_testing: Testing easyblocks ------------------ Before testing your easyblock implementation by actually building and installing the software package(s) it was implemented for, it is recommended to: * study the output produced by ``--extended-dry-run`` / ``-x`` * evaluate the generated module file that is obtained by using ``--module-only --force`` For the output of ``--extended-dry-run`` / ``-x`` , there should be no ignored errors (cfr. :ref: `extended_dry_run_notes_ignored_errors` ), that is the end of the output produced should include this message: .. code :: (no ignored errors during dry run) With ``--module-only --force`` , the easyblock complete successfully without crashing, and should generate a module file that includes everything that is expected (except for statements that require that the actual installation was performend). .. _implementing_easyblocks_use_case_tensorlow: Use case: an easyblock for Tensorflow ------------------------------------- *(work in progress)*","title":"Implementing easyblocks"},{"location":"including-additional-python-modules/","text":"Including additional Python modules \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Including_additional_Python_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Including_additional_Python_modules.rst in easybuilders/easybuild repo target: docs/including-additional-python-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _including_additional_python_modules: Including additional Python modules (``--include-*``) ===================================================== EasyBuild's capabilities can be extended easily, by including additional Python modules that implement support for building and installing software that is not supported (yet), define additional module naming schemes, or introduce additional toolchains, (optionally) with support for additional compilers, MPI libraries, linear algebra libraries, etc. Since EasyBuild v2.2.0, dedicated configuration options are available that make it straightforward to get EasyBuild to pick up additional Python modules, and get them registered in the appropriate ``easybuild`` subnamespace. * :ref: `include_easyblocks` * :ref: `include_mns` * :ref: `include_toolchains` .. _include_general_remarks: General aspects of ``--include-*`` options ------------------------------------------ Configuration types ~~~~~~~~~~~~~~~~~~~ The ``--include-*`` options can be specified via the ``eb`` command line, using an environment variable ( ``$EASYBUILD_INCLUDE_*`` ) or by defining the corresponding ``include-*`` parameters in an EasyBuild configuration file, just like all other configuration options (see also :ref: `configuration_consistency` ). Format ~~~~~~ The ``--include-*`` options accept a comma-separated list of paths to Python modules. These paths can be absolute or relative paths, or so-called *glob patterns* , i.e., paths containing wildcard characters like ``*`` or ``?`` . The latter can be used to include several Python modules at once. For example, to include all Python modules located in the directory ``$HOME/myeb`` , a path pattern like ``$HOME/myeb/*.py`` can be specified to the appropriate ``--include-*`` option. .. note :: Shell expansion can get in the way of specifying paths to ``eb`` that contains wildcards. To avoid problems simply wrap the path in single quotes, or escape the wildcard characters using a backslash. Keep in mind that using single quotes also prevents environment variables (e.g., ``$HOME`` ) from being expanded. Examples of correct path specifications containing wildcards: * in a configuration file (no escaping of wildcards required): ``include-easyblocks = /home/example/myeb/*.py`` * using an environment variable: ``export EASYBUILD_INCLUDE_EASYBLOCKS=\"$HOME/myeb\\*.py\"`` * on the command line: ``eb --include-easyblocks='/home/example/myeb/*.py' ...`` . How it works ~~~~~~~~~~~~ For each of the ``--include-*`` options, EasyBuild will set up a temporary directory providing the corresponding Python package. In this directory, symlinks will be put in place to each of the included Python modules. The parent path is then injected in the Python search path to make the included Python modules available as required. Order of preference ~~~~~~~~~~~~~~~~~~~ Python modules that are included via ``--include-*`` get preference over other Python modules available in the Python search path (e.g., the one that are part of the EasyBuild installation you are using). This may be useful when testing modifications to particular components of EasyBuild, for example easyblocks. .. note :: It is recommended to only override existing components during testing. Future EasyBuild versions may include important updates like bug fixes, which may be missed if customised implementations of components were put in place. .. _include_easyblocks: Including additional easyblocks (``--include-easyblocks``) ---------------------------------------------------------- Adding support for building and installing additional software packages can be done by specifying the location of Python modules that implement easyblocks via ``--include-easyblocks`` . Generic easyblocks are expected to be located in a directory named ``generic`` . To verify that the easyblocks you included are indeed being picked up, ``--list-easyblocks=detailed`` can be used (see also :ref: `list_easyblocks` ). Since EasyBuild 4.2.0, easyblocks from a pull request on GitHub can also be included, using ``--include-easyblocks-from-pr`` (see :ref: `github_include_easyblocks_from_pr` ). Example ~~~~~~~ The example below shows how all self-implemented easyblocks (both software-specific and generic) located in the ``$HOME/myeasyblocks`` directory can be included: .. code :: $ export EASYBUILD_INCLUDE_EASYBLOCKS=$HOME/myeasyblocks/\\*.py,$HOME/myeasyblocks/generic/\\*.py $ eb --list-easyblocks=detailed ... |-- EB_mytest (easybuild.easyblocks.mytest @ /tmp/example/eb-Bk3zxb/included-easyblocks/easybuild/easyblocks/mytest.py) ... |-- foo (easybuild.easyblocks.generic.foo @ /tmp/example/eb-Bk3zxb/included-easyblocks/easybuild/easyblocks/generic/foo.py) ... .. _include_mns: Including additional module naming schemes (``--include-module-naming-schemes``) -------------------------------------------------------------------------------- To make EasyBuild aware of one or more custom module naming schemes, the path to the corresponding Python modules can be specified via ``--include-module-naming-schemes`` . To verify that EasyBuild is aware of the additional module naming schemes, the ``--avail-module-naming-schemes`` option can be used. Example ~~~~~~~ The example below shows how all custom module naming schemes located in the ``$HOME/myebmns`` can be included: .. code :: $ eb --include-module-naming-schemes=$HOME/myebmns/\\*.py --avail-module-naming-schemes List of supported module naming schemes: ... MyCustomMNS MyOtherCustomMNS ... .. _include_toolchains: Including additional toolchains (``--include-toolchains``) ---------------------------------------------------------- Plugging in Python modules that add support for additional toolchains, optionally including additional toolchain components (compilers, MPI libraries, BLAS/LAPACK/FFT libraries, ...) can be done via ``--include-toolchains`` . EasyBuild will determine whether the Python module is a *toolchain definition* or implements support for an *additional toolchain component* based on the name of the directory in which it is located. Implementations of toolchain components are expected to be located in a directory named according to the type of component ( ``compiler`` , ``mpi`` , ``linalg`` or ``fft`` ). To verify that EasyBuild is aware of the included toolchains, ``--list-toolchains`` can be used. Example ~~~~~~~ The example below shows how the support for additional toolchains and the required additional compiler/MPI toolchain components implemented by the Python modules located in the directory ``$HOME/myebtcs`` can be included: .. code :: $ export EASYBUILD_INCLUDE_TOOLCHAINS=$HOME/myebtcs/\\*.py,$HOME/myebtcs/compiler/\\*.py,$HOME/myebtcs/mpi/\\*.py $ eb --list-toolchains List of known toolchains (toolchainname: module[,module...]): ... mytoolchain: MyCompiler, MyMPI ...","title":"Including additional Python modules"},{"location":"including-additional-python-modules/#including-additional-python-modules","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Including_additional_Python_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Including_additional_Python_modules.rst in easybuilders/easybuild repo target: docs/including-additional-python-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _including_additional_python_modules: Including additional Python modules (``--include-*``) ===================================================== EasyBuild's capabilities can be extended easily, by including additional Python modules that implement support for building and installing software that is not supported (yet), define additional module naming schemes, or introduce additional toolchains, (optionally) with support for additional compilers, MPI libraries, linear algebra libraries, etc. Since EasyBuild v2.2.0, dedicated configuration options are available that make it straightforward to get EasyBuild to pick up additional Python modules, and get them registered in the appropriate ``easybuild`` subnamespace. * :ref: `include_easyblocks` * :ref: `include_mns` * :ref: `include_toolchains` .. _include_general_remarks: General aspects of ``--include-*`` options ------------------------------------------ Configuration types ~~~~~~~~~~~~~~~~~~~ The ``--include-*`` options can be specified via the ``eb`` command line, using an environment variable ( ``$EASYBUILD_INCLUDE_*`` ) or by defining the corresponding ``include-*`` parameters in an EasyBuild configuration file, just like all other configuration options (see also :ref: `configuration_consistency` ). Format ~~~~~~ The ``--include-*`` options accept a comma-separated list of paths to Python modules. These paths can be absolute or relative paths, or so-called *glob patterns* , i.e., paths containing wildcard characters like ``*`` or ``?`` . The latter can be used to include several Python modules at once. For example, to include all Python modules located in the directory ``$HOME/myeb`` , a path pattern like ``$HOME/myeb/*.py`` can be specified to the appropriate ``--include-*`` option. .. note :: Shell expansion can get in the way of specifying paths to ``eb`` that contains wildcards. To avoid problems simply wrap the path in single quotes, or escape the wildcard characters using a backslash. Keep in mind that using single quotes also prevents environment variables (e.g., ``$HOME`` ) from being expanded. Examples of correct path specifications containing wildcards: * in a configuration file (no escaping of wildcards required): ``include-easyblocks = /home/example/myeb/*.py`` * using an environment variable: ``export EASYBUILD_INCLUDE_EASYBLOCKS=\"$HOME/myeb\\*.py\"`` * on the command line: ``eb --include-easyblocks='/home/example/myeb/*.py' ...`` . How it works ~~~~~~~~~~~~ For each of the ``--include-*`` options, EasyBuild will set up a temporary directory providing the corresponding Python package. In this directory, symlinks will be put in place to each of the included Python modules. The parent path is then injected in the Python search path to make the included Python modules available as required. Order of preference ~~~~~~~~~~~~~~~~~~~ Python modules that are included via ``--include-*`` get preference over other Python modules available in the Python search path (e.g., the one that are part of the EasyBuild installation you are using). This may be useful when testing modifications to particular components of EasyBuild, for example easyblocks. .. note :: It is recommended to only override existing components during testing. Future EasyBuild versions may include important updates like bug fixes, which may be missed if customised implementations of components were put in place. .. _include_easyblocks: Including additional easyblocks (``--include-easyblocks``) ---------------------------------------------------------- Adding support for building and installing additional software packages can be done by specifying the location of Python modules that implement easyblocks via ``--include-easyblocks`` . Generic easyblocks are expected to be located in a directory named ``generic`` . To verify that the easyblocks you included are indeed being picked up, ``--list-easyblocks=detailed`` can be used (see also :ref: `list_easyblocks` ). Since EasyBuild 4.2.0, easyblocks from a pull request on GitHub can also be included, using ``--include-easyblocks-from-pr`` (see :ref: `github_include_easyblocks_from_pr` ). Example ~~~~~~~ The example below shows how all self-implemented easyblocks (both software-specific and generic) located in the ``$HOME/myeasyblocks`` directory can be included: .. code :: $ export EASYBUILD_INCLUDE_EASYBLOCKS=$HOME/myeasyblocks/\\*.py,$HOME/myeasyblocks/generic/\\*.py $ eb --list-easyblocks=detailed ... |-- EB_mytest (easybuild.easyblocks.mytest @ /tmp/example/eb-Bk3zxb/included-easyblocks/easybuild/easyblocks/mytest.py) ... |-- foo (easybuild.easyblocks.generic.foo @ /tmp/example/eb-Bk3zxb/included-easyblocks/easybuild/easyblocks/generic/foo.py) ... .. _include_mns: Including additional module naming schemes (``--include-module-naming-schemes``) -------------------------------------------------------------------------------- To make EasyBuild aware of one or more custom module naming schemes, the path to the corresponding Python modules can be specified via ``--include-module-naming-schemes`` . To verify that EasyBuild is aware of the additional module naming schemes, the ``--avail-module-naming-schemes`` option can be used. Example ~~~~~~~ The example below shows how all custom module naming schemes located in the ``$HOME/myebmns`` can be included: .. code :: $ eb --include-module-naming-schemes=$HOME/myebmns/\\*.py --avail-module-naming-schemes List of supported module naming schemes: ... MyCustomMNS MyOtherCustomMNS ... .. _include_toolchains: Including additional toolchains (``--include-toolchains``) ---------------------------------------------------------- Plugging in Python modules that add support for additional toolchains, optionally including additional toolchain components (compilers, MPI libraries, BLAS/LAPACK/FFT libraries, ...) can be done via ``--include-toolchains`` . EasyBuild will determine whether the Python module is a *toolchain definition* or implements support for an *additional toolchain component* based on the name of the directory in which it is located. Implementations of toolchain components are expected to be located in a directory named according to the type of component ( ``compiler`` , ``mpi`` , ``linalg`` or ``fft`` ). To verify that EasyBuild is aware of the included toolchains, ``--list-toolchains`` can be used. Example ~~~~~~~ The example below shows how the support for additional toolchains and the required additional compiler/MPI toolchain components implemented by the Python modules located in the directory ``$HOME/myebtcs`` can be included: .. code :: $ export EASYBUILD_INCLUDE_TOOLCHAINS=$HOME/myebtcs/\\*.py,$HOME/myebtcs/compiler/\\*.py,$HOME/myebtcs/mpi/\\*.py $ eb --list-toolchains List of known toolchains (toolchainname: module[,module...]): ... mytoolchain: MyCompiler, MyMPI ...","title":"Including additional Python modules"},{"location":"installation-alternative/","text":"Alternative installation methods \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Installation_Alternative.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installation_Alternative.rst in easybuilders/easybuild repo target: docs/installation-alternative.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. toctree :: :maxdepth: 1 .. _alt_inst_methods: Alternative installation methods ================================ We warmly recommend installing EasyBuild via the bootstrap procedure, see :ref: `bootstrapping` . This page describes the alternative installation methods: * `Standard installation of latest release`_ * `Installation from downloaded sources`_ * `Installation of latest release from GitHub`_ * `Installation of latest development version`_ Do take into account the list of (required) dependencies (see :ref: `dependencies` ). -------------- Standard installation of latest release ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Usually, you just want to install the latest (stable) version of each of the EasyBuild packages (framework, easyblocks, easyconfigs). Python provides a couple of ways to do that. Every version of the EasyBuild packages is released via PyPi. .. _alt_inst_easy_install_pip: Installing EasyBuild without admin rights ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ If you do not have EasyBuild installed yet, or if you just want to install the most recent version of each of the EasyBuild packages, you can use one of the following simple commands: - using ``easy_install`` (old tool, but still works):: easy_install --prefix $HOME/EasyBuild easybuild .. note :: If you already have `easybuild` installed, you may need to instruct ``easy_install`` to install a newer version, using ``--upgrade`` or ``-U`` . - using ``pip`` (more recent and better installation tool for Python software):: pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild The ``--prefix $HOME/EasyBuild`` part in these commands allows you to install EasyBuild without admin rights into ``$HOME/EasyBuild`` . .. note :: For pip v8.0 and newer, ``pip install --prefix=$HOME/EasyBuild easybuild`` works too. Adjusting ``$PATH`` and ``$PYTHONPATH`` environment variables ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ After installing EasyBuild with either ``easy_install`` or ``pip`` like this, you will need to update the ``$PATH`` and ``$PYTHONPATH`` environment variable to make sure the system can find the main EasyBuild command ``eb`` . On (most) Linux distributions, the command for doing this is: .. code :: bash export PATH = $HOME /EasyBuild/bin: $PATH export PYTHONPATH = $HOME /EasyBuild/lib/python2.7/site-packages: $PYTHONPATH .. tip :: To determine the path that should be added to the ``$PYTHONPATH`` environment variable for a given installation prefix, you can use the following command :: python -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(prefix='$HOME/EasyBuild/');\" Install with admin rights ^^^^^^^^^^^^^^^^^^^^^^^^^ If you do have admin rights on the system where you want to install EasyBuild, you can simply omit the ``--prefix $HOME/EasyBuild/`` to have EasyBuild installed system-wide. In that case, you do not need to touch the ``$PATH`` or ``$PYTHONPATH`` environment variables since the ``eb`` command will be installed in one of the default paths. Alternatives to --prefix ^^^^^^^^^^^^^^^^^^^^^^^^ As an alternative to ``--prefix`` when you do not have admin rights, you can specify that EasyBuild should be installed in your ``$HOME`` directory using the ``--user`` option. The full list of commands to install EasyBuild in your ``$HOME`` directory using ``pip`` would be :: pip install --user easybuild export PATH=$HOME/.local/bin:$PATH .. warning :: In our experience, using ``--user`` creates more problems than it solves. We have run into unexpected behavior with Python software installed in your home directory using ``--user`` , for example it **always** being preferred over versions installed somewhere else. Hence, we strongly discourage using ``--user`` to install EasyBuild (or other Python software). Installing the EasyBuild packages separately ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Each of the EasyBuild packages can also be installed separately :: pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild-framework pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild-easyblocks pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild-easyconfigs This is the exact same sequence of steps as they will be performed when running ``pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild`` . Installation from downloaded sources ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To install one of the EasyBuild packages from a downloaded source tarball, use the following steps :: tar xfvz easybuild-framework-1.0.tar.gz cd easybuild-framework-1.0 pip install --install-option \"--prefix=$HOME/EasyBuild\" . Do note that when an EasyBuild package is being installed without having the EasyBuild packages that it depends upon available, both ``easy_install`` and ``pip`` will try and pull in the latest available version of those packages from PyPi. Thus, to have full control over the EasyBuild installation, you need to respect the following installation order: easybuild-framework, easybuild-easyblocks, easybuild-easyconfigs. The easyblocks package depends on the framework package; the easyconfigs package depends on both the framework and easyblocks packages. If you do not have ``pip`` or ``easy_install`` available, you can also fall back to using the ``setup.py`` script directly :: python setup.py --prefix $HOME/EasyBuild install Installation of latest release from GitHub ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To install the latest (stable) release of an EasyBuild package directly from GitHub, use the following command :: pip install --install-option \"--prefix=$HOME/EasyBuild\" https://github.com/easybuilders/easybuild-framework/archive/main.tar.gz Again, the order in which the EasyBuild packages are installed is important to have full control over the installation process, see previous section. Installation of latest development version ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To install the latest development version of an EasyBuild package from GitHub, you can simply adjust the command from the previous section to install from the ``develop`` branch (or any of the available feature branches in any EasyBuild repository for that matter) :: pip install --install-option \"--prefix=$HOME/EasyBuild\" https://github.com/easybuilders/easybuild-framework/archive/develop.tar.gz .. note :: You should use this only if you are interested in developing for EasyBuild. Although it is well tested, the development version of the EasyBuild repositories may be unstable at a given point in time. .. _install_latest_develop_using_script: Installation of latest development version using provided script ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ After you have forked each of the EasyBuild repositories on GitHub (+ vsc-base), you can set up a development version of EasyBuild using the ``install-EasyBuild-develop.sh`` script. This script will clone the different EasyBuild repositories from GitHub: * `easybuild <https://github.com/easybuilders/easybuild> `_ : EasyBuild metapackage & documentation sources for http://easybuild.readthedocs.org * `vsc-base <https://github.com/hpcugent/vsc-base> `_ : dependency for EasyBuild framework (logging, command line interface, ...) * `easybuild-framework <https://github.com/easybuilders/easybuild-framework> `_ : EasyBuild framework * `easybuild-easyblocks <https://github.com/easybuilders/easybuild-easyblocks> `_ : collection of easyblocks * `easybuild-easyconfigs <https://github.com/easybuilders/easybuild-easyconfigs> `_ : collection of easyconfig files * `easybuild-wiki <https://github.com/easybuilders/easybuild-wiki> `_ : EasyBuild wiki pages It can be used as follows :: # pick an installation prefix (adjust as you like) INSTALL_PREFIX=$(mktemp -d $HOME/EasyBuild-XXXXXX) # download script curl -O https://raw.githubusercontent.com/easybuilders/easybuild-framework/main/easybuild/scripts/install-EasyBuild-develop.sh # run downloaded script, specifying *your* GitHub username and the installation prefix bash install-EasyBuild-develop.sh GITHUB_USERNAME $INSTALL_PREFIX # update $MODULEPATH via 'module use', and load the module module use $INSTALL_PREFIX/modules module load EasyBuild-develop eb --version ## This should ensure you have a reasonable instance of EasyBuild .. note :: The above creates a module file which you can load/inspect at will. The interesting aspect about it is that it is pointing to an EasyBuild installation directly on local git repositories, which allows you to customise it easily. Remember to commit/push or otherwise save your changes, if you intend to use them later.","title":"Alternative installation methods"},{"location":"installation-alternative/#alternative-installation-methods","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Installation_Alternative.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installation_Alternative.rst in easybuilders/easybuild repo target: docs/installation-alternative.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. toctree :: :maxdepth: 1 .. _alt_inst_methods: Alternative installation methods ================================ We warmly recommend installing EasyBuild via the bootstrap procedure, see :ref: `bootstrapping` . This page describes the alternative installation methods: * `Standard installation of latest release`_ * `Installation from downloaded sources`_ * `Installation of latest release from GitHub`_ * `Installation of latest development version`_ Do take into account the list of (required) dependencies (see :ref: `dependencies` ). -------------- Standard installation of latest release ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Usually, you just want to install the latest (stable) version of each of the EasyBuild packages (framework, easyblocks, easyconfigs). Python provides a couple of ways to do that. Every version of the EasyBuild packages is released via PyPi. .. _alt_inst_easy_install_pip: Installing EasyBuild without admin rights ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ If you do not have EasyBuild installed yet, or if you just want to install the most recent version of each of the EasyBuild packages, you can use one of the following simple commands: - using ``easy_install`` (old tool, but still works):: easy_install --prefix $HOME/EasyBuild easybuild .. note :: If you already have `easybuild` installed, you may need to instruct ``easy_install`` to install a newer version, using ``--upgrade`` or ``-U`` . - using ``pip`` (more recent and better installation tool for Python software):: pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild The ``--prefix $HOME/EasyBuild`` part in these commands allows you to install EasyBuild without admin rights into ``$HOME/EasyBuild`` . .. note :: For pip v8.0 and newer, ``pip install --prefix=$HOME/EasyBuild easybuild`` works too. Adjusting ``$PATH`` and ``$PYTHONPATH`` environment variables ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ After installing EasyBuild with either ``easy_install`` or ``pip`` like this, you will need to update the ``$PATH`` and ``$PYTHONPATH`` environment variable to make sure the system can find the main EasyBuild command ``eb`` . On (most) Linux distributions, the command for doing this is: .. code :: bash export PATH = $HOME /EasyBuild/bin: $PATH export PYTHONPATH = $HOME /EasyBuild/lib/python2.7/site-packages: $PYTHONPATH .. tip :: To determine the path that should be added to the ``$PYTHONPATH`` environment variable for a given installation prefix, you can use the following command :: python -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(prefix='$HOME/EasyBuild/');\" Install with admin rights ^^^^^^^^^^^^^^^^^^^^^^^^^ If you do have admin rights on the system where you want to install EasyBuild, you can simply omit the ``--prefix $HOME/EasyBuild/`` to have EasyBuild installed system-wide. In that case, you do not need to touch the ``$PATH`` or ``$PYTHONPATH`` environment variables since the ``eb`` command will be installed in one of the default paths. Alternatives to --prefix ^^^^^^^^^^^^^^^^^^^^^^^^ As an alternative to ``--prefix`` when you do not have admin rights, you can specify that EasyBuild should be installed in your ``$HOME`` directory using the ``--user`` option. The full list of commands to install EasyBuild in your ``$HOME`` directory using ``pip`` would be :: pip install --user easybuild export PATH=$HOME/.local/bin:$PATH .. warning :: In our experience, using ``--user`` creates more problems than it solves. We have run into unexpected behavior with Python software installed in your home directory using ``--user`` , for example it **always** being preferred over versions installed somewhere else. Hence, we strongly discourage using ``--user`` to install EasyBuild (or other Python software). Installing the EasyBuild packages separately ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Each of the EasyBuild packages can also be installed separately :: pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild-framework pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild-easyblocks pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild-easyconfigs This is the exact same sequence of steps as they will be performed when running ``pip install --install-option \"--prefix=$HOME/EasyBuild\" easybuild`` . Installation from downloaded sources ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To install one of the EasyBuild packages from a downloaded source tarball, use the following steps :: tar xfvz easybuild-framework-1.0.tar.gz cd easybuild-framework-1.0 pip install --install-option \"--prefix=$HOME/EasyBuild\" . Do note that when an EasyBuild package is being installed without having the EasyBuild packages that it depends upon available, both ``easy_install`` and ``pip`` will try and pull in the latest available version of those packages from PyPi. Thus, to have full control over the EasyBuild installation, you need to respect the following installation order: easybuild-framework, easybuild-easyblocks, easybuild-easyconfigs. The easyblocks package depends on the framework package; the easyconfigs package depends on both the framework and easyblocks packages. If you do not have ``pip`` or ``easy_install`` available, you can also fall back to using the ``setup.py`` script directly :: python setup.py --prefix $HOME/EasyBuild install Installation of latest release from GitHub ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To install the latest (stable) release of an EasyBuild package directly from GitHub, use the following command :: pip install --install-option \"--prefix=$HOME/EasyBuild\" https://github.com/easybuilders/easybuild-framework/archive/main.tar.gz Again, the order in which the EasyBuild packages are installed is important to have full control over the installation process, see previous section. Installation of latest development version ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To install the latest development version of an EasyBuild package from GitHub, you can simply adjust the command from the previous section to install from the ``develop`` branch (or any of the available feature branches in any EasyBuild repository for that matter) :: pip install --install-option \"--prefix=$HOME/EasyBuild\" https://github.com/easybuilders/easybuild-framework/archive/develop.tar.gz .. note :: You should use this only if you are interested in developing for EasyBuild. Although it is well tested, the development version of the EasyBuild repositories may be unstable at a given point in time. .. _install_latest_develop_using_script: Installation of latest development version using provided script ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ After you have forked each of the EasyBuild repositories on GitHub (+ vsc-base), you can set up a development version of EasyBuild using the ``install-EasyBuild-develop.sh`` script. This script will clone the different EasyBuild repositories from GitHub: * `easybuild <https://github.com/easybuilders/easybuild> `_ : EasyBuild metapackage & documentation sources for http://easybuild.readthedocs.org * `vsc-base <https://github.com/hpcugent/vsc-base> `_ : dependency for EasyBuild framework (logging, command line interface, ...) * `easybuild-framework <https://github.com/easybuilders/easybuild-framework> `_ : EasyBuild framework * `easybuild-easyblocks <https://github.com/easybuilders/easybuild-easyblocks> `_ : collection of easyblocks * `easybuild-easyconfigs <https://github.com/easybuilders/easybuild-easyconfigs> `_ : collection of easyconfig files * `easybuild-wiki <https://github.com/easybuilders/easybuild-wiki> `_ : EasyBuild wiki pages It can be used as follows :: # pick an installation prefix (adjust as you like) INSTALL_PREFIX=$(mktemp -d $HOME/EasyBuild-XXXXXX) # download script curl -O https://raw.githubusercontent.com/easybuilders/easybuild-framework/main/easybuild/scripts/install-EasyBuild-develop.sh # run downloaded script, specifying *your* GitHub username and the installation prefix bash install-EasyBuild-develop.sh GITHUB_USERNAME $INSTALL_PREFIX # update $MODULEPATH via 'module use', and load the module module use $INSTALL_PREFIX/modules module load EasyBuild-develop eb --version ## This should ensure you have a reasonable instance of EasyBuild .. note :: The above creates a module file which you can load/inspect at will. The interesting aspect about it is that it is pointing to an EasyBuild installation directly on local git repositories, which allows you to customise it easily. Remember to commit/push or otherwise save your changes, if you intend to use them later.","title":"Alternative installation methods"},{"location":"installation/","text":"Installing EasyBuild \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Installation.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Concepts_and_Terminology.rst in easybuilders/easybuild repo target: docs/installation.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installation: Installing EasyBuild ==================== EasyBuild is Python software, so there are a couple of ways to install it. We recommend installing EasyBuild using ``pip`` . This method is described at :ref: `pip` . It is also possible to install EasyBuild as a module. To do this, use the 3-step procedure outlined at :ref: `eb_as_module` . Do take into account the required and optional dependencies (see :ref: `requirements` and :ref: `dependencies` ). Notes on other ways of installing EasyBuild are available under section :ref: `alt_inst_methods` . .. contents :: :depth: 3 :backlinks: none -------------- .. _requirements: Requirements ------------ The only strict requirements are: * a **GNU/Linux distribution** as operating system * **Python** : * Python 2.7, or Python 3.x (>= 3.5). Since Python 2 is end-of-life (https://www.python.org/doc/sunset-python-2/) we recommend using Python 3 if it is available * **note** : only EasyBuild v4.0 (or newer) is compatible with Python 3, earlier EasyBuild releases require Python 2 * no Python packages other than the ones included in the Python standard library are strictly required * **note** : only EasyBuild versions prior to v4.0 require ``vsc-base`` (& ``vsc-install`` ), see also :ref: `required_python_packages_eb3` * for some specific features, additional Python packages are needed though, see :ref: `optional_python_packages` * a **modules tool** : Tcl(/C) environment modules or Lmod * the actual module command/script ( ``modulecmd`` , ``modulecmd.tcl`` or ``lmod`` ) *must* be available via ``$PATH`` * see :ref: `required_modules_tool` for more details For more information on (optional) dependencies, see :ref: `dependencies` . .. _pip: Using pip to Install EasyBuild ----------------------- Since EasyBuild is released as a Python package on PyPI (https://pypi.org/project/easybuild) you can install it using ``pip`` , the most commonly used tool for installing Python packages. Install EasyBuild with :: pip install easybuild You may need to tweak this command a bit, depending on your setup, see :ref: `more_pip` . .. note :: There are various other ways of installing Python packages, which we won't cover here. If you are familiar with other tools like ``virtualenv`` or ``pipenv`` , feel free to use those instead to install EasyBuild. Sanity check ~~~~~~~~~~~~ Compare the version of ``eb`` , the main EasyBuild command, with the version of the EasyBuild module that was installed. For example :: $ module load EasyBuild $ module list Currently Loaded Modules: 1) EasyBuild/4.4.0 $ eb --version This is EasyBuild 4.4.0 (framework: 4.4.0, easyblocks: 4.4.0) on host example.local .. tip :: The Tcl-based or Lmod implementations of environment modules do their default sorting differently. The former will normally sort in the lexicographic order, while Lmod follows an approach that is closer to Python's construct ``LooseVersion`` way of ordering. Such aspects may make a big difference, if you have installed both versions 1.9.0 and 1.15.2, with respect to what is the version being loaded by default. You can also run ``eb --show-system-info`` to see system information relevant to EasyBuild, or run ``eb --show-config`` to see the default EasyBuild configuration (see also :ref: `configuring_easybuild` ). .. _updating: Updating an existing EasyBuild installation ~~~~~~~~~~~~ To upgrade to a newer EasyBuild version than the one currently installed: * ``pip install --upgrade easybuild`` will upgrade EasyBuild to the latest release. .. _more_pip: Additional pip install options ~~~~~~~~~~~~ For the ``pip`` install, you may wish to slightly change this command depending on the context and your personal preferences: * to install EasyBuild *system-wide* , you can use ``sudo`` (if you have admin privileges): .. code :: sh sudo pip install easybuild * To install EasyBuild *in your personal home directory* , you can use the ``--user`` option: .. code :: sh pip install --user easybuild This will result in an EasyBuild installation in ``$HOME/.local/`` . * To install EasyBuild in a *specific directory* you can use the ``--prefix`` option: .. code :: sh pip install --prefix _PREFIX_ easybuild In this command, you should replace ' ``_PREFIX_`` ' with the location where you want to have EasyBuild installed (for example, ``$HOME/tools`` or ``/tmp/$USER`` ). Keep in mind that you may need to update your environment too when using ``--user`` or ``--prefix`` , see :ref: `more_pip_env` . .. _more_pip_pip3: ``pip`` vs ``pip3`` ~~~~~~~~~~~~ On systems where both Python 2 and Python 3 are installed you may also have different ``pip`` commands available. Or maybe ``pip`` is not available at all, and only \"versioned\" ``pip`` commands like ``pip3`` are available. If you (only) have ``pip3`` available, you can replace ``pip`` with ``pip3`` in any of the ``pip install`` commands above: .. code :: sh pip3 install easybuild If you want to ensure that you are using the ``pip`` installation that corresponds to the Python 3 installation that you intend to use, you can use ``python3 -m pip`` rather than ``pip3`` . .. code :: sh python3.6 -m pip install easybuild Note that you may also need to instruct the ``eb`` command to use the correct Python version at runtime, via ``$EB_PYTHON`` (see :ref: `more_pip_env_EB_PYTHON` ). .. _more_pip_env: Updating your environment ~~~~~~~~~~~~ If you used the ``--user`` or ``--prefix`` option in the ``pip install`` command, or if you installed EasyBuild with a ``pip`` version that does not correspond to your default Python installation, you will need to update your environment to make EasyBuild ready for use. This is not required if you did a system-wide installation in a standard location with the default Python version. .. note :: Keep in mind that you will have to make these environment changes again if you start a new shell session. To avoid this, you can update one of the shell startup scripts in your home directory ( ``.bashrc`` for example). .. _more_pip_env_PATH: Updating ``$PATH`` ~~~~~~~~~~~~ Update the ``$PATH`` environment variable to make sure the ``eb`` command is available :: export PATH=_PREFIX_/bin:$PATH **Replace** ``_PREFIX_`` **in this command** with the directory path where EasyBuild was installed into (use ``$HOME/.local`` if you used ``pip install --user`` ). This is not required if you installing EasyBuild in a standard system location. You can check with the ``which eb`` command to determine whether or not you need to update the ``$PATH`` environment variable. .. _more_pip_env_PYTHONPATH: Updating ``$PYTHONPATH`` ~~~~~~~~~~~~ If you installed EasyBuild to a non-standard location using ``pip install --prefix`` , you also need to update the Python search path environment variable ``$PYTHONPATH`` to instruct Python where it can find the EasyBuild Python packages. This is not required if you used the ``--user`` option, since Python will automatically consider ``$HOME/.local`` when searching for installed Python packages, or if you installed EasyBuild in a standard system-wide location. Update ``$PYTHONPATH`` by running a command like :: export PYTHONPATH=_PREFIX_/lib/pythonX.Y/site-packages:$PYTHONPATH Here, you need to replace the ``X`` and ``Y`` with the major and minor version of your Python installation, which you can determine by running ``python -V`` . For example, if you are using Python 3.6, make sure you are using ``/python3.6/`` in the command to update ``$PYTHONPATH`` . And of course, you again need to **replace '``_PREFIX_``'** with the installation prefix where EasyBuild was installed into. For example :: # update $PYTHONPATH if EasyBuild was installed in $HOME/tools with Python 3.6 export PYTHONPATH=$HOME/tools/lib/python3.6/site-packages:$PYTHONPATH .. _more_pip_env_EB_PYTHON: Setting ``$EB_PYTHON`` ~~~~~~~~~~~~ If you want to control which Python version is used to run EasyBuild, you can specify the name or the full path to the ``python`` command that should be used by the ``eb`` command via the ``$EB_PYTHON`` environment variable. This may be required when you installing EasyBuild with a version of ``pip`` that does not correspond with the default Python version. For example, to ensure that ``eb`` uses ``python3.6`` :: export EB_PYTHON=python3.6 .. _more_pip_env_EB_VERBOSE: Setting ``$EB_VERBOSE`` ~~~~~~~~~~~~ To determine which ``python`` commands are being considered by the ``eb`` command, you can define the ``$EB_VERBOSE`` environment variable. For example :: $ EB_VERBOSE=1 eb --version >> Considering 'python3.6'... >> 'python3' version: 3.6.8, which matches Python 3 version requirement (>= 3.5) >> Selected Python command: python3 (/usr/bin/python3.6) >> python3.6 -m easybuild.main --version This is EasyBuild 4.3.3 (framework: 4.3.3, easyblocks: 4.3.3) on host example .. _eb_as_module: Installing EasyBuild with EasyBuild ----------------------- If you prefer having EasyBuild available through an environment module file, you can consider installing EasyBuild with EasyBuild. This can be done in 3 steps: * Step 1: Installing EasyBuild with ``pip`` into a temporary location (only needed if EasyBuild is not installed yet) * Step 2: Using EasyBuild to install EasyBuild as a module * Step 3: Loading the EasyBuild module .. _eb_as_module_step1: Step 1: Installing EasyBuild into a temporary location ~~~~~~~~~~~~ If you don't have EasyBuild installed yet, you need to install it in a temporary location first. The recommended way of doing this is using :ref: `pip` . For example, to install EasyBuild into a subdirectory ``/tmp/$USER`` using the default Python 3 version :: # pick installation prefix, and install EasyBuild into it export EB_TMPDIR=/tmp/$USER/eb_tmp python3 -m pip install --ignore-installed --prefix $EB_TMPDIR easybuild # update environment to use this temporary EasyBuild installation export PATH=$EB_TMPDIR/bin:$PATH export PYTHONPATH=$(/bin/ls -rtd -1 $EB_TMPDIR/lib*/python*/site-packages | tail -1):$PYTHONPATH export EB_PYTHON=python3 .. _eb_as_module_step2: Step 2: Using EasyBuild to install EasyBuild ~~~~~~~~~~~~ Once you have a working (recent) temporary EasyBuild installation, you can use it to install EasyBuild as a module. Usually this is done in the location where you would like to install other software too. You can use the ``eb --install-latest-eb-release`` command for this, combined with the ``--prefix`` option to control which directories are used by EasyBuild for the installation. For example, to install the latest version of EasyBuild as a module into ``$HOME/easybuild`` :: eb --install-latest-eb-release --prefix $HOME/easybuild .. note :: You may see a harmless deprecation warning popping up when performing this installation, just ignore it. .. _eb_as_module_step3: Step 3: Loading the EasyBuild module ~~~~~~~~~~~~ Once :ref: `eb_as_module_step2` is completed, you should be able to load the module that was generated alongside the EasyBuild installation. You will need to do this every time you start a new shell session. First, make the module available by running the following command (which will update the module search path environment variable ``$MODULEPATH`` ) :: module use _PREFIX_/modules/all **Replace** ``_PREFIX_`` with the path to the directory that you used when running :ref: `eb_as_module_step2` (for example, ``$HOME/easybuild`` ). Then, load the EasyBuild module to update your environment and make EasyBuild available for use :: module load EasyBuild .. note :: Note that in this case, we don't need to make any changes to our environment for EasyBuild to work correctly. The environment module file that was generated by EasyBuild specifies all changes that need to be made. .. _dependencies: Dependencies ------------ EasyBuild has a couple of dependencies, some are optional. .. _required_dependencies: Required dependencies ~~~~~~~~~~~~~~~~~~~~~ * a **GNU/Linux** distribution as operating system * some common shell tools are expected to be available, see :ref: `required_shell_tools` * `Python <http://python.org> `_ : * Python 2.7, or Python 3.x (>= 3.5); * since Python 2 is end-of-life (https://www.python.org/doc/sunset-python-2/) we strongly recommend using Python 3 if it is available; * no third-party Python packages are strictly required (the Python standard library is sufficient); * for some *specific* EasyBuild features additional Python packages are required however, see :ref: `optional_python_packages` ; * a **modules tool** : Tcl(/C) environment modules or Lmod * the actual modules tool *must* be available via ``$PATH`` , see :ref: `required_modules_tool` * a C/C++ compiler (e.g., ``gcc`` and ``g++`` ) * only required to build and install GCC with, or as a dependency for the Intel compilers, for example .. _required_shell_tools: Required shell tools ^^^^^^^^^^^^^^^^^^^^ .. XXX - UPDATE BY VERSION, below A couple of shell tools may be required, depending on the particular use case (in relative order of importance): * shell builtin commands: * ``type`` , for inspecting the ``module`` function (if defined) * ``ulimit`` , for querying user limits * tools for unpacking (source) archives: * commonly required: ``tar`` , ``gunzip`` , ``bunzip2`` * occasionally required: ``unzip`` , ``unxz`` * ``patch`` , for applying patch files to unpacked sources (relatively common) * ``rpm`` or ``dpkg`` , for querying OS dependencies (only needed occasionally) * ``locate`` , only as a (poor mans) fallback to ``rpm`` / ``dpkg`` (rarely needed) * ``sysctl`` , for querying system characteristics (only required on non-Linux systems) .. _required_modules_tool: Required modules tool ^^^^^^^^^^^^^^^^^^^^^ EasyBuild not only generates module files to be used along with the software it installs, it also depends on the generated modules, mainly for resolving dependencies. Hence, a modules tool must be available to consume module files with. .. XXX - UPDATE BY VERSION, below Supported module tools: * `Tcl/C environment-modules <http://modules.sourceforge.net/> `_ (version >= 3.2.10) * `Tcl-only variant of environment modules <http://sourceforge.net/p/modules/modules-tcl> `_ * `Lmod <http://lmod.sourceforge.net> `_ (version >= 6.5.1), *highly recommended* .. note :: The path to the actual modules tool binary/script used *must* be included in ``$PATH`` , to make it readily available to EasyBuild. * for Tcl/C environment modules: ``modulecmd`` * for Tcl-only environment modules: ``modulecmd.tcl`` * for Lmod: ``lmod`` The path where the modules tool binary/script is located can be determined via the definition of the ``module`` function; for example, using ``type module`` or ``type -f module`` . .. note :: For Lmod specifically, EasyBuild will try to fall back to finding the ``lmod`` binary via the ``$LMOD_CMD`` environment variable, in case ``lmod`` is not available in ``$PATH`` . In EasyBuild versions *prior* to 2.1.1, the path specified by ``$LMOD_CMD`` was (erroneously) preferred over the (first) ``lmod`` binary available via ``$PATH`` . Additional notes: * Tcl(/C) environment-modules requires `Tcl <http://www.tcl.tk/> `_ to be installed (with header files and development libraries) * Lmod requires `Lua <http://www.lua.org/> `_ and a couple of non-standard Lua libraries ( ``lua-posix`` , ``lua-filesystem`` ) to be available * Tcl ( ``tclsh`` ) must also be available for Lmod to support module files in ``Tcl`` syntax * a guide to installing Tcl/C environment modules without having root permissions is available at :ref: `installing_env_mod_c` . * a guide to installing Lmod without having root permissions is available at :ref: `installing_lmod` . .. _required_python_packages: Required Python packages ^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v4.0, *no* Python packages outside of the Python standard library are required. .. _required_python_packages_eb3: Required Python packages for older EasyBuild versions +++++++++++++++++++++++++++++++++++++++++++++++++++++ For EasyBuild versions prior to version 4.0, a couple of additional Python packages are required: * ``setuptools`` : used to define the ``easybuild`` namespace across different directories * available at https://pypi.python.org/pypi/setuptools * must be version 0.6 or more recent * strictly required since EasyBuild v2.7.0 * ``vsc-install`` : provides setuptools functions and support for unit test suites for Python tools * also required to install ``vsc-base`` (see below) * available at https://pypi.python.org/pypi/vsc-install * the required version depends primarily on the ``vsc-base`` version * ``vsc-base`` : a Python library providing the ``fancylogger`` and ``generaloption`` Python modules * available at https://pypi.python.org/pypi/vsc-base and https://github.com/hpcugent/vsc-base * the required version of ``vsc-base`` depends on the EasyBuild version .. note :: ``vsc-base`` is installed automatically along with EasyBuild 3.x, if an installation procedure is used that consumes the ``setup.py`` script that comes with the EasyBuild framework (e.g., EasyBuild or the EasyBuild bootstrap script, ``pip`` , ``easy_install`` , ...) Other Python packages are optional dependencies, see :ref: `optional_python_packages` . Optional dependencies ~~~~~~~~~~~~~~~~~~~~~ Some dependencies are optional and are only required to support certain features. .. _optional_python_packages: Optional Python packages ^^^^^^^^^^^^^^^^^^^^^^^^ * `GC3Pie <https://pypi.org/project/gc3pie> `_ , only needed when using `GC3Pie` as a backend for ``--job`` , see also :ref: `submitting_jobs` ; * `GitPython <http://gitorious.org/git-python> `_ , only needed if EasyBuild is hosted in a git repository or if you\u2019re using a git repository for easyconfig files (.eb); * `graphviz for Python <https://pypi.python.org/pypi/graphviz> `_ , only needed for building nice-looking dependency graphs using ``--dep-graph *.pdf / *.png`` ; * `keyring <https://pypi.org/project/keyring> `_ , only needed for securely storing a GitHub token (see :ref: `integration_with_github` ); * `pycodestyle <https://pypi.org/project/pycodestyle> `_ , only required for ``--check-style`` and ``--check-contrib`` ; * `pysvn <http://pysvn.tigris.org/> `_ , only needed if you\u2019re using an SVN repository for easyconfig files; * `python-graph-dot <https://pypi.python.org/pypi/python-graph-dot/> `_ , only needed for building nice-looking dependency graphs using ``--dep-graph *.dot`` * `Rich <https://pypi.org/project/rich/> `_ , only needed to let ``eb`` produce rich output, like :ref: `progress_bars` ; Sources ------- EasyBuild is split up into three different packages, which are available from the Python Package Index (PyPi): * `easybuild-framework <http://pypi.python.org/pypi/easybuild-framework> `_ - the EasyBuild framework, which includes the easybuild.framework and easybuild.tools Python packages that provide general support for building and installing software * `easybuild-easyblocks <http://pypi.python.org/pypi/easybuild-easyblocks> `_ - a collection of easyblocks that implement support for building and installing (collections of) software packages * `easybuild-easyconfigs <http://pypi.python.org/pypi/easybuild-easyconfigs> `_ - a collection of example easyconfig files that specify which software to build, and using which build options; these easyconfigs will be well tested with the latest compatible versions of the easybuild-framework and easybuild-easyblocks packages Next to these packages, a meta-package named `easybuild <http://pypi.python.org/pypi/easybuild> `_ is also available on PyPi, in order to easily install the full EasyBuild distribution. The source code for these packages is also available on GitHub: * `easybuild-framework git repository <https://github.com/easybuilders/easybuild-framework> `_ * `easybuild-easyblocks git repository <https://github.com/easybuilders/easybuild-easyblocks> `_ * `easybuild-easyconfigs git repository <https://github.com/easybuilders/easybuild-easyconfigs> `_ * the `main EasyBuild repository <https://github.com/easybuilders/easybuild> `_ mainly hosts *this* EasyBuild documentation In case of installation issues... --------------------------------- Should the installation of EasyBuild fail for you, `please open an issue`_ to report the problems you're running into. How to collect info in case sanity checks fail or there is another issue ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ In order to get a better understanding in which kind of environment you are using the bootstrap script, please copy-paste the commands below and provide the output in your problem report. **Do not worry if some of these commands fail or spit out error messages.** .. code :: sh python -V type module type -f module module --version module av EasyBuild which -a eb eb --version","title":"Installation"},{"location":"installation/#installing-easybuild","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Installation.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Concepts_and_Terminology.rst in easybuilders/easybuild repo target: docs/installation.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installation: Installing EasyBuild ==================== EasyBuild is Python software, so there are a couple of ways to install it. We recommend installing EasyBuild using ``pip`` . This method is described at :ref: `pip` . It is also possible to install EasyBuild as a module. To do this, use the 3-step procedure outlined at :ref: `eb_as_module` . Do take into account the required and optional dependencies (see :ref: `requirements` and :ref: `dependencies` ). Notes on other ways of installing EasyBuild are available under section :ref: `alt_inst_methods` . .. contents :: :depth: 3 :backlinks: none -------------- .. _requirements: Requirements ------------ The only strict requirements are: * a **GNU/Linux distribution** as operating system * **Python** : * Python 2.7, or Python 3.x (>= 3.5). Since Python 2 is end-of-life (https://www.python.org/doc/sunset-python-2/) we recommend using Python 3 if it is available * **note** : only EasyBuild v4.0 (or newer) is compatible with Python 3, earlier EasyBuild releases require Python 2 * no Python packages other than the ones included in the Python standard library are strictly required * **note** : only EasyBuild versions prior to v4.0 require ``vsc-base`` (& ``vsc-install`` ), see also :ref: `required_python_packages_eb3` * for some specific features, additional Python packages are needed though, see :ref: `optional_python_packages` * a **modules tool** : Tcl(/C) environment modules or Lmod * the actual module command/script ( ``modulecmd`` , ``modulecmd.tcl`` or ``lmod`` ) *must* be available via ``$PATH`` * see :ref: `required_modules_tool` for more details For more information on (optional) dependencies, see :ref: `dependencies` . .. _pip: Using pip to Install EasyBuild ----------------------- Since EasyBuild is released as a Python package on PyPI (https://pypi.org/project/easybuild) you can install it using ``pip`` , the most commonly used tool for installing Python packages. Install EasyBuild with :: pip install easybuild You may need to tweak this command a bit, depending on your setup, see :ref: `more_pip` . .. note :: There are various other ways of installing Python packages, which we won't cover here. If you are familiar with other tools like ``virtualenv`` or ``pipenv`` , feel free to use those instead to install EasyBuild. Sanity check ~~~~~~~~~~~~ Compare the version of ``eb`` , the main EasyBuild command, with the version of the EasyBuild module that was installed. For example :: $ module load EasyBuild $ module list Currently Loaded Modules: 1) EasyBuild/4.4.0 $ eb --version This is EasyBuild 4.4.0 (framework: 4.4.0, easyblocks: 4.4.0) on host example.local .. tip :: The Tcl-based or Lmod implementations of environment modules do their default sorting differently. The former will normally sort in the lexicographic order, while Lmod follows an approach that is closer to Python's construct ``LooseVersion`` way of ordering. Such aspects may make a big difference, if you have installed both versions 1.9.0 and 1.15.2, with respect to what is the version being loaded by default. You can also run ``eb --show-system-info`` to see system information relevant to EasyBuild, or run ``eb --show-config`` to see the default EasyBuild configuration (see also :ref: `configuring_easybuild` ). .. _updating: Updating an existing EasyBuild installation ~~~~~~~~~~~~ To upgrade to a newer EasyBuild version than the one currently installed: * ``pip install --upgrade easybuild`` will upgrade EasyBuild to the latest release. .. _more_pip: Additional pip install options ~~~~~~~~~~~~ For the ``pip`` install, you may wish to slightly change this command depending on the context and your personal preferences: * to install EasyBuild *system-wide* , you can use ``sudo`` (if you have admin privileges): .. code :: sh sudo pip install easybuild * To install EasyBuild *in your personal home directory* , you can use the ``--user`` option: .. code :: sh pip install --user easybuild This will result in an EasyBuild installation in ``$HOME/.local/`` . * To install EasyBuild in a *specific directory* you can use the ``--prefix`` option: .. code :: sh pip install --prefix _PREFIX_ easybuild In this command, you should replace ' ``_PREFIX_`` ' with the location where you want to have EasyBuild installed (for example, ``$HOME/tools`` or ``/tmp/$USER`` ). Keep in mind that you may need to update your environment too when using ``--user`` or ``--prefix`` , see :ref: `more_pip_env` . .. _more_pip_pip3: ``pip`` vs ``pip3`` ~~~~~~~~~~~~ On systems where both Python 2 and Python 3 are installed you may also have different ``pip`` commands available. Or maybe ``pip`` is not available at all, and only \"versioned\" ``pip`` commands like ``pip3`` are available. If you (only) have ``pip3`` available, you can replace ``pip`` with ``pip3`` in any of the ``pip install`` commands above: .. code :: sh pip3 install easybuild If you want to ensure that you are using the ``pip`` installation that corresponds to the Python 3 installation that you intend to use, you can use ``python3 -m pip`` rather than ``pip3`` . .. code :: sh python3.6 -m pip install easybuild Note that you may also need to instruct the ``eb`` command to use the correct Python version at runtime, via ``$EB_PYTHON`` (see :ref: `more_pip_env_EB_PYTHON` ). .. _more_pip_env: Updating your environment ~~~~~~~~~~~~ If you used the ``--user`` or ``--prefix`` option in the ``pip install`` command, or if you installed EasyBuild with a ``pip`` version that does not correspond to your default Python installation, you will need to update your environment to make EasyBuild ready for use. This is not required if you did a system-wide installation in a standard location with the default Python version. .. note :: Keep in mind that you will have to make these environment changes again if you start a new shell session. To avoid this, you can update one of the shell startup scripts in your home directory ( ``.bashrc`` for example). .. _more_pip_env_PATH: Updating ``$PATH`` ~~~~~~~~~~~~ Update the ``$PATH`` environment variable to make sure the ``eb`` command is available :: export PATH=_PREFIX_/bin:$PATH **Replace** ``_PREFIX_`` **in this command** with the directory path where EasyBuild was installed into (use ``$HOME/.local`` if you used ``pip install --user`` ). This is not required if you installing EasyBuild in a standard system location. You can check with the ``which eb`` command to determine whether or not you need to update the ``$PATH`` environment variable. .. _more_pip_env_PYTHONPATH: Updating ``$PYTHONPATH`` ~~~~~~~~~~~~ If you installed EasyBuild to a non-standard location using ``pip install --prefix`` , you also need to update the Python search path environment variable ``$PYTHONPATH`` to instruct Python where it can find the EasyBuild Python packages. This is not required if you used the ``--user`` option, since Python will automatically consider ``$HOME/.local`` when searching for installed Python packages, or if you installed EasyBuild in a standard system-wide location. Update ``$PYTHONPATH`` by running a command like :: export PYTHONPATH=_PREFIX_/lib/pythonX.Y/site-packages:$PYTHONPATH Here, you need to replace the ``X`` and ``Y`` with the major and minor version of your Python installation, which you can determine by running ``python -V`` . For example, if you are using Python 3.6, make sure you are using ``/python3.6/`` in the command to update ``$PYTHONPATH`` . And of course, you again need to **replace '``_PREFIX_``'** with the installation prefix where EasyBuild was installed into. For example :: # update $PYTHONPATH if EasyBuild was installed in $HOME/tools with Python 3.6 export PYTHONPATH=$HOME/tools/lib/python3.6/site-packages:$PYTHONPATH .. _more_pip_env_EB_PYTHON: Setting ``$EB_PYTHON`` ~~~~~~~~~~~~ If you want to control which Python version is used to run EasyBuild, you can specify the name or the full path to the ``python`` command that should be used by the ``eb`` command via the ``$EB_PYTHON`` environment variable. This may be required when you installing EasyBuild with a version of ``pip`` that does not correspond with the default Python version. For example, to ensure that ``eb`` uses ``python3.6`` :: export EB_PYTHON=python3.6 .. _more_pip_env_EB_VERBOSE: Setting ``$EB_VERBOSE`` ~~~~~~~~~~~~ To determine which ``python`` commands are being considered by the ``eb`` command, you can define the ``$EB_VERBOSE`` environment variable. For example :: $ EB_VERBOSE=1 eb --version >> Considering 'python3.6'... >> 'python3' version: 3.6.8, which matches Python 3 version requirement (>= 3.5) >> Selected Python command: python3 (/usr/bin/python3.6) >> python3.6 -m easybuild.main --version This is EasyBuild 4.3.3 (framework: 4.3.3, easyblocks: 4.3.3) on host example .. _eb_as_module: Installing EasyBuild with EasyBuild ----------------------- If you prefer having EasyBuild available through an environment module file, you can consider installing EasyBuild with EasyBuild. This can be done in 3 steps: * Step 1: Installing EasyBuild with ``pip`` into a temporary location (only needed if EasyBuild is not installed yet) * Step 2: Using EasyBuild to install EasyBuild as a module * Step 3: Loading the EasyBuild module .. _eb_as_module_step1: Step 1: Installing EasyBuild into a temporary location ~~~~~~~~~~~~ If you don't have EasyBuild installed yet, you need to install it in a temporary location first. The recommended way of doing this is using :ref: `pip` . For example, to install EasyBuild into a subdirectory ``/tmp/$USER`` using the default Python 3 version :: # pick installation prefix, and install EasyBuild into it export EB_TMPDIR=/tmp/$USER/eb_tmp python3 -m pip install --ignore-installed --prefix $EB_TMPDIR easybuild # update environment to use this temporary EasyBuild installation export PATH=$EB_TMPDIR/bin:$PATH export PYTHONPATH=$(/bin/ls -rtd -1 $EB_TMPDIR/lib*/python*/site-packages | tail -1):$PYTHONPATH export EB_PYTHON=python3 .. _eb_as_module_step2: Step 2: Using EasyBuild to install EasyBuild ~~~~~~~~~~~~ Once you have a working (recent) temporary EasyBuild installation, you can use it to install EasyBuild as a module. Usually this is done in the location where you would like to install other software too. You can use the ``eb --install-latest-eb-release`` command for this, combined with the ``--prefix`` option to control which directories are used by EasyBuild for the installation. For example, to install the latest version of EasyBuild as a module into ``$HOME/easybuild`` :: eb --install-latest-eb-release --prefix $HOME/easybuild .. note :: You may see a harmless deprecation warning popping up when performing this installation, just ignore it. .. _eb_as_module_step3: Step 3: Loading the EasyBuild module ~~~~~~~~~~~~ Once :ref: `eb_as_module_step2` is completed, you should be able to load the module that was generated alongside the EasyBuild installation. You will need to do this every time you start a new shell session. First, make the module available by running the following command (which will update the module search path environment variable ``$MODULEPATH`` ) :: module use _PREFIX_/modules/all **Replace** ``_PREFIX_`` with the path to the directory that you used when running :ref: `eb_as_module_step2` (for example, ``$HOME/easybuild`` ). Then, load the EasyBuild module to update your environment and make EasyBuild available for use :: module load EasyBuild .. note :: Note that in this case, we don't need to make any changes to our environment for EasyBuild to work correctly. The environment module file that was generated by EasyBuild specifies all changes that need to be made. .. _dependencies: Dependencies ------------ EasyBuild has a couple of dependencies, some are optional. .. _required_dependencies: Required dependencies ~~~~~~~~~~~~~~~~~~~~~ * a **GNU/Linux** distribution as operating system * some common shell tools are expected to be available, see :ref: `required_shell_tools` * `Python <http://python.org> `_ : * Python 2.7, or Python 3.x (>= 3.5); * since Python 2 is end-of-life (https://www.python.org/doc/sunset-python-2/) we strongly recommend using Python 3 if it is available; * no third-party Python packages are strictly required (the Python standard library is sufficient); * for some *specific* EasyBuild features additional Python packages are required however, see :ref: `optional_python_packages` ; * a **modules tool** : Tcl(/C) environment modules or Lmod * the actual modules tool *must* be available via ``$PATH`` , see :ref: `required_modules_tool` * a C/C++ compiler (e.g., ``gcc`` and ``g++`` ) * only required to build and install GCC with, or as a dependency for the Intel compilers, for example .. _required_shell_tools: Required shell tools ^^^^^^^^^^^^^^^^^^^^ .. XXX - UPDATE BY VERSION, below A couple of shell tools may be required, depending on the particular use case (in relative order of importance): * shell builtin commands: * ``type`` , for inspecting the ``module`` function (if defined) * ``ulimit`` , for querying user limits * tools for unpacking (source) archives: * commonly required: ``tar`` , ``gunzip`` , ``bunzip2`` * occasionally required: ``unzip`` , ``unxz`` * ``patch`` , for applying patch files to unpacked sources (relatively common) * ``rpm`` or ``dpkg`` , for querying OS dependencies (only needed occasionally) * ``locate`` , only as a (poor mans) fallback to ``rpm`` / ``dpkg`` (rarely needed) * ``sysctl`` , for querying system characteristics (only required on non-Linux systems) .. _required_modules_tool: Required modules tool ^^^^^^^^^^^^^^^^^^^^^ EasyBuild not only generates module files to be used along with the software it installs, it also depends on the generated modules, mainly for resolving dependencies. Hence, a modules tool must be available to consume module files with. .. XXX - UPDATE BY VERSION, below Supported module tools: * `Tcl/C environment-modules <http://modules.sourceforge.net/> `_ (version >= 3.2.10) * `Tcl-only variant of environment modules <http://sourceforge.net/p/modules/modules-tcl> `_ * `Lmod <http://lmod.sourceforge.net> `_ (version >= 6.5.1), *highly recommended* .. note :: The path to the actual modules tool binary/script used *must* be included in ``$PATH`` , to make it readily available to EasyBuild. * for Tcl/C environment modules: ``modulecmd`` * for Tcl-only environment modules: ``modulecmd.tcl`` * for Lmod: ``lmod`` The path where the modules tool binary/script is located can be determined via the definition of the ``module`` function; for example, using ``type module`` or ``type -f module`` . .. note :: For Lmod specifically, EasyBuild will try to fall back to finding the ``lmod`` binary via the ``$LMOD_CMD`` environment variable, in case ``lmod`` is not available in ``$PATH`` . In EasyBuild versions *prior* to 2.1.1, the path specified by ``$LMOD_CMD`` was (erroneously) preferred over the (first) ``lmod`` binary available via ``$PATH`` . Additional notes: * Tcl(/C) environment-modules requires `Tcl <http://www.tcl.tk/> `_ to be installed (with header files and development libraries) * Lmod requires `Lua <http://www.lua.org/> `_ and a couple of non-standard Lua libraries ( ``lua-posix`` , ``lua-filesystem`` ) to be available * Tcl ( ``tclsh`` ) must also be available for Lmod to support module files in ``Tcl`` syntax * a guide to installing Tcl/C environment modules without having root permissions is available at :ref: `installing_env_mod_c` . * a guide to installing Lmod without having root permissions is available at :ref: `installing_lmod` . .. _required_python_packages: Required Python packages ^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v4.0, *no* Python packages outside of the Python standard library are required. .. _required_python_packages_eb3: Required Python packages for older EasyBuild versions +++++++++++++++++++++++++++++++++++++++++++++++++++++ For EasyBuild versions prior to version 4.0, a couple of additional Python packages are required: * ``setuptools`` : used to define the ``easybuild`` namespace across different directories * available at https://pypi.python.org/pypi/setuptools * must be version 0.6 or more recent * strictly required since EasyBuild v2.7.0 * ``vsc-install`` : provides setuptools functions and support for unit test suites for Python tools * also required to install ``vsc-base`` (see below) * available at https://pypi.python.org/pypi/vsc-install * the required version depends primarily on the ``vsc-base`` version * ``vsc-base`` : a Python library providing the ``fancylogger`` and ``generaloption`` Python modules * available at https://pypi.python.org/pypi/vsc-base and https://github.com/hpcugent/vsc-base * the required version of ``vsc-base`` depends on the EasyBuild version .. note :: ``vsc-base`` is installed automatically along with EasyBuild 3.x, if an installation procedure is used that consumes the ``setup.py`` script that comes with the EasyBuild framework (e.g., EasyBuild or the EasyBuild bootstrap script, ``pip`` , ``easy_install`` , ...) Other Python packages are optional dependencies, see :ref: `optional_python_packages` . Optional dependencies ~~~~~~~~~~~~~~~~~~~~~ Some dependencies are optional and are only required to support certain features. .. _optional_python_packages: Optional Python packages ^^^^^^^^^^^^^^^^^^^^^^^^ * `GC3Pie <https://pypi.org/project/gc3pie> `_ , only needed when using `GC3Pie` as a backend for ``--job`` , see also :ref: `submitting_jobs` ; * `GitPython <http://gitorious.org/git-python> `_ , only needed if EasyBuild is hosted in a git repository or if you\u2019re using a git repository for easyconfig files (.eb); * `graphviz for Python <https://pypi.python.org/pypi/graphviz> `_ , only needed for building nice-looking dependency graphs using ``--dep-graph *.pdf / *.png`` ; * `keyring <https://pypi.org/project/keyring> `_ , only needed for securely storing a GitHub token (see :ref: `integration_with_github` ); * `pycodestyle <https://pypi.org/project/pycodestyle> `_ , only required for ``--check-style`` and ``--check-contrib`` ; * `pysvn <http://pysvn.tigris.org/> `_ , only needed if you\u2019re using an SVN repository for easyconfig files; * `python-graph-dot <https://pypi.python.org/pypi/python-graph-dot/> `_ , only needed for building nice-looking dependency graphs using ``--dep-graph *.dot`` * `Rich <https://pypi.org/project/rich/> `_ , only needed to let ``eb`` produce rich output, like :ref: `progress_bars` ; Sources ------- EasyBuild is split up into three different packages, which are available from the Python Package Index (PyPi): * `easybuild-framework <http://pypi.python.org/pypi/easybuild-framework> `_ - the EasyBuild framework, which includes the easybuild.framework and easybuild.tools Python packages that provide general support for building and installing software * `easybuild-easyblocks <http://pypi.python.org/pypi/easybuild-easyblocks> `_ - a collection of easyblocks that implement support for building and installing (collections of) software packages * `easybuild-easyconfigs <http://pypi.python.org/pypi/easybuild-easyconfigs> `_ - a collection of example easyconfig files that specify which software to build, and using which build options; these easyconfigs will be well tested with the latest compatible versions of the easybuild-framework and easybuild-easyblocks packages Next to these packages, a meta-package named `easybuild <http://pypi.python.org/pypi/easybuild> `_ is also available on PyPi, in order to easily install the full EasyBuild distribution. The source code for these packages is also available on GitHub: * `easybuild-framework git repository <https://github.com/easybuilders/easybuild-framework> `_ * `easybuild-easyblocks git repository <https://github.com/easybuilders/easybuild-easyblocks> `_ * `easybuild-easyconfigs git repository <https://github.com/easybuilders/easybuild-easyconfigs> `_ * the `main EasyBuild repository <https://github.com/easybuilders/easybuild> `_ mainly hosts *this* EasyBuild documentation In case of installation issues... --------------------------------- Should the installation of EasyBuild fail for you, `please open an issue`_ to report the problems you're running into. How to collect info in case sanity checks fail or there is another issue ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ In order to get a better understanding in which kind of environment you are using the bootstrap script, please copy-paste the commands below and provide the output in your problem report. **Do not worry if some of these commands fail or spit out error messages.** .. code :: sh python -V type module type -f module module --version module av EasyBuild which -a eb eb --version","title":"Installing EasyBuild"},{"location":"installing-environment-modules-without-root-permissions/","text":"Installing environment modules without root permissions \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Installing-environment-modules-without-root-permissions.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installing-environment-modules-without-root-permissions.rst in easybuilders/easybuild repo target: docs/installing-environment-modules-without-root-permissions.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installing_env_mod_c: Installing environment modules without root permissions ======================================================= This short guide will explain how to install the standard environment modules Tcl/C software package without root permissions on a Linux or Mac OS X system, together with Tcl on which it depends. Tcl ~~~ #. Go to `<http://www.tcl.tk>`_ and download the latest Tcl sources. At the time of writing, the latest available Tcl version was 8.5.15, which can be downloaded from `here <http://prdownloads.sourceforge.net/tcl/tcl8.5.15-src.tar.gz> `_ . The remainder of these commands will assume Tcl v8.5.15 is being installed, you may need to adjust them accordingly. **Note** : Stick to Tcl v8.5.x, don\u2019t consider using the more recent v8.6.x or higher, since the environment modules package is not compatible with those Tcl versions. #. Unpack the Tcl source tarball: .. code :: bash tar xfvz tcl8.5.15-src.tar.gz #. Pick a location where you will install Tcl. It should be a directory you have write permissions on. My suggestion would be to use something like ``$HOME/.local/Tcl`` . #. Go to the ``unix`` subdirectory of the unpacked Tcl directory, and run the ``configure`` script using the ``--prefix`` option: .. code :: bash cd tcl8.5.15/unix ./configure --prefix = $HOME /.local/Tcl If you\u2019re building Tcl and environment modules on Mac, you should run ``configure`` in the ``tcl8.5.15/macosx`` directory instead. #. Next, build Tcl using the ``make`` command. If the system you are building on has multiple cores, running make in parallel will speed up the build. Just use the ``-j`` option, and pass it a degree of parallelism (just use the number of cores your system has available), e.g.: :: make -j 4 #. The final step consists of installing Tcl to the directory specified in step 4. To do this, simply run: .. code :: bash make install **All done!** Now you are ready to build the environment modules package, which requires Tcl. Environment Modules ~~~~~~~~~~~~~~~~~~~ #. Download the latest source tarball for the environment modules tools from http://modules.sourceforge.net/. At the time of writing, the latest available version is 3.2.10 which can be downloaded `from here <http://prdownloads.sourceforge.net/modules/modules-3.2.10.tar.gz> `_ . #. Unpack the downloaded source tarball: .. code :: bash tar xfvz modules-3.2.10.tar.gz #. Configure the build, again use ``--prefix`` to specify where to install the environment modules tool in the end. If you needed to install Tcl by hand as outlined in the previous section, you\u2019ll also need to specify where it was installed using the ``--with-tcl`` option: .. code :: bash cd modules-3.2.10 ./configure --prefix = $HOME /.local/environment-modules --with-tcl = $HOME /.local/Tcl/lib #. Build with ``make`` , consider parallel build if your system is recent enough: .. code :: bash make -j 4 #. Install: .. code :: bash make install Alright, now just one more thing... Set up your environment ~~~~~~~~~~~~~~~~~~~~~~~ Because you\u2019ve installed environment modules and Tcl in a non-default location, you need to make sure your environment is setup up correctly to use them. To make a long story short, these are the commands you need to execute: .. code :: bash export PATH = $HOME /.local/environment-modules/Modules/3.2.10/bin: $PATH export LD_LIBRARY_PATH = $HOME /.local/Tcl/lib: $LD_LIBRARY_PATH # adjust line below if you're using a shell other than bash, check with 'echo $SHELL' source $HOME /.local/environment-modules/Modules/3.2.10/init/bash .. tip :: Add these three lines in your ``.bashrc`` file, that way they\u2019ll be executed every time you log in.","title":"Installing environment modules without root permissions"},{"location":"installing-environment-modules-without-root-permissions/#installing-environment-modules-without-root-permissions","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Installing-environment-modules-without-root-permissions.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installing-environment-modules-without-root-permissions.rst in easybuilders/easybuild repo target: docs/installing-environment-modules-without-root-permissions.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installing_env_mod_c: Installing environment modules without root permissions ======================================================= This short guide will explain how to install the standard environment modules Tcl/C software package without root permissions on a Linux or Mac OS X system, together with Tcl on which it depends. Tcl ~~~ #. Go to `<http://www.tcl.tk>`_ and download the latest Tcl sources. At the time of writing, the latest available Tcl version was 8.5.15, which can be downloaded from `here <http://prdownloads.sourceforge.net/tcl/tcl8.5.15-src.tar.gz> `_ . The remainder of these commands will assume Tcl v8.5.15 is being installed, you may need to adjust them accordingly. **Note** : Stick to Tcl v8.5.x, don\u2019t consider using the more recent v8.6.x or higher, since the environment modules package is not compatible with those Tcl versions. #. Unpack the Tcl source tarball: .. code :: bash tar xfvz tcl8.5.15-src.tar.gz #. Pick a location where you will install Tcl. It should be a directory you have write permissions on. My suggestion would be to use something like ``$HOME/.local/Tcl`` . #. Go to the ``unix`` subdirectory of the unpacked Tcl directory, and run the ``configure`` script using the ``--prefix`` option: .. code :: bash cd tcl8.5.15/unix ./configure --prefix = $HOME /.local/Tcl If you\u2019re building Tcl and environment modules on Mac, you should run ``configure`` in the ``tcl8.5.15/macosx`` directory instead. #. Next, build Tcl using the ``make`` command. If the system you are building on has multiple cores, running make in parallel will speed up the build. Just use the ``-j`` option, and pass it a degree of parallelism (just use the number of cores your system has available), e.g.: :: make -j 4 #. The final step consists of installing Tcl to the directory specified in step 4. To do this, simply run: .. code :: bash make install **All done!** Now you are ready to build the environment modules package, which requires Tcl. Environment Modules ~~~~~~~~~~~~~~~~~~~ #. Download the latest source tarball for the environment modules tools from http://modules.sourceforge.net/. At the time of writing, the latest available version is 3.2.10 which can be downloaded `from here <http://prdownloads.sourceforge.net/modules/modules-3.2.10.tar.gz> `_ . #. Unpack the downloaded source tarball: .. code :: bash tar xfvz modules-3.2.10.tar.gz #. Configure the build, again use ``--prefix`` to specify where to install the environment modules tool in the end. If you needed to install Tcl by hand as outlined in the previous section, you\u2019ll also need to specify where it was installed using the ``--with-tcl`` option: .. code :: bash cd modules-3.2.10 ./configure --prefix = $HOME /.local/environment-modules --with-tcl = $HOME /.local/Tcl/lib #. Build with ``make`` , consider parallel build if your system is recent enough: .. code :: bash make -j 4 #. Install: .. code :: bash make install Alright, now just one more thing... Set up your environment ~~~~~~~~~~~~~~~~~~~~~~~ Because you\u2019ve installed environment modules and Tcl in a non-default location, you need to make sure your environment is setup up correctly to use them. To make a long story short, these are the commands you need to execute: .. code :: bash export PATH = $HOME /.local/environment-modules/Modules/3.2.10/bin: $PATH export LD_LIBRARY_PATH = $HOME /.local/Tcl/lib: $LD_LIBRARY_PATH # adjust line below if you're using a shell other than bash, check with 'echo $SHELL' source $HOME /.local/environment-modules/Modules/3.2.10/init/bash .. tip :: Add these three lines in your ``.bashrc`` file, that way they\u2019ll be executed every time you log in.","title":"Installing environment modules without root permissions"},{"location":"installing-extensions-in-parallel/","text":"Installing extensions in parallel (experimental!) \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Installing_extensions_in_parallel.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installing_extensions_in_parallel.rst in easybuilders/easybuild repo target: docs/installing-extensions-in-parallel.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installing_extensions_in_parallel: Installing extensions in parallel (experimental!) ================================================= Since EasyBuild v4.5.0 (initial) support is available for installing extensions in parallel, that is to run the installation command for multiple extensions that are ready to install at the same time in the background, to exploit the availability of multiple cores. **Note: this is an** :ref: `experimental feature <experimental_features>` . **Some of the mentioned functionality may be subject to change or be prone to errors.** .. contents :: :depth: 3 :backlinks: none .. _installing_extensions_in_parallel_configuration: Configuration ------------- To let EasyBuild install extensions in parallel, the ``parallel-extensions-install`` configuration option must be enabled. In addition, since the support for installing extensions in parallel is an experimental feature, the ``experimental`` configuration option must be also be enabled (see also :ref: `experimental_features` ). How many extension installations should be started (at maximum) at the same time is controlled by the ``parallel`` configuration option. .. _installing_extensions_in_parallel_requirements: Requirements ------------ For EasyBuild to be able to install a list of extensions in parallel, two requirements must be met: * The easyblock(s) that are used for installing the extensions must have support for determining which installed extensions are required to fulfill the dependencies for a particular extension. This is done via the ``required_deps`` property method. * EasyBuild must be able to start a single shell command (asynchronously, so it runs in the background) to perform the installation of the extension via the ``run_async`` method, and check whether the command has completed via the ``async_cmd_check`` method. For an example of how ``required_deps`` , ``run_async`` , and ``async_cmd_check`` can be implemented, see the `RPackage <https://github.com/easybuilders/easybuild-easyblocks/blob/main/easybuild/easyblocks/generic/rpackage.py> `_ easyblock. .. _installing_extensions_in_parallel_caveats_known_issues: Caveats and Known issues ------------------------ *(last update: EasyBuild v4.5.0)* There are a couple of caveats and known issues with installing extensions in parallel, which we hope to resolve in future EasyBuild releases. This is also why the support for installing extensions in parallel is currently marked as an experimental feature. .. _installing_extensions_in_parallel_caveats_known_issues_only_r: Only works for R extensions ~~~~~~~~~~~~~~~~~~~~~~~~~~~ The support for installing extensions in parallel currently only works for R extensions, since only the ``RPackage`` easyblock (which is used to install R packages as extensions) implements the necessary methods (see :ref: `installing_extensions_in_parallel_requirements` ). Supporting other types of extensions (Python, Perl, etc.) requires that the corresponding easyblocks that are used to install those extensions (like ``PythonPackage`` , ``PerlModule`` ) are enhanced to support determining required dependencies and starting the installation command asynchronously. .. _installing_extensions_in_parallel_caveats_known_issues_exts_list: List of extensions must be self-contained ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The EasyBuild framework currently enforces that all required dependencies for a particular extension are included in the list of extensions that is being installed (specified via the ``exts_list`` easyconfig parameter). Extensions provided by dependencies are not taken into account (yet). As a result, trying to install an `R-bundle-Bioconductor <https://github.com/easybuilders/easybuild-easyconfigs/tree/main/easybuild/easyconfigs/r/R-bundle-Bioconductor> `_ easyconfig with ``parallel-extensions-install`` enabled will result in an error reporting missing required dependencies. .. _installing_extensions_in_parallel_caveats_known_issues_skip: Skipping of installed extensions is still done sequentially ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Checking which extensions are already installed for which the installation can be skipped when ``--skip`` (see :ref: `partial_installation_skip` ) is being used is still done sequentially. Additional work is needed to also run these checks in parallel across the cores that are available to EasyBuild. .. _installing_extensions_in_parallel_caveats_known_issues_sanity_check: Sanity check for extensions is still run sequentially ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The sanity checks that are done for each extension are still done through a sequential loop over the list of extensions. Additional work is needed to also run these checks in parallel across the cores that are available to EasyBuild.","title":"Installing extensions in parallel *(experimental!)*"},{"location":"installing-extensions-in-parallel/#installing-extensions-in-parallel-experimental","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Installing_extensions_in_parallel.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installing_extensions_in_parallel.rst in easybuilders/easybuild repo target: docs/installing-extensions-in-parallel.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installing_extensions_in_parallel: Installing extensions in parallel (experimental!) ================================================= Since EasyBuild v4.5.0 (initial) support is available for installing extensions in parallel, that is to run the installation command for multiple extensions that are ready to install at the same time in the background, to exploit the availability of multiple cores. **Note: this is an** :ref: `experimental feature <experimental_features>` . **Some of the mentioned functionality may be subject to change or be prone to errors.** .. contents :: :depth: 3 :backlinks: none .. _installing_extensions_in_parallel_configuration: Configuration ------------- To let EasyBuild install extensions in parallel, the ``parallel-extensions-install`` configuration option must be enabled. In addition, since the support for installing extensions in parallel is an experimental feature, the ``experimental`` configuration option must be also be enabled (see also :ref: `experimental_features` ). How many extension installations should be started (at maximum) at the same time is controlled by the ``parallel`` configuration option. .. _installing_extensions_in_parallel_requirements: Requirements ------------ For EasyBuild to be able to install a list of extensions in parallel, two requirements must be met: * The easyblock(s) that are used for installing the extensions must have support for determining which installed extensions are required to fulfill the dependencies for a particular extension. This is done via the ``required_deps`` property method. * EasyBuild must be able to start a single shell command (asynchronously, so it runs in the background) to perform the installation of the extension via the ``run_async`` method, and check whether the command has completed via the ``async_cmd_check`` method. For an example of how ``required_deps`` , ``run_async`` , and ``async_cmd_check`` can be implemented, see the `RPackage <https://github.com/easybuilders/easybuild-easyblocks/blob/main/easybuild/easyblocks/generic/rpackage.py> `_ easyblock. .. _installing_extensions_in_parallel_caveats_known_issues: Caveats and Known issues ------------------------ *(last update: EasyBuild v4.5.0)* There are a couple of caveats and known issues with installing extensions in parallel, which we hope to resolve in future EasyBuild releases. This is also why the support for installing extensions in parallel is currently marked as an experimental feature. .. _installing_extensions_in_parallel_caveats_known_issues_only_r: Only works for R extensions ~~~~~~~~~~~~~~~~~~~~~~~~~~~ The support for installing extensions in parallel currently only works for R extensions, since only the ``RPackage`` easyblock (which is used to install R packages as extensions) implements the necessary methods (see :ref: `installing_extensions_in_parallel_requirements` ). Supporting other types of extensions (Python, Perl, etc.) requires that the corresponding easyblocks that are used to install those extensions (like ``PythonPackage`` , ``PerlModule`` ) are enhanced to support determining required dependencies and starting the installation command asynchronously. .. _installing_extensions_in_parallel_caveats_known_issues_exts_list: List of extensions must be self-contained ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The EasyBuild framework currently enforces that all required dependencies for a particular extension are included in the list of extensions that is being installed (specified via the ``exts_list`` easyconfig parameter). Extensions provided by dependencies are not taken into account (yet). As a result, trying to install an `R-bundle-Bioconductor <https://github.com/easybuilders/easybuild-easyconfigs/tree/main/easybuild/easyconfigs/r/R-bundle-Bioconductor> `_ easyconfig with ``parallel-extensions-install`` enabled will result in an error reporting missing required dependencies. .. _installing_extensions_in_parallel_caveats_known_issues_skip: Skipping of installed extensions is still done sequentially ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Checking which extensions are already installed for which the installation can be skipped when ``--skip`` (see :ref: `partial_installation_skip` ) is being used is still done sequentially. Additional work is needed to also run these checks in parallel across the cores that are available to EasyBuild. .. _installing_extensions_in_parallel_caveats_known_issues_sanity_check: Sanity check for extensions is still run sequentially ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The sanity checks that are done for each extension are still done through a sequential loop over the list of extensions. Additional work is needed to also run these checks in parallel across the cores that are available to EasyBuild.","title":"Installing extensions in parallel (experimental!)"},{"location":"installing-lmod-without-root-permissions/","text":"Installing Lmod without root permissions \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Installing-Lmod-without-root-permissions.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installing-Lmod-without-root-permissions.rst in easybuilders/easybuild repo target: docs/installing-lmod-without-root-permissions.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installing_lmod: Installing Lmod without root permissions ======================================== This short guide will show how to install Lmod (and Lua, on which it depends) on Linux, without requiring root permissions. Lua ~~~ Dependencies: Installing Lua using the steps below requires rsync, make and gcc Build and install Lua using the source tarball available in the Lmod SourceForge repository ( `http://sourceforge.net/projects/lmod/files/`_ ). This version is a lot easier to build, and already includes the required extra Lua modules. At the time of writing this relates to the ``lua-5.1.4.8.tar.gz`` tarball. **Step 1** : Download and unpack `lua-5.1.4.8.tar.gz`_ . **Step 2** : Configure the Lua build, provide a custom installation prefix (e.g. ``$HOME/lua`` ) and specify to statically link libraries (i.e. ``libreadline`` and ``ncurses`` ), to avoid problems when modules that provide these libraries are being loaded. Then build and install via ``make`` : .. code :: bash ./configure --with-static = yes --prefix = $HOME /lua && make && make install **Step 3** : Make sure the ``lua`` binary is available in your ``$PATH`` (only required when building Lmod, see below): .. code :: bash export PATH = $HOME /lua/bin: $PATH Optionally, check whether the ``lua`` binary indeed doesn\u2019t link to any unexpected ``readline`` or ``ncurses`` libraries: .. code :: bash $ ldd $HOME /lua/bin/lua linux-vdso.so.1 ( 0x00007fffad7ff000 ) libm.so.6 = > /lib64/libm.so.6 ( 0x00007ff9914db000 ) libdl.so.2 = > /lib64/libdl.so.2 ( 0x00007ff9912d7000 ) libc.so.6 = > /lib64/libc.so.6 ( 0x00007ff990f2a000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007ff9917d9000 ) Lmod ~~~~ Dependencies: building Lmod using the steps below requires tcl, tcl-dev(el), make and bzip2 **Step 1** : Download and unpack the latest available Lmod version, `Lmod-8.4.tar.bz2`_ at the time of writing. .. code :: bash tar xfvj Lmod-8.4.tar.bz2 && cd Lmod-8.4 **Step 2** : Configure, build and install Lmod build, in a custom prefix: .. code :: bash ./configure --prefix = $HOME && make install **Step 3** : Update ``$PATH`` so ``lmod`` is available (put this in your ``.bashrc`` ): .. code :: bash export PATH = $HOME /lmod/8.4/libexec: $PATH Optionally, give it a spin: .. code :: bash $ lmod --version Modules based on Lua: Version 8 .4 2020 -07-31 12 :25 -05:00 by Robert McLay mclay@tacc.utexas.edu **Step 4** : Define ``module`` function to use ``lmod`` (optional for use with EasyBuild): .. code :: bash source $HOME /lmod/8.4/init/bash export LMOD_CMD = $HOME /lmod/8.4/libexec/lmod .. _`http: //sourceforge.net/projects/lmod/files/`: http://sourceforge.net/projects/lmod/files/ .. _lua-5.1.4.8.tar.gz: https://sourceforge.net/projects/lmod/files/lua-5.1.4.8.tar.gz/download .. _Lmod-8.4.tar.bz2: https://sourceforge.net/projects/lmod/files/Lmod-8.4.tar.bz2/download","title":"Installing Lmod without root permissions"},{"location":"installing-lmod-without-root-permissions/#installing-lmod-without-root-permissions","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Installing-Lmod-without-root-permissions.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Installing-Lmod-without-root-permissions.rst in easybuilders/easybuild repo target: docs/installing-lmod-without-root-permissions.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _installing_lmod: Installing Lmod without root permissions ======================================== This short guide will show how to install Lmod (and Lua, on which it depends) on Linux, without requiring root permissions. Lua ~~~ Dependencies: Installing Lua using the steps below requires rsync, make and gcc Build and install Lua using the source tarball available in the Lmod SourceForge repository ( `http://sourceforge.net/projects/lmod/files/`_ ). This version is a lot easier to build, and already includes the required extra Lua modules. At the time of writing this relates to the ``lua-5.1.4.8.tar.gz`` tarball. **Step 1** : Download and unpack `lua-5.1.4.8.tar.gz`_ . **Step 2** : Configure the Lua build, provide a custom installation prefix (e.g. ``$HOME/lua`` ) and specify to statically link libraries (i.e. ``libreadline`` and ``ncurses`` ), to avoid problems when modules that provide these libraries are being loaded. Then build and install via ``make`` : .. code :: bash ./configure --with-static = yes --prefix = $HOME /lua && make && make install **Step 3** : Make sure the ``lua`` binary is available in your ``$PATH`` (only required when building Lmod, see below): .. code :: bash export PATH = $HOME /lua/bin: $PATH Optionally, check whether the ``lua`` binary indeed doesn\u2019t link to any unexpected ``readline`` or ``ncurses`` libraries: .. code :: bash $ ldd $HOME /lua/bin/lua linux-vdso.so.1 ( 0x00007fffad7ff000 ) libm.so.6 = > /lib64/libm.so.6 ( 0x00007ff9914db000 ) libdl.so.2 = > /lib64/libdl.so.2 ( 0x00007ff9912d7000 ) libc.so.6 = > /lib64/libc.so.6 ( 0x00007ff990f2a000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007ff9917d9000 ) Lmod ~~~~ Dependencies: building Lmod using the steps below requires tcl, tcl-dev(el), make and bzip2 **Step 1** : Download and unpack the latest available Lmod version, `Lmod-8.4.tar.bz2`_ at the time of writing. .. code :: bash tar xfvj Lmod-8.4.tar.bz2 && cd Lmod-8.4 **Step 2** : Configure, build and install Lmod build, in a custom prefix: .. code :: bash ./configure --prefix = $HOME && make install **Step 3** : Update ``$PATH`` so ``lmod`` is available (put this in your ``.bashrc`` ): .. code :: bash export PATH = $HOME /lmod/8.4/libexec: $PATH Optionally, give it a spin: .. code :: bash $ lmod --version Modules based on Lua: Version 8 .4 2020 -07-31 12 :25 -05:00 by Robert McLay mclay@tacc.utexas.edu **Step 4** : Define ``module`` function to use ``lmod`` (optional for use with EasyBuild): .. code :: bash source $HOME /lmod/8.4/init/bash export LMOD_CMD = $HOME /lmod/8.4/libexec/lmod .. _`http: //sourceforge.net/projects/lmod/files/`: http://sourceforge.net/projects/lmod/files/ .. _lua-5.1.4.8.tar.gz: https://sourceforge.net/projects/lmod/files/lua-5.1.4.8.tar.gz/download .. _Lmod-8.4.tar.bz2: https://sourceforge.net/projects/lmod/files/Lmod-8.4.tar.bz2/download","title":"Installing Lmod without root permissions"},{"location":"integration-with-github/","text":"Integration with GitHub \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Integration_with_GitHub.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Integration_with_GitHub.rst in easybuilders/easybuild repo target: docs/integration-with-github.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _integration_with_github: Integration with GitHub ======================= EasyBuild provides several features that integrate with GitHub, where the different EasyBuild repositories are located. From the EasyBuild command line ``eb`` several options are available to reach out to GitHub, which are documented below. .. contents :: :depth: 3 :backlinks: none .. _github_requirements: Requirements ------------ Depending on which GitHub integration features you want to use, there are a couple of requirements: * **a GitHub account** * see https://github.com; creating an account is free * **a GitHub user name** * only required for authenticated access to the GitHub API, which can help to avoid rate limitations * *not* strictly necessary for read-only operations * i.e. *not* required for :ref: `github_from_pr` and :ref: `github_review_pr` (but it can help) * see :ref: `github_user` * **a GitHub token** + ``keyring`` **Python package** * install via ``pip install keyring`` (for Python2: ``pip install 'keyring<19.0'`` ) * optionally install potentially unsafe keyrings: ``pip install keyrings.alt`` (but read and understand the `warning <https://pypi.org/project/keyrings.alt/> `_ ) * allows accessing the GitHub API with authentication * only strictly required for features that require GitHub 'write' permissions * i.e. for :ref: `github_upload_test_report` and :ref: `github_new_pr` * see :ref: `github_token` * ``git`` **command** / ``GitPython`` **Python package** * install via ``pip install GitPython`` (for Python2: ``pip install 'GitPython<3.0'`` ) * only required when local ``git`` commands need to be executed, e.g. to manipulate a Git repository * i.e. for :ref: `github_new_pr` and :ref: `github_update_pr` * **SSH public key registered on GitHub** * only required when ``push`` access to Git repositories that reside on GitHub is required * i.e. for :ref: `github_new_pr` and :ref: `github_update_pr` * see https://github.com/settings/ssh * **fork of the EasyBuild repositories on GitHub** * only required for submitting/updating pull requests ( :ref: `github_new_pr` and :ref: `github_update_pr` ) * see ``Fork`` button (top right) at https://github.com/easybuilders/easybuild-easyconfigs (for example) See also :ref: `github_requirements_check` . .. _github_configuration: Configuration ------------- The following sections discuss the EasyBuild configuration options relevant to the GitHub integration features. .. _github_user: Providing a GitHub username (``--github-user``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To specify your GitHub username, do one of the following: * use the ``--github-user`` configuration option on the ``eb`` command line * define the ``$EASYBUILD_GITHUB_USER`` environment variable * specify ``github-user`` in your EasyBuild configuration file (see also :ref: `configuring_easybuild` ) .. _github_token: Installing a GitHub token (``--install-github-token``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: *requires* : GitHub username + ``keyring`` Python package A GitHub token is a string of 40 characters that is tied to your GitHub account, allowing you to access the GitHub API authenticated. Using a GitHub token is beneficial with respect to rate limitations, and enables write permissions on GitHub (e.g. posting comments, creating gists, opening pull requests). To obtain a GitHub token: * visit https://github.com/settings/tokens/new and log in with your GitHub account * enter a token description, for example: \" ``EasyBuild`` \" * make sure (only) the ``gist`` and ``public_repo`` (in the ``repo`` section) scopes are fully enabled * click ``Generate token`` * *copy-paste* the generated token .. note :: You will only be able to copy-paste the generated token right after you have created it. The value corresponding to an existing token can *not* be retrieved later through the GitHub interface. **Please keep your token secret at all times** ; it allows fully authenticated access to your GitHub account! You can install the GitHub token in your keyring using EasyBuild, so it can pick it up when it needs to, using ``eb --install-github-token`` :: $ eb --github-user example --install-github-token Token: <copy-paste-your-40-character-token-here> Validating token... Token seems to be valid, installing it. Token 'e3a..0c2' installed! EasyBuild will validate the provided token, to check that authenticated access to your GitHub account works as expected. .. note :: EasyBuild will never print the full token value, to avoid leaking it. For debugging purposes, only the first and last 3 characters will be shown. .. _github_git_working_dirs_path: Specify location of working directories (``--git-working-dirs-path``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can specify the location of your Git working directories with one of the following: * use the ``--git-working-dirs-path`` configuration option on the ``eb`` command line * define the ``$EASYBUILD_GIT_WORKING_DIRS_PATH`` environment variable * specify the ``git-working-dirs-path`` option in your EasyBuild configuration file The provided path should be the *parent* directory of the location of the working directories (i.e. clones) of the EasyBuild repositories ( ``easybuild-easyconfigs`` , etc.); the assumption is that you keep them all in a single parent directory. Although not strictly required, this is useful for speeding up ``--new-pr`` and ``--update-pr`` , since it allows that the repository can be copied & updated, rather than being cloned from scratch. .. _github_requirements_check: Checking status of GitHub integration (``--check-github``) ---------------------------------------------------------- To check the status of your setup w.r.t. GitHub integration, the ``--check-github`` command line option can be used. Using this will trigger EasyBuild to perform a number of checks, and report back on what the test results mean for the different GitHub integration features. If all requirements are taken care of in your setup, you should see output like this :: $ eb --check-github == temporary log file in case of crash /tmp/eb-xWCpWl/easybuild-hGnKS5.log Checking status of GitHub integration... Making sure we're online... OK * GitHub user... example => OK * GitHub token... e3f..0c8 (len: 40) => OK (validated) * git command... OK (\"git version 2.7.4 (Apple Git-66); \") * GitPython module... OK * push access to example/easybuild-easyconfigs repo @ GitHub... OK * creating gists... OK * location to Git working dirs... OK (/home/example/git-working-dirs) All checks PASSed! Status of GitHub integration: * --from-pr: OK * --new-pr: OK * --review-pr: OK * --update-pr: OK * --upload-test-report: OK .. note :: Checking whether push access to GitHub works may take some time, since a recent clone of the easybuild-easyconfigs GitHub repository will be created in the process (at a temporary location). See also :ref: `github_requirements` . .. _github_from_pr: Using easyconfigs from pull requests (``--from-pr``) ---------------------------------------------------- *(supported since EasyBuild v1.13.0)* Via the ``--from-pr`` command line option (available since EasyBuild v1.13.0), easyconfig files that are added or modified by a particular pull request to the `easybuild-easyconfigs GitHub repository <https://github.com/easybuilders/easybuild-easyconfigs> `_ can be used (regardless of whether the pull request is merged or not). This can be useful to employ easyconfig files that are not available yet in the active EasyBuild installation, or to test new contributions by combining ``--from-pr`` with ``--upload-test-report`` (see :ref: `github_upload_test_report` ). When ``--from-pr`` is used, EasyBuild will download all modified files (easyconfig files and patches) to a temporary directory before processing them. For example, to use the GCC v4.9.2 easyconfigs contributed via `easyconfigs pull request #1177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1177> `_ :: $ eb --from-pr 1177 --dry-run == temporary log file in case of crash /tmp/eb-88quZc/easybuild-62fFdo.log Dry run: printing build status of easyconfigs and dependencies * [ ] /tmp/eb-88quZc/files_pr1177/GCC-4.9.2-CLooG-multilib.eb (module: GCC/4.9.2-CLooG-multilib) * [ ] /tmp/eb-88quZc/files_pr1177/GCC-4.9.2-CLooG.eb (module: GCC/4.9.2-CLooG) * [ ] /tmp/eb-88quZc/files_pr1177/GCC-4.9.2.eb (module: GCC/4.9.2) == temporary log file /tmp/eb-88quZc/easybuild-62fFdo.log has been removed. == temporary directory /tmp/eb-88quZc has been removed. .. note :: To avoid GitHub rate limiting, let EasyBuild know which GitHub account should be used to query the GitHub API, and provide a matching GitHub token; see also :ref: `github_token` . .. _github_from_pr_vs_develop: Relation between pull requests and current ``develop`` branch ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v2.9.0, the current ``develop`` branch of the central ``easybuild-easyconfigs`` GitHub repository is taken into account when applicable with ``--from-pr`` . Before, only the branch corresponding to the specified pull request itself was being considered, which potentially did not reflect the correct state of things, in particular for pull requests based on an outdated branch in which easyconfigs are changed that have been updated in ``develop`` as well. As such, the exact semantics of ``--from-pr`` depends on the state of the specified pull request, i.e. whether or not the pull request was merged already, whether the pull request is mergeable and stable (as indicated by GitHub Actions), etc. .. _github_from_pr_vs_develop_open_stable_prs: Open stable pull requests +++++++++++++++++++++++++ For *open* pull requests that are *stable* (i.e. tests pass and no merge conflicts), the pull request is effectively treated as a patch to the current ``develop`` branch. This is done to ensure that contributions that are picked up via ``--from-pr`` are correctly evaluated. First, the current ``develop`` branch of the central ``easybuild-easyconfigs`` GitHub repository is downloaded to a temporary directory. Afterwards, the patch corresponding to the specified pull request is applied on top of the ``develop`` branch. This results in a correct reflection of how the easyconfig files would look like if the pull request would be merged, which is particularly important for testing of contributions (see also :ref: `github_upload_test_report` ). Easyconfig files touched by the pull request that are explicitly specified are then picked up from this location; see also :ref: `github_from_pr_specifying_easyconfigs` . .. _github_from_pr_vs_develop_merged_prs: Merged pull requests ++++++++++++++++++++ For merged pull requests, the current ``develop`` branch is considered to be the correct state of the easyconfigs touched by the pull request. Note that this implies that the easyconfig files being picked up are potentially different from the ones that appear in the specified pull request itself, taking into account that further updates may have been applied in the ``develop`` branch since the pull request got merged. .. _github_from_pr_vs_develop_closed_unstable_prs: Closed or unstable pull requests ++++++++++++++++++++++++++++++++ For closed and unstable pull requests, only the branch corresponding to the pull request itself is being considered, which aligns with the semantics of ``--from-pr`` as it was before EasyBuild v2.9.0. In this case, the current ``develop`` branch is *not* taken into account. .. note :: A pull request is considered unstable when GitHub reports merge conflicts or when GitHub Actions reports one or more failing tests. .. _github_from_pr_robot_synergy: Synergy with ``--robot`` ~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v1.15.0, the temporary directory containing the easyconfigs (and patch files) from the specified pull request is included in the robot search path. Up until EasyBuild v2.9.0, this directory was *prepended* to the robot search path, to ensure that easyconfigs that were modified in the respective pull request are picked up via ``--robot`` when they are required. Thus, for easyconfig files that were available in the pull request as well as locally, the ones from the specified pull request were preferred. This was changed in EasyBuild v2.9.0, where the directory containing the easyconfigs touched by the pull request is *appended* to the robot search path. This change was made to ensure that customized easyconfig files that are available in the robot search path are preferred over the (patched) easyconfig files from the ``develop`` branch (see also :ref: `github_from_pr_vs_develop` ). For example, to build and install ``HPL`` with the ``intel/2015a`` toolchain, both of which are contributed via `easyconfigs pull request #1238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1238> `_ :: $ eb --from-pr 1238 --dry-run --robot $HOME/easyconfigs == temporary log file in case of crash /tmp/eb-A1fRvw/easybuild-Eqc8Oi.log Dry run: printing build status of easyconfigs and dependencies * [x] /home/example/easyconfigs/g/GCC/GCC-4.9.2.eb (module: GCC/4.9.2) * [x] /home/example/easyconfigs/i/icc/icc-2015.1.133-GCC-4.9.2.eb (module: icc/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/ifort/ifort-2015.1.133-GCC-4.9.2.eb (module: ifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iccifort/iccifort-2015.1.133-GCC-4.9.2.eb (module: iccifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/impi/impi-5.0.2.044-iccifort-2015.1.133-GCC-4.9.2.eb (module: impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iimpi/iimpi-7.2.3-GCC-4.9.2.eb (module: iimpi/7.2.3-GCC-4.9.2) * [x] /home/example/easyconfigs/i/imkl/imkl-11.2.1.133-iimpi-7.2.3-GCC-4.9.2.eb (module: imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2) * [ ] /tmp/eb-A1fRvw/files_pr1238/intel-2015a.eb (module: intel/2015a) * [ ] /tmp/eb-A1fRvw/files_pr1238/HPL-2.1-intel-2015a.eb (module: HPL/2.1-intel-2015a) == temporary log file /tmp/eb-A1fRvw/easybuild-Eqc8Oi.log has been removed. == temporary directory /tmp/eb-A1fRvw has been removed. Note that the easyconfigs that are required to resolve dependencies and are available locally in ``$HOME/easyconfigs`` are being picked up as needed. .. _github_from_pr_specifying_easyconfigs: Specifying particular easyconfig files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuid v2.0.0 the particular easyconfigs to be used can be specified, rather than using all easyconfigs that are touched by the pull request (which is the default if no easyconfigs are specified alongside ``--from-pr`` ). For example, to only use ``CMake-3.0.0-intel-2015a.eb`` from `easyconfigs pull request #1330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1330> `_, and ignore the other easyconfigs being contributed in that same pull request for netCDF, WRF, ... :: $ eb --from-pr 1330 CMake-3.0.0-intel-2015a.eb --dry-run --robot $HOME/easyconfigs == temporary log file in case of crash /tmp/eb-QhM_qc/easybuild-TPvMkJ.log Dry run: printing build status of easyconfigs and dependencies * [x] /home/example/easyconfigs/g/GCC/GCC-4.9.2.eb (module: GCC/4.9.2) * [x] /home/example/easyconfigs/i/icc/icc-2015.1.133-GCC-4.9.2.eb (module: icc/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/ifort/ifort-2015.1.133-GCC-4.9.2.eb (module: ifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iccifort/iccifort-2015.1.133-GCC-4.9.2.eb (module: iccifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/impi/impi-5.0.2.044-iccifort-2015.1.133-GCC-4.9.2.eb (module: impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iimpi/iimpi-7.2.3-GCC-4.9.2.eb (module: iimpi/7.2.3-GCC-4.9.2) * [x] /home/example/easyconfigs/i/imkl/imkl-11.2.1.133-iimpi-7.2.3-GCC-4.9.2.eb (module: imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2) * [x] /home/example/easyconfigs/i/intel/intel-2015a.eb (module: intel/2015a) * [x] /home/example/easyconfigs/n/ncurses/ncurses-5.9-intel-2015a.eb (module: ncurses/5.9-intel-2015a) * [ ] /tmp/eb-QhM_qc/files_pr1330/CMake-3.0.0-intel-2015a.eb (module: CMake/3.0.0-intel-2015a) == temporary log file /tmp/eb-QhM_qc/easybuild-TPvMkJ.log has been removed. == temporary directory /tmp/eb-QhM_qc has been removed. Again, note that locally available easyconfigs that are required to resolve dependencies are being picked up as needed. .. _github_include_easyblocks_from_pr: Using easyblocks from pull requests (``--include-easyblocks-from-pr``) ---------------------------------------------------- *(supported since EasyBuild v4.2.0)* Via the ``--include-easyblocks-from-pr`` command line option, easyblocks that are added or modified by a particular pull request to the `easybuild-easyblocks GitHub repository <https://github.com/easybuilders/easybuild-easyblocks> `_ can be used (regardless of whether the pull request is merged or not). This can be useful to employ easyblocks that are not available yet in the active EasyBuild installation, or to test new contributions by combining ``--include-easyblocks-from-pr`` with ``--from-pr`` and ``--upload-test-report`` (see :ref: `github_upload_test_report` ). When ``--include-easyblocks-from-pr`` is used, EasyBuild will download all modified easyblocks to a temporary directory before processing them. Just like with ``--include-easyblocks`` (see :ref: `include_easyblocks` ), the easyblocks that are included are preferred over the ones included in the EasyBuild installation. For example, to use the LAMMPS easyblock contributed via `easyblocks pull request #1964 <https://github.com/easybuilders/easybuild-easyblocks/pull/1964> `_ together with the LAMMPS v7Aug2019 easyconfigs contributed via `easyconfigs pull request #9884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9884> `_ :: $ eb --from-pr 9884 --include-easyblocks-from-pr 1964 --list-easyblocks=detailed == temporary log file in case of crash /tmp/eb-Eq2zsJ/easybuild-1AaWf8.log EasyBlock (easybuild.framework.easyblock) ... | | |-- EB_LAMMPS (easybuild.easyblocks.lammps @ /tmp/included-easyblocks-rD2HEQ/easybuild/easyblocks/lammps.py) ... .. _github_upload_test_report: Uploading test reports (``--upload-test-report``) ------------------------------------------------- *(supported since EasyBuild v1.13.0)* .. note :: requires that a GitHub token was required ``gist`` permissions is available, cfr. :ref: `github_token` For every installation performed with EasyBuild, a test report is generated. By default, the test report is copied in the installation directory, right next to the log file (see also :ref: `understanding_easyBuild_logs` ). Using ``--upload-test-report`` , the test report can also be pushed to GitHub (as a *gist* , cfr. https://gist.github.com) to share it with others. Each test report includes: * an overview of the easyconfigs being processed * time & date * the exact ``eb`` command line that was used * the full EasyBuild configuration that was in place * information about the system on which EasyBuild was used (hostname, OS, architecture, etc.) * the list of modules that was loaded * the full environment of the session in which ``eb`` was run (note: can be filtered, see :ref: `github_test_report_env_filter` ) For each easyconfig that *failed* to install a partial log will be uploaded as a separate gist, and a link to this gist will be included in the test report. If ``--upload-test-report`` is combined with ``--from-pr`` , a comment referring to the test report (incl. a brief summary) will be placed in the respective pull request. This makes it a very powerful tool when testing contributions. .. note :: If you want to easily access a test report without uploading it to GitHub, use ``--dump-test-report`` . Example :: $ eb --from-pr 3153 --rebuild --upload-test-report == temporary log file in case of crash /tmp/eb-aqk20q/easybuild-wuyZBV.log == processing EasyBuild easyconfig /tmp/eb-aqk20q/files_pr3153/EasyBuild/EasyBuild-2.8.1.eb == building and installing EasyBuild/2.8.1... ... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/EasyBuild/2.8.1/easybuild/easybuild-EasyBuild-2.8.1-20160603.090702.log == Test report uploaded to https://gist.github.com/1cb2db8a2913a1b8ddbf1c6fee3ff83c and mentioned in a comment in easyconfigs PR#3153 == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-aqk20q/easybuild-wuyZBV.log* have been removed. == Temporary directory /tmp/eb-aqk20q has been removed. The resulting test report can be viewed at https://gist.github.com/1cb2db8a2913a1b8ddbf1c6fee3ff83c . .. note :: It is common to use ``--rebuild`` in combination with ``--upload-test-report`` , to ensure that all easyconfigs in the pull request are rebuilt, resulting in a complete test report. .. _github_test_report_env_filter: Filtering the environment details (``--test-report-env-filter``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since the environment of the session in which ``eb`` was used may contain sensitive information, it can be filtered through ``--test-report-env-filter`` . This configuration option takes a regular expression that is used to determine which environment variables can be included in the test report (based on their name). Environment variables for which the name *matches* the specified regular expression will *not* be included in the test report. An example of a typical setting :: export EASYBUILD_TEST_REPORT_ENV_FILTER='^SSH|USER|HOSTNAME|UID|.*COOKIE.*' .. _github_review_pr: Reviewing easyconfig pull requests (``--review-pr``) ---------------------------------------------------- A useful tool when reviewing pull requests for the `easybuild-easyconfigs repository <https://github.com/easybuilders/easybuild-easyconfigs> `_ that add new or update existing easyconfig files is ``--review-pr`` . The 'files' tab in the GitHub interface shows the changes being made to existing files; using ``--review-pr`` the differences with one or more other *similar* easyconfig files, for example the one(s) with the same toolchain (version) and/or software version, can also be evaluated. This is very useful to quickly see how easyconfig files in pull requests differ from existing easyconfig files, and to maintain consistency across easyconfig files where desired. The ``--review-pr`` output consists of a 'multidiff' view per easyconfig file that is being touched by the specified pull request. The exact format of the output depends on whether EasyBuild is configured to allow colored output (enabled by default, see ``--color`` ). Search criteria for similar easyconfigs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The set of existing similar easyconfig files is determined by specific search criteria; the first one that results in a non-empty set of easyconfigs is retained. The search criteria consists of a combination of the *software version criterion* with additional restrictions. The software version criterion is one of the criterions below (considered in order), with ``x.y.z`` the software version of the easyconfig file from the pull request: * exact same software version * same major/minor software version (same ``x`` and ``y`` ) * same major software version (same ``x`` ) * no (partial) version match (so consider any version) The addition restrictions are the following (also considered in order): * matching versionsuffix and toolchain name/version * matching versionsuffix and toolchain name (any toolchain version) * matching versionsuffix (any toolchain name/version) * matching toolchain name/version (any versionsuffix) * matching toolchain name (any versionsuffix, toolchain version) * no extra requirements (any versionsuffix, toolchain name/version) .. _github_merge_pr: Merging easyconfig pull requests (``--merge-pr``) ------------------------------------------------- *(supported since EasyBuild v3.3.1)* :ref: `maintainers` need to take the :ref: `contributing_review_process_pr_requirements` into account. They can merge a pull request to the ``easybuild-easyconfigs`` repository via ``eb --merge-pr`` , which will first verify whether the pull request meets the prescribed requirements (at least the ones that can be verified automatically). For example, for a pull request that is not eligible for merging yet :: $ eb --merge-pr 4725 == temporary log file in case of crash /tmp/eb-ba7rVp/easybuild-fBfcwN.log easybuilders/easybuild-easyconfigs PR #4725 was submitted by vanzod, you are using GitHub account 'example' Checking eligibility of easybuilders/easybuild-easyconfigs PR #4725 for merging... * targets develop branch: OK * test suite passes: FAILED => not eligible for merging! * last test report is successful: (no test reports found) => not eligible for merging! * approved review: MISSING => not eligible for merging! * milestone is set: no milestone found => not eligible for merging! WARNING: Review indicates this PR should not be merged (use -f/--force to do so anyway) When a PR is considered eligible for merging, EasyBuild will go ahead and merge it:: $ eb --merge-pr 4829 == temporary log file in case of crash /tmp/eb-F9a3oB/easybuild-3B2wdq.log easybuilders/easybuild-easyconfigs PR #4829 was submitted by SethosII, you are using GitHub account 'example' Checking eligibility of easybuilders/easybuild-easyconfigs PR #4829 for merging... * targets develop branch: OK * test suite passes: OK * last test report is successful: OK * approved review: OK (by boegel) * milestone is set: OK (3.3.1) Review OK, merging pull request! Adding comment to easybuild-easyconfigs issue #4829: 'Going in, thanks @SethosII!' Merged easybuilders/easybuild-easyconfigs pull request #4829 .. note :: ``eb --merge-pr`` can also be run in dry run mode, by also using one of the following options: ``--dry-run`` , ``-D`` , ``--extended-dry-run`` , ``-x`` . This results in the same checks being performed but skips the actual merging of the pull request, resulting in messages like :: $ eb --merge-pr 4829 --dry-run ... Review OK, merging pull request! [DRY RUN] Adding comment to easybuild-easyconfigs issue #4829: 'Going in, thanks @SethosII!' [DRY RUN] Merged easybuilders/easybuild-easyconfigs pull request #4829 .. _github_new_update_pr: Submitting new and updating pull requests (``--new-pr``, ``--update-pr``) ------------------------------------------------------------------------- *(supported since EasyBuild v2.6.0)* EasyBuild provides two simple yet powerful features that make contributing to the central EasyBuild repositories significantly easier and less error-prone, especially for people who are not very familiar with ``git`` and/or GitHub yet: * ``--new-pr`` to create new pull requests * ``--update-pr`` to update existing pull requests .. _github_preview_pr: Previewing easyconfig pull requests (``--preview-pr``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *(supported since EasyBuild v3.5.0)* It is very useful to quickly see how easyconfig files in pull requests differ from existing easyconfig files, and to maintain consistency across easyconfig files where desired. Maintainers will use ``--review-pr`` as part of the review process once the PR is submitted (see :ref: `github_review_pr` ), but it is now possible to preview that output before submitting a PR, eventually fixing any inconsistencies in advance. To preview a PR before submitting, simply use ``--preview-pr`` with the list of files to submit :: $ eb --preview-pr example.eb example.patch Besides accepting local files instead of a PR number, ``--preview-pr`` works the same as ``--review-pr`` , as described in :ref: `contributing_review_process_review_pr` . .. _github_new_pr: Submitting pull requests (``--new-pr``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: Submitting pull requests using ``--new-pr`` only works for the ``easybuild-easyconfigs`` repository, for now. For other repositories, see the manual procedure documented at :ref: `contributing_pull_requests` . To create a new pull request, the ``--new-pr`` command line option can be used, provided that the necessary requirements are fulfilled (see :ref: `github_requirements` ). In its simplest form, you just provide the location of the file(s) that you want to include in the pull request :: $ eb --new-pr test.eb This takes care of all the steps required to make a contribution, i.e.: * set up a working copy of the relevant EasyBuild repository (e.g., ``easybuild-easyconfigs`` ) * create a new 'feature' branch, starting from the up-to-date ``develop`` branch * renaming easyconfig files according to their ``name`` , ``version`` , ``versionsuffix`` and ``toolchain`` * moving easyconfig files to the right location in the repository (e.g. ``easybuild/easyconfigs/e/EasyBuild/`` ) * staging and committing the files in the feature branch * pushing the feature branch to your fork of the relevant EasyBuild repository on GitHub * creating the pull request, targeting the ``develop`` branch of the central EasyBuild repository (e.g. ``easybuilders/easybuild-easyconfigs`` ) It should be clear that automating this whole procedure with a single simple ``eb`` command greatly lowers the bar for contributing, especially since it even alleviates the need for interacting directly with ``git`` entirely! The working copy of the EasyBuild repository is created in a temporary location, and cleaned up once the pull request has been created. EasyBuild does *not* make changes to an existing working copy you may have in place already (cfr. :ref: `github_git_working_dirs_path` ). .. note :: When modifying existing files via ``--new-pr`` , you *must* specify a (meaningful) commit message using ``--pr-commit-msg`` , see :ref: `github_controlling_pr_metadata` . Example +++++++ For example, to create a pull request for a new version of, let's say, EasyBuild :: $ eb --new-pr example.eb == temporary log file in case of crash /tmp/eb-mWKR9u/easybuild-cTpf2W.log == copying /home/example/git-working-dirs/easybuild-easyconfigs... == fetching branch 'develop' from https://github.com/easybuilders/easybuild-easyconfigs.git... Opening pull request * target: easybuilders/easybuild-easyconfigs:develop * from: boegel/easybuild-easyconfigs:20160530131447_new_pr_EasyBuild281 * title: \"{tools}[dummy/dummy] EasyBuild v2.8.1\" * description: \"\"\" (created using `eb --new-pr`) \"\"\" * overview of changes: .../easyconfigs/e/EasyBuild/EasyBuild-2.8.1.eb | 35 ++++++++++++++++++++++ 1 file changed, 35 insertions(+) Opened pull request: https://github.com/easybuilders/easybuild-easyconfigs/pull/3153 Yes, it's that easy! .. _github_update_pr: Updating existing pull requests (``--update-pr``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: Updating pull requests using ``--update-pr`` only works for the ``easybuild-easyconfigs`` repository, for now. For other repositories, see the manual procedure documented at :ref: `contributing_pull_requests` . Similarly to creating new pull requests, existing pull requests can be easily updated using ``eb --update-pr`` (regardless of whether or not they were created with ``--new-pr`` ). The usage is equally simple, for example to update pull request ``#1234`` just list the changed/new file(s) :: $ eb --update-pr 1234 example.eb Again, this take care of the whole procedure required to update an existing pull request: * set up a working copy of the relevant EasyBuild repository (e.g., ``easybuild-easyconfigs`` ) * determining the branch corresponding to the pull request, which should be updated by pushing a new commit to it * checking out that branch * renaming easyconfig files according to their ``name`` , ``version`` , ``versionsuffix`` and ``toolchain`` * moving easyconfig files to the right location in the repository (e.g. ``easybuild/easyconfigs/e/EasyBuild/`` ) * staging and committing the (changed/new) files * pushing the updated branch to GitHub Again, not a single ``git`` command to be executed; the only thing that is required is the ID of the pull request that should be updated. Just like with ``--new-pr`` , this is done in a temporary working copy of the repository, no changes are made to a possible existing working copy. .. note :: When using ``--update-pr`` you *must* specify a (meaningful) commit message via ``--pr-commit-msg`` , see :ref: `github_controlling_pr_metadata` . Example +++++++ For example, to update pull request #3153 with a changed easyconfig file :: eb --update-pr 3153 example.eb == temporary log file in case of crash /tmp/eb-gO2wJu/easybuild-37Oo2z.log == Determined branch name corresponding to easybuilders/easybuild-easyconfigs PR #3153: 20160530131447_new_pr_EasyBuild281 == copying /home/example/git-working-dirs/easybuild-easyconfigs... == fetching branch '20160530131447_new_pr_EasyBuild281' from https://github.com/boegel/easybuild-easyconfigs.git... Overview of changes: easybuild/easyconfigs/e/EasyBuild/EasyBuild-2.8.1.eb | 3 +++ 1 file changed, 3 insertions(+) Updated easybuilders/easybuild-easyconfigs PR #3159 by pushing to branch boegel/20160530131447_new_pr_EasyBuild281 .. _github_new_update_pr_patches: Including patch files in easyconfigs pull requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next to providing one or more easyconfig files to add/update via ``--new-pr`` or ``--update-pr`` , you can also include patch files that are required by those easyconfig files. EasyBuild will try and figure out where each patch file should be located (i.e. in the same directory as the easyconfig files that require that patch file), by scanning the provided easyconfigs (or, if needed, scanning *all* existing easyconfig files). For example :: eb --new-pr example.eb example.patch --pr-commit-msg \"just an example\" .. note :: When providing one or more patch files, you *must* specify a (meaningful) commit message via ``--pr-commit-msg`` , see :ref: `github_controlling_pr_metadata` . .. _github_new_update_pr_delete: Deleting easyconfig files or patches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next to adding easyconfigs files or patches, or modifying existing ones, you can also specify to *delete* particular files, by including a colon character ``:`` before the name of the file. For example :: eb --new-pr :example-1.0.eb --pr-commit-msg \"delete example-1.0.eb easyconfig file\" .. note :: When deleting existing files, you *must* specify a custom commit message using ``--pr-commit-msg`` , see also :ref: `github_controlling_pr_metadata` . .. _github_controlling_pr_metadata: Controlling pull request metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can control the metadata for pull requests using the following configuration options: * ``--pr-branch-name`` : branch name for new pull requests * ``--pr-commit-msg`` : commit message to use when creating new or updating existing pull requests * ``--pr-descr`` : pull request description * ``--pr-title`` : pull request title EasyBuild will use sensible defaults for each of these, see below. Default branch name for new pull requests +++++++++++++++++++++++++++++++++++++++++ The branch name for new pull requests will be composed from: * a timestamp, down to the second in an attempt to make it unique * example: ``20160513141133`` for a pull request created on May 13th 2016, 2:11:33 PM * a label ``new_pr`` * the software name and version of the first easyconfig file, with some filtering (e.g. remove ``.`` 's) * example: ``GCC530`` for GCC v5.3.0 Full example: ``20160513141133_new_pr_GCC530`` Although there is usually no reason to change this default, it can be done if desired using ``--pr-branch-name`` when opening a new pull request with ``--new-pr`` . Default commit message ++++++++++++++++++++++ EasyBuild will try to generate an appropriate default commit message when only new easyconfigs are being added via ``--new-pr`` . When existing easyconfigs are being modified, patch files are being added/updated or ``--update-pr`` is used, a custom (meaningful) commit message *must* be provided via ``--pr-commit-msg`` (see :ref: `github_controlling_pr_metadata` ). Default pull request description ++++++++++++++++++++++++++++++++ By default, the pull description will only contain the following text :: (created using eb --new-pr) It is generally advised to provide more descriptive information, although the changes made by the pull request may be self-explanatory (e.g. when only adding new easyconfig files). To change this default text, you can either use ``--pr-descr`` or edit the description via the GitHub interface after the pull request has been opened. Particularly useful information to specify here is dependencies on other pull requests, by copy-pasting the respective URLs with a short descriptive message like ' ``depends on PR <URL>`` '. Default pull request title ++++++++++++++++++++++++++ The pull request title is derived from the easyconfig files being changed/added, taking into account the recommendation for easyconfig pull requests to clearly specify module class, toolchain, software name/version, as follows: ``{<module_class>}[<toolchain>] <software_name> v<software_version>`` . For example, when opening a pull request for an easyconfig for Python 2.7.11 with the ``intel/2016a`` toolchain, the default pull request title will be something like: ``{lang}[intel/2016a] Python v2.7.11`` . If multiple easyconfig files are provided, the respective software names/versions will be included separated by a ``,`` , up until the first 3 easyconfig files (to avoid excessively lengthy pull request titles). In case (only) existing easyconfig files are being changed, it's advisable to provide a more descriptive title using ``--pr-title`` . .. _github_configuring_new_update_pr: Configuring ``--new-pr`` and ``--update-pr`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ By default, ``--new-pr`` and ``--update-pr`` affect pull requests to the central ``easybuilders/easybuild-easyconfigs`` repository. However, this can be changed with the following configurations options: * ``--pr-target-account`` (default: ``easybuilders`` ): target GitHub account for new pull requests * ``--pr-target-branch`` (default: ``develop`` ): target branch for new pull requests * ``--pr-target-repo`` (default: ``easybuild-easyconfigs`` ): target repository for new pull requests .. _github_synergy_new_update_pr_dry_run: Synergy with ``--dry-run``/``-D`` and ``--extended-dry-run``/``-x`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Both ``--new-pr`` and ``--update-pr`` are 'dry run-aware', in the sense that you can combine them with either ``--dry-run`` / ``-D-`` or ``--extended-dry-run`` / ``-x`` to preview the pull request they would create/update without actually doing so. For example :: $ eb --new-pr EasyBuild-2.9.0.eb -D == temporary log file in case of crash /tmp/eb-1ny69k/easybuild-UR1Wr4.log == copying /home/example/git-working-dirs/easybuild-easyconfigs... == fetching branch 'develop' from https://github.com/easybuilders/easybuild-easyconfigs.git... Opening pull request [DRY RUN] * target: easybuilders/easybuild-easyconfigs:develop * from: boegel/easybuild-easyconfigs:20160603105641_new_pr_EasyBuild290 * title: \"{tools}[dummy/dummy] EasyBuild v2.9.0\" * description: \"\"\" (created using `eb --new-pr`) \"\"\" * overview of changes: .../easyconfigs/e/EasyBuild/EasyBuild-2.9.0.eb | 35 ++++++++++++++++++++++ 1 file changed, 35 insertions(+) The only difference between using ``--dry-run`` and ``--extended-dry-run`` is that the latter will show the full diff of the changes (equivalent to ``git diff`` ), while the former will only show a summary of the changes (equivalent to ``git diff --stat`` , see example above).","title":"Integration with GitHub"},{"location":"integration-with-github/#integration-with-github","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Integration_with_GitHub.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Integration_with_GitHub.rst in easybuilders/easybuild repo target: docs/integration-with-github.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _integration_with_github: Integration with GitHub ======================= EasyBuild provides several features that integrate with GitHub, where the different EasyBuild repositories are located. From the EasyBuild command line ``eb`` several options are available to reach out to GitHub, which are documented below. .. contents :: :depth: 3 :backlinks: none .. _github_requirements: Requirements ------------ Depending on which GitHub integration features you want to use, there are a couple of requirements: * **a GitHub account** * see https://github.com; creating an account is free * **a GitHub user name** * only required for authenticated access to the GitHub API, which can help to avoid rate limitations * *not* strictly necessary for read-only operations * i.e. *not* required for :ref: `github_from_pr` and :ref: `github_review_pr` (but it can help) * see :ref: `github_user` * **a GitHub token** + ``keyring`` **Python package** * install via ``pip install keyring`` (for Python2: ``pip install 'keyring<19.0'`` ) * optionally install potentially unsafe keyrings: ``pip install keyrings.alt`` (but read and understand the `warning <https://pypi.org/project/keyrings.alt/> `_ ) * allows accessing the GitHub API with authentication * only strictly required for features that require GitHub 'write' permissions * i.e. for :ref: `github_upload_test_report` and :ref: `github_new_pr` * see :ref: `github_token` * ``git`` **command** / ``GitPython`` **Python package** * install via ``pip install GitPython`` (for Python2: ``pip install 'GitPython<3.0'`` ) * only required when local ``git`` commands need to be executed, e.g. to manipulate a Git repository * i.e. for :ref: `github_new_pr` and :ref: `github_update_pr` * **SSH public key registered on GitHub** * only required when ``push`` access to Git repositories that reside on GitHub is required * i.e. for :ref: `github_new_pr` and :ref: `github_update_pr` * see https://github.com/settings/ssh * **fork of the EasyBuild repositories on GitHub** * only required for submitting/updating pull requests ( :ref: `github_new_pr` and :ref: `github_update_pr` ) * see ``Fork`` button (top right) at https://github.com/easybuilders/easybuild-easyconfigs (for example) See also :ref: `github_requirements_check` . .. _github_configuration: Configuration ------------- The following sections discuss the EasyBuild configuration options relevant to the GitHub integration features. .. _github_user: Providing a GitHub username (``--github-user``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To specify your GitHub username, do one of the following: * use the ``--github-user`` configuration option on the ``eb`` command line * define the ``$EASYBUILD_GITHUB_USER`` environment variable * specify ``github-user`` in your EasyBuild configuration file (see also :ref: `configuring_easybuild` ) .. _github_token: Installing a GitHub token (``--install-github-token``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: *requires* : GitHub username + ``keyring`` Python package A GitHub token is a string of 40 characters that is tied to your GitHub account, allowing you to access the GitHub API authenticated. Using a GitHub token is beneficial with respect to rate limitations, and enables write permissions on GitHub (e.g. posting comments, creating gists, opening pull requests). To obtain a GitHub token: * visit https://github.com/settings/tokens/new and log in with your GitHub account * enter a token description, for example: \" ``EasyBuild`` \" * make sure (only) the ``gist`` and ``public_repo`` (in the ``repo`` section) scopes are fully enabled * click ``Generate token`` * *copy-paste* the generated token .. note :: You will only be able to copy-paste the generated token right after you have created it. The value corresponding to an existing token can *not* be retrieved later through the GitHub interface. **Please keep your token secret at all times** ; it allows fully authenticated access to your GitHub account! You can install the GitHub token in your keyring using EasyBuild, so it can pick it up when it needs to, using ``eb --install-github-token`` :: $ eb --github-user example --install-github-token Token: <copy-paste-your-40-character-token-here> Validating token... Token seems to be valid, installing it. Token 'e3a..0c2' installed! EasyBuild will validate the provided token, to check that authenticated access to your GitHub account works as expected. .. note :: EasyBuild will never print the full token value, to avoid leaking it. For debugging purposes, only the first and last 3 characters will be shown. .. _github_git_working_dirs_path: Specify location of working directories (``--git-working-dirs-path``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can specify the location of your Git working directories with one of the following: * use the ``--git-working-dirs-path`` configuration option on the ``eb`` command line * define the ``$EASYBUILD_GIT_WORKING_DIRS_PATH`` environment variable * specify the ``git-working-dirs-path`` option in your EasyBuild configuration file The provided path should be the *parent* directory of the location of the working directories (i.e. clones) of the EasyBuild repositories ( ``easybuild-easyconfigs`` , etc.); the assumption is that you keep them all in a single parent directory. Although not strictly required, this is useful for speeding up ``--new-pr`` and ``--update-pr`` , since it allows that the repository can be copied & updated, rather than being cloned from scratch. .. _github_requirements_check: Checking status of GitHub integration (``--check-github``) ---------------------------------------------------------- To check the status of your setup w.r.t. GitHub integration, the ``--check-github`` command line option can be used. Using this will trigger EasyBuild to perform a number of checks, and report back on what the test results mean for the different GitHub integration features. If all requirements are taken care of in your setup, you should see output like this :: $ eb --check-github == temporary log file in case of crash /tmp/eb-xWCpWl/easybuild-hGnKS5.log Checking status of GitHub integration... Making sure we're online... OK * GitHub user... example => OK * GitHub token... e3f..0c8 (len: 40) => OK (validated) * git command... OK (\"git version 2.7.4 (Apple Git-66); \") * GitPython module... OK * push access to example/easybuild-easyconfigs repo @ GitHub... OK * creating gists... OK * location to Git working dirs... OK (/home/example/git-working-dirs) All checks PASSed! Status of GitHub integration: * --from-pr: OK * --new-pr: OK * --review-pr: OK * --update-pr: OK * --upload-test-report: OK .. note :: Checking whether push access to GitHub works may take some time, since a recent clone of the easybuild-easyconfigs GitHub repository will be created in the process (at a temporary location). See also :ref: `github_requirements` . .. _github_from_pr: Using easyconfigs from pull requests (``--from-pr``) ---------------------------------------------------- *(supported since EasyBuild v1.13.0)* Via the ``--from-pr`` command line option (available since EasyBuild v1.13.0), easyconfig files that are added or modified by a particular pull request to the `easybuild-easyconfigs GitHub repository <https://github.com/easybuilders/easybuild-easyconfigs> `_ can be used (regardless of whether the pull request is merged or not). This can be useful to employ easyconfig files that are not available yet in the active EasyBuild installation, or to test new contributions by combining ``--from-pr`` with ``--upload-test-report`` (see :ref: `github_upload_test_report` ). When ``--from-pr`` is used, EasyBuild will download all modified files (easyconfig files and patches) to a temporary directory before processing them. For example, to use the GCC v4.9.2 easyconfigs contributed via `easyconfigs pull request #1177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1177> `_ :: $ eb --from-pr 1177 --dry-run == temporary log file in case of crash /tmp/eb-88quZc/easybuild-62fFdo.log Dry run: printing build status of easyconfigs and dependencies * [ ] /tmp/eb-88quZc/files_pr1177/GCC-4.9.2-CLooG-multilib.eb (module: GCC/4.9.2-CLooG-multilib) * [ ] /tmp/eb-88quZc/files_pr1177/GCC-4.9.2-CLooG.eb (module: GCC/4.9.2-CLooG) * [ ] /tmp/eb-88quZc/files_pr1177/GCC-4.9.2.eb (module: GCC/4.9.2) == temporary log file /tmp/eb-88quZc/easybuild-62fFdo.log has been removed. == temporary directory /tmp/eb-88quZc has been removed. .. note :: To avoid GitHub rate limiting, let EasyBuild know which GitHub account should be used to query the GitHub API, and provide a matching GitHub token; see also :ref: `github_token` . .. _github_from_pr_vs_develop: Relation between pull requests and current ``develop`` branch ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v2.9.0, the current ``develop`` branch of the central ``easybuild-easyconfigs`` GitHub repository is taken into account when applicable with ``--from-pr`` . Before, only the branch corresponding to the specified pull request itself was being considered, which potentially did not reflect the correct state of things, in particular for pull requests based on an outdated branch in which easyconfigs are changed that have been updated in ``develop`` as well. As such, the exact semantics of ``--from-pr`` depends on the state of the specified pull request, i.e. whether or not the pull request was merged already, whether the pull request is mergeable and stable (as indicated by GitHub Actions), etc. .. _github_from_pr_vs_develop_open_stable_prs: Open stable pull requests +++++++++++++++++++++++++ For *open* pull requests that are *stable* (i.e. tests pass and no merge conflicts), the pull request is effectively treated as a patch to the current ``develop`` branch. This is done to ensure that contributions that are picked up via ``--from-pr`` are correctly evaluated. First, the current ``develop`` branch of the central ``easybuild-easyconfigs`` GitHub repository is downloaded to a temporary directory. Afterwards, the patch corresponding to the specified pull request is applied on top of the ``develop`` branch. This results in a correct reflection of how the easyconfig files would look like if the pull request would be merged, which is particularly important for testing of contributions (see also :ref: `github_upload_test_report` ). Easyconfig files touched by the pull request that are explicitly specified are then picked up from this location; see also :ref: `github_from_pr_specifying_easyconfigs` . .. _github_from_pr_vs_develop_merged_prs: Merged pull requests ++++++++++++++++++++ For merged pull requests, the current ``develop`` branch is considered to be the correct state of the easyconfigs touched by the pull request. Note that this implies that the easyconfig files being picked up are potentially different from the ones that appear in the specified pull request itself, taking into account that further updates may have been applied in the ``develop`` branch since the pull request got merged. .. _github_from_pr_vs_develop_closed_unstable_prs: Closed or unstable pull requests ++++++++++++++++++++++++++++++++ For closed and unstable pull requests, only the branch corresponding to the pull request itself is being considered, which aligns with the semantics of ``--from-pr`` as it was before EasyBuild v2.9.0. In this case, the current ``develop`` branch is *not* taken into account. .. note :: A pull request is considered unstable when GitHub reports merge conflicts or when GitHub Actions reports one or more failing tests. .. _github_from_pr_robot_synergy: Synergy with ``--robot`` ~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v1.15.0, the temporary directory containing the easyconfigs (and patch files) from the specified pull request is included in the robot search path. Up until EasyBuild v2.9.0, this directory was *prepended* to the robot search path, to ensure that easyconfigs that were modified in the respective pull request are picked up via ``--robot`` when they are required. Thus, for easyconfig files that were available in the pull request as well as locally, the ones from the specified pull request were preferred. This was changed in EasyBuild v2.9.0, where the directory containing the easyconfigs touched by the pull request is *appended* to the robot search path. This change was made to ensure that customized easyconfig files that are available in the robot search path are preferred over the (patched) easyconfig files from the ``develop`` branch (see also :ref: `github_from_pr_vs_develop` ). For example, to build and install ``HPL`` with the ``intel/2015a`` toolchain, both of which are contributed via `easyconfigs pull request #1238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1238> `_ :: $ eb --from-pr 1238 --dry-run --robot $HOME/easyconfigs == temporary log file in case of crash /tmp/eb-A1fRvw/easybuild-Eqc8Oi.log Dry run: printing build status of easyconfigs and dependencies * [x] /home/example/easyconfigs/g/GCC/GCC-4.9.2.eb (module: GCC/4.9.2) * [x] /home/example/easyconfigs/i/icc/icc-2015.1.133-GCC-4.9.2.eb (module: icc/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/ifort/ifort-2015.1.133-GCC-4.9.2.eb (module: ifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iccifort/iccifort-2015.1.133-GCC-4.9.2.eb (module: iccifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/impi/impi-5.0.2.044-iccifort-2015.1.133-GCC-4.9.2.eb (module: impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iimpi/iimpi-7.2.3-GCC-4.9.2.eb (module: iimpi/7.2.3-GCC-4.9.2) * [x] /home/example/easyconfigs/i/imkl/imkl-11.2.1.133-iimpi-7.2.3-GCC-4.9.2.eb (module: imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2) * [ ] /tmp/eb-A1fRvw/files_pr1238/intel-2015a.eb (module: intel/2015a) * [ ] /tmp/eb-A1fRvw/files_pr1238/HPL-2.1-intel-2015a.eb (module: HPL/2.1-intel-2015a) == temporary log file /tmp/eb-A1fRvw/easybuild-Eqc8Oi.log has been removed. == temporary directory /tmp/eb-A1fRvw has been removed. Note that the easyconfigs that are required to resolve dependencies and are available locally in ``$HOME/easyconfigs`` are being picked up as needed. .. _github_from_pr_specifying_easyconfigs: Specifying particular easyconfig files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuid v2.0.0 the particular easyconfigs to be used can be specified, rather than using all easyconfigs that are touched by the pull request (which is the default if no easyconfigs are specified alongside ``--from-pr`` ). For example, to only use ``CMake-3.0.0-intel-2015a.eb`` from `easyconfigs pull request #1330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1330> `_, and ignore the other easyconfigs being contributed in that same pull request for netCDF, WRF, ... :: $ eb --from-pr 1330 CMake-3.0.0-intel-2015a.eb --dry-run --robot $HOME/easyconfigs == temporary log file in case of crash /tmp/eb-QhM_qc/easybuild-TPvMkJ.log Dry run: printing build status of easyconfigs and dependencies * [x] /home/example/easyconfigs/g/GCC/GCC-4.9.2.eb (module: GCC/4.9.2) * [x] /home/example/easyconfigs/i/icc/icc-2015.1.133-GCC-4.9.2.eb (module: icc/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/ifort/ifort-2015.1.133-GCC-4.9.2.eb (module: ifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iccifort/iccifort-2015.1.133-GCC-4.9.2.eb (module: iccifort/2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/impi/impi-5.0.2.044-iccifort-2015.1.133-GCC-4.9.2.eb (module: impi/5.0.2.044-iccifort-2015.1.133-GCC-4.9.2) * [x] /home/example/easyconfigs/i/iimpi/iimpi-7.2.3-GCC-4.9.2.eb (module: iimpi/7.2.3-GCC-4.9.2) * [x] /home/example/easyconfigs/i/imkl/imkl-11.2.1.133-iimpi-7.2.3-GCC-4.9.2.eb (module: imkl/11.2.1.133-iimpi-7.2.3-GCC-4.9.2) * [x] /home/example/easyconfigs/i/intel/intel-2015a.eb (module: intel/2015a) * [x] /home/example/easyconfigs/n/ncurses/ncurses-5.9-intel-2015a.eb (module: ncurses/5.9-intel-2015a) * [ ] /tmp/eb-QhM_qc/files_pr1330/CMake-3.0.0-intel-2015a.eb (module: CMake/3.0.0-intel-2015a) == temporary log file /tmp/eb-QhM_qc/easybuild-TPvMkJ.log has been removed. == temporary directory /tmp/eb-QhM_qc has been removed. Again, note that locally available easyconfigs that are required to resolve dependencies are being picked up as needed. .. _github_include_easyblocks_from_pr: Using easyblocks from pull requests (``--include-easyblocks-from-pr``) ---------------------------------------------------- *(supported since EasyBuild v4.2.0)* Via the ``--include-easyblocks-from-pr`` command line option, easyblocks that are added or modified by a particular pull request to the `easybuild-easyblocks GitHub repository <https://github.com/easybuilders/easybuild-easyblocks> `_ can be used (regardless of whether the pull request is merged or not). This can be useful to employ easyblocks that are not available yet in the active EasyBuild installation, or to test new contributions by combining ``--include-easyblocks-from-pr`` with ``--from-pr`` and ``--upload-test-report`` (see :ref: `github_upload_test_report` ). When ``--include-easyblocks-from-pr`` is used, EasyBuild will download all modified easyblocks to a temporary directory before processing them. Just like with ``--include-easyblocks`` (see :ref: `include_easyblocks` ), the easyblocks that are included are preferred over the ones included in the EasyBuild installation. For example, to use the LAMMPS easyblock contributed via `easyblocks pull request #1964 <https://github.com/easybuilders/easybuild-easyblocks/pull/1964> `_ together with the LAMMPS v7Aug2019 easyconfigs contributed via `easyconfigs pull request #9884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9884> `_ :: $ eb --from-pr 9884 --include-easyblocks-from-pr 1964 --list-easyblocks=detailed == temporary log file in case of crash /tmp/eb-Eq2zsJ/easybuild-1AaWf8.log EasyBlock (easybuild.framework.easyblock) ... | | |-- EB_LAMMPS (easybuild.easyblocks.lammps @ /tmp/included-easyblocks-rD2HEQ/easybuild/easyblocks/lammps.py) ... .. _github_upload_test_report: Uploading test reports (``--upload-test-report``) ------------------------------------------------- *(supported since EasyBuild v1.13.0)* .. note :: requires that a GitHub token was required ``gist`` permissions is available, cfr. :ref: `github_token` For every installation performed with EasyBuild, a test report is generated. By default, the test report is copied in the installation directory, right next to the log file (see also :ref: `understanding_easyBuild_logs` ). Using ``--upload-test-report`` , the test report can also be pushed to GitHub (as a *gist* , cfr. https://gist.github.com) to share it with others. Each test report includes: * an overview of the easyconfigs being processed * time & date * the exact ``eb`` command line that was used * the full EasyBuild configuration that was in place * information about the system on which EasyBuild was used (hostname, OS, architecture, etc.) * the list of modules that was loaded * the full environment of the session in which ``eb`` was run (note: can be filtered, see :ref: `github_test_report_env_filter` ) For each easyconfig that *failed* to install a partial log will be uploaded as a separate gist, and a link to this gist will be included in the test report. If ``--upload-test-report`` is combined with ``--from-pr`` , a comment referring to the test report (incl. a brief summary) will be placed in the respective pull request. This makes it a very powerful tool when testing contributions. .. note :: If you want to easily access a test report without uploading it to GitHub, use ``--dump-test-report`` . Example :: $ eb --from-pr 3153 --rebuild --upload-test-report == temporary log file in case of crash /tmp/eb-aqk20q/easybuild-wuyZBV.log == processing EasyBuild easyconfig /tmp/eb-aqk20q/files_pr3153/EasyBuild/EasyBuild-2.8.1.eb == building and installing EasyBuild/2.8.1... ... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/EasyBuild/2.8.1/easybuild/easybuild-EasyBuild-2.8.1-20160603.090702.log == Test report uploaded to https://gist.github.com/1cb2db8a2913a1b8ddbf1c6fee3ff83c and mentioned in a comment in easyconfigs PR#3153 == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-aqk20q/easybuild-wuyZBV.log* have been removed. == Temporary directory /tmp/eb-aqk20q has been removed. The resulting test report can be viewed at https://gist.github.com/1cb2db8a2913a1b8ddbf1c6fee3ff83c . .. note :: It is common to use ``--rebuild`` in combination with ``--upload-test-report`` , to ensure that all easyconfigs in the pull request are rebuilt, resulting in a complete test report. .. _github_test_report_env_filter: Filtering the environment details (``--test-report-env-filter``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since the environment of the session in which ``eb`` was used may contain sensitive information, it can be filtered through ``--test-report-env-filter`` . This configuration option takes a regular expression that is used to determine which environment variables can be included in the test report (based on their name). Environment variables for which the name *matches* the specified regular expression will *not* be included in the test report. An example of a typical setting :: export EASYBUILD_TEST_REPORT_ENV_FILTER='^SSH|USER|HOSTNAME|UID|.*COOKIE.*' .. _github_review_pr: Reviewing easyconfig pull requests (``--review-pr``) ---------------------------------------------------- A useful tool when reviewing pull requests for the `easybuild-easyconfigs repository <https://github.com/easybuilders/easybuild-easyconfigs> `_ that add new or update existing easyconfig files is ``--review-pr`` . The 'files' tab in the GitHub interface shows the changes being made to existing files; using ``--review-pr`` the differences with one or more other *similar* easyconfig files, for example the one(s) with the same toolchain (version) and/or software version, can also be evaluated. This is very useful to quickly see how easyconfig files in pull requests differ from existing easyconfig files, and to maintain consistency across easyconfig files where desired. The ``--review-pr`` output consists of a 'multidiff' view per easyconfig file that is being touched by the specified pull request. The exact format of the output depends on whether EasyBuild is configured to allow colored output (enabled by default, see ``--color`` ). Search criteria for similar easyconfigs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The set of existing similar easyconfig files is determined by specific search criteria; the first one that results in a non-empty set of easyconfigs is retained. The search criteria consists of a combination of the *software version criterion* with additional restrictions. The software version criterion is one of the criterions below (considered in order), with ``x.y.z`` the software version of the easyconfig file from the pull request: * exact same software version * same major/minor software version (same ``x`` and ``y`` ) * same major software version (same ``x`` ) * no (partial) version match (so consider any version) The addition restrictions are the following (also considered in order): * matching versionsuffix and toolchain name/version * matching versionsuffix and toolchain name (any toolchain version) * matching versionsuffix (any toolchain name/version) * matching toolchain name/version (any versionsuffix) * matching toolchain name (any versionsuffix, toolchain version) * no extra requirements (any versionsuffix, toolchain name/version) .. _github_merge_pr: Merging easyconfig pull requests (``--merge-pr``) ------------------------------------------------- *(supported since EasyBuild v3.3.1)* :ref: `maintainers` need to take the :ref: `contributing_review_process_pr_requirements` into account. They can merge a pull request to the ``easybuild-easyconfigs`` repository via ``eb --merge-pr`` , which will first verify whether the pull request meets the prescribed requirements (at least the ones that can be verified automatically). For example, for a pull request that is not eligible for merging yet :: $ eb --merge-pr 4725 == temporary log file in case of crash /tmp/eb-ba7rVp/easybuild-fBfcwN.log easybuilders/easybuild-easyconfigs PR #4725 was submitted by vanzod, you are using GitHub account 'example' Checking eligibility of easybuilders/easybuild-easyconfigs PR #4725 for merging... * targets develop branch: OK * test suite passes: FAILED => not eligible for merging! * last test report is successful: (no test reports found) => not eligible for merging! * approved review: MISSING => not eligible for merging! * milestone is set: no milestone found => not eligible for merging! WARNING: Review indicates this PR should not be merged (use -f/--force to do so anyway) When a PR is considered eligible for merging, EasyBuild will go ahead and merge it:: $ eb --merge-pr 4829 == temporary log file in case of crash /tmp/eb-F9a3oB/easybuild-3B2wdq.log easybuilders/easybuild-easyconfigs PR #4829 was submitted by SethosII, you are using GitHub account 'example' Checking eligibility of easybuilders/easybuild-easyconfigs PR #4829 for merging... * targets develop branch: OK * test suite passes: OK * last test report is successful: OK * approved review: OK (by boegel) * milestone is set: OK (3.3.1) Review OK, merging pull request! Adding comment to easybuild-easyconfigs issue #4829: 'Going in, thanks @SethosII!' Merged easybuilders/easybuild-easyconfigs pull request #4829 .. note :: ``eb --merge-pr`` can also be run in dry run mode, by also using one of the following options: ``--dry-run`` , ``-D`` , ``--extended-dry-run`` , ``-x`` . This results in the same checks being performed but skips the actual merging of the pull request, resulting in messages like :: $ eb --merge-pr 4829 --dry-run ... Review OK, merging pull request! [DRY RUN] Adding comment to easybuild-easyconfigs issue #4829: 'Going in, thanks @SethosII!' [DRY RUN] Merged easybuilders/easybuild-easyconfigs pull request #4829 .. _github_new_update_pr: Submitting new and updating pull requests (``--new-pr``, ``--update-pr``) ------------------------------------------------------------------------- *(supported since EasyBuild v2.6.0)* EasyBuild provides two simple yet powerful features that make contributing to the central EasyBuild repositories significantly easier and less error-prone, especially for people who are not very familiar with ``git`` and/or GitHub yet: * ``--new-pr`` to create new pull requests * ``--update-pr`` to update existing pull requests .. _github_preview_pr: Previewing easyconfig pull requests (``--preview-pr``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *(supported since EasyBuild v3.5.0)* It is very useful to quickly see how easyconfig files in pull requests differ from existing easyconfig files, and to maintain consistency across easyconfig files where desired. Maintainers will use ``--review-pr`` as part of the review process once the PR is submitted (see :ref: `github_review_pr` ), but it is now possible to preview that output before submitting a PR, eventually fixing any inconsistencies in advance. To preview a PR before submitting, simply use ``--preview-pr`` with the list of files to submit :: $ eb --preview-pr example.eb example.patch Besides accepting local files instead of a PR number, ``--preview-pr`` works the same as ``--review-pr`` , as described in :ref: `contributing_review_process_review_pr` . .. _github_new_pr: Submitting pull requests (``--new-pr``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: Submitting pull requests using ``--new-pr`` only works for the ``easybuild-easyconfigs`` repository, for now. For other repositories, see the manual procedure documented at :ref: `contributing_pull_requests` . To create a new pull request, the ``--new-pr`` command line option can be used, provided that the necessary requirements are fulfilled (see :ref: `github_requirements` ). In its simplest form, you just provide the location of the file(s) that you want to include in the pull request :: $ eb --new-pr test.eb This takes care of all the steps required to make a contribution, i.e.: * set up a working copy of the relevant EasyBuild repository (e.g., ``easybuild-easyconfigs`` ) * create a new 'feature' branch, starting from the up-to-date ``develop`` branch * renaming easyconfig files according to their ``name`` , ``version`` , ``versionsuffix`` and ``toolchain`` * moving easyconfig files to the right location in the repository (e.g. ``easybuild/easyconfigs/e/EasyBuild/`` ) * staging and committing the files in the feature branch * pushing the feature branch to your fork of the relevant EasyBuild repository on GitHub * creating the pull request, targeting the ``develop`` branch of the central EasyBuild repository (e.g. ``easybuilders/easybuild-easyconfigs`` ) It should be clear that automating this whole procedure with a single simple ``eb`` command greatly lowers the bar for contributing, especially since it even alleviates the need for interacting directly with ``git`` entirely! The working copy of the EasyBuild repository is created in a temporary location, and cleaned up once the pull request has been created. EasyBuild does *not* make changes to an existing working copy you may have in place already (cfr. :ref: `github_git_working_dirs_path` ). .. note :: When modifying existing files via ``--new-pr`` , you *must* specify a (meaningful) commit message using ``--pr-commit-msg`` , see :ref: `github_controlling_pr_metadata` . Example +++++++ For example, to create a pull request for a new version of, let's say, EasyBuild :: $ eb --new-pr example.eb == temporary log file in case of crash /tmp/eb-mWKR9u/easybuild-cTpf2W.log == copying /home/example/git-working-dirs/easybuild-easyconfigs... == fetching branch 'develop' from https://github.com/easybuilders/easybuild-easyconfigs.git... Opening pull request * target: easybuilders/easybuild-easyconfigs:develop * from: boegel/easybuild-easyconfigs:20160530131447_new_pr_EasyBuild281 * title: \"{tools}[dummy/dummy] EasyBuild v2.8.1\" * description: \"\"\" (created using `eb --new-pr`) \"\"\" * overview of changes: .../easyconfigs/e/EasyBuild/EasyBuild-2.8.1.eb | 35 ++++++++++++++++++++++ 1 file changed, 35 insertions(+) Opened pull request: https://github.com/easybuilders/easybuild-easyconfigs/pull/3153 Yes, it's that easy! .. _github_update_pr: Updating existing pull requests (``--update-pr``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. note :: Updating pull requests using ``--update-pr`` only works for the ``easybuild-easyconfigs`` repository, for now. For other repositories, see the manual procedure documented at :ref: `contributing_pull_requests` . Similarly to creating new pull requests, existing pull requests can be easily updated using ``eb --update-pr`` (regardless of whether or not they were created with ``--new-pr`` ). The usage is equally simple, for example to update pull request ``#1234`` just list the changed/new file(s) :: $ eb --update-pr 1234 example.eb Again, this take care of the whole procedure required to update an existing pull request: * set up a working copy of the relevant EasyBuild repository (e.g., ``easybuild-easyconfigs`` ) * determining the branch corresponding to the pull request, which should be updated by pushing a new commit to it * checking out that branch * renaming easyconfig files according to their ``name`` , ``version`` , ``versionsuffix`` and ``toolchain`` * moving easyconfig files to the right location in the repository (e.g. ``easybuild/easyconfigs/e/EasyBuild/`` ) * staging and committing the (changed/new) files * pushing the updated branch to GitHub Again, not a single ``git`` command to be executed; the only thing that is required is the ID of the pull request that should be updated. Just like with ``--new-pr`` , this is done in a temporary working copy of the repository, no changes are made to a possible existing working copy. .. note :: When using ``--update-pr`` you *must* specify a (meaningful) commit message via ``--pr-commit-msg`` , see :ref: `github_controlling_pr_metadata` . Example +++++++ For example, to update pull request #3153 with a changed easyconfig file :: eb --update-pr 3153 example.eb == temporary log file in case of crash /tmp/eb-gO2wJu/easybuild-37Oo2z.log == Determined branch name corresponding to easybuilders/easybuild-easyconfigs PR #3153: 20160530131447_new_pr_EasyBuild281 == copying /home/example/git-working-dirs/easybuild-easyconfigs... == fetching branch '20160530131447_new_pr_EasyBuild281' from https://github.com/boegel/easybuild-easyconfigs.git... Overview of changes: easybuild/easyconfigs/e/EasyBuild/EasyBuild-2.8.1.eb | 3 +++ 1 file changed, 3 insertions(+) Updated easybuilders/easybuild-easyconfigs PR #3159 by pushing to branch boegel/20160530131447_new_pr_EasyBuild281 .. _github_new_update_pr_patches: Including patch files in easyconfigs pull requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next to providing one or more easyconfig files to add/update via ``--new-pr`` or ``--update-pr`` , you can also include patch files that are required by those easyconfig files. EasyBuild will try and figure out where each patch file should be located (i.e. in the same directory as the easyconfig files that require that patch file), by scanning the provided easyconfigs (or, if needed, scanning *all* existing easyconfig files). For example :: eb --new-pr example.eb example.patch --pr-commit-msg \"just an example\" .. note :: When providing one or more patch files, you *must* specify a (meaningful) commit message via ``--pr-commit-msg`` , see :ref: `github_controlling_pr_metadata` . .. _github_new_update_pr_delete: Deleting easyconfig files or patches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next to adding easyconfigs files or patches, or modifying existing ones, you can also specify to *delete* particular files, by including a colon character ``:`` before the name of the file. For example :: eb --new-pr :example-1.0.eb --pr-commit-msg \"delete example-1.0.eb easyconfig file\" .. note :: When deleting existing files, you *must* specify a custom commit message using ``--pr-commit-msg`` , see also :ref: `github_controlling_pr_metadata` . .. _github_controlling_pr_metadata: Controlling pull request metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can control the metadata for pull requests using the following configuration options: * ``--pr-branch-name`` : branch name for new pull requests * ``--pr-commit-msg`` : commit message to use when creating new or updating existing pull requests * ``--pr-descr`` : pull request description * ``--pr-title`` : pull request title EasyBuild will use sensible defaults for each of these, see below. Default branch name for new pull requests +++++++++++++++++++++++++++++++++++++++++ The branch name for new pull requests will be composed from: * a timestamp, down to the second in an attempt to make it unique * example: ``20160513141133`` for a pull request created on May 13th 2016, 2:11:33 PM * a label ``new_pr`` * the software name and version of the first easyconfig file, with some filtering (e.g. remove ``.`` 's) * example: ``GCC530`` for GCC v5.3.0 Full example: ``20160513141133_new_pr_GCC530`` Although there is usually no reason to change this default, it can be done if desired using ``--pr-branch-name`` when opening a new pull request with ``--new-pr`` . Default commit message ++++++++++++++++++++++ EasyBuild will try to generate an appropriate default commit message when only new easyconfigs are being added via ``--new-pr`` . When existing easyconfigs are being modified, patch files are being added/updated or ``--update-pr`` is used, a custom (meaningful) commit message *must* be provided via ``--pr-commit-msg`` (see :ref: `github_controlling_pr_metadata` ). Default pull request description ++++++++++++++++++++++++++++++++ By default, the pull description will only contain the following text :: (created using eb --new-pr) It is generally advised to provide more descriptive information, although the changes made by the pull request may be self-explanatory (e.g. when only adding new easyconfig files). To change this default text, you can either use ``--pr-descr`` or edit the description via the GitHub interface after the pull request has been opened. Particularly useful information to specify here is dependencies on other pull requests, by copy-pasting the respective URLs with a short descriptive message like ' ``depends on PR <URL>`` '. Default pull request title ++++++++++++++++++++++++++ The pull request title is derived from the easyconfig files being changed/added, taking into account the recommendation for easyconfig pull requests to clearly specify module class, toolchain, software name/version, as follows: ``{<module_class>}[<toolchain>] <software_name> v<software_version>`` . For example, when opening a pull request for an easyconfig for Python 2.7.11 with the ``intel/2016a`` toolchain, the default pull request title will be something like: ``{lang}[intel/2016a] Python v2.7.11`` . If multiple easyconfig files are provided, the respective software names/versions will be included separated by a ``,`` , up until the first 3 easyconfig files (to avoid excessively lengthy pull request titles). In case (only) existing easyconfig files are being changed, it's advisable to provide a more descriptive title using ``--pr-title`` . .. _github_configuring_new_update_pr: Configuring ``--new-pr`` and ``--update-pr`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ By default, ``--new-pr`` and ``--update-pr`` affect pull requests to the central ``easybuilders/easybuild-easyconfigs`` repository. However, this can be changed with the following configurations options: * ``--pr-target-account`` (default: ``easybuilders`` ): target GitHub account for new pull requests * ``--pr-target-branch`` (default: ``develop`` ): target branch for new pull requests * ``--pr-target-repo`` (default: ``easybuild-easyconfigs`` ): target repository for new pull requests .. _github_synergy_new_update_pr_dry_run: Synergy with ``--dry-run``/``-D`` and ``--extended-dry-run``/``-x`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Both ``--new-pr`` and ``--update-pr`` are 'dry run-aware', in the sense that you can combine them with either ``--dry-run`` / ``-D-`` or ``--extended-dry-run`` / ``-x`` to preview the pull request they would create/update without actually doing so. For example :: $ eb --new-pr EasyBuild-2.9.0.eb -D == temporary log file in case of crash /tmp/eb-1ny69k/easybuild-UR1Wr4.log == copying /home/example/git-working-dirs/easybuild-easyconfigs... == fetching branch 'develop' from https://github.com/easybuilders/easybuild-easyconfigs.git... Opening pull request [DRY RUN] * target: easybuilders/easybuild-easyconfigs:develop * from: boegel/easybuild-easyconfigs:20160603105641_new_pr_EasyBuild290 * title: \"{tools}[dummy/dummy] EasyBuild v2.9.0\" * description: \"\"\" (created using `eb --new-pr`) \"\"\" * overview of changes: .../easyconfigs/e/EasyBuild/EasyBuild-2.9.0.eb | 35 ++++++++++++++++++++++ 1 file changed, 35 insertions(+) The only difference between using ``--dry-run`` and ``--extended-dry-run`` is that the latter will show the full diff of the changes (equivalent to ``git diff`` ), while the former will only show a summary of the changes (equivalent to ``git diff --stat`` , see example above).","title":"Integration with GitHub"},{"location":"locks/","text":"Locks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Locks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Locks.rst in easybuilders/easybuild repo target: docs/locks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _locks: Locks to prevent duplicate installations running at the same time ================================================================= Easybuild creates a lock before starting the installation of an easyconfig file, to avoid a collision between multiple installations running at the same time. If an EasyBuild session tries to install an easyconfig file when a lock for that installation already exists, it will be automatically aborted with an error like \" ``Lock ... already exists, aborting!`` \". .. note :: Locking of installations was implemented in EasyBuild version 4.2.0 . .. contents :: :depth: 3 :backlinks: none .. _locks_implementation: Locking implementation details ------------------------------ Easybuild will create a lock when starting an installation if no corresponding lock exists yet, regardless of whether the installation was requested explicitly or is performed to resolve a dependency. The name of the lock corresponds to the *full* path of the installation directory, with slashes ( ``/`` ) and dashes ( ``-`` ) replaced by underscores ( ``_`` ), and with an additional ``.lock`` added at the end. Locks are created in the :ref: `locks_dir` . The lock created by EasyBuild is an empty directory (rather than a file), because that can be created more atomically on modern filesystems. For example, if ``OpenFOAM-7-foss-2019b.eb`` is being installed to ``/apps/easybuild/software`` , an empty directory that serves as a lock for this installation will be created at ``/apps/easybuild/software/.locks/_apps_easybuild_software_OpenFOAM_7_foss_2019b.lock`` (assuming the default :ref: `locks_dir` is used). A lock is automatically removed by Easybuild when the installation ends, regardless of whether the installation was successful or not. Therefore, new installations of the same easyconfig will be aborted in case of: * another installation for the same easyconfig is in progress; * a previous installation of the same easyconfig was abruptly interrupted; .. _locks_removing: Removing locks -------------- If a previous installation was abruptly interrupted and a lock was left in place, it can be easily removed using the ``rmdir`` command (since the lock is actually an empty directory). .. _locks_configuration_options: Configuration options related to installation locks --------------------------------------------------- The behaviour of the locking mechanism in Easybuild can be tuned with the following configuration options: .. _locks_ignore: Ignoring locks (``--ignore-locks``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``--ignore-locks`` configuration option, you can instruct EasyBuild to ignore any existing locks. Locks that exist are left untouched, even if the installation completes successfully. **Use this with caution, since installations may be (partially) overwritten if another EasyBuild session is also performing those installations!** .. _locks_wait: Waiting for locks to be removed (``--wait-on-lock``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``--wait-on-lock`` configuration option, you can change how EasyBuild deals with existing locks, by specifying how frequently EasyBuild should check whether an existing lock was removed. By specifying a non-zero value ``S`` , you can indicate how many seconds EasyBuild should wait before checking again whether the lock is still in place. .. note :: EasyBuild will wait indefinitely for an existing lock to be removed if ``--wait-on-lock`` is set to a non-zero value... If the lock is never removed, the EasyBuild session will never terminate; it will keep checking every ``S`` seconds whether the lock is still in place. By default, EasyBuild will *abort* the installation with an error like \" ``Lock ... already exists, aborting!`` \" if a corresponding lock already exists, which is equivalent to setting ``--wait-on-lock`` to zero ( ``0`` ), implying that no waiting should be done at all. .. _locks_dir: Locks directory --------------- If desired, an alternate location where locks should be created and checked for can be specified via the ``--locks-dir`` configuration option. .. note :: Keep in mind that a path on a *shared* filesystem should be used, to ensure that active EasyBuild sessions running on different systems use the same locks directory. By default, locks are created in a hidden subdirectory ``.locks`` in the top-level ``software`` installation directory; that is, the ``software`` subdirectory of the ``installpath`` configuration setting of the active EasyBuild session.","title":"Locks"},{"location":"locks/#locks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Locks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Locks.rst in easybuilders/easybuild repo target: docs/locks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _locks: Locks to prevent duplicate installations running at the same time ================================================================= Easybuild creates a lock before starting the installation of an easyconfig file, to avoid a collision between multiple installations running at the same time. If an EasyBuild session tries to install an easyconfig file when a lock for that installation already exists, it will be automatically aborted with an error like \" ``Lock ... already exists, aborting!`` \". .. note :: Locking of installations was implemented in EasyBuild version 4.2.0 . .. contents :: :depth: 3 :backlinks: none .. _locks_implementation: Locking implementation details ------------------------------ Easybuild will create a lock when starting an installation if no corresponding lock exists yet, regardless of whether the installation was requested explicitly or is performed to resolve a dependency. The name of the lock corresponds to the *full* path of the installation directory, with slashes ( ``/`` ) and dashes ( ``-`` ) replaced by underscores ( ``_`` ), and with an additional ``.lock`` added at the end. Locks are created in the :ref: `locks_dir` . The lock created by EasyBuild is an empty directory (rather than a file), because that can be created more atomically on modern filesystems. For example, if ``OpenFOAM-7-foss-2019b.eb`` is being installed to ``/apps/easybuild/software`` , an empty directory that serves as a lock for this installation will be created at ``/apps/easybuild/software/.locks/_apps_easybuild_software_OpenFOAM_7_foss_2019b.lock`` (assuming the default :ref: `locks_dir` is used). A lock is automatically removed by Easybuild when the installation ends, regardless of whether the installation was successful or not. Therefore, new installations of the same easyconfig will be aborted in case of: * another installation for the same easyconfig is in progress; * a previous installation of the same easyconfig was abruptly interrupted; .. _locks_removing: Removing locks -------------- If a previous installation was abruptly interrupted and a lock was left in place, it can be easily removed using the ``rmdir`` command (since the lock is actually an empty directory). .. _locks_configuration_options: Configuration options related to installation locks --------------------------------------------------- The behaviour of the locking mechanism in Easybuild can be tuned with the following configuration options: .. _locks_ignore: Ignoring locks (``--ignore-locks``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``--ignore-locks`` configuration option, you can instruct EasyBuild to ignore any existing locks. Locks that exist are left untouched, even if the installation completes successfully. **Use this with caution, since installations may be (partially) overwritten if another EasyBuild session is also performing those installations!** .. _locks_wait: Waiting for locks to be removed (``--wait-on-lock``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``--wait-on-lock`` configuration option, you can change how EasyBuild deals with existing locks, by specifying how frequently EasyBuild should check whether an existing lock was removed. By specifying a non-zero value ``S`` , you can indicate how many seconds EasyBuild should wait before checking again whether the lock is still in place. .. note :: EasyBuild will wait indefinitely for an existing lock to be removed if ``--wait-on-lock`` is set to a non-zero value... If the lock is never removed, the EasyBuild session will never terminate; it will keep checking every ``S`` seconds whether the lock is still in place. By default, EasyBuild will *abort* the installation with an error like \" ``Lock ... already exists, aborting!`` \" if a corresponding lock already exists, which is equivalent to setting ``--wait-on-lock`` to zero ( ``0`` ), implying that no waiting should be done at all. .. _locks_dir: Locks directory --------------- If desired, an alternate location where locks should be created and checked for can be specified via the ``--locks-dir`` configuration option. .. note :: Keep in mind that a path on a *shared* filesystem should be used, to ensure that active EasyBuild sessions running on different systems use the same locks directory. By default, locks are created in a hidden subdirectory ``.locks`` in the top-level ``software`` installation directory; that is, the ``software`` subdirectory of the ``installpath`` configuration setting of the active EasyBuild session.","title":"Locks"},{"location":"log-files/","text":"EasyBuild log files \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Logfiles.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Logfiles.rst in easybuilders/easybuild repo target: docs/log-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _understanding_easyBuild_logs: Understanding EasyBuild logs ============================= EasyBuild thoroughly keeps track of the executed build and install procedures. This page details some of the specifics, to help you making sense of them. Basic information ----------------- During an invocation of the ``eb`` command, a temporary log file is provided. This log can be consulted in case any problems occur during the process. Right before completing successfully, EasyBuild will clean up this temporary log file. A separate log file is created for each build and install procedure that is performed. After each successful installation, this application log file is copied to the install directory for future reference. By default, the application log file is copied to a subdirectory of the installation prefix named ``easybuild`` , and has a filename like ``easybuild-HPL-2.0-20141103.104412.log`` for example, which corresponds to the filename template ``easybuild-%(name)s-%(version)s-%(date)s.%(time)s.log`` . This aspect can be tweaked via the ``--logfile-format`` configuration option. Example :: $ eb HPL-2.0-goolf-1.4.10.eb == temporary log file in case of crash /tmp/easybuild-rHHgBu/easybuild-XD0Ae_.log [...] == building and installing HPL/2.0-goolf-1.4.10... [...] == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/.local/easybuild/software/HPL/2.0-goolf-1.4.10/easybuild/easybuild-HPL-2.0-20141103.104412.log == Build succeeded for 1 out of 1 == temporary log file /tmp/easybuild-rHHgBu/easybuild-XD0Ae_.log has been removed. == temporary directory /tmp/easybuild-rHHgBu has been removed. .. note :: Enabling debug mode using the ``--debug`` or ``-d`` command line option ensures that all details of the executed build and installation procedure are included in the log file, but will also result is significantly bigger and more verbose logs. .. tip :: Always include a reference to a log file (even if partial) when reporting a potential bug in EasyBuild. A particularly useful way of doing so is by creating a Gist (https://gist.github.com/), and sharing the corresponding URL. This is much better than sending a lengthy log file via email, since it can be easily shared across different communication channels (mailing list, IRC, IM, etc.). Navigating log files -------------------- Extracting the information you're interested in from an EasyBuild log file may be a daunting task, especially for debug logs. The information and guidelines in this section should make navigating logs less scary. Log message format ~~~~~~~~~~~~~~~~~~ Each log message as emitted by EasyBuild follows a well-defined format. Example :: == 2014-11-03 13:34:31,906 main.EB_HPL INFO This is EasyBuild 1.15.2 (framework: 1.15.2, easyblocks: 1.15.2) on host example. Each log line consists of the following parts: * a prefix label ``==`` , which is useful to discriminate between EasyBuild log messages and the output of executed shell commands; * date and time information (e.g., ``2014-11-03 13:34:31,906`` ); * the Python module/class/function that is responsible for the log message (e.g., ``main.EB_HPL`` ); * the log level (e.g., ``INFO`` ); * and a string with the actual log message at the end Useful handles in log files ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next to looking for a particular search pattern (e.g., ``[Ee]rror`` ), there are a couple of handles that can be used to jump around in log files. Step markers ^^^^^^^^^^^^ For each step performed in the build and installation process, corresponding log messages is emitted. For example :: == 2014-11-03 13:34:48,816 main.EB_HPL INFO configuring... == 2014-11-03 13:34:48,817 main.EB_HPL INFO Starting configure step [...] == 2014-11-03 13:34:48,823 main.EB_HPL INFO Running method configure_step part of step configure This allows you to navigate a log file step by step, for example using the ``_step`` search pattern. Executed shell commands ^^^^^^^^^^^^^^^^^^^^^^^ For each executed shell command, log messages are included with the full command line, the location where the command was executed and the command's output and exit code. For example :: == 2014-11-03 13:34:48,823 main.run DEBUG run_cmd: running cmd /bin/bash make_generic (in /tmp/user/easybuild_build/HPL/2.0/goolf-1.4.10/hpl-2.0/setup) == 2014-11-03 13:34:48,823 main.run DEBUG run_cmd: Command output will be logged to /tmp/easybuild-W85p4r/easybuild-run_cmd-XoJwMY.log == 2014-11-03 13:34:48,849 main.run INFO cmd \"/bin/bash make_generic\" exited with exitcode 0 and output: If you are primarily interested in the different commands as they were executed by EasyBuild, you can use ``INFO cmd`` (or ``run_cmd`` , in debug logs) as a search pattern. .. note :: Next to the configure/build/install commands, EasyBuild also runs a couple of other commands to obtain system information, or to query the modules tool. Typically, a single invocation of ``eb`` involves executing a dozen or so different shell commands, minimally.","title":"EasyBuild log files"},{"location":"log-files/#easybuild-log-files","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Logfiles.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Logfiles.rst in easybuilders/easybuild repo target: docs/log-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _understanding_easyBuild_logs: Understanding EasyBuild logs ============================= EasyBuild thoroughly keeps track of the executed build and install procedures. This page details some of the specifics, to help you making sense of them. Basic information ----------------- During an invocation of the ``eb`` command, a temporary log file is provided. This log can be consulted in case any problems occur during the process. Right before completing successfully, EasyBuild will clean up this temporary log file. A separate log file is created for each build and install procedure that is performed. After each successful installation, this application log file is copied to the install directory for future reference. By default, the application log file is copied to a subdirectory of the installation prefix named ``easybuild`` , and has a filename like ``easybuild-HPL-2.0-20141103.104412.log`` for example, which corresponds to the filename template ``easybuild-%(name)s-%(version)s-%(date)s.%(time)s.log`` . This aspect can be tweaked via the ``--logfile-format`` configuration option. Example :: $ eb HPL-2.0-goolf-1.4.10.eb == temporary log file in case of crash /tmp/easybuild-rHHgBu/easybuild-XD0Ae_.log [...] == building and installing HPL/2.0-goolf-1.4.10... [...] == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/.local/easybuild/software/HPL/2.0-goolf-1.4.10/easybuild/easybuild-HPL-2.0-20141103.104412.log == Build succeeded for 1 out of 1 == temporary log file /tmp/easybuild-rHHgBu/easybuild-XD0Ae_.log has been removed. == temporary directory /tmp/easybuild-rHHgBu has been removed. .. note :: Enabling debug mode using the ``--debug`` or ``-d`` command line option ensures that all details of the executed build and installation procedure are included in the log file, but will also result is significantly bigger and more verbose logs. .. tip :: Always include a reference to a log file (even if partial) when reporting a potential bug in EasyBuild. A particularly useful way of doing so is by creating a Gist (https://gist.github.com/), and sharing the corresponding URL. This is much better than sending a lengthy log file via email, since it can be easily shared across different communication channels (mailing list, IRC, IM, etc.). Navigating log files -------------------- Extracting the information you're interested in from an EasyBuild log file may be a daunting task, especially for debug logs. The information and guidelines in this section should make navigating logs less scary. Log message format ~~~~~~~~~~~~~~~~~~ Each log message as emitted by EasyBuild follows a well-defined format. Example :: == 2014-11-03 13:34:31,906 main.EB_HPL INFO This is EasyBuild 1.15.2 (framework: 1.15.2, easyblocks: 1.15.2) on host example. Each log line consists of the following parts: * a prefix label ``==`` , which is useful to discriminate between EasyBuild log messages and the output of executed shell commands; * date and time information (e.g., ``2014-11-03 13:34:31,906`` ); * the Python module/class/function that is responsible for the log message (e.g., ``main.EB_HPL`` ); * the log level (e.g., ``INFO`` ); * and a string with the actual log message at the end Useful handles in log files ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next to looking for a particular search pattern (e.g., ``[Ee]rror`` ), there are a couple of handles that can be used to jump around in log files. Step markers ^^^^^^^^^^^^ For each step performed in the build and installation process, corresponding log messages is emitted. For example :: == 2014-11-03 13:34:48,816 main.EB_HPL INFO configuring... == 2014-11-03 13:34:48,817 main.EB_HPL INFO Starting configure step [...] == 2014-11-03 13:34:48,823 main.EB_HPL INFO Running method configure_step part of step configure This allows you to navigate a log file step by step, for example using the ``_step`` search pattern. Executed shell commands ^^^^^^^^^^^^^^^^^^^^^^^ For each executed shell command, log messages are included with the full command line, the location where the command was executed and the command's output and exit code. For example :: == 2014-11-03 13:34:48,823 main.run DEBUG run_cmd: running cmd /bin/bash make_generic (in /tmp/user/easybuild_build/HPL/2.0/goolf-1.4.10/hpl-2.0/setup) == 2014-11-03 13:34:48,823 main.run DEBUG run_cmd: Command output will be logged to /tmp/easybuild-W85p4r/easybuild-run_cmd-XoJwMY.log == 2014-11-03 13:34:48,849 main.run INFO cmd \"/bin/bash make_generic\" exited with exitcode 0 and output: If you are primarily interested in the different commands as they were executed by EasyBuild, you can use ``INFO cmd`` (or ``run_cmd`` , in debug logs) as a search pattern. .. note :: Next to the configure/build/install commands, EasyBuild also runs a couple of other commands to obtain system information, or to query the modules tool. Typically, a single invocation of ``eb`` involves executing a dozen or so different shell commands, minimally.","title":"EasyBuild log files"},{"location":"maintainers/","text":"EasyBuild maintainers \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Maintainers.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Maintainers.rst in easybuilders/easybuild repo target: docs/maintainers.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _maintainers: EasyBuild maintainers ===================== This page provides an overview of the current maintainers of the EasyBuild repositories. .. contents :: :depth: 3 :backlinks: none .. _maintainers_criteria: Criteria -------- EasyBuild maintainers should meet the following criteria: * being sufficiently familiar with the contribution procedure (see :ref: `contributing` ) * frequently contributing to the EasyBuild GitHub repositories * being an active member of the EasyBuild community for a significant amount of time, i.e.: * following the EasyBuild mailing list and participating in discussions (see :ref: `getting_help` ) * actively participating in the EasyBuild IRC or Slack channel (see :ref: `getting_help` ); * (occasionally) joining in on the EasyBuild conference calls (see https://github.com/easybuilders/easybuild/wiki/Conference-calls) * having access to a working setup for submitting test reports (see :ref: `contributing_review_process_test_reports` ) .. _maintainers_roles: Roles ----- .. _maintainers_release_manager: Release managers ~~~~~~~~~~~~~~~~ The release managers are responsible for releasing new stable EasyBuild versions on a regular basis, with the help of the other EasyBuild maintainers. Sebastian, Miguel & Kenneth have been working together to get EasyBuild releases out the door on a regular basis (about once every 6 weeks, see https://pypi.org/project/easybuild/#history). * **Sebastian Achilles** ( `JSC <http://www.fz-juelich.de/ias/jsc/EN> `_ ) * GitHub: `@SebastianAchilles <https://github.com/SebastianAchilles> `_ - e-mail: ``s.achilles (at) fz-juelich.de`` - IRC/Slack: ``Sebastian Achilles`` * **Miguel Dias Costa** (National University of Singapore) * GitHub: `@migueldiascosta <https://github.com/migueldiascosta> `_ - e-mail: ``migueldiascosta (at) nus.edu.sg`` - IRC/Slack: ``migueldiascosta`` * **Kenneth Hoste** ( `HPC-UGent <http://www.ugent.be/hpc/en> `_ ) * GitHub: `@boegel <https://github.com/boegel> `_ - e-mail: ``kenneth.hoste (at) ugent.be`` - IRC/Slack: ``boegel`` .. _maintainers_easybuild_repo: Maintainers ~~~~~~~~~~~ The EasyBuild maintainers all have admin access to the different EasyBuild GitHub repositories: * https://github.com/easybuilders/easybuild (documentation (http://easybuild.readthedocs.io), EasyBuild website, `easybuild` metapackage) * https://github.com/easybuilders/easybuild-framework (EasyBuild framework) * https://github.com/easybuilders/easybuild-easyblocks (central repository for easyblocks) * https://github.com/easybuilders/easybuild-easyconfigs (central repository for easyconfigs) (maintainers are listed in alphabetical order, by last name) * **Sebastian Achilles** ( `JSC <http://www.fz-juelich.de/ias/jsc/EN> `_ ) * GitHub: `@SebastianAchilles <https://github.com/SebastianAchilles> `_ - e-mail: ``s.achilles (at) fz-juelich.de`` - IRC/Slack: ``Sebastian Achilles`` * **Damian Alvarez** ( `JSC <http://www.fz-juelich.de/ias/jsc/EN> `_ ) * GitHub: `@damianam <https://github.com/damianam> `_ - e-mail: ``d.alvarez (at) fz-juelich.de`` - IRC/Slack: ``dalvarez`` * **Simon Branford** ( `BEAR - University of Birmingham <https://intranet.birmingham.ac.uk/bear> `_ ) * GitHub: `@branfosj <https://github.com/branfosj> `_ - e-mail: ``s.j.branford (at) bham.ac.uk`` - IRC/Slack: ``Simon`` * **Miguel Dias Costa** (National University of Singapore) * GitHub: `@migueldiascosta <https://github.com/migueldiascosta> `_ - e-mail: ``migueldiascosta (at) nus.edu.sg`` - IRC/Slack: ``migueldiascosta`` * **Alex Domingo** ( `Vrije Universiteit Brussel <https://hpc.vub.be> `_ ) * GitHub: `@lexming <https://github.com/lexming> `_ - e-mail: ``alex.domingo.toro (at) vub.be`` - IRC/Slack: ``lexming`` * **Bob Dr\u00f6ge** ( `University of Groningen <https://www.rug.nl/?lang=en> `_ ) * GitHub: `@bedroge <https://github.com/bedroge> `_ - e-mail: ``b.e.droge (at) rug.nl`` - IRC/Slack: ``Bob Dr\u00f6ge`` * **Pablo Escobar** ( `sciCORE, University of Basel <https://scicore.unibas.ch/> `_ ) * GitHub: `@pescobar <https://github.com/pescobar> `_ - e-mail: ``pablo.escobarlopez (at) unibas.ch`` - IRC/Slack: ``pescobar`` * **Fotis Georgatos** ( `SDSC <https://datascience.ch/> `_ ) * GitHub: `@fgeorgatos <https://github.com/fgeorgatos> `_ - e-mail: ``kefalonia (at) gmail.com`` - IRC/Slack: ``fotis`` * **Jasper Grimm** ( `University or York <https://www.york.ac.uk/it-services/research-computing/> `_ ) * GitHub: `@jfgrimm <https://github.com/jfgrimm> `_ - e-mail: ``jasper.grimm (at) york.ac.uk`` - IRC/Slack: ``Jasper`` * **Bal\u00e1zs Hajgat\u00f3** ( `HPC-UGent <http://www.ugent.be/hpc/en> `_ ) * GitHub: `@hajgato <https://github.com/hajgato> `_ - e-mail: ``balazs.hajgato (at) ugent.be`` - IRC/Slack: ``hajgato`` * **Kenneth Hoste** ( `HPC-UGent <http://www.ugent.be/hpc/en> `_ ) * GitHub: `@boegel <https://github.com/boegel> `_ - e-mail: ``kenneth.hoste (at) ugent.be`` - IRC/Slack: ``boegel`` * **Adam Huffman** ( `Big Data Institute, University of Oxford <https://www.bdi.ox.ac.uk/> `_ ) * GitHub: `@verdurin <https://github.com/verdurin> `_ - e-mail: ``adam.huffman (at) gmail.com`` - IRC/Slack: ``verdurin`` * **Samuel Moors** ( `Vrije Universiteit Brussel <https://hpc.vub.be> `_ ) * GitHub: `@smoors <https://github.com/smoors> `_ - e-mail: ``samuel.moors (at) vub.be`` - IRC/Slack: ``smoors`` * **Alan O'Cais** ( `CECAM <https://www.cecam.org/> `_ ) * GitHub: `@ocaisa <https://github.com/ocaisa> `_ - e-mail: ``alan.ocais (at) cecam.org`` - IRC/Slack: ``ocaisa`` * **Mikael \u00d6hman** ( `Chalmers University of Technology <https://www.chalmers.se/en> `_ ) * GitHub: `@Micket <https://github.com/Micket> `_ - e-mail: ``micketeer (at) gmail.com`` - IRC/Slack: ``micketeer`` * **Bart Oldeman** ( `ComputeCanada <https://www.computecanada.ca/> `_ ) * GitHub: `@bartoldeman <https://github.com/bartoldeman> `_ - e-mail: ``bart.oldeman (at) calculquebec.ca`` - IRC/Slack: ``bartoldeman`` * **Ward Poelmans** ( `Vrije Universiteit Brussel <https://hpc.vub.be> `_ ) * GitHub: `@wpoely86 <https://github.com/wpoely86> `_ - e-mail: ``wpoely86 (at) gmail.com`` - IRC/Slack: ``wpoely86`` * **\u00c5ke Sandgren** ( `Ume\u00e5 University, Sweden <http://www.umu.se/english/> `_ ) * GitHub: `@akesandgren <https://github.com/akesandgren> `_ - e-mail: ``ake.sandgren (at) hpc2n.umu.se`` - IRC/Slack: ``ake_s`` * **Caspar Van Leeuwen** ( `SURFsara, Netherlands <https://www.surf.nl/en/research-ict> `_ ) * GitHub: `@casparvl <https://github.com/casparvl> `_ - e-mail: ``caspar.vanleeuwen (at) surfsara.nl`` - IRC/Slack: ``Caspar Van Leeuwen`` * **Davide Vanzo** ( `Microsoft <https://www.microsoft.com/> `_ ) * GitHub: `@vanzod <https://github.com/vanzod> `_ - e-mail: ``davide.vanzo (at) microsoft.com`` - IRC/Slack: ``vanzod`` * **Lars Viklund** ( `Ume\u00e5 University, Sweden <http://www.umu.se/english/> `_ ) * GitHub: `@zao <https://github.com/zao> `_ - e-mail: ``lars.viklund (at) umu.se`` - IRC/Slack: ``zao``","title":"EasyBuild maintainers"},{"location":"maintainers/#easybuild-maintainers","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Maintainers.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Maintainers.rst in easybuilders/easybuild repo target: docs/maintainers.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _maintainers: EasyBuild maintainers ===================== This page provides an overview of the current maintainers of the EasyBuild repositories. .. contents :: :depth: 3 :backlinks: none .. _maintainers_criteria: Criteria -------- EasyBuild maintainers should meet the following criteria: * being sufficiently familiar with the contribution procedure (see :ref: `contributing` ) * frequently contributing to the EasyBuild GitHub repositories * being an active member of the EasyBuild community for a significant amount of time, i.e.: * following the EasyBuild mailing list and participating in discussions (see :ref: `getting_help` ) * actively participating in the EasyBuild IRC or Slack channel (see :ref: `getting_help` ); * (occasionally) joining in on the EasyBuild conference calls (see https://github.com/easybuilders/easybuild/wiki/Conference-calls) * having access to a working setup for submitting test reports (see :ref: `contributing_review_process_test_reports` ) .. _maintainers_roles: Roles ----- .. _maintainers_release_manager: Release managers ~~~~~~~~~~~~~~~~ The release managers are responsible for releasing new stable EasyBuild versions on a regular basis, with the help of the other EasyBuild maintainers. Sebastian, Miguel & Kenneth have been working together to get EasyBuild releases out the door on a regular basis (about once every 6 weeks, see https://pypi.org/project/easybuild/#history). * **Sebastian Achilles** ( `JSC <http://www.fz-juelich.de/ias/jsc/EN> `_ ) * GitHub: `@SebastianAchilles <https://github.com/SebastianAchilles> `_ - e-mail: ``s.achilles (at) fz-juelich.de`` - IRC/Slack: ``Sebastian Achilles`` * **Miguel Dias Costa** (National University of Singapore) * GitHub: `@migueldiascosta <https://github.com/migueldiascosta> `_ - e-mail: ``migueldiascosta (at) nus.edu.sg`` - IRC/Slack: ``migueldiascosta`` * **Kenneth Hoste** ( `HPC-UGent <http://www.ugent.be/hpc/en> `_ ) * GitHub: `@boegel <https://github.com/boegel> `_ - e-mail: ``kenneth.hoste (at) ugent.be`` - IRC/Slack: ``boegel`` .. _maintainers_easybuild_repo: Maintainers ~~~~~~~~~~~ The EasyBuild maintainers all have admin access to the different EasyBuild GitHub repositories: * https://github.com/easybuilders/easybuild (documentation (http://easybuild.readthedocs.io), EasyBuild website, `easybuild` metapackage) * https://github.com/easybuilders/easybuild-framework (EasyBuild framework) * https://github.com/easybuilders/easybuild-easyblocks (central repository for easyblocks) * https://github.com/easybuilders/easybuild-easyconfigs (central repository for easyconfigs) (maintainers are listed in alphabetical order, by last name) * **Sebastian Achilles** ( `JSC <http://www.fz-juelich.de/ias/jsc/EN> `_ ) * GitHub: `@SebastianAchilles <https://github.com/SebastianAchilles> `_ - e-mail: ``s.achilles (at) fz-juelich.de`` - IRC/Slack: ``Sebastian Achilles`` * **Damian Alvarez** ( `JSC <http://www.fz-juelich.de/ias/jsc/EN> `_ ) * GitHub: `@damianam <https://github.com/damianam> `_ - e-mail: ``d.alvarez (at) fz-juelich.de`` - IRC/Slack: ``dalvarez`` * **Simon Branford** ( `BEAR - University of Birmingham <https://intranet.birmingham.ac.uk/bear> `_ ) * GitHub: `@branfosj <https://github.com/branfosj> `_ - e-mail: ``s.j.branford (at) bham.ac.uk`` - IRC/Slack: ``Simon`` * **Miguel Dias Costa** (National University of Singapore) * GitHub: `@migueldiascosta <https://github.com/migueldiascosta> `_ - e-mail: ``migueldiascosta (at) nus.edu.sg`` - IRC/Slack: ``migueldiascosta`` * **Alex Domingo** ( `Vrije Universiteit Brussel <https://hpc.vub.be> `_ ) * GitHub: `@lexming <https://github.com/lexming> `_ - e-mail: ``alex.domingo.toro (at) vub.be`` - IRC/Slack: ``lexming`` * **Bob Dr\u00f6ge** ( `University of Groningen <https://www.rug.nl/?lang=en> `_ ) * GitHub: `@bedroge <https://github.com/bedroge> `_ - e-mail: ``b.e.droge (at) rug.nl`` - IRC/Slack: ``Bob Dr\u00f6ge`` * **Pablo Escobar** ( `sciCORE, University of Basel <https://scicore.unibas.ch/> `_ ) * GitHub: `@pescobar <https://github.com/pescobar> `_ - e-mail: ``pablo.escobarlopez (at) unibas.ch`` - IRC/Slack: ``pescobar`` * **Fotis Georgatos** ( `SDSC <https://datascience.ch/> `_ ) * GitHub: `@fgeorgatos <https://github.com/fgeorgatos> `_ - e-mail: ``kefalonia (at) gmail.com`` - IRC/Slack: ``fotis`` * **Jasper Grimm** ( `University or York <https://www.york.ac.uk/it-services/research-computing/> `_ ) * GitHub: `@jfgrimm <https://github.com/jfgrimm> `_ - e-mail: ``jasper.grimm (at) york.ac.uk`` - IRC/Slack: ``Jasper`` * **Bal\u00e1zs Hajgat\u00f3** ( `HPC-UGent <http://www.ugent.be/hpc/en> `_ ) * GitHub: `@hajgato <https://github.com/hajgato> `_ - e-mail: ``balazs.hajgato (at) ugent.be`` - IRC/Slack: ``hajgato`` * **Kenneth Hoste** ( `HPC-UGent <http://www.ugent.be/hpc/en> `_ ) * GitHub: `@boegel <https://github.com/boegel> `_ - e-mail: ``kenneth.hoste (at) ugent.be`` - IRC/Slack: ``boegel`` * **Adam Huffman** ( `Big Data Institute, University of Oxford <https://www.bdi.ox.ac.uk/> `_ ) * GitHub: `@verdurin <https://github.com/verdurin> `_ - e-mail: ``adam.huffman (at) gmail.com`` - IRC/Slack: ``verdurin`` * **Samuel Moors** ( `Vrije Universiteit Brussel <https://hpc.vub.be> `_ ) * GitHub: `@smoors <https://github.com/smoors> `_ - e-mail: ``samuel.moors (at) vub.be`` - IRC/Slack: ``smoors`` * **Alan O'Cais** ( `CECAM <https://www.cecam.org/> `_ ) * GitHub: `@ocaisa <https://github.com/ocaisa> `_ - e-mail: ``alan.ocais (at) cecam.org`` - IRC/Slack: ``ocaisa`` * **Mikael \u00d6hman** ( `Chalmers University of Technology <https://www.chalmers.se/en> `_ ) * GitHub: `@Micket <https://github.com/Micket> `_ - e-mail: ``micketeer (at) gmail.com`` - IRC/Slack: ``micketeer`` * **Bart Oldeman** ( `ComputeCanada <https://www.computecanada.ca/> `_ ) * GitHub: `@bartoldeman <https://github.com/bartoldeman> `_ - e-mail: ``bart.oldeman (at) calculquebec.ca`` - IRC/Slack: ``bartoldeman`` * **Ward Poelmans** ( `Vrije Universiteit Brussel <https://hpc.vub.be> `_ ) * GitHub: `@wpoely86 <https://github.com/wpoely86> `_ - e-mail: ``wpoely86 (at) gmail.com`` - IRC/Slack: ``wpoely86`` * **\u00c5ke Sandgren** ( `Ume\u00e5 University, Sweden <http://www.umu.se/english/> `_ ) * GitHub: `@akesandgren <https://github.com/akesandgren> `_ - e-mail: ``ake.sandgren (at) hpc2n.umu.se`` - IRC/Slack: ``ake_s`` * **Caspar Van Leeuwen** ( `SURFsara, Netherlands <https://www.surf.nl/en/research-ict> `_ ) * GitHub: `@casparvl <https://github.com/casparvl> `_ - e-mail: ``caspar.vanleeuwen (at) surfsara.nl`` - IRC/Slack: ``Caspar Van Leeuwen`` * **Davide Vanzo** ( `Microsoft <https://www.microsoft.com/> `_ ) * GitHub: `@vanzod <https://github.com/vanzod> `_ - e-mail: ``davide.vanzo (at) microsoft.com`` - IRC/Slack: ``vanzod`` * **Lars Viklund** ( `Ume\u00e5 University, Sweden <http://www.umu.se/english/> `_ ) * GitHub: `@zao <https://github.com/zao> `_ - e-mail: ``lars.viklund (at) umu.se`` - IRC/Slack: ``zao``","title":"EasyBuild maintainers"},{"location":"manipulating-dependencies/","text":"Manipulating dependencies \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Manipulating_dependencies.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Manipulating_dependencies.rst in easybuilders/easybuild repo target: docs/manipulating-dependencies.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _manipulating_dependencies: Manipulating dependencies ========================= A couple of different ways are available to manipulate the list of dependencies that are specified for the software packages being installed. .. contents :: :depth: 3 :backlinks: none .. _filter_deps: Filtering out dependencies using ``--filter-deps`` -------------------------------------------------- To avoid that certain dependencies are being installed, a list of software names can be specified to ``--filter-deps`` . Any time a dependency with a name from this list is specified, it will be simply filtered out by EasyBuild, and thus disregarded when resolving dependencies, loading modules for the dependencies in the build environment, and including ' ``module load`` ' statements in the generated module files. This can be useful when particular tools and libraries are already provided by OS packages (or in some other way), and should not be reinstalled as modules by EasyBuild. For example: * overview of dependencies of HDF5:: $ eb HDF5-1.8.13-intel-2015a.eb -D ... * [ ] $CFGS/i/intel/intel-2015a.eb (module: intel/2015a) * [ ] $CFGS/z/zlib/zlib-1.2.8-intel-2015a.eb (module: zlib/1.2.8-intel-2015a) * [ ] $CFGS/s/Szip/Szip-2.1-intel-2015a.eb (module: Szip/2.1-intel-2015a) * [ ] $CFGS/h/HDF5/HDF5-1.8.13-intel-2015a.eb (module: HDF5/1.8.13-intel-2015a) * overview of dependencies of HDF5, with zlib and Szip excluded:: $ eb HDF5-1.8.13-intel-2015a.eb --filter-deps=zlib,Szip -D ... * [ ] $CFGS/i/intel/intel-2015a.eb (module: intel/2015a) * [ ] $CFGS/h/HDF5/HDF5-1.8.13-intel-2015a.eb (module: HDF5/1.8.13-intel-2015a) .. _filter_deps_by_version: Filtering dependencies based on version ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v3.8.0, filtering dependencies based on their version is also supported. For each entry in ``--filter-deps`` , the expected format is either: * ``<name>`` : a software name without any version specification, to indicate that this dependency should *always* be filtered out (regardless of its version) * examples: ``X11`` , ``zlib`` * ``<name>=<version>`` : a software name and version, to indicate that a *particular version* of this dependency should be filtered out * examples: ``zlib=1.2.8`` , ``ncurses=5.9`` * ``<name>=<lower_limit>:<upper_limit>`` : a software name and a version range, to indicate that any version of this dependency that falls *within the specified range* should be filtered out When a version range is specified, a lower limit and/or upper limit *can* be specified (separated by ``:`` ). In other words, the version range can be open ended. The ``:`` separator is strictly required. For both limits, you *must* indicate whether it is either: * *inclusive* , by using ``[`` for the lower limit, and ``]`` for the upper limit * *exclusive* , by using ``]`` for the lower limit, and ``[`` for the upper limit Examples: * to filter out ``zlib`` version ``1.2`` up until ``1.2.99`` (incl.), use: ``zlib=[1.2:1.2.99]`` * to filter out ``ncurses`` version 5.0 or newer, use: ``ncurses=[5.0:`` * to filter out any version of ``CMake`` that is older than ``4.0`` , use: ``CMake=:4.0[`` .. _hide_deps: Installing dependencies as hidden modules using ``--hide-deps`` --------------------------------------------------------------- Selected software packages can be marked to be installed as hidden modules (i.e., modules that are not visible via ' ``module avail`` ', but can be loaded) whenever they are included as a dependency, via the ``--hide-deps`` configuration option. For example (note the preceding ' ``.`` ' in the last part of the module names for zlib and Szip) :: $ eb HDF5-1.8.13-intel-2015a.eb --hide-deps=zlib,Szip -D ... * [ ] $CFGS/i/intel/intel-2015a.eb (module: intel/2015a) * [ ] $CFGS/z/zlib/zlib-1.2.8-intel-2015a.eb (module: zlib/.1.2.8-intel-2015a) * [ ] $CFGS/s/Szip/Szip-2.1-intel-2015a.eb (module: Szip/.2.1-intel-2015a) * [ ] $CFGS/h/HDF5/HDF5-1.8.13-intel-2015a.eb (module: HDF5/1.8.13-intel-2015a) .. note :: Using Lmod (version >= 5.7.5), hidden modules can be made visible in the output of ' ``module avail`` ' using the ``--show-hidden`` option. For example :: $ module avail bzip2 Use \"module spider\" to find all possible modules. Use \"module keyword key1 key2 ...\" to search for all possible modules matching any of the \"keys\". $ module --show-hidden avail bzip2 ----- /home/example/.local/easybuild/modules/all ----- bzip2/.1.0.6 Use \"module spider\" to find all possible modules. Use \"module keyword key1 key2 ...\" to search for all possible modules matching any of the \"keys\". .. _minimal_toolchains: Using minimal toolchains for dependencies ----------------------------------------- By default, EasyBuild will try to resolve dependencies using the same toolchain as the one that is used for the software being installed, unless a specific toolchain is specified for the dependency itself (see :ref: `dependency_specs` ). Using the ``--minimal-toolchains`` configuration option, you can instruct EasyBuild to consider subtoolchains for dependencies in the reverse order (from the bottom of the toolchain hierarchy to the top). This can be useful to refrain from having to frequently hardcode specific toolchains in order to avoid having the same dependency version installed with multiple toolchains that are compatible with each other. Although hardcoding the toolchain for dependencies will work fine, it severely limits the power of other EasyBuild features, like ``--try-toolchain`` for example. When instructed to use minimal toolchains, EasyBuild will check whether an easyconfig file is available (in the robot search path, see :ref: `robot_search_path` ) for that dependency using the different subtoolchains of the toolchain specified for the 'parent' software. Subtoolchains are considered 'bottom-up', i.e. starting with the most minimal subtoolchain (typically a compiler-only toolchain), and then climbing up towards the toolchain that is specified for the software being installed. Note that if a specific toolchain is specified for a particular dependency, EasyBuild will stick to using it, even when instructed to use minimal toolchains. Also note that as of v3.0, if no easyconfig exists to resolve a dependency using the default toolchain EasyBuild will search for the dependency using a compatible subtoolchain (the difference being that the search order is from the top of the toolchain hierarchy to the bottom). .. _minimal_toolchains_system: Considering ``system`` as minimal toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The :ref: `system_toolchain` is only considered as the most minimal subtoolchain if the ``--add-system-to-minimal-toolchains`` configuration option is enabled. By default, this configuration option is *disabled* . .. _minimal_toolchains_existing_modules: Taking existing modules into account ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can instruct EasyBuild to take existing modules into account when determining which subtoolchain should be used for each of the dependencies, using the ``--use-existing-modules`` configuration option. By default existing modules are ignored, meaning that the EasyBuild dependency resolution mechanism will pick a minimal toolchain for each dependency solely based on the available easyconfig files (if the ``--minimal-toolchains`` configuration option is enabled, that is). With ``--use-existing-modules`` enabled, EasyBuild will first check whether modules exist for the dependencies that were built with the toolchain or any of the subtoolchains (searching top-down). If so, the toolchain of the first encountered existing module will determine the toolchain being selected. If not, the toolchain to use will be determined based on the available easyconfig files. .. _minimal_toolchains_example: Example ~~~~~~~ Consider the following (partial) easyconfig file for Python v2.7.9 with the ``foss/2015b`` toolchain :: name = 'Python' version = '2.7.9' toolchain = {'name': 'foss', 'version': '2015b'} dependencies = [ ('zlib', '1.2.8'), ] When the ``--minimal-toolchains`` configuration option is enabled, EasyBuild will also consider the subtoolchains ``GCC/4.9.3`` and ``gompi/2015b`` of the ``foss/2015b`` toolchain (in that order) as potential minimal toolchains when determining the toolchain to use for dependencies. So, for the zlib v1.2.8 dependency included in the example above, the following scenarios are possible: * without the use of ``--minimal-toolchains`` , the default behaviour of EasyBuild is to first consider the ``foss/2015b`` toolchain for zlib v1.2.8, if no such easyconfig file is found, it will continue searching using the ``gompi/2015b`` toolchain, and finally the ``GCC/4.9.3`` toolchain * if (only) ``--minimal-toolchains`` is enabled, EasyBuild will search for an easyconfig file for zlib v1.2.8 using the ``GCC/4.9.3`` toolchain; if no such easyconfig file is found, it will continue searching using the ``gompi/2015b`` toolchain, and finally the ``foss/2015b`` toolchain * if ``--add-system-to-minimal-toolchains`` is also enabled, EasyBuild will try locating an easyconfig file for zlib v1.2.8 that uses the ``system`` toolchain prior to considering the ``GCC/4.9.3`` toolchain * additionally, with ``--use-existing-modules`` enabled, EasyBuild will first check whether a ``zlib`` module for version 1.2.8 built with the (sub)toolchains being considered exists; if not, it will search for an easyconfig file for zlib as outlined above","title":"Manipulating dependencies"},{"location":"manipulating-dependencies/#manipulating-dependencies","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Manipulating_dependencies.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Manipulating_dependencies.rst in easybuilders/easybuild repo target: docs/manipulating-dependencies.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _manipulating_dependencies: Manipulating dependencies ========================= A couple of different ways are available to manipulate the list of dependencies that are specified for the software packages being installed. .. contents :: :depth: 3 :backlinks: none .. _filter_deps: Filtering out dependencies using ``--filter-deps`` -------------------------------------------------- To avoid that certain dependencies are being installed, a list of software names can be specified to ``--filter-deps`` . Any time a dependency with a name from this list is specified, it will be simply filtered out by EasyBuild, and thus disregarded when resolving dependencies, loading modules for the dependencies in the build environment, and including ' ``module load`` ' statements in the generated module files. This can be useful when particular tools and libraries are already provided by OS packages (or in some other way), and should not be reinstalled as modules by EasyBuild. For example: * overview of dependencies of HDF5:: $ eb HDF5-1.8.13-intel-2015a.eb -D ... * [ ] $CFGS/i/intel/intel-2015a.eb (module: intel/2015a) * [ ] $CFGS/z/zlib/zlib-1.2.8-intel-2015a.eb (module: zlib/1.2.8-intel-2015a) * [ ] $CFGS/s/Szip/Szip-2.1-intel-2015a.eb (module: Szip/2.1-intel-2015a) * [ ] $CFGS/h/HDF5/HDF5-1.8.13-intel-2015a.eb (module: HDF5/1.8.13-intel-2015a) * overview of dependencies of HDF5, with zlib and Szip excluded:: $ eb HDF5-1.8.13-intel-2015a.eb --filter-deps=zlib,Szip -D ... * [ ] $CFGS/i/intel/intel-2015a.eb (module: intel/2015a) * [ ] $CFGS/h/HDF5/HDF5-1.8.13-intel-2015a.eb (module: HDF5/1.8.13-intel-2015a) .. _filter_deps_by_version: Filtering dependencies based on version ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v3.8.0, filtering dependencies based on their version is also supported. For each entry in ``--filter-deps`` , the expected format is either: * ``<name>`` : a software name without any version specification, to indicate that this dependency should *always* be filtered out (regardless of its version) * examples: ``X11`` , ``zlib`` * ``<name>=<version>`` : a software name and version, to indicate that a *particular version* of this dependency should be filtered out * examples: ``zlib=1.2.8`` , ``ncurses=5.9`` * ``<name>=<lower_limit>:<upper_limit>`` : a software name and a version range, to indicate that any version of this dependency that falls *within the specified range* should be filtered out When a version range is specified, a lower limit and/or upper limit *can* be specified (separated by ``:`` ). In other words, the version range can be open ended. The ``:`` separator is strictly required. For both limits, you *must* indicate whether it is either: * *inclusive* , by using ``[`` for the lower limit, and ``]`` for the upper limit * *exclusive* , by using ``]`` for the lower limit, and ``[`` for the upper limit Examples: * to filter out ``zlib`` version ``1.2`` up until ``1.2.99`` (incl.), use: ``zlib=[1.2:1.2.99]`` * to filter out ``ncurses`` version 5.0 or newer, use: ``ncurses=[5.0:`` * to filter out any version of ``CMake`` that is older than ``4.0`` , use: ``CMake=:4.0[`` .. _hide_deps: Installing dependencies as hidden modules using ``--hide-deps`` --------------------------------------------------------------- Selected software packages can be marked to be installed as hidden modules (i.e., modules that are not visible via ' ``module avail`` ', but can be loaded) whenever they are included as a dependency, via the ``--hide-deps`` configuration option. For example (note the preceding ' ``.`` ' in the last part of the module names for zlib and Szip) :: $ eb HDF5-1.8.13-intel-2015a.eb --hide-deps=zlib,Szip -D ... * [ ] $CFGS/i/intel/intel-2015a.eb (module: intel/2015a) * [ ] $CFGS/z/zlib/zlib-1.2.8-intel-2015a.eb (module: zlib/.1.2.8-intel-2015a) * [ ] $CFGS/s/Szip/Szip-2.1-intel-2015a.eb (module: Szip/.2.1-intel-2015a) * [ ] $CFGS/h/HDF5/HDF5-1.8.13-intel-2015a.eb (module: HDF5/1.8.13-intel-2015a) .. note :: Using Lmod (version >= 5.7.5), hidden modules can be made visible in the output of ' ``module avail`` ' using the ``--show-hidden`` option. For example :: $ module avail bzip2 Use \"module spider\" to find all possible modules. Use \"module keyword key1 key2 ...\" to search for all possible modules matching any of the \"keys\". $ module --show-hidden avail bzip2 ----- /home/example/.local/easybuild/modules/all ----- bzip2/.1.0.6 Use \"module spider\" to find all possible modules. Use \"module keyword key1 key2 ...\" to search for all possible modules matching any of the \"keys\". .. _minimal_toolchains: Using minimal toolchains for dependencies ----------------------------------------- By default, EasyBuild will try to resolve dependencies using the same toolchain as the one that is used for the software being installed, unless a specific toolchain is specified for the dependency itself (see :ref: `dependency_specs` ). Using the ``--minimal-toolchains`` configuration option, you can instruct EasyBuild to consider subtoolchains for dependencies in the reverse order (from the bottom of the toolchain hierarchy to the top). This can be useful to refrain from having to frequently hardcode specific toolchains in order to avoid having the same dependency version installed with multiple toolchains that are compatible with each other. Although hardcoding the toolchain for dependencies will work fine, it severely limits the power of other EasyBuild features, like ``--try-toolchain`` for example. When instructed to use minimal toolchains, EasyBuild will check whether an easyconfig file is available (in the robot search path, see :ref: `robot_search_path` ) for that dependency using the different subtoolchains of the toolchain specified for the 'parent' software. Subtoolchains are considered 'bottom-up', i.e. starting with the most minimal subtoolchain (typically a compiler-only toolchain), and then climbing up towards the toolchain that is specified for the software being installed. Note that if a specific toolchain is specified for a particular dependency, EasyBuild will stick to using it, even when instructed to use minimal toolchains. Also note that as of v3.0, if no easyconfig exists to resolve a dependency using the default toolchain EasyBuild will search for the dependency using a compatible subtoolchain (the difference being that the search order is from the top of the toolchain hierarchy to the bottom). .. _minimal_toolchains_system: Considering ``system`` as minimal toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The :ref: `system_toolchain` is only considered as the most minimal subtoolchain if the ``--add-system-to-minimal-toolchains`` configuration option is enabled. By default, this configuration option is *disabled* . .. _minimal_toolchains_existing_modules: Taking existing modules into account ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can instruct EasyBuild to take existing modules into account when determining which subtoolchain should be used for each of the dependencies, using the ``--use-existing-modules`` configuration option. By default existing modules are ignored, meaning that the EasyBuild dependency resolution mechanism will pick a minimal toolchain for each dependency solely based on the available easyconfig files (if the ``--minimal-toolchains`` configuration option is enabled, that is). With ``--use-existing-modules`` enabled, EasyBuild will first check whether modules exist for the dependencies that were built with the toolchain or any of the subtoolchains (searching top-down). If so, the toolchain of the first encountered existing module will determine the toolchain being selected. If not, the toolchain to use will be determined based on the available easyconfig files. .. _minimal_toolchains_example: Example ~~~~~~~ Consider the following (partial) easyconfig file for Python v2.7.9 with the ``foss/2015b`` toolchain :: name = 'Python' version = '2.7.9' toolchain = {'name': 'foss', 'version': '2015b'} dependencies = [ ('zlib', '1.2.8'), ] When the ``--minimal-toolchains`` configuration option is enabled, EasyBuild will also consider the subtoolchains ``GCC/4.9.3`` and ``gompi/2015b`` of the ``foss/2015b`` toolchain (in that order) as potential minimal toolchains when determining the toolchain to use for dependencies. So, for the zlib v1.2.8 dependency included in the example above, the following scenarios are possible: * without the use of ``--minimal-toolchains`` , the default behaviour of EasyBuild is to first consider the ``foss/2015b`` toolchain for zlib v1.2.8, if no such easyconfig file is found, it will continue searching using the ``gompi/2015b`` toolchain, and finally the ``GCC/4.9.3`` toolchain * if (only) ``--minimal-toolchains`` is enabled, EasyBuild will search for an easyconfig file for zlib v1.2.8 using the ``GCC/4.9.3`` toolchain; if no such easyconfig file is found, it will continue searching using the ``gompi/2015b`` toolchain, and finally the ``foss/2015b`` toolchain * if ``--add-system-to-minimal-toolchains`` is also enabled, EasyBuild will try locating an easyconfig file for zlib v1.2.8 that uses the ``system`` toolchain prior to considering the ``GCC/4.9.3`` toolchain * additionally, with ``--use-existing-modules`` enabled, EasyBuild will first check whether a ``zlib`` module for version 1.2.8 built with the (sub)toolchains being considered exists; if not, it will search for an easyconfig file for zlib as outlined above","title":"Manipulating dependencies"},{"location":"packaging-support/","text":"Packaging support \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Packaging_support.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Packaging_support.rst in easybuilders/easybuild repo target: docs/packaging-support.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _packaging_support: Packaging support ================= .. contents :: :depth: 2 :backlinks: none .. note :: Packaging support was added as an experimental feature in EasyBuild v2.2.0 (cfr. :ref: `experimental_features` ). Since EasyBuild v2.5.0, it is considered stable. .. _packaging_prereq: Prerequisites ------------- EasyBuild leverages `FPM <https://github.com/jordansissel/fpm> `_ to create binary packages (RPMs, Debian files, etc.). Hence, FPM must be available in some way or another. One way is via EasyBuild, for example by installing a module for FPM using one of the available easyconfig files. EasyBuild will also take care of installing Ruby for you (which is required for FPM itself) :: $ export EASYBUILD_PREFIX=/home/example $ eb FPM-1.3.3-Ruby-2.1.6.eb --robot [...] == building and installing Ruby/2.1.6... [...] == COMPLETED: Installation ended successfully [...] == building and installing FPM/1.3.3-Ruby-2.1.6... [...] == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/FPM/1.3.3-Ruby-2.1.6/easybuild/easybuild-FPM-1.3.3-20150524.181859.log == Build succeeded for 2 out of 2 $ module load FPM/1.3.3-Ruby-2.1.6 $ fpm --version 1.3.3 .. _packaging_config: Configuration options --------------------- Several configuration options related to packaging support are available. * ``--package`` : * enables packaging; other options will be void unless this option is enabled * ``--package-tool=<tool>`` : * specifies which tool you wish to package with; for now, only ``fpm`` is supported (and is set as default) * ``--package-type=<type>`` : * specifies which type of package you wish to build, which is passed through to ``fpm`` (as target type); examples include: ``rpm`` (default), ``deb`` , ... (see https://github.com/jordansissel/fpm/wiki#overview) * ``--package-naming-scheme=<PNS>`` : * specifies which package naming scheme to use; default: ``EasyBuildPNS`` * ``--packagepath`` : * specifies destination path of packages being built * ``--package-release`` : * specifies the package release (default: ``1`` ); typically, this should be an integer value .. note :: Changing the package naming scheme should be done with caution. For example, RPM will only allow one package of a particular *name* to be installed, so if you wish multiple versions of a package to be installed at the same time you need to ensure variables like the software version are included in the package name. .. _packaging_usage: Usage ----- To make EasyBuild generate packages, just use ``--package`` . By default, this will make EasyBuild leverage FPM to create RPMs :: $ export EASYBUILD_PREFIX=/home/example $ eb --package Perl-5.20.1-GCC-4.9.2-bare.eb --robot [...] == building and installing Perl/5.20.1-GCC-4.9.2-bare... == fetching files... == creating build dir, resetting environment... == unpacking... == patching... == preparing... == configuring... == building... == testing... == installing... == taking care of extensions... == postprocessing... == sanity checking... == cleaning up... == creating module... == packaging... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/Perl/5.20.1-GCC-4.9.2-bare/easybuild/easybuild-Perl-5.20.1-20150527.023522.log == Build succeeded for 1 out of 1 Packages will be located in the directory indicated by the ``--packagepath`` configuration option; by default, this corresponds to ``$prefix/packages`` . By defauilt, the package will have the following properties :: $ rpm -qip --requires --provides /home/example/packages/Perl-5.20.1-GCC-4.9.2-bare.eb2.2.0-1.x86_64.rpm Name : Perl-5.20.1-GCC-4.9.2-bare Version : eb2.2.0 Release : 1 Architecture: x86_64 Install Date: (not installed) Group : default Size : 64539427 License : unknown Signature : (none) Source RPM : Perl-5.20.1-GCC-4.9.2-bare.eb2.2.0-1.x86_64.src.rpm Build Date : Tue 07 Jul 2015 11:27:54 PM EDT Build Host : 59e46bbf1cd0 Relocations : / Packager : <easybuild@59e46bbf1cd0> Vendor : easybuild@59e46bbf1cd0 URL : http://example.com/no-uri-given Summary : no description given Description : no description given GCC-4.9.2-dummy-dummy rpmlib(PartialHardlinkSets) <= 4.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1 rpmlib(CompressedFileNames) <= 3.0.4-1 Perl-5.20.1-GCC-4.9.2-bare Perl-5.20.1-GCC-4.9.2-bare = eb2.2.0-1 Perl-5.20.1-GCC-4.9.2-bare(x86-64) = eb2.2.0-1 .. _packaging_skip: Packaging existing installations -------------------------------- To create packages for existing software installations (performed using EasyBuild), combine ``--package`` with ``--skip --rebuild`` :: $ eb --package Perl-5.20.1-GCC-4.9.2-bare.eb --skip --rebuild [...] == building and installing Perl/5.20.1-GCC-4.9.2-bare... == fetching files... == creating build dir, resetting environment... == unpacking [skipped] == patching [skipped] == preparing... == configuring [skipped] == building [skipped] == testing [skipped] == installing [skipped] == taking care of extensions... == postprocessing [skipped] == sanity checking... == cleaning up... == creating module... == packaging... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/Perl/5.20.1-GCC-4.9.2-bare/easybuild/easybuild-Perl-5.20.1-20150527.041734.log == Build succeeded for 1 out of 1","title":"Packaging support"},{"location":"packaging-support/#packaging-support","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Packaging_support.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Packaging_support.rst in easybuilders/easybuild repo target: docs/packaging-support.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _packaging_support: Packaging support ================= .. contents :: :depth: 2 :backlinks: none .. note :: Packaging support was added as an experimental feature in EasyBuild v2.2.0 (cfr. :ref: `experimental_features` ). Since EasyBuild v2.5.0, it is considered stable. .. _packaging_prereq: Prerequisites ------------- EasyBuild leverages `FPM <https://github.com/jordansissel/fpm> `_ to create binary packages (RPMs, Debian files, etc.). Hence, FPM must be available in some way or another. One way is via EasyBuild, for example by installing a module for FPM using one of the available easyconfig files. EasyBuild will also take care of installing Ruby for you (which is required for FPM itself) :: $ export EASYBUILD_PREFIX=/home/example $ eb FPM-1.3.3-Ruby-2.1.6.eb --robot [...] == building and installing Ruby/2.1.6... [...] == COMPLETED: Installation ended successfully [...] == building and installing FPM/1.3.3-Ruby-2.1.6... [...] == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/FPM/1.3.3-Ruby-2.1.6/easybuild/easybuild-FPM-1.3.3-20150524.181859.log == Build succeeded for 2 out of 2 $ module load FPM/1.3.3-Ruby-2.1.6 $ fpm --version 1.3.3 .. _packaging_config: Configuration options --------------------- Several configuration options related to packaging support are available. * ``--package`` : * enables packaging; other options will be void unless this option is enabled * ``--package-tool=<tool>`` : * specifies which tool you wish to package with; for now, only ``fpm`` is supported (and is set as default) * ``--package-type=<type>`` : * specifies which type of package you wish to build, which is passed through to ``fpm`` (as target type); examples include: ``rpm`` (default), ``deb`` , ... (see https://github.com/jordansissel/fpm/wiki#overview) * ``--package-naming-scheme=<PNS>`` : * specifies which package naming scheme to use; default: ``EasyBuildPNS`` * ``--packagepath`` : * specifies destination path of packages being built * ``--package-release`` : * specifies the package release (default: ``1`` ); typically, this should be an integer value .. note :: Changing the package naming scheme should be done with caution. For example, RPM will only allow one package of a particular *name* to be installed, so if you wish multiple versions of a package to be installed at the same time you need to ensure variables like the software version are included in the package name. .. _packaging_usage: Usage ----- To make EasyBuild generate packages, just use ``--package`` . By default, this will make EasyBuild leverage FPM to create RPMs :: $ export EASYBUILD_PREFIX=/home/example $ eb --package Perl-5.20.1-GCC-4.9.2-bare.eb --robot [...] == building and installing Perl/5.20.1-GCC-4.9.2-bare... == fetching files... == creating build dir, resetting environment... == unpacking... == patching... == preparing... == configuring... == building... == testing... == installing... == taking care of extensions... == postprocessing... == sanity checking... == cleaning up... == creating module... == packaging... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/Perl/5.20.1-GCC-4.9.2-bare/easybuild/easybuild-Perl-5.20.1-20150527.023522.log == Build succeeded for 1 out of 1 Packages will be located in the directory indicated by the ``--packagepath`` configuration option; by default, this corresponds to ``$prefix/packages`` . By defauilt, the package will have the following properties :: $ rpm -qip --requires --provides /home/example/packages/Perl-5.20.1-GCC-4.9.2-bare.eb2.2.0-1.x86_64.rpm Name : Perl-5.20.1-GCC-4.9.2-bare Version : eb2.2.0 Release : 1 Architecture: x86_64 Install Date: (not installed) Group : default Size : 64539427 License : unknown Signature : (none) Source RPM : Perl-5.20.1-GCC-4.9.2-bare.eb2.2.0-1.x86_64.src.rpm Build Date : Tue 07 Jul 2015 11:27:54 PM EDT Build Host : 59e46bbf1cd0 Relocations : / Packager : <easybuild@59e46bbf1cd0> Vendor : easybuild@59e46bbf1cd0 URL : http://example.com/no-uri-given Summary : no description given Description : no description given GCC-4.9.2-dummy-dummy rpmlib(PartialHardlinkSets) <= 4.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1 rpmlib(CompressedFileNames) <= 3.0.4-1 Perl-5.20.1-GCC-4.9.2-bare Perl-5.20.1-GCC-4.9.2-bare = eb2.2.0-1 Perl-5.20.1-GCC-4.9.2-bare(x86-64) = eb2.2.0-1 .. _packaging_skip: Packaging existing installations -------------------------------- To create packages for existing software installations (performed using EasyBuild), combine ``--package`` with ``--skip --rebuild`` :: $ eb --package Perl-5.20.1-GCC-4.9.2-bare.eb --skip --rebuild [...] == building and installing Perl/5.20.1-GCC-4.9.2-bare... == fetching files... == creating build dir, resetting environment... == unpacking [skipped] == patching [skipped] == preparing... == configuring [skipped] == building [skipped] == testing [skipped] == installing [skipped] == taking care of extensions... == postprocessing [skipped] == sanity checking... == cleaning up... == creating module... == packaging... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/software/Perl/5.20.1-GCC-4.9.2-bare/easybuild/easybuild-Perl-5.20.1-20150527.041734.log == Build succeeded for 1 out of 1","title":"Packaging support"},{"location":"partial-installations/","text":"Partial installations \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Partial_installations.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Partial_installations.rst in easybuilders/easybuild repo target: docs/partial-installations.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _partial_installations: Partial installations ===================== Several ways of performing partial installations are supported. These may be useful when debugging a particular issue with the installation procedure being performed by EasyBuild, updating existing software installations or module files, or after changing the EasyBuild configuration (e.g., switching to module files in Lua syntax or a different module naming scheme). .. contents :: :depth: 3 :backlinks: none .. _partial_installation_stop: Stopping the installation procedure *after* a step using ``-s``/``--stop`` -------------------------------------------------------------------------- To stop the installation procedure *after* a specific step in the installation procedure, the ``-s`` / ``--stop`` command line option can be used; the name of the step must be supplied as an argument. The following step names are recognized (listed in execution order): ``fetch`` , ``ready`` , ``source`` , ``patch`` , ``prepare`` , ``configure`` , ``build`` , ``test`` , ``install`` , ``extensions`` , ``package`` , ``postproc`` , ``sanitycheck`` , ``cleanup`` , ``module`` , ``testcases`` . Example usage :: $ eb GCC-4.9.2.eb --stop configure == temporary log file in case of crash /tmp/eb-X2Z0b7/easybuild-mGxmNb.log == processing EasyBuild easyconfig /home/example/GCC-4.9.2.eb == building and installing GCC/4.9.2... == fetching files... == creating build dir, resetting environment... == unpacking... == patching... == preparing... == configuring... == COMPLETED: Installation STOPPED successfully == Results of the build can be found in the log file /dev/shm/example/GCC/4.9.2/dummy-dummy/easybuild/easybuild-GCC-4.9.2-20150430.091644.log == Build succeeded for 1 out of 1 == temporary log file(s) /tmp/eb-X2Z0b7/easybuild-mGxmNb.log* have been removed. == temporary directory /tmp/eb-X2Z0b7 has been removed. .. _partial_installation_fetch: Fetching sources with ``--fetch`` --------------------------------- It may be useful to be able to batch-download sources on a machine where no modules tool is installed. The ``--fetch`` option, which is equivalent with ``--stop fetch --ignore-osdeps`` , addresses this requirement. Example usage :: $ eb GCCcore-6.2.0.eb --fetch == temporary log file in case of crash /tmp/eb-1ZZX2b/easybuild-NSmm5P.log == processing EasyBuild easyconfig /home/example/GCCcore-6.2.0.eb == building and installing GCCcore/6.2.0... == fetching files... == COMPLETED: Installation STOPPED successfully == Results of the build can be found in the log file(s) /dev/shm/example/GCC/4.9.2/dummy-dummy/easybuild/easybuild-GCCcore-6.2.0-20180330.170523.log == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-1ZZX2b/easybuild-NSmm5P.log* have been removed. == Temporary directory /tmp/eb-1ZZX2b has been removed. .. note :: ``--fetch`` can be used in conjunction with the ``--robot`` and ``--robot-path`` options to download sources of the whole dependency tree of an easyconfig (see :ref: `use_robot` ). .. note :: Sources will be downloaded in the default location (see :ref: `sourcepath` ), unless EasyBuild is configured via the ``--sourcepath`` option. .. _partial_installation_skip: Installing additional extensions using ``-k``/``-skip`` ------------------------------------------------------- For software applications that may include :ref: `extensions` , it is often required to install one or more additional extensions without having to reinstall the software package (and all extensions) from scratch. For this purpose, the ``-k`` / ``--skip`` command line option is available. To actually skip an existing software installation and all installed extensions, a corresponding module must be available already; if not, the installation procedure will be performed from scratch. To trigger the installation of missing extensions, ``--rebuild`` ( or ``--force`` , see :ref: `_force_option` ) must be used as well; without it, the installation procedure will be skipped as a whole (since the module is already available). When ``--skip`` is combined with ``--rebuild`` , EasyBuild will: i) ensure that all (extension) sources are available (and try to fetch them if needed); ii) prepare the build environment; iii) check which extensions have not been installed yet; iv) install the missing extensions; v) run the sanity check (which includes checking that all extensions are available) vi) regenerate the module file (since it contains a list of installed extensions) Example usage :: $ eb Python-2.7.9-intel-2015a.eb --skip ... == Python/2.7.9-intel-2015a is already installed (module found), skipping == No easyconfigs left to be built. == Build succeeded for 0 out of 0 .. code :: $ eb Python-2.7.9-intel-2015a.eb --skip --rebuild ... == building and installing Python/2.7.9-intel-2015a... ... == configuring [skipped] == building [skipped] == testing [skipped] == installing [skipped] == taking care of extensions... ... == sanity checking... == cleaning up... == creating module... == COMPLETED: Installation ended successfully .. note :: Upgrading of extensions to a newer version does not work (yet) using ``--skip`` , because the way in which extensions are checked for availability, i.e. the extensions filter, is (usually) version-agnogstic. .. note :: The ' ``skipsteps`` ' easyconfig parameter has a different purpose, i.e. to specify which installation steps should *always* be skipped when the installation of a particular software package is performed, no matter whether the software or corresponding module is already available or not. .. note :: When ``--skip`` is used, a backup is created for all existing module files that are regenerated. To disable backing up of module files, use ``--disable-backup-modules`` (see also :ref: `backup_modules` ). .. _module_only: Only (re)generating (additional) module files using ``--module-only`` --------------------------------------------------------------------- Since EasyBuild v2.1, it is possible to only (re)generate the module file that matches the specifications in the easyconfig file, using ``--module-only`` . Depending on the use case, additional options should be supplied. Usually ``--rebuild`` is also required, either to ignore the existing module file (if the module is available under the same name as the one being (re)generated), or to skip the sanity check that verifies the software installation (if no software installation is available). Combining ``--module-only`` with ``--installpath-modules`` is also a common use case, to generate the module file in a (test) location other than the software installation prefix (see :ref: `installpath` ). .. note :: Although ``--module-only`` was already supported in EasyBuild v2.1.0, we strongly recommend to use EasyBuild v2.1.1 or a more recent version, because of some critical bug fixes with respect to ``--module-only`` (see :ref: `release_notes_eb211` ). Use cases: * :ref: `module_only_only_regenerate` * :ref: `module_only_additional` .. note :: When ``--module-only`` is used, a backup is created for all existing module files that are regenerated. To disable backing up of module files, use ``--disable-backup-modules`` (see also :ref: `backup_modules` ). .. _module_only_only_regenerate: Only (re)generating (existing) module file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To only generate a module file (i.e., skip actually building and installing the software), or to regenerate an existing module file, ``--module-only`` can be used. In the former case, enabling ``--rebuild`` is required because the sanity check step that verifies whether the installation produced the expected files and/or directories is not skipped unless forced. In the latter case, ``--rebuild`` must be used to make EasyBuild ignore that the module is already available according to the modules tool. Example usage: * only generate module file:: $ module avail GCC ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 $ eb GCC-5.1.0.eb --module-only --rebuild ... == building and installing GCC/5.1.0... == fetching files [skipped] ... == configuring [skipped] == building [skipped] == testing [skipped] == installing [skipped] ... == sanity checking [skipped] == cleaning up [skipped] == creating module... == COMPLETED: Installation ended successfully ... $ module avail GCC ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 GCC/5.1.0 * regenerate existing module file:: $ module avail GCC/4.8.2 ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 $ ls -l /home/example/.local/modules/all/GCC/4.8.2 -rw-rw-r-- 1 example example 1002 Jan 11 17:19 /home/example/.local/modules/all/GCC/4.8.2 $ eb GCC-4.8.2.eb --module-only --rebuild ... == building and installing GCC/4.8.2... ... == sanity checking [skipped] == creating module... == COMPLETED: Installation ended successfully ... $ ls -l /home/example/.local/modules/all/GCC/4.8.2 -rw-rw-r-- 1 example example 1064 Apr 30 10:54 /home/example/.local/modules/all/GCC/4.8.2 .. _module_only_additional: Generating additional module files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Generating an additional module file, next to the one(s) already available, is also supported. This can achieved by combining ``--module-only`` with additional configuration options that apply to the module generation. Examples: * to generate a module file in Lua syntax, next to an already existing module file in Tcl syntax, ``--module-only --module-syntax=Lua`` can be used :: $ module avail GCC/4.8.2 ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 $ ls -l /home/example/.local/modules/all/GCC/4.8.2* -rw-rw-r-- 1 example example 1064 Apr 30 10:54 /home/example/.local/modules/all/GCC/4.8.2 $ eb GCC-4.8.2.eb --modules-tool=Lmod --module-only --module-syntax=Lua --rebuild ... == building and installing GCC/4.8.2... ... == sanity checking [skipped] == creating module... == COMPLETED: Installation ended successfully ... $ ls -l /home/example/.local/modules/all/GCC/4.8.2* -rw-rw-r-- 1 example example 1064 Apr 30 10:54 /home/example/.local/modules/all/GCC/4.8.2 -rw-rw-r-- 1 example example 1249 Apr 30 11:56 /home/example/.local/modules/all/GCC/4.8.2.lua .. note :: Since only Lmod can consume module files in Lua syntax, it must be used as a modules tool; see also :ref: `module_syntax` . Only changing the syntax of the module file does not affect the module name, so Lmod will report the module as being available. Hence, ``--rebuild`` must be used here as well. * to generate a module file using a different naming scheme, ``--module-only`` can be combined with ``--module-naming-scheme`` :: $ eb --installpath-modules=$HOME/test/modules --module-only --module-naming-scheme=HierarchicalMNS --rebuild ... == building and installing Core/GCC/4.8.2... ... == sanity checking [skipped] == creating module... == COMPLETED: Installation ended successfully $ module unuse $HOME/.local/modules/all $ module use $HOME/test/modules/all $ module avail ---------------------------- /home/example/test/modules/all ---------------------------- Core/GCC/4.8.2 .. note :: Modules that are generated used different module naming schemes should *never* be mixed, hence the use of ``--installpath-modules`` , see also :ref: `installpath_direct_options` . .. note :: The modules files generated using the specified module naming scheme will most likely **not** be tied to an existing software installation in this case (unless the software installation was already there somehow), since the name of the subdirectory of the software installation prefix is also governed by the active module naming scheme. This is also why ``--rebuild`` must be used in the example above (to skip the sanity check that verifies the software installation). Thus, this is only useful to assess how the module tree would look like under a particular module naming scheme; the modules themselves are useless since they point to empty installation directories. To tie a module file generated using to an existing software installation that was performed under a different module naming scheme, a simple module naming scheme can be implemented that mixes two modules naming schemes, by providing the name of the software installation subdirectory using one scheme, and the module names (and other metadata for module files) with the other. An example of such a module naming scheme is ``MigrateFromEBToHMNS`` , which allows to generate module files using the hierarchical module naming scheme implemented by ``HierarchicalMNS`` for the software installed in subdirectories following the default EasyBuild module naming scheme ``EasyBuildMNS`` . The ``MigrateFromEBToHMNS`` module naming scheme is available since EasyBuild v2.2.0.","title":"Partial installations"},{"location":"partial-installations/#partial-installations","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Partial_installations.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Partial_installations.rst in easybuilders/easybuild repo target: docs/partial-installations.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _partial_installations: Partial installations ===================== Several ways of performing partial installations are supported. These may be useful when debugging a particular issue with the installation procedure being performed by EasyBuild, updating existing software installations or module files, or after changing the EasyBuild configuration (e.g., switching to module files in Lua syntax or a different module naming scheme). .. contents :: :depth: 3 :backlinks: none .. _partial_installation_stop: Stopping the installation procedure *after* a step using ``-s``/``--stop`` -------------------------------------------------------------------------- To stop the installation procedure *after* a specific step in the installation procedure, the ``-s`` / ``--stop`` command line option can be used; the name of the step must be supplied as an argument. The following step names are recognized (listed in execution order): ``fetch`` , ``ready`` , ``source`` , ``patch`` , ``prepare`` , ``configure`` , ``build`` , ``test`` , ``install`` , ``extensions`` , ``package`` , ``postproc`` , ``sanitycheck`` , ``cleanup`` , ``module`` , ``testcases`` . Example usage :: $ eb GCC-4.9.2.eb --stop configure == temporary log file in case of crash /tmp/eb-X2Z0b7/easybuild-mGxmNb.log == processing EasyBuild easyconfig /home/example/GCC-4.9.2.eb == building and installing GCC/4.9.2... == fetching files... == creating build dir, resetting environment... == unpacking... == patching... == preparing... == configuring... == COMPLETED: Installation STOPPED successfully == Results of the build can be found in the log file /dev/shm/example/GCC/4.9.2/dummy-dummy/easybuild/easybuild-GCC-4.9.2-20150430.091644.log == Build succeeded for 1 out of 1 == temporary log file(s) /tmp/eb-X2Z0b7/easybuild-mGxmNb.log* have been removed. == temporary directory /tmp/eb-X2Z0b7 has been removed. .. _partial_installation_fetch: Fetching sources with ``--fetch`` --------------------------------- It may be useful to be able to batch-download sources on a machine where no modules tool is installed. The ``--fetch`` option, which is equivalent with ``--stop fetch --ignore-osdeps`` , addresses this requirement. Example usage :: $ eb GCCcore-6.2.0.eb --fetch == temporary log file in case of crash /tmp/eb-1ZZX2b/easybuild-NSmm5P.log == processing EasyBuild easyconfig /home/example/GCCcore-6.2.0.eb == building and installing GCCcore/6.2.0... == fetching files... == COMPLETED: Installation STOPPED successfully == Results of the build can be found in the log file(s) /dev/shm/example/GCC/4.9.2/dummy-dummy/easybuild/easybuild-GCCcore-6.2.0-20180330.170523.log == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-1ZZX2b/easybuild-NSmm5P.log* have been removed. == Temporary directory /tmp/eb-1ZZX2b has been removed. .. note :: ``--fetch`` can be used in conjunction with the ``--robot`` and ``--robot-path`` options to download sources of the whole dependency tree of an easyconfig (see :ref: `use_robot` ). .. note :: Sources will be downloaded in the default location (see :ref: `sourcepath` ), unless EasyBuild is configured via the ``--sourcepath`` option. .. _partial_installation_skip: Installing additional extensions using ``-k``/``-skip`` ------------------------------------------------------- For software applications that may include :ref: `extensions` , it is often required to install one or more additional extensions without having to reinstall the software package (and all extensions) from scratch. For this purpose, the ``-k`` / ``--skip`` command line option is available. To actually skip an existing software installation and all installed extensions, a corresponding module must be available already; if not, the installation procedure will be performed from scratch. To trigger the installation of missing extensions, ``--rebuild`` ( or ``--force`` , see :ref: `_force_option` ) must be used as well; without it, the installation procedure will be skipped as a whole (since the module is already available). When ``--skip`` is combined with ``--rebuild`` , EasyBuild will: i) ensure that all (extension) sources are available (and try to fetch them if needed); ii) prepare the build environment; iii) check which extensions have not been installed yet; iv) install the missing extensions; v) run the sanity check (which includes checking that all extensions are available) vi) regenerate the module file (since it contains a list of installed extensions) Example usage :: $ eb Python-2.7.9-intel-2015a.eb --skip ... == Python/2.7.9-intel-2015a is already installed (module found), skipping == No easyconfigs left to be built. == Build succeeded for 0 out of 0 .. code :: $ eb Python-2.7.9-intel-2015a.eb --skip --rebuild ... == building and installing Python/2.7.9-intel-2015a... ... == configuring [skipped] == building [skipped] == testing [skipped] == installing [skipped] == taking care of extensions... ... == sanity checking... == cleaning up... == creating module... == COMPLETED: Installation ended successfully .. note :: Upgrading of extensions to a newer version does not work (yet) using ``--skip`` , because the way in which extensions are checked for availability, i.e. the extensions filter, is (usually) version-agnogstic. .. note :: The ' ``skipsteps`` ' easyconfig parameter has a different purpose, i.e. to specify which installation steps should *always* be skipped when the installation of a particular software package is performed, no matter whether the software or corresponding module is already available or not. .. note :: When ``--skip`` is used, a backup is created for all existing module files that are regenerated. To disable backing up of module files, use ``--disable-backup-modules`` (see also :ref: `backup_modules` ). .. _module_only: Only (re)generating (additional) module files using ``--module-only`` --------------------------------------------------------------------- Since EasyBuild v2.1, it is possible to only (re)generate the module file that matches the specifications in the easyconfig file, using ``--module-only`` . Depending on the use case, additional options should be supplied. Usually ``--rebuild`` is also required, either to ignore the existing module file (if the module is available under the same name as the one being (re)generated), or to skip the sanity check that verifies the software installation (if no software installation is available). Combining ``--module-only`` with ``--installpath-modules`` is also a common use case, to generate the module file in a (test) location other than the software installation prefix (see :ref: `installpath` ). .. note :: Although ``--module-only`` was already supported in EasyBuild v2.1.0, we strongly recommend to use EasyBuild v2.1.1 or a more recent version, because of some critical bug fixes with respect to ``--module-only`` (see :ref: `release_notes_eb211` ). Use cases: * :ref: `module_only_only_regenerate` * :ref: `module_only_additional` .. note :: When ``--module-only`` is used, a backup is created for all existing module files that are regenerated. To disable backing up of module files, use ``--disable-backup-modules`` (see also :ref: `backup_modules` ). .. _module_only_only_regenerate: Only (re)generating (existing) module file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To only generate a module file (i.e., skip actually building and installing the software), or to regenerate an existing module file, ``--module-only`` can be used. In the former case, enabling ``--rebuild`` is required because the sanity check step that verifies whether the installation produced the expected files and/or directories is not skipped unless forced. In the latter case, ``--rebuild`` must be used to make EasyBuild ignore that the module is already available according to the modules tool. Example usage: * only generate module file:: $ module avail GCC ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 $ eb GCC-5.1.0.eb --module-only --rebuild ... == building and installing GCC/5.1.0... == fetching files [skipped] ... == configuring [skipped] == building [skipped] == testing [skipped] == installing [skipped] ... == sanity checking [skipped] == cleaning up [skipped] == creating module... == COMPLETED: Installation ended successfully ... $ module avail GCC ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 GCC/5.1.0 * regenerate existing module file:: $ module avail GCC/4.8.2 ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 $ ls -l /home/example/.local/modules/all/GCC/4.8.2 -rw-rw-r-- 1 example example 1002 Jan 11 17:19 /home/example/.local/modules/all/GCC/4.8.2 $ eb GCC-4.8.2.eb --module-only --rebuild ... == building and installing GCC/4.8.2... ... == sanity checking [skipped] == creating module... == COMPLETED: Installation ended successfully ... $ ls -l /home/example/.local/modules/all/GCC/4.8.2 -rw-rw-r-- 1 example example 1064 Apr 30 10:54 /home/example/.local/modules/all/GCC/4.8.2 .. _module_only_additional: Generating additional module files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Generating an additional module file, next to the one(s) already available, is also supported. This can achieved by combining ``--module-only`` with additional configuration options that apply to the module generation. Examples: * to generate a module file in Lua syntax, next to an already existing module file in Tcl syntax, ``--module-only --module-syntax=Lua`` can be used :: $ module avail GCC/4.8.2 ---------------------------- /home/example/.local/modules/all ---------------------------- GCC/4.8.2 $ ls -l /home/example/.local/modules/all/GCC/4.8.2* -rw-rw-r-- 1 example example 1064 Apr 30 10:54 /home/example/.local/modules/all/GCC/4.8.2 $ eb GCC-4.8.2.eb --modules-tool=Lmod --module-only --module-syntax=Lua --rebuild ... == building and installing GCC/4.8.2... ... == sanity checking [skipped] == creating module... == COMPLETED: Installation ended successfully ... $ ls -l /home/example/.local/modules/all/GCC/4.8.2* -rw-rw-r-- 1 example example 1064 Apr 30 10:54 /home/example/.local/modules/all/GCC/4.8.2 -rw-rw-r-- 1 example example 1249 Apr 30 11:56 /home/example/.local/modules/all/GCC/4.8.2.lua .. note :: Since only Lmod can consume module files in Lua syntax, it must be used as a modules tool; see also :ref: `module_syntax` . Only changing the syntax of the module file does not affect the module name, so Lmod will report the module as being available. Hence, ``--rebuild`` must be used here as well. * to generate a module file using a different naming scheme, ``--module-only`` can be combined with ``--module-naming-scheme`` :: $ eb --installpath-modules=$HOME/test/modules --module-only --module-naming-scheme=HierarchicalMNS --rebuild ... == building and installing Core/GCC/4.8.2... ... == sanity checking [skipped] == creating module... == COMPLETED: Installation ended successfully $ module unuse $HOME/.local/modules/all $ module use $HOME/test/modules/all $ module avail ---------------------------- /home/example/test/modules/all ---------------------------- Core/GCC/4.8.2 .. note :: Modules that are generated used different module naming schemes should *never* be mixed, hence the use of ``--installpath-modules`` , see also :ref: `installpath_direct_options` . .. note :: The modules files generated using the specified module naming scheme will most likely **not** be tied to an existing software installation in this case (unless the software installation was already there somehow), since the name of the subdirectory of the software installation prefix is also governed by the active module naming scheme. This is also why ``--rebuild`` must be used in the example above (to skip the sanity check that verifies the software installation). Thus, this is only useful to assess how the module tree would look like under a particular module naming scheme; the modules themselves are useless since they point to empty installation directories. To tie a module file generated using to an existing software installation that was performed under a different module naming scheme, a simple module naming scheme can be implemented that mixes two modules naming schemes, by providing the name of the software installation subdirectory using one scheme, and the module names (and other metadata for module files) with the other. An example of such a module naming scheme is ``MigrateFromEBToHMNS`` , which allows to generate module files using the hierarchical module naming scheme implemented by ``HierarchicalMNS`` for the software installed in subdirectories following the default EasyBuild module naming scheme ``EasyBuildMNS`` . The ``MigrateFromEBToHMNS`` module naming scheme is available since EasyBuild v2.2.0.","title":"Partial installations"},{"location":"progress-bars/","text":"Progress bars \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Progress_bars.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Progress_bars.rst in easybuilders/easybuild repo target: docs/progress-bars.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _progress_bars: Progress bars ============= *(supported since: EasyBuild v4.5.0)* .. contents :: :depth: 3 :backlinks: none .. _progress_bar_generic: General information on progress bars ------------------------------------ EasyBuild will show **progress bars** for various aspects of the installation progress by default, if the `Rich <https://pypi.org/project/rich/> `_ Python package is available. The progress bars shown by EasyBuild are *dynamic* : they are only visible when they are relevant. Note that for most progress bars each step is treated as being equal even though the time taken for the various steps varies. There are many factors that impact how long an individual installation step, installing an easyconfig, or installing an extension may and this makes it very difficult to get a good estimate on how much time will be needed. The download progress bar is an exception here (as long as the size of the file to download could be determined first). .. _progress_bars_types: Types of progress bars ---------------------- EasyBuild will show different progress bars to show the progress for different aspects of the installation process. Overall progress bar (status bar) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_overall.png :height: 18px :align: center The progress bar at the bottom, also known as the *status bar* , shows the *overall progress* in installing software for the currently active EasyBuild session. From left to right, the following information is included: * The total amount of time that this EasyBuild session has spent on installing software. * The number of easyconfigs that have been processed already, the total number of easyconfigs being processed, and a count of easyconfigs that failed to installed so far (if there are any). * The list of already processed easyconfigs, along with the result: * ``OK`` (in green) for a successful installation; * ``FAILED`` (in red) for a failed installation; Processed easyconfigs are shown in reversed order: most recently processed easyconfigs are listed first. If EasyBuild is configured to continue processing easyconfigs when an installation failed (for example when using ``--upload-test-report`` ), failing easyconfigs are listed before easyconfigs that were installed successfully, to highlight failing installations. The status bar is not shown if only a single easyconfig file is being installed, and is hidden automatically as soon as the EasyBuild session finishes. Easyconfig progress bar ~~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_easyconfig.png :height: 16px :align: center A dedicated progress bar is shown for every easyconfig file that is installed, right above the status bar (if present), which shows: * The name of the module that is being installed. * The currently active installation step. * The number of completed installations steps, as well as the total number of installation steps for this easyconfig. * A visual progress bar that represents the progress in installing this easyconfig. * The total amount of time spent on installing this easyconfig so far. The progress bar for a specific easyconfig file will be hidden as soon as the installation finishes (regardless of whether it was successful or not). Download progress bars ~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_download.png :height: 56px :align: center When EasyBuild is downloading one or more files, a dedicated progress bar will be visible: * For large downloads: the name of the file being downloaded, a visual progress bar, the amount of data downloaded so far, the amount of data to download in total, the average download speed, and the estimated time remaining to complete the download (based on average download speed). * If there are multiple files being downloaded: an overview of how many files have been downloaded already, and how many need to be downloaded in total. The download progress bars will be hidden as soon as the downloading has been completed (or has failed). Extensions progress bar ~~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_extensions.png :height: 22px :align: center When extensions are being installed for a particular easyconfig, a dedicated progress bar will pop up for the ``extensions`` step, which shows: * The name of the extension that is currently being installed. * The number of extensions installed so far, and the total number of extensions to install. * A visual progress bar that represents the progress for installing extensions so far. * The total amount of time spent installing extensions for this easyconfig. .. _progress_bars_configuration: Relevant configuration options ------------------------------ ``output-style`` ~~~~~~~~~~~~~~~~ The ``output-style`` configuration option determines the output style of the ``eb`` command. Setting ``output-style`` to ' ``rich`` ' results in rich output being produced, which includes progress bars. This also makes ``Rich`` a *required* dependency for EasyBuild. Using ' ``basic`` ' as value for ``output-style`` results in basic output (no progress bars). By default ``output-style`` is set to ' ``auto`` ', which implies using the ``Rich`` Python package to produce rich output (incl. progress bars) if is available, and falling back to using the basic output style if ``Rich`` is not available. ``show-progress-bar`` ~~~~~~~~~~~~~~~~~~~~~ The ``show-progress-bar`` configuration option (enabled by default) controls whether or not progress bars are shown, regardless of the active output style and whether ``Rich`` is available.","title":"Progress bars"},{"location":"progress-bars/#progress-bars","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Progress_bars.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Progress_bars.rst in easybuilders/easybuild repo target: docs/progress-bars.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _progress_bars: Progress bars ============= *(supported since: EasyBuild v4.5.0)* .. contents :: :depth: 3 :backlinks: none .. _progress_bar_generic: General information on progress bars ------------------------------------ EasyBuild will show **progress bars** for various aspects of the installation progress by default, if the `Rich <https://pypi.org/project/rich/> `_ Python package is available. The progress bars shown by EasyBuild are *dynamic* : they are only visible when they are relevant. Note that for most progress bars each step is treated as being equal even though the time taken for the various steps varies. There are many factors that impact how long an individual installation step, installing an easyconfig, or installing an extension may and this makes it very difficult to get a good estimate on how much time will be needed. The download progress bar is an exception here (as long as the size of the file to download could be determined first). .. _progress_bars_types: Types of progress bars ---------------------- EasyBuild will show different progress bars to show the progress for different aspects of the installation process. Overall progress bar (status bar) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_overall.png :height: 18px :align: center The progress bar at the bottom, also known as the *status bar* , shows the *overall progress* in installing software for the currently active EasyBuild session. From left to right, the following information is included: * The total amount of time that this EasyBuild session has spent on installing software. * The number of easyconfigs that have been processed already, the total number of easyconfigs being processed, and a count of easyconfigs that failed to installed so far (if there are any). * The list of already processed easyconfigs, along with the result: * ``OK`` (in green) for a successful installation; * ``FAILED`` (in red) for a failed installation; Processed easyconfigs are shown in reversed order: most recently processed easyconfigs are listed first. If EasyBuild is configured to continue processing easyconfigs when an installation failed (for example when using ``--upload-test-report`` ), failing easyconfigs are listed before easyconfigs that were installed successfully, to highlight failing installations. The status bar is not shown if only a single easyconfig file is being installed, and is hidden automatically as soon as the EasyBuild session finishes. Easyconfig progress bar ~~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_easyconfig.png :height: 16px :align: center A dedicated progress bar is shown for every easyconfig file that is installed, right above the status bar (if present), which shows: * The name of the module that is being installed. * The currently active installation step. * The number of completed installations steps, as well as the total number of installation steps for this easyconfig. * A visual progress bar that represents the progress in installing this easyconfig. * The total amount of time spent on installing this easyconfig so far. The progress bar for a specific easyconfig file will be hidden as soon as the installation finishes (regardless of whether it was successful or not). Download progress bars ~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_download.png :height: 56px :align: center When EasyBuild is downloading one or more files, a dedicated progress bar will be visible: * For large downloads: the name of the file being downloaded, a visual progress bar, the amount of data downloaded so far, the amount of data to download in total, the average download speed, and the estimated time remaining to complete the download (based on average download speed). * If there are multiple files being downloaded: an overview of how many files have been downloaded already, and how many need to be downloaded in total. The download progress bars will be hidden as soon as the downloading has been completed (or has failed). Extensions progress bar ~~~~~~~~~~~~~~~~~~~~~~~ .. image :: img/progress_bar_extensions.png :height: 22px :align: center When extensions are being installed for a particular easyconfig, a dedicated progress bar will pop up for the ``extensions`` step, which shows: * The name of the extension that is currently being installed. * The number of extensions installed so far, and the total number of extensions to install. * A visual progress bar that represents the progress for installing extensions so far. * The total amount of time spent installing extensions for this easyconfig. .. _progress_bars_configuration: Relevant configuration options ------------------------------ ``output-style`` ~~~~~~~~~~~~~~~~ The ``output-style`` configuration option determines the output style of the ``eb`` command. Setting ``output-style`` to ' ``rich`` ' results in rich output being produced, which includes progress bars. This also makes ``Rich`` a *required* dependency for EasyBuild. Using ' ``basic`` ' as value for ``output-style`` results in basic output (no progress bars). By default ``output-style`` is set to ' ``auto`` ', which implies using the ``Rich`` Python package to produce rich output (incl. progress bars) if is available, and falling back to using the basic output style if ``Rich`` is not available. ``show-progress-bar`` ~~~~~~~~~~~~~~~~~~~~~ The ``show-progress-bar`` configuration option (enabled by default) controls whether or not progress bars are shown, regardless of the active output style and whether ``Rich`` is available.","title":"Progress bars"},{"location":"python-2-3-compatibility/","text":"Compatibility with Python 2 and Python 3 \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Python-2-3-compatibility.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Python-2-3-compatibility.rst in easybuilders/easybuild repo target: docs/python-2-3-compatibility.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _py2_py3_compatibility: Compatibility with Python 2 and Python 3 ======================================== Starting with EasyBuild v4.0, the EasyBuild framework and easyblocks are compatible with both Python versions 2 and 3. More specifically, the following Python versions are currently supported: * Python 2.6.x (support was removed in EasyBuild v4.4.0) * Python 2.7.x * Python 3.5.x * Python 3.6.x * Python 3.7.x * Python 3.8.x (requires EasyBuild v4.1.0) .. _py2_py3_compatibility_EB_VERBOSE: Determining which Python version EasyBuild is using via ``$EB_VERBOSE`` ----------------------------------------------------------------------- To determine which Python version is being used to run EasyBuild, you can define the ``$EB_VERBOSE`` environment variable. For example :: $ export EB_VERBOSE=1 $ eb --version >> Considering 'python'... >> No 'python' found in $PATH, skipping... >> Considering 'python3'... >> 'python3' version: 3.6.9, which matches Python 3 version requirement (>= 3.5) >> Selected Python command: python3 (/usr/local/bin/python3) >> python3 -m easybuild.main --version This is EasyBuild 4.0.0 (framework: 4.0.0, easyblocks: 4.0.0) on host example. .. _py2_py3_compatibility_EB_PYTHON: Controlling which ``python`` command EasyBuild will use via ``$EB_PYTHON`` -------------------------------------------------------------------------- The ``eb`` command will consider different ``python`` commands, and check the Python version corresponding with the command before selecting one. The commands considered are (in order): * ``python`` * ``python3`` * ``python2`` Before considering these commands, ``eb`` will first consider the command name specified via the ``$EB_PYTHON`` environment variable (if defined), so you can always control which Python version is being used if desired. For example :: $ export EB_PYTHON=python3.7 $ export EB_VERBOSE=1 $ eb --version >> Considering 'python3.7'... >> 'python3.7' version: 3.7.2, which matches Python 3 version requirement (>= 3.5) >> Selected Python command: python3.7 (/usr/local/bin/python3.7) >> python3.7 -m easybuild.main --version This is EasyBuild 4.0.0 (framework: 4.0.0, easyblocks: 4.0.0) on host example. .. _py2_py3_compatibility_py2vs3_package The ``easybuild.tools.py2vs3`` package -------------------------------------- To facilitate this, the ``easybuild.tools.py2vs3`` package was introduced in EasyBuild v4.0. When importing a function from this package, you will automatically get a version of the function that is compatible with the Python version being used to run EasyBuild. Through this approach we can hide subtle differences between Python 2 and 3, while avoiding code duplication and Python version checks throughout the codebase, as well as avoid requiring packages like ``six`` or ``future`` (which facilitate maintaining compatibility with Python 2 and 3, but are also a bit of a burden). The ``easybuild.tools.py2vs3`` package provides two major classes of items (listed below in alphabetical order): * functions from the Python standard library which should be imported from different locations in Python 2 and 3 * wrappers for functionality in the Python standard library which behaves differently in Python 2 and 3 .. _py2vs3_ascii_letters: ``ascii_letters`` ----------------- * Python 2: corresponds to ``string.letters`` * Python 3: corresponds to ``string.ascii_letters`` .. _py2vs3_ascii_lowercase: ``ascii_lowercase`` ------------------- * Python 2: corresponds to ``string.lowercase`` * Python 3: corresponds to ``string.ascii_lowercase`` .. _py2vs3_build_opener: ``build_opener`` ---------------- * Python 2: corresponds to ``urllib2.build_opener`` function * Python 3: corresponds to ``urllib.request.build_opener`` function .. _py2vs3_configparser: ``configparser`` ---------------- * Python 2: corresponds to ``ConfigParser.configparser`` module * Python 3: corresponds to ``configparser`` module .. _py2vs3_create_base_metaclass: ``create_base_metaclass`` ------------------------- Function to create a metaclass that can be used as a base class, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_extract_method_name: ``extract_method_name`` ------------------------ Function to method name from lambda function, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_HTTPError: ``HTTPError`` ------------- * Python 2: corresponds to ``urllib2.HTTPError`` * Python 3: corresponds to ``urllib.request.HTTPError`` .. _py2vs3_HTTPSHandler: ``HTTPSHandler`` ---------------- * Python 2: corresponds to ``urllib2.HTTPSHandler`` * Python 3: corresponds to ``urllib.request.HTTPSHandler`` .. _py2vs3_json_loads: ``json_loads`` -------------- * Python 2: wraps ``json.loads`` function * Python 3: wraps ``json.loads`` function, taking into account that for Python versions older than 3.6 a value of type ``string`` (rather than ``bytes`` ) is required as argument .. _py2vs3_mk_wrapper_baseclass: ``mk_wrapper_baseclass`` ------------------------ Function to create a wrapper base class using the specified metaclass, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_OrderedDict: ``OrderedDict`` --------------- * Python 2.6: corresponds to ``easybuild.tools.ordereddict.OrderedDict`` * Python 2.7: corresponds to ``collections.OrderedDict`` * Python 3: corresponds to ``collections.OrderedDict`` .. _py2vs3_reload: ``reload`` ---------- * Python 2: corresponds to ``reload`` built-in function * Python 3: corresponds to ``importlib.reload`` function .. _py2vs3_raise_with_traceback: ``raise_with_traceback`` ------------------------ Function to raise an error with specified message and traceback, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_Request: ``Request`` ----------- * Python 2: corresponds to ``urllib2.Request`` * Python 3: corresponds to ``urllib.request.Request`` .. _py2vs3_subprocess_popen_text: ``subprocess_popen_text`` ------------------------- * Python 2: wrapper for ``subprocess.Popen`` * Python 3: wrapper for ``subprocess.Popen`` while forcing text mode (using ``universal_newlines=True`` ) .. _py2vs3_std_urllib: ``std_urllib`` -------------- * Python 2: corresponds to ``urllib`` package * Python 3: corresponds to ``urllib.request`` package .. _py2vs3_string_type: ``string_type`` --------------- * Python 2: corresponds to ``basestring`` built-in string type * Python 3: corresponds to ``str`` built-in string type .. _py2vs3_StringIO: ``StringIO`` ------------ * Python 2: corresponds to ``StringIO.StringIO`` class * Python 3: corresponds to ``io.StringIO`` class .. _py2vs3_urlencode: ``urlencode`` ------------- * Python 2: corresponds to ``urllib.urlencode`` function * Python 2: corresponds to ``urllib.parse.urlencode`` function .. _py2vs3_URLError: ``URLError`` ------------ * Python 2: corresponds to ``urllib2.URLError`` * Python 3: corresponds to ``urllib.request.URLError`` .. _py2vs3_urlopen: ``urlopen`` ----------- * Python 2: corresponds to ``urllib2.urlopen`` * Python 3: corresponds to ``urllib.request.urlopen``","title":"Compatibility with Python 2 and Python 3"},{"location":"python-2-3-compatibility/#compatibility-with-python-2-and-python-3","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Python-2-3-compatibility.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Python-2-3-compatibility.rst in easybuilders/easybuild repo target: docs/python-2-3-compatibility.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _py2_py3_compatibility: Compatibility with Python 2 and Python 3 ======================================== Starting with EasyBuild v4.0, the EasyBuild framework and easyblocks are compatible with both Python versions 2 and 3. More specifically, the following Python versions are currently supported: * Python 2.6.x (support was removed in EasyBuild v4.4.0) * Python 2.7.x * Python 3.5.x * Python 3.6.x * Python 3.7.x * Python 3.8.x (requires EasyBuild v4.1.0) .. _py2_py3_compatibility_EB_VERBOSE: Determining which Python version EasyBuild is using via ``$EB_VERBOSE`` ----------------------------------------------------------------------- To determine which Python version is being used to run EasyBuild, you can define the ``$EB_VERBOSE`` environment variable. For example :: $ export EB_VERBOSE=1 $ eb --version >> Considering 'python'... >> No 'python' found in $PATH, skipping... >> Considering 'python3'... >> 'python3' version: 3.6.9, which matches Python 3 version requirement (>= 3.5) >> Selected Python command: python3 (/usr/local/bin/python3) >> python3 -m easybuild.main --version This is EasyBuild 4.0.0 (framework: 4.0.0, easyblocks: 4.0.0) on host example. .. _py2_py3_compatibility_EB_PYTHON: Controlling which ``python`` command EasyBuild will use via ``$EB_PYTHON`` -------------------------------------------------------------------------- The ``eb`` command will consider different ``python`` commands, and check the Python version corresponding with the command before selecting one. The commands considered are (in order): * ``python`` * ``python3`` * ``python2`` Before considering these commands, ``eb`` will first consider the command name specified via the ``$EB_PYTHON`` environment variable (if defined), so you can always control which Python version is being used if desired. For example :: $ export EB_PYTHON=python3.7 $ export EB_VERBOSE=1 $ eb --version >> Considering 'python3.7'... >> 'python3.7' version: 3.7.2, which matches Python 3 version requirement (>= 3.5) >> Selected Python command: python3.7 (/usr/local/bin/python3.7) >> python3.7 -m easybuild.main --version This is EasyBuild 4.0.0 (framework: 4.0.0, easyblocks: 4.0.0) on host example. .. _py2_py3_compatibility_py2vs3_package The ``easybuild.tools.py2vs3`` package -------------------------------------- To facilitate this, the ``easybuild.tools.py2vs3`` package was introduced in EasyBuild v4.0. When importing a function from this package, you will automatically get a version of the function that is compatible with the Python version being used to run EasyBuild. Through this approach we can hide subtle differences between Python 2 and 3, while avoiding code duplication and Python version checks throughout the codebase, as well as avoid requiring packages like ``six`` or ``future`` (which facilitate maintaining compatibility with Python 2 and 3, but are also a bit of a burden). The ``easybuild.tools.py2vs3`` package provides two major classes of items (listed below in alphabetical order): * functions from the Python standard library which should be imported from different locations in Python 2 and 3 * wrappers for functionality in the Python standard library which behaves differently in Python 2 and 3 .. _py2vs3_ascii_letters: ``ascii_letters`` ----------------- * Python 2: corresponds to ``string.letters`` * Python 3: corresponds to ``string.ascii_letters`` .. _py2vs3_ascii_lowercase: ``ascii_lowercase`` ------------------- * Python 2: corresponds to ``string.lowercase`` * Python 3: corresponds to ``string.ascii_lowercase`` .. _py2vs3_build_opener: ``build_opener`` ---------------- * Python 2: corresponds to ``urllib2.build_opener`` function * Python 3: corresponds to ``urllib.request.build_opener`` function .. _py2vs3_configparser: ``configparser`` ---------------- * Python 2: corresponds to ``ConfigParser.configparser`` module * Python 3: corresponds to ``configparser`` module .. _py2vs3_create_base_metaclass: ``create_base_metaclass`` ------------------------- Function to create a metaclass that can be used as a base class, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_extract_method_name: ``extract_method_name`` ------------------------ Function to method name from lambda function, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_HTTPError: ``HTTPError`` ------------- * Python 2: corresponds to ``urllib2.HTTPError`` * Python 3: corresponds to ``urllib.request.HTTPError`` .. _py2vs3_HTTPSHandler: ``HTTPSHandler`` ---------------- * Python 2: corresponds to ``urllib2.HTTPSHandler`` * Python 3: corresponds to ``urllib.request.HTTPSHandler`` .. _py2vs3_json_loads: ``json_loads`` -------------- * Python 2: wraps ``json.loads`` function * Python 3: wraps ``json.loads`` function, taking into account that for Python versions older than 3.6 a value of type ``string`` (rather than ``bytes`` ) is required as argument .. _py2vs3_mk_wrapper_baseclass: ``mk_wrapper_baseclass`` ------------------------ Function to create a wrapper base class using the specified metaclass, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_OrderedDict: ``OrderedDict`` --------------- * Python 2.6: corresponds to ``easybuild.tools.ordereddict.OrderedDict`` * Python 2.7: corresponds to ``collections.OrderedDict`` * Python 3: corresponds to ``collections.OrderedDict`` .. _py2vs3_reload: ``reload`` ---------- * Python 2: corresponds to ``reload`` built-in function * Python 3: corresponds to ``importlib.reload`` function .. _py2vs3_raise_with_traceback: ``raise_with_traceback`` ------------------------ Function to raise an error with specified message and traceback, implemented in a way that is compatible with both Python 2 and 3. .. _py2vs3_Request: ``Request`` ----------- * Python 2: corresponds to ``urllib2.Request`` * Python 3: corresponds to ``urllib.request.Request`` .. _py2vs3_subprocess_popen_text: ``subprocess_popen_text`` ------------------------- * Python 2: wrapper for ``subprocess.Popen`` * Python 3: wrapper for ``subprocess.Popen`` while forcing text mode (using ``universal_newlines=True`` ) .. _py2vs3_std_urllib: ``std_urllib`` -------------- * Python 2: corresponds to ``urllib`` package * Python 3: corresponds to ``urllib.request`` package .. _py2vs3_string_type: ``string_type`` --------------- * Python 2: corresponds to ``basestring`` built-in string type * Python 3: corresponds to ``str`` built-in string type .. _py2vs3_StringIO: ``StringIO`` ------------ * Python 2: corresponds to ``StringIO.StringIO`` class * Python 3: corresponds to ``io.StringIO`` class .. _py2vs3_urlencode: ``urlencode`` ------------- * Python 2: corresponds to ``urllib.urlencode`` function * Python 2: corresponds to ``urllib.parse.urlencode`` function .. _py2vs3_URLError: ``URLError`` ------------ * Python 2: corresponds to ``urllib2.URLError`` * Python 3: corresponds to ``urllib.request.URLError`` .. _py2vs3_urlopen: ``urlopen`` ----------- * Python 2: corresponds to ``urllib2.urlopen`` * Python 3: corresponds to ``urllib.request.urlopen``","title":"Compatibility with Python 2 and Python 3"},{"location":"release-notes/","text":"EasyBuild release notes \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Release_notes.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Release_notes.rst in easybuilders/easybuild repo target: docs/release-notes.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _release_notes: EasyBuild release notes ======================= The latest version of EasyBuild provides support for building and installing **2,798** different software packages, including 37 different (compiler) toolchains. It contains 248 software-specific easyblocks and 37 generic easyblocks, alongside 15,535 easyconfig files. .. note :: See also the :ref: `concise overview of major changes in EasyBuild v4.0 <eb4_changes_overview>` . .. _release_notes_eb462: EasyBuild v4.6.2 (October 21st 2022) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add support for easystack file that contains easyconfig filenames + implement parsing of configuration options ( `#4021 <https://github.com/easybuilders/easybuild-framework/pull/4021> `_ ) * skip over unset ``$EB_PYTHON`` / ``$EB_INSTALLPYTHON`` in eb wrapper script ( `#4080 <https://github.com/easybuilders/easybuild-framework/pull/4080> `_ ) * add ``GITHUB_RELEASE`` and ``GITHUB_LOWER_RELEASE`` templates ( `#4084 <https://github.com/easybuilders/easybuild-framework/pull/4084> `_ ) * add ``%(cuda_cc_cmake)s`` template ( `#4087 <https://github.com/easybuilders/easybuild-framework/pull/4087> `_ ) * various bug fixes, including: * make ``check_sha256_checksums`` verify all checksums if they're specified as a dict value ( `#4076 <https://github.com/easybuilders/easybuild-framework/pull/4076> `_ ) * replace use of symlink with copied files in ``alt_location`` tests to fix failing EasyBuild installation on BeeGFS ( `#4083 <https://github.com/easybuilders/easybuild-framework/pull/4083> `_ ) * fix trying to generate RPATH wrappers for Clang ( `#4088 <https://github.com/easybuilders/easybuild-framework/pull/4088> `_ ) * make sure that GitPython version is a proper version before checking minimal required version ( `#4090 <https://github.com/easybuilders/easybuild-framework/pull/4090> `_ , `#4091 <https://github.com/easybuilders/easybuild-framework/pull/4091> `_ ) * first look for patch in ``alt_location`` when it is specified ( `#4093 <https://github.com/easybuilders/easybuild-framework/pull/4093> `_ ) * other changes: * make scripts executable ( `#4081 <https://github.com/easybuilders/easybuild-framework/pull/4081> `_ ) * make ``--inject-checksums`` inject dictionary value for checksums which maps filename to SHA256 checksum ( `#4085 <https://github.com/easybuilders/easybuild-framework/pull/4085> `_ ) * update to v3 of actions/checkout and actions/setup-python in CI workflows ( `#4089 <https://github.com/easybuilders/easybuild-framework/pull/4089> `_ ) * use ``SYSTEM`` template constant in dependencies instead of ``True`` in framework tests ( `#4094 <https://github.com/easybuilders/easybuild-framework/pull/4094> `_ ) **easyblocks** * 2 new software-specific easyblock: * CUDA compatibility libraries ( `#2764 <https://github.com/easybuilders/easybuild-easyblocks/pull/2764> `_ ) and mamba ( `#2808 <https://github.com/easybuilders/easybuild-easyblocks/pull/2808> `_ ) * minor enhancements and updates, including: * update OpenFOAM easyblock to support OpenFOAM 10 + clean up variant/version checks ( `#2766 <https://github.com/easybuilders/easybuild-easyblocks/pull/2766> `_ ) * added support for ESMPy in ESMF ( `#2789 <https://github.com/easybuilders/easybuild-easyblocks/pull/2789> `_ ) * enhance OpenBLAS easyblock to support running LAPACK test suite + checking how many tests fail ( `#2801 <https://github.com/easybuilders/easybuild-easyblocks/pull/2801> `_ ) * make numexpr easyblock aware of toolchain with GCC + imkl ( `#2810 <https://github.com/easybuilders/easybuild-easyblocks/pull/2810> `_ ) * add sanity check commands for netCDF ( `#2811 <https://github.com/easybuilders/easybuild-easyblocks/pull/2811> `_ ) * various bug fixes, including: * handle problems copying symlink that points to CUDA folder that is not created for non CUDA builds of SuiteSparse ( `#2790 <https://github.com/easybuilders/easybuild-easyblocks/pull/2790> `_ ) * don't install docs (to avoid trouble with Java) + add Rocky support for ABAQUS ( `#2792 <https://github.com/easybuilders/easybuild-easyblocks/pull/2792> `_ ) * correctly count the number of failing tests (not failing test suites) in PyTorch builds ( `#2794 <https://github.com/easybuilders/easybuild-easyblocks/pull/2794> `_ , `#2803 <https://github.com/easybuilders/easybuild-easyblocks/pull/2803> `_ ) * fix docstring for PyTorch easyblock ( `#2795 <https://github.com/easybuilders/easybuild-easyblocks/pull/2795> `_ ) * handle iterative builds with MakeCp easyblock ( `#2798 <https://github.com/easybuilders/easybuild-easyblocks/pull/2798> `_ ) * accept both ``None`` and empty value for optarch to let OpenCV detect host CPU ( `#2804 <https://github.com/easybuilders/easybuild-easyblocks/pull/2804> `_ ) * enhance EasyBuildMeta easyblock: auto-enable installing with pip + fix setup.py of easyconfigs package so installation with setuptools >= 61.0 works ( `#2805 <https://github.com/easybuilders/easybuild-easyblocks/pull/2805> `_ ) * use ``python -m pip`` instead of ``pip`` in PythonPackage easyblock ( `#2807 <https://github.com/easybuilders/easybuild-easyblocks/pull/2807> `_ ) * other changes: * make the test output from PythonPackage less verbose by disabling default search for error patterns done by ``run_cmd`` ( `#2797 <https://github.com/easybuilders/easybuild-easyblocks/pull/2797> `_ ) **easyconfigs** * add easyconfig for intel/2022.09 toolchain ( `#16435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16435> `_ ) * added example easyconfig files for 25 new software packages: * AGAT ( `#16261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16261> `_ ), AMAPVox ( `#16438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16438> `_ ), Avogadro2 ( `#16257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16257> `_ ), buildingspy ( `#16308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16308> `_ ), CDBtools ( `#16436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16436> `_ ), Compress-Raw-Zlib ( `#16307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16307> `_ ), CUDAcompat ( `#15892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15892> `_ ), CWIPI ( `#16342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16342> `_ ), enchant-2 ( `#16082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16082> `_ , `#16319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16319> `_ ), f90wrap ( `#16346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16346> `_ ), Imath ( `#16276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16276> `_ ), Mamba ( `#16432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16432> `_ ), Miller ( `#16221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16221> `_ ), nghttp2 ( `#16096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16096> `_ ), ngtcp2 ( `#16098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16098> `_ ), NVSHMEM ( `#16254 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16254> `_ ), pairsnp ( `#16331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16331> `_ ), paladin ( `#16320 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16320> `_ ), PyMOL ( `#16394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16394> `_ ), python-irodsclient ( `#16328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16328> `_ ), ruffus ( `#16428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16428> `_ ), TELEMAC-MASCARET ( `#16274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16274> `_ ), torchdata ( `#16344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16344> `_ ), Waylandpp ( `#16092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16092> `_ ), x13as ( `#16163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16163> `_ ) * added additional easyconfigs for various supported software packages, including: * Amber 22.0, AMS 2022.102, ASE 3.22.1, atools 1.5.1, Beast 2.6.7, biogeme 3.2.10, Boost.Python 1.79.0, ccache 4.6.3, dbus-glib 0.112, Delly 1.1.5, ESMF 8.3.0, expat 2.4.9, FDS 6.7.9, file 5.43, FLTK 1.3.8, FTGL 2.4.0, gc 8.2.2, GitPython 3.1.27, Go 1.18.3, GPAW 22.8.0, Guile 3.0.8, htop 3.2.1, hunspell 1.7.1, IPython 8.5.0, jq 1.6, Julia 1.8.2, LDC 1.30.0, libcint 5.1.6, libconfig 1.7.3, libreadline 8.2, LibSoup 3.0.7, LIBSVM 3.30, libwebp 1.2.4, likwid 5.2.2, MariaDB 10.9.3, matplotlib 3.5.2, ncdu 1.17, netcdf4-python 1.6.1, Nextflow 22.10.0, NFFT 3.5.3, Nipype 1.8.5, numactl 2.0.16, onedrive 2.4.21, OpenCV 4.6.0, OpenEXR 3.1.5, OpenJPEG 2.5.0, OpenMM 7.7.0, OpenPGM 5.2.122, OpenSSL 1.1.1q, Perl 5.36.0, Pillow-SIMD 9.2.0, pkgconf 1.9.3, PostgreSQL 14.4, PyCharm 2022.2.2, PyTorch 1.12.0, PyTorch 1.12.0, PyTorch-Lightning 1.7.7, RDFlib 6.2.0, SAMtools 1.16.1, scikit-learn 1.1.2, Score-P 7.1, SDL2 2.0.22, spaln 2.4.12, spglib-python 2.0.0, SuiteSparse 5.13.0, SUNDIALS 6.3.0, sympy 1.11.1, tensorboard 2.10.0, torchvision 0.13.1, TRIQS 3.1.1, TRIQS-cthyb 3.1.0, TRIQS-dft_tools 3.1.0, TRIQS-tprf 3.1.1, TRUST4 1.0.7, TurboVNC 3.0.1, typing-extensions 4.3.0, UCX 1.13.1, umap-learn 0.5.3, VEP 107, VMD 1.9.4a57, Wayland 1.21.0, wxWidgets 3.2.1, xprop 1.2.5 * minor enhancements, including: * configure recent pocl versions with ``-DLLC_HOST_CPU=native`` to avoid CPU auto-detection ( `#16246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16246> `_ ) * add multi-dep exception to easyconfigs test suite for ncbi-vdb-3.0.0 which requires HDF5 1.10.x ( `#16316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16316> `_ ) * enable running of LAPACK tests for recent OpenBLAS easyconfigs + add patch to fix failing LAPACK tests due to use of ``-ftree-vectorize`` ( `#16406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16406> `_ ) * add ``GITHUB_(LOWER_)RELEASE`` to known constants in ``setup.cfg`` ( `#16422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16422> `_ ) * add AMAPVox extension to R v4.2.1 ( `#16439 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16439> `_ ) * add OpenEXR dependency to POV-Ray 3.7.0.10 ( `#16408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16408> `_ ) * various bug fixes, including: * add patch for OpenBLAS 0.3.7-0.3.12 to fix miscomputation on POWER ( `#16199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16199> `_ ) * skip flaky test in PyTorch 1.9.0 ( `#16258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16258> `_ ) * add ``--with-versioned-syms`` to ncurses 6.2 and 6.3 ( `#16270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16270> `_ ) * add missing pkg-config build dependency to Guile ( `#16317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16317> `_ ) * add patches to fix incompatibilites between ASE and other packages in 2022a toolchain ( `#16332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16332> `_ ) * add patches to fix PyTorch 1.11 on POWER ( `#16339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16339> `_ ) * add patches for Ambertools 21 to Amber 20.11 to work with updated Amber easyblock ( `#16343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16343> `_ ) * use Intel MPI from EasyBuild toolchain in AMS ( `#16363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16363> `_ ) * fix execution permissions for ``bin/ngm*`` for NextGenMap v0.5.5 ( `#16383 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16383> `_ ) * fix using provided Qhull and freetype dependencies for matplotlib 3.5.2 by creating ``mplsetup.cfg`` rather than ``setup.cfg`` ( `#16396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16396> `_ ) * fix GitHub download link in for libpsl 0.21.1 ( `#16397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16397> `_ ) * stick to http in source URL for ``stride.tar.gz`` in VMD 1.9.4a51 easyconfigs due to problems with SSL certificate ( `#16403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16403> `_ ) * add patch to detect available cores and remove unneeded deps for Unicycler 0.5.0 ( `#16407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16407> `_ ) * add missing ICU + libunistring dependencies for libpsl 0.21.1 w/ GCCcore/10.3.0 ( `#16410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16410> `_ ) * add patch to GCC 11.x + 12.x to fix vectorizer bug ( `#16411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16411> `_ ) * fix checksum for GULP 6.1 ( `#16423 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16423> `_ ) * add bzip2 and libxml2 as dependencies for netCDF 4.9.0 ( `#16450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16450> `_ ) * other changes: * drop Java dep from ABAQUS 2022 ( `#16314 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16314> `_ ) * deprecate use of ``True`` in favour of ``SYSTEM`` for system-toolchain dependencies in easyconfigs using a recent toolchain version (>2019b) ( `#16384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16384> `_ ) * update easyconfigs to use ``SYSTEM`` template constant instead of ``True`` in dependencies ( `#16386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16386> `_ , `#16418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16418> `_ ) * update libxml2 + libxslt easyconfigs to use ``gnome.org`` source URL ( `#16429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16429> `_ ) .. _release_notes_eb461: EasyBuild v4.6.1 (September 12th 2022) -------------------------------------- bugfix/update release **framework** * various enhancements, including: * add script to find dependencies of Python packages ( `#3839 <https://github.com/easybuilders/easybuild-framework/pull/3839> `_ ) * add ``ai`` default module class ( `#4053 <https://github.com/easybuilders/easybuild-framework/pull/4053> `_ ) * various bug fixes, including: * fix code style issues reported by recent flake8 linter ( `#4049 <https://github.com/easybuilders/easybuild-framework/pull/4049> `_ ) * stick to autopep8 < 1.7.0 with Python 2.7 ( `#4055 <https://github.com/easybuilders/easybuild-framework/pull/4055> `_ ) * ensure we call ``EasyBlock.patch_step`` for ``postinstallpatches`` ( `#4063 <https://github.com/easybuilders/easybuild-framework/pull/4063> `_ ) * fix leaked handles in ``set_columns`` , ``complete_cmd`` , ``run_cmd_qa`` , ``det_terminal_size functions`` + tests ( `#4066 <https://github.com/easybuilders/easybuild-framework/pull/4066> `_ ) * fix ``quote_str`` when string with both ``'`` and ``\"`` ends with a double quote ( `#4068 <https://github.com/easybuilders/easybuild-framework/pull/4068> `_ ) * fix type-checking of patches to allow dict values + correctly handle patches specified as dict values in ``--new-pr`` ( `#4070 <https://github.com/easybuilders/easybuild-framework/pull/4070> `_ ) * relax toolchain test by accepting both ``-march=native`` (x86_64) and ``-mcpu=native`` (aarch64) ( `#4071 <https://github.com/easybuilders/easybuild-framework/pull/4071> `_ ) * other changes: * run python in the same process as ``eb`` wrapper script by using ``exec`` ( `#4048 <https://github.com/easybuilders/easybuild-framework/pull/4048> `_ ) * add ``get_linked_libs_raw`` function, and use it from both ``check_linked_shared_libs`` and ``sanity_check_rpath`` ( `#4051 <https://github.com/easybuilders/easybuild-framework/pull/4051> `_ ) * update CI workflows (except container tests) to use Ubuntu 20.04, since Ubuntu 18.04 is deprecated ( `#4064 <https://github.com/easybuilders/easybuild-framework/pull/4064> `_ ) * use ``SYSTEM`` constant for dependency that uses system toolchain in dumped easyconfig ( `#4069 <https://github.com/easybuilders/easybuild-framework/pull/4069> `_ ) **easyblocks** * minor enhancements and updates, including: * update LAMMPS easyblock for LAMMPS/23Jun22 ( `#2213 <https://github.com/easybuilders/easybuild-easyblocks/pull/2213> `_ ) * reduce the number of command line options for ``cmake`` command in CMakeMake generic easyblock ( `#2514 <https://github.com/easybuilders/easybuild-easyblocks/pull/2514> `_ ) * update libQGLViewer easyblock to take into account changes in the shared library names depending on Qt versions they are compiled with ( `#2730 <https://github.com/easybuilders/easybuild-easyblocks/pull/2730> `_ ) * improve PLUMED detection in GROMACS easyblock ( `#2749 <https://github.com/easybuilders/easybuild-easyblocks/pull/2749> `_ ) * make ``$LD_LIBRARY_PATH`` detection more robust for LAMMPS ( `#2765 <https://github.com/easybuilders/easybuild-easyblocks/pull/2765> `_ ) * enhance NVHPC easyblock to avoid superfluous warning ( `#2767 <https://github.com/easybuilders/easybuild-easyblocks/pull/2767> `_ ) * enhance PyTorch easyblock to also capture tests failing with signal ( `#2768 <https://github.com/easybuilders/easybuild-easyblocks/pull/2768> `_ ) * enhance PythonPackage easyblock to make sure all test command output makes it to the EasyBuild log, also when ``return_output_ec=True`` ( `#2770 <https://github.com/easybuilders/easybuild-easyblocks/pull/2770> `_ ) * set ``$NVHPC_CUDA_HOME`` for NVHPC 22.7+ ( `#2776 <https://github.com/easybuilders/easybuild-easyblocks/pull/2776> `_ ) * various bug fixes, including: * make Amber easyblock aware of FlexiBLAS ( `#2720 <https://github.com/easybuilders/easybuild-easyblocks/pull/2720> `_ ) * update PyTorch easyblock to configure without breakpad support on POWER ( `#2763 <https://github.com/easybuilders/easybuild-easyblocks/pull/2763> `_ ) * use ``lib*`` in ``post_install`` step of FFTW.MPI easyblock to fix paths not being found on Linux distros favouring lib64 (like Suse/SLES) ( `#2771 <https://github.com/easybuilders/easybuild-easyblocks/pull/2771> `_ ) * use ``det_cmake_version`` function to determine CMake version in CMakeMake generic easyblock ( `#2772 <https://github.com/easybuilders/easybuild-easyblocks/pull/2772> `_ ) * don't enable building of ``ld.gold`` when installing binutils on a RISC-V system + don't configure GCC to use gold as default linker on a RISC-V system ( `#2780 <https://github.com/easybuilders/easybuild-easyblocks/pull/2780> `_ ) * tweak Amber(Tools) easyblock to run tests from top-level directory ( `#2781 <https://github.com/easybuilders/easybuild-easyblocks/pull/2781> `_ ) * fix version check for NVPTX library in sanity check of Clang easyblock ( `#2783 <https://github.com/easybuilders/easybuild-easyblocks/pull/2783> `_ ) * other changes: * update CI workflows to use Ubuntu 20.04 (since Ubuntu 18.04 is deprecated) ( `#2779 <https://github.com/easybuilders/easybuild-easyblocks/pull/2779> `_ ) **easyconfigs** * added example easyconfig files for 37 new software packages: * AptaSUITE ( `#8583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8583> `_ ), BigDFT ( `#15860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15860> `_ ), colossalai ( `#15971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15971> `_ ), CrystFEL ( `#8407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8407> `_ ), Dakota ( `#15883 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15883> `_ , `#16210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16210> `_ ), FastFold ( `#15972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15972> `_ ), fastparquet ( `#15020 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15020> `_ ), FOX-Toolkit ( `#15986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15986> `_ ), GLM-AED ( `#15879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15879> `_ ), hiredis ( `#16071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16071> `_ ), how_are_we_stranded_here ( `#16220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16220> `_ , `#16227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16227> `_ ), indicators ( `#16209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16209> `_ ), JavaFX ( `#8583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8583> `_ ), json-fortran ( `#15979 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15979> `_ ), jupyter-resource-usage ( `#15834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15834> `_ ), libev ( `#16086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16086> `_ ), libmad ( `#16067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16067> `_ ), libplinkio ( `#13040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13040> `_ ), LuaJIT2-OpenResty ( `#16047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16047> `_ ), MetaMorpheus ( `#15825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15825> `_ ), mgltools ( `#16226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16226> `_ ), miniasm ( `#15858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15858> `_ ), muMerge ( `#16115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16115> `_ ), nano ( `#16198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16198> `_ ), nghttp3 ( `#16097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16097> `_ ), olaFlow ( `#16021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16021> `_ ), OpenFAST ( `#15983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15983> `_ , `#15983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15983> `_ ), OpenFold ( `#15971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15971> `_ ), Phantompeakqualtools ( `#15871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15871> `_ ), pyGenomeTracks ( `#16143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16143> `_ ), QuickPIC ( `#15978 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15978> `_ ), RheoTool ( `#16077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16077> `_ ), Satsuma2 ( `#16068 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16068> `_ ), SMC++ ( `#16017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16017> `_ ), stripy ( `#15866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15866> `_ ), UCC-CUDA ( `#15956 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15956> `_ ), VESTA ( `#16217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16217> `_ ) * added additional easyconfigs for various supported software packages, including: * alevin-fry 0.6.0, AmberTools 22.3, arrow-R 8.0.0, ASE 3.22.1, BBMap 38.98, BCFtools 1.15.1, binutils 2.39, BLAST+ 2.13.0, Bowtie2 2.4.5, BUSCO 5.4.3, CapnProto 0.10.2, Cartopy 0.20.3, ccache 4.6.1, cclib 1.7.2, CDO 2.0.5, CellRanger-ATAC 2.1.0, CoordgenLibs 3.0.1, cURL 7.84.0, cuTENSOR 1.6.0.3, einops 0.4.1, Elk 8.5.2, Emacs 28.1, Embree 3.13.4, FFmpeg 4.4.2 + 5.0.1, fio 3.32, Flask 2.2.2, Flye 2.9.1, fmt 9.1.0, FORD 6.1.15, FreeSurfer 7.3.2, GATE 9.2, GATK 4.2.6.1, GCC(core) 12.2.0, GDB 12.1, Geant4 11.0.2, GetOrganelle 1.7.6.1, gifsicle 1.93, GLFW 3.3.8, glib-networking 2.72.1, Globus-CLI 3.6.0, gnuplot 5.4.4, gperftools 2.10, Graphviz 5.0.0, Gurobi 9.5.2, HDF5 1.12.2, HTSlib 1.15.1, Hypre 2.25.0, Jansson 2.14, jax 0.3.14, Kalign 3.3.2, kim-api 2.3.0, LAMMPS 23Jun2022, libcerf 2.1, libdwarf 0.4.1, Libint 2.7.2, libQGLViewer 2.8.0, LibSoup 2.74.0, libzip 1.9.2, Lua 5.4.4, lxml 4.9.1, maeparser 1.3.0, matplotlib 3.5.2, MATSim 14.0, MDAnalysis 2.2.0, medaka 1.6.0, Megalodon 2.5.0, Mercurial 6.2, MetaEuk 6, Mini-XML-3.3.1, MUMmer 4.0.0rc1, MUMPS 5.5.1, netCDF-Fortran 4.6.0, NGSpeciesID 0.1.2.1, ont-remora 1.0.0, OpenFOAM v2206, OTF2 3.0, parallel 20220722, ParaView 5.10.1, patchelf 0.15.0, Perl 5.36.0, pftoolsV3 3.2.12, PLINK 2.00a3.6, pretty-yaml 21.10.1, PRSice 2.3.5, pugixml 1.12.1, Pyomo 6.4.2, PyOpenCL 2021.2.13, Pysam 0.19.1, PyStan 3.5.0, PyYAML 6.0, RDKit 2022.03.5, scikit-bio 0.5.7, scikit-build 0.15.0, scikit-learn 1.1.2, scikit-optimize 0.9.0, SCOTCH 7.0.1, SIONlib 1.7.7, SISSO 3.1, spglib-python 2.0.0, Stacks 2.62, Stata 17, SUMO 1.14.1, tbb 2021.5.0, tqdm 4.64.0, Transformers 4.21.1, Trycycler 0.5.3, Unicycler 0.5.0, Valgrind 3.19.0, ViennaRNA 2.5.1, VTune 2022.3.0.eb, wxPython 4.1.1, x264 20220620, Z3 4.10.2, zfp 1.0.0 * minor enhancements, including: * add alternate download URL for Voro++ ( `#15898 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15898> `_ ) * add extra symlinks and sanity checks for libtinfo in ncurses ( `#15903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15903> `_ ) * include some easyconfig constants in flake8 configuration file ( `#16040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16040> `_ ) * add pigz dependency for cutadapt v3.4 + v3.5 ( `#16056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16056> `_ ) * add sanity check commands for recent gettext versions (>= 0.20.x) ( `#16091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16091> `_ ) * various bug fixes, including: * use correct Matlab Runtime Compiler (v8.4) for FreeSurfer v7.1.1 ( `#13375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13375> `_ ) * fix set-alias statements for MaxQuant v2.0.3.0 ( `#15743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15743> `_ ) * add Autotools build dependency to R 4.2.0 w/ foss 2021b ( `#15822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15822> `_ ) * add patch for BLIS to fix auto-detection of POWER ( `#15826 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15826> `_ ) * downgrade SPAdes dependency to v3.13.1 for Unicycler 0.4.9 since v3.15.3 is too new ( `#15840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15840> `_ ) * explicitly enable HDF5 from kallisto v0.46.2 onwards ( `#15843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15843> `_ ) * add CVE patch for XZ 5.2.5 + attempt to fix symbol patch for all OSs ( `#15856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15856> `_ ) * use build environment set by EasyBuild and add missing dependency on zlib to minimap2 ( `#15859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15859> `_ ) * add missing dependencies and execute tests on Trycycler v0.5.2 ( `#15864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15864> `_ ) * add patch for AlphaFold v2.2.2 to fix NaN problem with jax 0.3.9 ( `#15874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15874> `_ ) * exclude (flaky) ``fault_tolerance_test`` and fix non-x86 build for TensorFlow 2.7.1 ( `#15882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15882> `_ ) * work around miscompilation of OpenBLAS on POWER by compiling with ``-fstack-protector-strong`` ( `#15885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15885> `_ ) * fix tests on POWER9 for BLIS 0.9.0 + fix auto-detect for POWER10 for BLIS (AMD) v2.0 + v3.0 ( `#15889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15889> `_ ) * add and fix patches for PyTorch 1.9.0 on POWER ( `#15919 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15919> `_ ) * exclude Binary, PackedBinary and JAR easyblocks from binutils build requirements ( `#15932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15932> `_ ) * consistently add libffi + elfutils dependencies to recent Clang easyconfigs ( `#15935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16935> `_ , `#16225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16225> `_ ) * add patch to fix broken test on POWER for numpy in SciPy-bundle 2022.05 ( `#15968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15968> `_ ) * refactor checksum test for extensions to use ``collect_exts_file_info`` ( `#15973 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15973> `_ ) * fix dependency on FOX Toolkit in SUMO ( `#15986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15986> `_ ) * add missing SciPy-bundle dependency for rMATS-turbo ( `#15988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15988> `_ ) * explicitly download wannier90 source tarball from wannier90 GitHub repository in QuantumESPRESSO 7.1 easyconfigs ( `#15993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15993> `_ ) * restore ploteig in EIGENSOFT 7.2.1 ( `#15996 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15996> `_ ) * add alternative checksum for plot3Drgl extension in R v4.1.x + v4.2.0 easyconfigs ( `#16011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16011> `_ ) * add patch to fix missing sync in LINCS and SETTLE CUDA kernels for GROMACS 2020 ( `#16027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16027> `_ ) and 2021 ( `#16026 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16026> `_ ) * exclude failing test in TensorFlow 2.4.1 ( `#16042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16042> `_ ) * skip NASA performance and remote server tests in netCDF v4.9.0 ( `#16050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16050> `_ , `#16158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16158> `_ ) * use versioned symbols in ncurses built with system toolchain (by adding ``--with-versioned-syms`` configure option) ( `#16064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16064> `_ ) * add patch to fix pkgconfig file for Blitz++ v1.0.2 ( `#16102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16102> `_ ) * add missing BCFtools dependency for recent medaka versions ( `#16107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16107> `_ ) * add GTK2 v2.24.33 as a dependency for Ghostscript v9.56.1 ( `#16112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16112> `_ ) * fix checksum for Stacks v2.62 (due to silent re-release without version bump) ( `#16134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16134> `_ ) * fix libsanitzer for glibc 2.36 to build GCCcore 11.3.0 ( `#16145 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16145> `_ ) * fix top level Makefile for AmberTools 20 and enable tests ( `#16150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16150> `_ ) * add missing patches + enable running tests for AmberTools 21 with intel/2021a ( `#16151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16151> `_ ) and intel/2021b ( `#16152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16152> `_ ) * replace HDF5 v1.13.1 with v1.12.1 as dependency, since we shouldn't use odd minor versions of HDF5 which are not stable releases ( `#16153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16153> `_ ) * remove modextrapaths to add top-level install directory to ``$PATH ``for recent InterProScan easyconfigs (now done by default by Binary easyblock) (`#16167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16167>`_) * fix sources + source URL + homepage for Molekel v5.4.0 ( `#16219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16219> `_ ) * consistently add maeparser + CoordgenLibs dependencies to OpenBabel 3.1.1 easyconfigs ( `#16231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16231> `_ ) * fix checksum for CUDA 11.4.1 aarch64 installer ( `#16234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16234> `_ ) * remove incorrect comment for Boost dependency in OpenBabel 3.1.1 easyconfigs ( `#16238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16238> `_ ) * add direct Pango dependency in recent ImageMagick easyconfigs ( `#16237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16237> `_ ) * other changes: * remove superfluous ``-DCMAKE_BUILD_TYPE=Release`` , use of ``build_type = Release`` , or enabling ``separate_build_dir`` from easyconfigs using CMakeMake easyblock ( `#13384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13384> `_ ) * synchronize ncurses easyconfigs using system toolchain ( `#15903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15903> `_ ) * stick to Java/11 as dependency for Bazel 5.1.1 (which is available for x86_64, aarch64, ppc64le) ( `#15906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15906> `_ ) * speed up OpenMPI 4.1.4 configure by not running ``autogen.pl --force`` , but only running required Autotools commands ( `#15957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15957> `_ ) * replace sed commands by upstreamed patches for BLIS built with intel-compilers toolchain ( `#15958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15958> `_ ) * simplify AlphaFold foss/2021a easyconfigs by using a fleshed out patched OpenMM dependency ( `#15981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15981> `_ ) * update Java/11 to 11.0.16 and Java/17 to 17.0.4 ( `#16001 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16001> `_ ) * remove unnecessary patch in recent JupyterLab ( `#16030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16030> `_ ) * update CI workflows to use Ubuntu 20.04 (since Ubuntu 18.04 is deprecated) ( `#16070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16070> `_ ) * make check for toolchain value in dependency spec in easyconfigs test suite aware that dumped easyconfig uses ``SYSTEM`` constant ( `#16126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16126> `_ ) .. _release_notes_eb460: EasyBuild v4.6.0 (July 8th 2022) -------------------------------- feature release **framework** * various enhancements, including: * allow searching for sources/patches in alternative location by specifying ' ``alt_location`` ' in source/patch spec ( `#3994 <https://github.com/easybuilders/easybuild-framework/pull/3994> `_ ) * show URLs used for download attempts in trace output ( `#4026 <https://github.com/easybuilders/easybuild-framework/pull/4026> `_ ) * add support for setting environment variables via ' ``pushenv`` ' with ``modextravars`` ( `#4030 <https://github.com/easybuilders/easybuild-framework/pull/4030> `_ ) * add support for OneAPI compilers using toolchain option ' ``oneapi`` ' ( `#4031 <https://github.com/easybuilders/easybuild-framework/pull/4031> `_ , `#4032 <https://github.com/easybuilders/easybuild-framework/pull/4032> `_ , `#4039 <https://github.com/easybuilders/easybuild-framework/pull/4039> `_ ) * make ``check_linked_shared_libs`` more robust by taking into account that ' ``ldd`` ' may fail ( `#4033 <https://github.com/easybuilders/easybuild-framework/pull/4033> `_ ) * fall back to sequential extension install if parallel install is not implemented ( `#4034 <https://github.com/easybuilders/easybuild-framework/pull/4034> `_ ) * add support for using template values in name/version of extensions ( `#4036 <https://github.com/easybuilders/easybuild-framework/pull/4036> `_ ) * various bug fixes, including: * make sure that ``ARCH`` constant has ' ``aarch64`` ' (rather than ' ``arm64`` ') as value on macOS ARM ( `#4018 <https://github.com/easybuilders/easybuild-framework/pull/4018> `_ ) * tweak ' ``eb`` ' wrapper script to correctly handle errors when python command being considered fails to run ( `#4019 <https://github.com/easybuilders/easybuild-framework/pull/4019> `_ ) * tweak ``is_patch_for`` function to make it more robust ( `#4028 <https://github.com/easybuilders/easybuild-framework/pull/4028> `_ ) * other changes: * update Lmod used to run tests to version 8.7.6 ( `#4027 <https://github.com/easybuilders/easybuild-framework/pull/4027> `_ , `#4030 <https://github.com/easybuilders/easybuild-framework/pull/4030> `_ ) * tweak ``apply_patch`` to not create ``.orig files`` (by default) when applying patch files ( `#4038 <https://github.com/easybuilders/easybuild-framework/pull/4038> `_ ) **easyblocks** * new software-specific easyblock for STAR-CCM+ ( `#1613 <https://github.com/easybuilders/easybuild-easyblocks/pull/1613> `_ ) * minor enhancements and updates, including: * update Siesta EasyBlock to support GCC 10+ by adding ``-fallow-argument-mismatch`` Fortran compiler option ( `#2690 <https://github.com/easybuilders/easybuild-easyblocks/pull/2690> `_ ) * enable building of shared library for Libint 2.7+ ( `#2738 <https://github.com/easybuilders/easybuild-easyblocks/pull/2738> `_ ) * allow some PyTorch tests to fail + print warning if one or more tests fail ( `#2742 <https://github.com/easybuilders/easybuild-easyblocks/pull/2742> `_ ) * also support OpenSSL 3.0 in OpenSSL wrapper easyblock ( `#2746 <https://github.com/easybuilders/easybuild-easyblocks/pull/2746> `_ ) * add more logging to ``install_pc_files`` method of OpenSSL wrapper easyblock ( `#2752 <https://github.com/easybuilders/easybuild-easyblocks/pull/2752> `_ ) * make WPS easyblock aware of ``(pre)buildopts`` ( `#2754 <https://github.com/easybuilders/easybuild-easyblocks/pull/2754> `_ ) * add Abseil system dependency for TensorFlow 2.9+ ( `#2757 <https://github.com/easybuilders/easybuild-easyblocks/pull/2757> `_ ) * disable altivec when building FFTW versions < 3.4 with single-precision with GCC on POWER ( `#2758 <https://github.com/easybuilders/easybuild-easyblocks/pull/2758> `_ ) * various bug fixes, including: * make VEP easyblock compatible with ``--sanity-check-only`` ( `#2743 <https://github.com/easybuilders/easybuild-easyblocks/pull/2743> `_ ) * update Rosetta easyblock to take into account that ``$LD_LIBRARY_PATH`` , ``$CPATH`` , ``$PATH`` may not be defined ( `#2744 <https://github.com/easybuilders/easybuild-easyblocks/pull/2744> `_ ) * only load temporary module file during sanity check for pybind11 for stand-alone installations, so it can be installed as extension ( `#2747 <https://github.com/easybuilders/easybuild-easyblocks/pull/2747> `_ ) * make sure that ``CMakeMakeCp`` uses correct build dir ( `#2748 <https://github.com/easybuilders/easybuild-easyblocks/pull/2748> `_ ) * enhance Bazel easyblock to avoid writing to ``$HOME`` in sanity check ( `#2756 <https://github.com/easybuilders/easybuild-easyblocks/pull/2756> `_ ) **easyconfigs** * added easyconfigs for ``foss/2022a`` , ``intel/2022a`` common toolchains ( `#15755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15755> `_ ) * see also https://docs.easybuild.io/en/latest/Common-toolchains.html * add easyconfig for ``gfbf/2022a`` toolchain ( `#15653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15653> `_ , `#15755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15755> `_ ) * added example easyconfig files for 24 new software packages: * BLT ( `#15624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15624> `_ ), category_encoders ( `#15638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15638> `_ ), fio ( `#10321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10321> `_ ), FSON ( `#15721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15721> `_ ), G-PhoCS ( `#7619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7619> `_ ), GCTA ( `#15649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15649> `_ ), Gibbs2 ( `#15702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15702> `_ ), InterProScan_data ( `#15717 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15717> `_ ), Jorg ( `#15346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15346> `_ ), libopus ( `#15682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15682> `_ ), Minipolish ( `#15713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15713> `_ ), mm-common ( `#15764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15764> `_ ), MONA ( `#15696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15696> `_ ), NetPyNE ( `#15606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15606> `_ ), pfind ( `#15685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15685> `_ ), regionmask ( `#15786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15786> `_ ), samplot ( `#15686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15686> `_ ), SISSO ( `#15766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15766> `_ ), sklearn-pandas ( `#15637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15637> `_ ), STAR-CCM+ ( `#7398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7398> `_ ), SWIPE ( `#6795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6795> `_ ), topaz ( `#15739 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15739> `_ ), uncertainty-calibration ( `#15612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15612> `_ ), Virtuoso-opensource ( `#14102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14102> `_ ) * added additional easyconfigs for various supported software packages, including: * AlphaFold 2.2.2, Arriba 2.3.0, Arrow 8.0.0, Bracken 2.7, CellRanger 7.0.0, Clp 1.17.7, CoinUtils 2.11.6, cppy 1.2.1, deal.II 9.3.3, double-conversion 3.2.0, Doxygen 1.9.4, FLAC 1.3.4, fmt 7.1.1, FSL 6.0.5.1, GDAL 3.5.0, gdbm 1.21, geopandas 0.11.0, GEOS 3.10.3, Ghostscript 9.56.1, GLibmm 2.66.4, Groovy 4.0.3, GULP 6.1, h5py 3.7.0, HDF5 1.13.1, hifiasm 0.16.1, IGMPlot 2.6.9b, ImageMagick 7.1.0-37, InterProScan 5.55-88.0, IRkernel 1.3, jemalloc 5.3.0, JsonCpp 1.9.5, Julia 1.7.3, Leptonica 1.82.0, libgeotiff 1.7.1, libgit2 1.4.3, libiconv 1.17, libRmath 4.2.0, libsigc++ 2.10.8, libsndfile 1.1.0, libxc 5.2.3, libxml++ 2.42.1, line_profiler 3.5.1, LittleCMS 2.13.1, MaSuRCA 4.0.9, mayavi 4.7.4, MetaEuk 5, mold 1.3.0, NCCL 2.12.12, netCDF 4.9.0, nettle 3.8, networkx 2.8.4, NEURON 7.8.2, NLopt 2.7.1, nodejs 16.15.1, NSPR 4.34, NSS 3.79, nsync 1.25.0, nvtop 2.0.2, Osi 0.108.7, p4est 2.8, parasail 2.5, Pillow 9.1.1, PLUMED 2.8.0, PnetCDF 1.12.3, PRISMS-PF 2.2, PROJ 9.0.0, protobuf 3.19.4, protobuf-python 3.19.4, pyfaidx 0.7.0, PyOpenGL 3.1.6, pyproj 3.3.1, PyTorch 1.11.0, Qhull 2020.2, Qt5 5.15.5, QuantumESPRESSO 7.1, Qwt 6.2.0, R 4.2.1, rasterio 1.2.10, Ray-project 1.13.0, RE2 2022-06-01, redis-py 4.3.3, ReFrame 3.11.2, rioxarray 0.11.1, RNA-SeQC 2.4.2, Schrodinger 2022-2, Shapely 1.8.2, Siesta 4.1.5, SimpleITK 2.1.1.2, SpectrA 1.0.1, TensorFlow 2.7.1, Tk 8.6.12, Tkinter 3.10.4, Transformers 4.20.1, UCX-CUDA 1.12.1, utf8proc 2.7.0, WhatsHap 1.4, WPS 3.9.1, Xvfb 21.1.3 * minor enhancements, including: * add extensions to R v4.2.0: hypergeo ( `#15701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15701> `_ ), rtdists ( `#15734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15734> `_ ), geeM ( `#15810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15810> `_ ) * add patch for GCCcore 11.3.0 to support using ``-fuse-ld=mold`` ( `#15715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15715> `_ ) * add patch for porefoam to fix hardcoded ``mpirun`` command and take into account ``$POREFOAM_MPIRUN_CMD`` ( `#15730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15730> `_ ) * various bug fixes, including: * switch to Rust 1.60.0 build dependency for bamtofastq, since build fails with Rust 1.52.1 ( `#15636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15636> `_ ) * avoid that pygmo v2.18.0 installs stuff in Python installation directory + add custom sanity check paths to pygmo easyconfigs ( `#15657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15657> `_ ) * add patch for Mmg v5.6.0 to remove library CI tests that point to external sources ( `#15691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15691> `_ ) * correct configopts in deal.II v9.1.1 easyconfig ( `#15692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15692> `_ ) * add missing Python dependency for HPDBSCAN to fix unresolved ``%(pyshortver)s`` template ( `#15694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15694> `_ ) * other changes: * disable flaky GPU test for TensorFlow 2.6.0 ( `#15824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15824> `_ ) .. _release_notes_eb455: EasyBuild v4.5.5 (June 8th 2022) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add toolchain definitions for ``nvompi`` (NVHPC + OpenMPI) ( `#3969 <https://github.com/easybuilders/easybuild-framework/pull/3969> `_ ), ``nvpsmpi`` (NVHPC + ParaStationMPI) ( `#3970 <https://github.com/easybuilders/easybuild-framework/pull/3970> `_ ), ``gfbf`` (GCC, FlexiBLAS, FFTW) ( `#4006 <https://github.com/easybuilders/easybuild-framework/pull/4006> `_ ) * add support for ``FFTW.MPI`` toolchain component ( ``$FFT*DIR`` variables) ( `#4012 <https://github.com/easybuilders/easybuild-framework/pull/4012> `_ ) * add support for customizing EasyBuild command used in jobs via ``--job-eb-cmd`` ( `#4016 <https://github.com/easybuilders/easybuild-framework/pull/4016> `_ ) * various bug fixes, including: * fix copying of easyconfig file with ``--copy-ec`` without ``--rebuild`` if module is already installed ( `#3993 <https://github.com/easybuilders/easybuild-framework/pull/3993> `_ ) * ignore deprecation warnings regarding cryptography in Python 3.6 + Blowfish with Python 3.10 in test suite output ( `#3999 <https://github.com/easybuilders/easybuild-framework/pull/3999> `_ ) * fix typo in debug log message in ``easyblock.py`` ( `#4000 <https://github.com/easybuilders/easybuild-framework/pull/4000> `_ ) * fix printing of list of attempted download URLs when url-encoded characters are used in URL ( `#4005 <https://github.com/easybuilders/easybuild-framework/pull/4005> `_ ) * set ``$FFT(W)_LIB_DIR`` to imkl-FFTW's lib path in build environment if usempi toolchain option is enabled ( `#4011 <https://github.com/easybuilders/easybuild-framework/pull/4011> `_ ) * correctly identify Apple Silicon M1 as Arm 64-bit by also considering arm64 next to aarch64 ( `#4014 <https://github.com/easybuilders/easybuild-framework/pull/4014> `_ ) * fix ' ``eb --show-system-info`` ' on Apple M1 system ( `#4015 <https://github.com/easybuilders/easybuild-framework/pull/4015> `_ ) * other changes: * change ' ``eb`` ' command to ``import easybuild.framework`` to check if EasyBuild framework is available ( `#3995 <https://github.com/easybuilders/easybuild-framework/pull/3995> `_ , `#3998 <https://github.com/easybuilders/easybuild-framework/pull/3998> `_ ) **easyblocks** * new software-specific easyblock for FFTW.MPI ( `#2724 <https://github.com/easybuilders/easybuild-easyblocks/pull/2724> `_ ) * minor enhancements and updates, including: * update NEURON easyblock to use CMakeMake for recent versions ( `#2304 <https://github.com/easybuilders/easybuild-easyblocks/pull/2304> `_ ) * enhance Clang easyblock to add support for building with AMDGPU offload ( `#2684 <https://github.com/easybuilders/easybuild-easyblocks/pull/2684> `_ , `#2729 <https://github.com/easybuilders/easybuild-easyblocks/pull/2729> `_ ) * update sanity check in OpenMPI easyblock to support OpenMPI v5.0.0 ( `#2709 <https://github.com/easybuilders/easybuild-easyblocks/pull/2709> `_ ) * don't use ``gold`` linker by default for GCC >= 11.3 ( `#2711 <https://github.com/easybuilders/easybuild-easyblocks/pull/2711> `_ ) * update sanity check in R easyblock for versions >= 4.2.0, since S.h is not included anymore ( `#2713 <https://github.com/easybuilders/easybuild-easyblocks/pull/2713> `_ ) * update ABAQUS easyblock for ABAQUS 2022 ( `#2716 <https://github.com/easybuilders/easybuild-easyblocks/pull/2716> `_ ) * update LLVM easyblock for LLVM v14.0.x ( `#2718 <https://github.com/easybuilders/easybuild-easyblocks/pull/2718> `_ ) * update Mesa easyblock to remove swr driver configopts for versions 22+ ( `#2719 <https://github.com/easybuilders/easybuild-easyblocks/pull/2719> `_ ) * enhance Clang easyblock to support also installing Python bindings ( `#2721 <https://github.com/easybuilders/easybuild-easyblocks/pull/2721> `_ , `#2725 <https://github.com/easybuilders/easybuild-easyblocks/pull/2725> `_ ) * enhance SuperLU easyblock to support building on top of FlexiBLAS and be compatible with SuperLU v5.3 ( `#2722 <https://github.com/easybuilders/easybuild-easyblocks/pull/2722> `_ ) * update TensorFlow easyblock for version 2.8.0 ( `#2723 <https://github.com/easybuilders/easybuild-easyblocks/pull/2723> `_ ) * modify FFTW's sanity check step to allow checking only for MPI parts of FFTW installation ( `#2724 <https://github.com/easybuilders/easybuild-easyblocks/pull/2724> `_ ) * add support to ConfigureMake for tweaking (first part of) test command via ' ``test_cmd`` ' ( `#2726 <https://github.com/easybuilders/easybuild-easyblocks/pull/2726> `_ , `#2737 <https://github.com/easybuilders/easybuild-easyblocks/pull/2737> `_ ) * enhance MrBayes easyblock with custom sanity check command ( `#2727 <https://github.com/easybuilders/easybuild-easyblocks/pull/2727> `_ ) * update cudnnarch string templates used to compose source tarball names from cuDNN 8.3.3 onwards ( `#2728 <https://github.com/easybuilders/easybuild-easyblocks/pull/2728> `_ ) * add sanity check command to OpenSSL wrapper easyblock to verify that system certificates are available to OpenSSL ( `#2735 <https://github.com/easybuilders/easybuild-easyblocks/pull/2735> `_ ) * ignore exit code of ``pkg-config`` command in OpenSSL wrapper easyblock, since with ``pkgconf`` they exit with a non-zero exit code if the OS package is not installed ( `#2736 <https://github.com/easybuilders/easybuild-easyblocks/pull/2736> `_ ) * various bug fixes, including: * remove system-compiled binutils dirs from ``$LDFLAGS`` in binutils easyblock ( `#2712 <https://github.com/easybuilders/easybuild-easyblocks/pull/2712> `_ ) * fix for FreeSurfer easyblock: define ``$FREESURFER`` needed by recon_all ( `#2717 <https://github.com/easybuilders/easybuild-easyblocks/pull/2717> `_ ) * also symlink ``cert.pem`` in from-source OpenSSL installation (if it exists) ( `#2735 <https://github.com/easybuilders/easybuild-easyblocks/pull/2735> `_ ) **easyconfigs** * add candidates for 2022a common toolchains: ``foss/2022.05`` ( `#15561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15561> `_ ), intel/2022.05 ( `#15485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15485> `_ ) * added example easyconfig files for 35 new software packages: * Albumentations ( `#15302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15302> `_ ), AMPtk ( `#15435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15435> `_ ), arosics ( `#15249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15249> `_ ), CellTypist ( `#15530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15530> `_ ), detectron2 ( `#15442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15442> `_ ), EigenExa ( `#15234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15234> `_ ), Fastaq ( `#15332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15332> `_ ), FFTW.MPI ( `#15561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15561> `_ ), FreeBarcodes ( `#15350 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15350> `_ ), gcloud ( `#15443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15443> `_ ), GST-plugins-bad ( `#15446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15446> `_ ), gsutil ( `#15507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15507> `_ ), GTK4 ( `#15447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15447> `_ ), hector ( `#15397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15397> `_ ), i7z ( `#15236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15236> `_ ), libde265 ( `#15395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15395> `_ ), libheif ( `#15395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15395> `_ ), ModelTest-NG ( `#15448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15448> `_ ), num2words ( `#15473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15473> `_ ), OGDF ( `#15407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15407> `_ ), panito ( `#15314 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15314> `_ ), parameterized ( `#15481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15481> `_ ), purge_dups ( `#15385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15385> `_ ), redis-py ( `#15475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15475> `_ ), ruamel.yaml ( `#15531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15531> `_ ), SCGid ( `#15065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15065> `_ ), scPred ( `#15575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15575> `_ ), slow5tools ( `#15457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15457> `_ ), smooth-topk ( `#15506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15506> `_ ), SPOTPY ( `#15326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15326> `_ ), tmap ( `#14601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14601> `_ ), UCC ( `#14291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14291> `_ ), Wayland ( `#11107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11107> `_ ), XGrafix ( `#15268 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15268> `_ ), XPLOR-NIH ( `#15479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15479> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2022, Arb 2.22.1, ARGoS 3.0.0, Arriba 2.2.1, astropy 5.0.4, ATK 2.38.0, Autotools 20220317, Bader 1.04, Bazel 4.2.2 + 5.1.1, BDBag 1.6.3, binutils 2.38, biom-format 2.1.12, BLIS 0.9.0, Boost 1.79.0, breseq 0.36.1, bx-python 0.8.13, cairo 1.17.4, CellRanger-ARC 2.0.1, CMake 3.23.1, cryoDRGN 1.0.0, CUDA 11.7.0, cuDNN 8.4.1.50, cURL 7.83.0, DBus 1.14.0, eggnog-mapper 2.1.7, elfutils 0.187, EvidentialGene 2022.01.14, expat 2.4.8, FlexiBLAS 3.2.0, FLINT 2.8.4, fontconfig 2.14.0, freebayes 1.3.6, freeglut 3.2.2, freetype 2.12.1, FriBidi 1.0.12, GCC 9.5.0 + 11.3.0 + GCC 12.1.0, Gdk-Pixbuf 2.42.8, geopandas 0.10.2, git 2.36.0, GLib 2.72.1, GMAP-GSNAP 2021-21-17, Go 1.18.1, GObject-Introspection 1.72.0, Graphene 1.10.8, GST-plugins-base 1.20.2, GStreamer 1.20.2, GTDB-Tk 2.0.0, GTK3 3.24.33, gzip 1.12, HarfBuzz 4.2.1, help2man 1.49.2, hwloc 2.7.1, hypothesis 6.46.7, Hypre 2.24.0, ICU 71.1, IGV 2.12.3, IMB 2021.3, inferCNV 1.10.1, InterProScan 5.52, IQ-TREE 2.2.1, jax 0.3.9, json-c 0.16, LAPACK 3.10.1, libarchive 3.6.1, libdeflate 1.10, libdrm 2.4.110, libedit 20210910, libepoxy 1.5.10, libfabric 1.15.1, libglvnd 1.4.0, libjpeg-turbo 2.1.3, libreadline 8.1.2, librsb 1.3.0.1, librsvg 2.52.8, libtool 2.4.7, libunwind 1.6.2, libxml2 2.9.13, LLVM 14.0.3, LocARNA 1.9.2.3, MACS2 2.2.7.1, magma 2.6.2, Mako 1.2.0, Mathematica 13.0.0, MCL 14.137, MCR R2022a.1, Mesa 22.0.3, Meson 0.62.1, MIRA 5.0rc2, Mmg 5.6.0, mold 1.2.1, mosdepth 0.3.3, MrBayes 3.2.7a, MultiQC 1.12, MUMPS 5.5.0, muParser 2.3.3, ncurses 6.3, neptune-client 0.16.2, Nextflow 22.04.0, Nim 1.6.6, NTPoly 2.7.1, OpenMPI 4.1.4, openpyxl 3.0.9, OpenSSL 1.1.1n, OpenStackClient 5.8.0, OSU-Micro-Benchmarks 5.9, pagmo 2.18.0, Pango 1.50.7, parallel-fastq-dump 0.6.7, PCRE2 10.40, Perl 5.34.1, Pillow 9.1.0, PLINK 2.00a3.1, PMIx 4.1.2, PyAMG 4.2.3, pybind11 2.9.2, PyCairo 1.21.0, pygmo 2.18.0, PyGObject 3.42.1, Python 3.10.4, R 4.2.0, RAxML-NG 1.1.0, R-bundle-Bioconductor 3.15, ReFrame 3.11.0, RNA-Bloom 1.4.3, rnaQUAST 2.2.2, Rust 1.60.0, Sambamba 0.8.2, SAMtools 1.15.1, ScaLAPACK 2.2.0, SciPy-bundle 2022.05, SeqKit 2.2.0, Shapely 1.8.1.post1, SpaceRanger 1.3.1, Spack 0.17.2, Spark 3.2.1, SQLite 3.38.3, StringTie 2.2.1, SUMO 1.12.0, SuperLU 5.3.0, tbl2asn 20220427, Tcl 8.6.12, TCLAP 1.2.5, tcsh 6.24.01, texlive 20220321, ToFu 1.5.0, UCX 1.12.1, util-linux 2.38, VEP 105, ViennaRNA 2.5.0, vsc-mympirun 5.2.11, worker 1.6.13, X11 2022050, YAXT 0.9.2.1, Z3 4.8.16, Zip 3.0, zlib 1.2.12, zstd 1.5.2 * minor enhancements, including: * use OpenSSL wrapper dependency for CMake 3.18.4 with system toolchain ( `#15227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15227> `_ ) * also build BLIS backend for FlexiBLAS v3.0.4 with GCC/10.3.0 ( `#15347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15347> `_ ) * add extensions to R v4.1.2 + v4.2.0 easyconfigs: * Hmsc ( `#15393 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15393> `_ ), MonteCarlo + RhpcBLASctl ( `#15438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15438> `_ ), chkptstanr ( `#15540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15540> `_ ), chkptstanr + MLmetrics + renv ( `#15573 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15573> `_ ) * add extensions to R-bundle-Bioconductor 3.14 easyconfig: DNABarcodes ( `#15405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15405> `_ ) * use redist source_urls for cuDNN > 7.5 ( `#15411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15411> `_ ) * add download_instructions to Java 1.8 > 200 ( `#15412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15412> `_ ) * update Arrow to use EB versions of some dependencies and enable all compression codecs ( `#15512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15512> `_ ) * add csh -> tcsh symlink in recent tcsh easyconfigs ( `#15571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15571> `_ ) * allow external tools to be located elsewhere for ETE ( `#15578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15578> `_ ) * add additional sanity check commands for IQ-TREE v2.2.1 ( `#15596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15596> `_ ) * various bug fixes, including: * fix source URL for freetype 2.6.5 with ``foss/2016b`` ( `#14204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14204> `_ ) * fix installation of easybuild-easyconfigs with setuptools>=61 by explicitly declaring there are no Python packages ( `#15206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15206> `_ ) * use x.py to bootstrap Rust so that build options are properly passed through ( `#15211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15211> `_ ) * fix RepeatMasker-4.1.2-p1 easyconfig by moving the database configure command to postinstallcmds ( `#15280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15280> `_ , `#15615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15615> `_ ) * add hwloc dependency to tbb v2021.4.0 ( `#15294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15294> `_ ) * tweak find command used in preconfigopts in easyconfig for pkg-config v0.29.2 with system toolchain to avoid descending into other filesystems ( `#15313 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15313> `_ ) * remove pkg-config use from SeqLib configure patch (avoids problem due to faulty autoconf macro) ( `#15316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15316> `_ ) * update source URL for isl in GCCcore easyconfigs ( `#15320 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15320> `_ ) * update source URLs for YAXT 0.9.x to fix download ( `#15323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15323> `_ ) * define ``$HHLIB`` as path to HH-suite installation directory, required by Perl scripts ( `#15324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15324> `_ ) * add missing parallel and tbl2asn dependencies for prokka 1.14.5 ( `#15360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15360> `_ , `#15381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15381> `_ ) * add missing dependencies for libheif (libpng, libjpeg-turbo) ( `#15408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15408> `_ ) * switch to configuring build of libheif with CMake so libde265 dependency is picked up ( `#15408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15408> `_ ) * disable use of ``-ftree-vectorize`` for OpenFOAM v2112 with ``foss/2021b`` ( `#15495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15495> `_ ) * add patch for OpenMPI 4.1.1 to support building using ``--with-cuda=internal`` ( `#15528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15528> `_ , `#15589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15589> `_ ) * add patch to fix support for external PMIx v3.1 in OpenMPI v3.1.3 ( `#15566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15566> `_ ) * also build shared library + fix ``$PYTHONPATH`` for gmsh 4.9.0 ( `#15579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15579> `_ ) * add patch for GLib 2.68.2 to fix use of close_range ( `#15594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15594> `_ ) * fix download of thrift 0.12.0 for Arrow 0.16.0 ( `#15597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15597> `_ ) * add Bison and flex build dependencies to SCOTCH 6.1.x ( `#15618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15618> `_ ) * add alternative checksums for class, nnet, spatial extensions in R v4.2.0 easyconfig ( `#15619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15619> `_ ) * add missing dependencies + switch to non-static build for Arriba v2.1.0 ( `#15623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15623> `_ ) * other changes: * add R dependency to vcflib 1.0.3, and move from GCC/11.2.0 to ``foss/2021b`` toochain ( `#15216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15216> `_ ) * update fallback version for OpenSSL 1.1 wrapper to v1.1.1o ( `#15592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15592> `_ ) * install sklearn meta-package with scikit-learn v1.0.1 ( `#15613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15613> `_ ) * switch from ``pkg-config`` to ``pkgconf`` as build dependency for OpenSSL wrapper easyconfigs ( `#15616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15616> `_ , `#15617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15617> `_ ) .. _release_notes_eb454: EasyBuild v4.5.4 (March 31st 2022) ---------------------------------- bugfix/update release **framework** * various enhancements, including: * warn about potentially missing patches in ``--new-pr`` ( `#3759 <https://github.com/easybuilders/easybuild-framework/pull/3759> `_ , `#3966 <https://github.com/easybuilders/easybuild-framework/pull/3966> `_ ) * add support for ' ``clone_into`` ' field in git_config source spec to specify different name for top-level directory ( `#3949 <https://github.com/easybuilders/easybuild-framework/pull/3949> `_ ) * add bash completion for easyconfigs from local dir but not robot search path ( `#3953 <https://github.com/easybuilders/easybuild-framework/pull/3953> `_ ) * add a 'sync pr' message when the PR has a mergeable state but is showing a failed status for the test suite on the last commit ( `#3967 <https://github.com/easybuilders/easybuild-framework/pull/3967> `_ ) * add ``gmpit`` toolchain definition (GCC + MPItrampoline) ( `#3971 <https://github.com/easybuilders/easybuild-framework/pull/3971> `_ ) * use ' ``zypper search -i`` ' to check whether specified OS dependency is installed on openSUSE + make sure that rpm is considered for checking OS dependencies on RHEL8 ( `#3973 <https://github.com/easybuilders/easybuild-framework/pull/3973> `_ ) * add support for post-install patches ( `#3974 <https://github.com/easybuilders/easybuild-framework/pull/3974> `_ ) * add support for ' ``download_instructions`` ' easyconfig parameter key to specify some download or installation steps for user in case of complicated way of obtaining needed files ( `#3976 <https://github.com/easybuilders/easybuild-framework/pull/3976> `_ , `#3981 <https://github.com/easybuilders/easybuild-framework/pull/3981> `_ ) * also try collecting AMD GPU info (via ``rocm-smi`` ) for ``--show-system-info`` ( `#3978 <https://github.com/easybuilders/easybuild-framework/pull/3978> `_ , `#3982 <https://github.com/easybuilders/easybuild-framework/pull/3982> `_ ) * various bug fixes, including: * ensure ``--review-pr`` can find dependencies included in PR ( `#3979 <https://github.com/easybuilders/easybuild-framework/pull/3979> `_ ) * run ' ``apt-get update`` ' in GitHub Actions workflow for container tests to update container package list before installing anything ( `#3985 <https://github.com/easybuilders/easybuild-framework/pull/3985> `_ ) * other changes: * enable code linting check for all supported Python versions ( `#3725 <https://github.com/easybuilders/easybuild-framework/pull/3725> `_ ) * update copyright lines for 2022 ( `#3986 <https://github.com/easybuilders/easybuild-framework/pull/3986> `_ ) **easyblocks** * minor enhancements and updates, including: * update Clang-AOMP easyblock to add support for ROCm v5.0 ( `#2681 <https://github.com/easybuilders/easybuild-easyblocks/pull/2681> `_ ) * enable system SSL certificates in OpenSSL installations ( `#2683 <https://github.com/easybuilders/easybuild-easyblocks/pull/2683> `_ ) * enhance MRtrix easyblock: build in parallel + enable OpenMP support for MRtrix >= 3.0 ( `#2685 <https://github.com/easybuilders/easybuild-easyblocks/pull/2685> `_ ) * avoid dependency on ' ``which`` ' command in sanity check for Python, use ' ``command -v`` ' instead ( `#2687 <https://github.com/easybuilders/easybuild-easyblocks/pull/2687> `_ ) * enhance Tarball easyblock to support using it for installing extensions ( `#2688 <https://github.com/easybuilders/easybuild-easyblocks/pull/2688> `_ ) * update wxPython easyblock to support wxPython v4.1 ( `#2689 <https://github.com/easybuilders/easybuild-easyblocks/pull/2689> `_ ) * enhance Gurobi easyblock to also update ``$MATLABPATH`` ( `#2691 <https://github.com/easybuilders/easybuild-easyblocks/pull/2691> `_ ) * build single-file shared libraries for imkl so it can be used as FlexiBLAS backend via ``$FLEXIBLAS_LIBRARY_PATH`` ( `#2694 <https://github.com/easybuilders/easybuild-easyblocks/pull/2694> `_ ) * various bug fixes, including: * added regex to replace /lib/cpp with cpp in OpenFOAM's wmake rules file ( `#2331 <https://github.com/easybuilders/easybuild-easyblocks/pull/2331> `_ ) * set ``$NINJAFLAGS`` to make sure Ninja doesn't use all visible cores when building Qt5 ( `#2338 <https://github.com/easybuilders/easybuild-easyblocks/pull/2338> `_ ) * update Siesta EasyBlock to use serial FFTW ( `#2662 <https://github.com/easybuilders/easybuild-easyblocks/pull/2662> `_ ) * fix support for imkl for numexpr 2.8.0+ in numexpr easyblock ( `#2678 <https://github.com/easybuilders/easybuild-easyblocks/pull/2678> `_ ) * make sure TensorFlow doesn't see the ``nvptx-none`` dir when searching for ``gcc`` include dir ( `#2682 <https://github.com/easybuilders/easybuild-easyblocks/pull/2682> `_ ) * force use of bash for Anaconda install script ( `#2692 <https://github.com/easybuilders/easybuild-easyblocks/pull/2692> `_ ) * add guess for path to add to ``$MANPATH`` for intel-compilers ( `#2696 <https://github.com/easybuilders/easybuild-easyblocks/pull/2696> `_ ) * change permissions of the Java build directory to avoid permission denied error ( `#2698 <https://github.com/easybuilders/easybuild-easyblocks/pull/2698> `_ ) * also consider ``$MKLROOT/lib/pkgconfig`` for ``$PKG_CONFIG_PATH`` for imkl ( `#2701 <https://github.com/easybuilders/easybuild-easyblocks/pull/2701> `_ ) * close log after installing Bundle component ( `#2702 <https://github.com/easybuilders/easybuild-easyblocks/pull/2702> `_ ) * fixes problem of log leaking across installations ( `framework issue #3533 <https://github.com/easybuilders/easybuild-framework/issues/3533> `_ ) * replace hardcoded /tmp to make sure that Bazel build respects ``$TMPDIR`` ( `#2703 <https://github.com/easybuilders/easybuild-easyblocks/pull/2703> `_ ) * other changes: * minor code cleanup in numexpr easyblock ( `#2679 <https://github.com/easybuilders/easybuild-easyblocks/pull/2679> `_ ) * update copyright lines for 2022 ( `#2705 <https://github.com/easybuilders/easybuild-easyblocks/pull/2705> `_ ) **easyconfigs** * added example easyconfig files for 29 new software packages: * Abseil ( `#15102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15102> `_ ), AMS ( `#13155 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13155> `_ ), ArchR ( `#15119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15119> `_ ), CMAverse ( `#14963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14963> `_ ), CmdStanR ( `#15198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15198> `_ ), CONN ( `#15052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15052> `_ ), Devito ( `#14984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14984> `_ , `#15009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15009> `_ ), GraphMap ( `#10299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10299> `_ ), gRPC ( `#14728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14728> `_ ), Hydra ( `#15025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15025> `_ ), jupyter-server-proxy ( `#14844 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14844> `_ ), M1QN3 ( `#15002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15002> `_ ), MAGeCK ( `#15082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15082> `_ ), matplotlib-inline ( `#15084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15084> `_ ), MEGAN ( `#15064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15064> `_ ), MNE-Python ( `#15174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15174> `_ ), ONNX ( `#15158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15158> `_ ), ONNX-Runtime ( `#15158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15158> `_ ), ont-remora ( `#15162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15162> `_ ), Optuna ( `#15021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15021> `_ ), patch ( `#15035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15035> `_ ), porefoam ( `#15067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15067> `_ ), presto ( `#15119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15119> `_ ), PyFrag ( `#15184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15184> `_ ), skorch ( `#15175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15175> `_ ), SlamDunk ( `#15197 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15197> `_ ), SPM ( `#15050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15050> `_ ), STRique ( `#14980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14980> `_ ), XML-Compile ( `#15177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15177> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2021, AlphaFold 2.1.2, AmberTools 21, archspec 0.1.3, Bandage 0.9.0, BLIS 3.1, c-ares 1.18.1, CCL 1.12.1, CharLS 2.3.4, Clang-Python-bindings 13.0.1, dcm2niix 1.0.20211006, DFTB+ 21.1, DIRAC 22.0, ELPA 2021.11.001, FlexiBLAS 3.1.3, FLUENT 2021R2, GATK 4.2.5.0, GetOrganelle 1.7.5.3, IgBLAST 1.18.0, IntelClusterChecker 2021.5.0, intervaltree-python 3.1.0, ITSx 1.1.3, Julia 1.7.2, kallisto 0.48.0, KMC 3.2.1, libobjcryst 2021.1.2, libtree 3.0.3, loompy 3.0.7, matplotlib 3.5.1, MCR R2022a, MDAnalysis 1.1.1+ 2.0.0, MDTraj 1.9.7, medaka 1.5.0, meshalyzer 20200308, MRtrix 3.0.3, NiBabel 3.2.2, NLTK 3.7, numexpr 2.8.1, ont-fast5-api 4.0.2, OpenAI-Gym 0.21.0, OpenBLAS 0.3.20, ORCA 5.0.3, parallel-fastq-dump 0.6.6, PIPITS 2.8, pocl 1.8, pycocotools 2.0.4, pyEGA3 4.0.0, pyobjcryst 2.2.1, RE2 2022-02-01, SAMtools 1.15, SBCL 2.2.1, shovill 1.1.0, SKESA 2.4.0, SOCI 4.0.3, sympy 1.9, TensorFlow 2.5.3, VirtualGL 3.0, vsc-mympirun 5.2.10, VSEARCH 2.21.1, VTK 9.1.0, VTune 2022.2.0, XGBoost 1.5.0 * minor enhancements, including: * add Flask-Session to Flask v1.1.4 and Flask v2.0.2 ( `#15027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15027> `_ ) * add check to verify that patch files touched in PRs have a description in place ( `#15061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15061> `_ ) * add extensions to R v4.1.2 easyconfig: hash ( `#15098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15098> `_ ), nabor + harmony ( `#15117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15117> `_ ), apluster, DataCombine, docstring, gdalUtils, openair, mstate, SNFtool, and deps ( `#15141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15141> `_ ) * also install rMATS_P commands in rMATS-turbo easyconfig ( `#15113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15113> `_ ) * add extensions to Bioconductor v3.14 easyconfig: chromVAR ( `#15118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15118> `_ ), EnsDb.Hsapiens.v79 ( `#15154 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15154> `_ ), WGCNA ( `#15178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15178> `_ ) * add extensions to Perl v5.34.0 easyconfigs: Sys::Info, HTML::Template, Log::Report ( `#15176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15176> `_ ), Sys::Info::Driver::Unknown, Sys::Info::Driver::Linux, Unix::Processors ( `#15190 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15190> `_ ) * enable running of tests for MEME with ``gompi/2021b`` ( `#15191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15191> `_ , `#15199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15199> `_ ) * various bug fixes, including: * add missing xxd build dependency for recent PLUMED versions (2.6.2, 2.7.x) ( `#14847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14847> `_ ) * downgrade dependency on nodejs + use jupyter-server-proxy in jupyter-matlab-proxy and configurable-http-proxy easyconfigs using ``GCCcore/10.3.0`` toolchain ( `#14942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14942> `_ ) * add additional valid checksum for extensions in R 4.1.0 and 4.1.2 easyconfigs: norm ( `#14987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14987> `_ ), optmatch ( `#14993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14993> `_ ) * avoid pollution in the tmp directory when running the AlphaFold tests ( `#14989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14989> `_ ) * consistently enable usempi toolchain option in OSU-Micro-Benchmarks easyconfigs ( `#15039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15039> `_ ) * fix GBprocesS easyconfig by switching to source tarball created using ``git_config`` ( `#15048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15048> `_ ) * add patches for mauveAligner to fix build on RHEL8 ( `#15049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15049> `_ ) * fix installation of RDKit by using ``-DBoost_NO_BOOST_CMAKE=ON`` ( `#15051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15051> `_ ) * add patch to fix linking error for imread extension in scikit-image easyconfigs using intel toolchain ( `#15054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15054> `_ ) * avoid excessively long shebang in Autoconf/Automake Perl scripts + promote Perl to runtime dependency + fix Perl shebang for intltool ( `#15055 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15055> `_ ) * fix ``python`` shebang in cutadapt script for cutadapt 1.18 w/ ``GCCcore/8.3.0`` ( `#15059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15059> `_ ) * don't use v2.1.0rc1 release candidate of gmpy2, stick to proper release v2.1.2 ( `#15060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15060> `_ ) * add M4 as build dependency for CCL-1.12 ( `#15075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15075> `_ ) * configure libffi 3.4.2 with ``--disable-exec-static-tramp`` to prevent segfaults ( `#15086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15086> `_ ) * set ``XLA_PYTHON_CLIENT_ALLOCATOR=platform`` for running tests in jax CUDA easyconfigs ( `#15097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15097> `_ ) * remove disable flag for RTTI in snappy v1.1.9 ( `#15099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15099> `_ ) * fix grconvert build for Grace 5.1.25 with ``foss/2021a`` by adding libtirpc dependency + related patch ( `#15121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15121> `_ ) * clean up PSolver and futile easyconfigs and add dynamic libs ( `#15148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15148> `_ ) * enhance vcflib easyconfigs to also install scripts ( `#15181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15181> `_ ) * add patch to fix shared linking in vcflib ( `#15203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15203> `_ ) * fix failing sanity check for PRINSEQ ( `#15205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15205> `_ ) * other changes: * use typing-extensions from Python v3.9.6 easyconfig in ArviZ and PyMC3 ( `#15003 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15003> `_ ) * disable building of documentation for DBus 1.13.18 ( `#15010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15010> `_ ) * consistently use system toolchain in EasyBuild easyconfigs ( `#15126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15126> `_ ) * use EasyBuild hwloc in likwid and move to GCC/intel-compiler level due to Fortran modules ( `#15149 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15149> `_ ) .. _release_notes_eb453: EasyBuild v4.5.3 (February 11th 2022) ------------------------------------- bugfix/update release **framework** * various enhancements, including: * also check for git in ``--check-eb-deps`` ( `#3954 <https://github.com/easybuilders/easybuild-framework/pull/3954> `_ ) * add end2end test for ``eb --containerize`` ( `#3958 <https://github.com/easybuilders/easybuild-framework/pull/3958> `_ ) * various bug fixes, including: * take into account that patch files can also be zipped when checking filename extension for patches ( `#3936 <https://github.com/easybuilders/easybuild-framework/pull/3936> `_ ) * initialize ``BACKUP_PKG_URL`` with empty string in ``install_eb_dep.sh`` script ( `#3939 <https://github.com/easybuilders/easybuild-framework/pull/3939> `_ ) * fix ``get_os_name`` and ``get_os_version`` to avoid reporting ``UNKNOWN`` in output of ``eb --show-system-info`` ( `#3942 <https://github.com/easybuilders/easybuild-framework/pull/3942> `_ ) * consistently use ``actions/setup-python@v2`` in CI workflows ( `#3944 <https://github.com/easybuilders/easybuild-framework/pull/3944> `_ ) * switch to using ``pip3`` for installing EasyBuild in container recipes generated by EasyBuild ( `#3945 <https://github.com/easybuilders/easybuild-framework/pull/3945> `_ ) * specify ``easybuild.io`` as EasyBuild homepage in ``setup.py`` ( `#3947 <https://github.com/easybuilders/easybuild-framework/pull/3947> `_ ) * avoid crash in ``get_os_version`` on modern SLES-based OSs ( `#3955 <https://github.com/easybuilders/easybuild-framework/pull/3955> `_ ) * other changes: * indicate compatibility with Python 3.10 in ``setup.py`` ( `#3940 <https://github.com/easybuilders/easybuild-framework/pull/3940> `_ ) **easyblocks** * new software-specific easyblock for reticulate R package ( `#2668 <https://github.com/easybuilders/easybuild-easyblocks/pull/2668> `_ ) * minor enhancements and updates, including: * set CUDA target architecture(s) for GROMACS based on ``cuda_cc_semicolon_sep`` template value ( `#2655 <https://github.com/easybuilders/easybuild-easyblocks/pull/2655> `_ ) * add support to NAMD easyblock to opt out of building with CUDA support even if CUDA is included as dependency ( `#2666 <https://github.com/easybuilders/easybuild-easyblocks/pull/2666> `_ ) * update sanity check in CUDA easyblock: CUDA 11.6 no longer includes samples ( `#2669 <https://github.com/easybuilders/easybuild-easyblocks/pull/2669> `_ ) * various bug fixes, including: * also run easyblocks test suite with Python 3.8-3.10 + consistently use ``actions/setup-python@v2`` in CI workflows ( `#2664 <https://github.com/easybuilders/easybuild-easyblocks/pull/2664> `_ ) * specify ``easybuild.io`` as EasyBuild homepage in ``setup.py`` ( `#2667 <https://github.com/easybuilders/easybuild-easyblocks/pull/2667> `_ ) * other changes: * remove vulnerable binaries from sanity check of HDF5, no longer installed by default with HDF5 1.10.8 ( `#2670 <https://github.com/easybuilders/easybuild-easyblocks/pull/2670> `_ ) **easyconfigs** * added example easyconfig files for 25 new software packages: * Arcade-Learning-Environment ( `#14753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14753> `_ ), Bambi ( `#14811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14811> `_ ), CASTEP ( `#14420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14420> `_ ), Crumble ( `#14785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14785> `_ ), deepmedic ( `#14953 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14953> `_ ), FoBiS ( `#14771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14771> `_ ), histolab ( `#14945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14945> `_ ), Iris ( `#14788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14788> `_ ), Jasmine ( `#14789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14789> `_ ), libexif ( `#14823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14823> `_ ), libgdiplus ( `#14823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14823> `_ ), MuJoCo ( `#14965 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14965> `_ ), mujoco-py ( `#14776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14776> `_ , `#14965 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14965> `_ ), namedlist ( `#14814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14814> `_ ), OpenCensus-python ( `#14837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14837> `_ ), PyEVTK ( `#14911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14911> `_ ), pyradiomics ( `#14851 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14851> `_ ), PyTorch-Lightning ( `#14933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14933> `_ ), Redis ( `#14783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14783> `_ ), rising ( `#14952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14952> `_ ), SoXt ( `#14803 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14803> `_ ), SURVIVOR ( `#14786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14786> `_ ), tensorboard ( `#14926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14926> `_ ), xtensor ( `#14944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14944> `_ ), xxd ( `#14846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14846> `_ ) * added additional easyconfigs for various supported software packages, including: * aiohttp 3.8.1, AOCC 3.2.0, ArviZ 0.11.4, BeautifulSoup 4.10.0, bokeh 2.4.2, Boost.Python 1.77.0, Bowtie 1.3.1, CheMPS2 1.8.11, Clang 13.0.1, CLHEP 2.4.5.1, ConnectomeWorkbench 1.5.0, Crumble 0.8.3, CUDA 11.5.1 + 11.6.0, cutadapt 3.5, dask 2022.1.0, deepdiff 5.7.0, deepTools 3.5.0, dm-tree 0.1.6, DROP 1.1.1, ecCodes 2.24.2, Emacs 27.2, FDS 6.7.7, file 5.41, Flask 2.0.2, FORD 6.1.6, GATE 9.1, Geant4 11.0.0, GEMMA 0.98.5, GnuTLS 3.7.3, Go 1.17.6, gpustat 1.0.0b1, Graphviz 2.50.0, GROMACS 2021.5, Guile 3.0.7, HDF5 1.10.8, imageio 2.13.5, JupyterLab 3.2.8, lftp 4.9.2, libBigWig 0.4.6, libpsml 1.1.10, libRmath 4.1.2, librsb 1.3.0.0, libtasn1 4.18.0, libunistring 1.0, likwid 5.2.1, MaxQuant 2.0.3.0, MEGA 11.0.10.eb, MethylDackel 0.6.1, methylpy 1.2.9, minimap2 2.24, Mono 6.12.0.122, MUSCLE 5.1, nanomax-analysis-utils 0.4.3, ncbi-vdb 2.11.2, NCIPLOT-4.0 20200624, Nextflow 21.10.6, NGS 2.11.2, nvtop 1.2.2, OpenCV 4.5.5, openslide-python 1.1.2, pftoolsV3 3.2.11, picard 2.26.10, pydicom 2.2.2, pyFAI 0.20.0, Pysam 0.18.0, pytest-xdist 2.5.0, Racon 1.5.0, RAxML 8.2.12, ReFrame 3.10.1, ROOT 6.24.06, scikit-image 0.19.1, SDL2 2.0.20, SeqKit 2.1.0, Siesta 4.1.5, SimpleITK 2.1.1, SqueezeMeta 1.5.0, tMAE 1.0.1, torchvision 0.11.3, Trim_Galore 0.6.7, typing-extensions 3.10.0.2 * minor enhancements, including: * also install Python bindings for SHTns 3.5.1 ( `#14893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14893> `_ ) * add catlearn extension to easyconfig for R v4.1.2 ( `#14940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14940> `_ ) * various bug fixes, including: * update TALYS sources to (hopefully) ensure constant checksums ( `#14797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14797> `_ ) * add missing graphite2 + HarfBuzz dependencies to Qt5 v5.15.2 ( `#14802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14802> `_ ) * add missing UCX-CUDA dep to GROMACS for foss-2021a-CUDA-11.3.1 ( `#14859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14859> `_ ) * specify ``easybuild.io`` as EasyBuild homepage in ``setup.py`` ( `#14870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14870> `_ ) * add alternative checksum for MASS, class, nnet, spatial extensions in R 4.1.0 ( `#14873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14873> `_ ) and R 4.1.2 ( `#14880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14880> `_ ) easyconfigs * add patch to fix Kraken2 ncbi ``ftp`` / ``https`` check in ``rsync_from_ncbi.pl`` for versions 2.0.9-2.1.1 ( `#14889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14889> `_ ) * disable building of tests/benchmarks for snappy 1.1.8 to avoid failing build ( `#14923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14923> `_ ) * disable use of ``-Werror`` for recent NSS versions ( `#14924 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14924> `_ ) * fix download URL in UDUNITS v2.2.28 easyconfigs ( `#14954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14954> `_ ) * remove unnecessary CUDAcore dependency from nvtop v1.2.1 easyconfig ( `#14957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14957> `_ ) * consistently apply patch for mapDamage 2.2.1 to use external seqtk ( `#14961 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14961> `_ ) * fix typo in templated source URL in RcppGSL 0.3.8 easyconfig: ``$(name)s`` should be ``%(name)s`` ( `#14962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14962> `_ ) * other changes: * update Java/17 wrapper to Java 17.0.2 ( `#14868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14868> `_ ) * use ``actions/setup-python@v2`` in CI workflows + trim test configurations for easyconfigs test suite: only test with Python 2.7 + 3.6 and Lmod 7.x + 8.x ( `#14857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14857> `_ , `#14881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14881> `_ ) .. _release_notes_eb452: EasyBuild v4.5.2 (January 24th 2022) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * automatically prepend value for ``env-for-shebang`` configuration setting with sysroot ( `#3919 <https://github.com/easybuilders/easybuild-framework/pull/3919> `_ ) * enhance ``update_build_option`` to return original value + add support for ``update_build_options`` ( `#3923 <https://github.com/easybuilders/easybuild-framework/pull/3923> `_ ) * fix compatibility with Python 3.10 ( `#3926 <https://github.com/easybuilders/easybuild-framework/pull/3926> `_ , `#3933 <https://github.com/easybuilders/easybuild-framework/pull/3933> `_ ) * also take ``/etc/os-release`` into account in ``get_os_name`` and ``get_os_version`` ( `#3930 <https://github.com/easybuilders/easybuild-framework/pull/3930> `_ ) * enhance ``get_cpu_architecture`` and ``get_cpu_family`` to be aware of RISC-V ( `#3931 <https://github.com/easybuilders/easybuild-framework/pull/3931> `_ ) * various bug fixes, including: * relax pattern checks in ``test_toy_exts_parallel`` ( `#3921 <https://github.com/easybuilders/easybuild-framework/pull/3921> `_ ) * use ``sources.easybuild.io`` as backup URL for downloading Environment Modules sources to run test suite ( `#3928 <https://github.com/easybuilders/easybuild-framework/pull/3928> `_ ) * make intelfftw toolchain component aware of GCCcore ( `#3929 <https://github.com/easybuilders/easybuild-framework/pull/3929> `_ ) * other changes: * deprecate use of (actual) patch files that don't have a filename ending with ``.patch`` ( `#3920 <https://github.com/easybuilders/easybuild-framework/pull/3920> `_ ) * remove version restriction for keyring in ``requirements.txt`` to test with latest version ( `#3925 <https://github.com/easybuilders/easybuild-framework/pull/3925> `_ ) * simplify ``requirements.txt`` by removing Python 2.6 support ( `#3927 <https://github.com/easybuilders/easybuild-framework/pull/3927> `_ ) * only run GitHub tests when testing with Lua module syntax, to avoid hitting GitHub rate limit when running tests ( `#3938 <https://github.com/easybuilders/easybuild-framework/pull/3938> `_ ) **easyblocks** * minor enhancements and updates, including: * remove necessity for license for oneAPI versions (>= 2021.x) in itac easyblock ( `#2492 <https://github.com/easybuilders/easybuild-easyblocks/pull/2492> `_ ) * add CUDA support in SuiteSparse easyblock ( `#2627 <https://github.com/easybuilders/easybuild-easyblocks/pull/2627> `_ ) * use all available cores for running Perl test suite ( `#2637 <https://github.com/easybuilders/easybuild-easyblocks/pull/2637> `_ ) * add option to not copy the license file for Gurobi ( `#2639 <https://github.com/easybuilders/easybuild-easyblocks/pull/2639> `_ , `#2641 <https://github.com/easybuilders/easybuild-easyblocks/pull/2641> `_ ) * update AOCC easyblock to support version 3.2.0 ( `#2643 <https://github.com/easybuilders/easybuild-easyblocks/pull/2643> `_ ) * don't grep for specific version in ``--version`` output of Intel compiler commands for versions 2022.x ( `#2644 <https://github.com/easybuilders/easybuild-easyblocks/pull/2644> `_ ) * add support for enabling sanity checks for specific components in the Bundle easyblock ( `#2649 <https://github.com/easybuilders/easybuild-easyblocks/pull/2649> `_ ) * update Libint easyblock for LibInt v2.7.0 which requires configuring via CMake ( `#2650 <https://github.com/easybuilders/easybuild-easyblocks/pull/2650> `_ ) * update Mathematica easyblock for version 13 ( `#2652 <https://github.com/easybuilders/easybuild-easyblocks/pull/2652> `_ ) * add sanity check command for Bazel ( `#2653 <https://github.com/easybuilders/easybuild-easyblocks/pull/2653> `_ ) * update NAMD easyblock to allow non-system csh ( `#2654 <https://github.com/easybuilders/easybuild-easyblocks/pull/2654> `_ ) * enhance CUDA easyblock to create version independent pkgconfig files ( `#2656 <https://github.com/easybuilders/easybuild-easyblocks/pull/2656> `_ ) * add ``util`` subdirectory to ``$PATH`` for WPS ( `#2658 <https://github.com/easybuilders/easybuild-easyblocks/pull/2658> `_ ) * various bug fixes, including: * convert version numbers to strictly numerical in Siesta easyblock ( `#2553 <https://github.com/easybuilders/easybuild-easyblocks/pull/2553> `_ ) * fix shebang of scripts in Perl installation if installation prefix is too long ( `#2640 <https://github.com/easybuilders/easybuild-easyblocks/pull/2640> `_ ) * enhance IntelBase easyblock to avoid crash when ``$USER`` is not set ( `#2642 <https://github.com/easybuilders/easybuild-easyblocks/pull/2642> `_ ) * fix quotes in definition of default platform macro and enhance sanity check in GATE easyblock ( `#2645 <https://github.com/easybuilders/easybuild-easyblocks/pull/2645> `_ ) * avoid excessively long shebang line in compile script for WRF ( `#2648 <https://github.com/easybuilders/easybuild-easyblocks/pull/2648> `_ ) * fix checking of Intel Fortran compiler version in CP2K easyblock for recent toolchains ( `#2651 <https://github.com/easybuilders/easybuild-easyblocks/pull/2651> `_ ) **easyconfigs** * added easyconfig for intel/2022.00 toolchain ( `#14620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14620> `_ ) * added example easyconfig files for 48 new software packages: * alevin-fry ( `#14617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14617> `_ ), AMD-uProf ( `#14626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14626> `_ ), ANGEL ( `#11857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11857> `_ ), atropos ( `#7580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7580> `_ ), Austin ( `#14596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14596> `_ ), AutoDock-GPU ( `#14671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14671> `_ ), AutoDock-Vina ( `#14675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14675> `_ ), boost_histogram ( `#14516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14516> `_ ), CAFE5 ( `#14603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14603> `_ ), Calcam ( `#7488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7488> `_ ), Carma ( `#14527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14527> `_ ), Cogent ( `#14278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14278> `_ ), dlib ( `#14556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14556> `_ ), DualSPHysics ( `#14632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14632> `_ ), dune-core ( `#14693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14693> `_ ), dune-fem ( `#14693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14693> `_ ), DyMat ( `#14615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14615> `_ ), elbencho ( `#14548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14548> `_ ), Embree ( `#7471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7471> `_ ), ExaML ( `#14530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14530> `_ ), FMPy ( `#14481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14481> `_ ), genozip ( `#14583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14583> `_ ), hivtrace ( `#14691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14691> `_ ), intervaltree-python ( `#8995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8995> `_ ), IsoNet ( `#14075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14075> `_ ), MACSE ( `#14709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14709> `_ ), MetaPhlAn ( `#12917 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12917> `_ ), MicrobeAnnotator ( `#14549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14549> `_ ), mold ( `#14595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14595> `_ ), numdiff ( `#14609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14609> `_ ), OpenFace ( `#14556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14556> `_ ), PhyloPhlAn ( `#14564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14564> `_ ), PREQUAL ( `#14722 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14722> `_ ), PuLP ( `#14581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14581> `_ ), PyCalib ( `#14616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14616> `_ ), PyTorch3D ( `#13240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13240> `_ ), QCG-PilotJob ( `#14337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14337> `_ ), RaGOO ( `#8995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8995> `_ ), RAPSearch2 ( `#13199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13199> `_ ), SCopeLoomR ( `#14518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14518> `_ ), ShengBTE ( `#14557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14557> `_ ), SHTns ( `#14682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14682> `_ ), STRUMPACK ( `#14560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14560> `_ ), TALYS ( `#14716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14716> `_ ), TN93 ( `#14691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14691> `_ ), xxHash ( `#14251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14251> `_ ), yaml-cpp ( `#14547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14547> `_ ), Zgoubi ( `#14516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14516> `_ ) * added additional easyconfigs for various supported software packages, including: * annovar 20200607, antiSMASH 5.2.0, Armadillo 10.7.5, Arrow 6.0.1, Bismark 0.23.1, BLAST+ 2.12.0, cDNA_Cupcake 26.0.0, CHERAB 1.3.0, CMake 3.22.1, CP2K 8.2, DIAMOND 2.0.13, dotNET-Core-Runtime 6.0.1, dotNET-SDK 6.0.101, Extrae 3.8.3, fastp 0.23.2, FreeSurfer 7.2.0, GffCompare 0.12.6, gmsh 4.9.0, GTK3 3.24.31, h5py 3.6.0, igraph 0.9.5, Inspector 2022.0.0, IQ-TREE 2.1.3, itac 2021.5.0.eb, Java/15 + Java/17, JUBE 2.4.2, libdeflate 1.8, libxsmm 1.17, LSD2 2.3, MAGMA 1.09b, MATLAB 2021b, MinPath 1.6, MultiQC 1.11, MUSCLE 5.0.1428, numba 0.54.1, NVHPC 21.11, OBITools 1.2.13, occt 7.5.0p1, openCARP 8.2, OpenCV 3.4.1, OpenFOAM v2112, ORCA 5.0.2, phonopy 2.12.0, Pillow 8.3.2, Pillow-SIMD 8.3.2, PLUMED 2.7.3, poppler 22.01.0, PyQtGraph 0.12.3, python-igraph 0.9.8, PyZMQ 22.3.0, Raysect 0.7.1, Rgurobi 9.5.0, scanpy 1.8.2, Schrodinger 2021, SqueezeMeta 1.0.0, statsmodels 0.13.1, texlive 20210324, VTune 2022.0.0 * minor enhancements, including: * add yaml-cpp dependency to Trilinos 12.12.1 with foss/2019b ( `#14547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14547> `_ ) * include output of failing code style check in message produced by failing easyconfigs style test ( `#14578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14578> `_ ) * bundle LAPACKE with FlexiBLAS 3.0.4 ( `#14591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14591> `_ ), `#14769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14769> `_ ) * add extensions to R v4.1.2 easyconfig: semTools, mirt, OpenMX ( `#14634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14634> `_ ), FactorCopula ( `#14648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14648> `_ ), rpact, ldbounds ( `#14750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14750> `_ ) * add extensions to R-bundle-Bioconductor 3.14: ExomeDepth ( `#14684 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14684> `_ ), DSS ( `#14748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14748> `_ ), pathview ( `#14806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14806> `_ ) * various bug fixes, including: * fix ``homepage`` and ``source_urls`` for GLIMMER 3.02b ( `#7945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7945> `_ ) * fix source URL for Trilinos 12.12.1 with foss/2019b ( `#14547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14547> `_ ) * use proper Perl dependency for worker 1.6.12 with foss/2019a (fixes installation on RHEL8 OS) ( `#14565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14565> `_ ) * fix checksum and versions of annovar v20191024 ( `#14579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14579> `_ ) * add patch for Rust 1.52.2 and 1.54.0 to fix build when using alternate sysroot ( `#14584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14584> `_ ) * retain version in filename for cromwell sources ( `#14586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14586> `_ ) * specify compiler to use in WildMagic easyconfig ( `#14594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14594> `_ ) * avoid need for git build dependency for recent x265 easyconfigs ( `#14605 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14605> `_ ) * fix broken patch file for recent GPAW versions ( `#14619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14619> `_ ) * add alternative checksum for Siesta-4.1-MaX-1.0 ( `#14643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14643> `_ ) * add missing PCRE dependency for pullseq + add sanity check commands ( `#14650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14650> `_ ) * use ``%(arch)s`` template to avoid hardcoding ``x86_64`` in recent XML-LibXML easyconfigs ( `#14655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14655> `_ ) * fix name for (binary) AutoDock-Vina v1.1.2 ( `#14675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14675> `_ ) * add patch to fix memory leak in OpenMPI that heavily affects CP2K, SIESTA, QuantumESPRESSO, VASP, ... ( `#14726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14726> `_ ) * set ``$GRPC_PYTHON_BUILD_EXT_COMPILER_JOBS`` for installing grcpio extension included with: * TensorFlow 2.2.3-2.4.1 with 2020* toolchain ( `#14729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14729> `_ ) and 2.5.0+ ( `#14728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14728> `_ ) * Ray-project ( `#14730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14730> `_ ) * enforce using internal boost for bcl2fastq2 with a GCC 10.x toolchain ( `#14741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14741> `_ ) * add patch for hard-coded checksum value of downloaded source file in the source code of RDKit 2021.03.4 ( `#14743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14743> `_ ) * also install ``libaio.so.1`` symlink in easyconfigs for libaio v0.3.112 ( `#14745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14745> `_ ) * do not use external libgcrypt or python for libxslt with recent toolchains ( `#14756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14756> `_ ) * add patches to fix CVE-2021-23437 for Pillow ( `#14765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14765> `_ ) and Pillow-SIMD ( `#14792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14792> `_ ) * add libXfont2 patch to fix build when libbsd is present ( `#14821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14821> `_ ) * other changes: * update Java 1.8 wrapper to 1.8.0_311 for x86_64 ( `#14644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14644> `_ ) * bring gffread back down to GCCcore level for toolchain version 10.3.0 ( `#14660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14660> `_ ) * update build dependencies for recent binutils + GCCcore easyconfigs to avoid depending on M4 1.4.18 with system toolchain ( `#14731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14731> `_ ), `#14755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14755> `_ ) * bump nbconvert extension in recent IPython easyconfigs to version 6.4.0 ( `#14738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14738> `_ ) .. _release_notes_eb451: EasyBuild v4.5.1 (December 13th 2021) ------------------------------------- bugfix/update release **framework** * various enhancements, including: * also dump environment to reprod directory ( `#3374 <https://github.com/easybuilders/easybuild-framework/pull/3374> `_ ) * determine which extensions can be skipped in parallel (if ``--parallel-extensions-install`` is enabled) ( `#3890 <https://github.com/easybuilders/easybuild-framework/pull/3890> `_ ) * fall back to sequential installation for extensions with unknown dependencies when using ``--parallel-extensions-install`` ( `#3906 <https://github.com/easybuilders/easybuild-framework/pull/3906> `_ ) * allow oversubscription in sanity check for OpenMPI-based toolchains ( `#3909 <https://github.com/easybuilders/easybuild-framework/pull/3909> `_ ) * various bug fixes, including: * don't try to ensure absolute path for path part of ``repositorypath`` ( `#3893 <https://github.com/easybuilders/easybuild-framework/pull/3893> `_ , `#3899 <https://github.com/easybuilders/easybuild-framework/pull/3899> `_ ) * fix typo in EULA agreement error message ( `#3894 <https://github.com/easybuilders/easybuild-framework/pull/3894> `_ ) * only remove lock if it was created in the same EasyBuild session (not if it existed already) ( `#3889 <https://github.com/easybuilders/easybuild-framework/pull/3889> `_ ) * introduce ``EasyBlock.post_init`` method to correctly define ``builddir`` variable when ``build-in-installdir`` mode is enabled in easyconfig or easyblock ( `#3900 <https://github.com/easybuilders/easybuild-framework/pull/3900> `_ ) * also show download progress bar when using ``--inject-checksums`` ( `#3905 <https://github.com/easybuilders/easybuild-framework/pull/3905> `_ ) * pick up custom ``extract_cmd`` specified for extension ( `#3907 <https://github.com/easybuilders/easybuild-framework/pull/3907> `_ ) * make ``test_run_cmd_async`` more robust against fluke failures ( `#3908 <https://github.com/easybuilders/easybuild-framework/pull/3908> `_ ) **easyblocks** * new software-specific easyblock for Clang-AOMP ( `#2617 <https://github.com/easybuilders/easybuild-easyblocks/pull/2617> `_ ) * minor enhancements and updates, including: * enhance Rpm generic easyblock to support installing tarball of RPMs (by unpacking it first) + take into account ``(pre)installopts`` ( `#2580 <https://github.com/easybuilders/easybuild-easyblocks/pull/2580> `_ ) * add option to control use of MKL-DNN in jaxlib easyblock ( `#2619 <https://github.com/easybuilders/easybuild-easyblocks/pull/2619> `_ ) * update SAMtools easyblock to support installation of SAMtools 1.14 ( `#2620 <https://github.com/easybuilders/easybuild-easyblocks/pull/2620> `_ ) * add option to ignore PLUMED version check for GROMACS ( `#2621 <https://github.com/easybuilders/easybuild-easyblocks/pull/2621> `_ ) * update Inspector easyblock for recent versions (>= 2021, oneAPI versions) ( `#2624 <https://github.com/easybuilders/easybuild-easyblocks/pull/2624> `_ ) * enhance tbb easyblock by adding option to build Python bindings ( `#2626 <https://github.com/easybuilders/easybuild-easyblocks/pull/2626> `_ ) * fix patching of ``CMakeLists.txt`` for Eigen v3.4 ( `#2633 <https://github.com/easybuilders/easybuild-easyblocks/pull/2633> `_ ) * various bug fixes, including: * update CP2K easyblock to use ``-D__MKL`` for CP2K versions newer than 2.3 ( `#2586 <https://github.com/easybuilders/easybuild-easyblocks/pull/2586> `_ ) * set OpenMPI configuration for ORCA sanity check ( `#2596 <https://github.com/easybuilders/easybuild-easyblocks/pull/2596> `_ ) * allow oversubscription in OpenMPI sanity check ( `#2611 <https://github.com/easybuilders/easybuild-easyblocks/pull/2611> `_ ) * set ``wm_*`` class variables in OpenFOAM easyblock constructor (to fix ``--sanity-check-only`` ) ( `#2616 <https://github.com/easybuilders/easybuild-easyblocks/pull/2616> `_ ) * remove newline from easybuild-easyblocks package description (required to avoid installation error with setuptools>=59.0.0) ( `#2623 <https://github.com/easybuilders/easybuild-easyblocks/pull/2623> `_ ) * avoid patching binary files + other enhancements for MUMmer easyblock ( `#2630 <https://github.com/easybuilders/easybuild-easyblocks/pull/2630> `_ ) * enable ``build-in-installdir`` mode in constructor of PETSc and SLEPc easyblocks ( `#2631 <https://github.com/easybuilders/easybuild-easyblocks/pull/2631> `_ ) * skip netcdf4-python tests that require network connectivity ( `#2634 <https://github.com/easybuilders/easybuild-easyblocks/pull/2634> `_ ) **easyconfigs** * added example easyconfig files for 71 new software packages: * ANIcalculator ( `#14478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14478> `_ , `#14494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14494> `_ , `#14510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14510> `_ ), arrow-R ( `#14267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14267> `_ ), ASAP ( `#14367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14367> `_ ), BabelStream ( `#14503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14503> `_ ), bamtofastq ( `#14391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14391> `_ ), bcbio-gff ( `#14322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14322> `_ ), biom-format ( `#13205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13205> `_ ), Blosc2 ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), boto3 ( `#14452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14452> `_ ), Brotli-python ( `#14528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14528> `_ ), Brunsli ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), Clang-AOMP ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), CLEASE ( `#14413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14413> `_ ), CMSeq ( `#14326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14326> `_ ), cpu_features ( `#14385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14385> `_ ), cromwell ( `#12125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12125> `_ ), cxxopts ( `#14487 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14487> `_ , `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ), dRep ( `#14479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14479> `_ ), DUBStepR ( `#14495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14495> `_ ), eht-imaging ( `#14239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14239> `_ ), einops ( `#14373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14373> `_ ), ELFIO ( `#14488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14488> `_ , `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ), elprep ( `#14422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14422> `_ ), epiScanpy ( `#14447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14447> `_ ), FMM3D ( `#14257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14257> `_ ), FORD ( `#13653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13653> `_ ), GPy ( `#14380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14380> `_ ), HIP ( `#14339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14339> `_ ), idemux ( `#14499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14499> `_ ), imagecodecs ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), InChI ( `#13902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13902> `_ ), jupyter-matlab-proxy ( `#14270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14270> `_ ), jxrlib ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), LBFGS++ ( `#14230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14230> `_ ), LERC ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), libaec ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), libavif ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), LibLZF ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), libnsl ( `#14494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14494> `_ ), libtree ( `#14501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14501> `_ ), LPeg ( `#14157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14157> `_ ), Megalodon ( `#14256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14256> `_ ), nnU-Net ( `#14249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14249> `_ ), PAL2NAL ( `#14430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14430> `_ ), photontorch ( `#14410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14410> `_ ), pkgconf ( `#14426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14426> `_ ), pmx ( `#14319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14319> `_ ), PPanGGOLiN ( `#14449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14449> `_ ), ProFit ( `#14340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14340> `_ ), pugixml ( `#14367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14367> `_ , `#14492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14492> `_ ), PySide2 ( `#13460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13460> `_ ), Relate ( `#14443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14443> `_ ), ROCm ( `#14355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14355> `_ ), rocm-cmake ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), ROCm-CompilerSupport ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), rocminfo ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), rocm-smi ( `#14354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14354> `_ ), ROCR-Runtime ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), ROCT-Thunk-Interface ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), SCENIC ( `#14260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14260> `_ ), Shasta ( `#14385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14385> `_ ), SimNIBS ( `#14257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14257> `_ ), SMV ( `#14157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14157> `_ ), SRST2 ( `#14253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14253> `_ ), STACEY ( `#14293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14293> `_ ), termcolor ( `#14489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14489> `_ , `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ), ThemisPy ( `#14231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14231> `_ ), TOBIAS ( `#14452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14452> `_ , `#14458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14458> `_ ), zfp ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), zlib-ng ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), Zopfli ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 9.6.2, ABRicate 1.0.0, AlphaFold 2.1.1, antiSMASH 6.0.1, Arrow 6.0.0, astropy 4.3.1, BCFtools 1.14, BeautifulSoup 4.9.3, Boost 1.77.0, bpp 4.4.0, Bracken 2.6.2, CapnProto 0.9.1, CellRanger 6.1.2, Eigen 3.4.0, enaBrowserTool 1.6, ESMF 8.2.0, Flye 2.9, FMRIprep 1.4.1, FSL 6.0.4, GATK 4.2.3.0, gc 8.2.0, GDB 11.1, git 2.33.1, Go 1.17.3, Gurobi 9.5.0, Horovod 0.23.0, HTSlib 1.14, HyPhy 2.5.33, Infernal 1.1.4, Inspector 2021.4.0 ITK 5.2.1, jax 0.2.24, Julia 1.7.0, Kent_tools 422, king 2.2.7, libdwarf 20210528, MAFFT 7.490, makeinfo 6.8, Mash 2.3, matplotlib 3.4.3, MCR R2021b, minimap2 2.22, MUST 1.7.2, NCO 5.0.3, NCO 5.0.3, nlohmann_json 3.10.4, NVHPC 21.9, OpenMPI 4.0.7 + 4.1.2, panaroo 1.2.9, pangolin 3.1.16, pkgconfig 1.5.5, plotly.py 5.4.0, pyfaidx 0.6.3.1, Pysam 0.17.0, PyTorch 1.10.0, R 4.1.2, R-bundle-Bioconductor 3.14, ReFrame 3.9.1, rpy2 3.4.5, scikit-image 0.18.3, scikit-learn 1.0.1 SimpleITK 2.1.0, snakemake 6.10.0, SPAdes 3.15.3, tbb 2021.4.0, torchtext 0.10.0, torchvision 0.11.1, tqdm 4.62.3, TRUST4 1.0.6, Trycycler 0.5.2, Unicycler 0.4.9, UShER 0.5.0, WPS 4.3.1, xarray 0.20.1, XlsxWriter 3.0.2, Yambo 5.0.4 * minor enhancements, including: * add RcisTarget + NMF extensions to R-bundle-Bioconductor 3.13 ( `#14259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14259> `_ ) * add extensions for R v4.1.x: * geex + momentfit ( `#14299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14299> `_ ); StatMatch, leaflet, tmap + collapse ( `#14328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14328> `_ ), genoPlotR + penfa ( `#14433 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14433> `_ ), adcovsim ( `#14484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14484> `_ ) * add M3Drop extension to R-bundle-Bioconductor 3.14 ( `#14436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14436> `_ ) * various bug fixes, including: * specify to use Python provided as dependency, remove ``separate_build_dir`` , and fix URL in comment for Arrow 0.17.1 ( `#14263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14263> `_ ) * fix ``gettid`` nameclash with glibc 2.30 in Bazel 0.25.2, 0.26.1, 0.29.1, and 1.1.0 ( `#14269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14269> `_ ) * restore and fix sanity check commands in RStudio-Server 1.4 ( `#14275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14275> `_ ) * add pkg-config build dependency to Python easyconfigs, to ensure OpenSSL wrapper is detected ( `#14316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14316> `_ ) * add patch for UCX v1.11.2 to fix missing include statement for ``string.h`` ( `#14317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14317> `_ ) * set ``$DALTON_TMPDIR`` to build directory to run Dalton tests ( `#14341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14341> `_ ) * add patch for libfabric v1.12.1 to fix ``unknown link width 0x10`` warning ( `#14387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14387> `_ ) * add missing Automake dependency to PhyML 3.3.20200621 ( `#14397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14397> `_ ) * add git as build dependency to Python 3.8.x and 3.9.x easyconfigs (required for pbr extension) ( `#14421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14421> `_ ) * add missing XZ dependency to recent PROJ easyconfigs ( `#14429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14429> `_ ) * fix homepage/source URL for king v2.2.4 ( `#14444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14444> `_ ) * add patch for GCCcore 9.1-9.3 to fix compatibility with recent kernel headers ( `#14453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14453> `_ ) * add patch for GCCcore 10.1-11.1 to fix compatibility with recent kernel headers ( `#14454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14454> `_ ) * add patch to fix CVE-2021-43527 in NSS ( `#14497 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14497> `_ ) * pass tests on A* GPUs by setting ``NVIDIA_TF32_OVERRIDE=0`` in jax 0.2.19 ( `#14502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14502> `_ ) * add patch to fix broken (hanging) Mash binaries ( `#14511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14511> `_ ) * add missing Perl build dependency for Longshot ( `#14535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14535> `_ ) * add googletest build dependency for Highway ( `#14536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14536> `_ ) * seed in PCRE2 sources to fix broken MariaDB 10.5.8 + 10.6.4 easyconfigs ( `#14537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14537> `_ ) * other changes: * rename R bindings for Arrow to arrow-R, so it can be used in a lowercase module naming scheme ( `#14262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14262> `_ ) * comment out imkl build dependency for FlexiBLAS 3.0.4 with GCC/11.2.0 ( `#14335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14335> `_ ) * don't add ``bin`` subdir to ``$PATH`` via ``modextrapaths`` in ReFrame easyconfigs ( `#14415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14415> `_ ) * consistently use 'Grace' software name + sync ``homepage`` / ``source_urls`` ( `#14493 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14493> `_ ) * move cxxopts, termcolor and ELFIO header only libraries to ``SYSTEM`` toolchain ( `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ) .. _release_notes_eb450: EasyBuild v4.5.0 (October 29th 2021) ------------------------------------ feature release **framework** * various enhancements, including: * add ``--review-pr-max`` and ``--review-pr-filter`` options to limit easyconfigs used by ``--review-pr`` + retain order of easyconfigs being compared with ( `#3754 <https://github.com/easybuilders/easybuild-framework/pull/3754> `_ ) * use Rich (if available) to show progress bars when installing easyconfigs ( `#3823 <https://github.com/easybuilders/easybuild-framework/pull/3823> `_ , `#3826 <https://github.com/easybuilders/easybuild-framework/pull/3826> `_ , `#3833 <https://github.com/easybuilders/easybuild-framework/pull/3833> `_ , `#3835 <https://github.com/easybuilders/easybuild-framework/pull/3835> `_ , `#3844 <https://github.com/easybuilders/easybuild-framework/pull/3844> `_ , `#3864 <https://github.com/easybuilders/easybuild-framework/pull/3864> `_ , `#3867 <https://github.com/easybuilders/easybuild-framework/pull/3867> `_ , `#3882 <https://github.com/easybuilders/easybuild-framework/pull/3882> `_ ) * see also https://docs.easybuild.io/en/latest/Progress_bars.html * add support for checking required/optional EasyBuild dependencies via ``eb --check-eb-deps`` ( `#3829 <https://github.com/easybuilders/easybuild-framework/pull/3829> `_ ) * add support for collecting GPU info (via ``nvidia-smi`` ), and include it in ``--show-system-info`` and test report ( `#3851 <https://github.com/easybuilders/easybuild-framework/pull/3851> `_ ) * added support for ``--insecure-download`` configuration option ( `#3859 <https://github.com/easybuilders/easybuild-framework/pull/3859> `_ ) * make intelfftw toolchain component aware of imkl-FFTW module ( `#3861 <https://github.com/easybuilders/easybuild-framework/pull/3861> `_ ) * make sure the contrib/hooks tree is included in the source tarball for easybuild-framework ( `#3862 <https://github.com/easybuilders/easybuild-framework/pull/3862> `_ ) * add ``check_async_cmd`` function to facilitate checking on asynchronously running commands ( `#3865 <https://github.com/easybuilders/easybuild-framework/pull/3865> `_ , `#3881 <https://github.com/easybuilders/easybuild-framework/pull/3881> `_ ) * add initial/experimental support for installing extensions in parallel ( `#3667 <https://github.com/easybuilders/easybuild-framework/pull/3667> `_ , `#3878 <https://github.com/easybuilders/easybuild-framework/pull/3878> `_ ) * see also https://docs.easybuild.io/en/latest/Installing_extensions_in_parallel.html * filter out duplicate paths added to module files, and print warning when they occur ( `#3770 <https://github.com/easybuilders/easybuild-framework/pull/3770> `_ , `#3874 <https://github.com/easybuilders/easybuild-framework/pull/3874> `_ ) * various bug fixes, including: * ensure that path configuration options have absolute path values ( `#3832 <https://github.com/easybuilders/easybuild-framework/pull/3832> `_ ) * fix broken test by taking into account changed error raised by Python 3.9.7 when copying directory via ``shutil.copyfile`` ( `#3840 <https://github.com/easybuilders/easybuild-framework/pull/3840> `_ ) * ensure newer location of CUDA stubs is taken into account by RPATH filter ( `#3850 <https://github.com/easybuilders/easybuild-framework/pull/3850> `_ ) * replace ``which`` by ``command -v`` in ``eb`` wrapper script to avoid dependency on ``which`` command ( `#3852 <https://github.com/easybuilders/easybuild-framework/pull/3852> `_ ) * refactor EasyBlock to decouple collecting of information on extension source/patch files from downloading them ( `#3860 <https://github.com/easybuilders/easybuild-framework/pull/3860> `_ ) * in this context, the ``EasyBlock.fetch_extension_sources`` method was deprecated, and replaced by ``EasyBlock.collect_exts_file_info`` * fix library paths to add to ``$LDFLAGS`` for intel-compilers toolchain component ( `#3866 <https://github.com/easybuilders/easybuild-framework/pull/3866> `_ ) * remove ``--depth 1`` from git clone when ``commit`` specified ( `#3871 <https://github.com/easybuilders/easybuild-framework/pull/3871> `_ , `#3872 <https://github.com/easybuilders/easybuild-framework/pull/3872> `_ ) * make sure correct include directory is used for FlexiBLAS toolchain component ( `#3875 <https://github.com/easybuilders/easybuild-framework/pull/3875> `_ ) * explicitly disable rebase when pulling develop branch to create a merge commit, since not specifying how to reconcile divergent branches is an error with Git 2.33.1 and newer ( `#3879 <https://github.com/easybuilders/easybuild-framework/pull/3879> `_ ) * tweak ``test_http_header_fields_urlpat`` to download from ``sources.easybuild.io`` rather than ``https://ftp.gnu.org`` ( `#3883 <https://github.com/easybuilders/easybuild-framework/pull/3883> `_ ) * other changes: * change ``copy_file`` function to raise an error when trying to copy non-existing file ( `#3836 <https://github.com/easybuilders/easybuild-framework/pull/3836> `_ , `#3855 <https://github.com/easybuilders/easybuild-framework/pull/3855> `_ , `#3877 <https://github.com/easybuilders/easybuild-framework/pull/3877> `_ ) * only print the hook messages if EasyBuild is running in debug mode ( `#3843 <https://github.com/easybuilders/easybuild-framework/pull/3843> `_ ) * deprecate old toolchain versions (pre-2019a common toolchains) ( `#3876 <https://github.com/easybuilders/easybuild-framework/pull/3876> `_ , `#3884 <https://github.com/easybuilders/easybuild-framework/pull/3884> `_ ) * see also https://docs.easybuild.io/en/latest/Deprecated-easyconfigs.html#deprecated-toolchains **easyblocks** * new software-specific easyblock for imkl-FFTW ( `#2599 <https://github.com/easybuilders/easybuild-easyblocks/pull/2599> `_ ) * minor enhancements and updates, including: * add support for installing R extensions in parallel ( `#2408 <https://github.com/easybuilders/easybuild-easyblocks/pull/2408> `_ ) * update MotionCor2 easyblock to consider to locations for built binary ( `#2541 <https://github.com/easybuilders/easybuild-easyblocks/pull/2541> `_ , `#2598 <https://github.com/easybuilders/easybuild-easyblocks/pull/2598> `_ ) * let GROMACS runtime logs show EasyBuild was used by setting ``-DGMX_VERSION_STRING_OF_FORK`` configuration option ( `#2571 <https://github.com/easybuilders/easybuild-easyblocks/pull/2571> `_ ) * adjust qa list in WIEN2k easyblock to handle new questions + fix sanity check for v21.1 ( `#2572 <https://github.com/easybuilders/easybuild-easyblocks/pull/2572> `_ ) * enhance GCC easyblock to add support for AMD GPU offloading ( `#2578 <https://github.com/easybuilders/easybuild-easyblocks/pull/2578> `_ ) * add support for specifying subdirectory for target installation directory in CMakeMake ( `#2579 <https://github.com/easybuilders/easybuild-easyblocks/pull/2579> `_ ) * enhance COMSOL easyblock to change permission on build directory during extract step (to allow using patches) ( `#2584 <https://github.com/easybuilders/easybuild-easyblocks/pull/2584> `_ ) * enhance FlexiBLAS easyblock to support building with Intel MKL (imkl) as backend ( `#2588 <https://github.com/easybuilders/easybuild-easyblocks/pull/2588> `_ ) * update MATLAB easyblock for 2021b (jre is no longer included) ( `#2589 <https://github.com/easybuilders/easybuild-easyblocks/pull/2589> `_ ) * update OpenCV easyblock to detect GTK3 and GTK2 dependencies (next to GTK+) ( `#2591 <https://github.com/easybuilders/easybuild-easyblocks/pull/2591> `_ ) * avoid that path to CUDA install directory is added to ``$PATH`` ( `#2593 <https://github.com/easybuilders/easybuild-easyblocks/pull/2593> `_ ) * enhance imkl easyblock to add support for installing with NVHPC ( `#2595 <https://github.com/easybuilders/easybuild-easyblocks/pull/2595> `_ ) * enhance PETSc easyblock to run tests in parallel ( `#2601 <https://github.com/easybuilders/easybuild-easyblocks/pull/2601> `_ ) * update ELSI easyblock to support two new external dependencies ( `#2602 <https://github.com/easybuilders/easybuild-easyblocks/pull/2602> `_ ) * add custom custom easyconfig parameter ``backends`` in FlexiBLAS easyblock to specify backends ( `#2605 <https://github.com/easybuilders/easybuild-easyblocks/pull/2605> `_ ) * detect problem with compiling CPU detection code in configure output in GROMACS easyblock ( `#2609 <https://github.com/easybuilders/easybuild-easyblocks/pull/2609> `_ ) * use correct include directory for FlexiBLAS ( `#2610 <https://github.com/easybuilders/easybuild-easyblocks/pull/2610> `_ ) * various bug fixes, including: * unset ``$EASYBUILD_*`` environment variables when running sanity check in EasyBuildMeta easyblock + also unset ``$MODULES_LMCONFLICT`` to avoid conflict when loading EasyBuild module ( `#2568 <https://github.com/easybuilders/easybuild-easyblocks/pull/2568> `_ ) * ensure that all ABAQUS components get installed for ABAQUS 2021.x (+ add support for enabling/disabling fe-safe) ( `#2569 <https://github.com/easybuilders/easybuild-easyblocks/pull/2569> `_ ) * fix subdir path in VTune easyblock for 2021.x versions + add sanity check command ( `#2576 <https://github.com/easybuilders/easybuild-easyblocks/pull/2576> `_ ) * make sure custom easyblock for installing EasyBuild respects requested version of Python (like ``$EB_PYTHON`` ) ( `#2581 <https://github.com/easybuilders/easybuild-easyblocks/pull/2581> `_ ) * restore RPATH wrappers for OpenMPI sanity check ( `#2582 <https://github.com/easybuilders/easybuild-easyblocks/pull/2582> `_ ) * fix installation of libcp2k for recent CP2K versions ( `#2585 <https://github.com/easybuilders/easybuild-easyblocks/pull/2585> `_ ) * make version regex in OpenSSL wrapper easyblock less strict (version string does not always end with a letter) ( `#2597 <https://github.com/easybuilders/easybuild-easyblocks/pull/2597> `_ ) * redefine ``collect_exts_file_info`` instead of now deprecated fetch_extension_sources in OCaml easyblock ( `#2603 <https://github.com/easybuilders/easybuild-easyblocks/pull/2603> `_ ) * other changes: * don't use ``--config=mkl`` for TensorFlow 2.4+ ( `#2583 <https://github.com/easybuilders/easybuild-easyblocks/pull/2583> `_ ) * this fixes some performance related issues for TensorFlow, see https://github.com/easybuilders/easybuild-easyblocks/issues/2577 and https://github.com/easybuilders/easybuild-easyconfigs/issues/14120 * fix support for recent imkl version in numexpr easyblock ( `#2606 <https://github.com/easybuilders/easybuild-easyblocks/pull/2606> `_ ) * derive custom easyblock from MotionCor2 from PackedBinary instead of EasyBlock ( `#2607 <https://github.com/easybuilders/easybuild-easyblocks/pull/2607> `_ ) **easyconfigs** * added easyconfigs for foss/2021b ( `#14217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14217> `_ ) and intel/2021b ( `#14218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14218> `_ ) common toolchains * see also https://docs.easybuild.io/en/latest/Common-toolchains.html * add easyconfig for gobff/2021a toolchain ( `#14019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14019> `_ , `#14038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14038> `_ ) * added example easyconfig files for 39 new software packages: * abTEM ( `#13974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13974> `_ ), ARTS ( `#9651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9651> `_ ), AutoGeneS ( `#13903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13903> `_ ), bashplotlib ( `#13942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13942> `_ ), CIRI-long ( `#13985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13985> `_ ), DFT-D4 ( `#12803 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12803> `_ ), ELSI-RCI ( `#14147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14147> `_ ), ESL-Bundle ( `#14179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14179> `_ ), expecttest ( `#14106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14106> `_ ), fdict ( `#14161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14161> `_ ), flook ( `#14161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14161> `_ ), FreeTDS ( `#13952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13952> `_ ), HDBSCAN ( `#14062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14062> `_ ), imkl-FFTW ( `#14195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14195> `_ ), isoCirc ( `#13982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13982> `_ ), libfdf ( `#14173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14173> `_ ), libmbd ( `#14129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14129> `_ ), libpspio ( `#14173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14173> `_ ), libSBML ( `#14050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14050> `_ ), longread_umi ( `#13987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13987> `_ ), Mesa-demos ( `#14123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14123> `_ ), MixMHC2pred ( `#14041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14041> `_ ), NTPoly ( `#14183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14183> `_ ), OpenSceneGraph ( `#14197 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14197> `_ ), panaroo ( `#14203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14203> `_ ), PEPT ( `#14077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14077> `_ ), pycoQC ( `#14012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14012> `_ ), python-docx ( `#13930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13930> `_ ), QD ( `#14122 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14122> `_ ), radeontop ( `#14124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14124> `_ ), Rgurobi ( `#14188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14188> `_ ), RInChI ( `#14049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14049> `_ ), scGeneFit ( `#13963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13963> `_ ), swifter ( `#14114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14114> `_ ), TOML-Fortran ( `#13929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13929> `_ ), TRUST4 ( `#14035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14035> `_ ), ucx-py ( `#14051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14051> `_ ), vawk ( `#14040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14040> `_ ), VMTK ( `#14023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14023> `_ ) * added additional easyconfigs for various supported software packages, including: * AlphaFold 2.0.1, artic-ncov2019 2021.06.24, BerkeleyGW 3.0.1, bokeh 2.4.1, Boost.Python 1.76.0, canu 2.2, Cartopy 0.20.0, CP2K 8.2, CUDA 11.4.2, Dalton 2020.0, dask 2021.9.1, edlib 1.3.9, ELSI 2.7.1, FFTW 3.3.10, GD 2.73, GDAL 3.3.2, GTDB-Tk 1.7.0, ImageJ 1.52q, jax 0.2.20, Kraken2 2.1.2, leidenalg 0.8.7, libfabric 1.13.2, libspatialindex 1.9.3, libxc 5.1.6, libxsmm 1.16.2, lifelines 0.26.3, Longshot 0.4.3, LSD2 2.2, MAFFT 7.487, MEME 5.4.1, MotionCor2 1.4.4, NCCL 2.11.4, netCDF 4.8.1, networkx 2.6.3, Nextflow 21.08.0, OpenBLAS 0.3.18, OpenCV 4.5.3, OrthoFinder 2.5.4, OSU-Micro-Benchmarks 5.8, PhyML 3.3.20200621, PostgreSQL 13.4, pygraphviz 1.7, pyproj 3.1.0, python-Levenshtein 0.12.1, PyTorch-Geometric 2.0.1, QIIME2 2021.8.eb, Qiskit 0.31.0, QuantumESPRESSO 6.8, Racon 1.4.21, rampart 1.2.0, rclone 1.56.0, RDKit 2021.03.4, SAMtools 1.13, scanpy 1.8.1, scikit-allel 1.3.3, SciPy-bundle 2021.10, Seaborn 0.11.2, SHAPEIT4 4.2.2, spglib 1.16.2, UCX 1.11.2, UCX-CUDA 1.11.2, VSEARCH 2.18.0, Z3 4.8.12, zarr 2.10.1 * minor enhancements, including: * add JASPAR2020 to R-bundle-Bioconductor 3.13 ( `#13962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13962> `_ ) * add Autotools as build dependency for CubeGUI-4.6 ( `#14109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14109> `_ ) * add compiler/parallel/tcltk R libraries included in base installation to extensions in recent R easyconfigs ( `#14189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14189> `_ , `#14190 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14190> `_ , `#14194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14194> `_ ) * required for parallel installation of extensions for these R easyconfigs * also add location to MPI startup tests to ``$PATH`` in OSU-Micro-Benchmarks easyconfigs ( `#14126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14126> `_ ) * various bug fixes, including: * add missing Brotli dependency to freetype ( `#13915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13915> `_ , `#14002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14002> `_ ) * add patch for OpenBLAS 0.3.15 to fix failing numpy tests on aarch64 ( `#13923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13923> `_ ) * fix source URL + add alternate checksum for ADMIXTURE 1.3.0 ( `#13933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13933> `_ ) * just use ``cp`` to copy ``stereo_chemical_props.txt`` to AlphaFold installation directory ( `#13938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13938> `_ ) * add UnZip build dependency to TensorFlow 2.4.1 ( `#13958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13958> `_ ), 2.5.0 ( `#13959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13959> `_ ) and 2.6.0 easyconfigs ( `#13960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13960> `_ ) * add missing Python dependency for WIEN2k 21.1 + patch to fix build failure for ``lapw0_mpi`` with libxc ( `#13961 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13961> `_ ) * add additional valid checksum for lhs 1.1.1 extension in recent R 4.0.x and 4.1.0 easyconfigs ( `#13969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13969> `_ ) * fix Fortran system call stdout/err redirection for WIEN2k v21.1 ( `#13972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13972> `_ ) * add OpenSSL dependency to Kent_tools 418 easyconfig to fix a link error ( `#13989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13989> `_ ) * make binutils a build-only dependency for Brotli + add sanity check command ( `#14004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14004> `_ ) * fix installation of Racon v1.4.7 with gcccuda/2019b after move of ClaraGenomicsAnalysis repository ( `#14010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14010> `_ ) * fix source URL for KEGG.db extension in R-bundle-Bioconductor 3.13 easyconfig (since it's a deprecated library now) ( `#14013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14013> `_ ) * add patch for BLIS 0.8.1 to fix dgemm FPE signalling on Broadwell ( `#14018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14018> `_ ) * add patch to fix installation of TensorFlow 2.2.3 on POWER ( `#14025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14025> `_ ) * fix AmberTools v20 easyconfig using intel/2020a toolchain ( `#14028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14028> `_ ) * fix download + permissions of binary for USEARCH v11.0.667 ( `#14036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14036> `_ ) * remove h5py 3.x dependency for Keras with 2020b toolchain, since TensorFlow provides (and requires) h5py 2.x ( `#14052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14052> `_ ) * correctly specify install prefix for CUDA in OSU-Micro-Benchmarks after renaming CUDAcore to CUDA for 2021a ( `#14063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14063> `_ ) * add patch to fix failing file system cache test for jax on recent Linux kernels ( `#14067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14067> `_ ), `#14070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14070> `_ ) * fix compilation of BWA 0.7.17 with GCC/10.2.0 on POWER ( `#14073 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14073> `_ ) * add missing dependencies for recent LibTIFF versions: XZ, jbigkit, zstd ( `#14079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14079> `_ ) * add missing header file to existing versions of jbigkit ( `#14081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14081> `_ ) * fix source URL for SUNDIALS 5.x ( `#14092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14092> `_ , `#14096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14096> `_ ) * add Perl and Python runtime dependencies to Bowtie2 2.4.4 ( `#14097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14097> `_ ) * fix source URL for SCOTCH 6.1.0 ( `#14099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14099> `_ ) * drop tcmalloc from SymEngine as it causes crashes with scipy ( `#14119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14119> `_ ) * fix homepage + description in SimpleITK easyconfigs ( `#14125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14125> `_ ) * add missing scripts from ``utils`` and ``analysis_scripts`` to ``bin`` for cryoDRGN ( `#14137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14137> `_ ) * patch ``rsync_from_ncbi.pl`` in Kraken2 v2.1.2 to allow syncing with NCBI servers over HTTPS ( `#14148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14148> `_ ) * skip ``mkl_fused_batch_norm_op_test`` test (broken on AMD EPYC systems) for TensorFlow 2.5.0 and 2.6.0 ( `#14151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14151> `_ , `#14153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14153> `_ ) * fix incorrect module load message and update morphology plugin of ImageJ 1.51k ( `#14152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14152> `_ ) * fix XCrySDen v1.6.2 linking to libdl and Togl ( `#14160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14160> `_ ) * add patch to fix PMIx detection in OpenMPI v4.0.3, v4.0.5, v4.1.0 ( `#14177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14177> `_ ) * add patch for OpenBLAS 0.3.17 + 0.3.18 to fix segfault triggered by scipy tests ( `#14178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14178> `_ ) * fix spatstat.* downloads for Seurat v4.0.1 ( `#14199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14199> `_ ) * add patch for GROMACS 2019.3 easyconfigs using CMake 3.15.3 to fix CPU detection ( `#14212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14212> `_ ) * other changes: * remove help2man build dependency for flex using system toolchain (because it requires Perl) ( `#13922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13922> `_ ) * use proper dependency for python-Levenshtein in CIRI-long easyconfig ( `#13985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13985> `_ ) * in-place updates for foss/2021b and intel/2021b common toolchains * update to UCX(-CUDA) 1.11.2 as dependency for OpenMPI v4.1.1 + NCCL v2.10.3 ( `#14090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14090> `_ ) * update libfabric to 1.13.1 in OpenMPI and add it as a dependency in PMIx for the upcoming foss 2021b toolchain ( `#14164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14164> `_ ) * update to OpenBLAS 0.3.18 as dependency for FlexiBLAS 3.0.4 with GCCcore/11.2.0 toolchain ( `#14167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14167> `_ ) * update libfabric to 1.13.2 in OpenMPI v4.1.1 + PMIx 4.1.0 for the upcoming foss/2021b toolchain ( `#14176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14176> `_ ) * remove format mapping from homepage of Subread easyconfigs ( `#14145 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14145> `_ ) * add BLIS and imkl (x86_64 only) builddependencies to FlexiBLAS 0.3.4 with GCC/11.2.0 toolchain ( `#14225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14225> `_ ) .. _release_notes_eb442: EasyBuild v4.4.2 (September 7th 2021) ------------------------------------- bugfix/update release **framework** * various enhancements, including: * add per-extension timing in output produced by ``eb`` command ( `#3734 <https://github.com/easybuilders/easybuild-framework/pull/3734> `_ ) * add definition for new toolchain ``nvpsmpic`` (NVHPC + ParaStationMPI + CUDA) ( `#3736 <https://github.com/easybuilders/easybuild-framework/pull/3736> `_ ) * include list of missing libraries in warning about missing FFTW libraries in ``imkl`` toolchain component ( `#3776 <https://github.com/easybuilders/easybuild-framework/pull/3776> `_ ) * check for recursive symlinks by default before copying a folder ( `#3784 <https://github.com/easybuilders/easybuild-framework/pull/3784> `_ ) * add ``--filter-ecs`` configuration option to filter out easyconfigs from set of easyconfigs to install ( `#3796 <https://github.com/easybuilders/easybuild-framework/pull/3796> `_ ) * check type of ``source_tmpl`` value for extensions, ensure it's a string value (not a list) ( `#3799 <https://github.com/easybuilders/easybuild-framework/pull/3799> `_ ) * also define ``$BLAS_SHARED_LIBS`` & co in build environment (analogous to ``$BLAS_STATIC_LIBS`` ) ( `#3800 <https://github.com/easybuilders/easybuild-framework/pull/3800> `_ ) * report use of ``--ignore-test-failure`` in success message in output ( `#3806 <https://github.com/easybuilders/easybuild-framework/pull/3806> `_ ) * add ``get_cuda_cc_template_value`` method to ``EasyConfig`` class ( `#3807 <https://github.com/easybuilders/easybuild-framework/pull/3807> `_ ) * add support for ``fix_bash_shebang_for`` ( `#3808 <https://github.com/easybuilders/easybuild-framework/pull/3808> `_ ) * pick up ``$MODULES_CMD`` to facilitate using Environment Modules 4.x as modules tool ( `#3816 <https://github.com/easybuilders/easybuild-framework/pull/3816> `_ ) * use more sensible branch name for creating easyblocks PR with ``--new-pr`` ( `#3817 <https://github.com/easybuilders/easybuild-framework/pull/3817> `_ ) * various bug fixes, including: * remove Python 2.6 from list of supported Python versions in ``setup.py`` ( `#3767 <https://github.com/easybuilders/easybuild-framework/pull/3767> `_ ) * don't add directory that doesn't include any files to ``$PATH`` or ``$LD_LIBRARY_PATH`` ( `#3769 <https://github.com/easybuilders/easybuild-framework/pull/3769> `_ ) * make logdir writable also when ``--stop`` / ``--fetch`` is used and ``--read-only-installdir`` is enabled ( `#3771 <https://github.com/easybuilders/easybuild-framework/pull/3771> `_ ) * fix forgotten renaming of ``l`` to ``char`` in ``__init__.py`` that is created for included Python modules ( `#3773 <https://github.com/easybuilders/easybuild-framework/pull/3773> `_ ) * fix ``verify_imports`` by deleting all imported modules before re-importing them one by one ( `#3780 <https://github.com/easybuilders/easybuild-framework/pull/3780> `_ ) * fix ``ignore_test_failure`` not set for Extension instances ( `#3782 <https://github.com/easybuilders/easybuild-framework/pull/3782> `_ ) * update ``iompi`` toolchain to ``intel-compiler`` subtoolchain for oneAPI versions (>= ``iompi`` 2020.12) ( `#3785 <https://github.com/easybuilders/easybuild-framework/pull/3785> `_ ) * don't parse patch files as easyconfigs when searching for where patch file is used ( `#3786 <https://github.com/easybuilders/easybuild-framework/pull/3786> `_ ) * make sure git clone with a tag argument actually downloads a tag ( `#3795 <https://github.com/easybuilders/easybuild-framework/pull/3795> `_ ) * fix CI by excluding GC3Pie 2.6.7 (which is broken with Python 2) and improve error reporting for option parsing ( `#3798 <https://github.com/easybuilders/easybuild-framework/pull/3798> `_ ) * correctly resolve templates for patches in extensions when uploading to GitHub ( `#3805 <https://github.com/easybuilders/easybuild-framework/pull/3805> `_ ) * add ``--easystack`` to ignored options when submitting job ( `#3813 <https://github.com/easybuilders/easybuild-framework/pull/3813> `_ ) * other changes: * speed up tests by caching checked paths in ``set_tmpdir`` + less test cases for ``test_compiler_dependent_optarch`` ( `#3802 <https://github.com/easybuilders/easybuild-framework/pull/3802> `_ ) * speed up ``set_parallel`` method in ``EasyBlock`` class ( `#3812 <https://github.com/easybuilders/easybuild-framework/pull/3812> `_ ) **easyblocks** * 4 new software-specific easyblocks: * CRISPR-DAV ( `#2487 <https://github.com/easybuilders/easybuild-easyblocks/pull/2487> `_ ), jaxlib ( `#2545 <https://github.com/easybuilders/easybuild-easyblocks/pull/2545> `_ ), ORCA ( `#2504 <https://github.com/easybuilders/easybuild-easyblocks/pull/2504> `_ ), RepeatModeler ( `#2470 <https://github.com/easybuilders/easybuild-easyblocks/pull/2470> `_ ) * minor enhancements, including: * update ABAQUS easyblock to support installation of v2020 ( `#2034 <https://github.com/easybuilders/easybuild-easyblocks/pull/2034> `_ ) * enable make check and sanity check exec for OpenMPI ( `#2444 <https://github.com/easybuilders/easybuild-easyblocks/pull/2444> `_ ) * fixed sanity check for later versions of Molpro ( `#2499 <https://github.com/easybuilders/easybuild-easyblocks/pull/2499> `_ ) * add Ampere to known GPU architectures for Kokkos in LAMMPS easyblock ( `#2510 <https://github.com/easybuilders/easybuild-easyblocks/pull/2510> `_ ) * update sanity check in ESMF easyblock to take into account new binary names from version 8.1.0 onwards ( `#2512 <https://github.com/easybuilders/easybuild-easyblocks/pull/2512> `_ ) * use ``report_test_failure`` in TensorFlow easyblock ( `#2519 <https://github.com/easybuilders/easybuild-easyblocks/pull/2519> `_ ) * add support for imkl 2021.x in easyblocks for * Amber ( `#2527 <https://github.com/easybuilders/easybuild-easyblocks/pull/2527> `_ ), BerkeleyGW ( `#2528 <https://github.com/easybuilders/easybuild-easyblocks/pull/2528> `_ ), CP2K ( `#2529 <https://github.com/easybuilders/easybuild-easyblocks/pull/2529> `_ ), FreeFEM ( `#2530 <https://github.com/easybuilders/easybuild-easyblocks/pull/2530> `_ ), GROMACS ( `#2531 <https://github.com/easybuilders/easybuild-easyblocks/pull/2531> `_ ), numexpr ( `#2532 <https://github.com/easybuilders/easybuild-easyblocks/pull/2532> `_ ) * add ``install_src`` option and enhance ``buildcmd`` option in PythonPackage easyblock ( `#2534 <https://github.com/easybuilders/easybuild-easyblocks/pull/2534> `_ ) * make sure AOCC commands like clang/flang pick up ``GCCcore`` as GCC toolchain ( `#2538 <https://github.com/easybuilders/easybuild-easyblocks/pull/2538> `_ ) * create ``CMakeConfig`` files for tbb >= 2020 ( `#2539 <https://github.com/easybuilders/easybuild-easyblocks/pull/2539> `_ ) * find source dir for libunwind when building ldd for Clang versions >= 12.0.1 ( `#2540 <https://github.com/easybuilders/easybuild-easyblocks/pull/2540> `_ ) * fix motorBike test in sanity check for OpenFOAM 9 ( `#2544 <https://github.com/easybuilders/easybuild-easyblocks/pull/2544> `_ ) * generate and install pkg-config files for OpenSSL wrapper ( `#2549 <https://github.com/easybuilders/easybuild-easyblocks/pull/2549> `_ ) * don't run ``setup.py config`` for numpy >= 1.21, since it's no longer supported ( `#2554 <https://github.com/easybuilders/easybuild-easyblocks/pull/2554> `_ ) * update WIEN2k easyblock to handle new Intel versions, WIEN2k v21, Perl dependency, and tuning of dimension parameters ( `#2558 <https://github.com/easybuilders/easybuild-easyblocks/pull/2558> `_ ) * remove PCRE from list of system libraries for TensorFlow 2.6.0 ( `#2559 <https://github.com/easybuilders/easybuild-easyblocks/pull/2559> `_ ) * add support for also installing Tosca component in ABAQUS ( `#2560 <https://github.com/easybuilders/easybuild-easyblocks/pull/2560> `_ ) * update ABAQUS easyblock to support installing of version 2021 with hot fixes ( `#2562 <https://github.com/easybuilders/easybuild-easyblocks/pull/2562> `_ ) * update sanity check in VTune easyblock for 2021.x versions ( `#2563 <https://github.com/easybuilders/easybuild-easyblocks/pull/2563> `_ ) * various bug fixes, including: * handle failure of running ``nvidia-smi`` in TensorFlow tests ( `#2506 <https://github.com/easybuilders/easybuild-easyblocks/pull/2506> `_ ) * remove Python 2.6 from list of supported Python versions in ``setup.py`` ( `#2507 <https://github.com/easybuilders/easybuild-easyblocks/pull/2507> `_ ) * clean up installation of Tkinter ( `#2509 <https://github.com/easybuilders/easybuild-easyblocks/pull/2509> `_ ) * remove redundant ``$CPATH`` entry of tbb modules + fix ``--module-only`` ( `#2511 <https://github.com/easybuilders/easybuild-easyblocks/pull/2511> `_ ) * honor ``--ignore-test-failure`` in PythonPackage ( `#2516 <https://github.com/easybuilders/easybuild-easyblocks/pull/2516> `_ ) * use correct GTK+ version for OpenCV based on dependencies ( `#2520 <https://github.com/easybuilders/easybuild-easyblocks/pull/2520> `_ ) * ensure Python prep is done in sanity check + support debug builds in TensorFlow easyblock ( `#2522 <https://github.com/easybuilders/easybuild-easyblocks/pull/2522> `_ ) * correct cleanup of single-letter local variable in ``__init__`` of ``easybuild.easyblocks`` ( `#2524 <https://github.com/easybuilders/easybuild-easyblocks/pull/2524> `_ ) * reset runtest to ``None`` in CMakePythonPackage ( `#2536 <https://github.com/easybuilders/easybuild-easyblocks/pull/2536> `_ ) * set ``$I_MPI_ROOT`` correctly for 2021.x in impi easyblock ( `#2537 <https://github.com/easybuilders/easybuild-easyblocks/pull/2537> `_ ) * let Bundle easyblock pick up custom easyblock for components based on name if no easyblock is specified explicitly ( `#2543 <https://github.com/easybuilders/easybuild-easyblocks/pull/2543> `_ , `#2547 <https://github.com/easybuilders/easybuild-easyblocks/pull/2547> `_ ) * explicitly use only OpenBLAS for PyTorch if MKL is not used ( `#2448 <https://github.com/easybuilders/easybuild-easyblocks/pull/2448> `_ ) * keep symlinks in cuDNN installations ( `#2550 <https://github.com/easybuilders/easybuild-easyblocks/pull/2550> `_ ) * use ``${BLAS,LAPACK}_SHARED_LIBS`` in GROMACS easyblock for FlexiBLAS-based toolchains ( `#2552 <https://github.com/easybuilders/easybuild-easyblocks/pull/2552> `_ ) * copy the list to avoid changing the original lists in ``DEFAULT_TARGETS_MAP`` for Clang and LLVM ( `#2556 <https://github.com/easybuilders/easybuild-easyblocks/pull/2556> `_ ) * fix ``pathsep`` ``join`` bug that breaks installation of CUDA versions < 10.1 if ``$PERL5LIB`` is defined ( `#2561 <https://github.com/easybuilders/easybuild-easyblocks/pull/2561> `_ ) * other changes: * simplify Boost easyblock ( `#2513 <https://github.com/easybuilders/easybuild-easyblocks/pull/2513> `_ ) * remove deprecated options from PythonPackage ( `#2535 <https://github.com/easybuilders/easybuild-easyblocks/pull/2535> `_ ) **easyconfigs** * added easyconfig for foss/2021.07 (candidate for foss/2021b) ( `#13788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13788> `_ ) and iomkl/2021a ( `#13521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13521> `_ ) toolchains * added example easyconfig files for 79 new software packages: * AlphaFold ( `#13867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13867> `_ ), andi ( `#13768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13768> `_ ), aria2 ( `#13709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13709> `_ ), AUTO-07p ( `#13831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13831> `_ ), babl ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), BAli-Phy ( `#13484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13484> `_ ), biogeme ( `#13735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13735> `_ ), Bio-SearchIO-hmmer ( `#13419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13419> `_ ), BuDDy ( `#13907 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13907> `_ ), c-ares ( `#13709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13709> `_ ), CellRank ( `#13408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13408> `_ ), Coin ( `#13818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13818> `_ ), Co-phylog ( `#13769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13769> `_ ), cppy ( `#13823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13823> `_ ), CREST ( `#13648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13648> `_ ), CRISPR-DAV ( `#13139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13139> `_ ), CSBLAST ( `#13794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13794> `_ ), DGL ( `#13793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13793> `_ ), DistributedStream ( `#13659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13659> `_ ), Excel-Writer-XLSX ( `#13139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13139> `_ ), FBPIC ( `#13500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13500> `_ ), freebayes ( `#12859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12859> `_ ), freud-analysis ( `#13354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13354> `_ ), fumi_tools ( `#13517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13517> `_ ), GEGL ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), GIMP ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), glib-networking ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), GOATOOLS ( `#13364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13364> `_ , `#13629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13629> `_ ), gofasta ( `#13651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13651> `_ ), GTK2 ( `#13900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13900> `_ ), GTK3 ( `#13900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13900> `_ ), Highway ( `#13453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13453> `_ ), hipSYCL ( `#13837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13837> `_ ), ISA-L ( `#13663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13663> `_ ), jax ( `#13760 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13760> `_ ), JSON-GLib ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), Kalign ( `#13463 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13463> `_ ), LADR ( `#13351 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13351> `_ ), lDDT ( `#13794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13794> `_ ), libdivsufsort ( `#13768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13768> `_ ), libjxl ( `#13453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13453> `_ , `#13829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13829> `_ ), libmypaint ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), libtecla ( `#13908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13908> `_ ), lie_learn ( `#13793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13793> `_ ), longestrunsubsequence ( `#13800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13800> `_ ), Maude ( `#13909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13909> `_ ), mimalloc ( `#13726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13726> `_ ), MINPACK ( `#13802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13802> `_ ), Mish-Cuda ( `#13759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13759> `_ , `#13784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13784> `_ ), muparserx ( `#13779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13779> `_ ), nlohmann_json ( `#13777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13777> `_ ), OpenStackClient ( `#13644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13644> `_ ), OSPRay ( `#12852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12852> `_ ), pandapower ( `#13687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13687> `_ ), pangolin ( `#13733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13733> `_ , `#13848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13848> `_ ), PSIPRED ( `#13794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13794> `_ ), PYPOWER ( `#13689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13689> `_ ), PyPSA ( `#13673 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13673> `_ ), PyRosetta ( `#13793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13793> `_ ), pysamstats ( `#13139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13139> `_ ), pytest-benchmark ( `#13622 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13622> `_ ), python-isal ( `#13663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13663> `_ ), QCxMS ( `#13650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13650> `_ ), RepeatModeler ( `#13126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13126> `_ ), Schrodinger ( `#11698 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11698> `_ ), sklearn-som ( `#13699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13699> `_ ), SoQt ( `#13818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13818> `_ ), spdlog ( `#13778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13778> `_ ), SpectrA ( `#13743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13743> `_ ), SymEngine-python ( `#13652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13652> `_ ), SyRI ( `#13800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13800> `_ ), torchinfo ( `#13662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13662> `_ ), TRAVIS-Analyzer ( `#13503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13503> `_ ), UShER ( `#13708 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13708> `_ ), Vampire ( `#13352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13352> `_ ), VBZ-Compression ( `#13536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13536> `_ ), VisPy ( `#13468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13468> `_ ), wgsim ( `#13475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13475> `_ ), Yices ( `#13906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13906> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2020.eb, ANTs 2.3.5, AOCC 3.1.0, Arb 2.19.0, archspec 0.1.2, Armadillo 10.5.3, ASE 3.22.0, Autotools 20210726, BamTools 2.5.2, bgen 4.1.3, Biopython 1.79, bitarray 1.5.3, Boost 1.76.0, Bowtie2 2.4.4, bpytop 1.0.67, Cartopy 0.19.0.post1, Centrifuge 1.0.4, Clang 12.0.1, CMake 3.21.1, CRISPResso2 2.2.1, CUDA 11.4.1, cuDNN 8.2.2.26, cURL 7.78.0, cutadapt 3.4, DIAMOND 2.0.11, DROP 1.1.0, Dsuite 20210718, dtcmp 1.1.2, ecCodes 2.22.1, Elk 7.2.42, ESMF 8.1.1, expat 2.4.1, fastq-tools 0.8.3, Fiona 1.8.20, FLINT 2.7.1, g2clib 1.6.3, g2lib 3.2.0, GCC(core) 11.2.0, GDCM 3.0.8, GDRCopy 2.3, GenomeTools 1.6.2, GffCompare 0.12.2, gffread 0.12.7, GLib 2.69.1, GMT 6.2.0, Go 1.16.6, GPAW 21.6.0, Gradle 6.9.1.eb, GROMACS 2021.3, HarfBuzz 2.8.2, HDF5 1.12.1, Horovod 0.22.1, hwloc 2.5.0, hypothesis 6.14.6, igraph 0.9.4, ImageMagick 7.1.0, IMOD 4.11.5, IPython 7.26.0, Java 16, Julia 1.6.2, JupyterHub 1.4.1, JupyterLab 3.1.6, Kent_tools 418, lavaan 0.6-9, libfabric 1.13.0, libffcall 2.4, libffi 3.4.2, libgeotiff 1.7.0, libRmath 4.1.0, LIBSVM 3.25, LibTIFF 4.3.0, likwid 5.2.0, LLVM 12.0.1, LMDB 0.9.29, magma 2.6.1, MariaDB 10.6.4, MATIO 1.5.21, matplotlib 3.4.2, MEGA 10.0.5, Mesa 21.1.7, Meson 0.59.1, Metal 2020-05-05, Mini-XML 3.2, molmod 1.4.8, MPICH 3.4.2, nanopolish 0.13.3, NCCL 2.10.3, ncdu 1.16, NCO 5.0.1, neptune-client 0.10.5, netcdf4-python 1.5.7, networkx 2.5.1, nodejs 14.17.6, NSPR 4.32, NSS 3.69, NVHPC 21.7, OpenBLAS 0.3.17, OpenEXR 3.1.1, OpenFOAM 9, OpenFOAM v2106, OpenMM 7.5.1, OpenMolcas 21.06, openpyxl 3.0.7, Pango 1.48.8, parallel 20210722, Paraver 4.9.2, ParaView 5.9.1, patchelf 0.13, PCRE2 10.37, PCRE 8.45, Perl 5.34.0, PETSc 3.15.1, petsc4py 3.15.0, Pillow 8.3.1, Pillow-SIMD 8.3.1, plotly.py 5.1.0, PLUMED 2.7.2, PMIx 4.1.0, poppler 21.06.1, PostgreSQL 13.3, preseq 3.1.2, pybind11 2.7.1, pyFFTW 0.12.0, PyGEOS 0.10.2, Pyomo 6.0.1, PyQt5 5.15.4, pyshp 2.1.3, Python 3.9.6, python-igraph 0.9.6, QTLtools 1.3.1, RAxML-NG 1.0.3, R-bundle-Bioconductor 3.13, re2c 2.2, ReFrame 3.8.0., RStudio-Server 1.4.1717, Rust 1.54.0, Scalasca 2.6, scVelo 0.2.3, Shapely 1.8a1, shrinkwrap 1.1.0, SLEPc 3.15.1, slepc4py 3.15.1, snakemake 6.6.1, snappy 1.1.9, snippy 4.6.0, snpEff 5.0e, SOCI 4.0.2, SpaceRanger 1.3.0, Spack 0.16.2, spatialreg 1.1-8, spglib-python 1.16.1, SQLite 3.36, STAR 2.7.9a, statsmodels 0.12.2, StringTie 2.1.7, Subread 2.0.3, SymEngine 0.7.0, TensorFlow 2.6.0, TetGen 1.6.0, Tkinter 3.9.6, torchtext 0.9.1, tqdm 4.61.2, UCX 1.11.0, UCX-CUDA 1.11.0, unrar 6.0.2, util-linux 2.37, VTune 2021.6.0, WIEN2k 21.1, WPS 4.2, WRF 4.3, X11 20210802, x264 20210613, xarray 0.19.0, XlsxWriter 1.4.4, XML-Parser 2.46, zstd 1.5.0 * minor enhancements, including: * add extensions to recent R v4.x easyconfigs: PCAmatchR ( `#13448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13448> `_ ), hal9001 ( `#13451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13451> `_ ), cobalt ( `#13544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13544> `_ ), CBPS ( `#13549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13549> `_ ), SBdecomp ( `#13565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13565> `_ ), lwgeom ( `#13674 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13674> `_ ), naturalsort ( `#13762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13762> `_ ), finalfit + gtsummary ( `#13766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13766> `_ ) * add VBZ compress capability to nanopolish 0.13.3 (for fast5 files) ( `#13536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13536> `_ ) * add CMake build dependency to easyconfig for tbb 2020.03 ( `#13704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13704> `_ ) * also build shared libs for MUMPS 5.3.5 ( `#13702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13702> `_ ) and 5.4.0 ( `#13705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13705> `_ ) * add dependency on pkg-config to OpenSSL wrappers ( `#13765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13765> `_ ) * various bug fixes, including: * fix LAMMPS 3Mar2020 easyconfigs using intel toolchain on AMD CPUs by patching out hardcoded ``-xHost`` ( `#11577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11577> `_ ) * fix sanity check error for OpenCV v4.5.1 by adding (and using) freetype and HarfBuzz dependencies ( `#12517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12517> `_ ) * add patches for TensorFlow 1.13.1 to fix installation ( `#13326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13326> `_ ) * remove Python 2.6 from list of supported Python versions in ``setup.py`` ( `#13349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13349> `_ ) * switch back to Bundle easyblock for PyQt5 5.15.1 + add back source URLs for components ( `#13371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13371> `_ ) * add pkg-config build dependency for GDAL 3.2.1 ( `#13383 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13383> `_ , `#13808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13808> `_ ), Rust ( `#13538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13538> `_ ), GenomeTools ( `#13805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13805> `_ ), x264 ( `#13834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13834> `_ ) * add missing Python 3 build dependency for Rust v1.52.1 ( `#13399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13399> `_ ) * fix order of cffi extension in old Python easyconfigs ( `#13400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13400> `_ ) * patch out ``__asm__`` use in ctffind to avoid build failure on ppc64le ( `#13409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13409> `_ ) * disable building man pages in Gdk-Pixbuf ( `#13410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13410> `_ ) * add missing Bio-Search-hmmer dependency for prokka ( `#13419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13419> `_ ) * avoid downloading old numpy version during install for h5py ( `#13428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13428> `_ ) * add patch for Qt5 5.8.0 to fix compilation failure in webkit ( `#13434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13434> `_ ) * avoid downloading and building freetype and qhull for matplotlib 3.4.2 ( `#13437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13437> `_ ) * fix order of components in recent GTK+ easyconfigs to avoid dependency on system GTK+ in GTK+ themes ( `#13449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13449> `_ ) * fix Python 2.7.13 easyconfigs by adding missing extensions ( `#13456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13456> `_ ) * add TensorFlow patch to fix crash on shutdown ( `#13462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13462> `_ ) * allow for non-x86_64 in ``postinstallcmds`` for CuPy ( `#13501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13501> `_ ) * disable default EULA acceptance in easyconfig for NVHPC v21.5 ( `#13516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13516> `_ ) * fix error with p7zip's 7z command not finding ``7z.dll`` ( `#13542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13542> `_ ) * patch MaxBin2 Perl script to use provided Perl dependency ( `#13551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13551> `_ ) * add missing zlib dependency to libarchive ( `#13579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13579> `_ ) * fix pkgconfig version in patch for bzip 1.0.8 (+ add easyconfig with GCCcore/11.2.0 toolchain) ( `#13581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13581> `_ ) * fix build of DIRAC 19.0 easyconfig with high compiler optimizations ( `#13613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13613> `_ ) * fix source URLs and add alternative checksum for Hypre 2.15.1 (since it moved to a different GitHub repo) ( `#13616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13616> `_ ) * add new source URL for Mesa easyconfigs using 2017b toolchain ( `#13617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13617> `_ ) * avoid ``MPICXX`` dependency in SimpleElastics ITK ( `#13623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13623> `_ ) * add upstream patch for GCC 9.x, 10.x, 11.x to avoid spurious FPE on avx512 (affects UCX) ( `#13628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13628> `_ ) * add patch for ctffind 4.1.14 to declare functions without return as void (fixes segfault) ( `#13665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13665> `_ ) * enable EGL in recent libepoxy ECs ( `#13684 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13684> `_ ) * remove unused ``buildcmd`` from libgpuarray easyconfigs ( `#13720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13720> `_ ) * add patch to fix building Qt5.10.1 against newer glibc ( `#13730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13730> `_ ) * add Python 3 as a builddependency to recent fontconfig easyconfigs ( `#13731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13731> `_ ) * update source_URL in BLAST 2.2.26 easyconfig ( `#13732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13732> `_ ) * restore error message on failing easyconfigs test suite, required by bot to determine end of output of test suite ( `#13745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13745> `_ , `#13770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13770> `_ ) * add Perl build dependency to recent Clang easyconfigs ( `#13746 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13746> `_ ) * disable using system Valgrind in the json-c tests ( `#13750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13750> `_ ) * use Archive source URL for spatstat.geom extension in Seurat ( `#13761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13761> `_ ) * add ld.gold relocts patch to binutils 2.30 ( `#13785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13785> `_ ) * add missing Python + Zip build dependencies for old Bazel versions used as build dep for TensorFlow 1.12.0 + 1.13.1 ( `#13786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13786> `_ ) * add alternative checksum for AFNI 18.3.00 ( `#13790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13790> `_ ) * update tensorflow-probability easyconfigs to include ``--release`` flag in ``installopts`` ( `#13810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13810> `_ ) * fix source URL for DB 18.1.32 ( `#13813 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13813> `_ ) * add missing cppy build dependency for matplotlib 3.4.2 ( `#13823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13823> `_ ) * disable bash completion in recent x264 easyconfigs ( `#13834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13834> `_ ) * add Perl as build dependency for ELPA 2021.05.001 + patch to fix hardcoded ``/usr/bin/perl`` ( `#13835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13835> `_ ) * add archive source URL to Spark 3.x easyconfigs to fix broken download ( `#13842 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13842> `_ ) * fix PCRE dependency for GDAL 3.2.1 and 3.3.0, don't use PCRE2 ( `#13861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13861> `_ ) * add Perl build dependency for HMMER 3.3.2 + patch to ensure it is used ( `#13870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13870> `_ ) * stick to intel-compilers toolchain for DFT-D3 v3.2.0 ( `#13878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13878> `_ ) * add missing flex build dependency for leidenalg ( `#13884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13884> `_ ) * update CMake build dependency for Eigen 3.3.4 + 3.3.5 ( `#13889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13889> `_ ) * fix source URL for Yasm 1.3.0 (+ add missing checksum) ( `#13901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13901> `_ ) * update to more recent Meson build dependency for GCCcore/8.3.0 easyconfigs to fix failing RPATH sanity check ( `#13910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13910> `_ ) * fix shebang for RepeatMasker 4.1.2-p1 Perl script ( `#13911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13911> `_ ) * other changes: * use custom ORCA easyblock in easyconfigs for ORCA v4.x ( `#13348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13348> `_ ) * move archived easyconfig files to correct ``__archive__`` folder ( `#13422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13422> `_ ) * rename NINJA to TWL-NINJA to avoid nameclash ( `#13529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13529> `_ ) * remove superfluous ``configopts`` and add sanity checks/checksums in CLHEP easyconfigs ( `#13614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13614> `_ ) * remove superfluous ``-DCMAKE_BUILD_TYPE`` configuration option in Arrow easyconfigs ( `#13615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13615> `_ ) * switch ITK easyconfigs to CMakePythonPackage easyblock, also enable ``-DITK_USE_SYSTEM_HDF5`` configuration option, fix download URLs ( `#13619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13619> `_ ) * use ``build_type`` instead of ``-DCMAKE_BUILD_TYPE=RELEASE`` in ``configopts`` in MMseqs2 easyconfigs ( `#13620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13620> `_ ) * avoid using system GTK+3 and remove ``-DCMAKE_BUILD_TYPE=RELEASE`` configure option in OpenCV easyconfigs ( `#13621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13621> `_ ) * remove ``-DCMAKE_BUILD_TYPE=RELEASE`` configure option and add checksums in LLVM easyconfigs ( `#13624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13624> `_ ) * create libtinfo symlinks in easyconfigs for ncurses with system toolchain ( `#13658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13658> `_ ), 6.1 ( `#13661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13661> `_ ) and 6.2 ( `#13660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13660> `_ ) * increase test timeouts for PyTorch 1.8.1 and 1.9.0 ( `#13700 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13700> `_ ) * rename CUDAcore to CUDA for v11.3.1 and v11.4.1 after merging foss/fosscuda, to ensure that ``get_software_root('CUDA')`` used in easyblocks works ( `#13874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13874> `_ ) * use CUDA instead of CUDAcore in recent NVHPC comments ( `#13875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13875> `_ ) .. _release_notes_eb441: EasyBuild v4.4.1 (July 6th 2021) -------------------------------- bugfix/update release **framework** * various enhancements, including: * enhance detection of patch files supplied to ``eb`` command with better error messages ( `#3709 <https://github.com/easybuilders/easybuild-framework/pull/3709> `_ ) * add per-step timing information ( `#3716 <https://github.com/easybuilders/easybuild-framework/pull/3716> `_ ) * add ``module-write hook`` ( `#3728 <https://github.com/easybuilders/easybuild-framework/pull/3728> `_ ) * add ``ignore-test-failure`` configuration option to ignore failing test step ( `#3732 <https://github.com/easybuilders/easybuild-framework/pull/3732> `_ ) * add toolchain definition for nvompic (NVHPC + OpenMPI) ( `#3735 <https://github.com/easybuilders/easybuild-framework/pull/3735> `_ ) * warn about generic milestone in ``--review-pr`` and ``--merge-pr`` ( `#3751 <https://github.com/easybuilders/easybuild-framework/pull/3751> `_ ) * various bug fixes, including: * don't override ``COMPILER_MODULE_NAME`` , inherited from ``Ffmpi`` , in Fujitsu toolchain definition ( `#3721 <https://github.com/easybuilders/easybuild-framework/pull/3721> `_ ) * avoid overwriting ``pr_nr`` in ``post_pr_test_report`` for reports with ``--include-easyblocks-from-pr`` ( `#3724 <https://github.com/easybuilders/easybuild-framework/pull/3724> `_ , `#3726 <https://github.com/easybuilders/easybuild-framework/pull/3726> `_ ) * fix crash in ``get_config_dict`` when copying modules that were imported in easyconfig file (like ``import os`` ) ( `#3729 <https://github.com/easybuilders/easybuild-framework/pull/3729> `_ ) * parse C standard flags in ``CFLAGS`` for Fujitsu compiler ( `#3731 <https://github.com/easybuilders/easybuild-framework/pull/3731> `_ ) * fix error message for ``--use-ccache`` ( `#3733 <https://github.com/easybuilders/easybuild-framework/pull/3733> `_ ) * error out when passing a list to ``run_cmd*`` to avoid running wrong command unintended, unless ``shell=True`` is used ( `#3737 <https://github.com/easybuilders/easybuild-framework/pull/3737> `_ ) * minor fixes to output of test reports when using multiple PRs ( `#3741 <https://github.com/easybuilders/easybuild-framework/pull/3741> `_ ) * fix location for modules installed with intel-compilers toolchain in HierarchicalMNS by always checking toolchain compiler name against template map ( `#3745 <https://github.com/easybuilders/easybuild-framework/pull/3745> `_ ) * avoid checking ``msg`` attribute of ``GitCommandError`` ( `#3756 <https://github.com/easybuilders/easybuild-framework/pull/3756> `_ ) * consider sources provided as dict in ``EasyBlock.check_checksums_for`` ( `#3758 <https://github.com/easybuilders/easybuild-framework/pull/3758> `_ ) * don't make changes to software installation directory when using ``--sanity-check-only`` ( `#3761 <https://github.com/easybuilders/easybuild-framework/pull/3761> `_ ) * honor specified easyblock for extensions ( `#3762 <https://github.com/easybuilders/easybuild-framework/pull/3762> `_ ) * other changes: * make sure that tests requiring a github token have ``github`` in the test name so that they can be easily filtered ( `#3730 <https://github.com/easybuilders/easybuild-framework/pull/3730> `_ ) * deprecate EasyBuild bootstrap script ( `#3742 <https://github.com/easybuilders/easybuild-framework/pull/3742> `_ ) * use temporary download folder in ``test_http_header_fields_urlpat`` ( `#3755 <https://github.com/easybuilders/easybuild-framework/pull/3755> `_ ) **easyblocks** * 5 new software-specific easyblocks: * AOMP ( `#2435 <https://github.com/easybuilders/easybuild-easyblocks/pull/2435> `_ , `#2462 <https://github.com/easybuilders/easybuild-easyblocks/pull/2462> `_ , `#2464 <https://github.com/easybuilders/easybuild-easyblocks/pull/2464> `_ ), FreeFEM ( `#1969 <https://github.com/easybuilders/easybuild-easyblocks/pull/1969> `_ ), NCCL (built from source) ( `#2337 <https://github.com/easybuilders/easybuild-easyblocks/pull/2337> `_ , `#2460 <https://github.com/easybuilders/easybuild-easyblocks/pull/2460> `_ ), torchvision ( `#2467 <https://github.com/easybuilders/easybuild-easyblocks/pull/2467> `_ ), UCX plugins ( `#2491 <https://github.com/easybuilders/easybuild-easyblocks/pull/2491> `_ ) * minor enhancements, including: * enhance Amber easyblock to support installing Amber via CMake ( `#2445 <https://github.com/easybuilders/easybuild-easyblocks/pull/2445> `_ ) * enhance ConfigureMake generic easyblock to add support for building multiple build targets ( `#2449 <https://github.com/easybuilders/easybuild-easyblocks/pull/2449> `_ , `#2479 <https://github.com/easybuilders/easybuild-easyblocks/pull/2479> `_ , `#2480 <https://github.com/easybuilders/easybuild-easyblocks/pull/2480> `_ ) * enhance sanity check for Clang to verify if CUDA offload library was produced ( `#2454 <https://github.com/easybuilders/easybuild-easyblocks/pull/2454> `_ ) * update custom easyblock for Boost to always build single and multi threaded versions ( `#2456 <https://github.com/easybuilders/easybuild-easyblocks/pull/2456> `_ ) * enhance ``sitecustomize.py`` in Python easyblock to support overriding core Python packages, and allowing overriding in virtualenv ( `#2458 <https://github.com/easybuilders/easybuild-easyblocks/pull/2458> `_ , `#2483 <https://github.com/easybuilders/easybuild-easyblocks/pull/2483> `_ ) * update CMakeMake to handle old and new Boost/Boost.Python builds using custom easyblock for Boost ( `#2461 <https://github.com/easybuilders/easybuild-easyblocks/pull/2461> `_ ) * add file prefix option to XALT easyblock ( `#2463 <https://github.com/easybuilders/easybuild-easyblocks/pull/2463> `_ ) * enhance Java easyblock to define ``%(jdkarch)s`` template ( `#2472 <https://github.com/easybuilders/easybuild-easyblocks/pull/2472> `_ ) * adjust Perl easyblock to only check for a ``man`` subdirectory if groff is a dependency ( `#2474 <https://github.com/easybuilders/easybuild-easyblocks/pull/2474> `_ ) * support arbitrary version strings in OpenSSL wrapper and add ``minimum_openssl_version`` option ( `#2475 <https://github.com/easybuilders/easybuild-easyblocks/pull/2475> `_ ) * enhance Python easyblock to explicitly disable installing core-pip when ``install_pip`` is not ``True`` ( `#2476 <https://github.com/easybuilders/easybuild-easyblocks/pull/2476> `_ ) * enhance intel-compiler easyblock to include multipath include dir in ``$CPATH`` ( `#2477 <https://github.com/easybuilders/easybuild-easyblocks/pull/2477> `_ ) * enhance Hypre easyblock to enable CUDA support ( `#2482 <https://github.com/easybuilders/easybuild-easyblocks/pull/2482> `_ ) * update Xmipp easyblock for new version (v3.20.07) ( `#2486 <https://github.com/easybuilders/easybuild-easyblocks/pull/2486> `_ ) * enhance FFTW easyblock to skip tests if ``--mpi-tests`` EasyBuild configuration option is disabled ( `#2490 <https://github.com/easybuilders/easybuild-easyblocks/pull/2490> `_ ) * use ``PYPI_SOURCE`` as the default for ``source_urls`` of extensions of Python easyconfigs ( `#2493 <https://github.com/easybuilders/easybuild-easyblocks/pull/2493> `_ ) * various bug fixes, including: * only use siterc fix for NVHPC < 21.3 ( `#2453 <https://github.com/easybuilders/easybuild-easyblocks/pull/2453> `_ ) * fix CPU-only runtime for dpcpp-generated executables in custom easyblock for intel-compilers ( `#2457 <https://github.com/easybuilders/easybuild-easyblocks/pull/2457> `_ ) * always add ``distinct_host_configuration=false`` to build command for TensorFlow ( `#2459 <https://github.com/easybuilders/easybuild-easyblocks/pull/2459> `_ ) * disable installation of bundled BioPerl and HTSLib if they are dependencies of VEP ( `#2468 <https://github.com/easybuilders/easybuild-easyblocks/pull/2468> `_ ) * don't use list value for command to detect installed Python packages in TensorFlow easyblock ( `#2469 <https://github.com/easybuilders/easybuild-easyblocks/pull/2469> `_ ) * change Bundle easyblock to also collect ``altroot`` and ``altversion`` in the module step so they are set when running ``--module-only`` ( `#2485 <https://github.com/easybuilders/easybuild-easyblocks/pull/2485> `_ ) * always strip output from ``gcc -print-multiarch`` in intel-compilers easyblock ( `#2489 <https://github.com/easybuilders/easybuild-easyblocks/pull/2489> `_ ) * don't overwrite all of ``exts_default_options`` in TensorFlow easyblock ( `#2494 <https://github.com/easybuilders/easybuild-easyblocks/pull/2494> `_ ) * enhance GCC easyblock to make sure that system GCC provides LTO support, and disable LTO when building MPFR if not ( `#2498 <https://github.com/easybuilders/easybuild-easyblocks/pull/2498> `_ ) * rework the dependency handling of OpenMPI to use explicit configure options to disable features if required dependency is not provided ( `#2500 <https://github.com/easybuilders/easybuild-easyblocks/pull/2500> `_ , `#2501 <https://github.com/easybuilders/easybuild-easyblocks/pull/2501> `_ ) **easyconfigs** * added example easyconfig files for 39 new software packages: * AMPHORA2 ( `#13003 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13003> `_ ), AOMP ( `#12909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12909> `_ ), CAMPARI ( `#13152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13152> `_ ), CSB ( `#12877 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12877> `_ ), dijitso ( `#10719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10719> `_ ), DosageConvertor ( `#13278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13278> `_ ), dSFMT ( `#12971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12971> `_ ), exiv2 ( `#13204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13204> `_ ), FEniCS ( `#10719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10719> `_ ), FreeFEM ( `#9902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9902> `_ ), futhark ( `#12921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12921> `_ ), futile ( `#12864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12864> `_ ), gappa ( `#13186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13186> `_ ), GenomeWorks ( `#13083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13083> `_ , `#13092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13092> `_ ), gexiv2 ( `#13204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13204> `_ ), HAL ( `#13267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13267> `_ ), hipify-clang ( `#12961 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12961> `_ ), inline ( `#12029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12029> `_ ), libcint ( `#13214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13214> `_ ), LTR_retriever ( `#13125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13125> `_ ), mapDamage ( `#13172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13172> `_ ), MbedTLS ( `#13061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13061> `_ ), microctools ( `#13010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13010> `_ ), Nektar++ ( `#12664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12664> `_ ), NINJA ( `#13125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13125> `_ ), OBITools3 ( `#12969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12969> `_ ), ont-fast5-api ( `#13033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13033> `_ ), OpenMM-PLUMED ( `#13268 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13268> `_ ), phototonic ( `#13241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13241> `_ ), PyFoam ( `#12675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12675> `_ ), RagTag ( `#13247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13247> `_ ), RcppGSL ( `#13172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13172> `_ ), RECON ( `#13123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13123> `_ ), RepeatScout ( `#13124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13124> `_ ), retworkx ( `#13228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13228> `_ ), UCX-CUDA ( `#13260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13260> `_ ), unimap ( `#13247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13247> `_ ), Vala ( `#13204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13204> `_ ), WhatsHap ( `#12989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12989> `_ ) * added additional easyconfigs for various supported software packages, including: * Amber 20.11, BBMap 38.90, Beast 2.6.4, BLIS 3.0 (AMDo fork), Bonito 0.4.0, CellRanger-ARC 2.0.0, CellRanger-ATAC 2.0.0, Check 0.15.2, CubeGUI 4.6, CubeLib 4.6, CubeWriter 4.6, cuDNN 8.2.1.32, CVXOPT 1.2.6, DOLFIN 2019.1.0.post0, eggnog-mapper 2.1.4, ELPA 2021.05.001, FDS 6.7.6, FFC 2019.1.0.post0, FFmpeg 4.3.2, FIAT 2019.1.0, flatbuffers 2.0.0, flatbuffers-python 2.0, FLTK 1.3.6, gc 8.0.4, GCC 8.4.0 + 9.4.0, GDAL 3.3.0, Gdk-Pixbuf 2.42.6, geopy 2.1.0, Ghostscript 9.54.0, git 2.32.0, GitPython 3.1.18, GLFW 3.3.4, gmsh 4.8.4, gnuplot 5.4.2, GnuTLS 3.7.2, Go 1.16.5, GObject-Introspection 1.68.0, gperftools 2.9.1, GraphicsMagick 1.3.36, Graphviz 2.47.2, GSL 2.7, GTK+ 2.24.33, Guile 2.2.7, h5py 3.2.1, HarfBuzz 2.8.1, Horovod 0.22.0, Hypre 2.21.0, ICU 69.1, ImageMagick 7.0.11-14, IOR 3.3.0, IPython 7.25.0, IRkernel 1.2, ispc 1.16.0, JupyterLab 3.0.16, LDC 1.26.0, libcerf 1.17, libepoxy 1.5.8, libgd 2.3.1, libStatGen 1.0.15, libxc 5.1.5, LittleCMS 2.12, LMfit 1.0.2, Lua 5.4.3, M4 1.4.19, MCR R2021a.3, medaka 1.4.3, Mercurial 5.8, minimap2 2.20, MMseqs2 13, MrBayes 3.2.7, MUMPS 5.4.0, NCCL 2.9.9, netCDF 4.8.0, Nim 1.4.8, nodejs 14.17.0, Nsight-Compute 2021.2.0, numba 0.53.1, NVHPC 21.5.eb, nvtop 1.2.1, Octave 6.2.0, OPARI2 2.0.6, openkim-models 20210128, OpenMPI 4.0.6, OTF2 2.3, p11-kit 0.24.0, Pango 1.48.5, parallel 20210622, petsc4py 3.12.0, picard 2.25.5, Pillow 8.2.0, PROJ 8.0.1, protobuf 3.17.3, protobuf-python 3.17.3, PSolver 1.8.3, PySCF 1.7.6, pyspoa 0.0.8, pytest-xdist 2.3.0, PyTorch 1.9.0, PyYAML 5.4.1, Qhull 2020.2, Quandl 3.6.1, R 4.0.5 + R 4.1.0, Ragout 2.3, RE2 2021-06-01, ReFrame 3.6.2, RepeatMasker 4.1.2, rgdal 1.5-23, RMBlast 2.11.0, Ruby 3.0.1, scikit-learn 0.24.2, Score-P 7.0, Seurat 4.0.3, slepc4py 3.12.0, spoa 4.0.7, Subread 2.0.2, Subversion 1.14.1, SuiteSparse 5.10.1, sympy 1.8, tensorboardX 2.2, TensorFlow 2.5.0, Tk 8.6.11, tmux 3.2a, torchtext 0.8.1, torchvision 0.9.1, UDUNITS 2.2.28, UFL 2019.1.0, utf8proc 2.6.1, VEP 103.1, VMD 1.9.4a51, vsc-mympirun 5.2.6, XCFun 2.1.1, Xvfb 1.20.11, Z3 4.8.11, ZeroMQ 4.3.4 * minor enhancements, including: * update cuDNN 8.0.x easyconfigs with a download location ( `#12368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12368> `_ ) * add extensions to recent R easyconfigs: GxEScanR ( `#13039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13039> `_ ), cSEM ( `#13208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13208> `_ ), cubelyr + broom.mixed ( `#13252 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13252> `_ ), grf ( `#13261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13261> `_ ), twang + xgboost ( `#13284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13284> `_ ), neuralnet ( `#13330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13330> `_ ) * add check to easyconfigs test suite to ensure OpenSSL wrapper is used in easyconfigs using a recent toolchain ( `#13079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13079> `_ ) * add gipaw to QuantumESPRESSO/6.7 ( `#13087 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13087> `_ ) * add checksum for aarch64 installation file for CUDAcore easyconfigs ( `#13014 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13014> `_ , `#13097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13097> `_ ) * add Perl dependency to makeinfo easyconfigs ( `#13166 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13166> `_ ) * set minimal OpenSSL version to 1.1.1 for OpenSSL v1.1 wrapper ( `#13188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13188> `_ ) * add JIT support for CUDA 11 to PyTorch 1.7.1 ( `#13207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13207> `_ ) * add ``ninja --version`` as sanity check command in Ninja easyconfigs ( `#13222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13222> `_ ) * code cleanup + improvements for easyconfigs test suite ( `#13257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13257> `_ ) * various bug fixes, including: * download sources via git for XGBoost 20171120 easyconfig due to use of submodules ( `#6880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6880> `_ ) * add elfutils as build dependency for Clang 8.0.x and 9.0.1 ( `#13015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13015> `_ ) and Clang 11.0.1 ( `#13008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13008> `_ ) easyconfigs that have a CUDA dependency * add missing CMake option to Geant4 v10.7.1 in order to actually use external CLHEP ( `#13019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13019> `_ ) * add new checksum for mvabund extension to R v4.0.4 eaysconfigs ( `#13020 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13020> `_ , `#13021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13021> `_ ) * add patch to fix numpy ``test_ccompiler_opt`` in SciPy-bundle v2021.05 ( `#13042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13042> `_ ) * add patch to fix installation of HDF 4.2.15 on aarch64 ( `#13059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13059> `_ ) * make sure that MbedTLS' Makefile uses ``python`` rather than ``python2`` ( `#13061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13061> `_ ) * fix checksum for snpEff 5.0 ( `#13062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13062> `_ ) * fix source URL for LIBSVM 3.24 by downloading from GitHub ( `#13076 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13076> `_ ) * add ``preinstallopts`` for minimap2 to fix installation on aarch64 ( `#13080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13080> `_ ) * add patch for GCC 10.2.0 to fix internal compiler error on aarch64 ( `#13086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13086> `_ ) * switch to NCCL 2.8.3 built from source for CuPy, Horovod, libgpuarray, PyTorch and TensorFlow using fosscuda/2020b ( `#13103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13103> `_ ) * add astor to dependencies of TensorFlow with 2019b ( `#13111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13111> `_ ) and 2020b ( `#13103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13103> `_ , `#13112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13112> `_ ) toolchains * break cyclic dependency between groff, makeinfo and Perl by adding Perl-minimal and makeinfo-minimal easyconfigs ( `#13163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13163> `_ - `#13165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13165> `_ ) * add missing rgdal dep to R-INLA ( `#13179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13179> `_ ) * add patch to fix ``uniq`` operation in TensorFlow 2.4.1 ( `#13181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13181> `_ ) * add Perl build dependency for PnetCDF 1.12.1 ( `#13183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13183> `_ ) * disable own avx detection of libfabric v1.12.1 ( `#13215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13215> `_ ) * add GCCcore-[1-9][0-9].x to ``test_dep_versions_per_toolchain_generation`` ( `#13243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13243> `_ , `#13249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13249> `_ , `#13251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13251> `_ ) * add patch to fix installation of TensorFlow 2.0.x ( `#13248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13248> `_ ) * add patch for recent GCCcore versions to fix compatibility with CUDA 11 ( `#13290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13290> `_ ) * fix install step for glew ( `#13297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13297> `_ ) * update Boost 1.74.0 easyconfigs to use ``tagged_layout`` rather than ``boost_multi_thread`` ( `#13300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13300> `_ ) * avoid using PMIx from system instead of PMIx dependency specified via ``--with-pmix`` for OpenMPI 4.x ( `#13307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13307> `_ ) * add patch for GCCcore 10.3.0 to prevent issues when compiling with nvcc ( `#13310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13310> `_ ) * add patch for OpenMPI 4.0.x to fix building against (system) UCX version > 1.7 ( `#13329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13329> `_ ) * fix build of manta 1.6.0 on top of Boost 1.74.0 ( `#13338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13338> `_ ) * fix recent taxator-tk easyconfigs by adding (back) ``-DBoost_NO_BOOST_CMAKE=ON`` configure option ( `#13342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13342> `_ ) * other changes: * disable ``debuginfod`` for elfutils to minimize required dependencies ( `#13034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13034> `_ ) * add bare Python 3.9.5 easyconfig and use that as builddep for LLVM 11.1.0 ( `#13035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13035> `_ ) * remove misleading comment from Python >= 3.7 easyconfigs, libffi is now also required for Python itself (no longer bundled) ( `#13041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13041> `_ ) * use new custom easyblock in torchvision easyconfigs ( `#13102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13102> `_ ) * remove superfluous TensorFlow patch ( `#13223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13223> `_ ) * cleanup of easyconfigs for (bundles) of Python packages: remove default ``PYPI_SOURCE`` source URLs + use ``PythonBundle`` rather than ``Bundle`` easyblock ( `#13253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13253> `_ , `#13295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13295> `_ , `#13336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13336> `_ ) * update ``README`` with instructions for MATLAB easyconfigs ( `#12597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12597> `_ ) .. _release_notes_eb440: EasyBuild v4.4.0 (June 2nd 2021) -------------------------------- feature release **framework** * various enhancements, including: * enhance ``apply_regex_substitutions`` to allow specifying action to take in case there are no matches ( `#3440 <https://github.com/easybuilders/easybuild-framework/pull/3440> `_ ) * performance improvements for easyconfig parsing and eb startup ( `#3555 <https://github.com/easybuilders/easybuild-framework/pull/3555> `_ ) * add support for downloading easyconfigs from multiple PRs with ``--from-pr`` ( `#3605 <https://github.com/easybuilders/easybuild-framework/pull/3605> `_ , `#3707 <https://github.com/easybuilders/easybuild-framework/pull/3707> `_ , `#3708 <https://github.com/easybuilders/easybuild-framework/pull/3708> `_ ) * add support for prepending custom library paths in RPATH section via ``--rpath-override-dirs`` ( `#3650 <https://github.com/easybuilders/easybuild-framework/pull/3650> `_ ) * allow amending easyconfig parameters which are not the default ( `#3651 <https://github.com/easybuilders/easybuild-framework/pull/3651> `_ ) * update HierarchicalMNS for Intel OneAPI compilers ( `#3653 <https://github.com/easybuilders/easybuild-framework/pull/3653> `_ ) * add support for ``--sanity-check-only`` ( `#3655 <https://github.com/easybuilders/easybuild-framework/pull/3655> `_ ) * add support for running commands asynchronously via ``run_cmd`` + ``complete_cmd`` functions ( `#3656 <https://github.com/easybuilders/easybuild-framework/pull/3656> `_ ) * add support for using oneAPI versions of 'intel' toolchain components ( `#3665 <https://github.com/easybuilders/easybuild-framework/pull/3665> `_ ) * add toolchain definition for gofbf (foss with FlexiBLAS rather than OpenBLAS) ( `#3666 <https://github.com/easybuilders/easybuild-framework/pull/3666> `_ ) * add support for using ``ARCH`` constant in easyconfig files ( `#3670 <https://github.com/easybuilders/easybuild-framework/pull/3670> `_ ) * honor keyboard interrupt in ``eb`` command ( `#3674 <https://github.com/easybuilders/easybuild-framework/pull/3674> `_ ) * add toolchain definition for Fujitsu toolchain ( `#3677 <https://github.com/easybuilders/easybuild-framework/pull/3677> `_ , `#3704 <https://github.com/easybuilders/easybuild-framework/pull/3704> `_ , `#3712 <https://github.com/easybuilders/easybuild-framework/pull/3712> `_ , `#3713 <https://github.com/easybuilders/easybuild-framework/pull/3713> `_ , `#3714 <https://github.com/easybuilders/easybuild-framework/pull/3714> `_ , `#3717 <https://github.com/easybuilders/easybuild-framework/pull/3717> `_ ) * extend sanity check step to check whether specific libraries are not linked into installed binaries/libraries ( `#3678 <https://github.com/easybuilders/easybuild-framework/pull/3678> `_ ) * via ``banned-linked-shared-libs`` and ``required-linked-shared-libs`` EasyBuild configuration options * via ``banned_linked_shared_libs`` and ``required_linked_shared_libs`` methods in toolchain support * via ``banned_linked_shared_libs`` and ``required_linked_shared_libs`` methods in easyblock * via ``banned_linked_shared_libs`` and ``required_linked_shared_libs`` easyconfig parameters * add ``locate_solib`` function to locate Linux shared libraries ( `#3682 <https://github.com/easybuilders/easybuild-framework/pull/3682> `_ ) * add system agnostic function to locate shared libraries ( `#3683 <https://github.com/easybuilders/easybuild-framework/pull/3683> `_ ) * add ``update_build_option`` function to update specific build options after initializing the EasyBuild configuration ( `#3684 <https://github.com/easybuilders/easybuild-framework/pull/3684> `_ ) * allow opting out of recursively unloaded of modules via recursive_module_unload easyconfig parameter ( `#3689 <https://github.com/easybuilders/easybuild-framework/pull/3689> `_ ) * check for correct version values when parsing easystack file ( `#3693 <https://github.com/easybuilders/easybuild-framework/pull/3693> `_ ) * run post-install commands specified for a specific extension ( `#3696 <https://github.com/easybuilders/easybuild-framework/pull/3696> `_ ) * add support for ``--skip-extensions`` ( `#3702 <https://github.com/easybuilders/easybuild-framework/pull/3702> `_ ) * include PR title in output produced by ``--merge-pr`` ( `#3706 <https://github.com/easybuilders/easybuild-framework/pull/3706> `_ ) * various bug fixes, including: * avoid metadata greedy behaviour when probing for external module metadata (mostly relevant for integration with Cray Programming Environment) ( `#3559 <https://github.com/easybuilders/easybuild-framework/pull/3559> `_ ) * catch problems early on if ``--github-user`` is not specified for ``--new-pr`` & co ( `#3644 <https://github.com/easybuilders/easybuild-framework/pull/3644> `_ ) * re-enable write permissions when installing with ``read-only-installdir`` ( `#3649 <https://github.com/easybuilders/easybuild-framework/pull/3649> `_ ) * also run sanity check for extensions when using ``--module-only`` ( `#3655 <https://github.com/easybuilders/easybuild-framework/pull/3655> `_ ) * improve logging when failing to load class from ``exts_classmap`` ( `#3657 <https://github.com/easybuilders/easybuild-framework/pull/3657> `_ ) * fix use of ``--module-only`` on existing installations without write permissions ( `#3659 <https://github.com/easybuilders/easybuild-framework/pull/3659> `_ ) * correct help text for ``subdir-user-modules`` ( `#3660 <https://github.com/easybuilders/easybuild-framework/pull/3660> `_ ) * avoid picking up easyblocks outside of sandbox in framework tests ( `#3680 <https://github.com/easybuilders/easybuild-framework/pull/3680> `_ ) * use unload/load in ``ModuleGeneratorLua.swap_module`` , since ``swap`` is not supported by Lmod ( `#3685 <https://github.com/easybuilders/easybuild-framework/pull/3685> `_ ) * update HierarchicalMNS to also return 'Toolchain/<name>/<version>' as ``$MODULEPATH`` extension for cpe* Cray toolchains ( `#3686 <https://github.com/easybuilders/easybuild-framework/pull/3686> `_ ) * make ``EasyConfigParser.get_config_dict`` return a copy rather than a reference ( `#3692 <https://github.com/easybuilders/easybuild-framework/pull/3692> `_ ) * make sure that ``$TAPE`` is unset when using piped tar ( `#3698 <https://github.com/easybuilders/easybuild-framework/pull/3698> `_ ) * fix extending message for changed files in ``new_pr_from_branch`` ( `#3699 <https://github.com/easybuilders/easybuild-framework/pull/3699> `_ ) * enhance ``sched_getaffinity`` function to avoid early crash when counting available cores on systems with more than 1024 cores ( `#3701 <https://github.com/easybuilders/easybuild-framework/pull/3701> `_ ) * correctly strip extension from filename in ``extract_cmd`` and ``back_up_file`` functions ( `#3705 <https://github.com/easybuilders/easybuild-framework/pull/3705> `_ ) * other changes: * deprecate adding a non-existing path to ``$MODULEPATH`` ( `#3637 <https://github.com/easybuilders/easybuild-framework/pull/3637> `_ ) * bump cryptography requirement from 3.2.1 to 3.3.2 ( `#3643 <https://github.com/easybuilders/easybuild-framework/pull/3643> `_ , `#3648 <https://github.com/easybuilders/easybuild-framework/pull/3648> `_ ) * test bootstrap script in separate workflow, and limit test configurations a bit ( `#3646 <https://github.com/easybuilders/easybuild-framework/pull/3646> `_ ) * update ``setup.py`` to indicate compatibility with Python 3.8 and 3.9 ( `#3647 <https://github.com/easybuilders/easybuild-framework/pull/3647> `_ ) * replace ``log_error`` parameter of ``which()`` by ``on_error`` ( `#3661 <https://github.com/easybuilders/easybuild-framework/pull/3661> `_ , `#3664 <https://github.com/easybuilders/easybuild-framework/pull/3664> `_ ) * don't skip sanity check for ``--module-only --rebuild`` ( `#3645 <https://github.com/easybuilders/easybuild-framework/pull/3645> `_ ) * move ``disable_templating`` function into the EasyConfig class ( `#3668 <https://github.com/easybuilders/easybuild-framework/pull/3668> `_ ) * pin GitPython version for Python<3.6, don't test bootstrap script against Python 3.8/3.9 ( `#3675 <https://github.com/easybuilders/easybuild-framework/pull/3675> `_ ) * tweak foss toolchain definition to switch from OpenBLAS to FlexiBLAS in foss/2021a ( `#3679 <https://github.com/easybuilders/easybuild-framework/pull/3679> `_ ) * suggest missing SSH key when not able to read from remote repository in ``--check-github`` ( `#3681 <https://github.com/easybuilders/easybuild-framework/pull/3681> `_ ) * drop support for Python 2.6 ( `#3715 <https://github.com/easybuilders/easybuild-framework/pull/3715> `_ ) **easyblocks** * 3 new software-specific easyblocks: * FlexiBLAS ( `#2369 <https://github.com/easybuilders/easybuild-easyblocks/pull/2369> `_ , `#2422 <https://github.com/easybuilders/easybuild-easyblocks/pull/2422> `_ , `#2424 <https://github.com/easybuilders/easybuild-easyblocks/pull/2424> `_ , `#2426 <https://github.com/easybuilders/easybuild-easyblocks/pull/2426> `_ ) * dm-reverb ( `#2413 <https://github.com/easybuilders/easybuild-easyblocks/pull/2413> `_ ) * custom easyblock to install OpenSSL wrapper for OpenSSL installed in OS, with fallback to build and install OpenSSL from source if not available in OS ( `#2429 <https://github.com/easybuilders/easybuild-easyblocks/pull/2429> `_ ) * minor enhancements, including: * also add ``-pthread`` to ``prebuildopts`` of cryptography ( `#2270 <https://github.com/easybuilders/easybuild-easyblocks/pull/2270> `_ ) * don't unpack Python wheel (*.whl) files by default in generic PythonPackage easyblock ( `#2366 <https://github.com/easybuilders/easybuild-easyblocks/pull/2366> `_ , `#2442 <https://github.com/easybuilders/easybuild-easyblocks/pull/2442> `_ ) * enable installation of samples for CUDA > 10.1 ( `#2374 <https://github.com/easybuilders/easybuild-easyblocks/pull/2374> `_ ) * add option to disable pip connecting to PyPi (enable use of ``--no-index`` ) ( `#2390 <https://github.com/easybuilders/easybuild-easyblocks/pull/2390> `_ ) * update MotionCor2 easyblock to handle new version and be aware of CUDAcore ( `#2394 <https://github.com/easybuilders/easybuild-easyblocks/pull/2394> `_ ) * make it possible to force disabling kernel features in Qt easyblock ( `#2403 <https://github.com/easybuilders/easybuild-easyblocks/pull/2403> `_ ) * update imkl easyblock to support oneAPI versions (>= 2021.x) ( `#2407 <https://github.com/easybuilders/easybuild-easyblocks/pull/2407> `_ ) * add ``\"gurobi_cl --help`` as default sanity check command for Gurobi ( `#2411 <https://github.com/easybuilders/easybuild-easyblocks/pull/2411> `_ ) * enhance BWA easyblock to copy includes and libraries ( `#2417 <https://github.com/easybuilders/easybuild-easyblocks/pull/2417> `_ ) * allow ``default`` versions to be defined by ModuleRC easyblock ( `#2418 <https://github.com/easybuilders/easybuild-easyblocks/pull/2418> `_ ) * enhance MesonNinja and CMakeMake easyblocks to create unused build dir when ``separate_build_dir`` is set ( `#2419 <https://github.com/easybuilders/easybuild-easyblocks/pull/2419> `_ ) * enable ``sanity_pip_check`` by default for Python easyconfigs if pip >= 9.0 will be installed ( `#2423 <https://github.com/easybuilders/easybuild-easyblocks/pull/2423> `_ ) * enhance FFTW easyblock to support SVE CPU feature and building with Fujitsu compiler ( `#2425 <https://github.com/easybuilders/easybuild-easyblocks/pull/2425> `_ ) * make ScaLAPACK easyblock aware of FlexiBLAS ( `#2427 <https://github.com/easybuilders/easybuild-easyblocks/pull/2427> `_ ) * update imkl easyblock to unpack example tarballs and set ``$MKL_EXAMPLES`` (+ some code cleanup) ( `#2430 <https://github.com/easybuilders/easybuild-easyblocks/pull/2430> `_ ) * update list of system libs for TensorFlow 2.5 ( `#2432 <https://github.com/easybuilders/easybuild-easyblocks/pull/2432> `_ ) * allow disabling MPI tests when installing Intel MPI (impi) via ``--disable-mpi-tests`` ( `#2440 <https://github.com/easybuilders/easybuild-easyblocks/pull/2440> `_ ) * exclude bottleneck tests in PyTorch ( `#2450 <https://github.com/easybuilders/easybuild-easyblocks/pull/2450> `_ ) * various bug fixes, including: * ensure lib subdirectory is found in stage 2 of GCC installation + fall back to lib64 ( `#2339 <https://github.com/easybuilders/easybuild-easyblocks/pull/2339> `_ ) * fix permission on MATLAB installer config file so it can be written to ( `#2385 <https://github.com/easybuilders/easybuild-easyblocks/pull/2385> `_ ) * fix problem with installing older CUDA versions that uses the Perl based installer ( `#2387 <https://github.com/easybuilders/easybuild-easyblocks/pull/2387> `_ ) * enhance Python easyblock: add option to install pip with core Python, tweak defaults, create unversioned pip symlink ( `#2388 <https://github.com/easybuilders/easybuild-easyblocks/pull/2388> `_ ) * fix ``installopts`` before installing the extension in GROMACS easyblock ( `#2391 <https://github.com/easybuilders/easybuild-easyblocks/pull/2391> `_ ) * updated numpy easyblock to use ``read_file`` for patch ( `#2395 <https://github.com/easybuilders/easybuild-easyblocks/pull/2395> `_ ) * use explicit build toolset and compiler path in Boost easyblock ( `#2402 <https://github.com/easybuilders/easybuild-easyblocks/pull/2402> `_ ) * replace hardcoded ``2021.1.1`` with ``self.version`` in impi easyblock ( `#2405 <https://github.com/easybuilders/easybuild-easyblocks/pull/2405> `_ ) * set ``$SANDCASTLE`` when running PyTorch tests to disable some tests as-if we are on Facebook's CI ( `#2412 <https://github.com/easybuilders/easybuild-easyblocks/pull/2412> `_ ) * make GROMACS easyblock work with ``--module-only`` ( `#2414 <https://github.com/easybuilders/easybuild-easyblocks/pull/2414> `_ ) * make sure OpenFOAM sanity checks don't require builddir write permissions ( `#2415 <https://github.com/easybuilders/easybuild-easyblocks/pull/2415> `_ ) * make Tkinter easyblock work with ``--module-only`` ( `#2416 <https://github.com/easybuilders/easybuild-easyblocks/pull/2416> `_ ) * also disable altivec with FFTW 3.3.9 on POWER ( `#2437 <https://github.com/easybuilders/easybuild-easyblocks/pull/2437> `_ ) * make sure that ``self.python_cmd`` is set before using it in ``PythonPackage.sanity_check_step`` ( `#2447 <https://github.com/easybuilders/easybuild-easyblocks/pull/2447> `_ ) * other changes, including: * update ``setup.py`` to indicate compatibility with Python 3.8 and 3.9 ( `#2384 <https://github.com/easybuilders/easybuild-easyblocks/pull/2384> `_ ) * use ``on_error`` rather than deprecated ``log_error`` named argument for ``which`` function ( `#2406 <https://github.com/easybuilders/easybuild-easyblocks/pull/2406> `_ ) * remove ``cuda_compute_capabilities`` from custom easyconfig parameters for Clang, LAMMPS and TensorFlow (now supported as general easyconfig parameter) ( `#2433 <https://github.com/easybuilders/easybuild-easyblocks/pull/2433> `_ ) **easyconfigs** * added easyconfigs for new Fujitsu toolchain: FCC/4.5.0 ( `#12999 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12999> `_ , `#12995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12995> `_ , `#13007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13007> `_ ), ffmpi/4.5.0 ( `#13000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13000> `_ ) and Fujitsu/21.05 ( `#13001 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13001> `_ , `#13007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13007> `_ ) * add easyconfigs for updates of common toolchains: foss/2021a ( `#12867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12867> `_ , `#12975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12975> `_ ), intel/2021a ( `#12885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12885> `_ , `#12975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12975> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added easyconfig for gomkl/2021a toolchain ( `#12987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12987> `_ ) * added example easyconfig files for 58 new software packages: * Archive-Zip ( `#12651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12651> `_ ), BirdNET ( `#12737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12737> `_ , `#12712 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12712> `_ , `#12737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12737> `_ ), cell2location ( `#12448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12448> `_ ), cryoDRGN ( `#12704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12704> `_ ), dm-reverb ( `#12824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12824> `_ ), DROP ( `#12559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12559> `_ , `#12801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12801> `_ , `#12950 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12950> `_ ), fastahack ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), fermi-lite ( `#12856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12856> `_ ), filevercmp ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), FlexiBLAS ( `#12476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12476> `_ ), freetype-py ( `#12918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12918> `_ ), fsom ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), garnett ( `#12529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12529> `_ ), gawk ( `#12716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12716> `_ ), gemmi ( `#12855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12855> `_ ), georges ( `#12570 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12570> `_ ), hifiasm ( `#12897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12897> `_ ), intervaltree ( `#12838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12838> `_ ), LDC ( `#12671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12671> `_ ), libidn2 ( `#12670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12670> `_ ), librosa ( `#10477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10477> `_ ), librsb ( `#12780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12780> `_ ), line_profiler ( `#12556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12556> `_ ), loompy ( `#12804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12804> `_ ), mmtf-cpp ( `#12580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12580> `_ ), mongolite ( `#12632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12632> `_ ), msgpack-c ( `#12580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12580> `_ ), multichoose ( `#12839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12839> `_ ), networkTools ( `#12810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12810> `_ ), NewHybrids ( `#12528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12528> `_ ), Octopus-vcf ( `#12598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12598> `_ ), onedrive ( `#12671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12671> `_ ), p4-phylogenetics ( `#12549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12549> `_ ), pagmo ( `#12678 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12678> `_ ), pyfaidx ( `#12872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12872> `_ ), pyfasta ( `#12952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12952> `_ ), pygmo ( `#12678 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12678> `_ ), pysheds ( `#12791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12791> `_ ), R-INLA ( `#12955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12955> `_ , `#12927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12927> `_ , `#12955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12955> `_ ), RegTools ( `#12874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12874> `_ ), request ( `#12448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12448> `_ ), rMATS-turbo ( `#12982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12982> `_ ), scanpy ( `#12731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12731> `_ ), SeqLib ( `#12856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12856> `_ ), SeuratData ( `#12993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12993> `_ ), SeuratWrappers ( `#12994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12994> `_ ), smithwaterman ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), snp-sites ( `#12900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12900> `_ ), SSW ( `#12856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12856> `_ ), tabixpp ( `#12837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12837> `_ ), TagDust ( `#11599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11599> `_ ), TALON ( `#12963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12963> `_ ), tMAE ( `#12559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12559> `_ ), TranscriptClean ( `#12952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12952> `_ ), umap-learn ( `#12448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12448> `_ ), vcflib ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), xESMF ( `#12799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12799> `_ ), XlsxWriter ( `#12820 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12820> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 9.4.1, apex 20210420, astropy 4.2.1, binutils 2.36.1, BLIS 0.8.1, Bonito 0.3.8, BUSCO 5.1.2, canu 2.1.1, carputils 20210513, CastXML 0.4.3, ccache 4.2.1, CDO 1.9.10, CIRCexplorer2 2.3.8, CLHEP 2.4.4.0, CMake 3.20.1, CNVkit 0.9.8, CUDA(core) 11.3.0, CuPy 8.5.0, cURL 7.76.0, DFA 2.1.2, Doxygen 1.9.1, Eigen 3.3.9, FastANI 1.33, FFTW 3.3.9, GATK 4.2.0.0, GCC 10.3.0 + 11.1.0, GDB 10.2, gdc-client 1.6.0, GDRCopy 2.2, Geant4 10.7.1, Geant4-data 20210510, GeneMark-ET 4.65, glew 2.2.0, GLib 2.68.2, GLPK 5.0, GMP 6.2.1, Go 1.16.3, Graphviz 2.47.0, GROMACS 2021.2, GStreamer 1.18.4, GTDB-Tk 1.5.0, Gurobi 9.1.2, HMMER 3.3.2, Horovod 0.21.3, hwloc 2.4.1, hypothesis 6.13.1, IGV 2.9.4, impi 2021.2.0, imkl 2021.2.0, intel-compilers 2021.2.0, JasPer 2.0.28, Julia 1.6.1, Kraken2 2.1.1, KronaTools 2.8, libarchive 3.5.1, libdeflate 1.7, libdrm 2.4.106, libfabric 1.12.1, libreadline 8.1, libRmath 4.0.0, libsndfile 1.0.31, LIBSVM 3.24, LibTIFF 4.2.0, libunwind 1.5.0, libwebp 1.2.0, LLVM 11.1.0, LMDB 0.9.28, LUMPY 0.3.1, lz4 1.9.3, Mako 1.1.4, MATLAB 2021a, Mesa 21.1.1, meshalyzer 2.2, Meson 0.58.0, MetaBAT 2.15, metaWRAP 1.3, minimap2 2.18, Molden 6.8, MotionCor2 1.4.2, ncview 2.1.8, NetPIPE 5.1.4, nettle 3.7.2, NiBabel 3.2.1, Nilearn 0.7.1, Nim 1.4.6, Ninja 1.10.2, NLopt 2.7.0, NSS 3.65, numactl 2.0.14, NWChem 7.0.2, OpenBLAS 0.3.15, openCARP 6.0, OpenEXR 3.0.1, OpenMM 7.5.0, OpenMPI 4.1.1, OpenSSL 1.1 (wrapper), OSU-Micro-Benchmarks 5.7.1, Pandoc 2.13, parallel 20210322, parasail 2.4.3, PAUP 4.0a168, PCRE2 10.36, Perl 5.32.1, pigz 2.6, PMIx 3.2.3, Primer3 2.5.0, PRSice 2.3.3, py-aiger 6.1.14, pybind11 2.6.2, PyCharm 2021.1.1, pydot 1.4.2, pyproj 3.0.1, PySAT 0.1.7.dev1, PyTorch 1.8.1, python-parasail 1.2.4, Pylint 2.7.4, Python 3.9.5, Qt5 5.15.2, R-keras 2.4.0, rasterio 1.2.3, RAxML-NG 1.0.2, rclone 1.54.1, re2c 2.1.1, ReFrame 3.5.2, Rmath 4.0.4, Rust 1.52.1, Sambamba 0.8.0, samblaster 0.1.26, samclip 0.4.0, scikit-allel 1.3.2, SciPy-bundle 2021.05, SCons 4.1.0.post1, snakemake 6.1.0, SQLite 3.35.4, SRPRISM 3.1.2, Tcl 8.6.11, TCLAP 1.2.4, tmux 3.2, tqdm 4.60.0, UCX 1.10.0, Valgrind 3.17.0, WannierTools 2.5.1, wget 1.21.1, wxWidgets 3.1.4, X11 20210518, x264 20210414, x265 3.5, xorg-macros 1.19.3, YAXT 0.9.0, zarr 2.8.1, zstd 1.4.9 * minor enhancements, including: * add additional extensions to R v4.0.3 and v4.0.4: miceadds, visdat, UpSetR, naniar, stringdist, image.binarization ( `#12735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12735> `_ ), lassosum ( `#12821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12821> `_ ), lslx, regsem, semPLS ( `#13005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13005> `_ ) * add GenABEL to R-bundle-Bioconductor ( `#12822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12822> `_ ) * various bug fixes, including: * disable automatic acceptance of NVHPC EULA ( `#12014 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12014> `_ ) * enhance RStudio-Server, add patch to inherit environment variables, add sanity check commands to verify installation ( `#12544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12544> `_ ) * add fix to scipy to handle ``NaN`` arguments to ``vi`` function ( `#12551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12551> `_ ) * copy all binaries + examples & co for PAML v4.9j ( `#12567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12567> `_ ) * add patch to fix hardcoded ``num_cores`` in DMCfun extension included with R 4.0.x ( `#12583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12583> `_ ) * backport Charm++ patch for NAMD/2.14 on intel/2020a to handle newer glibc ( `#12594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12594> `_ ) * add setuptools_scm and pytest-runner extensions to Pylint easyconfigs ( `#12599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12599> `_ ) * fix typo in Delly easyconfig to actually do parallel build ( `#12633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12633> `_ ) * fix potential memory leak in OpenBLAS 0.3.12 ( `#12649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12649> `_ ) * consistently use pip to install Python packages in recent Python easyconfigs ( `#12650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12650> `_ ) * replace bintray source url for Groovy ( `#12652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12652> `_ ) * add missing Python & Perl dependencies to AUGUSTUS v3.4.0 with foss/2020b ( `#12662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12662> `_ ) * fix wget dependency: use libidn2 rather than libidn ( `#12670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12670> `_ ) * fix source URLs for recent ELPA versions ( `#12700 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12700> `_ ) * override host compiler check in CUDAcore ( `#12701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12701> `_ ) * add Python build dependency to libpsl 0.21.0 easyconfigs ( `#12715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12715> `_ ) * fix error in libgpg-error 1.36 with gawk builtin ( `#12716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12716> `_ ) * add libtool build dependency to leidenalg ( `#12741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12741> `_ ) * fix source URLs for Boost 1.71.0 - 1.74.0 easyconfigs ( `#12743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12743> `_ ) and Boost.Python ( `#12744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12744> `_ ) * add patches for PyTorch 1.7.1 avoiding failures on POWER and A100 ( `#12753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12753> `_ ) * add patch for OpenPGM 5.2.122 eaysconfigs to fix non-existent directory in *.pc (pkgconfig) file ( `#12774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12774> `_ ) * add missing Perl build dependency to recent wget easyconfigs ( `#12787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12787> `_ ) * make sure Python dependency is used in preCICE 2.x easyconfigs ( `#12793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12793> `_ ) * don't skip source step in FastTree easyconfigs + fix SHA256 checksum for FastTree 2.1.11 ( `#12794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12794> `_ ) * add patch for rhdf5filters extension in Bioconductor 3.12 bundle to fix installation on aarch64 ( `#12836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12836> `_ ) * add IceLake detection to OpenBLAS 0.3.12 and 0.3.15 ( `#12865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12865> `_ ) * fix checksum for MaxBin 2.2.7 ( `#12869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12869> `_ ) * run ``make clean`` before building FragGeneScan, to clean up object files included in source tarball ( `#12870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12870> `_ ) * clean up install of KronaTools ( `#12871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12871> `_ ) * add UCX dependency to OneAPI versions of impi ( `#12873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12873> `_ ) * correct description in libdeflate easyconfig ( `#12886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12886> `_ ) * override Makefile with hardcoded ``CC=cc`` in UnZip easyconfigs ( `#12887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12887> `_ ) * fix compatibility of FLAIR v1.5.1-20200630 with rpy2 v3.x ( `#12899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12899> `_ ) * fix test step for libxc 4.3.4 and 5.1.x when using RPATH linking ( `#12912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12912> `_ ) * fix source URLs in BLAST 2.10.x easyconfigs ( `#12914 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12914> `_ ) * add missing xproto build dependency to imake easyconfig ( `#12930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12930> `_ ) * add patch to fix GCC 10.2.0 rejecting valid code on PPC ( `#12948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12948> `_ ) * in easyconfig tests, check version of dependencies named Python, not if dependencies with certain versions are named Python ( `#12962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12962> `_ ) * update easyconfigs for binutils 2.35 to use binutils 2.35.2 source tarball instead to pick up bug fixes ( `#12967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12967> `_ , `#12988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12988> `_ ) * fix download URL for DB 18.1.40 ( `#12974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12974> `_ ) * fix test failure in TensorFlow 2.4.1 on recent CUDA drivers ( `#12979 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12979> `_ ) * fix error in ``configopts`` for netCDF and HDF5 and add missing dependencies of ABINIT 9.x ( `#12981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12981> `_ ) * add patch to fix buffer overflow in OpenMPI 4.1.x ( `#12983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12983> `_ ) * other changes: * update ``setup.py`` to indicate compatibility with Python 3.8 and 3.9 ( `#12565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12565> `_ ) * add ``-Java`` versionsuffix for Hadoop easyconfig using GCCcore/10.2.0 toolchain, since it depends on Java 1.8 ( `#12709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12709> `_ ) * remove unnecessary workaround for missing version of OpenDataCube and Spyder for 2020+ toolchains ( `#12757 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12757> `_ ) * remove ``unpack_sources = False`` from recent easyconfigs that use a *.whl file as source ( `#12783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12783> `_ ) * whitelist Seaborn 0.10.1 for NanoComp 1.13.1 and NanoPlot 1.33.0 ( `#12790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12790> `_ ) * add check to make sure that source step is not being skipped ( `#12807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12807> `_ ) * use ``EasyConfig.disable_templating`` method in test suite ( `#12848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12848> `_ ) * disable usNIC by default in libfabric to avoid problems due to linking to both libnl and libnl-3 ( `#12854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12854> `_ ) * use OpenSSL wrapper as dependency in easyconfigs using GCCcore/10.3.0 toolchain ( `#12922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12922> `_ , `#12944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12944> `_ ) * dump easyconfig before initializing easyblock in order to compare it with original easyconfig ( `#12925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12925> `_ ) * remove postinstallcmds from imkl 2020.x easyconfigs, easyblock now installs examples ( `#12937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12937> `_ ) .. _release_notes_eb434: EasyBuild v4.3.4 (Apr 9th 2021) ------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for filtering dependencies by using ``False`` as version ( `#3506 <https://github.com/easybuilders/easybuild-framework/pull/3506> `_ ) * add ``create_unused_dir`` function to create a directory which does not yet exist ( `#3551 <https://github.com/easybuilders/easybuild-framework/pull/3551> `_ ) * avoid running expensive ``module use`` and ``module unuse`` commands when using Lmod as modules tool, update ``$MODULEPATH`` directly instead ( `#3557 <https://github.com/easybuilders/easybuild-framework/pull/3557> `_ , `#3633 <https://github.com/easybuilders/easybuild-framework/pull/3633> `_ ) * create CUDA cache (for JIT compiled PTX code) in build dir instead of ``$HOME`` ( `#3569 <https://github.com/easybuilders/easybuild-framework/pull/3569> `_ ) * add \"Citing\" section to module files ( `#3596 <https://github.com/easybuilders/easybuild-framework/pull/3596> `_ ) * add support for using fallback ``arch=*`` key in dependency version specified as arch->version mapping ( `#3600 <https://github.com/easybuilders/easybuild-framework/pull/3600> `_ ) * also check for pending change requests and mergeable_state in ``check_pr_eligible_to_merge`` ( `#3604 <https://github.com/easybuilders/easybuild-framework/pull/3604> `_ ) * ignore undismissed ``changes requested`` review if there is an ``approved`` review by the same user ( `#3607 <https://github.com/easybuilders/easybuild-framework/pull/3607> `_ , `#3608 <https://github.com/easybuilders/easybuild-framework/pull/3608> `_ ) * sort output of ``eb --search`` in natural order (respecting numbers) ( `#3609 <https://github.com/easybuilders/easybuild-framework/pull/3609> `_ ) * enhance ``eb`` command to ensure that ``easybuild.main`` can be imported before settling on python* command to use ( `#3610 <https://github.com/easybuilders/easybuild-framework/pull/3610> `_ ) * add ``--env-for-shebang`` configuration option to define the ``env`` command to use for shebangs ( `#3613 <https://github.com/easybuilders/easybuild-framework/pull/3613> `_ ) * add templates for architecture independent Python wheels ( `#3618 <https://github.com/easybuilders/easybuild-framework/pull/3618> `_ ) * mention easyblocks PR in gist when uploading test report for it + fix ``clean_gists.py`` script ( `#3622 <https://github.com/easybuilders/easybuild-framework/pull/3622> `_ ) * also accept regular expression value for ``--accept-eula-for`` ( `#3630 <https://github.com/easybuilders/easybuild-framework/pull/3630> `_ ) * update ``validate_github_token`` function to accept GitHub token in new format ( `#3632 <https://github.com/easybuilders/easybuild-framework/pull/3632> `_ ) * various bug fixes, including: * fix ``$BLAS_LIB_MT`` for OpenBLAS, ensure ``-lpthread`` is included ( `#3584 <https://github.com/easybuilders/easybuild-framework/pull/3584> `_ ) * use ``--opt=val`` for passing settings from config file to option parser to avoid error for values starting with ``-`` or ``--`` ( `#3594 <https://github.com/easybuilders/easybuild-framework/pull/3594> `_ ) * avoid raised exception when getting output from interactive command in ``run_cmd_qa`` ( `#3599 <https://github.com/easybuilders/easybuild-framework/pull/3599> `_ ) * add option to write file from file-like object and use in ``download_file`` ( `#3614 <https://github.com/easybuilders/easybuild-framework/pull/3614> `_ ) * make sure that path to ``eb`` is always found by tests ( `#3617 <https://github.com/easybuilders/easybuild-framework/pull/3617> `_ ) * other changes: * add ``pick_default_branch`` function to clean up duplicate code in ``tools/github.py`` ( `#3592 <https://github.com/easybuilders/easybuild-framework/pull/3592> `_ ) * refactor the CI configuration to use inclusion instead of exclusion ( `#3616 <https://github.com/easybuilders/easybuild-framework/pull/3616> `_ ) * use develop branch when testing push access in ``--check-github`` ( `#3629 <https://github.com/easybuilders/easybuild-framework/pull/3629> `_ ) * deprecate ``--accept-eula`` , rename to ``--accept-eula-for`` ( `#3630 <https://github.com/easybuilders/easybuild-framework/pull/3630> `_ ) **easyblocks** * minor enhancements, including: * make OpenCV easyblock aware of protobuf, libwebp and OpenEXR dependencies provided via EasyBuild ( `#2346 <https://github.com/easybuilders/easybuild-easyblocks/pull/2346> `_ ) * update CP2K easyblock w.r.t. running regtest for CP2K v8.1 ( `#2350 <https://github.com/easybuilders/easybuild-easyblocks/pull/2350> `_ ) * update GROMACS easyblock for GROMACS/2021 with CUDA ( `#2353 <https://github.com/easybuilders/easybuild-easyblocks/pull/2353> `_ ) * adjust call to ``python-config`` for Python >= 3.8 in VMD easyblock ( `#2355 <https://github.com/easybuilders/easybuild-easyblocks/pull/2355> `_ ) * enhance cuDNN and CUDA easyblocks to support ``aarch64`` ( `#2356 <https://github.com/easybuilders/easybuild-easyblocks/pull/2356> `_ ) * pass down compiler flags provided by EasyBuild in g2clib easyblock ( `#2357 <https://github.com/easybuilders/easybuild-easyblocks/pull/2357> `_ ) * update VTune easyblock for version 2020 ( `#2359 <https://github.com/easybuilders/easybuild-easyblocks/pull/2359> `_ ) * make WRF and WPS easyblocks aware of ``(pre)configopts`` ( `#2361 <https://github.com/easybuilders/easybuild-easyblocks/pull/2361> `_ ) * add Clang version 12.0.0 for AOCC 3.0.0 to mapping in custom easyblock for AOCC ( `#2362 <https://github.com/easybuilders/easybuild-easyblocks/pull/2362> `_ ) * use ``PYPI_SOURCE`` as the default for source_urls of PythonPackage ( `#2364 <https://github.com/easybuilders/easybuild-easyblocks/pull/2364> `_ , `#2370 <https://github.com/easybuilders/easybuild-easyblocks/pull/2370> `_ ) * enhance PythonPackage easyblock to catch faulty version (0.0.0) for installed Python packages ( `#2367 <https://github.com/easybuilders/easybuild-easyblocks/pull/2367> `_ , `#2377 <https://github.com/easybuilders/easybuild-easyblocks/pull/2377> `_ ) * enhance BWA easyblock: pass compiler flags + use ``filetools`` functions ( `#2368 <https://github.com/easybuilders/easybuild-easyblocks/pull/2368> `_ ) * various bug fixes, including: * set ``$R_LIBS_SITE`` rather than ``$R_LIBS`` when installing R packages ( `#2326 <https://github.com/easybuilders/easybuild-easyblocks/pull/2326> `_ ) * update PETSc easyblock to take into account that ScaLAPACK installation may not have header files + fix building in parallel ( `#2348 <https://github.com/easybuilders/easybuild-easyblocks/pull/2348> `_ ) * disable CMake user package repository in CMakeMake generic easyblock ( `#2351 <https://github.com/easybuilders/easybuild-easyblocks/pull/2351> `_ ) * update LAPACK easyblock to keep control of compiler options for versions >= 3.9.0 ( `#2358 <https://github.com/easybuilders/easybuild-easyblocks/pull/2358> `_ ) * also set ``$TORCH_CUDA_ARCH_LIST`` for PyTorch tests ( `#2363 <https://github.com/easybuilders/easybuild-easyblocks/pull/2363> `_ ) * enhance Hadoop easyblock to avoid copying same native library twice ( `#2371 <https://github.com/easybuilders/easybuild-easyblocks/pull/2371> `_ ) * fix pip extension download pattern for PythonPackage easyblock ( `#2372 <https://github.com/easybuilders/easybuild-easyblocks/pull/2372> `_ ) * make the CUDA stub libs take preference over system libs when linking ( `#2373 <https://github.com/easybuilders/easybuild-easyblocks/pull/2373> `_ ) * improve Python package version check and add ``unversioned_packages`` easyconfig parameter ( `#2377 <https://github.com/easybuilders/easybuild-easyblocks/pull/2377> `_ ) **easyconfigs** * added easyconfig for goblf/2020b toolchain ( `#12381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12381> `_ , `#12535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12535> `_ ) * added example easyconfig files for 41 new software packages: * amplimap ( `#12205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12205> `_ ), BEEF ( `#12104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12104> `_ ), bpp ( `#12036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12036> `_ ), Brotli ( `#11651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11651> `_ ), CDAT ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), cicero ( `#12252 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12252> `_ ), CIF2Cell ( `#12258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12258> `_ ), CompareM ( `#9377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9377> `_ ), DL_POLY_4 ( `#12324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12324> `_ ), DMCfun ( `#12412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12412> `_ ), ESMPy ( `#12339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12339> `_ ), FLAC ( `#12300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12300> `_ ), gdbm ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), GPyOpt ( `#12524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12524> `_ ), json-c ( `#12344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12344> `_ ), libcdms ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), libdrs ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), libogg ( `#12285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12285> `_ ), libvorbis ( `#12300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12300> `_ ), LncLOOM ( `#12287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12287> `_ ), LPJmL ( `#12344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12344> `_ ), maze ( `#12354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12354> `_ ), MetaEuk ( `#12188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12188> `_ ), mrcfile ( `#12497 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12497> `_ ), Myokit ( `#12261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12261> `_ ), NCCL-tests ( `#12415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12415> `_ ), pyABC ( `#12329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12329> `_ ), PyCifRW ( `#12258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12258> `_ ), PyOD ( `#12507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12507> `_ ), pyro-api ( `#12447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12447> `_ ), pyro-ppl ( `#12447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12447> `_ ), R-opencv ( `#12226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12226> `_ ), Ratatosk ( `#12443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12443> `_ ), RevBayes ( `#12419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12419> `_ ), sansa ( `#12354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12354> `_ ), scikit-cuda ( `#12352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12352> `_ ), Seeder ( `#9057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9057> `_ ), suave ( `#12354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12354> `_ ), voltools ( `#12497 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12497> `_ ), vorbis-tools ( `#12300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12300> `_ ), YACS ( `#12309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12309> `_ ) * added additional easyconfigs for various supported software packages, including: * AOCC 3.0.0, Arriba 2.1.0, ArviZ 0.11.1, arpack-ng 3.8.0 BCFtools 1.12, BEDTools 2.30.0, BUSCO 5.0.0, BioPerl 1.7.8, Blosc 1.21.0, Boost.Python 1.74.0, bitarray 1.2.1, bokeh 2.2.3, CP2K 8.1, CUDAcore 11.2.2, CellRanger 6.0.0, Clang 11.0.1, DIAMOND 2.0.7, Delly 0.8.7, dask 2021.2.0, dm-tree 0.1.5, Elk 7.0.12, Extrae 3.8.0, FLUENT 2021R1, FabIO 0.11.0, Fiji 20201104, Flye 2.8.3, FreeSurfer 7.1.1, GDAL 3.2.1, GEOS 3.9.1, GLFW 3.3.3, GMAP-GSNAP 2020-12-17, GROMACS 2021, GetOrganelle 1.7.4, gmsh 4.7.1, HTSeq 0.11.3, HTSlib 1.12, Hypre 2.20.0, hyperopt 0.2.5, iVar 1.3.1, igraph 0.9.1, Jansson 2.13.1, Kent_tools 411, LAPACK 3.9.1, LAST 1179, LibSoup 2.72.0, libxc 5.1.3, MAFFT 7.475, MCR R2020a.6 + R2020b.5 + R2021a.0.eb, MDTraj 1.9.5, MUMPS 5.3.5, MaSuRCA 4.0.1, Mercurial 5.7.1, Monocle3 0.2.3, NGS 2.10.9, NVHPC 21.2, NetLogo 6.2.0, Nextflow 21.03.0, ncbi-vdb 2.10.9, OSU-Micro-Benchmarks 5.7, OpenCV 4.5.1, OpenEXR 2.5.5, OptiX 7.2.0, PETSc 3.14.4, PLUMED 2.7.0, PROJ 7.2.1, PyAMG 4.0.0, PyCUDA 2020.1, PyCairo 1.20.0, PyOpenCL 2021.1.2, PyTorch-Geometric 1.6.3, p7zip 17.03, pFUnit 4.2.0, picard 2.25.1, pocl 1.6, preCICE 2.2.0, protobuf 2.5.0, pymatgen 2022.0.4, python-igraph 0.9.0, Qtconsole 5.0.2, R 4.0.4, RASPA2 2.0.41, RDFlib 5.0.0, ReFrame 3.5.1, Ruby 2.7.2, rnaQUAST 2.2.0, SAMtools 1.12, SDL2 2.0.14, SIMPLE 3.0.0, SPAdes 3.15.2, SUNDIALS 5.7.0, Seurat 4.0.1, Spark 3.1.1, scikit-image 0.18.1, silx 0.14.0, spglib 1.16.1, sympy 1.7.1, tensorboardX 2.1, tensorflow-probability 0.12.1, tmux 3.1c, USEARCH 11.0.667, VTK 9.0.1, VTune 2020_update3 * minor enhancements, including: * verify checksum of all patch files in easyconfigs test suite ( `#12221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12221> `_ ) * add libwebp and OpenEXR dependencies for OpenCV 4.2.0 easyconfig with foss/2020a ( `#12227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12227> `_ ) * add sanity check commands for vorbis-tools ( `#12304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12304> `_ ) * add extensions to R-bundle-Bioconductor 3.12: motifmatchr ( `#12390 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12390> `_ ), OUTRIDER + FRASER ( `#12510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12510> `_ ) * add DMCfun extension for R v4.0.3 + v4.0.4 ( `#12409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12409> `_ ) * various bug fixes, including: * add missing GNU time dependency to WRF 4.0.2 built with foss/2018b ( `#12179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12179> `_ ) * add archive ``source_urls`` for Hadoop and Spark ( `#12220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12220> `_ ) * add missing Python build dep for SeqAn 2.4.0 ( `#12222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12222> `_ ) * add missing pkg-config build dependency to VCFtools 0.1.16 ( `#12245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12245> `_ ), GObject-Introspection-1.64.0 ( `#12298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12298> `_ ), libsndfile ( `#12303 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12303> `_ ) * set ``$HTSLIB_DIR`` in HTSlib for use by EnsEMBLCoreAPI & Bio-DB-HTS ( `#12253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12253> `_ ) * bump JasPer version to latest 2.0.24 for 2020b generation of easyconfigs + remove easyconfigs for ancient JasPer 2.0.1.4 with GCCcore/10.2.0 ( `#12277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12277> `_ , `#12288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12288> `_ ) * bump pip to 20.3.4 in Python 2.7.18 easyconfig to fix unicode error ( `#12293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12293> `_ ) * skip sanity check test in IPython-7.18.1-GCCcore-10.2.0.eb ( `#12294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12294> `_ ) * add missing Perl and Autotools build dependencies in recent WRF easyconfigs ( `#12301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12301> `_ ) * add missing groff build dependency for Perl 5.30.0 and 5.32.0 ( `#12307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12307> `_ ) * add linkcomm + rnetcarto extensions to R v4.0.3 ( `#12311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12311> `_ ) * add dependency on Flask in all ASE v3.21.1 easyconfigs ( `#12312 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12312> `_ ) * remove hard-coded ``-xHost`` from MMseqs2-11-e1a1c ( `#12317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12317> `_ ) * revised outdated easyconfigs for libcerf + replaced obsolete homepages and source urls ( `#12323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12323> `_ ) * consistently include ``new_archive`` source URL in Qt5 easyconfigs + add missing checksums ( `#12325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12325> `_ , `#12426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12426> `_ ) * fix source URL and add alternate checksum for Hypre 2.14.0 ( `#12337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12337> `_ ) * add patch for recent netCDF easyconfigs to fix MPI_Info_f2c issue with OpenMPI ( `#12340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12340> `_ ) * add SourceForge fallback source URL for recent freetype easyconfigs ( `#12341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12341> `_ ) * revert to Seaborn 0.10.1 as dependency for NanoPlot 1.33.0 ( `#12345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12345> `_ ) * use ``-D_USE_METIS_5p1`` in OpenSees v3.2.0 patch to correctly build on top of METIS v5.1.0 ( `#12403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12403> `_ ) * make sure that path to ``eb`` is always found by tests ( `#12436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12436> `_ ) * stop tests changing the EasyBuild easyconfigs ( `#12454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12454> `_ ) * use pip to install pkgconfig 1.5.1 ( `#12455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12455> `_ ) * add CI test checking if the Python default ``source_urls`` are used and fix CI check where ``use_pip=False`` was ignored ( `#12456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12456> `_ , `#12471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12471> `_ ) * fix source URLs in Arrow 0.x easyconfigs ( `#12475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12475> `_ ) * fix numpy tests for recent SciPy-bundle easyconfig on POWER ( `#12481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12481> `_ ) * don't download hwloc during FIRESTARTER build ( `#12482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12482> `_ ) * avoid 0.0.0 install version for various Python apps ( `#12519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12519> `_ , `#12522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12522> `_ ) * enable USER_SDPD package and disable building docs in LAMMPS 3Mar2020 ( `#12527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12527> `_ ) * update ``$R_LIBS_SITE`` rather than ``$R_LIBS`` in easyconfigs installing R packages ( `#12534 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12534> `_ ) * add Python 3 build dep for HMMER 3.3.x test step ( `#12536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12536> `_ ) * other changes: * rename opencv_contrib and update to OpenCV v3.4.1 with contrib ``versionsuffix`` ( `#12229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12229> `_ ) * fix minor style issues in POV-Ray v3.7.0.8 easyconfigs ( `#12342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12342> `_ ) * enable ``-fPIC`` for g2clib ( `#12349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12349> `_ ) * consistently include Keras-Applications and Keras-Preprocessing extensions in Keras 2.3.1 easyconfigs ( `#12375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12375> `_ ) * remove ``PYPI_SOURCE`` source URL from easyconfigs using PythonPackage or PythonBundle ( `#12541 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12541> `_ , `#12452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12452> `_ , `#12453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12453> `_ ) * require ``sanity_pip_check`` for all Python package/bundles ( `#12464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12464> `_ ) .. _release_notes_eb433: EasyBuild v4.3.3 (Feb 23rd 2021) -------------------------------- bugfix/update release **framework** * various enhancements, including: * advise PR labels in ``--review-pr`` and add support for ``--add-pr-labels`` ( `#3177 <https://github.com/easybuilders/easybuild-framework/pull/3177> `_ ) * add support for using customized HTTP headers in ``download_file`` ( `#3472 <https://github.com/easybuilders/easybuild-framework/pull/3472> `_ , `#3583 <https://github.com/easybuilders/easybuild-framework/pull/3583> `_ ) * also take toolchain dependencies into account when defining template values ( `#3541 <https://github.com/easybuilders/easybuild-framework/pull/3541> `_ , `#3560 <https://github.com/easybuilders/easybuild-framework/pull/3560> `_ ) * add support for ``--accept-eula`` configuration option + ``accept_eula`` easyconfig parameter ( `#3535 <https://github.com/easybuilders/easybuild-framework/pull/3535> `_ , `#3536 <https://github.com/easybuilders/easybuild-framework/pull/3536> `_ , `#3546 <https://github.com/easybuilders/easybuild-framework/pull/3546> `_ ) * detect ``SYSTEM`` toolchain as special case in easystack files ( `#3543 <https://github.com/easybuilders/easybuild-framework/pull/3543> `_ ) * enhance ``extract_cmd`` function to use ``cp -a`` for shell scripts (.sh) ( `#3545 <https://github.com/easybuilders/easybuild-framework/pull/3545> `_ ) * allow use of alternate envvar(s) to ``$HOME`` for user modules ( `#3558 <https://github.com/easybuilders/easybuild-framework/pull/3558> `_ ) * use https://sources.easybuild.io as fallback source URL ( `#3572 <https://github.com/easybuilders/easybuild-framework/pull/3572> `_ , `#3576 <https://github.com/easybuilders/easybuild-framework/pull/3576> `_ ) * add toolchain definition for ``iibff`` toolchain ( `#3574 <https://github.com/easybuilders/easybuild-framework/pull/3574> `_ ) * add ``%(cuda_cc_space_sep)s`` and ``%(cuda_cc_semicolon_sep)s`` templates ( `#3578 <https://github.com/easybuilders/easybuild-framework/pull/3578> `_ ) * add support for intel-compiler toolchain (>= 2021.x versions, oneAPI) ( `#3581 <https://github.com/easybuilders/easybuild-framework/pull/3581> `_ , `#3582 <https://github.com/easybuilders/easybuild-framework/pull/3582> `_ ) * various bug fixes, including: * add ``--init`` and ``--recursive`` options to ``git submodule update`` command that is used when creating source tarball for specific commit ( `#3537 <https://github.com/easybuilders/easybuild-framework/pull/3537> `_ ) * filter out duplicate paths in RPATH wrapper script ( `#3538 <https://github.com/easybuilders/easybuild-framework/pull/3538> `_ ) * don't clean up imported modules after verifying imports of included Python modules ( `#3544 <https://github.com/easybuilders/easybuild-framework/pull/3544> `_ ) * avoid no-op changes to ``$LD_*`` environment variables in ModulesTool ( `#3553 <https://github.com/easybuilders/easybuild-framework/pull/3553> `_ ) * fix UTF-8 encoding errors when running EasyBuild with Python 3.0.x-3.6.x ( `#3565 <https://github.com/easybuilders/easybuild-framework/pull/3565> `_ ) * create ``lib64`` symlink as a relative symlink ( `#3566 <https://github.com/easybuilders/easybuild-framework/pull/3566> `_ ) * don't reuse variable name in the loop to fix adding extra compiler flags via toolchainopts ( `#3571 <https://github.com/easybuilders/easybuild-framework/pull/3571> `_ ) * symlink ``lib`` to ``lib64`` if it doesn't exist ( `#3580 <https://github.com/easybuilders/easybuild-framework/pull/3580> `_ ) * include ``%(mpi_cmd_prefix)s`` and ``%(cuda_*)s`` templates in output of ``--avail-easyconfig-templates`` ( `#3586 <https://github.com/easybuilders/easybuild-framework/pull/3586> `_ ) * other changes: * rename ``EasyBlock._skip_step`` to ``EasyBlock.skip_step`` , to make it part of the public API ( `#3561 <https://github.com/easybuilders/easybuild-framework/pull/3561> `_ ) * make symlinking of ``posix_c.so`` to ``posix.so`` in test suite configuration conditional ( `#3570 <https://github.com/easybuilders/easybuild-framework/pull/3570> `_ ) **easyblocks** * 2 new software-specific easyblocks: * AOCC ( `#2295 <https://github.com/easybuilders/easybuild-easyblocks/pull/2295> `_ ), Intel compilers (v2021.x, oneAPI) ( `#2305 <https://github.com/easybuilders/easybuild-easyblocks/pull/2305> `_ ) * minor enhancements, including: * run motorBike tutorial case as sanity check for recent (community) OpenFOAM versions ( `#2201 <https://github.com/easybuilders/easybuild-easyblocks/pull/2201> `_ ) * add foamMonitor to sanity checks of OpenFOAM ( `#2256 <https://github.com/easybuilders/easybuild-easyblocks/pull/2256> `_ ) * create versioned symlinks for CMake commands + create symlink for ``cmake3`` in PyTorch easyblock if ``cmake3`` command is not found ( `#2259 <https://github.com/easybuilders/easybuild-easyblocks/pull/2259> `_ ) * improve Bazel easyblock: add support for running tests, enable static linking, use build dir rather than ``tmpdir`` , verbose output ( `#2285 <https://github.com/easybuilders/easybuild-easyblocks/pull/2285> `_ ) * add support for skipping steps in Python packages installed as extension + print progress on individual steps for installing Python packages as extensions ( `#2290 <https://github.com/easybuilders/easybuild-easyblocks/pull/2290> `_ ) * update BerkeleyGW easyblock to support GCC 10 and fftlib ( `#2297 <https://github.com/easybuilders/easybuild-easyblocks/pull/2297> `_ ) * update QuantumESPRESSO easyblock to support GCC 10 ( `#2298 <https://github.com/easybuilders/easybuild-easyblocks/pull/2298> `_ ) * update Clang easyblock to add support for building extra tools + leveraging hwloc and Z3 as optional dependencies ( `#2310 <https://github.com/easybuilders/easybuild-easyblocks/pull/2310> `_ ) * add support for running TensorFlow CPU and GPU tests ( `#2263 <https://github.com/easybuilders/easybuild-easyblocks/pull/2263> `_ , `#2292 <https://github.com/easybuilders/easybuild-easyblocks/pull/2292> `_ , `#2312 <https://github.com/easybuilders/easybuild-easyblocks/pull/2312> `_ ) * update impi easyblock for impi 2021.x (oneAPI) ( `#2313 <https://github.com/easybuilders/easybuild-easyblocks/pull/2313> `_ ) * update QuantumESPRESSO easyblock to handle v6.7 ( `#2319 <https://github.com/easybuilders/easybuild-easyblocks/pull/2319> `_ ) * update OpenFOAM easyblock for changes in v2012 ( `#2321 <https://github.com/easybuilders/easybuild-easyblocks/pull/2321> `_ ) * add sanity check commands to GCC (including LTO support) ( `#2322 <https://github.com/easybuilders/easybuild-easyblocks/pull/2322> `_ ) * update FLUENT sanity check for v2021R1 ( `#2334 <https://github.com/easybuilders/easybuild-easyblocks/pull/2334> `_ ) * various bug fixes, including: * filter out user packages in LAMMPS easyblock if corresponding dependency isn't included + only set ``-DUSER-INTEL`` on x86_64 systems ( `#2254 <https://github.com/easybuilders/easybuild-easyblocks/pull/2254> `_ ) * unify handling of ``pylibdirs`` and don't add duplicated ``$PYTHONPATH`` in PythonBundle ( `#2281 <https://github.com/easybuilders/easybuild-easyblocks/pull/2281> `_ ) * enhance Amber easyblock to fix running of ``update_amber`` script when ``python`` command is not available in OS ( `#2282 <https://github.com/easybuilders/easybuild-easyblocks/pull/2282> `_ ) * guard ``module unload`` statements in modules for Cray* toolchains ( `#2286 <https://github.com/easybuilders/easybuild-easyblocks/pull/2286> `_ ) * set ``$PYTHONNOUSERSITE`` in ``PythonBundle.extensions_step`` to avoid picking up on Python packages installed in $HOME ( `#2289 <https://github.com/easybuilders/easybuild-easyblocks/pull/2289> `_ ) * create less temporary directories for TensorFlow by (only) using ``--output_user_root`` ( `#2293 <https://github.com/easybuilders/easybuild-easyblocks/pull/2293> `_ ) * fix logic w.r.t. enabling Python support in PETSc ( `#2299 <https://github.com/easybuilders/easybuild-easyblocks/pull/2299> `_ ) * make ``builddeps`` a list of names in SLEPc easyblock ( `#2300 <https://github.com/easybuilders/easybuild-easyblocks/pull/2300> `_ ) * make ``builddeps`` a list of names in Trilinos easyblock ( `#2301 <https://github.com/easybuilders/easybuild-easyblocks/pull/2301> `_ ) * make sure the installation of ``libiberty.a`` in the binutils easyblock goes into a populated directory ( `#2308 <https://github.com/easybuilders/easybuild-easyblocks/pull/2308> `_ ) * fix for building GCC with ``--sysroot`` on ppc64le ( `#2315 <https://github.com/easybuilders/easybuild-easyblocks/pull/2315> `_ ) * fix OpenFOAM sanity check on POWER ( `#2320 <https://github.com/easybuilders/easybuild-easyblocks/pull/2320> `_ ) * use library search paths of compiler for RPATH when building binutils with system compiler + enhance sanity check by running ``--version`` for binutils commands ( `#2323 <https://github.com/easybuilders/easybuild-easyblocks/pull/2323> `_ , `#2327 <https://github.com/easybuilders/easybuild-easyblocks/pull/2327> `_ ) * pass ``$CXXFLAGS`` to PDT's configure script via ``-useropt`` ( `#2324 <https://github.com/easybuilders/easybuild-easyblocks/pull/2324> `_ ) * pass down compilation flags from build environment for ESMF ( `#2325 <https://github.com/easybuilders/easybuild-easyblocks/pull/2325> `_ ) * update URLs for test data for WRF to ``https`` ( `#2335 <https://github.com/easybuilders/easybuild-easyblocks/pull/2335> `_ ) * read MATLAB configuration file in binary mode to avoid UTF-8 encoding errors when using Python 3.6 ( `#2340 <https://github.com/easybuilders/easybuild-easyblocks/pull/2340> `_ ) * fix Boost sanity check on POWER ( `#2291 <https://github.com/easybuilders/easybuild-easyblocks/pull/2291> `_ ) and aarch64 ( `#2341 <https://github.com/easybuilders/easybuild-easyblocks/pull/2341> `_ ) * other changes, including: * rework module-only tests to use unique software name (rather than 'foo') ( `#2287 <https://github.com/easybuilders/easybuild-easyblocks/pull/2287> `_ ) * prefer default value for extra options in easyblock tests ( `#2280 <https://github.com/easybuilders/easybuild-easyblocks/pull/2280> `_ , `#2302 <https://github.com/easybuilders/easybuild-easyblocks/pull/2302> `_ ) * add check for accepted EULA in custom easyblock for NVHPC ( `#2311 <https://github.com/easybuilders/easybuild-easyblocks/pull/2311> `_ ) * update optional feature support of TensorFlow ( `#2314 <https://github.com/easybuilders/easybuild-easyblocks/pull/2314> `_ ) * make symlinking of ``posix_c.so`` to ``posix.so`` in test suite configuration conditional ( `#2330 <https://github.com/easybuilders/easybuild-easyblocks/pull/2330> `_ ) **easyconfigs** * add easyconfig for new iibff toolchain: iibff/2020b ( `#12185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12185> `_ ) * added easyconfigs for 6 new toolchains: * gobff/2020b ( `#12098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12098> `_ ), goblf/2018b ( `#6615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6615> `_ ), gomkl/2020b ( `#12198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12198> `_ ), iimkl/2018a ( `#6092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6092> `_ ), iomkl/2019b ( `#11981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11981> `_ ), iomkl/2020b ( `#12009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12009> `_ ) * added example easyconfig files for 72 new software packages: * AOCC ( `#11868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11868> `_ ), CHERAB ( `#7141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7141> `_ ), CaDiCaL ( `#11966 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11966> `_ ), CellRanger-ARC ( `#12114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12114> `_ ), CuPy ( `#11749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11749> `_ ), DFA ( `#11979 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11979> `_ ), FIGARO ( `#11924 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11924> `_ ), FIRESTARTER ( `#12160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12160> `_ ), FIt-SNE ( `#8630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8630> `_ ), GPyTorch ( `#12010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12010> `_ ), GSEA ( `#10395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10395> `_ ), GetOrganelle ( `#11948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11948> `_ ), Glucose ( `#11965 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11965> `_ ), GraPhlAn ( `#10707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10707> `_ ), ITSx ( `#10558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10558> `_ ), Kaleido ( `#11998 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11998> `_ ), LAPACK ( `#6615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6615> `_ ), LSD2 ( `#11903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11903> `_ ), Lingeling ( `#11964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11964> `_ ), MPB ( `#7026 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7026> `_ ), MiniCARD ( `#11963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11963> `_ ), MiniSat ( `#11962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11962> `_ ), NGSpeciesID ( `#11918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11918> `_ ), NanopolishComp ( `#11823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11823> `_ ), Nsight-Compute ( `#12043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12043> `_ ), Nsight-Systems ( `#12042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12042> `_ ), PHANOTATE ( `#8667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8667> `_ ), PIPITS ( `#10558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10558> `_ ), PyClone ( `#11940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11940> `_ ), PySAT ( `#12000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12000> `_ ), RNAmmer ( `#7262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7262> `_ ), Raysect ( `#7141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7141> `_ ), SICER2 ( `#12200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12200> `_ ), SOCI ( `#12045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12045> `_ ), SeisSol ( `#7194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7194> `_ ), SignalP ( `#11862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11862> `_ ), Stack ( `#11310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11310> `_ ), SuperLU_DIST ( `#11693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11693> `_ ), Teneto ( `#12056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12056> `_ ), Transformers ( `#12032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12032> `_ ), YANK ( `#11742 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11742> `_ ), Z3 ( `#12013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12013> `_ ), bgen ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), bgen-reader ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), bpytop ( `#12040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12040> `_ ), byobu ( `#11932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11932> `_ ), chi2comb ( `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), cuTENSOR ( `#11914 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11914> `_ ), dd ( `#11978 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11978> `_ ), decona ( `#11891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11891> `_ ), dicom2nifti ( `#11955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11955> `_ ), eccodes-python ( `#12083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12083> `_ ), fftlib ( `#11944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11944> `_ ), flatbuffers-python ( `#12148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12148> `_ ), fpocket ( `#11980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11980> `_ ), gh ( `#11851 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11851> `_ ), intel-compilers (oneAPI) ( `#11982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11982> `_ ), libGDSII ( `#7026 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7026> `_ ), libpci ( `#11871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11871> `_ ), liknorm ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), limix ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), logaddexp ( `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), neptune-client ( `#11985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11985> `_ ), plinkQC ( `#12068 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12068> `_ ), preCICE ( `#11886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11886> `_ ), py-aiger ( `#11999 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11999> `_ ), py-aiger-bdd ( `#11999 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11999> `_ ), pytest-xdist ( `#11883 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11883> `_ , `#11893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11893> `_ ), samblaster ( `#7378 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7378> `_ ), terastructure ( `#12197 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12197> `_ ), typing-extensions ( `#11636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11636> `_ ), webin-cli ( `#8674 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8674> `_ ) * added additional easyconfigs for various supported software packages, including: * ack 3.4.0, AmberTools 20, AMD-LibM 3.6.0-4, AMD-RNG 2.2, AMD-SecureRNG 2.2, annovar 20191024, ASE 3.21.1, AUGUSTUS 3.4.0, Bazel 3.7.2, bcgTree 1.1.0, BLAST+ 2.11.0, Bonito 0.3.5, Bowtie2 2.4.2, causalml 0.8.0-20200909, CGAL 5.2, ConnectomeWorkbench 1.4.2, CUDAcore 11.2.1, cuDNN 8.0.5.39, dcm2niix 1.0.20201102, DendroPy 4.5.2, DIAMOND 0.9.36 + 2.0.6, ecCodes 2.20.0, ELPA 2020.11.001, Emacs 27.1, FusionCatcher 1.30, gensim 3.8.3, GHC 8.6.5, gnuplot 5.4.1, GPAW 21.1.0, Graphviz 2.44.1, GROMACS 2020.5, Gurobi 9.1.0, HH-suite 3.3.0, HMMER 3.3.2, HTSlib 1.11, Horovod 0.21.1, imbalanced-learn 0.7.0, impi 2021.1.1, inferCNV 1.3.3, ITK 5.1.2, IQ-TREE 2.1.2, JasPer 2.0.24, JUBE 2.4.1, libgit2 1.1.0, libzip 1.7.3, likwid 5.1.0, MariaDB 10.5.8, medaka 1.2.0, Meep 1.6.0, mkl-service 2.3.0, MPICH 3.3.2, muParser 2.3.2, NanoComp 1.13.1, NanoPlot 1.33.0, networkx 2.5, NLTK 3.5, numba 0.52.0, NVHPC 20.11, nvtop 1.1.0, OpenCoarrays 2.9.2, OpenFOAM v2012, OpenJPEG 2.4.0, OpenMPI 4.1.0, parasail 2.4.2, PLUMED 2.6.2, PostgreSQL 13.2, pydicom 2.1.2, PyMC3 3.11.0, python-parasail 1.2.2, PyTorch 1.7.1, QIIME2 2020.11, QuantumESPRESSO 6.7, QuickFF 2.2.7, R 4.0.3, R-bundle-Bioconductor 3.12, ReFrame 3.4.1, RMBlast 2.10.0, RSEM 1.3.3, Salmon 1.4.0, scikit-build 0.11.1, SciPy-bundle 2020.03 w/ Python 2.7.18, Seaborn 0.11.1, SEPP 4.4.0, SHAPEIT4 4.2.0, SpaceRanger 1.2.2, Stacks 2.54, STAR 2.7.7.a, statsmodels 0.12.1, SuiteSparse 5.8.1, tbb 2020.3, TensorFlow 1.15.5 + 2.4.1, Theano 1.1.2, torchvision 0.8.2, V8 3.4.0, Wannier90 3.1.0 * minor enhancements, including: * enable building of QtWebEngine in Qt5 easyconfig using foss/2017b or intel/2017b ( `#7302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7302> `_ ) * enable NVPTX offload in GCCcore 9.3.0 easyconfig ( `#11839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11839> `_ ) * also build shared library in recent HDF easyconfigs ( `#11847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11847> `_ ) * add support for HDF4 to GDAL v3.0.2 and v3.0.4 ( `#11855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11855> `_ ) * add patch for magma 2.5.4 with fosscuda/2019b to allow any ``sm_*`` value to be passed via ``GPU_TARGET`` ( `#11861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11861> `_ ) * add missing M4 build dependency to recent SuiteSparse versions ( `#11869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11869> `_ ) * enable tests for most recent Bazel versions (3.x) ( `#11894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11894> `_ ) * enable gipaw in QuantumESPRESSO 6.6 easyconfig ( `#11905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11905> `_ ) * add RCAL + sensemakr extensions to R 4.0.0 ( `#11921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11921> `_ ) * add additional extensions to R v4.0.3 easyconfig ( `#11922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11922> `_ , `#12057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12057> `_ ) * improve sanity_check_paths for AMD-LibM ( `#11933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11933> `_ ) * symlink ``include`` / ``lib`` subdirs + enhance ``sanity_check_paths`` for AMD-RNG v2.2-4 ( `#11934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11934> `_ ) * improve ``sanity_check_paths`` for AMD-SecureRNG ( `#11935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11935> `_ ) * update Clang 10+ dependencies & build extra tools ( `#12013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12013> `_ ) * add Inline extension to recent Perl easyconfigs (5.30+) ( `#12029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12029> `_ ) * add EnsDb.Hsapiens.v86 to Bioconductor 3.11 ( `#12078 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12078> `_ ) * add sanity check command for bam-readcount v0.8.0 to check ``--version`` output ( `#12092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12092> `_ ) * add EnsDb.Hsapiens.v75 + Signac extensions to R-bundle-Bioconductor 3.12 ( `#12174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12174> `_ ) * add tensorboard profile plugin to recent TensorFlow 2.x easyconfigs ( `#12136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12136> `_ , `#12137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12137> `_ ) * various bug fixes, including: * added missing space in ``configopts`` in ParaView 5.8.0 easyconfigs using 2020a toolchain ( `#10989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10989> `_ ) * use bfd linker for glibc 2.30 ( `#11331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11331> `_ ) * add missing moduleclass in UCLUST easyconfig ( `#11477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11477> `_ ) * don't disable optarch for Clang 11.0.0 ( `#11814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11814> `_ ) * add patch to fix miscompilation bug on POWER for GCC 8.x and 9.x ( `#11837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11837> `_ ) * fix compilation of TensorFlow 2.3.1 with CUDA and glibc 2.26 on POWER ( `#11859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11859> `_ ) * disable building of manpages for GDCM to fix installation problem with docbook ( `#11866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11866> `_ ) * add patch for LLVM 6.0.0 to fix missing exported symbol ``LLVMInitializeInstCombine`` ( `#11873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11873> `_ ) * fix name of source file for GDRCopy v2.1 ( `#11887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11887> `_ ) * fix Tombo to work with rpy2 v3 when creating DataFrames ( `#11892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11892> `_ ) * fix GCCcore 8.1.0 w.r.t. removed ``sys/ustat.h`` in glibc 2.28 ( `#11896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11896> `_ ) * add git as a dependency to GitPython version 3.x ( `#11902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11902> `_ ) * fix undefined ``__ieee128`` on ppc64le with glibc 2.26 for magma ( `#11930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11930> `_ ) and PyTorch ( `#11936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11936> `_ ) * update Hypre git location for PETSc 3.11.0 using downloaded dependencies ( `#11947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11947> `_ ) * fix source URL in expat easyconfigs (and consistently add custom ``sanity_check_paths`` ) ( `#11960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11960> `_ ) * use libpng provided by EasyBuild in VTK to fix build issue on ppc64le ( `#11990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11990> `_ ) * add missing pkg-config build dependency for GObject-Introspection v1.66.1 ( `#11949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11949> `_ ) * add missing plotly-orca dependency for NanoPlot ( `#11967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11967> `_ , `#12015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12015> `_ ) * add patch for Boost 1.74.0 to fix missing include file ( `#12007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12007> `_ ) * fix for ``error: 'runtime_error' is not a member of 'std'`` in qtlocation for Qt5 v5.14.2 ( `#12012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12012> `_ ) * fix homepage for gnuplot 5.2.8, use ``http://`` since homepage is not reachable via ``https://`` ( `#12047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12047> `_ ) * fix OS dependencies for libfabric ( `#12058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12058> `_ ) * fix vector ``mul`` and ``div`` with broadcasts in ``-masm=intel`` mode in GCCcore v9.3.0 ( `#12065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12065> `_ ) * add missing ESMF dependency in NCO easyconfigs ( `#12071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12071> `_ , `#12072 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12072> `_ ) * add patch to fix version for bam-readcount 0.8.0 ( `#12075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12075> `_ ) * add missing Perl build dep for (recent) libcerf versions, required for ``pod2html`` command ( `#12085 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12085> `_ ) * add missing bzip2 dependency to recent ncbi-vdb easyconfigs ( `#12120 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12120> `_ ) * add missing Perl build dependency for BLIS 0.8.0 ( `#12146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12146> `_ ) * use ``https://sources.easybuild.io`` as fallback source URL for UDUNITS ( `#12049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12049> `_ , `#12156 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12156> `_ , `#12182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12182> `_ ) * correct the GCC version check to allow IBM VSX builds of GROMACS 2020.4 and 2020.5 ( `#12159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12159> `_ ) * add missing mkl-service dependency for Theano built with intel/2019b + enhance sanity check ( `#12172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12172> `_ ) * add patches to fix test problems with p4est 2.2 ( `#12028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12028> `_ ) * fix build of Bison using older system GCC (v4.x) ( `#12203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12203> `_ ) * fix lack of optimisation for SHAPEIT4 v4.1.3 ( `#12206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12206> `_ ) * add missing gnuplot dependency for OpenFOAM from v2.4.0 to v6 ( `#11801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11801> `_ , `#12208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12208> `_ ) * fix source URL for libspatialite ( `#12213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12213> `_ ) * add ``archive`` fallback source URL to MAGMA easyconfigs ( `#12214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12214> `_ ) * fix checksum for patch in make 4.2.1 easyconfig using GCC/7.3.0-2.30 ( `#12223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12223> `_ ) * other changes: * replace easyconfigs for bpp-core/bpp-phyl/bpp-seq v2.4.1 with a single easyconfig for BioPP v2.4.1 (using Bundle easyblock) ( `#11609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11609> `_ ) * add CESM-deps to whitelist in check for custom ``sanity_check_paths`` ( `#11916 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11916> `_ ) * include '-4' in version for AMD-SecureRNG v2.2-4 ( `#11934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11934> `_ , `#11935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11935> `_ ) * switch to using python-parasail and tqdm dependencies in Bonito easyconfigs ( `#11937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11937> `_ ) * rename orca to plotly-orca ( `#12015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12015> `_ ) * remove duplicate extensions in R 3.5.x easyconfigs, and add test to detect such issues ( `#12059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12059> `_ ) * remove Python dependency from ecCodes v2.17.0 since it doesn't provide Python bindings ( `#12084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12084> `_ ) * update Java/1.8 wrapper to Java 1.8.0_281 ( `#11928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11928> `_ , `#12088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12088> `_ ) * update Bison (build) dependency for flex built with system compiler to v3.5.3 ( `#12111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12111> `_ ) * make symlinking of ``posix.so`` in test suite configuration conditional ( `#12123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12123> `_ ) * move make 4.3 easyconfigs to GCCcore toolchain ( `#12166 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12166> `_ ) * move most recent BLIS and libFLAME easyconfigs from GCC to GCCcore ( `#12168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12168> `_ ) * rename SNAP to SNAP-HMM and update easyconfig ( `#12218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12218> `_ ) .. _release_notes_eb432: EasyBuild v4.3.2 (December 10th 2020) ------------------------------------- bugfix/update release **framework** * add (experimental) support for specifying easyconfig files via an \"easystack\" file ( `#3479 <https://github.com/easybuilders/easybuild-framework/pull/3479> `_ , `#3511 <https://github.com/easybuilders/easybuild-framework/pull/3511> `_ , `#3515 <https://github.com/easybuilders/easybuild-framework/pull/3515> `_ , `#3517 <https://github.com/easybuilders/easybuild-framework/pull/3517> `_ , `#3520 <https://github.com/easybuilders/easybuild-framework/pull/3520> `_ , `#3521 <https://github.com/easybuilders/easybuild-framework/pull/3521> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Easystack-files.html * add definition for new ``gobff`` toolchain using BLIS and LibFLAME ( `#3505 <https://github.com/easybuilders/easybuild-framework/pull/3505> `_ ) * various enhancements, including: * add support for toolchain options like ``extra_cxxflags`` to specify extra compiler options ( `#2193 <https://github.com/easybuilders/easybuild-framework/pull/2193> `_ ) * fix combination of ``--copy-ec`` and ``--from-pr`` ( `#3482 <https://github.com/easybuilders/easybuild-framework/pull/3482> `_ ) * enhance ``copy_files`` function: support single file target, error on empty input list, support verbose mode ( `#3483 <https://github.com/easybuilders/easybuild-framework/pull/3483> `_ ) * cache result of ``fetch_files_from_pr`` function (mainly to speed up framework test suite) ( `#3484 <https://github.com/easybuilders/easybuild-framework/pull/3484> `_ ) * add ``locate_files`` function to filetools module ( `#3485 <https://github.com/easybuilders/easybuild-framework/pull/3485> `_ ) * add support for ``%(module_name)s`` template value ( `#3497 <https://github.com/easybuilders/easybuild-framework/pull/3497> `_ ) * clarify input format for ``--cuda-compute-capabilities`` in ``eb --help`` output ( `#3509 <https://github.com/easybuilders/easybuild-framework/pull/3509> `_ ) * add support for skipping unit tests (test step) via ``--skip-test-step`` ( `#3524 <https://github.com/easybuilders/easybuild-framework/pull/3524> `_ ) * various bug fixes, including: * also ignore ``vsc.*`` imports coming from from ``pkg_resources/__init__.py`` (setuptools) in fake vsc namespace ( `#3491 <https://github.com/easybuilders/easybuild-framework/pull/3491> `_ ) * don't pass username in ``github_api_get_request`` when no GitHub token is available ( `#3494 <https://github.com/easybuilders/easybuild-framework/pull/3494> `_ ) * also inject ``-rpath`` options for all entries in ``$LIBRARY_PATH`` in ``RPATH`` wrappers ( `#3495 <https://github.com/easybuilders/easybuild-framework/pull/3495> `_ ) * avoid ``TypeError`` being raised by ``list_toolchains`` ( `#3499 <https://github.com/easybuilders/easybuild-framework/pull/3499> `_ ) * check if PR is already merged in ``--merge-pr`` ( `#3502 <https://github.com/easybuilders/easybuild-framework/pull/3502> `_ ) * graciously handle wrong PR id in ``fetch_pr_data`` ( `#3503 <https://github.com/easybuilders/easybuild-framework/pull/3503> `_ ) * fix regression in ``apply_regex_substitutions`` : also accept list of paths to patch ( `#3507 <https://github.com/easybuilders/easybuild-framework/pull/3507> `_ ) * update installation procedure for EasyBuild in generated Singularity container recipes ( `#3510 <https://github.com/easybuilders/easybuild-framework/pull/3510> `_ ) * fix GitHub Actions workflow for test suite: run outside of repo checkout + also test bootstrap script with Python 3.9 ( `#3518 <https://github.com/easybuilders/easybuild-framework/pull/3518> `_ ) * bump cryptography from 2.9.2 to 3.2 for Python 2 in ``requirements.txt`` ( `#3519 <https://github.com/easybuilders/easybuild-framework/pull/3519> `_ ) * fix ``eb --help=rst`` when running with Python 3 ( `#3525 <https://github.com/easybuilders/easybuild-framework/pull/3525> `_ ) * other changes: * exclude test configurations with Lmod 7 and Python 3, except for Python 3.6 ( `#3496 <https://github.com/easybuilders/easybuild-framework/pull/3496> `_ ) * significantly speed up parsing of easyconfig files by only extracting comments from an easyconfig file when they're actually needed ( `#3498 <https://github.com/easybuilders/easybuild-framework/pull/3498> `_ ) * don't include ``file`` / ``ldd`` / ``readelf`` commands run during RPATH sanity check in ``--trace`` output ( `#3508 <https://github.com/easybuilders/easybuild-framework/pull/3508> `_ ) **easyblocks** * 2 new software-specific easyblocks: * code-server ( `#2255 <https://github.com/easybuilders/easybuild-easyblocks/pull/2255> `_ ), Metagenome-Atlas ( `#2219 <https://github.com/easybuilders/easybuild-easyblocks/pull/2219> `_ ) * minor enhancements, including: * add ``-fallow-argument-mismatch`` option when building CP2K 7.1 or older with GCC 10.x ( `#2223 <https://github.com/easybuilders/easybuild-easyblocks/pull/2223> `_ ) * update TensorFlow easyblock for upcoming TensorFlow 2.4 ( `#2225 <https://github.com/easybuilders/easybuild-easyblocks/pull/2225> `_ ) * add support for building Clang with OpenMP offload support ( `#2229 <https://github.com/easybuilders/easybuild-easyblocks/pull/2229> `_ ) * enhance OpenMPI easyblock to catch any ``--with-ucx*`` configure options ( `#2230 <https://github.com/easybuilders/easybuild-easyblocks/pull/2230> `_ ) * take into account ``preinstallopts`` and ``installopts`` in custom easyblock for NCL ( `#2234 <https://github.com/easybuilders/easybuild-easyblocks/pull/2234> `_ ) * add support for ``withnvptx`` easyconfig parameter, to enable GPU offloading, in GCC easyblock ( `#2235 <https://github.com/easybuilders/easybuild-easyblocks/pull/2235> `_ ) * take into account versions like ``4.x`` in OpenFOAM easyblock ( `#2239 <https://github.com/easybuilders/easybuild-easyblocks/pull/2239> `_ ) * also add ``bin`` subdir to ``$PATH`` when installing a Python package ( `#2244 <https://github.com/easybuilders/easybuild-easyblocks/pull/2244> `_ ) * various bug fixes, including: * fix two bugs in GROMACS easyblock when using GCC & MKL for FFT and BLAS/LAPACK ( `#2212 <https://github.com/easybuilders/easybuild-easyblocks/pull/2212> `_ ) * fix version check in Qt5 easyblock w.r.t. disabling features on old Linux kernel versions ( `#2220 <https://github.com/easybuilders/easybuild-easyblocks/pull/2220> `_ ) * always define ``$FCCPP`` in QuantumESPRESSO easyblock (not just when using Intel compilers) ( `#2221 <https://github.com/easybuilders/easybuild-easyblocks/pull/2221> `_ ) * allow wxPython to be installed as an extension ( `#2227 <https://github.com/easybuilders/easybuild-easyblocks/pull/2227> `_ , `#2275 <https://github.com/easybuilders/easybuild-easyblocks/pull/2275> `_ ) * only configure Python with ``--enable-optimizations`` when compiling Python with (recent) GCC compiler ( `#2228 <https://github.com/easybuilders/easybuild-easyblocks/pull/2228> `_ ) * fix sanity check for Boost MT libraries ( `#2231 <https://github.com/easybuilders/easybuild-easyblocks/pull/2231> `_ ) * fix hardcoded path in NVHPC easyblock to support multiple architectures ( `#2233 <https://github.com/easybuilders/easybuild-easyblocks/pull/2233> `_ ) * fix ``CPASSERT`` test faults on RHEL8 in CP2K easyblock ( `#2236 <https://github.com/easybuilders/easybuild-easyblocks/pull/2236> `_ ) * stop silently ignoring failing numpy tests, but include support for ignoring (failing) numpy tests ( `#2238 <https://github.com/easybuilders/easybuild-easyblocks/pull/2238> `_ , `#2271 <https://github.com/easybuilders/easybuild-easyblocks/pull/2271> `_ ) * append to module guesses in easyblocks for Chapel, icc, imkl and impi (rather than overwriting guesses from parent easyblock) ( `#2242 <https://github.com/easybuilders/easybuild-easyblocks/pull/2242> `_ ) * weed out duplicates when determining paths to ``include-fixed`` subdirectory in GCC easyblock ( `#2245 <https://github.com/easybuilders/easybuild-easyblocks/pull/2245> `_ ) * prepend all hardcoded ``/usr/*`` paths with sysroot in Python's setup.py installation script ( `#2246 <https://github.com/easybuilders/easybuild-easyblocks/pull/2246> `_ ) * don't try to patch newer versions of Bazel where the patches won't apply ( `#2249 <https://github.com/easybuilders/easybuild-easyblocks/pull/2249> `_ ) * fix setting of ``$RUNPARALLEL`` in HDF5 easyblock ( `#2250 <https://github.com/easybuilders/easybuild-easyblocks/pull/2250> `_ ) * move ``--build`` and ``--host`` logic to ``run_configure_cmd`` in GCC easyblock ( `#2252 <https://github.com/easybuilders/easybuild-easyblocks/pull/2252> `_ ) * set ``$UCX_TLS`` in module for impi installation on top of UCX, and allow it to be overwritten in impi easyconfig file ( `#2253 <https://github.com/easybuilders/easybuild-easyblocks/pull/2253> `_ , `#2258 <https://github.com/easybuilders/easybuild-easyblocks/pull/2258> `_ ) * enhance PyTorch easyblock to ensure it finds MKL (via ``$MKLROOT`` ) ( `#2257 <https://github.com/easybuilders/easybuild-easyblocks/pull/2257> `_ ) * use integer division to determine number MPI ranks to use in WRF test step ( `#2266 <https://github.com/easybuilders/easybuild-easyblocks/pull/2266> `_ ) * also specify ``locincpth`` and ``glibpth`` configure options for Perl based on ``--sysroot`` ( `#2268 <https://github.com/easybuilders/easybuild-easyblocks/pull/2268> `_ ) * other changes, including: * add link to GCC mailing list thread confirming that binutils should not be configured with ``--with-sysroot=$EASYBUILD_SYSROOT`` when GCC is being configured like that ( `#2215 <https://github.com/easybuilders/easybuild-easyblocks/pull/2215> `_ ) * pass paths to patch one by one to ``apply_regex_substitutions`` in GCC easyblock when ``--sysroot`` is set ( `#2217 <https://github.com/easybuilders/easybuild-easyblocks/pull/2217> `_ ) * workaround for regression in ``apply_regex_substitutions`` introduced in EasyBuild v4.3.1 (which was fixed for v4.3.2) **easyconfigs** * add easyconfigs for new `gobff` toolchain: `gobff/2020.11` + `gobff/2020.06-amd` (`#11761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11761> `_ ) * add easyconfigs for updates of common toolchains: `foss/2020b` , `fosscuda/2020b` , `intel/2020b` , `intelcuda/2020b` * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added example easyconfig files for 41 new software packages: * alsa-lib ( `#11658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11658> `_ ), assimp ( `#11759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11759> `_ ), BioServices ( `#11602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11602> `_ ), carputils ( `#11270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11270> `_ ), cctools ( `#11799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11799> `_ ), code-server ( `#11778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11778> `_ ), CRISPResso2 ( `#11775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11775> `_ ), elfutils ( `#11783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11783> `_ ), EMU ( `#11641 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11641> `_ ), fgbio ( `#11519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11519> `_ ), Flink ( `#11747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11747> `_ ), FreeSASA ( `#11699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11699> `_ ), Geant4-data ( `#11610 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11610> `_ ), geocube ( `#11714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11714> `_ ), IPM ( `#11768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11768> `_ , `#11772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11772> `_ ), libmicrohttpd ( `#11783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11783> `_ ), libStatGen ( `#7982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7982> `_ ), libzeep ( `#11687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11687> `_ ), LLDB ( `#11822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11822> `_ ), meshalyzer ( `#11270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11270> `_ ), meshtool ( `#11270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11270> `_ ), Metagenome-Atlas ( `#11620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11620> `_ ), MLxtend ( `#11601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11601> `_ ), MRChem ( `#11604 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11604> `_ ), MRCPP ( `#11579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11579> `_ ), mxml ( `#11769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11769> `_ ), mxmlplus ( `#11771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11771> `_ ), nanocompore ( `#11690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11690> `_ ), neon ( `#11797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11797> `_ ), Open-Data-Cube-Core ( `#11713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11713> `_ ), OpenSees ( `#11613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11613> `_ ), PEST++ ( `#11565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11565> `_ ), pyFAI ( `#11849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11849> `_ ), pymca ( `#11848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11848> `_ ), RE2 ( `#11718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11718> `_ ), scikit-bio ( `#11660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11660> `_ ), SpaceRanger ( `#11776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11776> `_ ), SplAdder ( `#11607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11607> `_ ), SWAT+ ( `#11615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11615> `_ ), velocyto ( `#11744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11744> `_ ), WCT ( `#11779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11779> `_ ) * added additional easyconfigs for various supported software packages, including: * BBMap 38.87, Boost 1.74.0, CUDA 11.1.1, CellRanger 5.0.0.eb, CheckM 1.1.3, Clang 11.0.0, cuDNN 8.0.4.30, DMTCP 2.6.0, FDS 6.7.5, FFmpeg 4.3.1, GROMACS 2020.4, Geant4 10.6.2, Ghostscript 9.53.3, GitPython 3.1.9, GlobalArrays 5.8, HDF5 1.10.7, h5py 3.1.0, hypothesis 5.41.5, JasPer 2.0.16, LittleCMS 2.11, libedit 20191231, libyaml 0.2.5, MPFR 4.1.0, magma 2.5.4, matplotlib 3.3.3, NCCL 2.8.3, NLopt 2.6.2, Nextflow 20.10.0, netCDF-Fortran 4.5.3, OpenBLAS 0.3.12, OpenMolcas 20.10, Pillow 8.0.1, PnetCDF 1.12.1, PyYAML 5.3.1, packmol 20.2.2, protobuf 3.14.0, psycopg2 2.8.6, pybind11 2.6.0, pycocotools 2.0.2, Qt5 5.14.2, RAxML-NG 1.0.1, RSeQC 4.0.0, rioxarray 0.1.1, SCOTCH 6.1.0, SciPy-bundle 2020.11, SentencePiece 0.1.94, StringTie 2.1.4, SuperLU 5.2.2, scikit-learn 0.23.2, snakemake 5.26.1, tqdm 4.51.0, vsc-mympirun 5.2.5, x264 20201026 * minor enhancements, including: * add extension to R-bundle-Bioconductor 3.11: snpStats ( `#11586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11586> `_ ), SCANVIS ( `#11638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11638> `_ ) * add extensions to R 4.0.0: coloc, Exact, lmom, gld, DescTools ( `#11587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11587> `_ ); nlsem ( `#11733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11733> `_ ); mitools, survey, tableone, jstable ( `#11841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11841> `_ ) * add gxmapi extension (Python bindings) to GROMACS 2020.4 ( `#11640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11640> `_ ) * add missing extensions for QIIME2 to Perl 5.30.2 and 5.32.0 easyconfigs ( `#11654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11654> `_ ) * enable NVPTX offload support in GCCcore 10.2.0 easyconfig ( `#11720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11720> `_ ) * various bug fixes, including: * prevent Minimac4 easyconfig from downloading libStatGen from GitHub ( `#7982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7982> `_ ) * limit build parallelism for RAxML-NG to avoid build failure ( `#10363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10363> `_ ) * fix ``source_urls`` in Geant4 easyconfigs ( `#11596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11596> `_ ) * add alternate checksum for extensions in R easyconfigs: KernSmooth ( `#11600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11600> `_ ), codetools ( `#11616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11616> `_ , `#11736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11736> `_ ) * fix BBMap version check in FusionCatcher v1.20 ( `#11608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11608> `_ ) * add patch for TensorFlow 2.3.1 to fix installation on Arm64 ( `#11614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11614> `_ ) * add patch for GCCcore 10.2 to fix ``__has_include`` regression ( `#11627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11627> `_ ) * change default ``bitmaptype`` for IRkernel to cairo ( `#11645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11645> `_ ) * set ``$JUPYTER_PATH`` to make Jupyter find the ipywidgets extension in recent IPython easyconfigs ( `#11649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11649> `_ ) * add missing dependencies + fix moduleclass in CheckM easyconfigs (should be bio) ( `#11662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11662> `_ ) * use Python 2 build dep for nodejs 12.19.0 ( `#11679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11679> `_ ) * use correct OS deps in UCX ( `#11702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11702> `_ ) * in-place update to magma 2.5.4 for PyTorch 1.2.0 ( `#11723 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11723> `_ ) * in-place update to magma 2.5.4 for PyTorch easyconfigs using fosscuda/2019b toolchain ( `#11726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11726> `_ ) * add missing Java dep to Prokka ( `#11732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11732> `_ ) * add patch to fix possible memory leak in OpenBLAS 0.3.3+ ( `#11745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11745> `_ ) * do not treat warnings as errors in Java v1.8_191-b26-OpenJDK (POWER) ( `#11755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11755> `_ ) * add missing PEAR dependency in easyconfig for GBprocesS v2.3 + enhance sanity check ( `#11767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11767> `_ ) * add missing gnuplot dependency in OpenFOAM easyconfigs ( `#11770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11770> `_ , `#11800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11800> `_ ) * consistently add Java as a dep for prokka 1.14.5 ( `#11782 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11782> `_ ) * stick to http download URL in fetchMG easyconfig (https doesn't work) ( `#11788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11788> `_ ) * other changes: * rename XCfun to XCFun ( `#11603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11603> `_ ) * rename ambiguous Ray easyconfigs to Ray-assembler and Ray-project ( `#11727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11727> `_ ) * change 'rstudio' name to 'RStudio-Server' to agree with official name and better reflect what it provides ( `#11764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11764> `_ ) * rename Sumo to SUMO for consistency ( `#11791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11791> `_ ) .. _release_notes_eb431: EasyBuild v4.3.1 (October 29th 2020) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * further GCC toolchain fixes for aarch64 ( `#3433 <https://github.com/easybuilders/easybuild-framework/pull/3433> `_ ) * take into account ``--include-easyblocks-from-pr`` when uploading test reports ( `#3446 <https://github.com/easybuilders/easybuild-framework/pull/3446> `_ ) * add path to pkg-config files in sysroot to ``$PKG_CONFIG_PATH`` when ``--sysroot`` is specified ( `#3451 <https://github.com/easybuilders/easybuild-framework/pull/3451> `_ ) * add support for NVHPC compiler + toolchain (based on PGI) ( `#3454 <https://github.com/easybuilders/easybuild-framework/pull/3454> `_ ) * check for _VERSION and _PREFIX Cray environment variables with both software and module name ( `#3460 <https://github.com/easybuilders/easybuild-framework/pull/3460> `_ ) * allow including easyblocks from multiple PRs ( `#3480 <https://github.com/easybuilders/easybuild-framework/pull/3480> `_ , `#3481 <https://github.com/easybuilders/easybuild-framework/pull/3481> `_ ) * various bug fixes, including: * avoid ``UnicodeDecodeError`` in ``apply_regex_substitutions`` when patching files that include non-UTF-8 characters ( `#3450 <https://github.com/easybuilders/easybuild-framework/pull/3450> `_ ) * avoid appending lib stubs pattern to RPATH filter over and over again ( `#3452 <https://github.com/easybuilders/easybuild-framework/pull/3452> `_ ) * fix missing string template on error for incorrect extension ``sources`` value ( `#3461 <https://github.com/easybuilders/easybuild-framework/pull/3461> `_ ) * fix compatibility with Python 3.9 by renaming fancy root logger ( `#3465 <https://github.com/easybuilders/easybuild-framework/pull/3465> `_ ) * also remove empty checksums list specified in easyconfig file when using ``--inject-checksums`` ( `#3466 <https://github.com/easybuilders/easybuild-framework/pull/3466> `_ ) * avoid confusing error log message when determining impi version while trying to define value for ``%(mpi_cmd_prefix)s`` template ( `#3474 <https://github.com/easybuilders/easybuild-framework/pull/3474> `_ ) * unset ``$LD_LIBRARY_PATH`` when checking for OS dependencies with ``rpm`` & co ( `#3477 <https://github.com/easybuilders/easybuild-framework/pull/3477> `_ ) * don't change directory in ``download_repo`` function in ``tools.github`` ( `#3486 <https://github.com/easybuilders/easybuild-framework/pull/3486> `_ ) * take ``source_urls`` , ``checksums`` , ``patches`` into account when extension source is specified via ``sources`` ( `#3487 <https://github.com/easybuilders/easybuild-framework/pull/3487> `_ ) * other changes: * consider ``$EB_INSTALLPYTHON`` in ``eb`` command to specify ``python`` command to use for running EasyBuild ( `#3428 <https://github.com/easybuilders/easybuild-framework/pull/3428> `_ ) * use only the sub folder name for ``createSubmoduleDeps`` script ( `#3464 <https://github.com/easybuilders/easybuild-framework/pull/3464> `_ ) **easyblocks** * 2 new software-specific easyblocks: * CFDEMcoupling ( `#1439 <https://github.com/easybuilders/easybuild-easyblocks/pull/1439> `_ ), NVHPC ( `#2190 <https://github.com/easybuilders/easybuild-easyblocks/pull/2190> `_ ) * minor enhancements, including: * support having PyQt5 installed as part of Qt5 in QScintilla easyblock ( `#2040 <https://github.com/easybuilders/easybuild-easyblocks/pull/2040> `_ ) * update TensorFlow easyblock to put Bazel build files in build directory + avoid unnecessary runtime patching ( `#2166 <https://github.com/easybuilders/easybuild-easyblocks/pull/2166> `_ ) * update CBLAS easyblock for toolchains that include imkl ( `#2175 <https://github.com/easybuilders/easybuild-easyblocks/pull/2175> `_ ) * add workaround for duplicate prefix path in Eigen CMake config ( `#2176 <https://github.com/easybuilders/easybuild-easyblocks/pull/2176> `_ ) * enable ``CTEST_OUTPUT_ON_FAILURE`` for CMakeMake test step ( `#2181 <https://github.com/easybuilders/easybuild-easyblocks/pull/2181> `_ ) * add XLA build support to TensorFlow easyblock ( `#2182 <https://github.com/easybuilders/easybuild-easyblocks/pull/2182> `_ ) * also consider libfabric dep ( ``--with-ofi`` ) when setting default OpenMPI configure options ( `#2184 <https://github.com/easybuilders/easybuild-easyblocks/pull/2184> `_ ) * make easyblock for installing CMake aware of ``--sysroot`` ( `#2187 <https://github.com/easybuilders/easybuild-easyblocks/pull/2187> `_ ) * make OpenBLAS respect the parallelism set by easybuild ( `#2191 <https://github.com/easybuilders/easybuild-easyblocks/pull/2191> `_ ) * handle option of building Michigan State University CCT3 & CCSD3A methods in GAMESS_US easyblock ( `#2194 <https://github.com/easybuilders/easybuild-easyblocks/pull/2194> `_ ) * add support to RubyGem easyblock for installing zipped gems ( `#2203 <https://github.com/easybuilders/easybuild-easyblocks/pull/2203> `_ ) * update ScaLAPACK easyblock to support installation with CMake for recent versions (>= v2.1.0) ( `#2205 <https://github.com/easybuilders/easybuild-easyblocks/pull/2205> `_ ) * update Score-P easyblock to add support for NVHPC toolchain ( `#2206 <https://github.com/easybuilders/easybuild-easyblocks/pull/2206> `_ ) * various bug fixes, including: * add ``torch/lib`` subdirectory in Python lib dir to ``$LD_LIBRARY_PATH`` for PyTorch installations ( `#2183 <https://github.com/easybuilders/easybuild-easyblocks/pull/2183> `_ ) * update MUMmer easyblock to use ``apply_regex_substitutions`` and ``copy_file`` functions ( `#2185 <https://github.com/easybuilders/easybuild-easyblocks/pull/2185> `_ ) * configure OpenMPI 4.x with ``--without-verbs`` when using UCX ( `#2188 <https://github.com/easybuilders/easybuild-easyblocks/pull/2188> `_ ) * take into account that zlib may be listed in ``--filter-deps`` in custom easyblock for XML R package ( `#2189 <https://github.com/easybuilders/easybuild-easyblocks/pull/2189> `_ ) * add sanity check commands to Clang easyblock and print warning for missing ncurses ( `#2193 <https://github.com/easybuilders/easybuild-easyblocks/pull/2193> `_ ) * enhance OpenFOAM easyblock to add symlinks for libraries to ensure ``mpi`` versions have preference over ``dummy`` versions ( `#2196 <https://github.com/easybuilders/easybuild-easyblocks/pull/2196> `_ ) * leverage installed OpenSSL/BoringSSL when cURL is used as a dependency for TensorFlow ( `#2197 <https://github.com/easybuilders/easybuild-easyblocks/pull/2197> `_ ) * add ``-ffree-line-length-none`` to gfortran flags in Siesta easyblock ( `#2204 <https://github.com/easybuilders/easybuild-easyblocks/pull/2204> `_ ) * respect ``--disable-mpi-tests`` in Siesta easyblock ( `#2207 <https://github.com/easybuilders/easybuild-easyblocks/pull/2207> `_ ) * other changes, including: * set ``$EB_INSTALLPYTHON`` in module generated for EasyBuild rather than setting ``$EB_PYTHON`` , to allow overriding Python command to be used for running EasyBuild with ``$EB_PYTHON`` ( `#2109 <https://github.com/easybuilders/easybuild-easyblocks/pull/2109> `_ ) * remove unused custom easyblock for DIRAC ( `#2192 <https://github.com/easybuilders/easybuild-easyblocks/pull/2192> `_ , `#2198 <https://github.com/easybuilders/easybuild-easyblocks/pull/2198> `_ ) **easyconfigs** * added easyconfigs for 2 new toolchains: * fosscuda/2020a ( `#11424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11424> `_ ) and intelcuda/2020a ( `#11425 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11425> `_ ) * added example easyconfig files for 75 new software packages: * Bsoft ( `#6551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6551> `_ , `#11537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11537> `_ ), causallift ( `#11436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11436> `_ ), CAVIAR ( `#11158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11158> `_ ), CCfits ( `#11505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11505> `_ ), Cereal ( `#11506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11506> `_ ), CFDEMcoupling ( `#6465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6465> `_ ), Check ( `#11295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11295> `_ ), chewBBACA ( `#11418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11418> `_ ), COMSOL ( `#11513 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11513> `_ ), CUDAcore ( `#11295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11295> `_ ), Dalton ( `#5808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5808> `_ ), DIRAC ( `#11414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11414> `_ ), ESMValTool ( `#6329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6329> `_ ), eSpeak-NG ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), ExifTool ( `#11521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11521> `_ ), FabIO ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), festival ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), fetchMG ( `#11283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11283> `_ ), FHI-aims ( `#11198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11198> `_ ), Flexbar ( `#11305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11305> `_ ), FRUIT ( `#6613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6613> `_ ), FRUIT_processor ( `#6631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6631> `_ ), Gaussian ( `#4247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4247> `_ ), GBprocesS ( `#11512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11512> `_ ), GDRCopy ( `#11295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11295> `_ ), Genome_Profiler ( `#6066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6066> `_ ), groff ( `#11200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11200> `_ ), ILAMB ( `#11309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11309> `_ ), kedro ( `#11436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11436> `_ ), leidenalg ( `#11407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11407> `_ ), libav ( `#6194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6194> `_ ), libmo_unpack ( `#6329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6329> `_ ), libobjcryst ( `#11321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11321> `_ ), makeinfo ( `#11368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11368> `_ ), mauveAligner ( `#11395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11395> `_ ), MBROLA ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), MDSplus-Java ( `#10705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10705> `_ ), MDSplus-Python ( `#10705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10705> `_ ), MyCC ( `#11283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11283> `_ ), nanomax-analysis-utils ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), Nek5000 ( `#6408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6408> `_ ), NVHPC ( `#11391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11391> `_ ), OPERA-MS ( `#11410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11410> `_ ), ORFfinder ( `#7031 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7031> `_ ), phonemizer ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), Pingouin ( `#11280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11280> `_ ), Pint ( `#11151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11151> `_ ), pydantic ( `#11151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11151> `_ ), pyobjcryst ( `#11321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11321> `_ ), PyOpenCL ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), pyspoa ( `#11438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11438> `_ ), QtPy ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), Qtconsole ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), rasterio ( `#11468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11468> `_ ), rasterstats ( `#11468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11468> `_ ), ReMatCh ( `#6067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6067> `_ ), Ruby-Tk ( `#6613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6613> `_ ), SBCL ( `#11413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11413> `_ ), scikit-uplift ( `#11432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11432> `_ ), SDL ( `#6202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6202> `_ ), SDL2 ( `#6203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6203> `_ ), SDL2_image ( `#6203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6203> `_ ), SDL_image ( `#6202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6202> `_ ), SeqKit ( `#11538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11538> `_ ), silx ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), SiNVICT ( `#11404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11404> `_ ), sonic ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), speech_tools ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), Statistics-R ( `#11274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11274> `_ ), SUMO ( `#11435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11435> `_ ), tidybayes ( `#11335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11335> `_ ), treatSens ( `#11431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11431> `_ ), tsne ( `#11283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11283> `_ ), wandb ( `#11450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11450> `_ ), WisecondorX ( `#11399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11399> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 9.2.1, ASE 3.20.1, Autotools 20200321, Bazel 3.6.0, Biopython 1.78, CCL 1.12, CMake 3.18.4, CUDA 11.0.2, cURL 7.72.0, deepdiff 5.0.2, fmt 7.0.3, GATK 4.1.8.1, GLib 2.66.1, GROMACS 2020.3, GTK+ 3.24.23, git 2.28.0, HMMER 3.3.1, Horovod 0.20.3, ICU 67.1, IPython 7.18.1, ichorCNA 0.3.2, JupyterHub 1.1.0, JupyterLab 2.2.8, LLVM 11.0.0, libarchive 3.4.3, libcircle 0.3, libevent 2.1.12, libfabric 1.11.0, libglvnd 1.3.2, libunwind 1.4.0, libxcb 1.13, MAFFT 7.471, MDSplus 7.96.12, MEGAHIT 1.2.9, MMseqs2 11-e1a1c, Mako 1.1.3, Mesa 20.2.1, Meson 0.55.3, medaka 1.1.3, mpifileutils 0.10.1, NASM 2.15.05, NSPR 4.29, NSS 3.57, Ninja 1.10.1, nettle 3.6, nglview 2.7.7, nodejs 12.19.0, OpenImageIO 2.1.12.0, OpenRefine 3.4.1, OpenSSL 1.1.1h, PCRE2 10.35, PSI4 1.3.2, Pango 1.47.0, PyGEOS 0.8, PyOpenGL 3.1.5, PyQt5 5.15.1, PyQtGraph 0.11.0, PyRETIS 2.5.0, Python 3.8.6, pandas 1.1.2, phonopy 2.7.1, picard 2.22.1, pixman 0.40.0, protobuf 3.13.0, pyEGA3 3.4.0, pytest 6.0.1, ReFrame 3.2. re2c 2.0.3, SAMtools 1.11, SCons 4.0.1, SQLite 3.33.0, Spyder 4.1.5, Subversion 1.14.0, sbt 1.3.13, spglib-python 1.16.0, spoa 4.0.0, TINKER 8.8.1, TRIQS 3.0.0, Taiyaki 5.1.0, TensorFlow 2.3.1, Tkinter 2.7.18 + 3.8.6, torchvision 0.7.0, UCX 1.9.0, V8 3.2.0, VirtualGL 2.6.2, vsc mympirun 5.2.0 X11 20201008, XGBoost 1.2.0, XZ 5.2.5, Xerces-C++ 3.2.3, xarray 0.16.1, ZeroMQ 4.3.3, zstd 1.4.5 * minor enhancements, including: * use more EasyBuild installed dependencies for TensorFlow 2.2.0 ( `#11224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11224> `_ ) * add additional extensions to R 4.0.0 easyconfig ( `#11340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11340> `_ , `#11430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11430> `_ , `#11487 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11487> `_ ) * add additional extensions to Bioconductor 3.11 bundle ( `#11341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11341> `_ , `#11488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11488> `_ ) * make libtirpc easier to use as replacement of rpc in glibc (for RHEL8) ( `#11355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11355> `_ ) * add libevent, libfabric and PMIx dependencies to OpenMPI 4.0.3 (for foss/2020a & iomkl/2020a) ( `#11387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11387> `_ , `#11568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11568> `_ ) * build LibTIFF with ``-fPIC`` ( `#11527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11527> `_ ) * update Java/1.8 wrapper to also support aarch64 ( `#11545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11545> `_ ) * various bug fixes, including: * add Python 3 as build dep for Xvfb 1.20.8 easyconfigs ( `#10745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10745> `_ ) * patch out bug in collective primitive in TensorFlow 2.2.0 ( `#11175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11175> `_ ) * add missing groff build dependency for Perl (provides nroff tool requires to install man pages) ( `#11200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11200> `_ ) * add pocl dependency to GDAL easyconfig using fosscuda/2019b toolchain to make sure it builds on POWER ( `#11273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11273> `_ ) * add libtirpc as a build dep for HDF to fix installation on RHEL8 ( `#11279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11279> `_ ) * fix build problems with make 4.2.1 on RHEL8 ( `#11282 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11282> `_ , `#11371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11371> `_ ) * change ``$LIBS`` in Ghostscript 9.27 easyconfig to include location of zlib library to link with ( `#11291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11291> `_ ) * remove ``--no-dist-info`` configuration option for SIP in recent PyQt5 easyconfigs ( `#11307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11307> `_ ) * make sure correct zlib is used in recent Ghostscript easyconfigs ( `#11319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11319> `_ ) * remove GLog and GFlags from PyTorch 1.2.0 ( `#11327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11327> `_ ), 1.3.1 ( `#11325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11325> `_ ), 1.4.0 ( `#11322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11322> `_ ) and 1.6.0 ( `#11323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11323> `_ ) * use PyTorch easyblock for PyTorch 1.3.1 ( `#11325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11325> `_ ) * add missing git build dependency for OpenImageIO 2.0.12 ( `#11328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11328> `_ ) * fix HDF 4.2.14 easyconfigs for RHEL8 ( `#11330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11330> `_ ) * add patch to fix installation of LAMMPS 7Aug2019 on AMD Epyc systems ( `#11334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11334> `_ ) * fix dependency on Bowtie of v0.x in seq2HLA easyconfigs ( `#11339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11339> `_ ) * fix installation of Hadoop v2.10.0 on RHEL8 ( `#11358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11358> `_ ) * add patch to fix installation of Sailfish v0.10.1 on RHEL8 ( `#11364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11364> `_ ) * add patch to fix installation of FuSeq v1.1.2 on RHEL8 ( `#11365 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11365> `_ ) * fix installation of Qt5 5.14.1 on top of zlib provided by Gentoo + stick to Python 2 as build dep ( `#11385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11385> `_ , `#11386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11386> `_ ) * add patch for LAME configure script to make it check for correct ncurses symbol ( `#11388 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11388> `_ ) * add protobuf-python as a dependency and corresponding sanity check to PyTorch 1.6 ( `#11390 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11390> `_ ) * fix Multiwfn 3.6 installation on RHEL8 ( `#11402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11402> `_ ) * fix OpenFOAM 2.3.1 installation with intel/2019b on RHEL8 ( `#11409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11409> `_ ) * fix broken worker easyconfigs ( `#11412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11412> `_ ) * add ncurses runtime dependency to Clang easyconfigs ( `#11415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11415> `_ , `#11416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11416> `_ , `#11419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11419> `_ , `#11472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11472> `_ ) * fix installation of Bioconductor 3.11 bundle on aarch64 ( `#11417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11417> `_ ) * add patch to libunwind fixing a failure on POWER ( `#11421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11421> `_ ) * fix infinite loop build bug on ppc64le for R 4.0.0 ( `#11428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11428> `_ ) * fix compilation of Qt5 v5.12.3 and v5.13.1 on Ubuntu 20.04 ( `#11434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11434> `_ ) * fix PyVCF easyconfig, only supports Python 2 ( `#11437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11437> `_ ) * add patches to fix miscomputation (on POWER) and performance issues for OpenBLAS ( `#11443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11443> `_ , `#11444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11444> `_ , `#11445 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11445> `_ ) * add missing DB dependency (required for DB_File) to easyconfigs for Perl ( `#11451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11451> `_ , `#11452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11452> `_ ) * fix dbarts extension in R v4.0.0 easyconfigs for non-x86_64 ( `#11453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11453> `_ ) * use Homebrew source mirror to auto-download sources for DB v18.1.25 and v18.1.32 ( `#11454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11454> `_ ) * add missing UnZip dependency for Python 3.8.2 ( `#11458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11458> `_ ) * add support for building OpenBLAS on ARM TSV110 with GCC 8.3 ( `#11464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11464> `_ ) * allow Kent_tools to build when MySQL installed at the OS level ( `#11471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11471> `_ ) * add missing ``moduleclass`` to easyconfigs for: * Arlequin 3.5.2.2 ( `#11473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11473> `_ ), MEGAHIT 1.2.8 ( `#11474 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11474> `_ ) and 1.2.9 ( `#11475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11475> `_ ), PyCUDA 2019.1.2 ( `#11476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11476> `_ ) * fix source for SQLite 3.31.1 ( `#11483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11483> `_ ) * fix installation of worker 1.6.11 with intel/2019b on RHEL 8.2 ( `#11498 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11498> `_ ) * fix checksum in NAMD 2.12 easyconfigs + add source URL ( `#11515 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11515> `_ ) * add BLAS/LAPACK check to GPAW patch adding EasyBuild configuration files ( `#11523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11523> `_ ) * backport fixes for Score-P v6.0 ( `#11540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11540> `_ ) * add XZ build dep to easyconfigs for libarchive v3.4.0 and v3.4.2 ( `#11561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11561> `_ ) * add patch for OpenMPI 3.1.4 adding device parameters for ConnectX-6 ( `#11575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11575> `_ ) * other changes: * update README on constructing source file for MATLAB ( `#6341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6341> `_ ) * remove easyconfigs for Taiyaki that depend on PyTorch 1.3.1, since latest version still requires PyTorch 1.2.0 ( `#11301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11301> `_ ) * make CI error messages less confusing (\"is\" -> \"should be\") ( `#11314 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11314> `_ ) * remove extensions from R-bundle-Bioconductor 3.11 easyconfigs that are also included in R 4.0.0 ( `#11429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11429> `_ ) * cache M4 source tarball to avoid test failures because of download problems ( `#11469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11469> `_ ) * rename jupyterhub to JupyterHub ( `#11571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11571> `_ ) .. _release_notes_eb430: EasyBuild v4.3.0 (September 13th 2020) -------------------------------------- feature release **framework** * various enhancements, including: * add script to create ``sources`` entries for git submodules ( `#3369 <https://github.com/easybuilders/easybuild-framework/pull/3369> `_ , `#3436 <https://github.com/easybuilders/easybuild-framework/pull/3436> `_ ) * add templates for CUDA compute capabilities ( `#3382 <https://github.com/easybuilders/easybuild-framework/pull/3382> `_ ) * ``%(cuda_compute_capabilities)s`` , ``%(cuda_sm_comma_sep)s`` , ``%(cuda_sm_space_sep)s`` * add EasyBuild configuration option ``--generate-devel-module`` ( `#3388 <https://github.com/easybuilders/easybuild-framework/pull/3388> `_ ) * to allow disabling generating of \"devel\" modules via ``--disable-generate-devel-module`` * set up a minimal build environment when using system compiler ( `#3399 <https://github.com/easybuilders/easybuild-framework/pull/3399> `_ ) * by default, ``$CC`` is set to ``gcc`` and ``$CXX`` is set to ``g++`` when using ``system`` toolchain * minimal build environment can be customized via ``--minimal-build-env`` configuration option * add ``--sysroot`` configuration option to specify alternative location of system root ( `#3419 <https://github.com/easybuilders/easybuild-framework/pull/3419> `_ ) * this is useful when installing software in a Gentoo Prefix environment (for example) * various bug fixes, including: * allow including easyblocks from multiple locations, by combining ``--include-easyblocks`` and ``--include-easyblocks-from-pr`` ( `#3311 <https://github.com/easybuilders/easybuild-framework/pull/3311> `_ ) * also escape backslashes in ``quote_py_str()`` ( `#3386 <https://github.com/easybuilders/easybuild-framework/pull/3386> `_ ) * use one argument ``module swap`` statements in Tcl modulefiles (required by Modules 4.2.3+) ( `#3397 <https://github.com/easybuilders/easybuild-framework/pull/3397> `_ ) * fix copying of (non-existing) file with ``apply_patch`` ( `#3400 <https://github.com/easybuilders/easybuild-framework/pull/3400> `_ ) * create symlink from ``lib64`` to ``lib`` subdir in installation directories to avoid that GCC prefers ``/lib64`` system directories ( `#3401 <https://github.com/easybuilders/easybuild-framework/pull/3401> `_ ) * fix default value for ``lib64_fallback_sanity_check`` build option ( `#3402 <https://github.com/easybuilders/easybuild-framework/pull/3402> `_ ) * correctly determine commit status in ``--merge-pr`` ( `#3406 <https://github.com/easybuilders/easybuild-framework/pull/3406> `_ ) * stop installing ccache wrapper for Fortran compiler ( `#3409 <https://github.com/easybuilders/easybuild-framework/pull/3409> `_ ) * fix issues with applying PR patch in ``--from-pr`` ( `#3414 <https://github.com/easybuilders/easybuild-framework/pull/3414> `_ ) * make ``RPATH`` wrapper script more robust by using ``python -E -s -S`` to run ``rpath_args.py`` ( `#3422 <https://github.com/easybuilders/easybuild-framework/pull/3422> `_ ) * don't inject ``-Wl,-rpath`` options when ``-x c++-header`` compiler option is used ( `#3424 <https://github.com/easybuilders/easybuild-framework/pull/3424> `_ ) * fix lack of ``-mno-recip`` on aarch64 by tweaking GCC options used when ``precise`` toolchain option is enabled ( `#3425 <https://github.com/easybuilders/easybuild-framework/pull/3425> `_ ) * make sure ``self.start_dir`` is set in ``ExtensionEasyBlock`` ( `#3426 <https://github.com/easybuilders/easybuild-framework/pull/3426> `_ , `#3435 <https://github.com/easybuilders/easybuild-framework/pull/3435> `_ ) * exclude local variables from typo check in easyconfig files ( `#3427 <https://github.com/easybuilders/easybuild-framework/pull/3427> `_ ) * other changes: * stick to cryptography 2.9.2 when using Python 2.7 to avoid broken test suite in CI ( `#3392 <https://github.com/easybuilders/easybuild-framework/pull/3392> `_ ) * automatically enable ``--ignore-locks`` with ``--fetch`` ( `#3404 <https://github.com/easybuilders/easybuild-framework/pull/3404> `_ ) * switch to status badge based on tests run in GitHub Actions CI in README ( `#3415 <https://github.com/easybuilders/easybuild-framework/pull/3415> `_ ) * make ``flake8`` code style checks pass ( `#3416 <https://github.com/easybuilders/easybuild-framework/pull/3416> `_ , `#3417 <https://github.com/easybuilders/easybuild-framework/pull/3417> `_ ) * limit Travis to only test with Python 2.6 + Lmod 7 ( `#3418 <https://github.com/easybuilders/easybuild-framework/pull/3418> `_ ) * ignore deprecation warning raised for cryptography when using Python 3.5 produced by output of test suite ( `#3423 <https://github.com/easybuilders/easybuild-framework/pull/3423> `_ ) **easyblocks** * 2 new software-specific easyblocks: * pybind11 ( `#2115 <https://github.com/easybuilders/easybuild-easyblocks/pull/2115> `_ ), PyTorch ( `#2104 <https://github.com/easybuilders/easybuild-easyblocks/pull/2104> `_ ) * minor enhancements, including: * update MATLAB easyblock to use new binary installer for versions >= 2020a ( `#2058 <https://github.com/easybuilders/easybuild-easyblocks/pull/2058> `_ ) * add ``use_pip_requirement`` custom easyconfig parameter to PythonPackage easyblock to allow providing a requirements file to the ``pip`` command, as a source ( `#2064 <https://github.com/easybuilders/easybuild-easyblocks/pull/2064> `_ ) * update CP2K easyblock for recent versions (>= 7.0) ( `#2069 <https://github.com/easybuilders/easybuild-easyblocks/pull/2069> `_ ) * add ``multi_deps`` support into custom easyblock for QScintilla ( `#2077 <https://github.com/easybuilders/easybuild-easyblocks/pull/2077> `_ ) * update Mothur easyblock for v1.44.0 and higher ( `#2084 <https://github.com/easybuilders/easybuild-easyblocks/pull/2084> `_ ) * update MotionCor2 easyblock to add support for v1.3.2 ( `#2100 <https://github.com/easybuilders/easybuild-easyblocks/pull/2100> `_ ) * update Tinker easyblock to handle skipping of tests depending on version and link with ``fftw_omp`` ( `#2102 <https://github.com/easybuilders/easybuild-easyblocks/pull/2102> `_ ) * launch test & sanity check commands through ``mpirun`` for netcdf4-python if MPI support is enabled ( `#2106 <https://github.com/easybuilders/easybuild-easyblocks/pull/2106> `_ ) * check for installation of pip & setuptools in Python 3.4+ ( `#2108 <https://github.com/easybuilders/easybuild-easyblocks/pull/2108> `_ ) * update QuantumESPRESSO easyblock to support version 6.6 ( `#2112 <https://github.com/easybuilders/easybuild-easyblocks/pull/2112> `_ ) * allow NAMD to be built on POWER, and also use the CUDA arch info ( `#2113 <https://github.com/easybuilders/easybuild-easyblocks/pull/2113> `_ , `#2123 <https://github.com/easybuilders/easybuild-easyblocks/pull/2123> `_ ) * update Libint easyblock for versions >= 2.6.0 + add custom easyconfig parameter to enable Fortran support ( `#2116 <https://github.com/easybuilders/easybuild-easyblocks/pull/2116> `_ ) * update TensorFlow easyblock to use system/EasyBuild installed libraries ( `#2117 <https://github.com/easybuilders/easybuild-easyblocks/pull/2117> `_ , `#2165 <https://github.com/easybuilders/easybuild-easyblocks/pull/2165> `_ , `#2163 <https://github.com/easybuilders/easybuild-easyblocks/pull/2163> `_ , `#2172 <https://github.com/easybuilders/easybuild-easyblocks/pull/2172> `_ ) * add support in NAMD easyblock to pass additional C++ compiler options for building Charm++ component with + wrap them in single quotes ( `#2118 <https://github.com/easybuilders/easybuild-easyblocks/pull/2118> `_ ) * automatically add required ``-G Ninja`` option when using CMakeNinja easyblock + add ``generator`` custom easyconfig parameter for CMakeMake ( `#2120 <https://github.com/easybuilders/easybuild-easyblocks/pull/2120> `_ ) * make several easyblocks aware of ``--sysroot`` EasyBuild configuration option: binutils ( `#2147 <https://github.com/easybuilders/easybuild-easyblocks/pull/2147> `_ , `#2159 <https://github.com/easybuilders/easybuild-easyblocks/pull/2159> `_ ), CMakeMake ( `#2152 <https://github.com/easybuilders/easybuild-easyblocks/pull/2152> `_ ), GCC ( `#2143 <https://github.com/easybuilders/easybuild-easyblocks/pull/2143> `_ ), Perl ( `#2142 <https://github.com/easybuilders/easybuild-easyblocks/pull/2142> `_ ), Python ( `#2148 <https://github.com/easybuilders/easybuild-easyblocks/pull/2143> `_ , `#2149 <https://github.com/easybuilders/easybuild-easyblocks/pull/2149> `_ ) * make Mesa easyblock aware of aarch64 ( `#2153 <https://github.com/easybuilders/easybuild-easyblocks/pull/2153> `_ ) * enhance sanity check in custom Doxygen easyblock to catch broken installation ( `#2171 <https://github.com/easybuilders/easybuild-easyblocks/pull/2171> `_ ) * various bug fixes, including: * make TensorFlow easyblock ignore the ``PKG_REVISION`` identifier if NCCL version if it exists ( `#2085 <https://github.com/easybuilders/easybuild-easyblocks/pull/2085> `_ ) * remove version check against the ``version.txt`` file in CUDA easyblock ( `#2097 <https://github.com/easybuilders/easybuild-easyblocks/pull/2097> `_ ) * add ``lib`` symlink in tbb installation directory when building from source ( `#2103 <https://github.com/easybuilders/easybuild-easyblocks/pull/2103> `_ ) * handle GNUInstallDirs special cases in CMakeMake easyblock ( `#2105 <https://github.com/easybuilders/easybuild-easyblocks/pull/2105> `_ , `#2124 <https://github.com/easybuilders/easybuild-easyblocks/pull/2124> `_ ) * patch ELPA's ``manual_cpp`` script to fix hardcoded ``/usr/bin/python`` ( `#2107 <https://github.com/easybuilders/easybuild-easyblocks/pull/2107> `_ ) * make TensorFlow easyblock also set ``$GCC_HOST_COMPILER_PREFIX`` to specify binutils location ( `#2110 <https://github.com/easybuilders/easybuild-easyblocks/pull/2110> `_ ) * ensure stand-alone Python package being installed is in view when running ``pip check`` by loading fake module first ( `#2114 <https://github.com/easybuilders/easybuild-easyblocks/pull/2114> `_ ) * be more patient when running interactive configure script for WRF ( `#2119 <https://github.com/easybuilders/easybuild-easyblocks/pull/2119> `_ ) * make sure ``self.start_dir`` is set to a full path before constructing installation command in RPackage easyblock ( `#2125 <https://github.com/easybuilders/easybuild-easyblocks/pull/2125> `_ ) * correctly check whether ``modinc`` easyconfig parameter is set to ``True`` in CP2K easyblock ( `#2138 <https://github.com/easybuilders/easybuild-easyblocks/pull/2138> `_ ) * update PSI easyblock to correctly find Python and enable PCMSolver/CheMPS2 ( `#2141 <https://github.com/easybuilders/easybuild-easyblocks/pull/2141> `_ ) * fix running GROMACS tests when using ``eb --rpath`` ( `#2144 <https://github.com/easybuilders/easybuild-easyblocks/pull/2144> `_ , `#2154 <https://github.com/easybuilders/easybuild-easyblocks/pull/2154> `_ ) * remove existing Python installation directory if both ``eb --rpath`` and ``--enable-optimizations`` configuration option are used ( `#2146 <https://github.com/easybuilders/easybuild-easyblocks/pull/2146> `_ ) * ensure ``libQt5Core.so`` is compatible with older Linux kernels by disabling ``renameat2`` and ``getentropy`` features ( `#2151 <https://github.com/easybuilders/easybuild-easyblocks/pull/2151> `_ ) * solve issue where pybind11 picks up on the system Python instead of one provided by a module ( `#2158 <https://github.com/easybuilders/easybuild-easyblocks/pull/2158> `_ ) * fix Qt5 easyblock to support installation on Arm/aarch64 (requires platform to be ``linux-g++`` ) ( `#2160 <https://github.com/easybuilders/easybuild-easyblocks/pull/2160> `_ ) * fix OpenFOAM easyblock to support installation on Arm/aarch64 systems ( `#2162 <https://github.com/easybuilders/easybuild-easyblocks/pull/2162> `_ ) * explicitly enable/disable CUDA options in PyTorch easyblock + fix download check in sanity check + fix for disabling of *NNPACK on POWER systems ( `#2164 <https://github.com/easybuilders/easybuild-easyblocks/pull/2164> `_ ) * fix sanity check in Mathematica easyblock for 11.x versions older than 11.3 ( `#2168 <https://github.com/easybuilders/easybuild-easyblocks/pull/2168> `_ ) * unset ``$COLUMNS`` if it is set to ``0`` before running Perl's configure script ( `#2169 <https://github.com/easybuilders/easybuild-easyblocks/pull/2169> `_ ) * other changes: * filter out Python in SLEPc configure ( `#2101 <https://github.com/easybuilders/easybuild-easyblocks/pull/2101> `_ ) * switch to status badge based on tests run in GitHub Actions CI in README ( `#2126 <https://github.com/easybuilders/easybuild-easyblocks/pull/2126> `_ ) * fix code style issues to make ``flake8`` checks pass ( `#2128 <https://github.com/easybuilders/easybuild-easyblocks/pull/2128> `_ - `#2137 <https://github.com/easybuilders/easybuild-easyblocks/pull/2137> `_ , `#2140 <https://github.com/easybuilders/easybuild-easyblocks/pull/2140> `_ , `#2145 <https://github.com/easybuilders/easybuild-easyblocks/pull/2145> `_ , `#2155 <https://github.com/easybuilders/easybuild-easyblocks/pull/2155> `_ ) * limit test configurations in Travis CI to only Python 2.6 ( `#2139 <https://github.com/easybuilders/easybuild-easyblocks/pull/2139> `_ ) **easyconfigs** * added easyconfigs for 2 new toolchains: * gomkl/2020a and iomkl/2020a ( `#11036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11036> `_ ) * added example easyconfig files for 49 new software packages: * almosthere ( `#11152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11152> `_ ), arcasHLA ( `#10867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10867> `_ ), BioPP ( `#11113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11113> `_ ), Bracken ( `#10829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10829> `_ ), BUFRLIB ( `#11140 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11140> `_ ), Calib ( `#11111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11111> `_ ), CellRanger-ATAC ( `#11186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11186> `_ ), edlib ( `#10470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10470> `_ , `#11246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11246> `_ ), flatbuffers ( `#11109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11109> `_ ), gengetopt ( `#11117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11117> `_ ), graphite2 ( `#11168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11168> `_ ), HeFFTe ( `#10990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10990> `_ ), hierfstat ( `#11249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11249> `_ ), immunedeconv ( `#11136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11136> `_ ), ioapi ( `#10959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10959> `_ ), itpp ( `#10958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10958> `_ ), LiBis ( `#11059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11059> `_ ), libosmium ( `#11024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11024> `_ ), limix-bgen ( `#11152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11152> `_ ), minibar ( `#10470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10470> `_ , `#11246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11246> `_ ), misha ( `#11127 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11127> `_ ), MOABS ( `#10747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10747> `_ ), moonjit ( `#11163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11163> `_ ), NGLess ( `#11128 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11128> `_ ), nsync ( `#11109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11109> `_ ), openCARP ( `#11117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11117> `_ ), OpenForceField ( `#11048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11048> `_ ), OpenMMTools ( `#11046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11046> `_ ), OpenMS ( `#10994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10994> `_ ), PennCNV ( `#10986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10986> `_ ), plantcv ( `#10968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10968> `_ ), PlasmaPy ( `#10732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10732> `_ ), Portcullis ( `#11038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11038> `_ ), PycURL ( `#11169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11169> `_ ), PyGEOS ( `#11110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11110> `_ ), pySCENIC ( `#11115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11115> `_ ), Reapr ( `#9296 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9296> `_ ), RnBeads ( `#11142 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11142> `_ ), sf ( `#11248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11248> `_ ), SLiM ( `#11172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11172> `_ ), stars ( `#11215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11215> `_ , `#11248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11248> `_ ), Sumo ( `#11071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11071> `_ ), Telescope ( `#10943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10943> `_ ), tensorflow-probability ( `#10312 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10312> `_ ), texlive ( `#11168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11168> `_ ), tidymodels ( `#11010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11010> `_ ), Trycycler ( `#11207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11207> `_ ), umi4cPackage ( `#11127 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11127> `_ ), variant_tools ( `#11169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11169> `_ ) * added additional easyconfigs for various supported software packages, including: * Bazel 3.4.1, Bonito 0.2.2, binutils 2.35, CP2K 7.1, Clang 10.0.1, ccache 3.7.11, ctffind 4.1.14, datamash 1.5, ELPA 2020.05.001, Emacs 26.3, Flye 2.8.1, GCC(core) 10.2.0, googletest 1.10.0, HDF 4.2.15, Horovod 0.19.5, imageio 2.9.0, JUBE 2.4.0, Julia 1.5.1, Kent_tools 401, Libint 2.6.0, libxsmm 1.16.1, MDSplus 7.96.8, MDTraj 1.9.4, MariaDB 10.4.13, Meson 0.55.1, MotionCor2 1.3.2, NAMD 2.14, NCO 4.9.3, OpenFOAM 8, OpenMPI 4.0.5, OptiX 6.5.0, Pandoc 2.10, Perl 5.32.0, PostgreSQL 12.4, PyCUDA 2019.1.2, PyFR 1.9.0, PyTorch 1.6.0, PyZMQ 18.1.1, patchelf 0.12, pocl 1.5, pycocotools 2.0.1, pyproj 2.6.1.post1, QuantumESPRESSO 6.6, RDKit 2020.03.3, rgdal 1.5, Salmon 1.3.0, Spark 3.0.0, scikit-image 0.17.1, scipy 1.4.1, snpEff 5.0, sympy 1.6.2, TINKER 8.7.2, tqdm 4.47.0, Unicycler 0.4.8, VMD 1.9.4a43 * minor enhancements, including: * also build Python libraries for ParaView 5.8.0 ( `#10927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10927> `_ ) * add extensions to recent Bioconductor easyconfigs: FlowSorted.Blood.EPIC ( `#11021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11021> `_ ), DRIMSeq + stageR ( `#11053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11053> `_ ) * add extensions to recent R easyconfigs: AICcmodavg + biomod2 ( `#11030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11030> `_ ), qqman ( `#11052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11052> `_ ), poLCA ( `#11081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11081> `_ ), coxed ( `#11094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11094> `_ ), testit + data.tree ( `#11135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11135> `_ ), celestial + fasterize ( `#11206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11206> `_ ) * add Config::Simple extension to Perl 5.30.x easyconfigs ( `#11051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11051> `_ ) * update TensorFlow v2.1.0 ( `#11109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11109> `_ ) and v2.0.0 ( `#11233 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11233> `_ ) easyconfigs to provide more dependencies via EasyBuild * add CUDA compute capabilities to torchvision-0.5.0 ( `#11241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11241> `_ ) * various bug fixes, including: * patch to fix exporting images with PyQtGraph v0.10.0 ( `#10848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10848> `_ ) * add missing Python dependency to PETSc 3.11.1 ( `#10907 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10907> `_ ) and PETSc 3.12.x ( `#10908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10908> `_ ) easyconfigs * use CMakeMake easyblock for installing magma to avoid C++11 related failures on POWER ( `#10929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10929> `_ ) * fix source URL for Graphviz v2.40.1 ( `#10944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10944> `_ ) * fix ``lapack.h`` for use with C++ in OpenBLAS 0.3.9 easyconfigs ( `#10960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10960> `_ ) * add missing build dep on M4 for 2019b versions of netCDF-Fortran ( `#10972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10972> `_ ) * update easyconfig for PyTorch 1.4 to use custom easyblock and run on POWER ( `#11000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11000> `_ ) * create symlinks to incorrectly named directories in OpenBabel-3.1.1 so ``$BABEL_LIBDIR`` and ``$BABEL_DATADIR`` work properly ( `#11004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11004> `_ ) * add missing Python build dep to recent ELPA easyconfigs ( `#11011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11011> `_ ) * use ``is_generic_easyblock`` from filetools in easyconfigs test suite ( `#11020 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11020> `_ ) * fix sources in Portcullis v1.2.2 easyconfigs ( `#11038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11038> `_ ) * add patch for FFTW 3.3.8 to avoid use of ``-no-gcc`` when building with Intel compilers, to fix installation on CentOS 8 (cfr. `#10932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10932> `_ ) ( `#11050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11050> `_ ) * add missing Python build dep for BEDTools 2.29.x ( `#11054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11054> `_ ) * add missing SciPy-bundle and Kent_tools (for bedPartition command) dependencies to FLAIR ( `#11057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11057> `_ ) * add patch to fix bug in LiBiS v20200428 easyconfig ( `#11059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11059> `_ ) * use FFTW provided via EasyBuild for ScaFaCoS ( `#11060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11060> `_ ) * fix undefined reference to ``qfloat16::mantissatable`` in Qt5.14.1 ( `#11063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11063> `_ ) * add alternative checksum for rstantools 2.0.0 extension ( `#11081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11081> `_ ) * update checksums for R 3.6.0 packages and add patch for ppc ( `#11088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11088> `_ ) * install scikit-learn 0.23.1 as a bundle and include required threadpoolctl extension ( `#11089 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11089> `_ ) * update pybind11 easyconfigs to use custom easyblock to install with pip ( `#11091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11091> `_ ) * add recent six as extension to archspec installed on top of Python 3.7.4 ( `#11092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11092> `_ ) * add missing Seaborn dependency to LiBis easyconfig ( `#11095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11095> `_ ) * add missing dependencies for OpenPIV + switch to PythonBundle easyblock and include progressbar2 as extension ( `#11096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11096> `_ ) * add missing argparse dep to TEtranscripts easyconfig ( `#11097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11097> `_ ) * add missing pkg-config build dep in Octave 5.1.0 easyconfigs ( `#11100 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11100> `_ ) * don't statically link MUSCLE, to avoid requiring that glibc-static is installed in OS ( `#11102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11102> `_ ) * add missing pkg-config build dependency in recent R-bundle-Bioconductor easyconfigs ( `#11104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11104> `_ ) * add patch to h5py 2.8.0 ( `#11119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11119> `_ ) and 2.9.0 ( `#11118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11118> `_ ) easyconfigs to avoid MPI_Init on ``import h5py`` * add patch to support libbfd 2.34 API change in Score-P 6.0 ( `#11123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11123> `_ ) * use pip to install protobuf-python in 2019b toolchain (requires re-downloading source tarball!) ( `#11143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11143> `_ , `#11260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11260> `_ ) * add missing Keras-Applications extension to TensorFlow 2.2.0 easyconfigs with ``foss*/2019b`` toolchain ( `#11156 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11156> `_ ) * add missing pocl dependency in R 3.6.0 ( `#11157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11157> `_ ) * update Meson build dep to 0.55.1 for GLib, X11, Mesa & co to fix aggressive RPATH stripping ( `#11178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11178> `_ ) * disable generating of man pages in recent libdrm easyconfigs to avoid installation failure if docbook-xsl is not installed ( `#11182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11182> `_ ) * add fontconfig and bzip2 as direct dependencies for Qt5 to fix installation with ``--rpath`` ( `#11183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11183> `_ ) * fix failing ``make check`` for MPFR 4.x ( `#11187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11187> `_ ) and GMP ( `#11188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11188> `_ ) when installing with ``eb --rpath`` * add pkg-config as a build dependency for libglvnd ( `#11189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11189> `_ ) * add missing libiconv dep in recent Doxygen easyconfigs ( `#11191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11191> `_ , `#11257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11257> `_ ) * enhance Java/11 wrapper to also support for aarch64/Arm ( `#11192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11192> `_ ) * add pkg-config as a build dependency to Ghostscript 9.52, needed on aarch64/arm ( `#11194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11194> `_ ) * add patch for pycrypto extension in recent Python easyconfigs to remove hardcoded ``/usr/include`` which causes problems when ``eb --sysroot`` is used ( `#11202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11202> `_ ) * fix installation of R v3.6.3 and v4.0.0 with foss/2020a on Arm (aarch64) ( `#11213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11213> `_ ) * update PyTorch 1.4 easyconfigs to use custom easyblock (and do less downloading during installations) ( `#11219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11219> `_ ) * other changes: * don't require custom ``sanity_check_paths`` for CUDA bundle easyconfigs ( `#10936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10936> `_ ) * move intervaltree and sortedcontainers to main Python easyconfigs ( `#10969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10969> `_ , `#10970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10970> `_ ) * disable qtwayland in Qt5 v5.14.1 ( `#11107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11107> `_ ) * remove mklml (small MKL) from PyTorch 1.3.1 and 1.4.0 easyconfigs ( `#11019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11019> `_ ) * use pip to install h5py 2.10.0 ( `#11044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11044> `_ ) * stop testing easyconfig PRs with Travis, only use GitHub Actions from now on ( `#11008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11008> `_ , `#11055 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11055> `_ ) * switch to Kent_tools built from source as dep for FusionCatcher ( `#11057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11057> `_ ) * fall back to using PR target branch when determining \"merge base\" between PR branch & target branch fails in test suite ( `#11069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11069> `_ ) * rename gtest to googletest ( `#11082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11082> `_ ) * rename sdsl-lite to SDSL (to use one single name) ( `#11084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11084> `_ ) * stop using ``remove_usr_bin`` patch in TensorFlow easyconfig, no longer required with updated TensorFlow easyblock ( `#11087 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11087> `_ ) * extend timeout for libxc-4.3.4 to avoid failing tests ( `#11126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11126> `_ ) * move GitHub Actions status badge to top of README ( `#11138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11138> `_ ) * fix code style issues in test ( `#11146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11146> `_ ) * enable ``flake8`` on CI and fix issues ( `#11147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11147> `_ ) * prefer gc GitHub site for source downloads ( `#11208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11208> `_ ) * prefer ``https`` over ``ftp`` in ``source_urls`` of IgBLAST easyconfig ( `#11244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11244> `_ ) .. _release_notes_eb422: EasyBuild v4.2.2 (July 8th 2020) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for using ``sources`` and ``git_config`` for extensions in ``exts_list`` ( `#3294 <https://github.com/easybuilders/easybuild-framework/pull/3294> `_ ) * add support for software minver template (like ``%(pyminver)s`` , etc.) ( `#3344 <https://github.com/easybuilders/easybuild-framework/pull/3344> `_ , `#3345 <https://github.com/easybuilders/easybuild-framework/pull/3345> `_ ) * add support for updating dictionary or tuple easyconfig parameters with ``self.cfg.update`` ( `#3356 <https://github.com/easybuilders/easybuild-framework/pull/3356> `_ ) * various bug fixes, including: * fix crash in ``--avail-easyconfig-constants`` when using ``--output-format=rst`` + ensure sorted output ( `#3341 <https://github.com/easybuilders/easybuild-framework/pull/3341> `_ ) * always take into account ``builddependencies`` when generating template values, also when we're not iterating over ``builddependencies`` ( `#3346 <https://github.com/easybuilders/easybuild-framework/pull/3346> `_ ) * fix running command as ``easybuild`` user in generated Singularity definition file ( `#3347 <https://github.com/easybuilders/easybuild-framework/pull/3347> `_ ) * allow ignoring ``versionsuffix`` in ``--try-update-deps`` ( `#3350 <https://github.com/easybuilders/easybuild-framework/pull/3350> `_ , `#3353 <https://github.com/easybuilders/easybuild-framework/pull/3353> `_ ) * retain order of paths when generating ``prepend_path`` statements for module file (don't sort them alphabetically) ( `#3367 <https://github.com/easybuilders/easybuild-framework/pull/3367> `_ ) * also put easyblocks used by extensions in ``reprod`` directory ( `#3375 <https://github.com/easybuilders/easybuild-framework/pull/3375> `_ ) * also copy template values in ``EasyConfig.copy`` method to ensure they are defined when installing extensions ( `#3377 <https://github.com/easybuilders/easybuild-framework/pull/3377> `_ ) * skip lines that start with ``module-version`` when determining whether a module exists in ``ModulesTool.exist`` ( `#3379 <https://github.com/easybuilders/easybuild-framework/pull/3379> `_ ) **easyblocks** * 3 new software-specific easyblocks: * LLVM ( `#2065 <https://github.com/easybuilders/easybuild-easyblocks/pull/2065> `_ ), Scipion ( `#1847 <https://github.com/easybuilders/easybuild-easyblocks/pull/1847> `_ ), XALT ( `#1942 <https://github.com/easybuilders/easybuild-easyblocks/pull/1942> `_ ) * minor enhancements, including: * use ``wclean -platform`` instead of ``wcleanPlatform`` for OpenFOAM v2006 & newer ( `#2088 <https://github.com/easybuilders/easybuild-easyblocks/pull/2088> `_ ) * various bug fixes, including: * only build OpenCV with IPP support on x86_64 systems ( `#2056 <https://github.com/easybuilders/easybuild-easyblocks/pull/2056> `_ ) * make sure ``CFLAGS`` and ``MYCFLAGS`` are used in Lua easyblock ( `#2062 <https://github.com/easybuilders/easybuild-easyblocks/pull/2062> `_ ) * also accept ``exist_lic`` as valid value for ``license_file`` in IntelBase easyblock ( `#2067 <https://github.com/easybuilders/easybuild-easyblocks/pull/2067> `_ ) * fix minor bug in shared libs handling and correctly setup SuiteSparse variables in Trilinos easyblock ( `#2071 <https://github.com/easybuilders/easybuild-easyblocks/pull/2071> `_ ) * make sure ``PythonBundle`` uses correct ``python`` command in extensions filter + also add ``lib64/python*/site-packages`` to ``$PYTHONPATH`` (if it exists) ( `#2075 <https://github.com/easybuilders/easybuild-easyblocks/pull/2075> `_ , `#2081 <https://github.com/easybuilders/easybuild-easyblocks/pull/2081> `_ ) * fix build environment for WRF by patching shebang in compile script ( `#2079 <https://github.com/easybuilders/easybuild-easyblocks/pull/2079> `_ ) * fix order of ``intel64/lib`` paths in generated module for impi (and drop ``intel64/lib/release_mt`` ) ( `#2080 <https://github.com/easybuilders/easybuild-easyblocks/pull/2080> `_ ) * set ``$XDG_CACHE_HOME`` to avoid abuse of ``$HOME/.cache/pip`` when installing DOLFIN ( `#2082 <https://github.com/easybuilders/easybuild-easyblocks/pull/2082> `_ ) * make VMD easyblock Python 3 compatible ( `#2083 <https://github.com/easybuilders/easybuild-easyblocks/pull/2083> `_ ) * rename include-fixed subdirectory in GCC installation to avoid problems after OS upgrade ( `#2087 <https://github.com/easybuilders/easybuild-easyblocks/pull/2087> `_ , `#2093 <https://github.com/easybuilders/easybuild-easyblocks/pull/2093> `_ , `#2094 <https://github.com/easybuilders/easybuild-easyblocks/pull/2094> `_ ) * use glob pattern to determine name of Mathematica installation script ( `#2089 <https://github.com/easybuilders/easybuild-easyblocks/pull/2089> `_ ) * use ``mpirun`` for sanity check commands in LAMMPS easyblock ( `#2096 <https://github.com/easybuilders/easybuild-easyblocks/pull/2096> `_ ) **easyconfigs** * added easyconfigs for 2 new toolchains: * golf/2020a ( `#10672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10672> `_ ) * intel/2020.06, based on intel/2020a but with impi 2018 update 5 ( `#10864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10864> `_ ) * added example easyconfig files for 36 new software packages: * AmrPlusPlus ( `#9919 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9919> `_ ), arrow ( `#10882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10882> `_ ), attrdict ( `#10827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10827> `_ ), Cartopy ( `#10685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10685> `_ ), dm-tree ( `#10775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10775> `_ ), dotNET-SDK ( `#10661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10661> `_ ), FLAIR ( `#10860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10860> `_ ), fastqsplitter ( `#10706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10706> `_ ), GLFW ( `#10709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10709> `_ ), git-extras ( `#10440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10440> `_ ), hl7apy ( `#10728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10728> `_ ), hyperopt ( `#10735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10735> `_ ), IgBLAST ( `#10889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10889> `_ ), IntelDAAL ( `#9848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9848> `_ ), ichorCNA ( `#10595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10595> `_ ), MARS ( `#10691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10691> `_ ), MITObim ( `#10897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10897> `_ ), MUST ( `#10849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10849> `_ ), mhcnuggets ( `#9743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9743> `_ ), PAUP ( `#10830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10830> `_ ), Percolator ( `#10665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10665> `_ ), PyBerny ( `#10885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10885> `_ ), poetry ( `#10884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10884> `_ ), pycocotools ( `#10806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10806> `_ ), python-hl7 ( `#10673 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10673> `_ ), SHAPEIT4 ( `#10814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10814> `_ ), SYMPHONY ( `#10058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10058> `_ ), SunPy ( `#10676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10676> `_ ), sdsl-lite ( `#10691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10691> `_ ), TEtranscripts ( `#10909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10909> `_ , `#10921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10921> `_ ), Tombo ( `#10646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10646> `_ ), tensorboardX ( `#10774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10774> `_ ), Unidecode ( `#10828 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10828> `_ ), WHAM ( `#10736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10736> `_ ), XALT ( `#9792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9792> `_ ), Xvfb ( `#10512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10512> `_ ) * added additional easyconfigs for various supported software packages, including: * Armadillo 9.900.1, astropy 4.0.1, BLAST+ 2.10.1, BioPerl 1.7.7, Blitz++ 1.0.2, Bonito 0.2.0, bokeh 2.0.2, CFITSIO 3.48, CGAL 4.14.3, CLHEP 2.4.1.3, cutadapt 2.10, dask 2.18.1, Elk 6.3.2, GATE 9.0, GLM 0.9.9.8, GRASS 7.8.3, Geant4 10.6, geopandas 0.8.0, giflib 5.2.1, HDF5 1.12.0, HISAT2 2.2.0, Hadoop 2.10.0, IPython 7.15.0, inferCNV 1.2.1, Julia 1.4.2, LibSoup 2.70.0, MATIO 1.5.17, MRtrix 3.0.0, Mathematica 12.1.1 MultiQC 1.9, NGS 2.10.5, NiBabel 3.1.0, Nipype 1.4.2, ncbi-vdb 20.10.7, numba 0.50.0, OpenBabel 3.1.1, OpenFOAM v2006, PDT 3.25.1, PRSice 2.3.1, ParaView 5.8.0, ParmEd 3.2.0, PyQt5 5.13.2, Pysam 0.16.0.1, parallel 20200522, plotly.py 4.8.1, pybedtools 0.8.1, ROOT 6.20.04, ReFrame 3.0, Roary 3.13.0, rjags 4-10, rstudio 1.3.959, SPAdes 3.14.1, SRA-Toolkit 2.10.8, Saxon-HE 9.9.1.7, Seaborn 0.10.1, Seurat 3.1.5, SimPEG 0.14.1, Spark 2.4.5, StringTie 2.1.3, scikit-allel 1.2.1, scikit-learn 0.23.1, snpEff 4.3t, Valgrind 3.16.1, VarScan 2.4.4, vsc-mympirun 5.1.0, WebKitGTK+ 2.27.4, wxPython 4.0.7.post2, zarr 2.4.0 * minor enhancements, including: * add extensions to R 4.0.0 easyconfig: drgee + stdReg ( `#10833 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10833> `_ ), copCAR ( `#10911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10911> `_ ), ngspatial ( `#10913 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10913> `_ ), drugCombo ( `#10914 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10914> `_ ) * add extensions to R-bundle-Bioconductor 3.11 easyconfig: BSgenome.Cfamiliaris.UCSC.canFam3 ( `#10840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10840> `_ ), SingleR ( `#10904 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10904> `_ ) * include extra extension and support for MPI in MAFFT v7.453 and v7.470 ( `#10853 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10853> `_ ) * add Array::Transpose to Perl ( `#10878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10878> `_ ) * various bug fixes, including: * fix dependencies and configuration of CoinUtils ecosystem ( `#10450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10450> `_ ) * fix Togl configure patch so that it completely ignores ``TCL_SRC_DIR`` and ``TK_SRC_DIR`` ( `#10662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10662> `_ ) * change Xerces-C++ to official CMakeMake build (fixes missing links to curl) ( `#10664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10664> `_ ) * add ``-fPIC`` to ``toolchainopts`` in easyconfig for Lua 5.3.5 with system toolchain ( `#10671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10671> `_ ) * remove hardcoded X86 target in LLVM easyconfigs ( `#10677 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10677> `_ ) * switch to https ``homepage`` and ``source_urls`` in libGLU easyconfigs ( `#10686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10686> `_ ) * add patch for h5py 2.10.0 to avoid triggering ``MPI_Init`` at import ( `#10687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10687> `_ ) * add alternative checksum for pkgmaker, doRNG, cobs extension in R 3.6.0 easyconfigs ( `#10692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10692> `_ ) * update UDUNITS ``source_urls`` to https sources ( `#10693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10693> `_ ) * add missing M4 to netCDF-Fortran easyconfigs using 2020a toolchain ( `#10695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10695> `_ , `#10697 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10697> `_ ) * add Rgraphviz patch to R-bundle-Bioconductor easyconfigs ( `#10710 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10710> `_ ) * add M4 builddependency to SuiteSparse 2019b easyconfigs ( `#10720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10720> `_ ) * make sure WHAM is built with correct compiler ( `#10736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10736> `_ ) * define ``MAX_JOBS`` in easyconfigs of PyTorch from v1.1.0 to v1.4.0 ( `#10772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10772> `_ ) * add dm-tree and lz4 as dependencies to Ray v0.8.4 ( `#10775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10775> `_ ) * fix source URL in recent ant easyconfigs ( `#10790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10790> `_ ) * bump versions of GO.gb/org.Hs.eg.db/PFAM.db extensions in Bioconductor 3.11 bundle, since sources for old versions have disappeared ( `#10791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10791> `_ ) * add patch to Armadillo easyconfigs using the foss toolchain to prevent it from picking up MKL if installed system-wide ( `#10812 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10812> `_ ) * add missing kerneltree extension in FLAIR easyconfig ( `#10860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10860> `_ ) * fix source URLs in Eigen 3.2. * (`#10872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10872>`_) and 3.3.* ( `#10869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10869> `_ ) easyconfigs * refer to issue in GitHub repo in configparser patch, since Bitbucket repo is disappearing ( `#10873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10873> `_ ) * switch to github.com source URL for MetaPhlAn ( `#10874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10874> `_ ) * switch to GitHub sources for ScientificPython 2.9.4 ( `#10875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10875> `_ ) * switch to GitHub source URL for HPDBSCAN ( `#10876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10876> `_ ) * download x265 3.2/3.3 sources from ``bitbucket.org/multicoreware/x265_git`` ( `#10905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10905> `_ ) * fix download URL for libatomic in gc 7.6.12 easyconfigs ( `#10915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10915> `_ ) * fix ``sanity_check_paths`` in CFITSIO-3.48-GCCcore-9.3.0.eb easyconfig ( `#10917 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10917> `_ ) * add missing dependencies for geopandas 0.7.0 ( `#10923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10923> `_ ) * other changes: * rename OpenPyXL 2.6.4 easyconfig to openpyxl ( `#10916 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10916> `_ ) .. _release_notes_eb421: EasyBuild v4.2.1 (May 20th 2020) -------------------------------- bugfix/update release **framework** * various enhancements, including: * also mention CPU architecture (x86_64, POWER) in comment for test reports ( `#3281 <https://github.com/easybuilders/easybuild-framework/pull/3281> `_ ) * add support for enhancing existing sanity check in easyconfigs, as opposed to overwriting paths/commands ( `#3288 <https://github.com/easybuilders/easybuild-framework/pull/3288> `_ ) * clean up locks when EasyBuild session is cancelled with a signal like ``SIGTERM`` ( `#3291 <https://github.com/easybuilders/easybuild-framework/pull/3291> `_ , `#3321 <https://github.com/easybuilders/easybuild-framework/pull/3321> `_ ) * add ``find_glob_pattern`` function to ``filetools`` module ( `#3297 <https://github.com/easybuilders/easybuild-framework/pull/3297> `_ ) * add constants for common OS dependencies ( ``OS_PKG_IBVERBS_DEV`` , ``OS_PKG_OPENSSL_DEV`` , ...) ( `#3309 <https://github.com/easybuilders/easybuild-framework/pull/3309> `_ , `#3334 <https://github.com/easybuilders/easybuild-framework/pull/3334> `_ ) * flesh out ``get_mpi_cmd_template`` function from ``Mpi.mpi_cmd_for`` method ( `#3312 <https://github.com/easybuilders/easybuild-framework/pull/3312> `_ ) * add variable ``moddependpaths`` to specify extra ``$MODULEPATH`` entry to consider for loading dependency modules ( `#3324 <https://github.com/easybuilders/easybuild-framework/pull/3324> `_ ) * allow copying of tweaked easyconfigs when using ``--try-*`` with ``--copy-ec`` ( `#3332 <https://github.com/easybuilders/easybuild-framework/pull/3332> `_ ) * various bug fixes, including: * make ``ModulesTool.exist`` more robust w.r.t. module wrappers, aliases, defaults, etc. ( `#3216 <https://github.com/easybuilders/easybuild-framework/pull/3216> `_ , `#3337 <https://github.com/easybuilders/easybuild-framework/pull/3337> `_ ) * clean up rst output of ``--list-toolchains`` ( `#3246 <https://github.com/easybuilders/easybuild-framework/pull/3246> `_ ) * cast CPU arch name provided by archspec to a regular string ( `#3286 <https://github.com/easybuilders/easybuild-framework/pull/3286> `_ ) * get ``pr_title`` and ``pr_descr`` build_options in ``new_pr_from_branch`` instead of ``new_pr`` (and commit_msg in both) ( `#3298 <https://github.com/easybuilders/easybuild-framework/pull/3298> `_ ) * make ``pypi_source_urls`` more robust by using ``HTMLParser`` rather than ``xml.etree.ElementTree`` ( `#3303 <https://github.com/easybuilders/easybuild-framework/pull/3303> `_ , `#3329 <https://github.com/easybuilders/easybuild-framework/pull/3329> `_ ) * fix broken test for ``--include-easyblocks-from-pr`` ( `#3304 <https://github.com/easybuilders/easybuild-framework/pull/3304> `_ ) * don't use ``distutils.dir_util`` in ``copy_dir`` ( `#3310 <https://github.com/easybuilders/easybuild-framework/pull/3310> `_ ) * print trace message for sanity check command before running it ( `#3316 <https://github.com/easybuilders/easybuild-framework/pull/3316> `_ ) * fix problems with processing of easyconfigs using a Cray* toolchain when there are no actual external modules ( `#3319 <https://github.com/easybuilders/easybuild-framework/pull/3319> `_ ) * make ``test_find_eb_script`` more robust in case ``$EB_SCRIPT_PATH`` is already set ( `#3320 <https://github.com/easybuilders/easybuild-framework/pull/3320> `_ ) * fix several small problems with ``--try-update-deps`` (experimental feature) ( `#3325 <https://github.com/easybuilders/easybuild-framework/pull/3325> `_ , `#3326 <https://github.com/easybuilders/easybuild-framework/pull/3326> `_ , `#3330 <https://github.com/easybuilders/easybuild-framework/pull/3330> `_ ) * add ``--disable-job`` in ``eb`` command used in jobs, to prevent infinite job cycle ( `#3328 <https://github.com/easybuilders/easybuild-framework/pull/3328> `_ ) * avoid empty entries in ``$LD_LIBRARY_PATH`` and other path-like environment variables ( `#3333 <https://github.com/easybuilders/easybuild-framework/pull/3333> `_ ) * other changes: * fix code style issues in ``easybuild.tools`` + add ``flake8`` linting test ( `#3282 <https://github.com/easybuilders/easybuild-framework/pull/3282> `_ ) * introduce ``contextmanager`` for disabling templating and reduce resolving errors ( `#3287 <https://github.com/easybuilders/easybuild-framework/pull/3287> `_ ) * add ``change_into_dir`` named argument to ``extract_file`` + print deprecation warning if it's not specified ( `#3292 <https://github.com/easybuilders/easybuild-framework/pull/3292> `_ ) * improve ``install_eb_dep.sh`` script to install EasyBuild dependencies in CI environment ( `#3314 <https://github.com/easybuilders/easybuild-framework/pull/3314> `_ ) **easyblocks** * add generic easyblock for installing Go packages: ``GoPackage`` ( `#2042 <https://github.com/easybuilders/easybuild-easyblocks/pull/2042> `_ ) * minor enhancements, including: * update ``config.guess`` for all R packages, required installing R + extensions on Linux/POWER systems ( `#1949 <https://github.com/easybuilders/easybuild-easyblocks/pull/1949> `_ ) * add support for ``preinstallopts`` and install in subdirectory to ``Tarball`` generic easyblock ( `#1989 <https://github.com/easybuilders/easybuild-easyblocks/pull/1989> `_ , `#2049 <https://github.com/easybuilders/easybuild-easyblocks/pull/2049> `_ ) * rewrite ``GROMACS`` easyblock to install all four variations (single/double precision, with/without MPI) in the same directory ( `#1991 <https://github.com/easybuilders/easybuild-easyblocks/pull/1991> `_ ) * add custom ``subdir_version`` easyconfig parameter for FLUENT ( `#2021 <https://github.com/easybuilders/easybuild-easyblocks/pull/2021> `_ ) * use updated ``config.guess`` in ``GCC`` easyblock ( `#2033 <https://github.com/easybuilders/easybuild-easyblocks/pull/2033> `_ , `#2059 <https://github.com/easybuilders/easybuild-easyblocks/pull/2059> `_ ) * add extra question pattern to support installing CPLEX 12.10 ( `#2038 <https://github.com/easybuilders/easybuild-easyblocks/pull/2038> `_ ) * add support for building NWChem on top of external GlobalArrays + also define ``$LAPACK_LIB`` (required for NWChem 7.x) ( `#2043 <https://github.com/easybuilders/easybuild-easyblocks/pull/2043> `_ ) * execute minimal test in sanity check commands in ``impi`` easyblock ( `#2045 <https://github.com/easybuilders/easybuild-easyblocks/pull/2045> `_ ) * update for ``MotionCor2`` easyblock for v1.3.1 ( `#2046 <https://github.com/easybuilders/easybuild-easyblocks/pull/2046> `_ ) * fixes + enhancements for ``PETSc`` easyblock ( `#2048 <https://github.com/easybuilders/easybuild-easyblocks/pull/2048> `_ ) * various bug fixes, including: * use correct version in ``ELPA`` preprocessor flag used for QuantumESPRESSO v6.x ( `#2027 <https://github.com/easybuilders/easybuild-easyblocks/pull/2027> `_ ) * generically find the arch folder and add top-level bin/lib symlinks in ``PDT`` & ``TAU`` easyblocks ( `#2029 <https://github.com/easybuilders/easybuild-easyblocks/pull/2029> `_ ) * fix typo in ``LAMMPS`` easyblock preventing disabling the ``USER-INTEL`` package via ``configopts`` ( `#2031 <https://github.com/easybuilders/easybuild-easyblocks/pull/2031> `_ ) * let ``CMakeMake`` remove ``easybuild_obj`` build directory if it already exists ( `#2032 <https://github.com/easybuilders/easybuild-easyblocks/pull/2032> `_ ) * include own lib dir in ``RPATH`` before system lib dirs in ``binutils`` easyblock ( `#2044 <https://github.com/easybuilders/easybuild-easyblocks/pull/2044> `_ ) * clean ``$CPATH`` before building ROOT to avoid clash between external LLVM loaded as a dependency and internal LLVM used by ROOT ( `#2047 <https://github.com/easybuilders/easybuild-easyblocks/pull/2047> `_ ) * don't let ``extract_file`` change directory in various easyblocks ( `#2051 <https://github.com/easybuilders/easybuild-easyblocks/pull/2051> `_ ) * make ``postinstallcmds`` available to Mathematica easyconfigs + add bin/Executables to ``$PATH`` ( `#2052 <https://github.com/easybuilders/easybuild-easyblocks/pull/2052> `_ ) * fix the extra dirs added to PATH in ``FreeSurfer`` easyblock ( `#2053 <https://github.com/easybuilders/easybuild-easyblocks/pull/2053> `_ ) * correct download url for test data in ``WPS`` easyblock ( `#2055 <https://github.com/easybuilders/easybuild-easyblocks/pull/2055> `_ ) * fix typo in warning in ``TensorFlow`` easyblock ( `#2057 <https://github.com/easybuilders/easybuild-easyblocks/pull/2057> `_ ) * fix failing sanity check under ``--module-only`` in ``GCC`` easyblock ( `#2059 <https://github.com/easybuilders/easybuild-easyblocks/pull/2059> `_ ) * other changes: * add configure options for CubeLib/CubeWriter dependencies in ``Score-P`` easyblock ( `#2030 <https://github.com/easybuilders/easybuild-easyblocks/pull/2030> `_ ) * remove local ``find_glob_pattern`` in ``Blender`` & ``ROOT`` easyblocks, use function provided by ``filetools`` instead ( `#2037 <https://github.com/easybuilders/easybuild-easyblocks/pull/2037> `_ ) **easyconfigs** * added easyconfigs for new common toolchains: foss/2020a ( `#10483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10483> `_ , `#10492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10492> `_ ), intel/2020a ( `#10494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10494> `_ ) * added example easyconfig files for 66 new software packages: * Alpha ( `#9994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9994> `_ ), antiSMASH ( `#10589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10589> `_ ), Arlequin ( `#10620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10620> `_ ), artic-ncov2019 ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), augur ( `#10405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10405> `_ ), AutoMap ( `#10419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10419> `_ ), Bio-EUtilities ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ), CaSpER ( `#10593 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10593> `_ ), cdbfasta ( `#10547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10547> `_ ), cddlib ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ), CoCoALib ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ) dftd3-lib ( `#10351 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10351> `_ ), DoubletFinder ( `#10603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10603> `_ ), E-ANTIC ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ), FastViromeExplorer ( `#10571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10571> `_ ), FIX ( `#8870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8870> `_ ), FusionCatcher ( `#10134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10134> `_ ), geopandas ( `#10322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10322> `_ ), goalign ( `#10469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10469> `_ ), gotree ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), gretl ( `#10413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10413> `_ ), harmony ( `#10604 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10604> `_ ), HDF-EOS ( `#10534 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10534> `_ ), HDF-EOS5 ( `#10536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10536> `_ ), HMMER2 ( `#10588 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10588> `_ ), HyPo ( `#10642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10642> `_ ), king ( `#10365 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10365> `_ ), libdeflate ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), libfabric ( `#10616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10616> `_ ), libgit2 ( `#10453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10453> `_ ), libuv ( `#10444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10444> `_ ), mbuffer ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ), MDAnalysis ( `#10545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10545> `_ ), MEM ( `#10605 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10605> `_ ), MESS ( `#10597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10597> `_ ), metaerg ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ), MinCED ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ), MitoZ ( `#7735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7735> `_ ), nauty ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ), nifti2dicom ( `#10598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10598> `_ ), NLMpy ( `#10029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10029> `_ ), ntCard ( `#10502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10502> `_ ), NTL ( `#10431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10431> `_ ), pIRS ( `#10508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10508> `_ ), popscle ( `#10550 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10550> `_ ), ProtHint ( `#10549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10549> `_ ), protozero ( `#10495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10495> `_ ), pysndfx ( `#10452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10452> `_ ), PyVCF ( `#10564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10564> `_ ), PyWavelets ( `#10501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10501> `_ ), rampart ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), rickflow ( `#10641 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10641> `_ ), RNA-Bloom ( `#10502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10502> `_ ), root_numpy ( `#10424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10424> `_ ), rstudio ( `#10619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10619> `_ ), ScaFaCoS ( `#10537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10537> `_ ), Scythe ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ), SDSL ( `#10642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10642> `_ ), SHAP ( `#10379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10379> `_ ), SNPomatic ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ), SoX ( `#10452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10452> `_ ), swissknife ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ),) Taiyaki ( `#10573 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10573> `_ ), TCLAP ( `#10598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10598> `_ ), torchaudio ( `#10516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10516> `_ ), wtdbg2 ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ) * added additional easyconfigs for various supported software packages, including: * ADF 2019.303, BRAKER 2.1.5, Bazel 2.0.0, Bonito 0.1.4, Boost.Python 1.72.0, Bowtie2 2.4.1, CMake 3.16.4, CPLEX 12.10, CVXOPT 1.2.4, Coreutils 8.32, cURL 7.69.1, DFTB+ 19.1, ecCodes 2.17.0, expat 2.2.9, FFmpeg 4.2.2, FriBidi 1.0.9, GATK 4.1.5.0, GCC(core) 10.1.0, GDAL 3.0.4, GEOS 3.8.1, GLib 2.64.1, GMP 6.2.0, GROMACS 2020.1, GTK+ 3.24.17, GenomeThreader 1.7.3, GffCompare 0.11.6, Ghostscript 9.52, GlimmerHMM 3.0.4c, GlobalArrays 5.7.2, gmpy2 2.1.0b4, gmsh 4.5.6, gpustat 0.6.0, gradunwarp 1.2.0, HDF5 1.10.6, hwloc 2.2.0, hypothesis 5.6.0, ICU 66.1, IPython 7.13.0, ImageMagick 7.0.10, Julia 1.4.1, KMC 3.1.2rc1, Kraken2 2.0.9, LMfit 1.0.0, Longshot 0.4.1, libarchive 3.4.2, libffcall 2.2, libffi 3.3, libgd 2.3.0, libjpeg-turbo 2.0.4, librsvg 2.48.4, libsigsegv 2.12, lrslib 7.0a, MEME 5.1.1, MPC 1.1.0, Mako 1.1.2, Mesa 20.0.2, Meson 0.53.2, MotionCor2 1.3.1, MultiQC 1.8, matplotlib 3.2.1, NGS-Python-2.10.4, NGS 2.10.4, NSPR 4.25, NSS 3.51, NWChem 7.0.0, Nextflow 20.04.1, Ninja 1.10.0, Normaliz 3.7.4, nanopolish 0.13.1, ncbi-vdb 2.10.4 netCDF 4.7.4, OpenBLAS 0.3.9, OpenEXR 2.4.1, OpenMPI 4.0.3, OpenSSL 1.1.1e, openpyxl 3.0.3, PAPI 6.0.0, PCRE 8.44, PCRE2 10.34, PLUMED 2.6.0, PMIx 3.1.5, PROJ 7.0.0, Perl 5.30.2, Pillow 7.0.0, PyYAML 5.3, Python 2.7.18 + 3.8.2, parallel 20200422, Qt5 5.14.1, R-bundle-Bioconductor 3.11, R 3.6.3 + 4.0.0, RMBlast 2.9.0, Racon 1.4.13, Ray 0.8.4, Rust 1.42.0, re2c 1.3, rioxarray 0.0.24, rootpy 1.0.1, rstudio 1.2.5042, SCons 3.1.2, SDL2 2.0.10, SIONlib 1.7.6, SQLite 3.31.1, SRA-Toolkit 2.10.4, Salmon 1.2.0, ScaLAPACK 2.1.0, SciPy-bundle 2020.03, Stacks 2.53, StringTie 2.1.1, SuiteSparse 5.7.1, snappy 1.1.8, spaln 2.4.03, sympy 1.5.1, Tcl 8.6.10, TensorFlow 2.2.0, Tk 8.6.10, Tkinter 3.8.2, tbl2asn 20200302, torchvision 0.5.0, UCX 1.8.0, UMI-tools 1.0.1, utf8proc 2.5.0, util-linux 2.35, worker 1.6.12, wxWidgets 3.1.3, X11 20200222, XZ 5.2.5, x264 20191217, x265 3.3, zsh 5.8, zstd 1.4.4 * minor enhancements, including: * add additional extensions for recent versions of R ( `#10359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10359> `_ , `#10585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10585> `_ , `#10586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10586> `_ , `#10621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10621> `_ ) and R-bundle-Bioconductor ( `#10585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10585> `_ , `#10596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10596> `_ , `#10621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10621> `_ ) * add additional extensions for recent versions of Perl ( `#10412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10412> `_ , `#10546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10546> `_ , `#10623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10623> `_ ) * include LLVM linker in Clang 7.0.1 on GCC 7.3.0-2.30( `#10458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10458> `_ ) * include static lib and header in nimimap2 easyconfigs for foss-2018b and GCC-8.2.0* ( `#10464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10464> `_ ) * add alternate checksum for EMBOSS ( `#10607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10607> `_ ) * various bug fixes, including: * fix incorrect checksums for Amber patches ( `#8870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8870> `_ ) * add patches to fix installation of R 3.6.2 on POWER ( `#9830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9830> `_ ) * add missing build dep. pkg-config in GObject-Introspection 1.63.1 w/ Python 3.7.4 easyconfig ( `#10380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10380> `_ ) * add Perl as a build dependency for recent Autoconf/Automake easyconfigs ( `#10408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10408> `_ , `#10426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10426> `_ ) * fix source_urls in ICU easyconfigs ( `#10417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10417> `_ ) * disable ``USER-INTEL`` package in LAMMPS easyconfigs using intel/2019b, since it results in an installation that produces incorrect results ( `#10418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10418> `_ ) * fix undefined reference to ``qfloat16::mantissatable`` in Qt5-5.13.1-GCCcore-8.3.0 ( `#10425 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10425> `_ ) * get rid of double '-' in versionsuffix of torchtext easyconfig ( `#10472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10472> `_ ) * fix broken Mako easyconfigs ( `#10480 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10480> `_ , `#10627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10627> `_ ) * move builddependencies to dependencies in OTF2 and Score-P easyconfigs ( `#10496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10496> `_ ) * add missing cURL dep for LAMMPS ( `#10527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10527> `_ ) * add Python 2 build dependency for OpenPGM ( `#10539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10539> `_ ) * use ``OS_PKG_IBVERBS_DEV`` constant for OS dependency in PyTorch 1.4.0 easyconfigs ( `#10540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10540> `_ ) * add missing Bison build dep in Graphviz easyconfigs ( `#10541 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10541> `_ ) * use https in homepage for Mathematica 12.0.0 + clean up sanity check commands (now done by easyblock) ( `#10559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10559> `_ ) * add missing PyVCF dependency for BAMSurgeon ( `#10564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10564> `_ ) * remove FFTW dependencies from LAMMPS easyconfigs, no longer needed (MKL can be used too now) ( `#10565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10565> `_ ) * fix ITK v5.0.1 easyconfig w.r.t. locale and location of libjpeg-turbo library ( `#10592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10592> `_ ) * add patch to fix missing ``const`` qualifiers for ncurses ( `#10606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10606> `_ ) * fix OS dependency for rstudio for Debian-based systems ( `#10608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10608> `_ ) * fix Rmath paths in easyconfig for FastQTL v2.184 ( `#10612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10612> `_ ) * add symlink for Arlequin commands + fix sanity check commands ( `#10620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10620> `_ ) * fix recent binutils easyconfigs using system toolchain for Fedora 32 / GCC 10 ( `#10633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10633> `_ ) * replace '/path/to' with actual installation prefix in FuSeq scripts ( `#10640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10640> `_ ) * other changes: * check sdist with different Python versions in CI ( `#10388 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10388> `_ ) * use Bison 3.3.2 as build dep for flex 2.6.4 ( `#10403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10403> `_ ) * mention ``http://`` Pfam website rather than ``ftp://`` in load message of BiG-SCAPE easyconfig ( `#10439 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10439> `_ ) * archive old Singularity configs ( `#10591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10591> `_ ) * Singularity is not well suited to install via EasyBuild because it requires admin privileges to enable setuid * stop using old hpcugent URL for cloning framework/easyblocks repos in CI ( `#10635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10635> `_ ) * use ``SYSTEM`` constant for toolchain in easyconfigs already use ``system`` toolchain ( `#10638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10638> `_ ) .. _release_notes_eb420: EasyBuild v4.2.0 (April 14th 2020) ---------------------------------- feature release **framework** * add support for ``--try-update-deps`` (experimental feature), to upgrade dependencies based on available easyconfigs ( `#2599 <https://github.com/easybuilders/easybuild-framework/pull/2599> `_ ) * adding locking to prevent two parallel builds of the same installation directory ( `#3009 <https://github.com/easybuilders/easybuild-framework/pull/3009> `_ ) * for more information, see https://easybuild.readthedocs.io/en/latest/Locks.html * significantly speed up ``-D/--dry-run`` by avoiding useless ' ``module show`` ' ( `#3203 <https://github.com/easybuilders/easybuild-framework/pull/3203> `_ ) * add support for creating an index & using it when searching for easyconfigs ( `#3210 <https://github.com/easybuilders/easybuild-framework/pull/3210> `_ ) * for more information, see https://easybuild.readthedocs.io/en/latest/Easyconfigs_index.html * additional GitHub integration features: * add support for targeting easyblocks and framework repositories in ``--new-pr`` ( `#1876 <https://github.com/easybuilders/easybuild-framework/pull/1876> `_ , `#3189 <https://github.com/easybuilders/easybuild-framework/pull/3189> `_ ) * add support for ``--include-easyblocks-from-pr`` ( `#3206 <https://github.com/easybuilders/easybuild-framework/pull/3206> `_ ) * for more information, https://easybuild.readthedocs.io/en/latest/Integration_with_GitHub.html * various other enhancements, including: * add a contrib/hooks dir with some examples of hooks used ( `#2777 <https://github.com/easybuilders/easybuild-framework/pull/2777> `_ ) * also mention working directory + input passed via stdin (if any) in trace output of ``run_cmd`` ( `#3168 <https://github.com/easybuilders/easybuild-framework/pull/3168> `_ ) * probe external modules for missing metadata that is not provided via extermal module metadata file ( `#3174 <https://github.com/easybuilders/easybuild-framework/pull/3174> `_ ) * also update ``$CMAKE_PREFIX_PATH`` and ``$CMAKE_LIBRARY_PATH`` in generated module file ( `#3176 <https://github.com/easybuilders/easybuild-framework/pull/3176> `_ ) * optionally call ``log.warning`` in ``print_warning`` ( `#3195 <https://github.com/easybuilders/easybuild-framework/pull/3195> `_ ) * add an option to ``git_config`` to retain the ``.git`` directory ( `#3197 <https://github.com/easybuilders/easybuild-framework/pull/3197> `_ ) * allow use of ``SYSTEM`` as ``--try-toolchain`` option ( `#3213 <https://github.com/easybuilders/easybuild-framework/pull/3213> `_ ) * mention CPU arch name in comment for uploaded test report, if it's known by ``archspec`` ( `#3227 <https://github.com/easybuilders/easybuild-framework/pull/3227> `_ ) * make ``--merge-pr`` take into account ``--pr-target-branch`` ( `#3236 <https://github.com/easybuilders/easybuild-framework/pull/3236> `_ ) * make ``--check-contrib`` print a warning when ``None`` is used for checksums ( `#3244 <https://github.com/easybuilders/easybuild-framework/pull/3244> `_ ) * update ``install-EasyBuild-develop.sh`` script and create script for 2020a merge sprint ( `#3245 <https://github.com/easybuilders/easybuild-framework/pull/3245> `_ ) * add template for ``mpi_cmd_prefix`` ( `#3264 <https://github.com/easybuilders/easybuild-framework/pull/3264> `_ ) * update ``copy_dir`` to include option to merge directories ( `#3270 <https://github.com/easybuilders/easybuild-framework/pull/3270> `_ ) * support template name for CUDA version ( `#3274 <https://github.com/easybuilders/easybuild-framework/pull/3274> `_ ) * various bug fixes, including: * use correct module for ``errors_found_in_log`` ( `#3119 <https://github.com/easybuilders/easybuild-framework/pull/3119> `_ ) * fix ``EasyConfig.update`` code to handle both strings and lists as input ( `#3170 <https://github.com/easybuilders/easybuild-framework/pull/3170> `_ ) * fix removing temporary branch on ``--check-github`` ( `#3182 <https://github.com/easybuilders/easybuild-framework/pull/3182> `_ ) * fix shebang even if first line doesn't start with ' ``#!`` ' ( `#3183 <https://github.com/easybuilders/easybuild-framework/pull/3183> `_ ) * make bootstrap script work with Python 3 ( `#3186 <https://github.com/easybuilders/easybuild-framework/pull/3186> `_ ) * read patch files as bytestring to avoid ``UnicodeDecodeError`` for patches that include funky characters ( `#3191 <https://github.com/easybuilders/easybuild-framework/pull/3191> `_ ) * fix online check in ``--check-github`` : try repeatedly and with different URLs to cater for HTTP issues ( `#3194 <https://github.com/easybuilders/easybuild-framework/pull/3194> `_ ) * don't crash when GitPython is not installed when using Python 3 ( `#3198 <https://github.com/easybuilders/easybuild-framework/pull/3198> `_ ) * fix ``os_name_map`` for RHEL8 ( `#3201 <https://github.com/easybuilders/easybuild-framework/pull/3201> `_ ) * don't add shebang to binary files ( `#3208 <https://github.com/easybuilders/easybuild-framework/pull/3208> `_ ) * use ``checkout@v2`` in GitHub Actions to fix broken re-triggered tests ( `#3219 <https://github.com/easybuilders/easybuild-framework/pull/3219> `_ ) * don't filter out ``None`` values in to_checksums, leave them in place ( `#3225 <https://github.com/easybuilders/easybuild-framework/pull/3225> `_ ) * fix defining of ``$MPI_INC_*`` and ``$MPI_LIB_*`` environment variables for impi version 2019 and later ( `#3229 <https://github.com/easybuilders/easybuild-framework/pull/3229> `_ ) * use correct target account/repo when creating test report & posting comment in PR ( `#3234 <https://github.com/easybuilders/easybuild-framework/pull/3234> `_ ) * reorganize ``EasyBlock.extensions_step`` to ensure correct filtering of extensions ( `#3235 <https://github.com/easybuilders/easybuild-framework/pull/3235> `_ ) * also support ``%(installdir)s`` and ``%(builddir)s`` templates for extensions ( `#3237 <https://github.com/easybuilders/easybuild-framework/pull/3237> `_ ) * unset ``$GITHUB_TOKEN`` in Travis after installing token, to avoid failing ``test_from_pr_token_log`` ( `#3252 <https://github.com/easybuilders/easybuild-framework/pull/3252> `_ ) * fix reporting when skipping extensions ( `#3254 <https://github.com/easybuilders/easybuild-framework/pull/3254> `_ ) * avoid API rate limit errors on online check in ``--check-github`` ( `#3257 <https://github.com/easybuilders/easybuild-framework/pull/3257> `_ ) * show easyconfig filenames for parallel build ( `#3258 <https://github.com/easybuilders/easybuild-framework/pull/3258> `_ ) * make ``EasyConfig.dump`` aware of toolchain hierarchy, to avoid hardcoded subtoolchains in dependencies easyconfig parameters ( `#3261 <https://github.com/easybuilders/easybuild-framework/pull/3261> `_ ) * fix use of ``--copy-ec`` with a single argument, assume copy to current working directory ( `#3262 <https://github.com/easybuilders/easybuild-framework/pull/3262> `_ ) * fix posting of comment in PR with ``--upload-test-report`` ( `#3272 <https://github.com/easybuilders/easybuild-framework/pull/3272> `_ ) * take into account dependencies marked as external modules when composing template values like ``%(pyver)s`` ( `#3273 <https://github.com/easybuilders/easybuild-framework/pull/3273> `_ ) * other changes: * increase timeout & use ``api.github.com`` for connectivity check in ``check_github`` ( `#3192 <https://github.com/easybuilders/easybuild-framework/pull/3192> `_ ) * restore ``flake8`` default ignores ( `#3193 <https://github.com/easybuilders/easybuild-framework/pull/3193> `_ ) * enable tracking of test suite coverage using coveralls ( `#3204 <https://github.com/easybuilders/easybuild-framework/pull/3204> `_ ) * make tests use ``easybuilders/testrepository`` rather than ``hpcugent/testrepository`` after it was moved ( `#3238 <https://github.com/easybuilders/easybuild-framework/pull/3238> `_ ) * improve raised error in ``remove_dir`` and deprecate ``rmtree2`` ( `#3228 <https://github.com/easybuilders/easybuild-framework/pull/3228> `_ ) **easyblocks** * 7 new software-specific easyblocks: * BerkeleyGW ( `#1951 <https://github.com/easybuilders/easybuild-easyblocks/pull/1951> `_ ), CMake ( `#1936 <https://github.com/easybuilders/easybuild-easyblocks/pull/1936> `_ ), ELSI ( `#1883 <https://github.com/easybuilders/easybuild-easyblocks/pull/1883> `_ ), LAMMPS ( `#1964 <https://github.com/easybuilders/easybuild-easyblocks/pull/1964> `_ , `#1975 <https://github.com/easybuilders/easybuild-easyblocks/pull/1975> `_ , `#1978 <https://github.com/easybuilders/easybuild-easyblocks/pull/1978> `_ , `#1982 <https://github.com/easybuilders/easybuild-easyblocks/pull/1982> `_ , `#1997 <https://github.com/easybuilders/easybuild-easyblocks/pull/1997> `_ ), libdrm ( `#1983 <https://github.com/easybuilders/easybuild-easyblocks/pull/1983> `_ ), Mesa ( `#1892 <https://github.com/easybuilders/easybuild-easyblocks/pull/1892> `_ , `#2006 <https://github.com/easybuilders/easybuild-easyblocks/pull/2006> `_ ), SEPP ( `#1998 <https://github.com/easybuilders/easybuild-easyblocks/pull/1998> `_ ) * minor enhancements, including: * make ParMETIS easyblock compatible with custom ``configopts`` ( `#1774 <https://github.com/easybuilders/easybuild-easyblocks/pull/1774> `_ ) * update Trinity easyblock for v2.9.0 ( `#1906 <https://github.com/easybuilders/easybuild-easyblocks/pull/1906> `_ ) * disable ROCM and Android workspace explicitly in TensorFlow easyblock ( `#1944 <https://github.com/easybuilders/easybuild-easyblocks/pull/1944> `_ ) * update QuantumESPRESSO easyblock for version 6.5 ( `#1947 <https://github.com/easybuilders/easybuild-easyblocks/pull/1947> `_ ) * update Siesta easyblock to support MaX-1.0 release ( `#1954 <https://github.com/easybuilders/easybuild-easyblocks/pull/1954> `_ ) * update Ferret easyblock for versions >= 7.5.0 ( `#1956 <https://github.com/easybuilders/easybuild-easyblocks/pull/1956> `_ ) * update XCrySDen easyblock to support Togl dependency ( `#1959 <https://github.com/easybuilders/easybuild-easyblocks/pull/1959> `_ ) * pass value for ``TARGET`` specified in ``buildopts`` to ``testopts`` and ``installopts`` in OpenBLAS easyblock ( `#1960 <https://github.com/easybuilders/easybuild-easyblocks/pull/1960> `_ ) * fix netCDF(-Fortran) support in Siesta easyblock ( `#1967 <https://github.com/easybuilders/easybuild-easyblocks/pull/1967> `_ , 1971) * add ``NCDF_PARALLEL`` and METIS support to Siesta easyblock ( `#1973 <https://github.com/easybuilders/easybuild-easyblocks/pull/1973> `_ ) * add support for ``use_pip_extras`` custom easyconfig parameter in ``PythonPackage`` easyblock ( `#1980 <https://github.com/easybuilders/easybuild-easyblocks/pull/1980> `_ ) * update Open Babel easyblock for version 3.0.0 ( `#1992 <https://github.com/easybuilders/easybuild-easyblocks/pull/1992> `_ ) * allow differing names for TensorFlow wheel ( `#1995 <https://github.com/easybuilders/easybuild-easyblocks/pull/1995> `_ ) * make MATLAB runtime available from MATLAB ( `#2008 <https://github.com/easybuilders/easybuild-easyblocks/pull/2008> `_ ) * various bug fixes, including: * fix linking of Hypre to external BLAS/LAPACK + support building (only) static/shared library ( `#1885 <https://github.com/easybuilders/easybuild-easyblocks/pull/1885> `_ ) * fix MPI-CXX dependency of PETSc ( `#1917 <https://github.com/easybuilders/easybuild-easyblocks/pull/1917> `_ ) * limit amount of parallelism in TensorFlow easyblock ( `#1934 <https://github.com/easybuilders/easybuild-easyblocks/pull/1934> `_ ) * support GCCcore and gcc4.8 (if that dir exists) in function ``get_tbb_gccprefix`` in tbb easyblock ( `#1943 <https://github.com/easybuilders/easybuild-easyblocks/pull/1943> `_ ) * restore default ``flake8`` warnings ( `#1950 <https://github.com/easybuilders/easybuild-easyblocks/pull/1950> `_ ) * remove tests from ``build_step`` and raise error on failed tests in OpenBLAS easyblock ( `#1952 <https://github.com/easybuilders/easybuild-easyblocks/pull/1952> `_ , `#1955 <https://github.com/easybuilders/easybuild-easyblocks/pull/1955> `_ , `#1962 <https://github.com/easybuilders/easybuild-easyblocks/pull/1962> `_ ) * add optional ``runtest`` to the catch for ``FATAL ERRORS`` to OpenBLAS easyblock ( `#1958 <https://github.com/easybuilders/easybuild-easyblocks/pull/1958> `_ ) * ensure right ' ``python`` ' command is used to determine Python lib dir when system Python is used with PythonBundle easyblock ( `#1961 <https://github.com/easybuilders/easybuild-easyblocks/pull/1961> `_ ) * make sure ``lib/python*/lib-dynload`` exists in Python installation ( `#1966 <https://github.com/easybuilders/easybuild-easyblocks/pull/1966> `_ ) * in version 6.0 of TensorRT, ``libnvinfer.a`` is renamed ``libnvinfer_static.a`` ( `#1970 <https://github.com/easybuilders/easybuild-easyblocks/pull/1970> `_ ) * handle ``configopts`` without configure args in CMake easyblock ( `#1974 <https://github.com/easybuilders/easybuild-easyblocks/pull/1974> `_ ) * use ``checkout@v2`` in GitHub Actions to fix broken re-triggered tests ( `#1976 <https://github.com/easybuilders/easybuild-easyblocks/pull/1976> `_ ) * don't insist that pylibdir always exists in OpenCV easyblock ( `#1977 <https://github.com/easybuilders/easybuild-easyblocks/pull/1977> `_ ) * also set ``$TRINITY_HOME`` environment variable in Trinity easyblock ( `#1979 <https://github.com/easybuilders/easybuild-easyblocks/pull/1979> `_ ) * fix sanity check for OpenFOAM-Extend >= 4.1 ( `#1981 <https://github.com/easybuilders/easybuild-easyblocks/pull/1981> `_ ) * fix pattern matching in regex subst for ``I_MPI_ROOT`` in impi easyblock ( `#1986 <https://github.com/easybuilders/easybuild-easyblocks/pull/1986> `_ ) * use ``remove_dir`` instead of deprecated ``rmtree2`` in various easyblocks ( `#1993 <https://github.com/easybuilders/easybuild-easyblocks/pull/1993> `_ ) * fix \" ``AttributeError: module 'git' has no attribute 'Git'`` \" that may occur when using Python 3 ( `#1994 <https://github.com/easybuilders/easybuild-easyblocks/pull/1994> `_ ) * don't sanity check for ``QtWebEngine`` in Qt easyblock when building for POWER ( `#2000 <https://github.com/easybuilders/easybuild-easyblocks/pull/2000> `_ ) * fix installation of TensorFlow in some environments, by setting ``$PYTHONNOUSERSITE`` (& more) ( `#2002 <https://github.com/easybuilders/easybuild-easyblocks/pull/2002> `_ , `#2020 <https://github.com/easybuilders/easybuild-easyblocks/pull/2020> `_ ) * make sure libxml2 is built with XZ provided as dependency ( `#2005 <https://github.com/easybuilders/easybuild-easyblocks/pull/2005> `_ ) * look for Python version directories with suffixes in ROOT easyblock ( `#2010 <https://github.com/easybuilders/easybuild-easyblocks/pull/2010> `_ ) * enable TK, FLTK and OPENGL configure options in VMD easyblock ( `#2013 <https://github.com/easybuilders/easybuild-easyblocks/pull/2013> `_ ) * update the contributing docs ( `#2014 <https://github.com/easybuilders/easybuild-easyblocks/pull/2014> `_ ) * fix numexpr easyblock to allow (correctly) installing it as extension ( `#2022 <https://github.com/easybuilders/easybuild-easyblocks/pull/2022> `_ ) * other changes: * simplify various CMakeMake-based easyblocks by enhancing ``CMakeMake`` (w.r.t. ``CMAKE_BUILD_TYPE`` , shared vs static libs, ``-fPIC`` ) ( `#1929 <https://github.com/easybuilders/easybuild-easyblocks/pull/1929> `_ ) * enable out of tree build by default in ``CMakeMake`` easyblock ( `#1933 <https://github.com/easybuilders/easybuild-easyblocks/pull/1933> `_ ) * force building Clang without CUDA when it is not found as a proper dependency ( `#1968 <https://github.com/easybuilders/easybuild-easyblocks/pull/1968> `_ ) **easyconfigs** * added example easyconfig files for 114 new software packages: * ABRA2 ( `#10272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10272> `_ ), ABRicate ( `#10310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10310> `_ ), ADIOS ( `#10036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10036> `_ ), aNCI ( `#9929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9929> `_ ), any2fasta ( `#10310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10310> `_ ), apex ( `#10269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10269> `_ ), archspec ( `#9898 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9898> `_ ), ArviZ ( `#10366 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10366> `_ ), autopep8 ( `#9626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9626> `_ ), BAMSurgeon ( `#10330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10330> `_ ), BatMeth2 ( `#10323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10323> `_ ), BiG-SCAPE ( `#10352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10352> `_ ), BinSanity ( `#10001 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10001> `_ ), Bonito ( `#10269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10269> `_ ), BSMAPz ( `#10283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10283> `_ ), BSseeker2 ( `#10039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10039> `_ ), BUStools ( `#9838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9838> `_ ), Cbc ( `#10052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10052> `_ ), Cgl ( `#10048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10048> `_ ), CGmapTools ( `#10288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10288> `_ ), Clp ( `#10033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10033> `_ ), CoinUtils ( `#9937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9937> `_ ), dtcwt ( `#9695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9695> `_ ), ELSI ( `#9857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9857> `_ ), EnsEMBLCoreAPI ( `#8734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8734> `_ ), fastq-pair ( `#9894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9894> `_ ), FigureGen ( `#10076 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10076> `_ ), Fiona ( `#10321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10321> `_ ), FuSeq ( `#10004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10004> `_ ), GenomeTools ( `#9797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9797> `_ ), GraphMap2 ( `#10299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10299> `_ ), GRASP ( `#9896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9896> `_ ), Groovy ( `#9809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9809> `_ ), gsport ( `#9821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9821> `_ ), gubbins ( `#9689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9689> `_ ), igv-reports ( `#9977 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9977> `_ ), inferCNV ( `#9686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9686> `_ ), iVar ( `#10291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10291> `_ ), joypy ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), JupyterLab ( `#9752 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9752> `_ ), kma ( `#10259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10259> `_ ), LAMMPS ( `#10371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10371> `_ ), lancet ( `#10271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10271> `_ ), libBigWig ( `#10006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10006> `_ ), libGridXC ( `#9858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9858> `_ ), libPSML ( `#5859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5859> `_ ), LtrDetector ( `#10343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10343> `_ ), manta ( `#5104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5104> `_ ), medImgProc ( `#10228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10228> `_ ), MedPy ( `#9748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9748> `_ ), Mini-XML ( `#10036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10036> `_ ), mkl_fft ( `#9887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9887> `_ ), Monocle3 ( `#9825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9825> `_ ), MoreRONN ( `#10255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10255> `_ ), motionSegmentation ( `#10228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10228> `_ ), NanoComp ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), NanoFilt ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), nanoget ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), nanomath ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), NanoPlot ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), ngspice ( `#9922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9922> `_ ), ntEdit ( `#9836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9836> `_ ), ntHits ( `#9833 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9833> `_ ), occt ( `#9939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9939> `_ ), OCNet ( `#9955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9955> `_ ), OpenAI-Gym ( `#10347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10347> `_ ), OpenPIV ( `#9959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9959> `_ ), OpenPyXL ( `#10115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10115> `_ ), orca ( `#9518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9518> `_ ), Osi ( `#10361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10361> `_ ), PartitionFinder ( `#9983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9983> `_ ), pauvre ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), polymake ( `#9904 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9904> `_ ), pretty-yaml ( `#10041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10041> `_ )), PRSice ( `#9988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9988> `_ ), pycodestyle ( `#9626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9626> `_ ), pydot ( `#9899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9899> `_ ), pygraphviz ( `#9969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9969> `_ ), pylift ( `#10051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10051> `_ ), PyMC3 ( `#10279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10279> `_ ), pyparsing ( `#9983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9983> `_ ), PyRe ( `#10095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10095> `_ ), python-weka-wrapper3 ( `#9704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9704> `_ ), PyTorch-Geometric ( `#9995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9995> `_ ), qcat ( `#10244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10244> `_ ), RAxML-NG ( `#9990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9990> `_ ), Ray ( `#10302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10302> `_ ), rclone ( `#7934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7934> `_ ), Red ( `#9856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9856> `_ ), rstanarm ( `#9964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9964> `_ ), scikit-build ( `#9762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9762> `_ ), scVelo ( `#9805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9805> `_ ), SECAPR ( `#9721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9721> `_ ), segmentation-models ( `#10211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10211> `_ ), SentencePiece ( `#10192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10192> `_ ), SEPP ( `#10047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10047> `_ ), Shapely ( `#10309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10309> `_ ), Singular ( `#10030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10030> `_ ), SLATEC ( `#7529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7529> `_ ), spatialreg ( `#9767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9767> `_ ), split-seq ( `#9749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9749> `_ ), spoa ( `#9705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9705> `_ ), SSN ( `#9955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9955> `_ ), STEAK ( `#10337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10337> `_ ), stpipeline ( `#9736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9736> `_ ), SVG ( `#9905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9905> `_ ), Togl ( `#9868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9868> `_ ), torchtext ( `#10193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10193> `_ ), units ( `#9682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9682> `_ ), UQTk ( `#10279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10279> `_ ), WildMagic ( `#10044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10044> `_ ), Winnowmap ( `#10005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10005> `_ ), xtb ( `#9993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9993> `_ ), Zip ( `#9972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9972> `_ ) * added additional easyconfigs for various supported software packages, including: * ABySS 2.1.5, Arrow 0.16.0, BCFtools 1.10.2, BEDTools 2.29.2, BUSCO 4.0.5, BerkeleyGW 2.1.0, binutils 2.34, CVXPY 1.0.28, CharLS 2.1.0, CheckM 1.1.2, Clang 10.0.0, CppUnit 1.15.1, canu 1.9, cutadapt 2.8, DIAMOND 0.9.30, davix 0.7.5, ELPA 2019.11.001, FastANI 1.3, FastQC 0.11.9, Ferret 7.5.0, GATK 4.1.4.1, GCCcore 9.3.0, GDB 9.1, GMAP-GSNAP-2019-09-12, GObject-Introspection 1.63.1, GPAW 20.1.0, GROMACS 2020, GTDB-Tk 1.0.2, GTK+ 3.24.13, Go 1.14.1, Gradle 6.1.1, GraphicsMagick 1.3.34, Graphviz 2.42.2, Gurobi 9.0.1, gSOAP 2.8.100, gnuplot 5.2.8, gtest 1.10.0, HDDM 0.7.5, HTSlib 1.10.2, HarfBuzz 2.6.4, Horovod 0.19.1, Hypre 2.18.2, IGV 2.8.0, IQ-TREE 1.6.12, IRkernel 1.1, iccifort 2020.0.166, igraph 0.8.0, impi 2019.6.166, ispc 1.12.0, Java 13(.0.2), Julia 1.4.0, Keras 2.3.1, Kraken2 2.0.8-beta, kim-api 2.1.3, LAST 1045, LASTZ 1.04.03, LLVM 9.0.1 + 10.0.0, LMfit 0.9.14, LS-PrePost 4.7.8, likwid 5.0.1, MAFFT 7.453, MATLAB 2019b, MMseqs2 10, Maven 3.6.3, Meson 0.53.1, MethylDackel 0.5.0, Mono 6.8.0.105, medaka 0.12.0, Nextflow 20.01.0, ncdf4 1.17, netcdf4-python 1.5.3, nodejs 12.16.1, numba 0.47.0, numexpr 2.7.1, Octave 5.1.0, OpenBLAS 0.3.8, OpenBabel 3.0.0, OpenCV 4.2.0, OpenFOAM-Extend 4.1-20191120, OrthoFinder 2.3.11, PETSc 3.12.4, PGI 19.10, PMIx 2.2.1, Pango 1.44.7, PyTables 3.6.1, PyTorch 1.4.0, parasail 2.4.1, pydicom 1.4.2, pyproj 2.4.2, Qhull 2019.1, QuantumESPRESSO 6.5, R-bundle-Bioconductor 3.10, RDKit 2019.09.3 Racon 1.4.10, ReFrame 2.21, Ruby 2.7.1, rjags 4-9, rpy2 3.2.6, SLEPc 3.12.2, SPAdes 3.14.0, SPAdes 3.14.0, STAR-Fusion 1.8.1, STAR 2.7.3a, Seaborn 0.10.0, SeqAn 1.4.2, Seurat 3.1.2, SimpleElastix 1.1.0, SimpleITK 1.2.4, Stacks 2.5, Stata 16, StringTie 2.1.0, scikit-optimize 0.7.4, statsmodels 0.11.0, TensorFlow 1.15.2 + 2.0.1, Tkinter 2.7.16, Trim_Galore 0.6.5, Trimmomatic 0.39, Trinity 2.10.0, tbb 2020.2, tqdm 4.41.1, XCrySDen 1.6.2, XGBoost 0.90, xarray 0.15.1, xmlf90 1.5.4 * minor enhancements, including: * add easyconfig for Java 11.0.6 on ``ppc64le`` and alter the Java 11 wrapper to support both x86_64 and ppc64le ( `#9371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9371> `_ ) * add additional extensions for R: ``HiddenMarkov`` ( `#9685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9685> `_ ), ``lmerTest`` ( `#9853 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9853> `_ ), ``VSURF`` + ``Rborist`` ( `#10355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10355> `_ ) * change Mesa 19.1.7 + 19.2.1 easyconfigs to use custom easyblock for Mesa ( `#9764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9764> `_ ) * build shared libs and install header files for Ghostscript ( `#9785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9785> `_ ) * add MUMPS as dependency in PETSc 3.12.4 easyconfigs ( `#9880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9880> `_ , `#9891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9891> `_ ) * add Perl extensions: ``Term::ReadLine::Gnu`` ( `#9901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9901> `_ ), ``URI::Escape`` and ``Set::IntervalTree`` ( `#10049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10049> `_ ) * add dat directory to aNCI ( `#9929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9929> `_ ) * add patch to create a symlink from ``libsvm.so.$(SHVER)`` to ``libsvm.so`` in LIBSVM easyconfigs ( `#10045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10045> `_ ) * build SUNDIALS with ' ``pic`` ' ( `#10278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10278> `_ ) * add ``BSgenome.Hsapiens.UCSC.hg38`` + ``MEDIPS`` extensions to R-bundle-Bioconductor v3.10 ( `#10298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10298> `_ ) * fix checksums for ``mkl-dnn`` and ``tbb`` extensions (moved to oneAPI repo) in PyTorch easyconfigs ( `#10367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10367> `_ ) * update ``Java/1.8`` wrapper to ``Java/1.8.0_241.eb`` ( `#10305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10305> `_ ) * various bug fixes, including: * use CMake for building double-conversion ( `#9659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9659> `_ ) * update recent libdrm easyconfigs to use custom easyblock & avoid hardcoded x86-specific sanity check ( `#9694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9694> `_ ) * add alternate checksum for OpenMolcas 18.09 ( `#9701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9701> `_ ) * use Github to download releases for MariaDB-connector-c ( `#9702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9702> `_ ) * add ``-DOMPI_SKIP_MPICXX`` in ``configopts`` for MathGL, to avoid using mpicxx during build ( `#9703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9703> `_ ) * make installing independent of build folder in pybind11 easyconfig ( `#9738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9738> `_ ) * add Lua as a dependency to gnuplot ( `#9773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9773> `_ ) * stick to ``http://`` source URLS for ISL in GCCcore easyconfigs, since ``https://`` doesn't work ( `#9784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9784> `_ ) * add alternative checksums for ``farver`` / ``fracdiff`` / ``pkgmaker`` / ``rngtools`` / ``doRNG`` / ``cobs`` extensions in R 3.6.2 easyconfigs ( `#9789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9789> `_ ) * add patch for OpenBLAS 0.3.4 w/ GCC/8.2.0-2.31.1 to fix broken tests ( `#9865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9865> `_ ) * revert removal of AVX512 vmovd with 64-bit operands in binutils 2.32 easyconfigs ( `#9866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9866> `_ ) * fix inline asm in dscal: mark x, x1 as clobbered, in OpenBLAS 0.3.8 ( `#9867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9867> `_ ) * add missing ``sanity_check_commands`` to cutadapt v1.18 and v2.7 easyconfigs ( `#9869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9869> `_ ) * don't overwrite ``configopts`` in BLAST+ easyconfigs, append to it ( `#9875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9875> `_ ) * add alternate checksum for ``LaplacesDemon`` in R 3.6.x easyconfigs ( `#9879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9879> `_ , `#10382 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10382> `_ ) * fix redefining of preconfigopts in OpenCV easyconfigs ( `#9895 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9895> `_ ) * use symlinks for terminfo files instead of hard links in ncurses 6.1 easyconfigs ( `#9912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9912> `_ ) * fix NCIPLOT build flags ( `#9915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9915> `_ ) * add missing patch to iccifort libxc easyconfigs ( `#9918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9918> `_ ) * use ``checkout@v2`` in GitHub Actions to fix broken re-triggered tests ( `#9925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9925> `_ ) * re-enable building utils in Siesta 4.1-MaX-1.0 release ( `#9936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9936> `_ ) * fix homepage and source URLs in SLEPc easyconfigs by using https ( `#9943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9943> `_ ) * fix source URLs for rgeos after source tarball was moved to CRAN archive ( `#9954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9954> `_ ) * add dependencies on Python 3 and SciPy-bundle in Trinity v2.9.1 easyconfig ( `#9957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9957> `_ ) * patch GCC ``lisanitizer`` for glibc 2.31 ( `#9966 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9966> `_ ) * add Zip as build dependency for recent Bazel versions ( `#9972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9972> `_ ) * fix checksums in Jellyfish v2.3.0 easyconfigs ( `#9997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9997> `_ ) * fix source URLs for ParMGridGen easyconfigs ( `#10019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10019> `_ ) * disable unintended Octave support in all libsndfile easyconfigs ( `#10027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10027> `_ ) * fix sources for LS-PrePost 4.6 ( `#10236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10236> `_ ) * security update for vsc-mympirun 4.1.9 ( `#10185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10185> `_ ) * configure libwebp to also install ``libwebpmux`` ( `#10274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10274> `_ ) * ensure that CVS easyconfigs are included in source tarball produced by ' ``python setup.py sdist`` ' ( `#10326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10326> `_ ) * fix undefined reference error due to libxc 4.3.4 built with CMake ( `#10356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10356> `_ ) * fix source_urls for tbb: use (new) official ' ``oneapi-src`` ' GitHub repository ( `#10361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10361> `_ ) * update checksums and homepage in tbb easyconfigs ( `#10285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10285> `_ ) * other changes: * use new custom easyblock in recent CMake easyconfigs ( `#9871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9871> `_ , `#9923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9923> `_ ) * add check for redefined easyconfig parameters in easyconfig tests ( `#9876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9876> `_ ) * use M4-1.4.18.eb for test installation in easyconfigs test suite ( `#9926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9926> `_ ) * use ``https://`` in ``homepage`` / ``source_urls`` of ``zlib-1.2.11.eb`` ( `#10018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10018> `_ ) * add ``-GCCcore-9.2.0`` versionsuffix for ``intel/2020.00`` components ( `#10083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10083> `_ ) * add checksum of new tbb 2019_U9 source tarball, next to original one + update homepage ( `#10237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10237> `_ ) * add comment informing about manually setting Gallium drivers in easyconfigs for Mesa v19.1.7 and v19.2.1 ( `#10276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10276> `_ ) .. _release_notes_eb412: EasyBuild v4.1.2 (March 16th 2020) ---------------------------------- bugfix release .. note :: This release includes a bug fix for the leaking of your GitHub token in the EasyBuild (debug) log file. **We strongly encourage that you revoke the GitHub tokens you are using currently, via** https://github.com/settings/tokens, **and to replace them using a new token (using** ``eb --install-github-token --force`` **).** More information in https://github.com/easybuilders/easybuild-framework/pull/3248 . **framework** * fix gitdb dependency on Python 2.6 in test configuration ( `#3212 <https://github.com/easybuilders/easybuild-framework/pull/3212> `_ ) * fix broken test for --review-pr by using different PR to test with ( `#3226 <https://github.com/easybuilders/easybuild-framework/pull/3226> `_ ) * censor authorization part of headers before logging ReST API request ( `#3248 <https://github.com/easybuilders/easybuild-framework/pull/3248> `_ ) **easyblocks** *(no changes)* **easyconfigs** *(no changes)* .. _release_notes_eb411: EasyBuild v4.1.1 (January 16th 2020) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add ``check_log_for_errors`` function (in ``easybuild.tools.run`` ) to detect and handle multiple errors ( `#3118 <https://github.com/easybuilders/easybuild-framework/pull/3118> `_ ) * implement support for ``eb --show-ec`` to show contents of specified easyconfig file ( `#3132 <https://github.com/easybuilders/easybuild-framework/pull/3132> `_ ) * also update ``$XDG_DATA_DIR`` (share/) and ``$GI_TYPELIB_PATH`` environment variables (lib */girepository-* ) in generated module files ( `#3133 <https://github.com/easybuilders/easybuild-framework/pull/3133> `_ ) * add support for ``--copy-ec`` to copy easyconfig file to specified location ( `#3142 <https://github.com/easybuilders/easybuild-framework/pull/3142> `_ ) * mention ``--disable-*`` option in ``--help`` output for boolean options enabled by default ( `#3151 <https://github.com/easybuilders/easybuild-framework/pull/3151> `_ ) * add ``--cuda-compute-capabilities`` configuration option ( `#3161 <https://github.com/easybuilders/easybuild-framework/pull/3161> `_ ) * various bug fixes, including: * ignore imports from ``vsc`` namespace made from pkgutil.py ( `#3120 <https://github.com/easybuilders/easybuild-framework/pull/3120> `_ ) * only actually change permissions using ``os.chmod`` in ``adjust_permissions`` if the current permissions are not correct already ( `#3125 <https://github.com/easybuilders/easybuild-framework/pull/3125> `_ ) * use ``shutil.copyfile`` to just copy file contents if target path exists and is owned by someone else ( `#3127 <https://github.com/easybuilders/easybuild-framework/pull/3127> `_ ) * fix or avoid warnings that commonly arise in build log ( `#3129 <https://github.com/easybuilders/easybuild-framework/pull/3129> `_ ) * disable buffering in ``asyncprocess.Popen`` using ``bufsize=0`` , to fix ``run_cmd_qa`` missing output ( `#3130 <https://github.com/easybuilders/easybuild-framework/pull/3130> `_ ) * update pip & install wheel package in generated Singularity container recipes ( `#3136 <https://github.com/easybuilders/easybuild-framework/pull/3136> `_ ) * avoid crash in ``modify_env`` & unset ``unset_env_vars`` when using (older versions) of Python 3.5 & 3.6 by using ``list(...)`` ( `#3140 <https://github.com/easybuilders/easybuild-framework/pull/3140> `_ ) * take into account that lib64 could be a symlink to lib (or vice versa) in ``get_software_libdir`` function ( `#3141 <https://github.com/easybuilders/easybuild-framework/pull/3141> `_ ) * only parse docstring if it exists in ``gen_easyblock_doc_section_rst`` function ( `#3144 <https://github.com/easybuilders/easybuild-framework/pull/3144> `_ ) * only add useful entries for ``$CPATH`` , ``$(LD_)LIBRARY_PATH`` and ``$PATH`` (non-empty directories) ( `#3145 <https://github.com/easybuilders/easybuild-framework/pull/3145> `_ , `#3152 <https://github.com/easybuilders/easybuild-framework/pull/3152> `_ ) * fix ``--list-software=detailed`` when using Python 3 by leveraging ``sort_looseversions`` function from ``py2vs3`` module ( `#3146 <https://github.com/easybuilders/easybuild-framework/pull/3146> `_ ) * ensure subdirectories in software install directory have correct search (exec) permission ( `#3147 <https://github.com/easybuilders/easybuild-framework/pull/3147> `_ ) * take into account that a checksum value may be a tuple of valid checksum in ``EasyBlock.check_checksums`` ( `#3153 <https://github.com/easybuilders/easybuild-framework/pull/3153> `_ ) * other changes: * bump to Lmod 8.2.9 in GitHub CI config ( `#3115 <https://github.com/easybuilders/easybuild-framework/pull/3115> `_ ) * update copyright statements for 2020 ( `#3149 <https://github.com/easybuilders/easybuild-framework/pull/3149> `_ ) * make Hound CI code style checker ignore \"Black would make changes\" produced by flake8-black ( `#3162 <https://github.com/easybuilders/easybuild-framework/pull/3162> `_ ) **easyblocks** * new software-specific easyblock for cryptography (to fix missing ``-pthread`` for all versions) ( `#1874 <https://github.com/easybuilders/easybuild-easyblocks/pull/1874> `_ ) * minor enhancements, including: * update WPS easyblock for v3.6 & newer ( `#1315 <https://github.com/easybuilders/easybuild-easyblocks/pull/1315> `_ ) * update FSL easyblock to support FSL v6.0.2 & newer ( `#1860 <https://github.com/easybuilders/easybuild-easyblocks/pull/1860> `_ ) * add ``setup_cmake_env`` function in CMakeMake easyblock which can be leveraged in other easyblocks, and use it for OpenFOAM ( `#1869 <https://github.com/easybuilders/easybuild-easyblocks/pull/1869> `_ ) * remove obsolete configure options for Python + build with optimizations/LTO enabled for recent Python versions ( `#1876 <https://github.com/easybuilders/easybuild-easyblocks/pull/1876> `_ ) * update WPS easyblock for recent versions: set ``$WRF_DIR`` to point to location of WRF installation ( `#1886 <https://github.com/easybuilders/easybuild-easyblocks/pull/1886> `_ ) * make sure ``$LIBLAPACK_MT`` is set before using it in ESMF easyblock ( `#1887 <https://github.com/easybuilders/easybuild-easyblocks/pull/1887> `_ ) * remove useless ``PATH`` entries + add ``PKG_CONFIG_PATH`` in imkl easyblock ( `#1900 <https://github.com/easybuilders/easybuild-easyblocks/pull/1900> `_ ) * enhance tbb easyblock to support building on POWER ( `#1912 <https://github.com/easybuilders/easybuild-easyblocks/pull/1912> `_ ) * enhance TensorFlow easyblock to pick up on ``--cuda-compute-capabilities`` , and issue a warning if no CUDA compute capabilities are specified ( `#1913 <https://github.com/easybuilders/easybuild-easyblocks/pull/1913> `_ ) * add custom easyconfig parameter ``build_type`` to generic CMakeMake easyblock ( `#1915 <https://github.com/easybuilders/easybuild-easyblocks/pull/1915> `_ , `#1922 <https://github.com/easybuilders/easybuild-easyblocks/pull/1922> `_ ) * various bug fixes, including: * fix for conda packages that rely on particular versions of Python ( `#1836 <https://github.com/easybuilders/easybuild-easyblocks/pull/1836> `_ ) * fix path for intel and netCDF lib directories in NCL easyblock ( `#1862 <https://github.com/easybuilders/easybuild-easyblocks/pull/1862> `_ ) * fix CUDA 10.1 installation on POWER ( `#1871 <https://github.com/easybuilders/easybuild-easyblocks/pull/1871> `_ ) * change Bazel easyblock to prefer using Java dependency rather than included JDK (fix for POWER9) ( `#1875 <https://github.com/easybuilders/easybuild-easyblocks/pull/1875> `_ ) * remove optarch warning in GROMACS for Cray toolchains ( `#1879 <https://github.com/easybuilders/easybuild-easyblocks/pull/1879> `_ ) * also fix ``$WM_COMPILE_OPTION`` in OpenFOAM rc scripts to make debug builds work correctly ( `#1880 <https://github.com/easybuilders/easybuild-easyblocks/pull/1880> `_ ) * limit MPI ranks used for running WRF test cases to max. 4 + include contents of rsl.error.0000 output file in case test failed ( `#1884 <https://github.com/easybuilders/easybuild-easyblocks/pull/1884> `_ ) * update ``$PYTHONPATH`` + add ``python -c 'import mrtrix3'`` as sanity check command for recent MRtrix versions ( `#1889 <https://github.com/easybuilders/easybuild-easyblocks/pull/1889> `_ ) * update sanity check in SAMtools easyblock for version 1.10 ( `#1890 <https://github.com/easybuilders/easybuild-easyblocks/pull/1890> `_ ) * make sure ``$PYTHONNOUSERSITE`` it set when performing sanity check for (bundles of) Python package(s) ( `#1891 <https://github.com/easybuilders/easybuild-easyblocks/pull/1891> `_ ) * fix install dir subdir for WPS v4.0+ that is considered for ``$PATH`` and ``$LD_LIBRARY_PATH`` ( `#1895 <https://github.com/easybuilders/easybuild-easyblocks/pull/1895> `_ ) * impi: don't rebuild libfabric if the source code is not present ( `#1896 <https://github.com/easybuilders/easybuild-easyblocks/pull/1896> `_ ) * also copy component patches to self.cfg in Bundle generic easyblock ( `#1897 <https://github.com/easybuilders/easybuild-easyblocks/pull/1897> `_ ) * skip patch step in Bundle generic easyblock (per-component patches are still applied) ( `#1898 <https://github.com/easybuilders/easybuild-easyblocks/pull/1898> `_ ) * derive easyblock for iccifort only from icc easyblock (not ifort), to avoid adding include subdir to ``$CPATH`` ( `#1899 <https://github.com/easybuilders/easybuild-easyblocks/pull/1899> `_ ) * add ``export LANG=C`` to preinstallopts instead of install_script path in CUDA easyblock ( `#1902 <https://github.com/easybuilders/easybuild-easyblocks/pull/1902> `_ ) * stop setting updating ``$CPATH`` and ``$LIBRARY_PATH`` for GCC and GCCcore, not required ( `#1903 <https://github.com/easybuilders/easybuild-easyblocks/pull/1903> `_ ) * remove ``$LIBRARY_PATH`` entries in iccifort easyblock, already known to icc et al ( `#1904 <https://github.com/easybuilders/easybuild-easyblocks/pull/1904> `_ ) * use major/minor version of Python command being used if ``req_py_majver`` / ``req_py_minver`` are not specified ( `#1907 <https://github.com/easybuilders/easybuild-easyblocks/pull/1907> `_ ) * define ``$EB_PYTHON`` in module for EasyBuild installation, to make sure correct Python version is used at runtime ( `#1908 <https://github.com/easybuilders/easybuild-easyblocks/pull/1908> `_ ) * fix Python easyblock to allow configuring build of Python v3.8 ( ``Setup.dist`` script was renamed to ``Setup`` ) ( `#1909 <https://github.com/easybuilders/easybuild-easyblocks/pull/1909> `_ ) * fix netCDF easyblock for version 4.4.0 ( `#1911 <https://github.com/easybuilders/easybuild-easyblocks/pull/1911> `_ ) * correct comment about when we set ``RUNPARALLEL`` in HDF5 easyblock ( `#1914 <https://github.com/easybuilders/easybuild-easyblocks/pull/1914> `_ ) * do not sanity check on MATLAB compiler, since it requires a separate license ( `#1916 <https://github.com/easybuilders/easybuild-easyblocks/pull/1916> `_ ) * build HDF5 without MPI C++ extension to avoid breaking linkage for C software that requires HDF5 ( `#1918 <https://github.com/easybuilders/easybuild-easyblocks/pull/1918> `_ , `#1919 <https://github.com/easybuilders/easybuild-easyblocks/pull/1919> `_ ) * override ``set_pylibdirs`` method in ``VersionIndependentPythonPackage`` to hard set ``self.pylibdir`` to 'lib' ( `#1924 <https://github.com/easybuilders/easybuild-easyblocks/pull/1924> `_ ) * other changes: * increase timeout for interactive installation command in CUDA easyblock to 1000 sec. ( `#1878 <https://github.com/easybuilders/easybuild-easyblocks/pull/1878> `_ ) * disable running of ``sudo apt-get update`` in GitHub CI config, since it's failing (and we don't really need it) ( `#1882 <https://github.com/easybuilders/easybuild-easyblocks/pull/1882> `_ ) * stop requiring Python dep for SWIG, just configure with ``--without-python`` if Python is not a dependency ( `#1894 <https://github.com/easybuilders/easybuild-easyblocks/pull/1894> `_ ) * update copyright statements for 2020 ( `#1905 <https://github.com/easybuilders/easybuild-easyblocks/pull/1905> `_ ) * make Hound CI code style checker ignore \"Black would make changes\" produced by flake8-black ( `#1923 <https://github.com/easybuilders/easybuild-easyblocks/pull/1923> `_ ) **easyconfigs** * added example easyconfig files for 27 new software packages: * Autoconf-archive ( `#9658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9658> `_ ), breseq ( `#9603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9603> `_ ), CrossMap ( `#9483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9483> `_ ), CSBDeep ( `#9560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9560> `_ ), CNT-ILP ( `#9323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9323> `_ ), cytoolz ( `#9453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9453> `_ ), Faber ( `#9553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9553> `_ ), Fiji ( `#8748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8748> `_ ), GARLI ( `#9404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9404> `_ ), Globus-CLI ( `#9565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9565> `_ ), GtkSourceView ( `#9526 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9526> `_ ), gradunwarp ( `#9648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9648> `_ ), gsettings-desktop-schemas ( `#9529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9529> `_ ), HyPhy ( `#9405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9405> `_ ), horton ( `#7449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7449> `_ ), IGMPlot ( `#9438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9438> `_ ), LEMON ( `#9323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9323> `_ ), Meld ( `#9530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9530> `_ ), mhcflurry ( `#9554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9554> `_ ), NCIPLOT ( `#9419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9419> `_ ), ncl ( `#9632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9632> `_ ), OpenSlide ( `#9499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9499> `_ ), openslide-python ( `#9499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9499> `_ ), pythran ( `#9488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9488> `_ , `#9594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9594> `_ ), Qualimap ( `#9411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9411> `_ ), TinyDB ( `#9555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9555> `_ ), TreeShrink ( `#9381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9381> `_ ) * added additional easyconfigs for various supported software packages, including: * Beast 1.10.4, Boost.Python 1.71.0, Clang 9.0.1, ESMF 8.0.0, FSL 6.0.3, fastp 0.20.0, freeglut 3.2.1, GDAL 3.0.2, GEOS 3.8.0, GROMACS 2019.4, GSL 2.6, hwloc 2.1.0, Jellyfish 2.3.0, Julia 1.3.1, LibTIFF 4.1.0, libxml2 2.9.10, lxml 4.4.2, Mothur 1.43.0, mayavi 4.7.1, molmod 1.4.5, netCDF-C++4 4.3.1, netCDF-Fortran 4.5.2, numactl 2.0.13, OpenFOAM 7, OpenFOAM v1912, OpenMM 7.4.1, OpenMPI 4.0.2, PLUMED 2.5.3, PROJ 6.2.1, plotly.py 4.4.1, pocl 1.4, QuickFF 2.2.4, R 3.6.2 w/ foss/2019b and fosscuda/2019b, ReFrame 2.20, SAMtools 1.10, SUNDIALS 5.1.0, SWIG 4.0.1, Salmon 1.0.0, SuiteSparse 5.6.0, snakemake 5.7.1, TensorFlow 2.1.0 w/ fosscuda/2019b, torchvision 0.4.2, WPS 4.1, WRF 4.1.3 * added easyconfigs for ``intel/2020.00`` toolchain ( `#9575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9575> `_ ) * minor enhancements, including: * add POWER9 support to CUDA 10.1 easyconfigs ( `#9442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9442> `_ ) * build CMake in parallel ( `#9543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9543> `_ ) * use NCCL for GPU ops in Horovod 0.18.2 easyconfig ( `#9562 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9562> `_ ) * update Java/1.8 wrapper to Java/1.8.0_231 (for x86_64) ( `#9585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9585> `_ ) * various bug fixes, including: * fix remote launch of broker and workers for SCOOP ( `#9366 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9366> `_ ) * fix failing RPATH sanity check for NCL 6.6.2 due to missing dependencies (+ add easyconfig using ``foss/2018b`` ) ( `#9388 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9388> `_ ) * add missing 'wheel' extensions to Spark 2.4.0 easyconfig using ``intel/2018b`` toolchain ( `#9424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9424> `_ ) * add missing OS dependencies in Java 1.8 easyconfig used on POWER systems ( `#9454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9454> `_ ) * fix build of recent Bazel versions on Power9 + stick to Java/1.8 as dependency ( `#9455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9455> `_ ) * fix CMake 3.15.3 build on Power (+ enable building in parallel) ( `#9469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9469> `_ ) * fix source URLs in xorg-macros easyconfigs ( `#9477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9477> `_ , `#9578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9578> `_ ) * add missing wcwidth extension to Python 2.7.15 + 2.7.16 easyconfigs & enable 'pip check' in sanity check ( `#9479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9479> `_ ) * remove (wrong) ``GI_TYPELIB_PATH`` and ``XDG_DATA_DIRS`` in various easyconfigs ( `#9528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9528> `_ , `#9577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9577> `_ , `#9615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9615> `_ ) * use xorg-macros as dependency in X11 easyconfigs (rather than installing it as a bundle component) ( `#9546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9546> `_ ) * fix lpsymphony extension for R-bundle-Bioconductor ( `#9548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9548> `_ ) * add correct 'old-versions' source URL to all Mesa easyconfigs ( `#9569 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9569> `_ ) * add missing SHA256 checksums for Armadillo ( `#9572 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9572> `_ ) * also define ``$AUGUSTUS_BIN_PATH`` and ``$AUGUSTUS_SCRIPTS_PATH`` in generated module file for AUGUSTUS ( `#9579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9579> `_ ) * add SSL OS dependencies for GDAL 3.0.0 ( `#9586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9586> `_ ) * add missing jupyter_contrib_core extension for IPython 7.7.0+ + consistently include jupyter_nbextensions_configurator extension ( `#9587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9587> `_ ) * patch libcxx (Clang 8.0.0) on pcc64le for incomplete IBM128 long double in GCC ( `#9590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9590> `_ ) * patch for GCCcore 8.2.0 to fix '__float128 is not supported on this target' on ppc64le ( `#9591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9591> `_ ) * fix broken easyconfigs for cyvcf2 v0.11.5 by adding missing 'monotonic' extension ( `#9601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9601> `_ ) * use absolute path for extraction to allow relocating the build dir for g2log-1.0 ( `#9604 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9604> `_ ) * add alternate SHA256 checksum for kallisto-0.43.1 after re-release under same version without code changes ( `#9611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9611> `_ ) * add additional valid checksum for MASS 7.3-51.4 extension in R 3.6.0 easyconfigs ( `#9621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9621> `_ ) * update ctffind website ( `#9622 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9622> `_ ) * make sure we use easybuild Clang in pocl easyconfigs ( `#9624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9624> `_ ) * make ``postinstallcmds`` independent of current working directory in OpenCV 3.1.0 easyconfigs ( `#9628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9628> `_ ) * update ``source_urls`` to include old releases folder in libsodium easyconfigs ( `#9632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9632> `_ ) * fix source URLs for ant v1.10.5 - v1.10.7 ( `#9633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9633> `_ ) * update URLs to new location of libxc ( `#9635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9635> `_ ) * add alternate SHA256 checksum for rda_1.0.2-2.1 extension in R 3.6.0 ( `#9644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9644> `_ ) * update source URLs in QCA 2.1.0 easyconfigs ( `#9647 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9647> `_ ) * fix Python 3.5.1 easyconfig: bitstring 3.1.3 sources no longer available on PyPI ( `#9649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9649> `_ ) * fix tesseract 4.1.0 dependencies ( `#9650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9650> `_ ) * make ICU 64.2 depend on Python3 instead of Python 2, to avoid picking up system Python 3.x ( `#9652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9652> `_ ) * use ``True`` (boolean value) rather than ``'True'`` (string value) for boolean easyconfig parameters ( `#9657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9657> `_ ) * fix pyfits easyconfig by adding missing d2to1 extension ( `#9687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9687> `_ ) * other changes: * disable running of ``sudo apt-get update`` in GitHub CI config, since it's failing (and we don't really need it) ( `#9492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9492> `_ ) * require that ``sanity_pip_check`` is enabled in new/changed easyconfigs ( `#9516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9516> `_ , `#9576 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9576> `_ ) * update copyright statements for 2020 ( `#9598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9598> `_ ) * allow missing '-Python-*' versionsuffix for existing easyconfig files changed in PRs ( `#9634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9634> `_ ) .. _release_notes_eb410: EasyBuild v4.1.0 (December 4th 2019) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * performance improvements: * skip validation when copying EasyConfig object for extension ( `#3071 <https://github.com/easybuilders/easybuild-framework/pull/3071> `_ ) * correctly specify that ActiveMNS & co are singleton classes when using Python 3 ( `#3073 <https://github.com/easybuilders/easybuild-framework/pull/3073> `_ ) * don't call out to prohibitively expensive ``getRootLoggerName`` in ``getLogger`` , just use 'root' instead ( `#3074 <https://github.com/easybuilders/easybuild-framework/pull/3074> `_ ) * fix inconsistent module path usage that leads to repeated reloading in HMNS ( `#3099 <https://github.com/easybuilders/easybuild-framework/pull/3099> `_ ) * add support for specifying different dependency version based on processor architecture ( `#3047 <https://github.com/easybuilders/easybuild-framework/pull/3047> `_ ) * support use of glob patterns for paths to files with external modules metadata ( `#3075 <https://github.com/easybuilders/easybuild-framework/pull/3075> `_ ) * take into account that external modules may not be visible directly (due to module hierarchy) ( `#3083 <https://github.com/easybuilders/easybuild-framework/pull/3083> `_ ) * add support for including 'extensions' statement in Lua modules with Lmod 8.2.8+ ( `#3085 <https://github.com/easybuilders/easybuild-framework/pull/3085> `_ , `#3107 <https://github.com/easybuilders/easybuild-framework/pull/3107> `_ , `#3110 <https://github.com/easybuilders/easybuild-framework/pull/3110> `_ ) * add support for ``--sync-pr-with-develop`` ( `#3087 <https://github.com/easybuilders/easybuild-framework/pull/3087> `_ ) * add support for ``--new-branch-github`` , ``--new-pr-from-branch`` , ``--sync-branch-with-develop`` , ``--update-branch-github`` ( `#3103 <https://github.com/easybuilders/easybuild-framework/pull/3103> `_ ) * fix typo in docstring for ``new_branch_github`` ( `#3106 <https://github.com/easybuilders/easybuild-framework/pull/3106> `_ ) * various bug fixes, including: * correctly handle ``iccifortcuda`` toolchain with standalone ``iccifort`` in ``det_toolchain_compilers`` ( `#3055 <https://github.com/easybuilders/easybuild-framework/pull/3055> `_ ) * init git repo with ``git.repo.clone()`` instead of ``copy_dir()`` ( `#3062 <https://github.com/easybuilders/easybuild-framework/pull/3062> `_ ) * fix regular expression so depends-on statements are recognized correctly in Tcl module files ( `#3065 <https://github.com/easybuilders/easybuild-framework/pull/3065> `_ ) * update GitPython to latest version that supports Python 2.6 in requirements.txt to fix broken ``test_new_update_pr`` ( `#3066 <https://github.com/easybuilders/easybuild-framework/pull/3066> `_ ) * imply ``--disable-pre-create-installdir`` with ``--inject-checksums`` ( `#3069 <https://github.com/easybuilders/easybuild-framework/pull/3069> `_ ) * handle patches in extensions more like normal patches ( `#3067 <https://github.com/easybuilders/easybuild-framework/pull/3067> `_ ) * take into account that ``platform.linux_distribution`` and ``platform.dist`` was removed in Python 3.8 ( `#3078 <https://github.com/easybuilders/easybuild-framework/pull/3078> `_ ) * always include mandatory easyconfig parameters in dumped easyconfig ( `#3081 <https://github.com/easybuilders/easybuild-framework/pull/3081> `_ ) * hide backup module file when using Lmod 6.x (fixes `#9302 <https://github.com/easybuilders/easybuild-easyconfigs/issues/9302> `_ ) ( `#3089 <https://github.com/easybuilders/easybuild-framework/pull/3089> `_ ) * add better error message when mandatory key is missing from a dictionary easyconfig parameter ( `#3092 <https://github.com/easybuilders/easybuild-framework/pull/3092> `_ ) * also create symlinks for default modules in class module folders ( `#3093 <https://github.com/easybuilders/easybuild-framework/pull/3093> `_ ) * fix semantics of ``--set-default-module`` : only set default for specified easyconfigs, not for the ones that are installed as dependencies via ``--robot`` ( `#3094 <https://github.com/easybuilders/easybuild-framework/pull/3094> `_ ) * fix various issues in extracting comments from original easyconfig file and including them again in dumped easyconfig ( `#3095 <https://github.com/easybuilders/easybuild-framework/pull/3095> `_ ) * don't use ``%(version)s`` template in ``exts_default_options`` in dumped easyconfig ( `#3096 <https://github.com/easybuilders/easybuild-framework/pull/3096> `_ ) * fix generated module statements in case only a single version is listed in ``multi_deps`` ( `#3097 <https://github.com/easybuilders/easybuild-framework/pull/3097> `_ ) * fix broken ``test_show_system_info`` on macOS due to 'Python' binary ( `#3105 <https://github.com/easybuilders/easybuild-framework/pull/3105> `_ ) * take into account that dependency version could be a dict rather than a string value in template_constant_dict ( `#3111 <https://github.com/easybuilders/easybuild-framework/pull/3111> `_ ) * other changes: * deprecate running EasyBuild with Python 2.6 via new ``check_python_version()`` function ( `#3076 <https://github.com/easybuilders/easybuild-framework/pull/3076> `_ ) * deprecate support for using Lmod 6.x ( `#3077 <https://github.com/easybuilders/easybuild-framework/pull/3077> `_ ) * trim set of test configurations in Travis CI ( `#3086 <https://github.com/easybuilders/easybuild-framework/pull/3086> `_ ) * flesh out ``env_vars_external_module`` from ``Toolchain._simulated_load_dependency_module`` ( `#3088 <https://github.com/easybuilders/easybuild-framework/pull/3088> `_ ) **easyblocks** * new software-specific easyblock for cuDNN, to allow setting ``cudnnarch`` ( `#1855 <https://github.com/easybuilders/easybuild-easyblocks/pull/1855> `_ ) * refactored software-specific easyblock for Xmipp, based on Scons ( `#1837 <https://github.com/easybuilders/easybuild-easyblocks/pull/1837> `_ ) * minor enhancements, including: * add ``prebuildopts`` to Bazel build command ( `#1838 <https://github.com/easybuilders/easybuild-easyblocks/pull/1838> `_ ) * add support to Toolchain generic easyblock for defining $EB* environment variables for toolchain components that use an external module ( `#1849 <https://github.com/easybuilders/easybuild-easyblocks/pull/1849> `_ ) * add support for running 'pip check' during sanity check in generic PythonPackage easyblock ( `#1853 <https://github.com/easybuilders/easybuild-easyblocks/pull/1853> `_ ) * various bug fixes, including: * clean up ``/tmp/cuda-installer.log`` in CUDA easyblock, to avoid segfault in cuda-installer ( `#1835 <https://github.com/easybuilders/easybuild-easyblocks/pull/1835> `_ ) * minor fix to name of Gctf binary ( `#1840 <https://github.com/easybuilders/easybuild-easyblocks/pull/1840> `_ ) * move BLAS toolchain existence check earlier in SuperLU easyblock ( `#1842 <https://github.com/easybuilders/easybuild-easyblocks/pull/1842> `_ ) * fixes for TensorFlow easyblocks w.r.t. Bazel build options & ``__init__`` in top-level google-protobuf package dir ( `#1843 <https://github.com/easybuilders/easybuild-easyblocks/pull/1843> `_ ) * fix support for sequential version in MUMPS easyblock ( `#1845 <https://github.com/easybuilders/easybuild-easyblocks/pull/1845> `_ ) * change default value of ``files_to_copy`` to None in MakeCp generic easyblock + code cleanup & use ``change_dir`` , ``copy_dir`` , ``copy_file`` and ``mkdir`` function from ``filetools`` ( `#1848 <https://github.com/easybuilders/easybuild-easyblocks/pull/1848> `_ ) * prepend ``-L$EBROOTZLIB/lib`` to ``LDFLAGS`` in SCOTCH easyblock ( `#1850 <https://github.com/easybuilders/easybuild-easyblocks/pull/1850> `_ ) * improve configuration in netCDF and netcdf4_python easyblocks ( `#1852 <https://github.com/easybuilders/easybuild-easyblocks/pull/1852> `_ ) * fix CUDA header paths for TensorFlow versions < 1.14 ( `#1854 <https://github.com/easybuilders/easybuild-easyblocks/pull/1854> `_ ) * handle incorrect regex better in generic CmdCp easyblock ( `#1861 <https://github.com/easybuilders/easybuild-easyblocks/pull/1861> `_ ) * add missing docstrings in cmakeninja easyblock ( `#1867 <https://github.com/easybuilders/easybuild-easyblocks/pull/1867> `_ ) * other changes: * add GitHub Actions workflow to run easybuild-easyblocks test suite ( `#1844 <https://github.com/easybuilders/easybuild-easyblocks/pull/1844> `_ ) **easyconfigs** * added example easyconfig files for 46 new software packages: * Amara ( `#9340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9340> `_ ), anvio ( `#9387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9387> `_ ), Arriba ( `#9226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9226> `_ , `#9244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9244> `_ ), attr ( `#7824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7824> `_ ), bibtexparser ( `#9284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9284> `_ ), bwa-meth ( `#9217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9217> `_ ), CITE-seq-Count ( `#9237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9237> `_ ), CoordgenLibs ( `#9374 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9374> `_ ), dtcmp ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), fatslim ( `#9193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9193> `_ ), GromacsWrapper ( `#9177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9177> `_ ), GULP ( `#9243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9243> `_ ), hdf5storage ( `#9195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9195> `_ ), ITSTool ( `#7260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7260> `_ ), kim-api ( `#8786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8786> `_ ), kwant ( `#9238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9238> `_ ), libarchive ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), libcircle ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), libxml2-python ( `#7260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7260> `_ ), lifelines ( `#9215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9215> `_ ), lwgrp ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), maeparser ( `#9374 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9374> `_ ), MaxQuant ( `#9281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9281> `_ ), MethylDackel ( `#9216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9216> `_ ), MoviePy ( `#9205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9205> `_ ), mpifileutils ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), mpiP ( `#9059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9059> `_ ), nanofilt ( `#8502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8502> `_ ), NOVOPlasty ( `#9326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9326> `_ ), openkim-models ( `#8786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8786> `_ ), parallel-fastq-dump ( `#9218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9218> `_ ), pasta ( `#9348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9348> `_ ), pyqstem ( `#9277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9277> `_ ), python-Levenshtein ( `#9237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9237> `_ ), RapidJSON ( `#9373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9373> `_ ), RDFlib ( `#9346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9346> `_ ), RQGIS3 ( `#9125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9125> `_ ), Short-Pair ( `#9376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9376> `_ ), SpliceMap ( `#9375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9375> `_ ), TRIQS-cthyb ( `#9230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9230> `_ ), TRIQS-dft_tools ( `#9230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9230> `_ ), TRIQS-tprf ( `#9230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9230> `_ ), UMI-tools ( `#9237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9237> `_ ), VarDict ( `#7283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7283> `_ ), Xmipp ( `#9257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9257> `_ ), XSD ( `#9347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9347> `_ ) * added additional easyconfigs for various supported software packages, including: * awscli 1.16.290, BLIS 0.6.0, Bazel 1.1.0, Biopython 1.75, Blender 2.81, bokeh 1.4.0, CONCOCT 1.1.0, CUDA 10.2.89, Catch2 2.11.0, CellRanger 3.1.0, CheckM 1.0.18, dask 2.8.0, deepTools 3.3.1, FastANI 1.2, Flye 2.6, GDCM 3.0.4, GTDB-Tk 0.3.2, Glade 3.8.6, Hadoop 2.9.2, h5py 2.10.0, hypothesis 4.44.2, IPython 7.9.0, Kaiju 1.7.2, Kraken 1.1.1, libsodium 1.0.18, MEGAHIT 1.2.8, Mesa 19.2.1, MetaBAT 2.14, matplotlib 3.1.1, metaWRAP 1.2.2,cNCCL 2.4.8, NGS 2.10.0, NiBabel 2.5.1, netCDF 4.7.1, networkx 2.4, numba 0.46.0, OpenCV 3.4.7, OpenCoarrays 2.8.0, OpenEXR 2.4.0, OpenFOAM v1906, OpenImageIO 2.0.12, ParaView 5.6.2, Pillow 6.2.1, PyTorch 1.3.1, PyYAML 5.1.2, Pysam 0.15.3, picard 2.21.1, prokka 1.14.5, protobuf 3.10.0, R-keras 2.2.5.0, Racon 1.4.7, SCOTCH 6.0.9, SRPRISM 3.1.1, Salmon 0.14.2, SciPy-bundle 2019.10, Subread 2.0.0, scikit-image 0.16.2, scikit-learn 0.21.3, TRIQS 2.2.1, TensorFlow 1.15.0, TensorFlow 2.0.0 w/ fosscuda/2019b, Tkinter 3.7.4, ToFu 1.4.1, tbb 2019_U9, Xerces-C++ 3.2.2, Xmipp 3.19.04, yaff 1.6.0 * added easyconfigs for ``intelcuda/2019a`` toolchain ( `#9271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9271> `_ ) * minor enhancements, including: * tweak Java 1.8 wrapper to use different Java version on POWER systems ( `#9081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9081> `_ ) * add jupyter_nbextensions_configurator extension to IPython 7.7.0 easyconfigs ( `#9133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9133> `_ ) * add additional extensions to R 3.6.0 easyconfigs ( `#9184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9184> `_ , `#9275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9275> `_ ) * add additional extensions to R-bundle-Bioconductor 3.9 easyconfig ( `#9185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9185> `_ , `#9349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9349> `_ , `#9410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9410> `_ ) * enhance sanity check in cutadapt 1.18 easyconfigs + consistently use PythonBundle & ``use_pip`` ( `#9219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9219> `_ ) * update cuDNN 7.6.4.38 easyconfigs to support both x86_64 and ppc64le ( `#9331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9331> `_ ) * tweak NCCL 2.4.8 easyconfig to support x86_64 and ppc64le ( `#9336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9336> `_ ) * define ``$SPARK_HOME`` in generated module file for Spark 2.4.0 ( `#9408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9408> `_ ) * add sanity check command for matplotlib 3.x with Python 3 to check import from mpl_toolkits ( `#9413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9413> `_ , `#9414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9414> `_ ) * various bug fixes, including: * explicitly set ``SYSCONFDIR`` configure option in TurboVNC easyconfig ( `#9137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9317> `_ ) * patch pigz Makefile so zlib provided by EasyBuild is picked up ( `#9138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9138> `_ ) * add libjpeg-turbo as dependency to recent LibTIFF easyconfigs, to avoid picking up LibTIFF installed in system ( `#9146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9146> `_ ) * add freetype as dependency to OpenImageIO, to avoid picking up freetyype installed in system ( `#9147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9147> `_ , `#9152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9152> `_ ) * fix definition of ``fosscuda/2019b`` to make sure it works with hierarchical MNS ( `#9178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9178> `_ ) * add missing setuptools_scm extension required to build dateutil extension in Python 3.7.0 easyconfigs ( `#9209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9209> `_ ) * add Python as build dependency for recent Bazel versions ( `#9223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9223> `_ , `#9299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9299> `_ , `#9342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9342> `_ ) * fix homepage & description in Bioconductor easyconfigs ( `#9225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9225> `_ ) * fix checksum in Stacks 2.41 easyconfig after sneaky re-release ( `#9232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9232> `_ ) * apply fixes to ImageJ 1.51k easyconfig ( `#9245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9245> `_ ) * consistently use patch for OpenCV 3.4.7 ( `#9279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9279> `_ ) * use protobuf 3.10.0 as build dep for TensorFlow 2.0.0 w/ fosscuda/2019b + use nodocs variant of git as build dep ( `#9298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9298> `_ ) * add Jasper dependency to Qt5 v.5.13.1 ( `#9313 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9313> `_ ) * fix Python 3.7.2 required OpenSSL version for old OS to the one provided on the same toolchain ( `#9324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9324> `_ ) * add missing extensions required by Sphinx & pytest to easyconfigs for Python 3.7.2 and 3.7.4 ( `#9329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9329> `_ ) * update TensorFlow v1.14.0 + v2.0.0 CUDA patch to handle compiler wrappers like ccache ( `#9333 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9333> `_ ) * patch binutils 2.31.1 and 2.32 to fix compatibility with RHEL8 ( `#9335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9335> `_ ) * add missing extensions in TensorFlow 2.0.0 easyconfigs (+ update to tensorboard/tensorflow-estimator 2.0.1) ( `#9338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9338> `_ ) * fix logic to determine location of scripts dir + ensure right compiler flags are used in KAT easyconfigs ( `#9360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9360> `_ ) * add missing GCCcore-6.3.0_fix-sanitizer_linux.patch in GCCcore 6.4.0 easyconfig ( `#9362 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9362> `_ ) * fix linker errors when linking with libhts.a for MetaBAT 2.12.1 ( `#9379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9379> `_ ) * add egg-info file via patch in VTK v8.2.0, for Pytho 2.7.15, 3.7.2, 3.7.4 ( `#9386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9386> `_ ) * promote binutils to a runtime dependency for Python in GCCcore based builds ( `#9402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9402> `_ ) * fix archive URL typo for ncdf4 ( `#9407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9407> `_ ) * fix problems with mpl_toolkits namespace for matplotlib easyconfigs using Python 2 ( `#9415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9415> `_ , `#9416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9416> `_ , `#9417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9417> `_ ) * other changes: * ignore commented out lines in easyconfig files when checking for http:// URLs ( `#9224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9224> `_ ) * add GitHub Actions workflow to run easybuild-easyconfigs test suite ( `#9231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9231> `_ , `#9255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9255> `_ ) * archive old patches for Xmipp 3.1 ( `#9256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9256> `_ ) * speed up easyconfigs test suite by avoiding re-parsing and re-ordering of easyconfigs ( `#9236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9236> `_ ) * only run easyconfigs test suite with Python 2.7 & 3.6 + Lmod 7 in Travis CI ( `#9297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9297> `_ ) * archive ACML easyconfigs ( `#9367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9365> `_ ) * update CMake build in Eigen 3.3.7 to use more recent toolchain ( `#9398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9398> `_ ) .. _release_notes_eb401: EasyBuild v4.0.1 (October 15th 2019) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add ' ``parallel`` ' to list of config templates ( `#3036 <https://github.com/easybuilders/easybuild-framework/pull/3036> `_ ) * add GitHub Actions workflow to run easybuild-framework test suite ( `#3039 <https://github.com/easybuilders/easybuild-framework/pull/3039> `_ ) * add ' ``retest`` ' as a reason to ``--close-pr`` , to close/re-open PRs to trigger re-test in Travis ( `#3040 <https://github.com/easybuilders/easybuild-framework/pull/3040> `_ ) * define ``$EB_SCRIPT_PATH`` in ' ``eb`` ' wrapper script, and consider it before location of ' ``eb`` ' determined via ``$PATH`` in ``get_paths_for`` function ( `#3046 <https://github.com/easybuilders/easybuild-framework/pull/3046> `_ ) * add support for ``--remove-ghost-install-dirs`` configuration option, and warn about (potential) ghost install dirs by default when ``--force`` / ``--rebuild`` is used ( `#3050 <https://github.com/easybuilders/easybuild-framework/pull/3050> `_ ) * various bug fixes, including: * update bootstrap script to support installing EasyBuild v4.0 ( `#3017 <https://github.com/easybuilders/easybuild-framework/pull/3017> `_ ) * fix broken ``test_download_repo`` due to archiving of easyconfigs ( `#3019 <https://github.com/easybuilders/easybuild-framework/pull/3019> `_ , `#3023 <https://github.com/easybuilders/easybuild-framework/pull/3023> `_ ) * avoid that ``--inject-checksums`` introduces list of patches for extensions as a single long line ( `#3025 <https://github.com/easybuilders/easybuild-framework/pull/3025> `_ , `#3034 <https://github.com/easybuilders/easybuild-framework/pull/3034> `_ ) * enhance regex in ``fix_shebang`` method to fix more Python/Perl shebangs + avoid patching binary files ( `#3029 <https://github.com/easybuilders/easybuild-framework/pull/3029> `_ ) * delete test gist that is created by ``--check-github`` ( `#3031 <https://github.com/easybuilders/easybuild-framework/pull/3031> `_ ) * disable templates when defining easyconfig parameters in ``EasyConfig.set_keys()`` ( `#3037 <https://github.com/easybuilders/easybuild-framework/pull/3037> `_ ) * avoid setting GC3Pie's max_in_flight to ``None`` if ``--job-max-jobs`` is not specified ( `#3038 <https://github.com/easybuilders/easybuild-framework/pull/3038> `_ ) * fix use of ``obtain_file`` method for extensions ( `#3042 <https://github.com/easybuilders/easybuild-framework/pull/3042> `_ ) * error out if some GC3Pie job failed ( `#3044 <https://github.com/easybuilders/easybuild-framework/pull/3044> `_ ) **easyblocks** * one new generic easyblock: ``CMakeNinja`` ( `#1829 <https://github.com/easybuilders/easybuild-easyblocks/pull/1829> `_ ) * new software-specific easyblock for Gctf ( `#1827 <https://github.com/easybuilders/easybuild-easyblocks/pull/1827> `_ ), MotionCor2 ( `#1819 <https://github.com/easybuilders/easybuild-easyblocks/pull/1819> `_ ) * minor enhancements, including: * update OpenFOAM easyblock for changes in version 1906 w.r.t. wamke rules ( `#1772 <https://github.com/easybuilders/easybuild-easyblocks/pull/1772> `_ ) * add ``%(cudaarch)s`` template variable so that it can be used in sources ( `#1797 <https://github.com/easybuilders/easybuild-easyblocks/pull/1797> `_ ) * update Boost easyblock for versions >=1.71.0 ( `#1814 <https://github.com/easybuilders/easybuild-easyblocks/pull/1814> `_ ) * update RepeatMasker easyblock for version 4.0.9 ( `#1815 <https://github.com/easybuilders/easybuild-easyblocks/pull/1815> `_ ) * add ``--verbose`` flag to ' ``pip install`` ' when running EB in debug mode ( `#1822 <https://github.com/easybuilders/easybuild-easyblocks/pull/1822> `_ ) * update TensorFlow easyblock to support TensorFlow 2.0 ( `#1823 <https://github.com/easybuilders/easybuild-easyblocks/pull/1823> `_ ) * add support in TensorFlow easyblock to run a custom test script as smoke test ( `#1824 <https://github.com/easybuilders/easybuild-easyblocks/pull/1824> `_ ) * add support for installing QScintilla on top of PyQt5 ( `#1825 <https://github.com/easybuilders/easybuild-easyblocks/pull/1825> `_ ) * update VEP easyblock to make installation compatible with ``Bio::EnsEMBL::XS`` ( `#1828 <https://github.com/easybuilders/easybuild-easyblocks/pull/1828> `_ ) * various bug fixes, including: * enhance TensorFlow easyblock to support installing TF 1.14.0 with CUDA and MPI support ( `#1811 <https://github.com/easybuilders/easybuild-easyblocks/pull/1811> `_ , `#1816 <https://github.com/easybuilders/easybuild-easyblocks/pull/1816> `_ ) * avoid ``UnicodeDecodeError`` when reading ' ``configure`` ' script and checking for ' ``Generated by GNU Autoconf`` ' in ``ConfigureMake`` ( `#1817 <https://github.com/easybuilders/easybuild-easyblocks/pull/1817> `_ , `#1821 <https://github.com/easybuilders/easybuild-easyblocks/pull/1821> `_ ) * don't require ' ``python`` ' command to install libxml2 without Python bindings ( `#1818 <https://github.com/easybuilders/easybuild-easyblocks/pull/1818> `_ ) * make sure \" ``generic=True`` \" actually turns on generic build in GCC easyblock ( `#1826 <https://github.com/easybuilders/easybuild-easyblocks/pull/1826> `_ ) * fix compatibility of Trilinos easyblock with Python 3 ( `#1831 <https://github.com/easybuilders/easybuild-easyblocks/pull/1831> `_ ) **easyconfigs** * added example easyconfig files for 58 new software packages: * ADOL-C ( `#9098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9098> `_ ), ALFA ( `#9106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9106> `_ ), ASTRID ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), Annif ( `#8536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8536> `_ ), bnpy ( `#8989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8989> `_ ), bpp-core ( `#9064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9064> `_ ), bpp-phyl ( `#9064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9064> `_ ), bpp-seq ( `#9064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9064> `_ ), Clang-Python-bindings ( `#9084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9084> `_ ), CPB ( `#5869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5869> `_ ), Centrifuge ( `#8714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8714> `_ ), Chromaprint ( `#9047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9047> `_ ), Con3F ( `#8755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8755> `_ ), DeepSurv ( `#8096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8096> `_ ), Essentia ( `#9054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9054> `_ ), FastRFS ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), GAT ( `#5871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5871> `_ ), Gaia ( `#9049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9049> `_ ), Gctf ( `#9097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9097> `_ ), GenomeMapper ( `#5872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5872> `_ ), Infomap ( `#9091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9091> `_ ), kpcalg ( `#8740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8740> `_ ), libglvnd ( `#9111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9111> `_ , `#9130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9130> `_ ), libsamplerate ( `#9046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9046> `_ ), libssh ( `#8865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8865> `_ ), libzip ( `#9073 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9073> `_ ), MetaboAnalystR ( `#8773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8773> `_ ), Metaxa2 ( `#8939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8939> `_ ), MotionCor2 ( `#8942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8942> `_ ), NFFT ( `#9085 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9085> `_ ), PhyML ( `#9103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9103> `_ ), PlaScope ( `#8714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8714> `_ ), PyCharm ( `#9100 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9100> `_ ), pbcopper ( `#8928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8928> `_ ), pbmm2 ( `#8929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8929> `_ ), phylokit ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), phylonaut ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), phyx ( `#9090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9090> `_ ), pycma ( `#8834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8834> `_ ), Q6 ( `#9069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9069> `_ ), Qt5Webkit ( `#9120 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9120> `_ ), ROME ( `#9050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9050> `_ , `#9062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9062> `_ ), rioxarray ( `#9007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9007> `_ ), SVDquest ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), savvy ( `#9124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9124> `_ ), sciClone ( `#7806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7806> `_ ), shapAAR ( `#8983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8983> `_ ), shrinkwrap ( `#9124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9124> `_ ), Structure ( `#5866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5866> `_ ), trimAl ( `#9063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9063> `_ ), thurstonianIRT ( `#9080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9080> `_ ), TurboVNC ( `#9110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9110> `_ , `#9111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9111> `_ , `#9128 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9128> `_ ), Tracer ( `#8970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8970> `_ ), TagLib ( `#9048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9048> `_ ), TRIQS ( `#8835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8835> `_ ), THetA ( `#8875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8875> `_ ), vcfnp ( `#5862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5862> `_ ), WebSocket++ ( `#8842 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8842> `_ ) * added additional easyconfigs for various supported software packages, including: * Armadillo 9.700.2, arpack-ng 3.7.0, BLASR 5.3.3, Bazel 0.26.1 + Bazel 0.29.1, Cufflinks 20190706, DL_POLY_Classic 1.10, FFmpeg 4.2.1, Go 1.13.1, Horovod 0.18.1, IOR 3.2.1, Julia 1.2.0, LLVM 9.0.0, Mesa 19.1.7, Molden 6.1, Mono 6.4.0.198, NCO 4.8.1, , Net-core 3.0.0, Nim 1.0.0, OpenFOAM 2.2.x, PGI 19.7, PLUMED 2.5.2, PMIx 3.1.4, PostgreSQL 11.3, psycopg2 2.8.3, QGIS 3.4.12, QScintilla 2.11.2, Qt5 5.13.1, ReFrame 2.19, Rust 1.37.0, Spack 0.12.1, TAMkin 1.2.6, TensorFlow 1.14.0 w/ fosscuda/2019a, TensorFlow 2.0.0 w/ foss/2019a, UCX 1.6.1, VEP 96.0, xarray 0.13.0 * added easyconfigs for ``fosscuda/2019a`` toolchain ( `#9066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9066> `_ ) * minor enhancements, including: * add EBImage extension to easyconfig for R-bundle-Bioconductor 3.9 ( `#8982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8982> `_ ) * add check for ``http://`` URLs in easyconfig files added/changed in PRs ( `#9012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9012> `_ ) * add bbmle/emdbook/SOAR/rasterVis/tictoc extensions to R 3.6.0 easyconfigs ( `#9037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9037> `_ ) * updated PyQt5 5.12.1 easyconfig to also build sip files + minor readability changes ( `#9071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9071> `_ ) * enabled ``SQLITE_ENABLE_COLUMN_METADATA`` , which is needed for GDAL (and QGIS) ( `#9118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9118> `_ ) * also install include/GL/internal/ for recent Mesa installations ( `#9129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9129> `_ ) * various bug fixes, including: * add ncurses as dependency to lftp ( `#8646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8646> `_ ) * add patch for gettext 0.19.8* to avoid picking up global git config that could break the installation ( `#8957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8957> `_ ) * fix source URLs in GlimmerHMM easyconfigs ( `#8980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8980> `_ ) * add patch for PyTorch 1.2.0 to use version of torchvision that is compatible with PyTorch 1.2.0 ( `#8986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8986> `_ ) * clarify the comment regarding the optarch setting in ITK-5.0.1 ( `#8991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8991> `_ ) * fix homepage & description in easyconfig file for YAPS ( `#8993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8993> `_ ) * add patch for PyTorch 1.2.0 to fix failing softmax test on Intel Sandy Bridge ( `#9010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9010> `_ ) * fix permissions for TRF ( `#9034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9034> `_ ) * ICU needs Python 2.7+ to build, so add that as builddependency ( `#9053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9053> `_ ) * fix urls for Anaconda and Miniconda ( `#9087 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9087> `_ ) * use a cuDNN version that has support for the CUDA version in ``fosscuda/2019a`` (CUDA 10.1) in PyTorch, TensorFlow and Theano easyconfigs ( `#9112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9112> `_ ) * other changes: * make sources in CUDA 10.1.105 use ``%(cudaarch)s`` template value (to use different source on POWER systems) ( `#8136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8136> `_ ) * update ``Java/1.8`` wrapper to ``Java/1.8.0_221`` ( `#9038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9038> `_ ) * allow divergent Java dep version as long as it's indicated by versionsuffix ( `#9041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9041> `_ ) .. _release_notes_eb400: EasyBuild v4.0.0 (September 20th 2019) -------------------------------------- feature release (incl. backwards-incompatible changes) **framework** * **fixed compatibility with Python 3.5+** ( `#2708 <https://github.com/easybuilders/easybuild-framework/pull/2708> `_ , `#2713 <https://github.com/easybuilders/easybuild-framework/pull/2713> `_ , `#2714 <https://github.com/easybuilders/easybuild-framework/pull/2714> `_ , `#2719 <https://github.com/easybuilders/easybuild-framework/pull/2719> `_ , `#2721 <https://github.com/easybuilders/easybuild-framework/pull/2721> `_ , `#2723 <https://github.com/easybuilders/easybuild-framework/pull/2723> `_ , `#2729 <https://github.com/easybuilders/easybuild-framework/pull/2729> `_ , `#2743 <https://github.com/easybuilders/easybuild-framework/pull/2743> `_ , `#2744 <https://github.com/easybuilders/easybuild-framework/pull/2744> `_ , `#2751 <https://github.com/easybuilders/easybuild-framework/pull/2751> `_ , `#2756 <https://github.com/easybuilders/easybuild-framework/pull/2756> `_ , `#2759 <https://github.com/easybuilders/easybuild-framework/pull/2759> `_ , `#2761 <https://github.com/easybuilders/easybuild-framework/pull/2761> `_ , `#2762 <https://github.com/easybuilders/easybuild-framework/pull/2762> `_ , `#2765 <https://github.com/easybuilders/easybuild-framework/pull/2765> `_ , `#2766 <https://github.com/easybuilders/easybuild-framework/pull/2766> `_ , `#2767 <https://github.com/easybuilders/easybuild-framework/pull/2767> `_ , `#2768 <https://github.com/easybuilders/easybuild-framework/pull/2768> `_ , `#2774 <https://github.com/easybuilders/easybuild-framework/pull/2774> `_ , `#2775 <https://github.com/easybuilders/easybuild-framework/pull/2775> `_ , `#2778 <https://github.com/easybuilders/easybuild-framework/pull/2778> `_ , `#2780 <https://github.com/easybuilders/easybuild-framework/pull/2780> `_ , `#2785 <https://github.com/easybuilders/easybuild-framework/pull/2785> `_ , `#2787 <https://github.com/easybuilders/easybuild-framework/pull/2787> `_ , `#2789 <https://github.com/easybuilders/easybuild-framework/pull/2789> `_ , `#2791 <https://github.com/easybuilders/easybuild-framework/pull/2791> `_ , `#2792 <https://github.com/easybuilders/easybuild-framework/pull/2792> `_ , `#2794 <https://github.com/easybuilders/easybuild-framework/pull/2794> `_ , `#2800 <https://github.com/easybuilders/easybuild-framework/pull/2800> `_ , `#2801 <https://github.com/easybuilders/easybuild-framework/pull/2801> `_ , `#2805 <https://github.com/easybuilders/easybuild-framework/pull/2805> `_ , `#2806 <https://github.com/easybuilders/easybuild-framework/pull/2806> `_ , `#2895 <https://github.com/easybuilders/easybuild-framework/pull/2895> `_ , `#2932 <https://github.com/easybuilders/easybuild-framework/pull/2932> `_ , `#2982 <https://github.com/easybuilders/easybuild-framework/pull/2982> `_ , `#2992 <https://github.com/easybuilders/easybuild-framework/pull/2992> `_ , `#3007 <https://github.com/easybuilders/easybuild-framework/pull/3007> `_ , `#3011 <https://github.com/easybuilders/easybuild-framework/pull/3011> `_ ) * supported Python versions: 2.6, 2.7, 3.5, 3.6, 3.7 * some functionality from the Python standard library should be imported from the new ``easybuild.tools.py2vs3`` package * see :ref: `py2_py3_compatibility` & :ref: `eb4_relocated_functions_classes_constants` * **ingested relevant code from** ``vsc-base`` & ``vsc-install`` ( `#2708 <https://github.com/easybuilders/easybuild-framework/pull/2708> `_ , `#2713 <https://github.com/easybuilders/easybuild-framework/pull/2713> `_ , `#2714 <https://github.com/easybuilders/easybuild-framework/pull/2714> `_ , `#2763 <https://github.com/easybuilders/easybuild-framework/pull/2763> `_ , `#2790 <https://github.com/easybuilders/easybuild-framework/pull/2790> `_ , `#2993 <https://github.com/easybuilders/easybuild-framework/pull/2993> `_ ) * ``vsc-base`` & ``vsc-install`` are no longer required as dependencies * the functionality that was provided by these packages is now (mostly) available from the ``easybuild.base`` package * any import statements from the ' ``vsc`` ' namespace will result in an error * see also :ref: `eb4_changes_ingested_vsc_base` and :ref: `eb4_relocated_functions_classes_constants` * ``setuptools`` **is longer required** (neither for installing or using EasyBuild) ( `#2836 <https://github.com/easybuilders/easybuild-framework/pull/2836> `_ , `#2837 <https://github.com/easybuilders/easybuild-framework/pull/2837> `_ , `#2984 <https://github.com/easybuilders/easybuild-framework/pull/2984> `_ , `#2986 <https://github.com/easybuilders/easybuild-framework/pull/2986> `_ , `#2988 <https://github.com/easybuilders/easybuild-framework/pull/2988> `_ ) * see also :ref: `eb4_no_required_deps` * this required moving some classes and constants, see :ref: `eb4_relocated_functions_classes_constants` * **the** ' ``dummy`` ' **toolchain is deprecated and replaced by the** ' ``system`` ' **toolchain** ( `#2877 <https://github.com/easybuilders/easybuild-framework/pull/2877> `_ , `#3001 <https://github.com/easybuilders/easybuild-framework/pull/3001> `_ ) * if ' ``dummy`` ' is still used as a toolchain in easyconfig files, a warning will be printed * use \" ``toolchain = SYSTEM`` \" instead * for more information, see :ref: `system_toolchain` * **a warning is printed when local variables in easyconfig file don't follow the recommended naming scheme** ( `#2938 <https://github.com/easybuilders/easybuild-framework/pull/2938> `_ , `#2968 <https://github.com/easybuilders/easybuild-framework/pull/2968> `_ ) * see also :ref: `easyconfig_files_local_variables` * **names of software installation directories are independent of module naming scheme by enabling** ``--fixed-installdir-naming-scheme`` **by default** ( `#2999 <https://github.com/easybuilders/easybuild-framework/pull/2999> `_ ) * see :ref: `eb4_changes_fixed_installdir_naming_scheme` for more information * various other small enhancements, including: * use requests instead of urllib2 for 403 errors ( `#2695 <https://github.com/easybuilders/easybuild-framework/pull/2695> `_ ) * use pip requirements file in Travis ( `#2874 <https://github.com/easybuilders/easybuild-framework/pull/2874> `_ ) * add support for ``--fix-deprecated-easyconfigs`` ( `#2881 <https://github.com/easybuilders/easybuild-framework/pull/2881> `_ , 2898, `#2938 <https://github.com/easybuilders/easybuild-framework/pull/2938> `_ ) * add ``-L$EBROOTIMKL/lib/intel64`` to ``$LDFLAGS`` for MKL ( `#2930 <https://github.com/easybuilders/easybuild-framework/pull/2930> `_ ) * handle dict-type checksums in check_checksums_for ( `#2974 <https://github.com/easybuilders/easybuild-framework/pull/2974> `_ ) * allow that ``icc`` & ``ifort`` are not actual dependencies in ``iccifort`` toolchain module ( `#2995 <https://github.com/easybuilders/easybuild-framework/pull/2995> `_ ) * define mapping for ``iccifort`` -> ``intel`` for ``iccifort`` compiler-only toolchain for HMNS ( `#2996 <https://github.com/easybuilders/easybuild-framework/pull/2996> `_ ) * also consider concatenation of compiler module names to determine details of toolchain compiler component ( `#2997 <https://github.com/easybuilders/easybuild-framework/pull/2997> `_ ) * update metadata for Cray-provided external modules ( `#3013 <https://github.com/easybuilders/easybuild-framework/pull/3013> `_ ) * various bug fixes, including: * update the PyPI trove classifiers in setup.py ( `#2875 <https://github.com/easybuilders/easybuild-framework/pull/2875> `_ ) * reverse lists for ``$LDFLAGS`` and ``$CPPFLAGS`` ( `#2931 <https://github.com/easybuilders/easybuild-framework/pull/2931> `_ ) * enhance/fix to_template_str function to do a better job at using template values in dumped easyconfigs ( `#2948 <https://github.com/easybuilders/easybuild-framework/pull/2948> `_ ) * also take into account ``--filter-deps`` when finalizing parsed dependencies to fix problem with dependency filters using version ranges ( `#2983 <https://github.com/easybuilders/easybuild-framework/pull/2983> `_ ) * fix broken ``--from-pr`` tests due to archiving of easyconfigs ( `#2985 <https://github.com/easybuilders/easybuild-framework/pull/2985> `_ ) * fixes required to avoid breaking Cray support ( `#3008 <https://github.com/easybuilders/easybuild-framework/pull/3008> `_ ) * fixes for ``--read-only-installdir`` : avoid crash with ``ModuleRC`` easyblock + also make log file in installdir read-only ( `#3012 <https://github.com/easybuilders/easybuild-framework/pull/3012> `_ ) * other changes: * add check to ensure that ``--robot`` argument specifies an existing directory ( `#2086 <https://github.com/easybuilders/easybuild-framework/pull/2086> `_ ) * remove old scripts that are no longer useful (+ minor fixes to others) ( `#2897 <https://github.com/easybuilders/easybuild-framework/pull/2897> `_ ) * use ' ``command -v`` ' to avoid requiring ' ``which`` ' in ' ``eb`` ' command ( `#2979 <https://github.com/easybuilders/easybuild-framework/pull/2979> `_ ) * add ``modluafooter`` & ``modtclfooter`` at the end of the generated module file ( `#3003 <https://github.com/easybuilders/easybuild-framework/pull/3003> `_ ) * print warning when ' ``eb`` ' command is not found in ``$PATH`` and for empty robot search path ( `#3006 <https://github.com/easybuilders/easybuild-framework/pull/3006> `_ ) **easyblocks** * fixes due to backwards-incompatible changes in easybuild-framework v4.0.0 * use ``is_system_toolchain()`` rather than checking toolchain name against DUMMY_TOOLCHAIN_NAME constant ( `#1690 <https://github.com/easybuilders/easybuild-easyblocks/pull/1690> `_ , `#1728 <https://github.com/easybuilders/easybuild-easyblocks/pull/1728> `_ ) * fix compatibility of various easyblocks with Python 3 ( `#1640 <https://github.com/easybuilders/easybuild-easyblocks/pull/1640> `_ , `#1644 <https://github.com/easybuilders/easybuild-easyblocks/pull/1644> `_ , `#1648 <https://github.com/easybuilders/easybuild-easyblocks/pull/1648> `_ , `#1721 <https://github.com/easybuilders/easybuild-easyblocks/pull/1721> `_ , `#1794 <https://github.com/easybuilders/easybuild-easyblocks/pull/1794> `_ , `#1808 <https://github.com/easybuilders/easybuild-easyblocks/pull/1808> `_ , `#1795 <https://github.com/easybuilders/easybuild-easyblocks/pull/1795> `_ , `#1796 <https://github.com/easybuilders/easybuild-easyblocks/pull/1796> `_ , `#1807 <https://github.com/easybuilders/easybuild-easyblocks/pull/1807> `_ , `#1809 <https://github.com/easybuilders/easybuild-easyblocks/pull/1809> `_ ) * new software-specific easyblocks for ``OpenMPI`` ( `#1789 <https://github.com/easybuilders/easybuild-easyblocks/pull/1789> `_ , `#1801 <https://github.com/easybuilders/easybuild-easyblocks/pull/1801> `_ ), ``iccifort`` ( `#1799 <https://github.com/easybuilders/easybuild-easyblocks/pull/1799> `_ ) and ``numexpr`` ( `#1803 <https://github.com/easybuilders/easybuild-easyblocks/pull/1803> `_ , `#1804 <https://github.com/easybuilders/easybuild-easyblocks/pull/1804> `_ ) * various other enhancements, including: * removed checks for Boussinesq and sonic solvers for OpenFOAM 7, since those have been deprecated ( `#1733 <https://github.com/easybuilders/easybuild-easyblocks/pull/1733> `_ ) * update Paraver easyblock to support recent versions ( `#1790 <https://github.com/easybuilders/easybuild-easyblocks/pull/1790> `_ ) * various bug fixes, including: * update the PyPI trove classifiers ( `#1723 <https://github.com/easybuilders/easybuild-easyblocks/pull/1723> `_ ) * make the plugins build use the correct Tcl library version in VMD easyblock ( `#1786 <https://github.com/easybuilders/easybuild-easyblocks/pull/1786> `_ ) * use ``*_MT libs`` for BLAS/LAPACK only if ``openmp`` is enabled in Trilinos easyblock ( `#1791 <https://github.com/easybuilders/easybuild-easyblocks/pull/1791> `_ ) * filter out empty entries in ``$CPATH`` or ``$C_INCLUDE_PATH`` when building Perl, since that breaks the build ( `#1800 <https://github.com/easybuilders/easybuild-easyblocks/pull/1800> `_ ) * set ``$XDG_CACHE_HOME`` in TensorFlow easyblock to avoid that ``pip`` (ab)uses ``$HOME/.cache`` ( `#1802 <https://github.com/easybuilders/easybuild-easyblocks/pull/1802> `_ ) * don't load modules for dependencies in ``CrayToolchain.prepare_step`` ( `#1805 <https://github.com/easybuilders/easybuild-easyblocks/pull/1805> `_ ) * other changes: * drop requirement for setuptools as runtime dependency ( `#1689 <https://github.com/easybuilders/easybuild-easyblocks/pull/1689> `_ ) * enable ' ``check_ldshared`` ' in generic PythonPackage easyblock by default for recent Python versions ( `#1788 <https://github.com/easybuilders/easybuild-easyblocks/pull/1788> `_ ) * stop trying to use ``setuptools.setup`` in ``setup.py`` , always use ``distutils.core.setup`` instead ( `#1793 <https://github.com/easybuilders/easybuild-easyblocks/pull/1793> `_ ) **easyconfigs** * fixes due to changes in easybuild-framework v4.0.0 * use ``SYSTEM`` toolchain rather than deprecated ``dummy`` toolchain ( `#8369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8369> `_ , `#8711 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8711> `_ , `#8822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8822> `_ ) * fix names of local variables ( `#8682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8682> `_ - `#8688 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8688> `_ , `#8690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8690> `_ , `#8695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8695> `_ - `#8702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8702> `_ , `#8709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8709> `_ , `#8710 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8710> `_ , `#8715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8715> `_ , `#8717 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8717> `_ , `#8718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8718> `_ , `#8720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8720> `_ - `#8732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8732> `_ , `#8822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8822> `_ ) * enable ``--local-var-naming-check=error`` for easyconfigs tests ( `#8784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8784> `_ ) * stick to ' ``dummy`` ' toolchain for now in easyconfig for latest EasyBuild 3.x ( `#8829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8829> `_ ) * fix compatibility with Python 3: also run easyconfigs tests with Python 3.5, 3.6 and 3.7 ( `#7778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7778> `_ , `#7836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7836> `_ , `#8293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8293> `_ ) * added easyconfigs for new common toolchains: ``foss/2019b`` ( `#8567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8567> `_ ), ``intel/2019b`` ( `#8681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8681> `_ ) * ``iccifort`` is now installed as a single entity (no more separate ``icc`` / ``ifort`` installations from ``intel/2019b`` onwards) (see also `#8879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8879> `_ ) * ``versionsuffix`` has been stripped down for toolchain components (GCC/binutils/OpenBLAS versions are no longer included) * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added example easyconfig files for 28 new software packages: * AGFusion ( `#8840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8840> `_ ), Bonmin ( `#8855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8855> `_ ), causalml ( `#8871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8871> `_ ), ClonalFrameML ( `#6082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6082> `_ ), Control-FREEC ( `#8794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8794> `_ ), corner ( `#8886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8886> `_ ), CVXPY ( `#8662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8662> `_ ), cytosim ( `#8368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8368> `_ ), dill ( `#8885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8885> `_ ), Dsuite ( `#8713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8713> `_ ), GDCHART ( `#8679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8679> `_ ), gifsicle ( `#8664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8664> `_ ), guenomu ( `#8677 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8677> `_ ), JsonCpp ( `#8841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8841> `_ ), libxml++ ( `#8896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8896> `_ ), LOHHLA ( `#7227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7227> `_ ), Longshot ( `#8830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8830> `_ ), MDBM ( `#8850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8850> `_ ), nglview ( `#8860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8860> `_ ), ownCloud ( `#6804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6804> `_ ), ptemcee ( `#8884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8884> `_ ), pubtcrs ( `#7500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7500> `_ ), pyiron ( `#8860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8860> `_ ), qpth ( `#8665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8665> `_ ), QtKeychain ( `#6804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6804> `_ ), rgdal ( `#8826 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8826> `_ ), smallgenomeutilities ( `#8507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8507> `_ ), umis ( `#8812 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8812> `_ ) * added additional easyconfigs for various supported software packages, including: * Blosc 1.17.0, bokeh 1.3.4, cURL 7.66.0, csvkit 1.0.4, dask 2.3.0, Extrae 3.7.1, FSL 6.0.1, GLibmm 2.49.7, git 2.23.0, IPython 7.7.0, numexpr 2.7.0, OSU-Micro-Benchmarks 5.6.2, OpenBLAS 0.3.7, OpenSSL 1.1.1d, ParaView 5.5.2, Paraver 4.8.1, Perl 5.30.0, PnetCDF 1.10.0, Porechop 0.2.4, PyTables 3.5.2, PyTorch 1.2.0, Python 2.7.16 + 3.7.4, parallel 20190622, phonopy 2.2.0, QIIME2 2019.7, Qiskit 0.12.0, REMORA 1.8.3, scikit-image 0.15.0, spglib-python 1.14.1.post0, torchvision 0.3.0, X11 20190717 * various additional minor enhancements, including: * add several extensions to R 3.6.0 easyconfigs ( `#8843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8843> `_ , `#8881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8881> `_ ) * add pRoloc to R-bundle-Bioconductor v3.9 ( `#8882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8882> `_ ) * clean up OpenMPI 3.1. * and 4.* easyconfigs to use custom OpenMPI easyblock ( `#8889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8889> `_ , `#8890 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8890> `_ ) * update numexpr easyconfigs to use custom easyblock for numexpr ( `#8901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8901> `_ ) * switch to ``PythonBundle`` & enable use_pip in old dask easyconfig files ( `#8922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8922> `_ ) * update ``CrayCCE`` , ``CrayGNU`` , ``CrayIntel`` and ``CrayPGI`` toolchains to 19.06 ( `#8944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8944> `_ ) * various bug fixes, including: * make TensorFlow 1.7.0 work for AMD CPUs ( `#6256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6256> `_ ) * make sure that right Python wrapper is used in VTK8 ( `#7296 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7296> `_ ) * update the PyPI trove classifiers ( `#8298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8298> `_ ) * add missing checksum for matplotlib v3.0.3 ( `#8643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8643> `_ ) * add patch to ``plugins/Make-arch`` to use the correct Tcl library version in VMD ( `#8820 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8820> `_ ) * fix issue where ' ``print_qiime_config.py -t`` ' sanity check command fails for QIIME 1.9.1 because of missing subdir in ``$PYTHONPATH`` ( `#8838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8838> `_ ) * update homepage info in likwid ( `#8846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8846> `_ ) * disable threading in ``preprocessCore`` extension included with Bioconductor 3.9 to work around conflict with OpenBLAS's threading ( `#8847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8847> `_ ) * add ``-lrt`` patch to PyTorch 1.1.0 easyconfig ( `#8852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8852> `_ ) * fix incorrect escaping in SIP configure options in PyQt5 easyconfigs ( `#8856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8856> `_ ) * add missing Autotools build dep for fastq-tools ( `#8858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8858> `_ ) * add missing deps for zlib, bzip2, and XZ for angsd ( `#8867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8867> `_ ) * apply patch to R package uroot in R 3.6.0 ( `#8872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8872> `_ ) * consider archive source URL for all extensions in R-tesseract easyconfig ( `#8897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8897> `_ ) * add pkg-config build dep for tesseract v4.0.0 ( `#8898 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8898> `_ ) * fix ``source_urls`` in byacc easyconfig files ( `#8899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8899> `_ , `#8908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8908> `_ ) * add missing cairo dependency to PRINSEQ easyconfig file ( `#8902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8902> `_ ) * configure OpenMPI 1.10.x with ``--without-ucx`` to avoid problems when ``ucx-devel`` is installed in the OS ( `#8903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8903> `_ ) * add GDAL 3.0.0 for Python 2.7.15 and fix the Python 3.7.2 version ( `#8912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8912> `_ ) * fix homepage & description in scikit-image easyconfigs ( `#8916 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8916> `_ ) * add faulthandler patches to Python 3.7.0 easyconfigs ( `#8832 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8832> `_ ) * other changes: * archive ancient CUDA 5.0.35 easyconfigs with creative way of determining sources ( `#7796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7796> `_ ) * remove ancient easyconfigs from archive ( `#8542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8542> `_ ) * archive easyconfigs using deprecated toolchains ( `#8557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8557> `_ , `#8558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8558> `_ , `#8585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8585> `_ ) * archive ancient versions of GC3Pie/GCC/OpenMPI/ORCA ( `#8586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8586> `_ ) & CPLEX ( `#8765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8765> `_ ) * rename SALMON to SALMON-TDDFT to fix name clash with Salmon ( `#8613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8613> `_ ) * bump AnnotationDb version in bundle for Bioconductor 3.9 ( `#8854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8854> `_ ) * stop trying to use ``setuptools.setup`` in ``setup.py`` , always use ``distutils.core.setup`` instead ( `#8866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8866> `_ , `#8892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8892> `_ , `#8894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8894> `_ ) * archive easyconfigs using ancient ``Cray*`` toolchains ( `#8945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8945> `_ ) .. _release_notes_eb394: EasyBuild v3.9.4 (August 23rd 2019) ----------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for specifying checksum via dict providing a filename-to-checksum mapping ( `#2946 <https://github.com/easybuilders/easybuild-framework/pull/2946> `_ ) * enhance 'completed' message with how much time was needed for the installation ( `#2956 <https://github.com/easybuilders/easybuild-framework/pull/2956> `_ ) * add support for specifying tuple of alternative checksums ( `#2958 <https://github.com/easybuilders/easybuild-framework/pull/2958> `_ ) * support using ' ``system`` ' as alias for ' ``dummy`` ' toolchain + ``SYSTEM`` constant ( `#2960 <https://github.com/easybuilders/easybuild-framework/pull/2960> `_ ) * ensure ' ``docurls`` ' easyconfig parameter value is a list of string values, not a single string value ( `#2963 <https://github.com/easybuilders/easybuild-framework/pull/2963> `_ ) * automatically enable ``--ignore-osdeps`` when using ``--check-contrib`` or ``--check-style`` ( `#2965 <https://github.com/easybuilders/easybuild-framework/pull/2965> `_ ) * various bug fixes, including: * escape ' ``+`` ' in search queries + handle invalid search queries better ( `#2967 <https://github.com/easybuilders/easybuild-framework/pull/2967> `_ ) * also consider extension patches when determining for which easyconfig a given patch file is intended in ``--new-pr`` / ``--update-pr`` ( `#2969 <https://github.com/easybuilders/easybuild-framework/pull/2969> `_ ) * unset ``$CDPATH`` early on if it is defined ( `#2970 <https://github.com/easybuilders/easybuild-framework/pull/2970> `_ ) * create specified temporary log directory if it doesn't exist yet in ``init_logging`` ( `#2972 <https://github.com/easybuilders/easybuild-framework/pull/2972> `_ ) * don't indicate first multi_deps version as default in module help text when ``multi_deps_load_default=False`` ( `#2973 <https://github.com/easybuilders/easybuild-framework/pull/2973> `_ ) * other changes: * deprecate toolchains older than ``gompi/2016a`` and ``foss/2016a`` ( `#2951 <https://github.com/easybuilders/easybuild-framework/pull/2951> `_ ) **easyblocks** * new software-specific easyblock for MSM ( `#1770 <https://github.com/easybuilders/easybuild-easyblocks/pull/1770> `_ , `#1775 <https://github.com/easybuilders/easybuild-easyblocks/pull/1775> `_ , `#1776 <https://github.com/easybuilders/easybuild-easyblocks/pull/1776> `_ ) * minor enhancements, including: * allow specifying the license file directly in MATLAB easyblock ( `#1712 <https://github.com/easybuilders/easybuild-easyblocks/pull/1712> `_ ) * enhance CPLEX easyblock to also build Python bindings ( `#1738 <https://github.com/easybuilders/easybuild-easyblocks/pull/1738> `_ ) * workaround for XCrySDen for Tcl 8.6 ( `#1749 <https://github.com/easybuilders/easybuild-easyblocks/pull/1749> `_ ) * update WIEN2k easyblock to support version 19.1 ( `#1758 <https://github.com/easybuilders/easybuild-easyblocks/pull/1758> `_ ) * resolve custom ``%(cudaarch)s`` template value for CUDA sources ( `#1766 <https://github.com/easybuilders/easybuild-easyblocks/pull/1766> `_ ) * enhance sanity check for Blender to make sure that Cycles render engine is available ( `#1779 <https://github.com/easybuilders/easybuild-easyblocks/pull/1779> `_ ) * various bug fixes, including: * only check for qtwebengine in custom easyblock for Qt(5) if glibc is sufficiently recent ( `#1771 <https://github.com/easybuilders/easybuild-easyblocks/pull/1771> `_ ) * correctly define ``comp.src`` in Bundle easyblock, to fix compatibility with easyblocks that leverage ``self.src`` ( `#1777 <https://github.com/easybuilders/easybuild-easyblocks/pull/1777> `_ ) * fix ``Bundle.check_checksums`` to checksums for extensions are also checked ( `#1778 <https://github.com/easybuilders/easybuild-easyblocks/pull/1778> `_ ) **easyconfigs** * added example easyconfig files for 36 new software packages: * ArrayFire ( `#8461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8461> `_ ), BRAKER ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), bwidget ( `#8477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8477> `_ ), Catch2 ( `#8703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8703> `_ ), core-counter ( `#8749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8749> `_ ), CubeGUI ( `#6328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6328> `_ ), CubeLib ( `#6328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6328> `_ ), CubeWriter ( `#6328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6328> `_ ), dagitty ( `#8606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8606> `_ ), enaBrowserTool ( `#8795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8795> `_ ), GEMMA ( `#8270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8270> `_ ), GeneMark-ET ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), GenomeThreader ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), ieeg-cli ( `#8793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8793> `_ , `#8811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8811> `_ ), Judy ( `#8543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8543> `_ ), Julia ( `#8578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8578> `_ ), libaio ( `#8543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8543> `_ ), libtirpc ( `#8792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8792> `_ ), magick ( `#8545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8545> `_ ), MSM ( `#8556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8556> `_ ), MSPC ( `#8531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8531> `_ ), mygene ( `#8809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8809> `_ ), OpenMolcas ( `#7699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7699> `_ ), PhiPack ( `#8750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8750> `_ ), plc ( `#8796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8796> `_ ), plotly.py ( `#8756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8756> `_ ), pymemcache ( `#8663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8663> `_ ), PySCF ( `#8736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8736> `_ ), qcint ( `#8736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8736> `_ ), Qiskit ( `#7592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7592> `_ ), QuaZIP ( `#8672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8672> `_ ), re2c ( `#8543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8543> `_ ), SeqAn3 ( `#8651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8651> `_ ), snippy ( `#8635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8635> `_ ), spaln ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), V8 ( `#8676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8676> `_ ) * added additional easyconfigs for various supported software packages, including: * ASE 3.18.0, BEDTools 2.28.0, Bowtie 1.2.3, bzip2 1.0.8, CPLEX 12.9, CUDA 10.1 update 2, cyvcf2 0.11.5, EIGENSOFT 7.2.1, GC3Pie 2.5.2, GCC(core) 9.2.0, GPAW 19.8.1, GlobalArrays 5.7, IMB 2019.3, imageio 2.5.0, jemalloc 5.2.0, nodejs 10.15.3, PyTorch 1.1.0, pybedtools 0.8.0, Quandl 3.4.8, R 3.6.0 w/ intel/2019a, R-bundle-Bioconductor 3.9, Salmon 0.14.1, Scalasca 2.5, Score-P 6.0, Stacks 2.41, TensorFlow 1.14.0, ToFu 1.4.0, WIEN2k 19.1, Wannier90 3.0.0, XCrySDen 1.5.60 * minor enhancements, including: * add patch and dependencies to easyconfig for Qt5 5.12.3 to fix Xlib support & enhance the installation ( `#8544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8544> `_ ) * update nodejs to version 10.15.3 and build libnode and libv8 shared libs ( `#8546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8546> `_ ) * add extensions to R 3.6.0 easyconfig: ``MIIVsem`` ( `#8565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8565> `_ ), ``medflex`` ( `#8680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8680> `_ ), ``Rserve`` / ``spls`` ( `#8758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8758> `_ ), ``Boruta`` / ``CovSel`` / ``ctmle`` / ``BayesPen`` ( `#8805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8805> `_ ) * include PyQtWebEngine bindings in easyconfig for PyQt5 5.12.1 using Python 3.7.2 ( `#8572 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8572> `_ ) * switch GLX backend to Gallium in Mesa-19.0.1 ( `#8594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8594> `_ ) * various bug fixes, including: * fix typo in description in GroopM easyconfig file ( `#8346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8346> `_ ) * add missing bugfix patch to easyconfig for OpenMPI 3.1.4 ( `#8566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8566> `_ ) * downgrade AtomPAW to last supported version in ABINIT 8.10.3 ( `#8571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8571> `_ ) * switch easyconfig for glew 2.1.0 to ``ConfigureMake`` easyblock ( `#8595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8595> `_ ) * fix checksum for source tarball in ``foss/2018b`` easyconfig of NAMD v2.13 ( `#8602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8602> `_ ) * update URL for bzip2 easyconfigs ( `#8614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8614> `_ ) * add patch for M4 1.4.17 to fix installation on top of glibc 2.28 ( `#8666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8666> `_ ) * add patch for Bison 3.0.4 to fix installation on top of glibc 2.28 ( `#8675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8675> `_ ) - avoid needless requirement for matplotlib < 3.0.0 in MultiQC easyconfigs ( `#8691 <https://github.com/easybuilders/easybuild-easyblocks/pull/8691> `_ ) * fix checksum in OpenMPI 1.8.8 easyconfigs ( `#8692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8692> `_ ) * add alternative checksums for ``nlme`` / ``mgcv`` / ``foreign`` / ``boot`` extensions in R 3.5.1 and 3.6.0 easyconfigs ( `#8564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8564> `_ , `#8762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8762> `_ ) * add missing core-counter dependency for worker 1.6.8 ( `#8749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8749> `_ ) * add missing pkg-config build dependency in various easyconfigs for ( `#8763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8763> `_ , `#8775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8775> `_ , `#8777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8777> `_ , `#8776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8776> `_ , `#8764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8764> `_ , `#8787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8787> `_ , `#8816 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8816> `_ ) * add patch to Python 3.7.2 easyconfig to fix faulthandler segfault ( `#8781 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8781> `_ ) * set ``$CPLUS_INCLUDE_PATH`` in easyconfigs for older matplotlib versions ( `#8785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8785> `_ ) * patch out removed glibc 2.28 header from GCC libsanitizer ( `#8789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8789> `_ ) * include ``sysmacros.h`` directly to work around removal from glibc header in numactl easyconfig ( `#8790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8790> `_ ) * adapt gzip's bundled gnulib for glibc 2.28 ( `#8791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8791> `_ ) * add libtirpc and depend on it in easyconfig for libdap 3.20.3 ( `#8792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8792> `_ ) * add missing YAML extension to Perl 5.28.0 easyconfig (required by BioPerl scripts) ( `#8806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8806> `_ ) * other changes: * remove broken easyconfigs for ciftify due to non-trivial missing dependencies ( `#8560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8560> `_ ) .. _release_notes_eb393: EasyBuild v3.9.3 (July 8th 2019) ---------------------- bugfix/update release **framework** * various enhancements, including: * add a URL whatis line to generated module files ( `#2933 <https://github.com/easybuilders/easybuild-framework/pull/2933> `_ ) * various bug fixes, including: * stick to Ubuntu Trusty when testing with Python 2.6 in Travis ( `#2928 <https://github.com/easybuilders/easybuild-framework/pull/2928> `_ ) * honor ``--tmp-logdir`` when determining location of temporary log file ( `#2937 <https://github.com/easybuilders/easybuild-framework/pull/2937> `_ ) **easyblocks** * minor enhancements, including: * also install docs and demos in Rosetta easyblock ( `#1745 <https://github.com/easybuilders/easybuild-easyblocks/pull/1745> `_ ) * update HEALPix easyblock to work with latest version of HEALPix' ``configure.sh`` ( `#1752 <https://github.com/easybuilders/easybuild-easyblocks/pull/1752> `_ ) * make HPCG log pattern more generic, it changed in 3.1 ( `#1753 <https://github.com/easybuilders/easybuild-easyblocks/pull/1753> `_ ) * allow bootstrapping GCC with profile-guided optimizations ( `#1756 <https://github.com/easybuilders/easybuild-easyblocks/pull/1756> `_ ) * only require vsc-base for EasyBuild 2.x and 3.x in EasyBuildMeta easyblock ( `#1757 <https://github.com/easybuilders/easybuild-easyblocks/pull/1757> `_ ) * extend question patterns with ' ``https`` ' URL entry in Modeller easyblock for recent versions ( `#1762 <https://github.com/easybuilders/easybuild-easyblocks/pull/1762> `_ ) * ``modextrapaths`` implemented on easyblock level, ``sanity_check_step`` , ``gcc_target`` added in HEALPix easyblock ( `#1763 <https://github.com/easybuilders/easybuild-easyblocks/pull/1763> `_ ) * update OpenBLAS easyblock to be aware of POWER9 support in OpenBLAS 0.3.6 ( `#1765 <https://github.com/easybuilders/easybuild-easyblocks/pull/1765> `_ ) * various bug fixes, including: * stick to Ubuntu Trusty when testing with Python 2.6 in Travis ( `#1751 <https://github.com/easybuilders/easybuild-easyblocks/pull/1751> `_ ) * fix scripts installation path in SNPhylo easyblock ( `#1759 <https://github.com/easybuilders/easybuild-easyblocks/pull/1759> `_ ) * be more patient when running interactive ``Allwmake.firstInstall`` command for recent OpenFOAM-Extend versions ( `#1761 <https://github.com/easybuilders/easybuild-easyblocks/pull/1761> `_ ) * also add ``--without-go`` configure option for SWIG as we \"disable everything by default\" ( `#1754 <https://github.com/easybuilders/easybuild-easyblocks/pull/1754> `_ ) * don't assume cmake arguments when configure_cmd is set in CMakeMake easyblock ( `#1750 <https://github.com/easybuilders/easybuild-easyblocks/pull/1750> `_ ) **easyconfigs** * added example easyconfig files for 25 new software packages: * Arb ( `#8137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8137> `_ ), AtomPAW ( `#8506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8506> `_ ), ciftify ( `#8457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8457> `_ ), cysignals ( `#8459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8459> `_ ), deal.II ( `#8440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8440> `_ ), FastQTL ( `#8449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8449> `_ ), FLINT ( `#8137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8137> `_ ), gdbgui ( `#8488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8488> `_ ), gearshifft ( `#8482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8482> `_ ), jbigkit ( `#8442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8442> `_ ), lavaan ( `#8539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8539> `_ ), libRmath ( `#8449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8449> `_ ), OR-Tools ( `#8364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8364> `_ , `#8523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8523> `_ ), p4est ( `#8440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8440> `_ ), ppl ( `#8459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8459> `_ ), pplpy ( `#8459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8459> `_ ), PRISMS-PF ( `#8440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8440> `_ ), PyAPS3 ( `#8398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8398> `_ ), pyEGA3 ( `#8418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8418> `_ ), ReFrame ( `#8481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8481> `_ ), S4 ( `#8487 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8487> `_ ), SALMON ( `#8478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8478> `_ ), TM-align ( `#8510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8510> `_ ), UnZip ( `#8474 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8474> `_ ), XTandem ( `#8517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8517> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 8.10.3, CFITSIO 3.47, GDB 8.3, GROMACS 2019.3, HEALPix 3.50, HPCG 3.1, Nilearn 0.5.2, OpenBLAS 0.3.6, Xerces-C++ 3.2.0 * minor enhancements, including: * update easyconfig for CFITSIO 3.45 with https and sanity check ( `#8472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8472> `_ ) * add AtomPAW and Wannier90 support to ABINIT 8.10.2 easyconfig ( `#8506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8506> `_ ) * add ' ``resample`` ' extension to R 3.5.1 + 3.6.0 easyconfigs ( `#8538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8538> `_ ) * various bug fixes, including: * fix source URLs for Mesa 17.{2,3} with fosscuda toolchain ( `#8446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8446> `_ ) * add in Boost dependency to canu-1.8 easyconfigs using ``foss`` toolchain ( `#8470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8470> `_ ) * stick to Ubuntu Trusty when testing with Python 2.6 in Travis ( `#8483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8483> `_ ) * fix incorrect order of extensions for Python-2.7.14 easyconfigs ( ``pycparser`` and ``cffi`` must come before ``cryptography`` ) ( `#8495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8495> `_ ) * suppress installation of ``libbfd`` and ``libopcode`` for GDB ( `#8496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8496> `_ ) * fix KronaTools easyconfigs to make sure symlinks in bin are not broken ( `#8508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8508> `_ ) * make additional configopts in PETSc easyconfigs work after uncommenting ( `#8522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8522> `_ ) * add ``pkg-config`` build dep to easyconfig for pocl 1.2 ( `#8528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8528> `_ ) * download correct source tarball for Net-core 2.1.8 ( `#8530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8530> `_ ) * fix ' ``Permission denied`` ' error when running ' ``cp -a`` ' for ANTs 2.3.1 installation by first removing the ``.git`` subdirectories causing them ( `#8535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8535> `_ ) * fix checksum for boot 1.3-22 extension in R 3.6.0 easyconfig ( `#8537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8537> `_ ) .. _release_notes_eb392: EasyBuild v3.9.2 (June 9th 2019) -------------------------------- bugfix/update release **framework** - various enhancements, including: - enhance (experimental) support for generating Singularity container recipes/images ( `#2884 <https://github.com/easybuilders/easybuild-framework/pull/2884> `_ , `#2900 <https://github.com/easybuilders/easybuild-framework/pull/2900> `_ , `#2902 <https://github.com/easybuilders/easybuild-framework/pull/2902> `_ , `#2903 <https://github.com/easybuilders/easybuild-framework/pull/2903> `_ , `#2907 <https://github.com/easybuilders/easybuild-framework/pull/2907> `_ , `#2909 <https://github.com/easybuilders/easybuild-framework/pull/2909> `_ , `#2910 <https://github.com/easybuilders/easybuild-framework/pull/2910> `_ , `#2913 <https://github.com/easybuilders/easybuild-framework/pull/2913> `_ , `#2915 <https://github.com/easybuilders/easybuild-framework/pull/2915> `_ ) - add support for specifying container configuration via ``--container-config`` ( ``--container-base`` option has been removed) - add support for providing custom template for container recipe via ``--container-template-recipe`` - add support for ' ``sif`` ' Singularity 3.x container image format - add support for specifying non-image based Singularity bootstrap agents - install default set of OS packages in container recipes starting from scratch - configure Lmod and update Lmod spider cache in generated Singularity container recipes - configure EasyBuild via environment variables (to allow overriding configuration settings via options to ' ``eb`` ' command) - also consider ``/tmp/easybuild/sources`` in source path (to allow seeding in sources in container build environment) - updated documentation is available at https://easybuild.readthedocs.io/en/latest/Containers.html - various bug fixes, including: - make sure that easyconfig file for EasyBuild version being bootstrapped is found in robot search path ( `#2899 <https://github.com/easybuilders/easybuild-framework/pull/2899> `_ ) - remove interpreter options when fixing script shebang ( `#2905 <https://github.com/easybuilders/easybuild-framework/pull/2905> `_ , `#2906 <https://github.com/easybuilders/easybuild-framework/pull/2906> `_ ) - fix crash on iterated installation when using Cray toolchains ( `#2914 <https://github.com/easybuilders/easybuild-framework/pull/2914> `_ ) - disable checking of read/exec permissions when checking for availability of ' ``sudo`` ' command ( `#2918 <https://github.com/easybuilders/easybuild-framework/pull/2918> `_ ) - other changes: - stick to vsc-base < 2.9.0 in bootstrap script to avoid requiring ' ``future`` ' dependency ( `#2892 <https://github.com/easybuilders/easybuild-framework/pull/2892> `_ ) **easyblocks** - new software-specific easyblock for ELPA ( `#1621 <https://github.com/easybuilders/easybuild-easyblocks/pull/1621> `_ ) - minor enhancements, including: - allow Boost to build both Python 2 and Python 3 libraries ( `#1718 <https://github.com/easybuilders/easybuild-easyblocks/pull/1718> `_ ) - update CPLEX sanity check: convert tool was removed in CPLEX 12.8 ( `#1737 <https://github.com/easybuilders/easybuild-easyblocks/pull/1737> `_ ) - don't try to patch ``CROSSTOOL`` script for recent Bazel versions (since it's no longer there) ( `#1741 <https://github.com/easybuilders/easybuild-easyblocks/pull/1741> `_ ) - various bug fixes, including: - fix version check on using ' ``-log`` ' option to ' ``Allwmake`` ' in OpenFOAM easyblock ( `#1739 <https://github.com/easybuilders/easybuild-easyblocks/pull/1739> `_ ) - fix GROMACS easyblock for list-type ``configopts`` ( `#1740 <https://github.com/easybuilders/easybuild-easyblocks/pull/1740> `_ ) - fix configure step for GROMACS version < 4.6 ( `#1742 <https://github.com/easybuilders/easybuild-easyblocks/pull/1742> `_ ) **easyconfigs** - added example easyconfig files for 17 new software packages: - adjustText ( `#8354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8354> `_ ), cowsay ( `#8380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8380> `_ ), fxtract ( `#8426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8426> `_ ), google-java-format ( `#8373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8373> `_ ), libtar ( `#8379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8379> `_ ), mkl-service ( `#8390 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8390> `_ ), msprime ( `#8371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8371> `_ ), pygrib ( `#8395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8395> `_ ), pyhdf ( `#8394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8394> `_ ), pyproj ( `#8395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8395> `_ ), PyStan ( `#8410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8410> `_ ), Racon ( `#8358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8358> `_ ), rapidtide ( `#8256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8256> `_ ), SingleM ( `#8428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8428> `_ ), smafa ( `#8420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8420> `_ ), SVDetect ( `#8399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8399> `_ ), Unicycler ( `#8376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8376> `_ ) - added additional easyconfigs for various supported software packages, including: - BLAST+ 2.9.0, Boost.Python 1.70.0, DIAMOND 0.9.24, EMAN2 2.3, ecCodes 2.12.5, GDAL 3.0.0, ImageMagick 7.0.8-46, Libint 2.5.0, matplotlib 2.2.4, NLopt 2.6.1, OrfM 0.7.1, PGI 19.4, PostgreSQL 11.3, R 3.6.0, R-bundle-Bioconductor 3.8, Rust 1.35.0, STAR 2.7.1a - minor enhancements, including: - use CMake rather than configure script for libxc 4.3.4 ( `#8361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8361> `_ , `#8453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8453> `_ ) - add ' ``cobs`` ' extension to R 3.5.1 easyconfigs ( `#8389 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8389> `_ ) - add sanity check command to PSI4 1.2.1 easyconfigs to ensure that ' ``import psi4`` ' works ( `#8393 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8393> `_ ) - include the provided backports patch in QuantumESPRESSO-6.4.1 ( `#8405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8405> `_ ) - add ``Logger::Simple`` , ``Scalar::Util::Numeric`` , ``YAML`` , ``Object::InsideOut`` extensions to Perl 5.28.1 easyconfig ( `#8432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8432> `_ ) - update Java 1.8 to 1.8.0_212 ( `#8443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8443> `_ ) - various bug fixes, including: - add missing build dependency on gettext to ATK/2.28.1 for fosscuda/2018b ( `#8402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8402> `_ ) - add patch to fix OpenBLAS v0.3.1 matrices multiplication issue ( `#8396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8396> `_ ) - make Eigen a build dependency for nanopolish ( `#8448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8448> `_ ) - other changes: - clean up ELPA 2018.11.001 easyconfig to use custom easyblock for ELPA ( `#8360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8360> `_ ) - remove unused checksum for ``ballgown`` extension in Bioconductor 3.7 easyconfigs ( `#8363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8363> `_ ) .. _release_notes_eb391: EasyBuild v3.9.1 (May 20th 2019) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add function to determine whether specified easyblock is generic or not ( `#2838 <https://github.com/easybuilders/easybuild-framework/pull/2838> `_ ) * add support to ``apply_regex_substitutions`` function to skip creation of backup ( `#2844 <https://github.com/easybuilders/easybuild-framework/pull/2844> `_ ) * add support for ``%(pymajver)s`` (& co) ( `#2850 <https://github.com/easybuilders/easybuild-framework/pull/2850> `_ ) * add support for ' ``fix_python_shebang_for`` ' and ' ``fix_perl_shebang_for`` ' easyconfig parameters ( `#2878 <https://github.com/easybuilders/easybuild-framework/pull/2878> `_ ) * add ``multi_deps`` information to generated module, help and whatis sections ( `#2882 <https://github.com/easybuilders/easybuild-framework/pull/2882> `_ ) * add support for ' ``eb --missing`` ' (' ``eb -M`` ') ( `#2883 <https://github.com/easybuilders/easybuild-framework/pull/2883> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Using_the_EasyBuild_command_line.html#getting-an-overview-of-missing-installations-missing-m * various bug fixes, including: * only call ' ``scontrol release`` ' when there's at least one job submitted ( `#2834 <https://github.com/easybuilders/easybuild-framework/pull/2834> `_ ) * fix small bug in ``find_eb_script`` + various minor issues with tests (related to environment in which tests are run) ( `#2835 <https://github.com/easybuilders/easybuild-framework/pull/2835> `_ ) * list build dependencies *before* runtime dependencies, so dependencies listed via ``multi_deps`` are loaded first in toolchain environment ( `#2839 <https://github.com/easybuilders/easybuild-framework/pull/2839> `_ ) * allow setting parallel to ``0`` or ``False`` to disable adding the ``-j`` argument ( `#2842 <https://github.com/easybuilders/easybuild-framework/pull/2842> `_ ) * be more careful when using single quotes for Tcl syntax ( `#2847 <https://github.com/easybuilders/easybuild-framework/pull/2847> `_ ) * append to existing ``.modulerc`` file rather than overwriting it (if ``--force`` is used) ( `#2848 <https://github.com/easybuilders/easybuild-framework/pull/2848> `_ ) * correctly resolve template values used for extensions ( `#2852 <https://github.com/easybuilders/easybuild-framework/pull/2852> `_ ) * update template values after updating iterative easyconfig parameters ( `#2854 <https://github.com/easybuilders/easybuild-framework/pull/2854> `_ ) * add top-level directories of hierarchical module naming scheme to ``$MODULEPATH`` before loading dependencies ( `#2857 <https://github.com/easybuilders/easybuild-framework/pull/2857> `_ ) * inject dependencies specified via ``multi_deps`` before normal build dependencies ( `#2861 <https://github.com/easybuilders/easybuild-framework/pull/2861> `_ ) * include Python version(s) in PR titles auto-generated by ``--new-pr`` ( `#2863 <https://github.com/easybuilders/easybuild-framework/pull/2863> `_ , `#2880 <https://github.com/easybuilders/easybuild-framework/pull/2880> `_ ) * update ``HierarchicalMNS`` for GCCcore toolchain ( `#2870 <https://github.com/easybuilders/easybuild-framework/pull/2870> `_ ) * bump iteration index counter at the correct time ( `#2886 <https://github.com/easybuilders/easybuild-framework/pull/2886> `_ ) * don't specify ``--ntasks-per-node`` when submitting Slurm jobs ( `#2887 <https://github.com/easybuilders/easybuild-framework/pull/2887> `_ ) * fix order of easyconfig parameters in output generated by ' ``eb --avail-easyconfig-params --output-format rst`` ' ( `#2888 <https://github.com/easybuilders/easybuild-framework/pull/2888> `_ ) * other changes: * lower required version in Slurm job backend to 16.05 ( `#2833 <https://github.com/easybuilders/easybuild-framework/pull/2833> `_ ) * add Lmod 8 to test suite ( `#2849 <https://github.com/easybuilders/easybuild-framework/pull/2849> `_ ) * deprecate useless 'skip_lower' named argument in template_constant_dict, always define ``*lower`` templates ( `#2856 <https://github.com/easybuilders/easybuild-framework/pull/2856> `_ ) * fix Python classifiers in ``setup.py`` , should be (only) Python 2.6 & 2.7 ( `#2876 <https://github.com/easybuilders/easybuild-framework/pull/2876> `_ ) **easyblocks** * one new generic easyblock: ``CMakeMakeCp`` ( `#1725 <https://github.com/easybuilders/easybuild-easyblocks/pull/1725> `_ ) * new software-specific easyblock for Blender ( `#1595 <https://github.com/easybuilders/easybuild-easyblocks/pull/1595> `_ ), Lua ( `#1396 <https://github.com/easybuilders/easybuild-easyblocks/pull/1396> `_ ), OpenBLAS ( `#1693 <https://github.com/easybuilders/easybuild-easyblocks/pull/1693> `_ , `#1697 <https://github.com/easybuilders/easybuild-easyblocks/pull/1697> `_ ) * OpenBLAS easyblock also supports installation on POWER systems * minor enhancements, including: * enhance VMD easyblock to also build Surf & Stride + pick up netCDF for VMD >= 1.9.3 ( `#1314 <https://github.com/easybuilders/easybuild-easyblocks/pull/1314> `_ ) * update CGAL easyblock to support CGAL 4.12 & newer ( `#1679 <https://github.com/easybuilders/easybuild-easyblocks/pull/1679> `_ ) * update QuantumESPRESSO easyblock for v6.4.1 ( `#1692 <https://github.com/easybuilders/easybuild-easyblocks/pull/1692> `_ ) * enhance Advisor & VTune easyblocks, since no license is required starting with version 2019 update 3 ( `#1694 <https://github.com/easybuilders/easybuild-easyblocks/pull/1694> `_ , `#1695 <https://github.com/easybuilders/easybuild-easyblocks/pull/1695> `_ ) * handle new multi-deps Python setup with ``$EBPYTHONPREFIXES`` for Tensorflow ( `#1702 <https://github.com/easybuilders/easybuild-easyblocks/pull/1702> `_ ) * make CHARMM easyblock pick up on ``prebuildopts`` and ``runtest`` ( `#1707 <https://github.com/easybuilders/easybuild-easyblocks/pull/1707> `_ ) * change default value for ``'use_pip`` ' to None, so we can discriminate from ' ``use_pip`` ' being set to False explicitly ( `#1709 <https://github.com/easybuilders/easybuild-easyblocks/pull/1709> `_ ) * make PythonPackage aware of ``(pre)testopts`` ( `#1715 <https://github.com/easybuilders/easybuild-easyblocks/pull/1715> `_ ) * enable GPU offloading in Clang if CUDA is included as a dep ( `#1716 <https://github.com/easybuilders/easybuild-easyblocks/pull/1716> `_ ) * add support to Clang easyblock for also building libc++ and RTTI ( `#1717 <https://github.com/easybuilders/easybuild-easyblocks/pull/1717> `_ ) * rebuild internal libfabric for impi 2019.x & more recent ( `#1730 <https://github.com/easybuilders/easybuild-easyblocks/pull/1730> `_ ) * update Q&A patterns in SAS easyblock for version 9.4 + add support for custom license file path ( `#1731 <https://github.com/easybuilders/easybuild-easyblocks/pull/1731> `_ ) * various bug fixes, including: * only install mkl-dnn by default with TensorFlow on x86-64 systems ( `#1666 <https://github.com/easybuilders/easybuild-easyblocks/pull/1666> `_ ) * make sure ``ldconfig`` can be found before using it in CUDA easyblock ( `#1684 <https://github.com/easybuilders/easybuild-easyblocks/pull/1684> `_ ) * use temporary directory for pip cache (rather than ``$HOME/.cache/pip`` ) in ``PythonPackage`` easyblock ( `#1687 <https://github.com/easybuilders/easybuild-easyblocks/pull/1687> `_ ) * allow oversubscription when testing FFTW on top of OpenMPI >= 3.0 ( `#1688 <https://github.com/easybuilders/easybuild-easyblocks/pull/1688> `_ ) * make sure ``$HOME/.cache/pip`` isn't used while installing Tkinter ( `#1691 <https://github.com/easybuilders/easybuild-easyblocks/pull/1691> `_ ) * set default ``exts_filter`` in ``PythonBundle`` , so already installed extensions in a bundle can be skipped ( `#1701 <https://github.com/easybuilders/easybuild-easyblocks/pull/1701> `_ ) * instruct Bazel to not use ``$HOME/.cache/bazel`` in TensorFlow easyblock ( `#1704 <https://github.com/easybuilders/easybuild-easyblocks/pull/1704> `_ ) * also set ``$XDG_CACHE_HOME`` during installation of Python, to ensure that ' ``pip`` ' that comes along with it doesn't touch ``$HOME/.cache/pip`` ( `#1705 <https://github.com/easybuilders/easybuild-easyblocks/pull/1705> `_ ) * use ``-fp-model precise`` if FMA instructions are missing in GROMACS easyblock ( `#1706 <https://github.com/easybuilders/easybuild-easyblocks/pull/1706> `_ ) * make sure Perl install dir follows a standard format ( `#1708 <https://github.com/easybuilders/easybuild-easyblocks/pull/1708> `_ ) * attach ``source_urls`` directly to sources for components in generic ``Bundle`` easyblock ( `#1711 <https://github.com/easybuilders/easybuild-easyblocks/pull/1711> `_ ) * avoid that ``--no-build-isolation`` option is specified multiple times in ``PythonPackage`` easyblock ( `#1713 <https://github.com/easybuilders/easybuild-easyblocks/pull/1713> `_ ) * fix prefix in impi compiler wrappers ( `#1727 <https://github.com/easybuilders/easybuild-easyblocks/pull/1727> `_ ) * only embed zlib in binutils if it is listed a build dependency ( `#1732 <https://github.com/easybuilders/easybuild-easyblocks/pull/1732> `_ ) * other changes: * fix Python classifiers in ``setup.py`` , should be (only) Python 2.6 & 2.7 ( `#1724 <https://github.com/easybuilders/easybuild-easyblocks/pull/1724> `_ ) **easyconfigs** * added easyconfigs for new toolchains: * ``fosscuda/2019a`` ( `#8063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8063> `_ ), ``gimkl/2018b`` ( `#8287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8287> `_ ), ``gomkl/2018b`` ( `#8216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8216> `_ ), ``gomkl/2019a`` ( `#8218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8218> `_ ), intelcuda/2019a ( `#8069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8069> `_ ) * added example easyconfig files for 52 new software packages: * ADDA ( `#8207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8207> `_ ), AMD-LibM ( `#7164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7164> `_ ), AMD-RNG ( `#7165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7165> `_ ), AMD-SecureRNG ( `#7165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7165> `_ ), ARGoS ( `#8039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8039> `_ , `#8104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8104> `_ ), ARWEN ( `#8213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8213> `_ ), Canvas ( `#7716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7716> `_ ), cdsapi ( `#7970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7970> `_ ), charmm ( `#8202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8202> `_ ), emcee ( `#7989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7989> `_ ), FlexiDot ( `#8228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8228> `_ , `#8275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8275> `_ ), FreeImage ( `#8039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8039> `_ ), Hello ( `#7704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7704> `_ ), HLAminer (8094), hypothesis ( `#8307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8307> `_ ), imgaug ( `#8229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8229> `_ ), INTEGRATE ( `#8193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8193> `_ , `#8304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8304> `_ ), INTEGRATE-Neo ( `#8094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8094> `_ ), IRkernel ( `#8050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8050> `_ , `#8099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8099> `_ ), JiTCODE ( `#7148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7148> `_ , `#8327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8327> `_ ), libFLAME ( `#7163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7163> `_ ), libpsml ( `#5859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5859> `_ ), LibSoup ( `#8116 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8116> `_ ), libutempter ( `#6426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6426> `_ ), LS-PrePost ( `#8070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8070> `_ ), LUSCUS ( `#7191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7191> `_ , `#8105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8105> `_ , `#8285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8285> `_ ), memory-profiler ( `#8255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8255> `_ ), metaWRAP ( `#7896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7896> `_ ), Net-core ( `#7716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7716> `_ ), netMHC ( `#8094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8094> `_ ), Nextflow ( `#8195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8195> `_ ), nvtop ( `#8024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8024> `_ ), openpyxl ( `#8121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8121> `_ ), py-cpuinfo ( `#8245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8245> `_ ), pyFFTW ( `#8198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8198> `_ ), PyQtGraph ( `#7525 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7525> `_ , `#8253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8253> `_ ), R-tesseract ( `#7933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7933> `_ ), RBFOpt ( `#8178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8178> `_ ), rnaQUAST ( `#8040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8040> `_ ), RStan ( `#7996 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7996> `_ ), scikit-multilearn ( `#8142 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8142> `_ ), simpy ( `#8177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8177> `_ , `#8250 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8250> `_ ), SMARTdenovo ( `#7630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7630> `_ ), socat ( `#8305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8305> `_ ), SymEngine ( `#7148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7148> `_ , `#8327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8327> `_ ), unixODBC ( `#8074 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8074> `_ ), VAtools ( `#7938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7938> `_ ), VirtualGL ( `#8008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8008> `_ ), WebKitGTK+ ( `#8118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8118> `_ , `#8241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8241> `_ ), xmlf90 ( `#5858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5858> `_ ), YAPS ( `#7976 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7976> `_ ), zingeR ( `#7264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7264> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.70.0, cairo 1.16.0, CGAL 4.14, Clang 8.0, cutadapt 2.1, dask 1.1.4, ELPA 2018.11.001, FFmpeg 4.1.3, GCC 9.1.0, GEOS 3.7.2, GLib 2.60.1, gmsh 4.2.2, GROMACS 2019.2, GTK+ 3.24.8, h5py 2.9.0, hwloc 1.11.12, Hypre 2.15.1, Mathematica 12.0.0, matplotlib 3.0.3, Mesa 19.0.1, NBO 7.0, NCL 6.6.2, NCO 4.7.9, NiBabel 2.4.0, numba 0.43.1, OpenMPI 3.1.4, OrthoFinder 2.3.3, PCMSolver 1.2.3, PETSc 3.11.1, PROJ 6.0.0, PyQt5 5.12.1, PyTorch 1.0.1, PyYAML 5.1, Qt5 5.12.3, QuantumESPRESSO 6.4.1, R 3.5.1 (w/ intel/2018b), RNAIndel 1.0.0, Ruby 2.6.3, scikit-learn 0.20.3, SLEPc 3.11.0, sympy 1.4, Tkinter 3.7.2, Vim 8.1.1209, VTK 8.2.0, wrf-python 1.3.1, wxPython 4.0.4, wxWidgets 3.0.4, xarray 0.12.1, zstd 1.4.0 * minor enhancements, including: * enable auto-download of VMD 1.9.3 + add patches for Surf and Stride ( `#7305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7305> `_ ) * add mlegp extension in R 3.5.1 easyconfigs ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ ) * add pkg-config file to bzip2 easyconfigs ( `#8200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8200> `_ ) * allow use of ' ``use_pip = False`` ' in easyconfigs if pip doesn't work ( `#8220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8220> `_ ) * various bug fixes, including: * fix checksums for nlme extensions in R easyconfigs ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ , `#8054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8054> `_ ) * add missing XZ dependency for Pysam > 0.12 ( `#7971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7971> `_ ) * define ``$GRACE_HOME`` in Grace easyconfigs, so that font dir can be located ( `#8048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8048> `_ ) * ``$XDG_DATA_DIRS`` must be set for GTK+ ( `#8089 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8089> `_ ) * add missing FriBidi dependency for Pango 1.43.0 ( `#8103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8103> `_ ) * add (back) custom ``sanity_check_paths`` in recent Pango easyconfigs ( `#8106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8106> `_ ) * fix missing extensions in cutadapt 1.16 easyconfigs ( `#8130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8130> `_ ) * add missing cURL dependency for recent SAMtools versions ( `#8131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8131> `_ ) * add singledispatch extension to Python 2.7.15 easyconfig using ``GCCcore/8.2.0`` toolchain ( `#8164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8164> `_ ) * add missing X11 dependency for Gdk-Pixbuf 2.38.1 ( `#8222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8222> `_ ) * make sure ``hdf5r`` picks up HDF5 dependency in R 3.5.1 easyconfigs ( `#8223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8223> `_ ) * enable zstd compression in GRASS 7.6.0 easyconfig ( `#8224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8224> `_ ) * add missing ICU dependency on ICU for Harfbuzz 2.4.0 ( `#8226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8226> `_ ) * disable AVX512 DGEMM kernels in OpenBLAS 0.3.5 ( `#8227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8227> `_ ) * fix homepage/description in OrthoFinder easyconfig ( `#8234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8234> `_ ) * add ``Parallel::ForkManager`` extension to Perl 5.28.x easyconfigs ( `#8247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8247> `_ ) * replace LibUUID dependencies with util-linux ( `#8258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8258> `_ ) * add jemalloc & pkg-config as build deps for Salmon 0.12.0 ( `#8264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8264> `_ ) * fix MAJIQ easyconfig by fixing order of extensions + avoid numpy test hang ( `#8272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8272> `_ ) * fix shebang in GLib Python script + clarify runtime dependency on Python ( `#8277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8277> `_ ) * add pkg-config and expat as (build) dependency for DBus ( `#8283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8283> `_ ) * define ``$GI_TYPELIB_PATH`` in GTK+ and Pango easyconfigs ( `#8246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8246> `_ , `#8286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8286> `_ ) * add pkg-config build dep to PROJ 6.0.0 easyconfig ( `#8309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8309> `_ ) * fix source URLS in recent libcerf easyconfigs ( `#8332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8332> `_ , `#8243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8243> `_ ) * make zlib a real dependency rather than a build dep in recent binutils easyconfigs (>= 2.28) ( `#8340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8340> `_ ) * add fix-ib-query patch to OpenMPI 2.1.x and 3.0.x easyconfigs ( `#8341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8341> `_ ) * set ``$XDG_CACHE_HOME`` to $TMPDIR before ' ``pip install`` ' in Arrow 0.12.0 easyconfigs ( `#8347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8347> `_ ) * other changes: * remove xbitmaps dependency from motif ( `#7530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7530> `_ ) * require custom ``sanity_check_paths`` in easyconfigs touched in PRs when generic easyblock is used ( `#8101 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8101> `_ , `#8123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8123> `_ ) * use CMake built with GCCcore toolchain when installing Eigen 3.3.4+ ( `#8261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8261> `_ ) * fix Python classifiers in ``setup.py`` , should be (only) Python 2.6 & 2.7 ( `#8299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8299> `_ ) * use custom easyblock for OpenBLAS in OpenBLAS 0.3.x easyconfigs ( `#8345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8345> `_ , `#8339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8339> `_ ) .. _release_notes_eb390: EasyBuild v3.9.0 (April 12th 2019) ---------------------------------- feature release **framework** * various enhancements, including: * add ``(pre)testopts`` easyconfig parameters ( `#2793 <https://github.com/easybuilders/easybuild-framework/pull/2793> `_ ) * add support for ``multi_deps`` easyconfig parameter ( `#2741 <https://github.com/easybuilders/easybuild-framework/pull/2741> `_ , `#2810 <https://github.com/easybuilders/easybuild-framework/pull/2810> `_ , `#2811 <https://github.com/easybuilders/easybuild-framework/pull/2811> `_ , `#2812 <https://github.com/easybuilders/easybuild-framework/pull/2812> `_ , `#2813 <https://github.com/easybuilders/easybuild-framework/pull/2813> `_ , `#2825 <https://github.com/easybuilders/easybuild-framework/pull/2825> `_ , `#2826 <https://github.com/easybuilders/easybuild-framework/pull/2826> `_ , `#2827 <https://github.com/easybuilders/easybuild-framework/pull/2827> `_ , `#2828 <https://github.com/easybuilders/easybuild-framework/pull/2828> `_ ) * various bug fixes, including: * fix argument name in ``close_pr`` ( `#2752 <https://github.com/easybuilders/easybuild-framework/pull/2752> `_ ) * fix undefined variable ' ``prefix`` ' in ``Compiler._set_compiler_vars`` ( `#2757 <https://github.com/easybuilders/easybuild-framework/pull/2757> `_ ) * fix test account for GitHub-related tests ( `#2760 <https://github.com/easybuilders/easybuild-framework/pull/2760> `_ ) * make sure read permissions are always set in ``permissions_step`` ( `#2770 <https://github.com/easybuilders/easybuild-framework/pull/2770> `_ ) * make test for ``dep_graph`` function robust against changing order of lines in resulting dot file ( `#2772 <https://github.com/easybuilders/easybuild-framework/pull/2772> `_ ) * fix problem with ``import_available_modules`` when running from easybuild-framework directory ( `#2786 <https://github.com/easybuilders/easybuild-framework/pull/2786> `_ ) * prepend location of test easyblocks to ``$PYTHONPATH`` to ``test_generate_software_list`` , rather than append ( `#2788 <https://github.com/easybuilders/easybuild-framework/pull/2788> `_ ) * use pid in backup name candidate to reduce risk of two processes colliding ( `#2796 <https://github.com/easybuilders/easybuild-framework/pull/2796> `_ ) * automatically enable ``--ignore-osdeps`` when using ``--preview-pr`` ( `#2799 <https://github.com/easybuilders/easybuild-framework/pull/2799> `_ ) * use temporary checkout of repository as robot path for ``--new-pr`` and ``--update-pr`` to determine locations for patch files ( `#2803 <https://github.com/easybuilders/easybuild-framework/pull/2803> `_ ) * avoid relying on order in which keys are processed in ``to_dependency`` ( `#2804 <https://github.com/easybuilders/easybuild-framework/pull/2804> `_ ) * fix yeb format to work with PyYAML 5 ( `#2809 <https://github.com/easybuilders/easybuild-framework/pull/2809> `_ ) * fix typo in error message for use of unknown easyconfig parameter ( `#2817 <https://github.com/easybuilders/easybuild-framework/pull/2817> `_ ) * enhance ``log_file_format`` to fix problem when ``%(name)s`` template value is used for log directory ( `#2818 <https://github.com/easybuilders/easybuild-framework/pull/2818> `_ ) * iterate over subdirectories in order in ``find_egg_dir_for`` of bootstrap script, to ensure oldest vsc-install is picked ( `#2819 <https://github.com/easybuilders/easybuild-framework/pull/2819> `_ ) * replace ``-Wl,--enable-new-dtags`` compiler option with ``-Wl,--disable-new-dtags`` in RPATH wrapper script ( `#2821 <https://github.com/easybuilders/easybuild-framework/pull/2821> `_ ) * updated ``COMPILER_F77`` for PGI >= 19.1 ( `#2823 <https://github.com/easybuilders/easybuild-framework/pull/2823> `_ ) * added ``FFTW_STATIC_LIBS_MT`` to ``FFTW_MAP_CLASS`` , otherwise ``FFTW_STATIC_LIBS_MT`` are incorrectly defined ( `#2822 <https://github.com/easybuilders/easybuild-framework/pull/2822> `_ ) * sort available version list when selecting/generating easyconfig ( `#2732 <https://github.com/easybuilders/easybuild-framework/pull/2732> `_ ) * other changes: * use ``assertEqual`` rather than ``assertEquals`` (which is deprecated) ( `#2746 <https://github.com/easybuilders/easybuild-framework/pull/2746> `_ ) * test with Tmod 4.1.4 (packaged in RHEL8) in Travis CI ( `#2747 <https://github.com/easybuilders/easybuild-framework/pull/2747> `_ ) * replace deps by hidden deps instead of removing them from the lists ( `#2748 <https://github.com/easybuilders/easybuild-framework/pull/2748> `_ ) * ensure non-zero exit code for all test subsuites (+ fix trivial style issues) ( `#2773 <https://github.com/easybuilders/easybuild-framework/pull/2773> `_ ) * silence printed deprecation warnings for easyconfigs/toolchains while running (easyconfigs) test suite ( `#2781 <https://github.com/easybuilders/easybuild-framework/pull/2781> `_ ) * avoid printing of messages/warnings in framework test suite ( `#2782 <https://github.com/easybuilders/easybuild-framework/pull/2782> `_ ) * enable silent mode for ``--new-pr`` and ``--update-pr`` ( `#2802 <https://github.com/easybuilders/easybuild-framework/pull/2802> `_ ) * update Travis config to reflect that PyYAML 5.x is no longer compatible with Python 2.6 ( `#2807 <https://github.com/easybuilders/easybuild-framework/pull/2807> `_ ) **easyblocks** * new software-specific easyblock for TensorRT ( `#1627 <https://github.com/easybuilders/easybuild-easyblocks/pull/1627> `_ ) * minor enhancements, including: * make sure CMake doesn't pick up on system Boost in CMakeMake generic easyblock ( `#1618 <https://github.com/easybuilders/easybuild-easyblocks/pull/1618> `_ ) * modified ``ConfigureMake`` and ``CMakeMake`` generic easyblocks to allow changing ``configure_cmd`` , ``build_cmd`` and ``install_cmd`` to fit various needs ( `#1628 <https://github.com/easybuilders/easybuild-easyblocks/pull/1628> `_ , `#1658 <https://github.com/easybuilders/easybuild-easyblocks/pull/1658> `_ ) * update ANSYS easyblock to deal with changed versioning scheme ( `#1631 <https://github.com/easybuilders/easybuild-easyblocks/pull/1631> `_ ) * add extra path to builddir for SNPhylo >= 20160204 ( `#1632 <https://github.com/easybuilders/easybuild-easyblocks/pull/1632> `_ ) * add better support for TensorRT to TensorFlow ( `#1634 <https://github.com/easybuilders/easybuild-easyblocks/pull/1634> `_ ) * add support for newer versions of wxPython to wxPython easyblock ( `#1635 <https://github.com/easybuilders/easybuild-easyblocks/pull/1635> `_ ) * update OCaml easyblock to support OPAM 2.x ( `#1638 <https://github.com/easybuilders/easybuild-easyblocks/pull/1638> `_ ) * update sanity check in TensorFlow easyblock for TensorFlow 1.13.x ( `#1642 <https://github.com/easybuilders/easybuild-easyblocks/pull/1642> `_ ) * make ``ConfigureMake`` , ``MesonNinja`` and ``SCons`` generic easyblocks aware of pretestopts ( `#1645 <https://github.com/easybuilders/easybuild-easyblocks/pull/1645> `_ ) * add support for installing Python packages with ' ``pip`` ' without using ``--ignore-installed`` ( `#1647 <https://github.com/easybuilders/easybuild-easyblocks/pull/1647> `_ ) * add support to ``CMakeMake`` easyblock to specify compilers using absolute file path ( `#1652 <https://github.com/easybuilders/easybuild-easyblocks/pull/1652> `_ , `#1655 <https://github.com/easybuilders/easybuild-easyblocks/pull/1655> `_ ) * stop checking for deprecated ``pgf77`` in sanity check of PGI easyblock ( `#1653 <https://github.com/easybuilders/easybuild-easyblocks/pull/1653> `_ ) * accommodate version 10.1 in CUDA easyblock ( `#1654 <https://github.com/easybuilders/easybuild-easyblocks/pull/1654> `_ ) * install ``sitecustomize.py`` with Python to support Python package installations for multiple Python versions in a single directory ( `#1657 <https://github.com/easybuilders/easybuild-easyblocks/pull/1657> `_ ) * enhance SAMtools easyblock to also install ``libhts.a`` and include/htslib (when applicable) ( `#1661 <https://github.com/easybuilders/easybuild-easyblocks/pull/1661> `_ ) * tweak ``PythonPackage`` & ``PythonBundle`` to update ``$EBPYTHONPREFIXES`` rather than ``$PYTHONPATH`` for multi-Python installations + make ``sanity_check_step`` aware of multi_deps ( `#1664 <https://github.com/easybuilders/easybuild-easyblocks/pull/1664> `_ , `#1678 <https://github.com/easybuilders/easybuild-easyblocks/pull/1678> `_ ) * replace ``-openmp`` with ``-fopenmp`` when building TINKER with Intel compilers (+ modernize easyblock) ( `#1668 <https://github.com/easybuilders/easybuild-easyblocks/pull/1668> `_ ) * make sure Meson is configured with ``-Dlibdir=lib`` so it doesn't install libraries in ``lib/x86_64-linux-gnu`` on Debian/Ubuntu multiarch systems ( `#1673 <https://github.com/easybuilders/easybuild-easyblocks/pull/1673> `_ ) * allow for external libfabric via ``ofi_libfabric`` parameter in impi easyblock ( `#1676 <https://github.com/easybuilders/easybuild-easyblocks/pull/1676> `_ ) * pass down compiler names and options to Qt5 5.8 & more recent via corresponding ``QMAKE_*`` configuration options ( `#1677 <https://github.com/easybuilders/easybuild-easyblocks/pull/1677> `_ ) * various bug fixes, including: * create symlinks to ``.modulerc`` in symlinked module directories ( `#1636 <https://github.com/easybuilders/easybuild-easyblocks/pull/1636> `_ ) * add missing import in FFTW easyblock ( `#1641 <https://github.com/easybuilders/easybuild-easyblocks/pull/1641> `_ ) * fix finding of Python 3 include subdir + ``libpython*.so`` in OpenBabel easyblock ( `#1633 <https://github.com/easybuilders/easybuild-easyblocks/pull/1633> `_ ) * add ``no_qa`` pattern for interactive installation command for ABAQUS ( `#1637 <https://github.com/easybuilders/easybuild-easyblocks/pull/1637> `_ ) * make serial, smpar and dm+sm builds of WRF work and pass tests ( `#1646 <https://github.com/easybuilders/easybuild-easyblocks/pull/1646> `_ ) * configure CP2K with correct ``DATA_DIR`` value rather than relying on ``$CP2K_DATA_DIR`` environment variable ( `#1650 <https://github.com/easybuilders/easybuild-easyblocks/pull/1650> `_ ) * CP2K fixes: only call configure_LAPACK/ScaLAPACK when imkl is not used, prefer using 2^2 MPI processes for tests ( `#1651 <https://github.com/easybuilders/easybuild-easyblocks/pull/1651> `_ ) * also take into account custom easyconfig parameters from ``CMakeMake`` in BamTools easyblock ( `#1656 <https://github.com/easybuilders/easybuild-easyblocks/pull/1656> `_ ) * make sure Perl scripts are installed in the right location ( `#1660 <https://github.com/easybuilders/easybuild-easyblocks/pull/1660> `_ ) * make sure setenv is used for CUDA_PATH etc. ( `#1663 <https://github.com/easybuilders/easybuild-easyblocks/pull/1663> `_ ) * cleanup ``sanity_check_paths`` in numpy & scipy easyblocks ( `#1665 <https://github.com/easybuilders/easybuild-easyblocks/pull/1665> `_ , `#1667 <https://github.com/easybuilders/easybuild-easyblocks/pull/1667> `_ ) * always set ``self.pylibdir`` in ``PythonPackage.set_pylibdirs()`` , which is important when installing Python packages for multiple Python versions via ``multi_deps`` ( `#1671 <https://github.com/easybuilders/easybuild-easyblocks/pull/1671> `_ ) * fix custom definition of ``load_module`` method in LAPACK module ( `#1675 <https://github.com/easybuilders/easybuild-easyblocks/pull/1675> `_ ) * other changes: * replace ' ``except OSError, err:`` ' pattern with ' ``except OSError as err:`` ' (for compatibility with Python 3.x) ( `#1639 <https://github.com/easybuilders/easybuild-easyblocks/pull/1639> `_ ) * clean up Java easyblock to use ``filetools`` functionality ( `#1649 <https://github.com/easybuilders/easybuild-easyblocks/pull/1649> `_ ) **easyconfigs** * added easyconfigs for new toolchains: ``intel/2019.02`` ( `#7598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7598> `_ ), ``intel/2019.03`` ( `#7846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7846> `_ ) * added example easyconfig files for 68 new software packages: * ACT ( `#7928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7928> `_ ), aiohttp ( `#7728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7728> `_ ), at-spi2-atk and at-spi2-core ( `#7658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7658> `_ ), Bader ( `#7804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7804> `_ ), barrnap ( `#7738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7738> `_ ), BCEL ( `#7937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7937> `_ ), biscuit ( `#5868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5868> `_ ), bitarray ( `#7772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7772> `_ ), BlobTools ( `#7565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7565> `_ , `#7583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7583> `_ ), bmtagger ( `#7890 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7890> `_ ), bsddb3 ( `#7642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7642> `_ ), CheckM ( `#7712 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7712> `_ ), Cheetah ( `#7952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7952> `_ ), CONCOCT ( `#7891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7891> `_ ), cyvcf2 ( `#8031 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8031> `_ ), DAS_Tool ( `#7741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7741> `_ ), ExaBayes ( `#7801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7801> `_ ), FastANI ( `#7992 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7992> `_ ), fastp ( `#7693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7693> `_ ), Flask ( `#7734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7734> `_ ), giflib ( `#7663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7663> `_ ), Giza ( `#7843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7843> `_ ), glew ( `#7685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7685> `_ ), gpustat ( `#8025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8025> `_ ), GRASS ( `#7489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7489> `_ ), GTDB-Tk ( `#7995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7995> `_ ), HPCX ( `#7725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7725> `_ ), IntelPython ( `#7920 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7920> `_ ), KNIME ( `#7554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7554> `_ ), KronaTools ( `#7721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7721> `_ ), KyotoCabinet ( `#7955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7955> `_ ), Leptonica ( `#7932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7932> `_ ), libepoxy ( `#7655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7655> `_ ), libpsl ( `#7666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7666> `_ ), MAGMA ( `#7829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7829> `_ ), MATLAB-Engine ( `#7758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7758> `_ ), MaxBin ( `#7767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7767> `_ ), MetaBAT ( `#7746 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7746> `_ , `#7931 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7931> `_ ), MinPath ( `#7763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7763> `_ ), ncdu ( `#7505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7505> `_ ), NGSadmix ( `#7524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7524> `_ ), NIMBLE ( `#7564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7564> `_ ), PCAngsd ( `#7727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7727> `_ ), pizzly ( `#7724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7724> `_ ), Ploticus ( `#7545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7545> `_ ), pocl ( `#7681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7681> `_ ), POT ( `#8011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8011> `_ ), ProjectQ ( `#7576 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7576> `_ ), pullseq ( `#7740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7740> `_ ), pyBigWig ( `#7600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7600> `_ ), Pyke3 ( `#8034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8034> `_ ), PyRETIS ( `#8041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8041> `_ ), RDKit ( `#7973 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7973> `_ ), RNAIndel ( `#8009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8009> `_ ), scikit-optimize ( `#7613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7613> `_ ), SciPy-bundle ( `#7922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7922> `_ ), sep ( `#8032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8032> `_ ), slidingwindow ( `#7909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7909> `_ ), SPLASH ( `#7843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7843> `_ ), SqueezeMeta ( `#7771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7771> `_ ), SRPRISM ( `#7890 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7890> `_ ), taxator-tk ( `#7894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7894> `_ ), TensorRT ( `#7584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7584> `_ ), tesseract ( `#7932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7932> `_ ), Transrate ( `#5108 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5108> `_ ), VCF-kit ( `#7786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7786> `_ , `#7882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7882> `_ ), VV ( `#7297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7297> `_ ) * added additional easyconfigs for various supported software packages, including: * AFNI 19.0.01, Arrow 0.7.1, BLAST+ 2.8.1, CUDA 10.1.105, GCC(core) 8.3.0, GTK+ 3.22.30, Java (OpenJDK) 11(.0.2), Meson 0.50.0, MultiQC 1.7, Nim 0.19.2, Ninja 1.9.0, netCDF 4.6.2, netCDF-Fortran 4.4.5, PCRE 8.43, Perl 5.28.1, PGI 19.1, Python 3.7.2, RELION 3.0.4, Ruby 2.6.1, SCons 3.0.4, SQLite 3.27.2, SuiteSparse 5.4.0, TINKER 8.6.1, TensorFlow 1.13.1, X11 20190311 * minor enhancements, including: * add various extensions to R 3.5.1 easyconfigs: ``asnipe`` ( `#7572 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7572> `_ ), ``liquidSVM`` ( `#7597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7597> `_ ), ``oddsratio`` / ``mltools`` / ``h2o`` ( `#7744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7744> `_ ), ``mlegp`` ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ ), ``bartMachine`` / ``lqa`` ( `#7865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7865> `_ ), ``PresenceAbsence`` / ``GUTS`` / ``GenSA`` ( `#7905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7905> `_ ), ``parsedate`` ( `#7935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7935> `_ ), ``circular`` ( `#7975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7975> `_ ) * add ``ujson`` extension in recent Python easyconfigs ( `#7517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7517> `_ ) * run various checks on easyconfigs that are touched in pull requests and involve Python packages ( `#7754 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7754> `_ ) * add ``cpanminus`` extension to recent Perl easyconfigs ( `#7866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7866> `_ ) * also install ANTs scripts (and set ``$ANTSPATH`` as required by those scripts) ( `#7940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7940> `_ ) * add missing ``configopts`` in GATE 8.1 easyconfig to enable Davis feature ( `#8000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8000> `_ ) * various bug fixes, including: * add patch for Mesa 18.1.1 to detect MIT-SHM ( `#7536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7536> `_ ) * add proper description to MINC-2.4.03 ( `#7551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7551> `_ ) * add libunwind dependency to recent Mesa easyconfig when building with foss/GCC ( `#7629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7629> `_ ) * add/reorder missing/misplaced extensions in Python 2.7.15 and 3.6.6 easyconfigs ( `#7696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7696> `_ ) * fix Jellyfish dependency in easyconfig for Kraken 1.0 (Jellyfish 1.x is required) ( `#7743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7743> `_ ) * use ``https://`` in most recent XZ easyconfigs ( `#7782 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7782> `_ ) * add patch for OpenMPI 3.1.x to fix ib-query ' ``Invalid argument`` ' error ( `#7789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7789> `_ ) * build OpenBLAS with ``-fno-tree-vectorize`` (asm constraint bugs for <0.3.6) + cleanup & SHA256 checksums ( `#7790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7790> `_ , `#7793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7793> `_ ) * extra patch for TensorFlow 1.12.0 to remove ``-B/usr/bin`` from ``linker_bin_path_flag`` in ``cuda_configure.bzl`` ( `#7800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7800> `_ ) * fix easyconfig for STAR-Fusion 1.5.0 ( `#7802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7802> `_ ) * fix checksums for boot/nlme extensions in R easyconfigs ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ , `#8054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8054> `_ ) * add patch for OpenMPI 3.x to fix UCX memory leak ( `#7535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7535> `_ , `#7824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7824> `_ ) * replace ``ncurses-devel`` OS dependency in CMake easyconfigs using ``dummy`` toolchain with proper ncurses dependency ( `#7834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7834> `_ ) * use ``PythonBundle`` for ``snakemake-5.2.4-foss-2018b-Python-3.6.6.eb`` (+ fix moduleclass) ( `#7842 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7842> `_ ) * use correct ``buildopts`` + add missing zlib dependency in StringTie 1.3.5 easyconfig ( `#7845 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7845> `_ ) * update GStreamer to not enable dw and fix some missing dependencies ( `#7889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7889> `_ ) * add missing XZ dependency to most recent Pysam easyconfigs ( `#7897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7897> `_ ) * expat: add configure option ``--without-docbook`` to avoid docbook2X dependency ( `#7930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7930> `_ ) * fix source URLs for mawk ( `#7960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7960> `_ ) * fix LWM2, OTF2, OPARI2, and Score-P download URLs ( `#7994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7994> `_ ) * use ``https://`` in homepage & source_urls for OpenMPI and hwloc easyconfigs ( `#8013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8013> `_ , `#8014 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8014> `_ , `#8015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8015> `_ and `#8016 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8016> `_ ) * add missing bokeh dependency for dask 1.0.0 (+ add dask-jobqueue) ( `#8029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8029> `_ ) * fix checking of binutils build dep in easyconfig tests ( `#8038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8038> `_ ) * other changes: * avoid use of ``.items()`` in R (bundle) easyconfigs, to fix compatibility with EasyBuild running on top of Python 3 ( `#7791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7791> `_ ) * trim down test configuration: only test with Lmod 6.x with Tcl/Lua on Python 2.6/2.7 ( `#7795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7795> `_ , `#7798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7798> `_ ) * use ``%(pyshortver)s`` template in (old) SIP easyconfigs ( `#7797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7797> `_ ) * add PyTorch to whitelist for not having ' ``use_pip`` ' enabled ( `#7844 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7844> `_ ) * don't use local variable ' ``pylibdir`` ' in list comprehension in PyQt easyconfig, since that doesn't work in Python 3 ( `#7848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7848> `_ ) * use pip instead of setup.py with h5py/2.7.1 and 2017b toolchains ( `#7864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7864> `_ ) * prefer ``https://`` over ``ftp://`` for source_urls in recent GROMACS easyconfigs ( `#7948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7948> `_ ) * rename arrow to Arrow for old easyconfig ( `#8007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8007> `_ ) .. _release_notes_eb381: EasyBuild v3.8.1 (January 29th 2019) ------------------------------------ bugfix/update release **framework** * various minor enhancements, including: * speed up checking of OS dependencies ( `#2703 <https://github.com/easybuilders/easybuild-framework/pull/2703> `_ ) * add support for ' ``eb --show-system-info`` ' ( `#2722 <https://github.com/easybuilders/easybuild-framework/pull/2722> `_ ) * add support for ' ``%(arch)s`` ' template value in easyconfig files (x86-64, aarch64, ppc64le, ...) ( `#2728 <https://github.com/easybuilders/easybuild-framework/pull/2728> `_ ) * various bug fixes, including: * add timestamp to reprod dir while in tmp space ( `#2705 <https://github.com/easybuilders/easybuild-framework/pull/2705> `_ ) * avoid ' ``+`` ' in directory name for ``g++`` rpath wrapper ( `#2710 <https://github.com/easybuilders/easybuild-framework/pull/2710> `_ ) * pre-install vsc-install < 0.11.4 in bootstrap script to avoid requiring ' ``mock`` ' Python package ( `#2717 <https://github.com/easybuilders/easybuild-framework/pull/2717> `_ ) * fix check in ``--merge-pr`` whether PR is eligible for merging in to only consider the status of the last test report ( `#2720 <https://github.com/easybuilders/easybuild-framework/pull/2720> `_ ) * don't recreate build directory when ' ``buildininstalldir`` ' is enabled for iterative installations ( `#2724 <https://github.com/easybuilders/easybuild-framework/pull/2724> `_ ) * filter (CUDA) ``lib*/stubs`` paths in RPATH wrapper script ( `#2725 <https://github.com/easybuilders/easybuild-framework/pull/2725> `_ ) * other changes: * replace ' ``except IOError, err:`` ' pattern with ' ``except IOError as err:`` ' for compatibility with Python 3.x ( `#2711 <https://github.com/easybuilders/easybuild-framework/pull/2711> `_ ) * make all ``print`` statements compatible with Python 3 ( `#2715 <https://github.com/easybuilders/easybuild-framework/pull/2715> `_ ) * avoid use of ``sys.maxint`` in dependencies_for ( `#2716 <https://github.com/easybuilders/easybuild-framework/pull/2716> `_ ) **easyblocks** * minor enhancements, including: * update Ferret easyblock to handle Ferret 7.3 ( `#1349 <https://github.com/easybuilders/easybuild-easyblocks/pull/1349> `_ ) * add support for defining ``$LDSHARED`` when installing Python packages if Python's value doesn't use toolchain compiler ($CC) ( `#1455 <https://github.com/easybuilders/easybuild-easyblocks/pull/1455> `_ ) * update CP2K easyblock to add support for CP2K 6.1, and fix incorrect LibInt references ( `#1545 <https://github.com/easybuilders/easybuild-easyblocks/pull/1545> `_ ) * make OpenFOAM easyblock handle debug build ( `#1609 <https://github.com/easybuilders/easybuild-easyblocks/pull/1609> `_ ) * handle multiple installation keys for MATLAB ( `#1610 <https://github.com/easybuilders/easybuild-easyblocks/pull/1610> `_ ) * run ' ``make check`` ' in parallel for GROMACS since it involves more compilation ( `#1611 <https://github.com/easybuilders/easybuild-easyblocks/pull/1611> `_ ) * update OpenCV easyblock for recent versions (3.4.x >= 3.4.4 + 4.0.x) ( `#1616 <https://github.com/easybuilders/easybuild-easyblocks/pull/1616> `_ ) * various bug fixes, including: * check current ``start_dir`` value before appending ' ``src`` ' subdirectory in MrBayes easyblock ( `#1582 <https://github.com/easybuilders/easybuild-easyblocks/pull/1582> `_ ) * avoid that (system) Intel compilers are always considered when building SuiteSparse ( `#1612 <https://github.com/easybuilders/easybuild-easyblocks/pull/1612> `_ ) * fix missing import statement in ROOT easyblock ( `#1614 <https://github.com/easybuilders/easybuild-easyblocks/pull/1614> `_ ) * answer SELinux question with ' ``no`` ' in Mathematica easyblock ( `#1617 <https://github.com/easybuilders/easybuild-easyblocks/pull/1617> `_ ) * disable \"build isolation\" feature in pip > 10.x in PythonPackage generic easyblock ( `#1623 <https://github.com/easybuilders/easybuild-easyblocks/pull/1623> `_ ) * other changes * cleanup in Perl and PerlModule easyblocks ( `#1603 <https://github.com/easybuilders/easybuild-easyblocks/pull/1603> `_ ) **easyconfigs** * added easyconfigs for new toolchains ``foss/2019a`` ( `#7371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7371> `_ ), ``intel/2019a`` ( `#7372 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7372> `_ ) and ``iomkl/2019.01`` ( `#7375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7375> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added example easyconfig files for 43 new software packages: * Assimulo ( `#6740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6740> `_ ), C3D ( `#7059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7059> `_ ), CellMix ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), CESM-deps ( `#6654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6654> `_ , `#6675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6675> `_ , `#6823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6823> `_ ), DSA ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), DeMixT ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), deconf ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), DeconICA ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), double-conversion ( `#7307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7307> `_ ), dxpy ( `#7079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7079> `_ ), EPIC ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), expect ( `#7387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7387> `_ ), Flye ( `#7430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7430> `_ ), FMILibrary ( `#6740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6740> `_ ), FMRIprep ( `#7059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7059> `_ ), FUSE ( `#7078 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7078> `_ ), GDCM ( `#7310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7310> `_ ), HDDM ( `#7396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7396> `_ ), ICA-AROMA ( `#7059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7059> `_ ), IntaRNA ( `#7334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7334> `_ ), imageio ( `#6738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6738> `_ ), KWIML ( `#7308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7308> `_ ), kWIP ( `#7444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7444> `_ ), MagresPython ( `#7395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7395> `_ ), medaka ( `#7426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7426> `_ ), MINC ( `#7311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7311> `_ ), MuSiC ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), netMHCIIpan ( `#7377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7377> `_ ), NIfTI ( `#7311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7311> `_ ), OPERA ( `#7408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7408> `_ ), psrecord ( `#7331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7331> `_ ), pyfits ( `#7273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7273> `_ ), PyFMI ( `#6740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6740> `_ ), PyGWAS ( `#5852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5852> `_ ), Pylint ( `#6675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6675> `_ ), QDD ( `#7284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7284> `_ ), RERconverge ( `#7289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7289> `_ ), samclip ( `#7226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7226> `_ ), SCIPhI ( `#7419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7419> `_ ), swarm ( `#7453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7453> `_ ), VXL ( `#7309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7309> `_ ), wrf-python ( `#6736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6736> `_ ), xCell ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ) * added additional easyconfigs for various supported software packages, including: * Amber 18, Arrow 0.12.0, Biopython 1.73, Boost 1.69.0, CP2K 6.1, canu 1.8, Ferret 7.3, GATE 8.1.p01, GROMACS 2019, Geant4 10.5, HPL 2.3, libxsmm 1.10, matplotlib 3.0.2, NEURON 7.6.5, Octave 4.4.1, OpenBLAS 0.3.5, OpenCV 3.4.5 + 4.0.1, OpenFOAM v1812, PGI 18.10, PLUMED 2.5.0, ROOT 6.14.06, Theano 1.0.3, TopHat 2.1.2, Yade 2018.02b * minor enhancements, including: * add additional extensions to R 3.5.1 easyconfigs: * statnet ( `#7370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7370> `_ ), NMF, ComICS, dtangle, MCMCpack, shinythemes ( `#7420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7420> `_ ), csSAM ( `#7423 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7423> `_ ), bridgedist ( `#7477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7477> `_ ) * add DeconRNASeq and GSVA extensions to R-bundle-Bioconductor 3.7 easyconfigs ( `#7421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7421> `_ ) * also install header files and CMake module for SeqAn 2.4.0 built with ``foss/2018b`` ( `#7434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7434> `_ ) * add download URL for ``intel/2018a`` components ( `#7436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7436> `_ ) * add missing checksums for protobuf easyconfigs using dummy toolchain ( `#7492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7492> `_ ) * various bug fixes, including: * fix source URL in Doxygen easyconfigs ( `#7324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7324> `_ ) * add fallback source URL for recent pigz versions ( `#7346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7346> `_ ) * promote FriBiDi to runtime dep of Pango rather than only build dep ( `#7369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7369> `_ ) * add ``--without-systemdsystemunitdir`` configure option to recent DBus easyconfigs ( `#7373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7373> `_ ) * fix issue of building M4 1.4.18 with glibc 2.28 ( `#7384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7384> `_ ) * fix broken source URLs in MariaDB easyconfigs ( `#7413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7413> `_ ) * bump up build dependency of flex 2.6.4 from Bison 3.0.4 to 3.0.5 ( `#7414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7414> `_ ) * disable building of OpenColorIO Python bindings since Python is not included as a dependency ( `#7416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7416> `_ ) * add missing build dependencies in old Harfbuzz/Pango easyconfigs (2016a generation) ( `#7433 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7433> `_ ) * fix XML-LibXML linking with Intel compiler and GCCcore Perl ( `#7440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7440> `_ ) * prevent non-critical error from stopping Guile v1.8.8 build ( `#7446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7446> `_ ) * use ``%(arch)s`` template rather than hardcoding ' ``x86_64`` ' in XML-Parser easyconfigs ( `#7450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7450> `_ ) * use uniform configopts for Guile 1.8.8 ( `#7452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7452> `_ ) * fix configopts in PyQt5 easyconfig files to avoid installation of files in Python/Qt5 installation directories ( `#7470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7470> `_ ) * other changes: * fix homepage in easyconfigs for ``foss`` toolchains ( `#7482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7482> `_ ) and ``intel`` toolchains ( `#7483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7483> `_ ) .. _release_notes_eb380: EasyBuild v3.8.0 (December 18th 2018) ------------------------------------- feature release **framework** * various enhancements, including: * support use of version ranges in ``--filter-deps`` ( `#2357 <https://github.com/easybuilders/easybuild-framework/pull/2357> `_ ) * add support for ``--list-prs`` ( `#2400 <https://github.com/easybuilders/easybuild-framework/pull/2400> `_ , `#2668 <https://github.com/easybuilders/easybuild-framework/pull/2668> `_ ) * add support for ``--close-pr`` ( `#2401 <https://github.com/easybuilders/easybuild-framework/pull/2401> `_ ) * allow setting ``optarch`` compiler flags in the easyconfig via ``toolchainopts`` easyconfig parameter ( `#2595 <https://github.com/easybuilders/easybuild-framework/pull/2595> `_ ) * add option to skip pre-creation of install directory: ``--disable-pre-create-installdir`` ( `#2629 <https://github.com/easybuilders/easybuild-framework/pull/2629> `_ , `#2637 <https://github.com/easybuilders/easybuild-framework/pull/2637> `_ ) * flesh out setting up of configuration into dedicated ' ``set_up_configuration`` ' function ( `#2638 <https://github.com/easybuilders/easybuild-framework/pull/2638> `_ ) * clean error when ' ``eb`` ' is cancelled by user ( `#2641 <https://github.com/easybuilders/easybuild-framework/pull/2641> `_ ) * add support for using Slurm as backend for ``--job`` , via ``--job-backend=Slurm`` ( `#2642 <https://github.com/easybuilders/easybuild-framework/pull/2642> `_ , `#2666 <https://github.com/easybuilders/easybuild-framework/pull/2666> `_ ) * save easyblocks along with easyconfig in ' ``reprod`` ' subdirectory of install directory ( `#2653 <https://github.com/easybuilders/easybuild-framework/pull/2653> `_ ) * add support for deprecating easyconfig files & toolchains ( `#2656 <https://github.com/easybuilders/easybuild-framework/pull/2656> `_ ) * changed ``EasyConfig.update`` to be able to specify not to allow duplicate values ( `#2657 <https://github.com/easybuilders/easybuild-framework/pull/2657> `_ ) * move adding of dependencies to prepare step instead of check readiness step ( `#2674 <https://github.com/easybuilders/easybuild-framework/pull/2674> `_ ) * add support for disabling mapping of (sub)toolchains when ``--try-toolchain`` is used, via ``--disable-map-toolchains`` ( `#2682 <https://github.com/easybuilders/easybuild-framework/pull/2682> `_ ) * add ' ``astro`` ' and ' ``quantum`` ' module classes ( `#2693 <https://github.com/easybuilders/easybuild-framework/pull/2693> `_ ) * various bug fixes, including: * make ``--from-pr`` always try to apply PR patch on top of PR target branch ( `#2631 <https://github.com/easybuilders/easybuild-framework/pull/2631> `_ ) * fix bug that could cause to silently overwrite an existing easyconfig when using ``--try-*`` ( `#2635 <https://github.com/easybuilders/easybuild-framework/pull/2635> `_ ) * don't pass down specific environment variables into submitted jobs ( `#2643 <https://github.com/easybuilders/easybuild-framework/pull/2643> `_ ) * update template constants for source URLs to use https ( `#2648 <https://github.com/easybuilders/easybuild-framework/pull/2648> `_ ) * fix lib64 fallback for ' ``lib`` '/' ``lib64`` ' dirs entry in ``sanity_check_paths`` ( `#2649 <https://github.com/easybuilders/easybuild-framework/pull/2649> `_ ) * change PGI F90 Fortran compiler to pgf90 ( `#2650 <https://github.com/easybuilders/easybuild-framework/pull/2650> `_ ) * use ``--set-upstream-to`` in ``install-EasyBuild-develop.sh`` script to deal with deprecated/no longer supported ``--set-upstream`` ( `#2651 <https://github.com/easybuilders/easybuild-framework/pull/2651> `_ ) * fix order of keys in ' ``toolchain`` ' value for dumped easyconfig file (name, version) + run style check on dumped easyconfigs in dump tests ( `#2660 <https://github.com/easybuilders/easybuild-framework/pull/2660> `_ ) * ensure checksums beside sources in dumped easyconfigs ( `#2661 <https://github.com/easybuilders/easybuild-framework/pull/2661> `_ ) * fix problems with easyconfig file saved in ' ``reprod`` ' directory by copying it before running any installation steps ( `#2664 <https://github.com/easybuilders/easybuild-framework/pull/2664> `_ ) * make print functions more robust w.r.t. arguments being passed to format the message to be printed ( `#2670 <https://github.com/easybuilders/easybuild-framework/pull/2670> `_ ) * use ' ``git am`` ' to apply patch for PRs in ``fetch_easyconfigs_from_pr`` ( `#2680 <https://github.com/easybuilders/easybuild-framework/pull/2680> `_ ) * correctly define ``$LIBFFT_MT`` for Intel MKL ( `#2688 <https://github.com/easybuilders/easybuild-framework/pull/2688> `_ ) * don't always require easyconfig files to resolve dependencies ( `#2690 <https://github.com/easybuilders/easybuild-framework/pull/2690> `_ , `#2692 <https://github.com/easybuilders/easybuild-framework/pull/2692> `_ , `#2697 <https://github.com/easybuilders/easybuild-framework/pull/2697> `_ , `#2698 <https://github.com/easybuilders/easybuild-framework/pull/2698> `_ , `#2699 <https://github.com/easybuilders/easybuild-framework/pull/2699> `_ ) * fixes for Travis CI config: * stop testing with Lmod 6.6.3, testing with Lmod 6.5.1 is sufficient ( `#2627 <https://github.com/easybuilders/easybuild-framework/pull/2627> `_ ) * Python 2.6 requires python-daemon 1.x as dep for GC3Pie ( `#2673 <https://github.com/easybuilders/easybuild-framework/pull/2673> `_ ) * stick to idna<2.8 with Python 2.6 in Travis + distable broken test for HgRepository ( `#2678 <https://github.com/easybuilders/easybuild-framework/pull/2678> `_ ) * other changes: * always skip symlinks in ``adjust_permissions`` ( `#2644 <https://github.com/easybuilders/easybuild-framework/pull/2644> `_ ) * flesh out ' ``avail_easyblocks`` ' function from support for ``--list-easyblocks`` ( `#2663 <https://github.com/easybuilders/easybuild-framework/pull/2663> `_ ) * deprecate the ``ictce`` toolchain ( `#2667 <https://github.com/easybuilders/easybuild-framework/pull/2667> `_ ) * deprecate ``goolf`` and ``goolfc`` toolchains ( `#2676 <https://github.com/easybuilders/easybuild-framework/pull/2676> `_ ) * deprecate ``intel`` toolchains older than ``intel/2016a`` (+ ``iccifort`` & ``iimpi`` subtoolchains) ( `#2677 <https://github.com/easybuilders/easybuild-framework/pull/2677> `_ ) * deprecate ancient ``gompi`` toolchain versions ( `#2684 <https://github.com/easybuilders/easybuild-framework/pull/2684> `_ ) * use ' ``tar xzf`` ' (gzip) rather than ' ``tar xZf`` ' (ancient ``compress`` ) to unpack ``*.tar.Z`` source files ( `#2686 <https://github.com/easybuilders/easybuild-framework/pull/2686> `_ ) * flesh out ' ``set_parallel`` ' method to it can be called separately ( `#2687 <https://github.com/easybuilders/easybuild-framework/pull/2687> `_ ) **easyblocks** * new generic easyblocks: * ``PythonBundle`` for installing a bundle of Python packages ( `#1553 <https://github.com/easybuilders/easybuild-easyblocks/pull/1553> `_ ) * ``MesonNinja`` for installing using Meson & Ninja ( `#1561 <https://github.com/easybuilders/easybuild-easyblocks/pull/1561> `_ ) * new software specific easyblock for ``RepeatMasker`` ( `#1600 <https://github.com/easybuilders/easybuild-easyblocks/pull/1600> `_ ) * minor enhancements, including: * add ``-fno-delete-null-pointer-checks`` compiler flag for OpenFOAM versions older than v3.0 ( `#1311 <https://github.com/easybuilders/easybuild-easyblocks/pull/1311> `_ ) * add support for building Tau with OTF included as dependency ( `#1313 <https://github.com/easybuilders/easybuild-easyblocks/pull/1313> `_ ) * add support for Intel MPI version 2019 ( `#1546 <https://github.com/easybuilders/easybuild-easyblocks/pull/1546> `_ ) * also populate the include dir for CP2K ( `#1554 <https://github.com/easybuilders/easybuild-easyblocks/pull/1554> `_ ) * add custom easyconfig parameter in GCC easyblock to control use of gold linker: ``use_gold_linker`` ( `#1555 <https://github.com/easybuilders/easybuild-easyblocks/pull/1555> `_ ) * replace ' ``-`` ' with ' ``_`` ' in default ' ``import`` ' check for Python packages ( `#1560 <https://github.com/easybuilders/easybuild-easyblocks/pull/1560> `_ ) * update WRF and WPS to support version 4 ( `#1563 <https://github.com/easybuilders/easybuild-easyblocks/pull/1563> `_ ) * adapt PSI easyblock for PSI4 > 1.2 ( `#1568 <https://github.com/easybuilders/easybuild-easyblocks/pull/1568> `_ ) * update Siesta easyblock to 4.1-b4 and add custom test_step ( `#1573 <https://github.com/easybuilders/easybuild-easyblocks/pull/1573> `_ ) * enhance Mothur easyblock to support use of Boost and HDF5 as dependencies ( `#1576 <https://github.com/easybuilders/easybuild-easyblocks/pull/1576> `_ ) * enhance sanity check for icc & ifort: also check for ``compilers_and_libraries_*/linux`` subdirectory ( `#1577 <https://github.com/easybuilders/easybuild-easyblocks/pull/1577> `_ ) * update Trinity easyblock for latest version 2.8 ( `#1579 <https://github.com/easybuilders/easybuild-easyblocks/pull/1579> `_ ) * add version check in sanity check step of SCOTCH easyblock (+ code cleanup) ( `#1580 <https://github.com/easybuilders/easybuild-easyblocks/pull/1580> `_ ) * add support in Clang easyblock to skip running of all tests ( `#1584 <https://github.com/easybuilders/easybuild-easyblocks/pull/1584> `_ ) * update WRF easyblock to allow serial HDF5 + pick up on parallel netCDF ( `#1592 <https://github.com/easybuilders/easybuild-easyblocks/pull/1592> `_ ) * avoid hardcoding ' ``PREFIX=<installdir>`` ' in build/install options when using ``SCons`` easyblock ( `#1594 <https://github.com/easybuilders/easybuild-easyblocks/pull/1594> `_ ) * enable TensorFlow to detect any MPI runtime ( `#1597 <https://github.com/easybuilders/easybuild-easyblocks/pull/1597> `_ ) * enhance ``Bundle`` easyblock to allow installation of bundle components with additional easyblocks + build components in parallel ( `#1598 <https://github.com/easybuilders/easybuild-easyblocks/pull/1598> `_ ) * enhance Trilinos easyblock to support building against MKL ( `#1601 <https://github.com/easybuilders/easybuild-easyblocks/pull/1601> `_ ) * various bug fixes, including: * make FDTD_Solutions easyblock do the install by copying files instead of ' ``rpm rebuild`` ' ( `#1307 <https://github.com/easybuilders/easybuild-easyblocks/pull/1307> `_ ) * re-add missing ``VT_(S)LIB_DIR`` env variable to itac module ( `#1309 <https://github.com/easybuilders/easybuild-easyblocks/pull/1309> `_ ) * fix in QuantumESPRESSO easyblock: ifort compiler needs ``-assume byterecl`` ( `#1556 <https://github.com/easybuilders/easybuild-easyblocks/pull/1556> `_ ) * extract targets from buildopts in Quantumespresso easyblock ( `#1558 <https://github.com/easybuilders/easybuild-easyblocks/pull/1558> `_ ) * fixes for TensorFlow easyblock ( `#1559 <https://github.com/easybuilders/easybuild-easyblocks/pull/1559> `_ ) * pass ``$PYTHONPATH`` while building TensorFlow * disable cross-compilation mode if optarch is set * fix sanity check for installing TensorFlow as extension * added a test to disable compiling FFTW with MPI if the toolchain does not support MPI ( `#1562 <https://github.com/easybuilders/easybuild-easyblocks/pull/1562> `_ ) * fix permissions problem with CUDA nvvp tar files + correctly handle numactl symlink in LLVM subdir in PGI easyblock ( `#1569 <https://github.com/easybuilders/easybuild-easyblocks/pull/1569> `_ ) * fix TensorFlow test tempdir problem ( `#1572 <https://github.com/easybuilders/easybuild-easyblocks/pull/1572> `_ ) * tweak VMD easyblock so that ``configopts`` don't contain duplicate values (otherwise it fails to rebuild) ( `#1575 <https://github.com/easybuilders/easybuild-easyblocks/pull/1575> `_ ) * fix running netcdf4-python tests to also support installation as extension ( `#1578 <https://github.com/easybuilders/easybuild-easyblocks/pull/1578> `_ ) * added the openmp flags in the linker flags in MUMPS easyblock ( `#1585 <https://github.com/easybuilders/easybuild-easyblocks/pull/1585> `_ ) * avoid hardcoding ``--with-rdma`` configure option in MVAPICH2 easyblock ( `#1586 <https://github.com/easybuilders/easybuild-easyblocks/pull/1586> `_ ) * fix location of path-to-source argument in configure command of ``CMakeMake`` ( `#1591 <https://github.com/easybuilders/easybuild-easyblocks/pull/1591> `_ ) * fix GROMACS use of MKL for non-Intel compilers (e.g. gomkl toolchain) ( `#1596 <https://github.com/easybuilders/easybuild-easyblocks/pull/1596> `_ ) * other changes * inform Hound CI about Python 2 builtins ( `#1604 <https://github.com/easybuilders/easybuild-easyblocks/pull/1604> `_ ) **easyconfigs** * added easyconfigs for new toolchains: ``intel/2018.04`` ( `#7171 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7171> `_ ), ``intel/2019.00`` ( `#7218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7218> `_ ), ``intel/2019.01`` ( `#7219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7219> `_ ) * added example easyconfig files for 36 new software packages: * 4ti2 ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), ARPACK++ ( `#6750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6750> `_ ), CellRanger ( `#7242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7242> `_ ), CharLS ( `#6762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6762> `_ ) cscope ( `#7057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7057> `_ ), ctags ( `#7057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7057> `_ ), datamash ( `#6693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6693> `_ ), dcm2niix ( `#6762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6762> `_ ), DCMTK ( `#6761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6761> `_ ), deepdiff ( `#7109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7109> `_ ), Drake ( `#7182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7182> `_ ), fast5 ( `#7250 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7250> `_ ), gap ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), Gerris ( `#7211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7211> `_ ), GPAW-setups ( `#6984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6984> `_ ), iCount ( `#7080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7080> `_ ), ipyparallel ( `#6797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6797> `_ ), Kratos ( `#7149 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7149> `_ ), LCov ( `#7160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7160> `_ ), libvdwxc ( `#6984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6984> `_ ), libwebp ( `#7065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7065> `_ ), lrslib ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), MuPeXI ( `#6991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6991> `_ ), netMHCpan ( `#6991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6991> `_ ), Normaliz ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), OpenColorIO ( `#7146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7146> `_ ), OpenJPEG ( `#7216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7216> `_ ), PHLAT ( `#7036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7036> `_ ), poppler ( `#7069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7069> `_ ), RECON ( `#7042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7042> `_ ), RepeatMasker ( `#7281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7281> `_ ), TreeMix ( `#7133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7133> `_ ), unrar ( `#7117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7117> `_ ), utf8proc ( `#7083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7083> `_ ), VSEARCH ( `#7153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7153> `_ ), XMDS2 ( `#7121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7121> `_ ) * added additional easyconfigs for various supported software packages, including: * CheMPS2 1.8.8, Clang 6.0.1 + 7.0.0, dask 1.0.0, FFmpeg 4.1, GCC(core) 6.5.0 + 7.4.0, GPAW 1.4.0, HMMER 3.2.1, IPython 7.2.0, ITK 4.13.1, Keras 2.2.4, LLVM 7.0.0, Mothur 1.41.0, MultiQC 1.6, NAMD 2.13, OpenBLAS 0.3.4, OpenMPI 3.1.3 + 4.0.0, PSI4 1.2.1, Qt5 5.11.2, QuantumESPRESSO 6.3, Rust 1.30.1, Spark 2.4.0, Spyder 3.3.1, TensorFlow 1.11.0 + 1.12.0 * minor enhancements, including: * install misc tools for angsd ( `#6995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6995> `_ ) * add libXp component to X11 bundle for GCCcore 6.4.0 ( `#7062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7062> `_ ) * also install shared libraries for LZO ( `#7073 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7073> `_ ) * add extensions to R 3.5.1 easyconfigs: ``gllvm`` ( `#7123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7123> `_ ), ``grpreg`` ( `#7140 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7140> `_ ), ``gamlss`` + ``gamlss.tr`` ( `#7263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7263> `_ ) * install Tk private headers ( `#7155 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7155> `_ ) * add ``File::Next`` extension to Perl 5.28.0 easyconfig ( `#7276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7276> `_ ) * various bug fixes, including: * fix installation of scikit-image 0.13.x by including missing required ``PyWavelets`` extension ( `#7061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7061> `_ ) * add missing dependencies to easyconfig for GC3Pie 2.5.0 ( `#7066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7066> `_ ) * stop setting ignored ' ``full_sanity_check`` ' easyconfig parameter in easyconfigs ( `#7094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7094> `_ ) * add missing checksums in X11/2016* easyconfigs ( `#7095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7095> `_ ) * add missing checksums in X11/2017* easyconfigs ( `#7096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7096> `_ ) * add missing ``cffi`` & ``pycparser`` extensions to recent Python easyconfigs ( `#7105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7105> `_ , `#7118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7118> `_ ) * fix homepage in QuantumESPRESSO easyconfigs ( `#7114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7114> `_ ) * use empty toolchain version in picard easyconfigs to ensure Java dependency is loaded during installation ( `#7116 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7116> `_ ) * fix checksum for ``mgcv`` extension in R 3.5.* easyconfigs ( `#7122 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7122> `_ ) * add missing 'patsy' extension in ARCH easyconfig + switch to using ``PythonBundle`` easyblock ( `#7124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7124> `_ ) * add missing (dummy) sklearn extension in NeuroKit easyconfig ( `#7126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7126> `_ ) * fix order of extensions in recent IPython easyconfigs to make ' ``pip check`` ' pass ( `#7131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7131> `_ ) * fix missing required Python packages in ASE 3.16.2 easyconfigs ( `#7139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7139> `_ ) * fix ``source_urls`` in CP2K easyconfigs (for official releases) ( `#7240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7240> `_ ) * update SCOTCH 6.0.5 easyconfigs in-place to 6.0.6 to fix wrong download URL ( `#7159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7159> `_ ) * add Autotools build dep in patchelf easyconfig ( `#7175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7175> `_ ) * STREAM fixes: use https + versioned source ( `#7193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7193> `_ ) * fix checksum in Molden easyconfig ( `#7251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7251> `_ ) * fix source URL for ADMIXTURE ( `#7258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7258> `_ ) * fix source URLs & versions + build procedure for SKESA ( `#7275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7275> `_ ) * fix checksum for TRF 4.09 ( `#7278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7278> `_ ) * add missing zlib dependency for NSS ( `#7293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7293> `_ ) * add required build deps for QtWebEngine in recent Qt5 easyconfigs ( `#7300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7300> `_ ) * fix ImageMagick source URLs: use ``launchpad.net`` for old versions, switch to GitHub for 7.0.8-* onwards ( `#7301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7301> `_ ) * other changes: * update ``Java/1.8`` wrapper to Java 1.8.0_192 ( `#7097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7097> `_ ) * don't enable ``optarch`` toolchain option in VCFtools easyconfigs, since it's enabled by default ( `#7106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7106> `_ ) * stop using lowopt in libxc 4.2.3 easyconfigs ( `#7115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7115> `_ ) * deprecate easyconfigs for ``ictce`` toolchains + ``intel`` toolchains older than ``intel/2016a`` ( `#7231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7231> `_ ) * deprecate easyconfigs for ``goolf(c)`` + corresponding ``gompi(c)`` subtoolchains ( `#7243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7243> `_ ) .. _release_notes_eb371: EasyBuild v3.7.1 (October 18th 2018) ------------------------------------ bugfix/update release **framework** - various enhancements, including: - generate ``.modulerc.lua`` when Lua syntax and Lmod >= 7.8 is used ( `#2597 <https://github.com/easybuilders/easybuild-framework/pull/2597> `_ ) - allow ``--force`` to use regex if ``--try-toolchain`` can not map intelligently ( `#2605 <https://github.com/easybuilders/easybuild-framework/pull/2605> `_ ) - add support for disabling modules tool version check ( `#2610 <https://github.com/easybuilders/easybuild-framework/pull/2610> `_ ) - add support to ``ModuleGenerator.modulerc`` method to also write ``.modulerc`` file ( `#2611 <https://github.com/easybuilders/easybuild-framework/pull/2611> `_ ) - check whether module file being wrapped exists in same directory as module wrapper when using Lmod 6.x ( `#2611 <https://github.com/easybuilders/easybuild-framework/pull/2611> `_ ) - various bug fixes, including: - stop relying on ' ``easy_install`` ' in bootstrap script, use ' ``python -m easy_install`` ' instead ( `#2590 <https://github.com/easybuilders/easybuild-framework/pull/2590> `_ ) - fix templating of values in ``list_software`` function ( `#2591 <https://github.com/easybuilders/easybuild-framework/pull/2591> `_ ) - fix composing of ``lib64`` fallback paths in sanity check ( `#2602 <https://github.com/easybuilders/easybuild-framework/pull/2602> `_ ) - determine ``file_info`` for all easyconfigs before any actual copying in ``copy_easyconfigs`` function ( `#2604 <https://github.com/easybuilders/easybuild-framework/pull/2604> `_ ) - also check for module wrappers in ``ModulesTool.exist`` method ( `#2606 <https://github.com/easybuilders/easybuild-framework/pull/2606> `_ ) - add trailing newline to module load message if it's not there yet ( `#2613 <https://github.com/easybuilders/easybuild-framework/pull/2613> `_ ) - retain all dependencies when determining dependency tree of a toolchain ( `#2617 <https://github.com/easybuilders/easybuild-framework/pull/2617> `_ ) - protect ``exts_lists`` from templating in ``dump`` method ( `#2619 <https://github.com/easybuilders/easybuild-framework/pull/2619> `_ ) - making CUDA capability detection more robust ( `#2621 <https://github.com/easybuilders/easybuild-framework/pull/2621> `_ ) - other changes: - lower required Lmod version to 6.5.1 ( `#2593 <https://github.com/easybuilders/easybuild-framework/pull/2593> `_ ) **easyblocks** - new software specific easyblocks for fastStructure ( `#1529 <https://github.com/easybuilders/easybuild-easyblocks/pull/1529> `_ ) - minor enhancements, including: - support bypassing use of system type obtained with recent ``config.guess`` in ``ConfigureMake`` ( `#1531 <https://github.com/easybuilders/easybuild-easyblocks/pull/1531> `_ ) - enhance generated module file for FreeSurfer ( `#1543 <https://github.com/easybuilders/easybuild-easyblocks/pull/1543> `_ ) - add option in Qt easyblock to check for QtWebEngine component in sanity check ( `#1544 <https://github.com/easybuilders/easybuild-easyblocks/pull/1544> `_ ) - also install CP2K as a library + code cleanup in CP2K easyblock ( `#1547 <https://github.com/easybuilders/easybuild-easyblocks/pull/1547> `_ ) - various bug fixes, including: - fix checking for downloaded dependencies for stand-alone installations in ``PythonPackage`` generic easyblock ( `#1530 <https://github.com/easybuilders/easybuild-easyblocks/pull/1530> `_ ) - also specify ``--host`` option to configure script based on config.guess result in ``ConfigureMake`` easyblock ( `#1532 <https://github.com/easybuilders/easybuild-easyblocks/pull/1532> `_ ) - use short module name when creating module wrapper in ``ModuleRC`` generic easyblock ( `#1535 <https://github.com/easybuilders/easybuild-easyblocks/pull/1535> `_ ) - use ``DOT_MODULERC`` constant in ``ModuleRC`` easyblock rather than hardcoding ' ``.modulerc`` ' ( `#1533 <https://github.com/easybuilders/easybuild-easyblocks/pull/1533> `_ ) - use ``--no-deps`` when installing .whl in TensorFlow easyblock if extension are being installed, move test run to sanity check ( `#1537 <https://github.com/easybuilders/easybuild-easyblocks/pull/1537> `_ ) - use ``os.getcwd()`` rather than ``self.startdir`` in TensorFlow easyblock to fix installation of TensorFlow as extension in a bundle ( `#1540 <https://github.com/easybuilders/easybuild-easyblocks/pull/1540> `_ ) - add symlink to wrapped module file when creating ``.modulerc`` in temporary location ( `#1539 <https://github.com/easybuilders/easybuild-easyblocks/pull/1539> `_ ) - properly handle Python dependency in Qscintilla easyblock ( `#1499 <https://github.com/easybuilders/easybuild-easyblocks/pull/1499> `_ ) - other changes: - cleanup Tarball easyblock by using ``copy_dir`` function ( `#1541 <https://github.com/easybuilders/easybuild-easyblocks/pull/1541> `_ ) **easyconfigs** - added easyconfigs for new toolchain ``foss/2018.08`` with GCC/8.2.0 ( `#6992 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6992> `_ ) - added example easyconfig files for 26 new software packages: - ARCH ( `#6939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6939> `_ ), fbm ( `#6948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6948> `_ ), GenomeTester4 ( `#6970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6970> `_ ), GlobusConnectPersonal ( `#6974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6974> `_ ), MMseqs2 ( `#6964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6964> `_ ), NAG ( `#5772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5772> `_ ), NAGfor ( `#5772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5772> `_ ), NSPR ( `#7005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7005> `_ ), NSS ( `#7005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7005> `_ ), NeuroKit ( `#6947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6947> `_ ), novoalign ( `#6944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6944> `_ ), OptiType ( `#6924 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6924> `_ ), OrthoFinder ( `#6964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6964> `_ ), pandas-datareader ( `#6938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6938> `_ ), pFUnit ( `#6949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6949> `_ ), PMIx ( `#6930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6930> `_ ), PSolver ( `#6888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6888> `_ ), PyDatastream ( `#6951 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6951> `_ ), PyFR ( `#6846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6846> `_ ), Pyomo ( `#6910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6910> `_ ), Quandl ( `#6950 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6950> `_ ), RTG-Tools ( `#6862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6862> `_ ), seq2HLA ( `#6969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6969> `_ ), suds ( `#6951 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6951> `_ ), UCX ( `#6931 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6931> `_ ), XMLSec ( `#6929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6929> `_ ) - added additional easyconfigs for various supported software packages, including: - binutils 2.31.1, dask 0.19.4, GCC(core) 8.2.0, OpenBLAS 0.3.3, OpenMPI 3.1.2, Pillow 5.3.0, PyCUDA 2018.1 - minor enhancements, including: - add clustree + plotly extensions (+ deps) for R 3.5.1 ( `#6901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6901> `_ ) - add tclsh symlink to recent Tcl easyconfigs ( `#6915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6915> `_ ) - update GROMACS 2016.3 with NVML patches ( `#6936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6936> `_ ) - use ``make=make`` in build options for ParMGridGen easyconfigs ( `#6952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6952> `_ ) - add ``Data::Dump`` as extension to Perl (dependency for GIMIC) ( `#7004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7004> `_ ) - various bug fixes, including: - inhibit ``-Werror`` in binutils 2.26 as new system GCC has case fallthrough warnings ( `#5793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5793> `_ ) - change fastStructure easyconfig to use custom easyblock ( `#6893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6893> `_ ) - fix toolchain for tbb dependency in ``Bowtie2-2.3.4.2-foss-2018b.eb`` ( `#6927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6927> `_ ) - fix uroot installation in R-3.5.1-foss-2018b ( `#6934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6934> `_ ) - add missing Python packages in TensorFlow 1.10.x easyconfigs ( `#6940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6940> `_ ) - add missing dep for Szip in 2017b builds of netCDF ( `#6942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6942> `_ ) - fix missing comment from ``OpenBabel-2.4.1-fix-link-path-tests.patch`` ( `#6943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6943> `_ ) - add patch to Python 3.6.1 - 3.6.3 that removes comment in comment ( `#6946 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6946> `_ ) - add missing ``ulimit_unlimited=True`` (see issue `#6484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6484> `_ ) in the newest Python builds ( `#6959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6959> `_ ) - solve ' ``version UUID_1.0 not found`` ' problem in LibUUID easyconfigs ( `#6962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6962> `_ ) - eliminate dependency on ancient problematic LibUUID library, replace with util-linux ( `#6963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6963> `_ ) - force building of ``ccmake`` for CMake 3.12.1 + fix deps ( `#6967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6967> `_ ) - fix broken installation for Python 3.6.2 & 3.6.3 with PyNaCl as dep for paramiko extension by explicitly including previous PyNaCl version as extension ( `#6971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6971> `_ ) - fix source URL for ADMIXTURE (no https) + add SHA256 checksum ( `#6982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6982> `_ ) - add missing NSS/DBus dependencies to Qt 5.10.1 easyconfigs built with foss toolchain to ensure that QtWebEngine component gets installed ( `#7005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7005> `_ ) - add ' ``openssl`` ' OS deps in Perl 5.28.0 easyconfig for ``Net::ssleay`` ( `#7008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7008> `_ ) - add missing checksum for ipaddress extension in Python easyconfigs ( `#7021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7021> `_ and `#7033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7033> `_ ) - add missing extensions to Python 2.7.14 ( `#7022 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7022> `_ and `#7023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7023> `_ ), 3.6.2 ( `#7025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7025> `_ ), 3.6.3 ( `#7027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7027> `_ ) and 3.6.4 ( `#7029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7029> `_ and `#7030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7030> `_ ) - add missing OS dependencies for git ( `#7028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7028> `_ ) - create default configuration for RTG-Tools ( `#7032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7032> `_ ) - also run checks on changed files when target branch for PR is something different than 'develop' ( `#7034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7034> `_ ) - other changes: - removed dead 'bzip.org' source URL for bzip2 source tarball ( `#6983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6983> `_ ) .. _release_notes_eb370: EasyBuild v3.7.0 (September 25th 2018) -------------------------------------- feature release **framework** - minimal Lmod version requirement bumped to 6.6.3 ( `#2575 <https://github.com/easybuilders/easybuild-framework/pull/2575> `_ ) - various enhancements, including: - add support to bootstrap script to force install specific EasyBuild version ( `#2382 <https://github.com/easybuilders/easybuild-framework/pull/2382> `_ , `#2580 <https://github.com/easybuilders/easybuild-framework/pull/2580> `_ ) - consider potential of multiple subtoolchains when resolving dependencies ( `#2464 <https://github.com/easybuilders/easybuild-framework/pull/2464> `_ , `#2465 <https://github.com/easybuilders/easybuild-framework/pull/2465> `_ , `#2466 <https://github.com/easybuilders/easybuild-framework/pull/2466> `_ , `#2585 <https://github.com/easybuilders/easybuild-framework/pull/2585> `_ ) - fall back to downloading using the ``requests`` Python package (if installed) when ``urllib2`` fails due to SSL error ( `#2538 <https://github.com/easybuilders/easybuild-framework/pull/2538> `_ ) - make ``--try-toolchain`` more aware of subtoolchains ( `#2539 <https://github.com/easybuilders/easybuild-framework/pull/2539> `_ ) - subtoolchain of original toolchains are now mapped to subtoolchains of target toolchain - add support for BLIS and goblf toolchain that uses BLIS for BLAS ( `#2540 <https://github.com/easybuilders/easybuild-framework/pull/2540> `_ ) - allow skipping of sanity check step via ' ``skipsteps`` ' easyconfig parameter ( `#2549 <https://github.com/easybuilders/easybuild-framework/pull/2549> `_ ) - add support for ``--check-contrib`` ( `#2551 <https://github.com/easybuilders/easybuild-framework/pull/2551> `_ ) - equivalent with ``--check-style`` , but also verifies presence of SHA256 checksums (+ more checks in the future) - added support to 'download' sources from git ( `#2555 <https://github.com/easybuilders/easybuild-framework/pull/2555> `_ ) - see https://easybuild.readthedocs.io/en/latest/Writing_easyconfig_files.html#downloading-from-a-git-repository - add ' ``parse`` ' hook to add support for applying site-specific customisations to the 'raw' easyconfig ( `#2562 <https://github.com/easybuilders/easybuild-framework/pull/2562> `_ , `#2566 <https://github.com/easybuilders/easybuild-framework/pull/2566> `_ ) - see https://easybuild.readthedocs.io/en/develop/Hooks.html - lift invalidating of module caches into helper method that can be used by easyblocks ( `#2571 <https://github.com/easybuilders/easybuild-framework/pull/2571> `_ ) - always dump a fully parsed easyconfig to the ' ``reprod`` ' subdir of the installation directory ( `#2574 <https://github.com/easybuilders/easybuild-framework/pull/2574> `_ ) - add ' ``modulerc`` ' method to ``ModuleGenerator`` class ( `#2575 <https://github.com/easybuilders/easybuild-framework/pull/2575> `_ ) - various bug fixes, including: - make GC3Pie stop build process if a dependency failed ( `#2474 <https://github.com/easybuilders/easybuild-framework/pull/2474> `_ ) - filter out patched files in test/ in ``fetch_easyconfigs_from_pr`` ( `#2547 <https://github.com/easybuilders/easybuild-framework/pull/2547> `_ ) - check GC3pie version using the ``pkg_resources`` API rather than using ``__version__`` (which was removed in GC3Pie 2.5.0) ( `#2554 <https://github.com/easybuilders/easybuild-framework/pull/2554> `_ ) - fix enforcing of checksums for extensions ( `#2561 <https://github.com/easybuilders/easybuild-framework/pull/2561> `_ , `#2570 <https://github.com/easybuilders/easybuild-framework/pull/2570> `_ , `#2579 <https://github.com/easybuilders/easybuild-framework/pull/2579> `_ ) - skip running of configuration checks while only a single configuration level is taken into account during ``--show-config`` ( `#2567 <https://github.com/easybuilders/easybuild-framework/pull/2567> `_ ) - fix error statements in modules tool version checks ( `#2576 <https://github.com/easybuilders/easybuild-framework/pull/2576> `_ ) - fix finding of software subdirectory for specified patch file in ``--new-pr`` / ``--update-pr`` ( `#2577 <https://github.com/easybuilders/easybuild-framework/pull/2577> `_ ) - take into account dependency 'wrappers' in check_conflicts ( `#2583 <https://github.com/easybuilders/easybuild-framework/pull/2583> `_ ) - stick to pycparser < 2.19 with Python 2.6 in Travis config ( `#2584 <https://github.com/easybuilders/easybuild-framework/pull/2584> `_ ) - other changes: - use ``namelower`` as default for ' ``github_account`` ' easyconfig parameter ( `#2528 <https://github.com/easybuilders/easybuild-framework/pull/2528> `_ ) - use ``.counts()`` rather than deprecated ``.stats()`` for GC3Pie ( `#2573 <https://github.com/easybuilders/easybuild-framework/pull/2573> `_ ) **easyblocks** - new generic easyblock: ``ModuleRC`` ( `#1503 <https://github.com/easybuilders/easybuild-easyblocks/pull/1503> `_ , `#1518 <https://github.com/easybuilders/easybuild-easyblocks/pull/1518> `_ ) - new software specific easyblocks for BWISE ( `#1497 <https://github.com/easybuilders/easybuild-easyblocks/pull/1497> `_ ) and VEP ( `#1512 <https://github.com/easybuilders/easybuild-easyblocks/pull/1512> `_ ) - minor enhancements, including: - update QuantumESPRESSO easyblock: stop building in installation dir, do not use external FoX dependency, support for recent versions ( `#1312 <https://github.com/easybuilders/easybuild-easyblocks/pull/1312> `_ ) - updates to TensorFlow easyblock: - require cuDNN if CUDA support is enabled, enable mkl-dnn by default, fix problem with internal protobuf problem, add awareness for TensorRT & NCCL ( `#1453 <https://github.com/easybuilders/easybuild-easyblocks/pull/1453> `_ ) - add support for IntelMPI ( `#1507 <https://github.com/easybuilders/easybuild-easyblocks/pull/1507> `_ ) - update WIEN2k easyblock for version 18.1 ( `#1460 <https://github.com/easybuilders/easybuild-easyblocks/pull/1460> `_ ) - add CUDA ' ``stubs`` ' subdirectory to $LIBRARY_PATH ( `#1464 <https://github.com/easybuilders/easybuild-easyblocks/pull/1464> `_ ) - add support for building ScaLAPACK on top of BLIS ( `#1467 <https://github.com/easybuilders/easybuild-easyblocks/pull/1467> `_ ) - handle X11 better and make ' ``static`` ' a build flag in Amber easyblock ( `#1468 <https://github.com/easybuilders/easybuild-easyblocks/pull/1468> `_ ) - update Boost easyblock for Boost 1.67.0 (name change in Python 3.x library files) ( `#1472 <https://github.com/easybuilders/easybuild-easyblocks/pull/1472> `_ ) - add CEI/bin to $PATH for ANSYS 19 & newer ( `#1476 <https://github.com/easybuilders/easybuild-easyblocks/pull/1476> `_ ) - enhance SCons easyblock to enable building in parallel ( `#1477 <https://github.com/easybuilders/easybuild-easyblocks/pull/1477> `_ ) - add awareness for CCOLAMD and CAMD in Trilinos easyblock ( `#1480 <https://github.com/easybuilders/easybuild-easyblocks/pull/1480> `_ ) - add support to apply (binary) patches after main CUDA install ( `#1481 <https://github.com/easybuilders/easybuild-easyblocks/pull/1481> `_ , `#1483 <https://github.com/easybuilders/easybuild-easyblocks/pull/1483> `_ ) - add support for only building Python bindings (+ code cleanup) in Boost easyblock ( `#1484 <https://github.com/easybuilders/easybuild-easyblocks/pull/1484> `_ , `#1495 <https://github.com/easybuilders/easybuild-easyblocks/pull/1495> `_ ) - provide control over subdirectory in which R packages are installed ( `#1485 <https://github.com/easybuilders/easybuild-easyblocks/pull/1485> `_ ) - added regex to fix ``$WM_PROJECT_VERSION`` correctly in OpenFOAM easyblock ( `#1489 <https://github.com/easybuilders/easybuild-easyblocks/pull/1489> `_ ) - improve PGI siterc so it allows ``-pthread`` switch ( `#1494 <https://github.com/easybuilders/easybuild-easyblocks/pull/1494> `_ ) - customise ``check_checksums method`` in Bundle easyblock to fix checking of checksums for components ( `#1496 <https://github.com/easybuilders/easybuild-easyblocks/pull/1496> `_ ) - include a pkgconfig file ' ``hdf5.pc`` ' to HDF5 installations ( `#1504 <https://github.com/easybuilders/easybuild-easyblocks/pull/1504> `_ ) - (download &) use an updated ``config.guess`` script in generic ConfigureMake easyblock ( `#1506 <https://github.com/easybuilders/easybuild-easyblocks/pull/1506> `_ , `#1522 <https://github.com/easybuilders/easybuild-easyblocks/pull/1522> `_ , `#1523 <https://github.com/easybuilders/easybuild-easyblocks/pull/1523> `_ , `#1524 <https://github.com/easybuilders/easybuild-easyblocks/pull/1524> `_ ) - make ``IntelBase`` generic easyblock aware of ``(pre)installopts`` ( `#1509 <https://github.com/easybuilders/easybuild-easyblocks/pull/1509> `_ ) - update Siesta easyblock for v3.2 to 4.1-b3 ( `#1510 <https://github.com/easybuilders/easybuild-easyblocks/pull/1510> `_ ) - take ``(pre)installopts`` into account in RPackage generic easyblock ( `#1513 <https://github.com/easybuilders/easybuild-easyblocks/pull/1513> `_ ) - update DOLFIN easyblock for latest version ( `#2018 <https://github.com/easybuilders/easybuild-easyblocks/pull/2018> `_ .1) ( `#1521 <https://github.com/easybuilders/easybuild-easyblocks/pull/1521> `_ ) - various bug fixes, including: - drop useless definition of ``$NLSPATH`` in ``IntelBase`` + fix ipp library paths ( `#1442 <https://github.com/easybuilders/easybuild-easyblocks/pull/1442> `_ ) - fix order of arguments in log message in ``PythonPackage`` easyblock ( `#1459 <https://github.com/easybuilders/easybuild-easyblocks/pull/1459> `_ ) - run ``ldconfig`` in post-install step of CUDA easyblock to create missing symlinks in 'stubs' subdirectory ( `#1473 <https://github.com/easybuilders/easybuild-easyblocks/pull/1473> `_ ) - take into account that only name/version may be specified for some components in ``Bundle`` easyblock ( `#1474 <https://github.com/easybuilders/easybuild-easyblocks/pull/1474> `_ ) - make SuperLU easyblock consider both ``lib`` and ``lib64`` subdirectories ( `#1479 <https://github.com/easybuilders/easybuild-easyblocks/pull/1479> `_ ) - use short build dir for Trilinos to dance around \" ``Argument list too long`` \" problem + link with ``libmetis.a`` ( `#1486 <https://github.com/easybuilders/easybuild-easyblocks/pull/1486> `_ ) - correct check for Red Hat 6 based OS in TensorFlow easyblock ( `#1487 <https://github.com/easybuilders/easybuild-easyblocks/pull/1487> `_ ) - improve configuration choice in FSL easyblock ( `#1498 <https://github.com/easybuilders/easybuild-easyblocks/pull/1498> `_ ) - don't check for ``mcc`` in MATLAB sanity check as it requires a specific toolbox license ( `#1514 <https://github.com/easybuilders/easybuild-easyblocks/pull/1514> `_ ) - make sure Bazel doesn't write files in $HOME/.cache when building TensorFlow ( `#1519 <https://github.com/easybuilders/easybuild-easyblocks/pull/1519> `_ ) - enable VSX on POWER for FFTW >= 3.3.7 ( `#1520 <https://github.com/easybuilders/easybuild-easyblocks/pull/1520> `_ ) - add ``librt`` as dependency when linking Trilinos with SuiteSparse ( `#1525 <https://github.com/easybuilders/easybuild-easyblocks/pull/1525> `_ ) - other changes: - switch to using CMake install procedure for Eigen 3.3.4 & newer ( `#1482 <https://github.com/easybuilders/easybuild-easyblocks/pull/1482> `_ ) - bump Lmod version used in Travis config to 6.6.3 (now required by framework) ( `#1505 <https://github.com/easybuilders/easybuild-easyblocks/pull/1505> `_ ) **easyconfigs** - added easyconfigs for new toolchains: ``fosscuda/2017b`` ( `#6706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6706> `_ ), ``intelcuda/#2017b`` ( `#6709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6709> `_ ), ``iomkl/2018b`` ( `#6661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6661> `_ ) - added example easyconfig files for 49 new software packages: - alleleCount ( `#6676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6676> `_ ), BCALM ( `#6796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6796> `_ ), BDBag ( `#6672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6672> `_ ), BFC ( `#6647 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6647> `_ ), Bio-DB-HTS ( `#6854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6854> `_ ), bioawk ( `#6865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6865> `_ ), biomart-perl ( `#6745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6745> `_ ), BLIS ( `#6614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6614> `_ ), Boost.Python ( `#6763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6763> `_ ), BWISE ( `#6802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6802> `_ ), CapnProto ( `#6542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6542> `_ ), CaVEMan ( `#6708 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6708> `_ ), CCL ( `#5802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5802> `_ ), cDNA_Cupcake ( `#6787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6787> `_ ), cget ( `#6780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6780> `_ ), coevol ( `#6589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6589> `_ , `#6642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6642> `_ ), Delly ( `#6735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6735> `_ ), earthengine-api ( `#6556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6556> `_ ), fineRADstructure ( `#6586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6586> `_ ), GIMIC ( `#6575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6575> `_ ), GitPython ( `#6850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6850> `_ ), HiC-Pro ( `#5873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5873> `_ ), Inelastica ( `#6831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6831> `_ ), JAXFrontCE ( `#6837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6837> `_ ), jq ( `#6632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6632> `_ ), KAT ( `#6808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6808> `_ ), KMC ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), Kraken2 ( `#6569 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6569> `_ ), Lighter ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), Mash ( `#6542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6542> `_ ), MetaPhlAn2 ( `#6600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6600> `_ ), Minimac4 ( `#6781 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6781> `_ ), mordecai ( `#6670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6670> `_ ), NCCL ( `#5802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5802> `_ ), NxTrim ( `#6646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6646> `_ ), parasail ( `#6601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6601> `_ ), PheWAS ( `#6030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6030> `_ ), Pilon ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), python-parasail ( `#6601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6601> `_ ), SearchGUI ( `#6637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6637> `_ ), shovill ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), SKESA ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), snakemake ( `#6851 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6851> `_ ), strelka ( `#6742 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6742> `_ ), SWIPE ( `#6795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6795> `_ ), ToFu ( `#6322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6322> `_ ), tqdm ( `#6721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6721> `_ ), TRUST ( `#6601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6601> `_ ), VEP ( `#6854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6854> `_ ) - added additional easyconfigs for various supported software packages, including: - Bazel 0.16.0, Boost 1.67.0 + 1.68.0, CUDA 10.0.1, DOLFIN (FEniCS) 2018.1, FSL 5.0.11, GC3Pie 2.5.0, GROMACS 2018.3, HTSlib + SAMtools 1.9, IPython 6.4.0, matplotlib 3.0.0, OpenCoarrays 2.2.0, OpenFOAM 6 & v1806, PyTorch 0.4.1, Python 3.6.6, R 3.5.1, TensorFlow 1.10.1, Trilinos 12.12.1, WIEN2k 18.1 - minor enhancements, including: - add test to enforce SHA256 checksums in touched files in pull requests to develop ( `#5005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5005> `_ ) - add various extensions to recent R easyconfigs ( `#6590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6590> `_ , `#6686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6686> `_ , `#6858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6858> `_ ) - add ``mpmath`` extension to Python 3.6.4 + 3.7.0 easyconfigs ( `#6607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6607> `_ , `#6713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6713> `_ ) - add Java 1.8 easyconfig that can be updated in-place to more recent JDK 1.8.x ( `#6712 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6712> `_ ) - see also https://easybuild.readthedocs.io/en/latest/Wrapping_dependencies.html - add ``iso_c_binding`` support to arpack-ng 3.6.2 ( `#6718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6718> `_ ) - add ``XML::Parser`` , ``XML::RegExp`` & ``XML::DOM`` extensions to Perl( `#6744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6744> `_ ) - add ``tabulate`` extension to all Python > 3.6 easyconfigs ( `#6809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6809> `_ ) - enable MPI version of arpack-ng 3.5.0 ( `#6840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6840> `_ ) - add ``wish`` symlink to ``wish8.6`` in recent Tk easyconfigs ( `#6870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6870> `_ ) - add ``libXp`` and ``printproto`` to X11 bundle ( `#6873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6873> `_ ) - various bug fixes, including: - define ' ``_GNU_SOURCE`` ' to ensure that ' ``reallocarray`` ' is defined in flex 2.6.4 easyconfigs, fixes bootstrap crash ( `#5792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5792> `_ , `#6766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6766> `_ ) - added tabix dependency in VCFtools ( `#6584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6584> `_ ) - added zlib dependency to BWA ( `#6591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6591> `_ ), BEDTools ( `#6592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6592> `_ ), VCFtools ( `#6653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6653> `_ ) - add checksums to googletest easyconfigs ( `#6611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6611> `_ ) - fix source URL + add checksum to wkhtmltopdf-0.12.3-Linux-x86_64.eb ( `#6628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6628> `_ , `#6641 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6641> `_ ) - don't use external FoX dependency in QuantumESPRESSO 6.2 ( `#6638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6638> `_ ) - update hwloc easyconfigs with libxml2 and libpciaccess dependencies ( `#6639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6639> `_ ) - fix gettext build dep for Mono-5.10.0.160 ( `#6640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6640> `_ ) - remove no longer existing config option ``--enable-mpi-thread-multiple`` in OpenMPI 3.x easyconfigs ( `#6645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6645> `_ ) - fix homepage in recent HDF5 easyconfigs ( `#6687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6687> `_ ) - add expat dependency to Mesa v18.1.1 ( `#6706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6706> `_ ) - add missing ``--with-trio-flavor=netcdf`` flag to ABINIT 8.x easyconfigs ( `#6711 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6711> `_ ) - remove useless definition of $TORCH_CUDA_ARCH_LIST in PyTorch easyconfig that doesn't use CUDA ( `#6719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6719> `_ ) - fix building GCCcore 6.3.0 on recent OSs by backporting patches from 6.4.0 ( `#6727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6727> `_ ) - fix ``source_urls`` in bzip2 easyconfigs ( `#6728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6728> `_ ) - specify location of dependencies in configure options for libgd (to avoid system libraries being used instead) ( `#6731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6731> `_ ) - also install docs/man pages in recent git easyconfigs (versions 2.1x.y) ( `#6751 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6751> `_ ) - add CMake build dep for Eigen 3.3.4 ( `#6756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6756> `_ , `#6784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6784> `_ ) - add expat dependency to Perl 5.26.0 ( `#6758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6758> `_ ) - add ncurses OS dependency to CMake for Debian distros ( `#6783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6783> `_ ) - fix checksums for pkgmaker, rngtools & RcppProgress extensions in R 3.4.3 easyconfigs ( `#6815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6815> `_ ) - add pkg-config build dependency to GTS ( `#6819 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6819> `_ ) - do not check if hwloc-dump-hwdata utility was installed, since it's only built on x86 systems ( `#6836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6836> `_ ) - patch libxc 3.x and 4.0.x to compile on POWER ( `#6868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6868> `_ ) - consistently add patch for paycheck extension in Python 3.6/3.7 to fix UTF8 issue with README ( `#6892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6892> `_ ) - other changes: - bump Lmod version used in Travis config to 6.6.3 (now required by framework) ( `#6834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6834> `_ ) .. _release_notes_eb362: EasyBuild v3.6.2 (July 11th 2018) --------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for including environment variable that is resolved at \"module load time\" in user module path ( `#2395 <https://github.com/easybuilders/easybuild-framework/pull/2395> `_ ) * ``{RUNTIME_ENV::EXAMPLE}`` is replaced by value of ``$EXAMPLE`` when module is loaded * also support generating Docker container recipes & image via ``--containerize`` (still experimental) ( `#2479 <https://github.com/easybuilders/easybuild-framework/pull/2479> `_ ) * add support for specifying source URLs directly in ' ``sources`` ' ( `#2520 <https://github.com/easybuilders/easybuild-framework/pull/2520> `_ ) * perform early 'raw' parse of provided easyconfig file to check for syntax error or faulty inputs ( `#2523 <https://github.com/easybuilders/easybuild-framework/pull/2523> `_ ) * add ' ``bitbucket_account`` ' easyconfig parameter and template, and let ``BITBUCKET*`` templates use it ( `#2525 <https://github.com/easybuilders/easybuild-framework/pull/2525> `_ ) * various bug fixes, including: * take into account ``--filter-deps`` when re-loading build dependencies in ``extensions_step`` ( `#2516 <https://github.com/easybuilders/easybuild-framework/pull/2516> `_ ) * fix for offline use of bootstrap script: ignore errors when determining source URLs if source tarballs are provided ( `#2517 <https://github.com/easybuilders/easybuild-framework/pull/2517> `_ ) * fix error message that is raised for incorrect type of value in ``sanity_check_paths`` ( `#2524 <https://github.com/easybuilders/easybuild-framework/pull/2524> `_ ) * other changes: * move flake8 config into ``setup.cfg`` + fix style issues in ``easybuild/tools/options.py`` ( `#2511 <https://github.com/easybuilders/easybuild-framework/pull/2511> `_ ) * make test that verifies that ``BuildOptions`` does not support updating a bit more flexible ( `#2518 <https://github.com/easybuilders/easybuild-framework/pull/2518> `_ ) **easyblocks** * new software-specific easyblock for OpenCV ( `#1444 <https://github.com/easybuilders/easybuild-easyblocks/pull/1444> `_ ) * minor enhancements, including: * use ``$CPATH`` / ``$LD_LIBRARY_PATH`` for CMake's ``find_path`` / ``find_library`` functions in ``CMakeMake`` easyblock ( `#1165 <https://github.com/easybuilders/easybuild-easyblocks/pull/1165> `_ ) * make cdft lib compilation optional for Intel MKL, by detecting MPI availability ( `#1393 <https://github.com/easybuilders/easybuild-easyblocks/pull/1393> `_ ) * add ``use_glibcxx11_abi`` easyconfig parameter in Boost easyblock ( `#1434 <https://github.com/easybuilders/easybuild-easyblocks/pull/1434> `_ ) * enable filtering of paths in ``$CPATH`` and ``$LIBRARY_PATH`` in TensorFlow easyblock ( `#1436 <https://github.com/easybuilders/easybuild-easyblocks/pull/1436> `_ ) * add support for building GROMACS with ``--optarch=GENERIC`` ( `#1440 <https://github.com/easybuilders/easybuild-easyblocks/pull/1440> `_ ) * check current stack limit and set it to ' ``unlimited`` ' if possible in Python easyblock ( `#1441 <https://github.com/easybuilders/easybuild-easyblocks/pull/1441> `_ ) * trivial update for Q&A in SAS easyblock ( `#1448 <https://github.com/easybuilders/easybuild-easyblocks/pull/1448> `_ ) * allow skipping tests when installing Perl extensions, by setting ' ``runtest`` ' to ``False`` ( `#1451 <https://github.com/easybuilders/easybuild-easyblocks/pull/1451> `_ ) * add support for installing Intel products using serial numbers ( `#1452 <https://github.com/easybuilders/easybuild-easyblocks/pull/1452> `_ ) * update version check to FFTW 3.3.8 for tests to pass on POWER (ppc64le) ( `#1454 <https://github.com/easybuilders/easybuild-easyblocks/pull/1454> `_ ) * various bug fixes, including: * build MPFR in GCC stage 1 without LTO if (system) GCC used is too old ( `#1435 <https://github.com/easybuilders/easybuild-easyblocks/pull/1435> `_ ) * make sure xmlpatterns always gets built with Qt ( `#1437 <https://github.com/easybuilders/easybuild-easyblocks/pull/1437> `_ ) * fix symlink check in NWChem easyblock + use ``change_dir`` / ``remove_file`` / ``symlink`` functions ( `#1438 <https://github.com/easybuilders/easybuild-easyblocks/pull/1438> `_ ) * other changes: * move flake8 configuration to ``setup.cfg`` and make HoundCI aware of it ( `#1430 <https://github.com/easybuilders/easybuild-easyblocks/pull/1430> `_ ) **easyconfigs** * added easyconfigs for new toolchains: ``foss/2018b`` ( `#6424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6424> `_ ), ``fosscuda/2018b`` ( `#6555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6555> `_ ) and ``intel/2018b`` ( `#6409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6409> `_ ) * added example easyconfig files for 28 new software packages: * CUnit ( `#6469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6469> `_ ), eggnog-mapper ( `#6513 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6513> `_ ), FANN ( `#6468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6468> `_ ), FTGL ( `#6421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6421> `_ ), FreeFem++ ( `#5918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5918> `_ ), fastStructure ( `#6448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6448> `_ ), fastq-tools ( `#5396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5396> `_ ), fullrmc ( `#6422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6422> `_ ), GDGraph ( `#6529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6529> `_ ), heaptrack ( `#6450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6450> `_ ), libgpuarray ( `#5429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5429> `_ ), lz4 ( `#6449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6449> `_ ), MAJIQ ( `#5983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5983> `_ ), makedepf90 ( `#6504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6504> `_ ), nanopolish ( `#6464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6464> `_ ), opencv_contrib ( `#6441 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6441> `_ ), PRC ( `#6477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6477> `_ ), Pillow-SIMD ( `#6152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6152> `_ ), Pytorch ( `#6152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6152> `_ ), poretools ( `#6467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6467> `_ ), pystran ( `#6395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6395> `_ ), R-keras ( `#6530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6530> `_ ), Scoary ( `#6521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6521> `_ ), Scrappie ( `#6469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6469> `_ ), torchvision ( `#6152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6152> `_ ), WISExome ( `#6524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6524> `_ ), WannierTools ( `#6539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6539> `_ ), zstd ( `#6449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6449> `_ , `#6452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6452> `_ ) * added additional easyconfigs for various supported software packages, including: * GROMACS 2018.2, HDF5 1.10.2, IPython 6.3.1, Kraken 1.0, Mesa 18.1.1, netCDF 4.6.1, NWChem 6.8, OpenBLAS 0.3.1, OpenMPI 3.1.1, Perl 5.28.0, Python 2.7.15, R 3.5.0, X11 20180604 * minor enhancements, including: * add hint on file name differences between downloaded and expected in cuDNN easyconfig ( `#6042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6042> `_ ) * add ' ``gee`` ' extension to R 3.4.4 easyconfigs ( `#6376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6376> `_ ) * enable building of MPI libraries in VTK 8.1.0 easyconfigs ( `#6460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6460> `_ , `#6429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6429> `_ ) * minor changes, including: * rename ' ``Canu`` ' to ' ``canu`` ' for v1.7 ( `#6389 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6389> `_ ) * update existing easyconfigs for OpenCV 3.4.1 to use new custom easyblock for OpenCV ( `#6509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6509> `_ ) * fix software name in ``Bsoft`` easyconfig ( `#6557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6557> `_ ) * various bug fixes, including: * fix SAMtools dependency for ChimPipe, required SAMtools < 1.0 ( `#5930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5930> `_ ) * skip installing of documentation in easyconfig for jemalloc 5.0.1 ( `#6428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6428> `_ ) * stop including GCCcore 6.4.0 as build dep for GCCcore 8.1.0 ( `#6431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6431> `_ ) * no longer needed with updated GCC easyblock * add patch for GCCcore 6.4.0 to fix compilation problems on glibc 2.26 systems ( `#6432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6432> `_ , `#6495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6495> `_ ) * fix checksums for ``pkgmaker`` / ``rngtools`` / ``RWeka`` / ``RcppProgress`` / ``mgcv`` extensions in R 3.4.4 easyconfigs ( `#6446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6446> `_ , `#6502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6502> `_ ) * added necessary compiler flag for Guile 1.8.8 ( `#6457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6457> `_ ) * build hwloc 1.11.10 with ``-fno-tree-vectorize`` to avoid segfaulting lstopo on Intel Skylake ( `#6461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6461> `_ ) * add patch for binutils 2.30 to fix assertion failure ( `#6463 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6463> `_ ) * sync extensions in ``Python-3.6.4-iomkl-2018a.eb`` easyconfig with other Python 3.6.4 easyconfigs using 2018a toolchain ( `#6471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6471> `_ ) * enable checking/setting of unlimited stack limit in Python 3.6.x easyconfigs using an ' ``intel`` ' toolchain ( `#6485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6485> `_ , `#6492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6492> `_ ) * add missing ``libxml2`` dependency for HDF5 1.10.1 ( `#6498 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6498> `_ ) * also copy eggnog-mapper scripts ( `#6522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6522> `_ ) * fix missing dependencies for Perl modules included as extensions for Perl 5.26.1 ( `#6532 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6532> `_ ) and 5.28.0 ( `#6533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6533> `_ ) * fix location of include directory in libffi 3.2.1 easyconfigs ( `#6565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6565> `_ ) * other changes * also check for multiple dependency variants in easyconfigs using GCCcore 7.3.0 & newer ( `#6444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6444> `_ ) .. _release_notes_eb361: EasyBuild v3.6.1 (May 26th 2018) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for enabling fallback in sanity check to consider ``lib64`` equivalent for seemingly missing libraries ( `#2477 <https://github.com/easybuilders/easybuild-framework/pull/2477> `_ ) * add ``GITHUB_LOWER_SOURCE`` constant ( `#2491 <https://github.com/easybuilders/easybuild-framework/pull/2491> `_ ) * add ' ``exts_download_dep_fail`` ' as known easyconfig parameter ( `#2493 <https://github.com/easybuilders/easybuild-framework/pull/2493> `_ ) * add support for passing custom messages on failing sanity check for extensions ( `#2494 <https://github.com/easybuilders/easybuild-framework/pull/2494> `_ ) * add definition for ``fosscuda`` toolchain ( `#2507 <https://github.com/easybuilders/easybuild-framework/pull/2507> `_ ) * various bug fixes, including: * make ``--inject-checksums`` always re-order ``source_urls`` / ``sources`` / ``patches`` / ``checksums`` ( `#2487 <https://github.com/easybuilders/easybuild-framework/pull/2487> `_ ) * fix git remote url in ``CONTRIBUTING.md`` ( `#2490 <https://github.com/easybuilders/easybuild-framework/pull/2490> `_ ) * make ``flake8`` happy in ``easyblock.py`` ( `#2492 <https://github.com/easybuilders/easybuild-framework/pull/2492> `_ ) * handle missing permissions for adding labels in ``--new-pr`` ( `#2497 <https://github.com/easybuilders/easybuild-framework/pull/2497> `_ ) * restore tweaked ``$TMPDIR`` value after loading module (for sanity check) ( `#2498 <https://github.com/easybuilders/easybuild-framework/pull/2498> `_ ) * enhance ``get_module_path`` function to auto-detect generic vs software-specific easyblock class names ( `#2502 <https://github.com/easybuilders/easybuild-framework/pull/2502> `_ ) * don't blindly overwrite an existing easyconfig in ``tweak_one`` ( `#2504 <https://github.com/easybuilders/easybuild-framework/pull/2504> `_ ) * take account that ``PlaintextKeyring`` may be provided via ``keyrings.alt`` ( `#2505 <https://github.com/easybuilders/easybuild-framework/pull/2505> `_ ) * prepend location for temporary module file to ``$MODULEPATH`` with high priority + mark it as default in ``load_fake_module`` method ( `#2506 <https://github.com/easybuilders/easybuild-framework/pull/2506> `_ ) **easyblocks** * minor enhancements, including: * add support for detecting auto-downloaded dependencies in ``PythonPackage`` easyblock ( `#1377 <https://github.com/easybuilders/easybuild-easyblocks/pull/1377> `_ ) * disabled by default, can be enabled using \" ``download_dep_fail = True`` \" in easyconfig file * add support to enable integration of pscom in psmpi easyblock ( `#1397 <https://github.com/easybuilders/easybuild-easyblocks/pull/1397> `_ ) * set ``$CMAKE_*_PATH`` when ``CMake`` is loaded in ``PythonPackage`` easyblock ( `#1398 <https://github.com/easybuilders/easybuild-easyblocks/pull/1398> `_ ) * update WIEN2k easyblock for v17 ( `#1405 <https://github.com/easybuilders/easybuild-easyblocks/pull/1405> `_ ) * disable jemalloc support in TensorFlow on CentOS 6 & co (+ minor cleanups) ( `#1412 <https://github.com/easybuilders/easybuild-easyblocks/pull/1412> `_ ) * update Maple easyblock to support recent versions ( `#1414 <https://github.com/easybuilders/easybuild-easyblocks/pull/1414> `_ ) * enable ``nc-config`` usage for netCDF in ESMF >=7.1 ( `#1419 <https://github.com/easybuilders/easybuild-easyblocks/pull/1419> `_ ) * enhance PETSc easyblock for version 3.9 ( `#1421 <https://github.com/easybuilders/easybuild-easyblocks/pull/1421> `_ ) * check output of MATLAB installation command for invalid installation key error ( `#1423 <https://github.com/easybuilders/easybuild-easyblocks/pull/1423> `_ ) * fix suffix for Boost Python library in Boost 1.67.0 & newer ( `#1424 <https://github.com/easybuilders/easybuild-easyblocks/pull/1424> `_ ) * support adding specific paths to ``$PATH`` for generic Binary easyblock via ' ``prepend_to_path`` ' custom easyconfig parameter ( `#1426 <https://github.com/easybuilders/easybuild-easyblocks/pull/1426> `_ ) * minor changes, including: * assume PGI Community edition is used when no license file is specified ( `#1427 <https://github.com/easybuilders/easybuild-easyblocks/pull/1427> `_ ) * various bug fixes, including: * fix imkl sanity check overwriting base libs with interface libs ( `#1392 <https://github.com/easybuilders/easybuild-easyblocks/pull/1392> `_ ) * install Chimera in a subdirectory to avoid its dependencies being added to the environment ( `#1413 <https://github.com/easybuilders/easybuild-easyblocks/pull/1413> `_ ) * add conditional so \" ``--with-x`` \" is only added to configopts if left unspecified in R easyblock ( `#1415 <https://github.com/easybuilders/easybuild-easyblocks/pull/1415> `_ ) * make ``configure`` and ``make`` look for FoX in ``$EBROOTFOX`` in QuantumESPRESSO easyblock ( `#1420 <https://github.com/easybuilders/easybuild-easyblocks/pull/1420> `_ ) * fix path for ``$ICEM_ACN`` in ANSYS easyblock ( `#1422 <https://github.com/easybuilders/easybuild-easyblocks/pull/1422> `_ ) * avoid hardcoding defaults in question patterns in Doris easyblock ( `#1428 <https://github.com/easybuilders/easybuild-easyblocks/pull/1428> `_ ) **easyconfigs** * added easyconfigs for new toolchains ``fosscuda/2018a`` ( `#6363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6363> `_ ) and ``giolfc/2017b`` ( `#5799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5799> `_ ) * added example easyconfig files for 24 new software packages: * BAGEL ( `#6332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6332> `_ ), Bottleneck ( `#6334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6334> `_ ), cisTEM ( `#6370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6370> `_ ), cftime ( `#6337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6337> `_ ), dotNET-Core-Runtime ( `#6345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6345> `_ ), ecCodes ( `#6235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6235> `_ ), feh ( `#6300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6300> `_ ), Graphene ( `#5043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5043> `_ ), gffread ( `#6306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6306> `_ ), HOME ( `#6227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6227> `_ ), HiCExplorer ( `#6342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6342> `_ ), ICU ( `#6371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6371> `_ ), Imlib2 ( `#6300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6300> `_ ), KmerGenie ( `#5929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5929> `_ ), libgeotiff ( `#6262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6262> `_ ), NetPIPE ( `#6062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6062> `_ ), Pandoc ( `#6247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6247> `_ ), Pisces ( `#6347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6347> `_ ), Proteinortho ( `#6333 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6333> `_ ), pyshp ( `#6364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6364> `_ ), SIMPLE ( `#6019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6019> `_ ), STIR ( `#6349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6349> `_ ), SimpleElastix ( `#6114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6114> `_ ), wxWidgets ( `#6370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6370> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.67.0, ESMF 7.1.0r, GATK 4.0.4.0, GCC 8.1.0, GROMACS 2018, OpenBLAS 0.3.0, PETSc 3.9.1, PGI 18.4, TensorFlow 1.8.0, WIEN2k 17.1 * minor enhancements, including: * add ``py_expression_eval`` extension to (recent) Python 2.7.14 & 3.6.4 easyconfigs ( `#6285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6285> `_ ) * add ``README`` for Java with information on downloading source tarball ( `#6294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6294> `_ ) * add several extensions to Perl 5.26.1 easyconfigs, incl ``Dist::Zilla`` & dependencies ( `#6297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6297> `_ ) * also include archive URLs for Bioconductor 3.6 ( `#6311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6311> `_ ) * add ``README.md`` file for installing icc/ifort ( `#6317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6317> `_ ) * various bug fixes, including: * consistently specify ' ``intel-mkl`` ' component in recent Intel MKL easyconfigs ( `#6234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6234> `_ ) * add ``pkg-config`` as build dependency to libdrm ( `#6243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6243> `_ ) * add ``pkg-config`` build dep to most recent libdrm easyconfigs ( `#6244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6244> `_ ) * fix checksum for foreign extension in R 3.4.3 and R 3.4.4 easyconfigs ( `#6245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6245> `_ ) * fix installation of Libint 2.4.2 by building with ``-std=c++11`` ( `#6251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6251> `_ ) * fix source spec for networkx 2.1 extension in scikit-image easyconfig ( `#6254 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6254> `_ ) * avoid that Nipype downloads dependencies for included extensions ( `#6261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6261> `_ , `#6263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6263> `_ ) * consistently include patch for FLTK 1.3.4 ( `#6265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6265> `_ ) * fix Perl shebang in MCL v14.137 scripts ( `#6269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6269> `_ ) * add patch to build particular source file of matrixStats extension in R 3.4.4 easyconfig with ``-O1`` to work around ICE in Skylake systems ( `#6278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6278> `_ ) * add ``pkg-config`` build dependency to FFmpeg >= 3.3.1 ( `#6291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6291> `_ ) * change back checksum for libdap 3.19.1 ( `#6305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6305> `_ ) * add patch for Automake 1.15 to fix issue with recent Perl versions ( `#6358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6358> `_ ) * fix ``glog`` causing intel error in Intel compilers on Intel Skylake ( `#6360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6360> `_ ) * include ICU as dependency in recent R easyconfigs (v3.4.3 & v3.4.4) ( `#6371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6371> `_ ) * fix checksum for RSEM 1.3.0 after sneaky re-release ( `#6379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6379> `_ ) .. _release_notes_eb360: EasyBuild v3.6.0 (April 26th 2018) ---------------------------------- feature release **framework** * (experimental) support for generating Singularity container recipes & (optionally) images via ' ``sudo singularity`` ' ( `#2332 <https://github.com/easybuilders/easybuild-framework/pull/2332> `_ , `#2480 <https://github.com/easybuilders/easybuild-framework/pull/2480> `_ , `#2481 <https://github.com/easybuilders/easybuild-framework/pull/2481> `_ , `#2482 <https://github.com/easybuilders/easybuild-framework/pull/2482> `_ , `#2483 <https://github.com/easybuilders/easybuild-framework/pull/2483> `_ ) * see documentation at http://easybuild.readthedocs.io/en/latest/Containers.html * include ``-ftree-vectorize`` and ``-fno-math-errno`` in default compiler optimisation flags for GCC ( `#2388 <https://github.com/easybuilders/easybuild-framework/pull/2388> `_ ) * this significantly improves performance of generated binaries when building with a GCC-based toolchain * can be disabled if needed via the ``vectorize`` toolchain option * several enhancements/fixes to GitHub integration support: * loosen commit message requirements for ``--new-pr`` w.r.t. to patches as long as all easyconfigs are new ( `#2438 <https://github.com/easybuilders/easybuild-framework/pull/2438> `_ ) * automatically add ' ``new`` ' and/or ' ``update`` ' labels in ``--new-pr`` ( `#2384 <https://github.com/easybuilders/easybuild-framework/pull/2384> `_ ) * add ``force_in_dry_run=True`` to ``copy_file`` in ``copy_patch_files`` ( `#2442 <https://github.com/easybuilders/easybuild-framework/pull/2442> `_ ) * test for custom commit message when deleting a file instead of when adding a patch ( `#2443 <https://github.com/easybuilders/easybuild-framework/pull/2443> `_ ) * make ``diff_stat`` pattern also match output of older git versions in tests for ``--new`` / ``update-pr`` ( `#2444 <https://github.com/easybuilders/easybuild-framework/pull/2444> `_ ) * remove duplicates from ``--new-pr`` title ( `#2478 <https://github.com/easybuilders/easybuild-framework/pull/2478> `_ ) * add support for \" ``eb --fetch`` \" to only download sources (even without having a modules tool installed) ( `#2457 <https://github.com/easybuilders/easybuild-framework/pull/2457> `_ ) * add definitions for a bunch of new toolchains: * ``golf`` ( `#2458 <https://github.com/easybuilders/easybuild-framework/pull/2458> `_ ), ``gmkl`` ( `#2460 <https://github.com/easybuilders/easybuild-framework/pull/2460> `_ ), ``gomkl`` ( `#2455 <https://github.com/easybuilders/easybuild-framework/pull/2455> `_ ), ``pmkl`` ( `#2460 <https://github.com/easybuilders/easybuild-framework/pull/2460> `_ ) * toolchains including CUDA: ``gmklc`` , ``gomklc`` , ``iimklc`` , ``iompic`` , ``iomklc`` ( `#2461 <https://github.com/easybuilders/easybuild-framework/pull/2461> `_ ) * various minor enhancements, including: * avoid that ' ``--inject-checksums`` ' adds lines longer than 120 characters ( `#2434 <https://github.com/easybuilders/easybuild-framework/pull/2434> `_ ) * enable caching of ``$HOME/.cache/pip`` in Travis config ( `#2435 <https://github.com/easybuilders/easybuild-framework/pull/2435> `_ ) * replace raw strings with bytes literal as iterator sentinels in checksum calculation ( `#2446 <https://github.com/easybuilders/easybuild-framework/pull/2446> `_ ) * new command-line option ' ``--job-max-jobs`` ' to cap nr of submitted build jobs with GC3Pie ( `#2378 <https://github.com/easybuilders/easybuild-framework/pull/2378> `_ ) * add configuration for houndci + flake8 ( `#2451 <https://github.com/easybuilders/easybuild-framework/pull/2451> `_ ) * add ``Accept`` header when downloading file ( `#2437 <https://github.com/easybuilders/easybuild-framework/pull/2437> `_ ) * include running of ' ``eb --check-github`` ' in Travis config ( `#2449 <https://github.com/easybuilders/easybuild-framework/pull/2449> `_ , `#2454 <https://github.com/easybuilders/easybuild-framework/pull/2454> `_ ) * flesh out common code blocks in ``test/framework/options.py`` ( `#2452 <https://github.com/easybuilders/easybuild-framework/pull/2452> `_ ) * support ' ``depends_on`` ' load statements in generated modules via ``--module-depends-on`` and ``module_depends_on`` easyconfig parameter ( `#2391 <https://github.com/easybuilders/easybuild-framework/pull/2391> `_ ) * fix compatibility with Modules v4.1.x ( `#2470 <https://github.com/easybuilders/easybuild-framework/pull/2470> `_ ) * add support to ``run_cmd`` to enable streaming output ( `#2476 <https://github.com/easybuilders/easybuild-framework/pull/2476> `_ ) * various bug fixes, including: * determine whether included easyblocks are generic or not based on class they define ( `#2432 <https://github.com/easybuilders/easybuild-framework/pull/2432> `_ ) * make sure GitHub token is used in test for ``--preview-pr`` ( `#2436 <https://github.com/easybuilders/easybuild-framework/pull/2436> `_ ) * take into account that toolchain components may be hidden when determining toolchain composition ( `#2440 <https://github.com/easybuilders/easybuild-framework/pull/2440> `_ ) * stick to autopep8 1.3.4 when testing with Python 2.6 ( `#2462 <https://github.com/easybuilders/easybuild-framework/pull/2462> `_ ) * strip off ``.lua`` extension when backing up modules to ensure Lmod 6.x doesn't pick up on them ( `#2463 <https://github.com/easybuilders/easybuild-framework/pull/2463> `_ ) * check for ``modulecmd.tcl`` before modulecmd in bootstrap script to discriminate between Modules 4.1.x vs 3.2.10 ( `#2468 <https://github.com/easybuilders/easybuild-framework/pull/2468> `_ ) * fix ``derive_alt_pypi_url`` after PyPI switching to sha256 in package URLs + fix broken test for ``pypi_source_urls`` + fix bootstrap script ( `#2471 <https://github.com/easybuilders/easybuild-framework/pull/2471> `_ ) * make sure that both ' ``get_git_revision`` ' and ' ``this_is_easybuild`` ' return regular strings rather than Unicode strings ( `#2472 <https://github.com/easybuilders/easybuild-framework/pull/2472> `_ ) **easyblocks** * new software-specific easyblock for Nim ( `#1402 <https://github.com/easybuilders/easybuild-easyblocks/pull/1402> `_ ) * minor enhancements, including: * enhance ``RPackage`` easyblock to support installing from unpacked sources ( `#1383 <https://github.com/easybuilders/easybuild-easyblocks/pull/1383> `_ ) * add support to ``PythonPackage`` easyblock to install with ' ``pip install --editable`` ' ( `#1384 <https://github.com/easybuilders/easybuild-easyblocks/pull/1384> `_ ) * add ``$EBROOTIFORT/include`` in ``$CPATH`` for ifort ( `#1385 <https://github.com/easybuilders/easybuild-easyblocks/pull/1385> `_ ) * add houndci + flake8 configuration ( `#1388 <https://github.com/easybuilders/easybuild-easyblocks/pull/1388> `_ ) * add additional location to ``$PATH`` for FLUENT installations ( `#1389 <https://github.com/easybuilders/easybuild-easyblocks/pull/1389> `_ ) * make ``PythonPackage`` generic easyblock aware of ' ``unpack_options`` ' easyconfig parameter ( `#1391 <https://github.com/easybuilders/easybuild-easyblocks/pull/1391> `_ ) * minor updates to ABAQUS easyblock to support latest version ( `#1394 <https://github.com/easybuilders/easybuild-easyblocks/pull/1394> `_ ) * add support for extracting sources in ``Binary`` easyblock ( `#1401 <https://github.com/easybuilders/easybuild-easyblocks/pull/1401> `_ ) * various bug fixes, including: * fix linking to FFTW for Doris: should be ``-lfftw3f`` ( `#1387 <https://github.com/easybuilders/easybuild-easyblocks/pull/1387> `_ ) * fix for installing TensorFlow 1.6.0: use the absolute path for the C compiler when compiling with GPU support ( `#1386 <https://github.com/easybuilders/easybuild-easyblocks/pull/1386> `_ ) * also take ``lib64`` into account for binutils libraries ( `#1399 <https://github.com/easybuilders/easybuild-easyblocks/pull/1399> `_ ) * make sanity check in MPICH easyblock aware of libraries in ``lib64`` subdir ( `#1403 <https://github.com/easybuilders/easybuild-easyblocks/pull/1403> `_ ) * take into account that ``self.debuggerpath`` may not be set in icc easyblock ( `#1408 <https://github.com/easybuilders/easybuild-easyblocks/pull/1408> `_ ) * extend noqa in configure step of Qt easyblock ( `#1409 <https://github.com/easybuilders/easybuild-easyblocks/pull/1409> `_ ) **easyconfig** * added easyconfigs for new toolchain golf/2018a ( `#6080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6080> `_ ) * added example easyconfig files for 39 new software packages: * ARAGORN ( `#6138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6138> `_ , `#6219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6219> `_ ), amask ( `#6105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6105> `_ ), BamBam ( `#5490 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5490> `_ ), Bandage ( `#6053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6053> `_ ), bcgTree ( `#6057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6057> `_ ), biobambam2 ( `#6040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6040> `_ ), CODEX2 ( `#5972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5972> `_ ), coverage ( `#5964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5964> `_ ), DANPOS2 ( `#5870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5870> `_ ), EasyQC ( `#6175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6175> `_ ), elastix ( `#6074 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6074> `_ ), FRANz ( `#6035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6035> `_ ), Filtlong ( `#6050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6050> `_ ), FriBidi ( `#6181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6181> `_ ), Gblocks ( `#6057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6057> `_ ), Grace ( `#6036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6036> `_ ), LMfit ( `#6119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6119> `_ ), libmaus2 ( `#6040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6040> `_ ), MathGL ( `#6033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6033> `_ ), MiGEC ( `#6047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6047> `_ ), MiXCR ( `#6045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6045> `_ ), Miniconda3 ( `#6075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6075> `_ ), Multiwfn ( `#5403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5403> `_ ), mosdepth ( `#6169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6169> `_ ), Nim ( `#6167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6167> `_ ), Porechop ( `#6051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6051> `_ ), propy ( `#6091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6091> `_ ), Roary ( `#6056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6056> `_ ), Rtree ( `#6222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6222> `_ ), SALib ( `#6145 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6145> `_ ), SMRT-Link ( `#6218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6218> `_ ), SimpleITK ( `#6172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6172> `_ ), spectral.methods ( `#6104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6104> `_ ), supernova ( `#6193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6193> `_ ), TEToolkit ( `#5912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5912> `_ ), tbl2asn ( `#6139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6139> `_ ), udocker ( `#5770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5770> `_ ), vartools ( `#6102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6102> `_ ), XCfun ( `#5975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5975> `_ ) * added new easyconfigs for existing toolchains: * ``gmpich/2017.08`` ( `#6143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6143> `_ ), ``goolfc/2018a`` ( `#6129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6129> `_ ), ``intel/2018.02`` ( `#6077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6077> `_ ), ``iomkl/2018.02`` ( `#6088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6088> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 8.6.3, Anaconda2 5.1.0, Anaconda3 5.1.0, binutils 2.30, dask 0.17.2, FFmpeg 4.0, GCC(core) 7.3.0, GROMACS 2016.5, HTSlib 1.8, LLVM 6.0.0, Mesa 17.3.6, netCDF 4.6.0, Octave 4.2.2, OpenCV 3.4.1, PLUMED 2.4.1, PROJ 5.0.0, PostgreSQL 10.3, Qt5 5.10.1, R 3.4.4, SAMtools 1.8, Spack 0.11.2, TensorFlow 1.7.0, VTK 8.1.0 * minor enhancements, including: * add test to ensure there's only one variant for each dependency in dep graph of easyconfigs using particular toolchains ( `#5970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5970> `_ , `#6023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6023> `_ ) * add extensions required by CODEX2 v20180227 to Bioconductor w/ R 3.4.3 ( `#5972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5972> `_ ) * add config file for https://pre-commit.com/ ( `#5785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5785> `_ ) * add custom sanity check paths for GraphicsMagick consistently ( `#5997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5997> `_ ) * add custom sanity check paths to recent Ghostscript easyconfigs ( `#5998 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5998> `_ ) * add svd, Rssa, JBTools, RUnit, DistributionUtils and gapfill extensions for R 3.4.3 ( `#6099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6099> `_ ) * add additional extensions to Bioconductor 3.6 bundle ( `#6136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6136> `_ ) * add xlrd extension to recent Python 2.x and 3.x easyconfigs ( `#6162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6162> `_ ) * minor changes, including: * use gettext 0.19.8.1 on top of libxml2 2.9.7 as dep for git built with ``foss/2018a`` ( `#5993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5993> `_ ) * bump hwloc dep for OpenMPI 2.1.2 that is part of ``iomkl/2018a`` to v1.11.8 ( `#5994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5994> `_ ) * use non-interactive plotting backend by default for matplotlib 2.1.2 ( `#6024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6024> `_ ) * don't use bare Perl as dependency for git with ``foss/2018a`` , use variant with extensions ( `#6058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6058> `_ ) * various bug fixes, including: * fix ``moduleclass`` & add custom ``sanity_check_paths`` in gettext easyconfigs ( `#5991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5991> `_ ) * drop use of ``--disable-dlopen`` in (recent) OpenMPI easyconfigs due to negative performance impact ( `#6060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6060> `_ ) * add missing XZ dep in Python 3.6.4 easyconfigs built with ``*/2018a`` toolchain ( `#6065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6065> `_ ) * add 10 packages that were previously downloaded in Python 3.6.4 easyconfigs ( `#6081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6081> `_ ) * add patch for Tensorflow 1.6 & 1.7 to include missing -lrt link flag (needed in CentOS6) ( `#6089 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6089> `_ ) * fix checksums for R extensions that were updated in place in easyconfigs for R versions 3.4.3 & 3.4.4 ( `#6118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6118> `_ ) * include pkg-config as build dep in recent R easyconfigs (required for at least nloptr) ( `#6122 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6122> `_ ) * remove Intel-specific workaround for ' ``undefined symbol: __stack_chk_guard`` ' issue from Python 3.6.4 foss/2018a easyconfig ( `#6130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6130> `_ ) * add configopt ``--without-matlab`` / ``octave`` to all NLopt easyconfigs ( `#6132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6132> `_ ) * also consider ``lib64`` in ``sanity_check_paths`` for Bison 3.0.4 ( `#6170 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6170> `_ ) * don't use libyaml built with dummy as dep for PyYAML ( `#6208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6208> `_ ) * add missing pkg-config build dep in recent GObject-Introspection, GLib & cairo easyconfigs ( `#6216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6216> `_ ) * don't include (ancient version of) ``Time::HiRes`` as Perl extension, since it's a core Perl module ( `#6225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6225> `_ ) * this fixes problems with the installation of BioPerl and proovread * add missing XML-LibXML dependency in recent BioPerl easyconfigs ( `#6226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6226> `_ ) * add ``--without-ada`` configure option in recent ncurses easyconfigs ( `#6228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6228> `_ ) * add patch for snaphu to fix segmentation fault due to use of short integer ( `#6230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6230> `_ ) .. _release_notes_eb353: EasyBuild v3.5.3 (March 7th 2018) --------------------------------- bugfix/update release **framework** * various enhancements, including: * re-enable testing against environment modules, bump Lmod to 7.7.16 ( `#2425 <https://github.com/easybuilders/easybuild-framework/pull/2425> `_ ) * print which hook is being executed in the command line output ( `#2427 <https://github.com/easybuilders/easybuild-framework/pull/2427> `_ ) * various bug fixes, including: * fix order in result of gen_list_easyblocks and gen_easyblocks_overview_rst ( `#2421 <https://github.com/easybuilders/easybuild-framework/pull/2421> `_ ) * fix target account for branch pushed when using ``--new-pr`` ( `#2426 <https://github.com/easybuilders/easybuild-framework/pull/2426> `_ ) **easyblocks** * minor enhancements, including: * make GROMACS easyblock select build type based on value for ' ``debug`` ' in ' ``toolchainopts`` ' ( `#1374 <https://github.com/easybuilders/easybuild-easyblocks/pull/1374> `_ ) * re-enable testing against environment modules, bump Lmod to 7.7.16 ( `#1376 <https://github.com/easybuilders/easybuild-easyblocks/pull/1376> `_ ) * enhance Gurobi easyblock to support installing Python bindings ( `#1378 <https://github.com/easybuilders/easybuild-easyblocks/pull/1378> `_ ) **easyconfigs** * added example easyconfig files for 2 new software packages: * CNVkit and hmmlearn ( `#5954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5954> `_ ) * added additional easyconfigs for various supported software packages, including: * matplotlib 2.1.2, TensorFlow 1.6.0 * minor enhancements, including: * re-enable testing against environment modules, bump Lmod to 7.7.16 ( `#5944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5944> `_ ) * add cghFLasso extension to R 3.4.3 easyconfigs ( `#5953 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5953> `_ ) * add ' ``Math::CDF`` ' extension to recent Perl modules ( `#5957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5957> `_ ) * various bug fixes, including: * add missing ``--enable-ld-version-script`` configure option for LibTIFF 4.0.9 built with ``GCCcore/6.4.0`` ( `#5945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5945> `_ ) * hard disable UCX support in recent OpenMPI versions, to dance around bug in OpenMPI configure script ( `#5949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5949> `_ ) .. _release_notes_eb352: EasyBuild v3.5.2 (March 2nd 2018) --------------------------------- bugfix/update release **framework** * various enhancements, including: * add functionality to skip devel module with naming scheme ( `#2374 <https://github.com/easybuilders/easybuild-framework/pull/2374> `_ ) * add pagination support in ``clean_gists.py`` ( `#2379 <https://github.com/easybuilders/easybuild-framework/pull/2379> `_ ) * allow basic compiler modulenames to be specified as keys in ``--optarch`` ( `#2387 <https://github.com/easybuilders/easybuild-framework/pull/2387> `_ ) * initial set of OHPC module meta data for EasyBuild ( `#2392 <https://github.com/easybuilders/easybuild-framework/pull/2392> `_ ) * allow different target account in ``post_comment_in_issue`` ( `#2399 <https://github.com/easybuilders/easybuild-framework/pull/2399> `_ ) * declare support for RPATH linking stable ( `#2409 <https://github.com/easybuilders/easybuild-framework/pull/2409> `_ ) * various bug fixes, including: * update bootstrap script to be compatible with Modules v4 ( `#2390 <https://github.com/easybuilders/easybuild-framework/pull/2390> `_ ) * avoid fatal error when determining glibc version on non-glibc Linux system (e.g. Alphine Linux) ( `#2398 <https://github.com/easybuilders/easybuild-framework/pull/2398> `_ ) * exclude location of RPATH wrappers from ``$PATH`` to avoid fork bomb ( `#2410 <https://github.com/easybuilders/easybuild-framework/pull/2410> `_ ) * fix target account for ``--update-pr`` in case it's different from GitHub account being used to push branch ( `#2419 <https://github.com/easybuilders/easybuild-framework/pull/2419> `_ ) **easyblocks** * new software-specific easyblocks for COMSOL ( `#1317 <https://github.com/easybuilders/easybuild-easyblocks/pull/1317> `_ ), Stata ( `#1241 <https://github.com/easybuilders/easybuild-easyblocks/pull/1241> `_ ) and TensorFlow ( `#1287 <https://github.com/easybuilders/easybuild-easyblocks/pull/1287> `_ , `#1361 <https://github.com/easybuilders/easybuild-easyblocks/pull/1361> `_ ) * enhance GCC easyblock to support building generically (via ' ``generic`` ' easyconfig parameter or ``--optarch=GENERIC`` ) ( `#1336 <https://github.com/easybuilders/easybuild-easyblocks/pull/1336> `_ ) * minor enhancements, including: * make GROMACS easyblock aware of building for KNL via ``--optarch=MIC-AVX512`` ( `#1360 <https://github.com/easybuilders/easybuild-easyblocks/pull/1360> `_ ) * unset ``$PERL_MM_OPT`` and ``$PERL_MB_OPT`` when installing Perl modules to avoid problems ( `#1362 <https://github.com/easybuilders/easybuild-easyblocks/pull/1362> `_ ) * add custom ' ``use_pip_for_deps`` ' easyconfig parameter to ``PythonPackage`` easyblock ( `#1366 <https://github.com/easybuilders/easybuild-easyblocks/pull/1366> `_ ) * add support for ' ``default_component_specs`` ' easyconfig parameter in ``Bundle`` easyblock ( `#1369 <https://github.com/easybuilders/easybuild-easyblocks/pull/1369> `_ ) * various bug fixes, including: * fix logic in icc easyblock w.r.t. location of debugger libraries (libipt library for gdb) ( `#1224 <https://github.com/easybuilders/easybuild-easyblocks/pull/1224> `_ ) * fix Tkinter easyblock to install Tkinter 3.x ( `#1347 <https://github.com/easybuilders/easybuild-easyblocks/pull/1347> `_ ) * let impi modules also update ``$MANPATH`` ( `#1354 <https://github.com/easybuilders/easybuild-easyblocks/pull/1354> `_ ) * enhance Octave extension filter to avoid false positives ( `#1355 <https://github.com/easybuilders/easybuild-easyblocks/pull/1355> `_ ) * make CUDA easyblock aware of ' ``preinstallopts`` ' easyconfig parameter ( `#1367 <https://github.com/easybuilders/easybuild-easyblocks/pull/1367> `_ ) * fix handling of per-component (checksums for) patches in ``Bundle`` easyblock ( `#1369 <https://github.com/easybuilders/easybuild-easyblocks/pull/1369> `_ ) **easyconfigs** * added example easyconfig files for 24 new software packages: * AMPL-MP ( `#5800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5800> `_ ), AmberTools ( `#5632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5632> `_ ), bcolz ( `#5864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5864> `_ ), detonate ( `#5709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5709> `_ ), dropEst ( `#5734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5734> `_ ), EvidentialGene ( `#5627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5627> `_ ), faceswap ( `#5825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5825> `_ ), fineSTRUCTURE ( `#5663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5663> `_ ), Gradle ( `#5828 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5828> `_ ), gbs2ploidy ( `#5877 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5877> `_ ), HIPS ( `#5725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5725> `_ ), Ipopt ( `#5800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5800> `_ ), libMemcached ( `#5804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5804> `_ ), MEGAHIT ( `#5748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5748> `_ ), Mmg ( `#5807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5807> `_ ), methylpy ( `#5874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5874> `_ ), pstoedit ( `#5884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5884> `_ ), python-igraph ( `#5905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5905> `_ ), RNAcode ( `#5854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5854> `_ ), Seq-Gen ( `#5695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5695> `_ ), Stata ( `#5102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5102> `_ ), scikit-allel ( `#5864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5864> `_ ), TetGen ( `#5681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5681> `_ ), zarr ( `#5864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5864> `_ ) * added new easyconfigs for existing toolchains: giolf/2018a ( `#5777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5777> `_ ), goolfc/2017b ( `#5768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5768> `_ ), iomkl/2018a ( `#5878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5878> `_ ) * added additional easyconfigs for various supported software packages, including: * CP2K 5.1, IPython 6.2.1, OpenFOAM v1712, Perl 5.26.1, Python 3.6.4, TensorFlow 1.5.0, X11 20180131 * minor enhancements, including: * add ``feather`` and ``tidyverse`` as extensions for R 3.4.3 ( `#5693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5693> `_ ) * build recent PLUMED versions with all modules enabled ( `#5696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5696> `_ ) * add MAST/splatter/scDD to Bioconductor 3.6 bundle ( `#5704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5704> `_ ) * add ``dummies`` as extension for R 3.4.3 + ``monocle`` / ``scde`` / ``ROTS`` (+ deps) to Bioconductor 3.6 bundle ( `#5724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5724> `_ ) * include ``io`` and ``statistics`` extensions to Octave 4.2.1 easyconfigs ( `#5798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5798> `_ ) * switch to using TensorFlow as backend for recent versions of Keras ( `#5821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5821> `_ ) * various bug fixes, including: * using the correct binutils in jemalloc 5.0.1 easyconfig using ``GCCcore/6.4.0`` ( `#5659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5659> `_ ) * fix source URLs for MPC ( `#5662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5662> `_ ) * add Tkinter as dependency for ASE & matplotlib using Python 3.6.3 ( `#5658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5658> `_ ) * fix versions for updated extensions in Bioconductor 3.6 bundle ( `#5704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5704> `_ , `#5724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5724> `_ , `#5880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5880> `_ ) * fix missing M4 build dependency in nettle easyconfigs ( `#5722 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5722> `_ ) * fix homepage for OpenFOAM 4.x & 5.x, should be ``openfoam.org`` ( `#5422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5422> `_ , `#5780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5780> `_ ) * add matplotlib, cairo & PyCairo dependencies for graph-tool 2.26 + enhance sanity check ( `#5787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5787> `_ ) * fix hardcoded version in scikit-image easyconfigs ( `#5822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5822> `_ ) * fix pkgconfig moduleclass, ' ``data`` ' doesn't make much sense ( `#5817 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5817> `_ ) * add sanity check in recent matplotlib easyconfigs to ensure that Tkinter is available ( `#5689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5689> `_ , `#5896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5896> `_ ) * correct MPI path when building ABINIT with ' ``foss`` ' toolchain ( `#5760 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5760> `_ ) * patch Hyperopt to make it work with networkx 2.0 ( `#5642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5642> `_ ) * add Tkinter sanity check to ASE easyconfigs ( `#5691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5691> `_ , `#5909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5909> `_ ) * include autotools as build dep in git easyconfigs ( `#5718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5718> `_ ) * fix sanity check paths for Debian OS in JasPer easyconfigs ( `#5897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5897> `_ ) * fix source_urls for recent versions of ABINIT ( `#5908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5908> `_ ) * add patch for recent GDAL easyconfigs using ``intel`` toolchain to fix icc get stuck on compiling ``ceos.c`` ( `#5915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5915> `_ ) * add explicit zlib dependency in Tkinter 2.x and 3.x ( `#5797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5797> `_ , `#5926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5926> `_ ) * fix source URLs & homepage in Singularity easyconfigs ( `#5927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5927> `_ ) * fix installation of TensorFlow 1.3 via binary wheel after introducing TensorFlow easyblock ( `#5938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5938> `_ ) .. _release_notes_eb351: EasyBuild v3.5.1 (January 16th 2018) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add definition of ``giolfc`` toolchain ( `#2359 <https://github.com/easybuilders/easybuild-framework/pull/2359> `_ ) * add support for Environment Modules 4 ( `#2365 <https://github.com/easybuilders/easybuild-framework/pull/2365> `_ ) * various bug fixes, including: * install SQLAlchemy < 1.2.0 with Python 2.6 in Travis config ( `#2367 <https://github.com/easybuilders/easybuild-framework/pull/2367> `_ ) * make code in ``easybuild/tools/job/gc3pie.py`` forward-compatible with GC3Pie 2.5 ( `#2373 <https://github.com/easybuilders/easybuild-framework/pull/2373> `_ ) **easyblocks** * minor enhancements, including: * auto-detect default build target for Clang ( `#1115 <https://github.com/easybuilders/easybuild-easyblocks/pull/1115> `_ ) * build GROMACS for target architecture based on ``--optarch`` ( `#1163 <https://github.com/easybuilders/easybuild-easyblocks/pull/1163> `_ ) * ensure correct $PYTHONPATH for recent OpenBabel versions ( `#1219 <https://github.com/easybuilders/easybuild-easyblocks/pull/1219> `_ ) * enhance Amber easyblock with support for OpenBLAS and better Intel MPI support ( `#1305 <https://github.com/easybuilders/easybuild-easyblocks/pull/1305> `_ ) * also support only installing AmberTools through Amber easyblock ( `#1305 <https://github.com/easybuilders/easybuild-easyblocks/pull/1305> `_ ) * also pick locations for CUPTI headers & libraries in CUDA easyblock ( `#1306 <https://github.com/easybuilders/easybuild-easyblocks/pull/1306> `_ ) * update patching out of sanitizer tests for recent Clang versions (>=5.0) ( `#1327 <https://github.com/easybuilders/easybuild-easyblocks/pull/1327> `_ ) * update known questions for Qt5 to support installing recent versions ( `#1328 <https://github.com/easybuilders/easybuild-easyblocks/pull/1328> `_ ) * update BamTools easyblock for v2.5.0 ( `#1332 <https://github.com/easybuilders/easybuild-easyblocks/pull/1332> `_ , `#1337 <https://github.com/easybuilders/easybuild-easyblocks/pull/1337> `_ ) * disable ``libfox`` target if external module found in QuantumESPRESSO easyblock ( `#1333 <https://github.com/easybuilders/easybuild-easyblocks/pull/1333> `_ ) * add support for linking Octave with multi-threaded BLAS/LAPACK library ( `#1340 <https://github.com/easybuilders/easybuild-easyblocks/pull/1340> `_ ) * support ``install_target`` in PythonPackage + deprecate ``use_easy_install`` & ``use_setup_py_develop`` ( `#1341 <https://github.com/easybuilders/easybuild-easyblocks/pull/1341> `_ , `#1342 <https://github.com/easybuilders/easybuild-easyblocks/pull/1342> `_ ) * various bug fixes, including: * make RubyGem easyblock use ``$GEM_*`` environment variables except if as extension of Ruby itself ( `#1247 <https://github.com/easybuilders/easybuild-easyblocks/pull/1247> `_ ) * move initialisation in ``SystemCompiler`` & ``SystemMPI`` easyblocks to the prepare step ( `#1282 <https://github.com/easybuilders/easybuild-easyblocks/pull/1282> `_ ) * enable skipping sanitizer tests by default in Clang easyblock, they can't be relied on ( `#1329 <https://github.com/easybuilders/easybuild-easyblocks/pull/1329> `_ ) * fix quotes when using ``$ORIGIN`` in ``RPATH`` locations for DOLFIN ( `#1338 <https://github.com/easybuilders/easybuild-easyblocks/pull/1338> `_ ) * fix sanity check for shared libraries in Trilinos easyblock ( `#1339 <https://github.com/easybuilders/easybuild-easyblocks/pull/1339> `_ ) **easyconfigs** * added easyconfigs for ``foss/2018a`` and ``intel/2018a`` common toolchains ( `#5577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5577> `_ ), ( `#5578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5578> `_ ) * added example easyconfig files for 26 new software packages: * BeautifulSoup ( `#5601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5601> `_ ), Calendrical ( `#5588 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5588> `_ ), ChimPipe ( `#5560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5560> `_ ), crb-blast ( `#5124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5124> `_ )), dammit ( `#5125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5125> `_ ), deepTools ( `#5536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5536> `_ ), FastQ_Screen ( `#5404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5404> `_ ), FoX ( `#5496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5496> `_ ), GffCompare ( `#5581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5581> `_ ), GlimmerHMM ( `#5559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5559> `_ ), LocARNA ( `#5548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5548> `_ ), MapSplice ( `#5566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5566> `_ ), MariaDB-connector-c ( `#5557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5557> `_ ), NextGenMap ( `#5430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5430> `_ ), nd2reader ( `#5545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5545> `_ ), PIMS ( `#5545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5545> `_ ), Pysolar ( `#5585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5585> `_ ), phono3py ( `#5551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5551> `_ ), preseq ( `#5569 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5569> `_ ), proovread ( `#5513 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5513> `_ ), QUAST ( `#5610 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5610> `_ ), RNA-SeQC ( `#5589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5589> `_ ), RNAclust ( `#5607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5607> `_ ), Ragout ( `#5608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5608> `_ ), SOAPfuse ( `#5417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5417> `_ ), TransDecoder ( `#5125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5125> `_ ) * added additional easyconfigs for various supported software packages, including: * BLAST+ 2.7.1, BamTools 2.5.0, Boost 1.66.0, Clang 5.0.0, dask 0.16.0, FFmpeg 3.4.1, GROMACS 2016.4, HDF5 1.8.20, matplotlib 2.1.1, PLUMED 2.4.0, Pillow 5.0.0, Qt5 5.9.3, QuantumESPRESSO 6.2, Ruby 2.5.0, Rust 1.22.1 * minor enhancements, including: * include ``gomms`` in list of extensions for R 3.4.3 ( `#5547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5547> `_ ) * clean up BamTools easyconfigs to rely on updated easyblock + add SHA256 checksums ( `#5575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5575> `_ ) * add ``Time::HiRes`` to recent Perl versions ( `#5616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5616> `_ ) * add ``DNAcopy`` & ``dupRadar`` extensions to bundle for Bioconductor 3.6 ( `#5587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5587> `_ , `#5618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5618> `_ ) * switch to using ``install_target`` rather than now deprecated ``use_easy_install`` and ``use_setup_py_develop`` ( `#5625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5625> `_ ) * various bug fixes, including: * avoid auto-downloading of parcel in gdc-client 1.3.0 easyconfig ( `#5523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5523> `_ ) * fix permissions on ``make_raw_alos.pl`` script in ROI_PAC installation ( `#5546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5546> `_ ) * remove erroneous patch for Intel compiler support in Perl 5.26.0 easyconfig built with ``GCCcore/6.4.0`` ( `#5561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5561> `_ ) * include ``HWxtest`` as extension to fix issue with ``diveRsity`` in R 3.4.3 easyconfig file ( `#5570 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5570> `_ ) * add pkg-config as build dependency for fontconfig, harfbuzz, gnuplot, pango ( `#5580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5580> `_ ) * fix versions of updated extensions in BioConductor bundle ( `#5587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5587> `_ , `#5618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5618> `_ ) * add missing libpng dependency in ROOT 6.10.08 easyconfigs ( `#5595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5595> `_ ) * fix option passed to configure in M4 ( `#5606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5606> `_ ) * rename SIBELia to Sibelia ( `#5603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5603> `_ ) * add patch for binutils 2.26 to fix compatibility with GCC 6.x ( `#5611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5611> `_ ) * fix for dependencies was set twice in OpenMPI 3.0.0 easyconfig ( `#5619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5619> `_ ) * fix download URL in comment of Kent tools easyconfigs ( `#5633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5633> `_ ) * add SHA256 checksums to various easyconfigs ( `#5635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5635> `_ , `#5636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5636> `_ , `#5639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5639> `_ ) * add ``rdma-core-devel`` to OS dependencies for OpenMPI 3.0.0 ( `#5648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5648> `_ ) .. _release_notes_eb350: EasyBuild v3.5.0 (December 15th 2017) ------------------------------------- feature release **framework** * add support for implementing pre- and post-step hooks ( `#2343 <https://github.com/easybuilders/easybuild-framework/pull/2343> `_ ) * documentation available at http://easybuild.readthedocs.io/en/latest/Hooks.html * various enhancements, including: * add support for foss-like toolchain with Spectrum MPI: ``gsolf`` ( `#2329 <https://github.com/easybuilders/easybuild-framework/pull/2329> `_ ) * add support for ``--preview-pr`` ( `#2331 <https://github.com/easybuilders/easybuild-framework/pull/2331> `_ , `#2337 <https://github.com/easybuilders/easybuild-framework/pull/2337> `_ , `#2348 <https://github.com/easybuilders/easybuild-framework/pull/2348> `_ ) * see also http://easybuild.readthedocs.io/en/latest/Integration_with_GitHub.html#previewing-easyconfig-pull-requests-preview-pr * flesh out ``find_extension`` function, hoist dict with extract commands into a constant ( `#2336 <https://github.com/easybuilders/easybuild-framework/pull/2336> `_ ) * add support for using ``self.start_dir`` rather than using ``self.cfg['start_dir']`` ( `#2339 <https://github.com/easybuilders/easybuild-framework/pull/2339> `_ ) * add support for ' ``exts_default_options`` ' easyconfig parameter ( `#2345 <https://github.com/easybuilders/easybuild-framework/pull/2345> `_ , `#2346 <https://github.com/easybuilders/easybuild-framework/pull/2346> `_ ) * allow use of ' ``start_dir`` ' easyconfig parameter in extensions ( `#2353 <https://github.com/easybuilders/easybuild-framework/pull/2353> `_ ) * various bug fixes, including: * fix typo in ' ``giolf`` ' toolchain definition ( `#2327 <https://github.com/easybuilders/easybuild-framework/pull/2327> `_ ) * fix minor issues with ``--inject-checksums`` ( `#2333 <https://github.com/easybuilders/easybuild-framework/pull/2333> `_ ) * fix error message when ' ``gv`` ' Python package is not available ( `#2340 <https://github.com/easybuilders/easybuild-framework/pull/2340> `_ ) * install paramiko version < 2.4.0 for Python 2.6 in Travis config ( `#2344 <https://github.com/easybuilders/easybuild-framework/pull/2344> `_ ) * disable broken log rotation, avoid duplicate logging of output of executed commands under ' ``--debug`` ' ( `#2347 <https://github.com/easybuilders/easybuild-framework/pull/2347> `_ ) * also include $ORIGIN and absolute paths to ' ``lib`` ' and ' ``lib64`` ' subdirectories in RPATH locations ( `#2358 <https://github.com/easybuilders/easybuild-framework/pull/2358> `_ ) * fix repo references in ``install-EasyBuild-develop.sh`` script ( `#2360 <https://github.com/easybuilders/easybuild-framework/pull/2360> `_ ) **easyblocks** * new software-specific easyblock for Bazel ( `#1286 <https://github.com/easybuilders/easybuild-easyblocks/pull/1286> `_ ) and Octave ( `#1304 <https://github.com/easybuilders/easybuild-easyblocks/pull/1304> `_ ) * new generic easyblock for installing Octave packages as extensions ( `#1304 <https://github.com/easybuilders/easybuild-easyblocks/pull/1304> `_ , `#1318 <https://github.com/easybuilders/easybuild-easyblocks/pull/1318> `_ ) * minor enhancements, including: * remove ``foamExec`` & ``wdot`` from sanity checks, add ``blockMesh`` & ``checkMesh`` + enable logging for recent OpenFOAM versions ( `#1205 <https://github.com/easybuilders/easybuild-easyblocks/pull/1205> `_ , `#1272 <https://github.com/easybuilders/easybuild-easyblocks/pull/1272> `_ ) * add exceptions for FFTW/3.3.6 on POWER with GCC 5/6/7 ( `#1274 <https://github.com/easybuilders/easybuild-easyblocks/pull/1274> `_ ) * add support for Spectrum MPI to the ``SystemMPI`` easyblock ( `#1275 <https://github.com/easybuilders/easybuild-easyblocks/pull/1275> `_ ) * allow skipping of steps for ``Bundle`` components + fix issues with templates & formatting of error message ( `#1278 <https://github.com/easybuilders/easybuild-easyblocks/pull/1278> `_ ) * update HPCG easyblock for v3.0 by changing configure syntax ( `#1284 <https://github.com/easybuilders/easybuild-easyblocks/pull/1284> `_ ) * correctly configure for BLAS/LAPACK in R easyblock & check configure output ( `#1292 <https://github.com/easybuilders/easybuild-easyblocks/pull/1292> `_ , `#1300 <https://github.com/easybuilders/easybuild-easyblocks/pull/1300> `_ ) * make R easyblock set configure options for dependencies ( `#1297 <https://github.com/easybuilders/easybuild-easyblocks/pull/1297> `_ , `#1303 <https://github.com/easybuilders/easybuild-easyblocks/pull/1303> `_ ) * allow tuning of build command in ``PythonPackage`` via custom ' ``buildcmd`` ' easyconfig parameter ( `#1299 <https://github.com/easybuilders/easybuild-easyblocks/pull/1299> `_ ) * set default Java encoding to ``UTF8`` when installing Trinity ( `#1302 <https://github.com/easybuilders/easybuild-easyblocks/pull/1302> `_ ) * also define ``$CUDA_ROOT`` in generated module for CUDA ( `#1234 <https://github.com/easybuilders/easybuild-easyblocks/pull/1234> `_ ) * make the ScaLAPACK easyblock capable of building in parallel ( `#1288 <https://github.com/easybuilders/easybuild-easyblocks/pull/1288> `_ , `#1321 <https://github.com/easybuilders/easybuild-easyblocks/pull/1321> `_ , `#1324 <https://github.com/easybuilders/easybuild-easyblocks/pull/1324> `_ ) * various bug fixes, including: * avoid changing ``$CPATH`` , ``$LD_LIBRARY_PATH`` an ``$LIBRARY_PATH`` in generated modules for Intel Advisor, Inspector, and VTune ( `#1229 <https://github.com/easybuilders/easybuild-easyblocks/pull/1229> `_ ) * fix check for Intel MKL in PSI easyblock ( `#1273 <https://github.com/easybuilders/easybuild-easyblocks/pull/1273> `_ ) * fix missing space in fftw easyblock ( `#1277 <https://github.com/easybuilders/easybuild-easyblocks/pull/1277> `_ ) * fix use of FFTW on top of Intel MKL in CP2K easyblock ( `#1281 <https://github.com/easybuilders/easybuild-easyblocks/pull/1281> `_ ) * fix wrong sanity check for Boost when using Python 3.x ( `#1283 <https://github.com/easybuilders/easybuild-easyblocks/pull/1283> `_ ) * pick up per-component checksums in ``Bundle`` generic easyblock ( `#1285 <https://github.com/easybuilders/easybuild-easyblocks/pull/1285> `_ ) * correctly pass down optimization flags in CP2K easyblock ( `#1293 <https://github.com/easybuilders/easybuild-easyblocks/pull/1293> `_ ) **easyconfigs** * added example easyconfig files for 39 new software packages: * AmberMini ( `#5476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5476> `_ ), arrow ( `#5416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5416> `_ ), bat ( `#5416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5416> `_ ), CIRCexplorer ( `#5356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5356> `_ ), CIRCexplorer2 ( `#5470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5470> `_ ), CIRI ( `#5358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5358> `_ ), FALCON ( `#5265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5265> `_ ), FastaIndex ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), find_circ ( `#5348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5348> `_ ), future ( `#5236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5236> `_ ), GapCloser ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), glibc ( `#5428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5428> `_ ), GRNBoost ( `#5373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5373> `_ ), HDFView ( `#5391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5391> `_ ), Horovod ( `#5239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5239> `_ ), HPDBSCAN ( `#5371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5371> `_ ), Hyperopt ( `#5455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5455> `_ ), IntelClusterChecker ( `#4970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4970> `_ ), ITK ( `#5434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5434> `_ ), LAST ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), MDTraj ( `#5317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5317> `_ ), Meson ( `#5228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5228> `_ ), mkl-dnn ( `#5319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5319> `_ , `#5362 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5362> `_ ), Ninja ( `#5228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5228> `_ ), OpenKIM-API ( `#5479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5479> `_ ), ParmEd ( `#5476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5476> `_ ), PCRaster ( `#5386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5386> `_ ), piSvM ( `#5308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5308> `_ ), piSvM-JSC ( `#5316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5316> `_ ), PTESFinder ( `#5359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5359> `_ ), pybedtools ( `#5347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5347> `_ ), pymbar ( `#5476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5476> `_ ), pyScaf ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), QIIME2 ( `#5355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5355> `_ ), QTLtools ( `#5361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5361> `_ ), Redundans ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), Rmath ( `#5361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5361> `_ ), sbt ( `#5373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5373> `_ ), SNAP ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ) * added new easyconfigs for existing toolchains: ``intel/2017.09`` ( `#5303 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5303> `_ ), ``intel/2018.00`` ( `#5129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5129> `_ ), ``intel/2018.01`` ( `#5345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5345> `_ ) * added additional easyconfigs for various supported software packages, including: * CGAL 4.11, CMake 3.10.0, Caffe 1.0, FFTW 3.3.7, GATE 8.0, gnuplot 5.2.2, HPCG 3.0, HTSlib 1.6, Keras 2.1.2, LLVM 5.0.0, Mesa 17.2.5, mpi4py 3.0.0, netCDF 4.5.0, OpenFOAM 5.0, ParaView 5.4.1, R 3.4.3, Ruby 2.4.2, Rust 1.21.0, SCons 3.0.1, Szip 2.1.1, Theano 1.0.0, VTK 8.0.1, X11 20171023 * minor enhancements, including: * add SHA256 checksums to Autoconf ( `#5304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5304> `_ ), Automake ( `#5305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5305> `_ ), libtool ( `#5306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5306> `_ ) and M4 ( `#5307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5307> `_ ) easyconfigs * avoid hardcoding extension versions in worker easyconfig, include ' ``perl`` ' as OS dep ( `#5324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5324> `_ ) * enable building ScaLAPACK in parallel with enhanced ScaLAPACK easyblock ( `#5331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5331> `_ ) * include ``RInside`` extension in R 3.4.0 easyconfig ( `#5354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5354> `_ ) * clean up configure options that are now handled by R easyblock ( `#5478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5478> `_ , `#5485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5485> `_ ) * update Octave easyconfigs to use Octave easyblock, add extensions for latest Octave versions ( `#5484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5484> `_ , `#5503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5503> `_ , `#5507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5507> `_ ) * add ``Log4perl`` extension to Perl 5.26.0 easyconfigs ( `#5511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5511> `_ ) * various bug fixes, including: * add missing extensions required by MultiQC & stick to networkx 1.11 ( `#5240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5240> `_ ) * disable ``optarch`` when using Intel compilers and enable tests in all libxc easyconfigs ( `#5256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5256> `_ , `#5257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5257> `_ ) * avoid downloads when installing matplotlib 2.1.0 w/ Python 2.7.14 ( `#5267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5267> `_ ) * fix ``$CPATH`` in recent libffi easyconfigs + enhance sanity check & add checksum ( `#5271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5271> `_ ) * use Github source URL, run ``autogen.sh`` + include Autotools build dep for numactl ( `#5286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5286> `_ , `#5296 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5296> `_ , `#5297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5297> `_ , `#5299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5299> `_ , `#5302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5302> `_ ) * add hwloc to GROMACS dependencies ( `#5295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5295> `_ ) * fix ``source_urls`` (& ``sources`` spec) for GATE ( `#5367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5367> `_ ) * consistently add Autotools build dep in recent netCDF easyconfigs ( `#5394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5394> `_ ) * fix check in test suite for binutils build dep when ``GCCcore`` used as toolchain ( `#5436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5436> `_ ) * libdap 3.19.1 checksum changed ( `#5473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5473> `_ ) * disable new rfkill feature in easyconfig for util-linux 2.31 since it requires a recent kernel ( `#5480 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5480> `_ ) * add missing PROJ dependency in recent GDAL easyconfigs ( `#5481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5481> `_ ) * fix name in TensorFlow easyconfigs (was 'TensorFlow') ( `#5495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5495> `_ ) * fix checksum for Szip 2.1.1 ( `#5517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5517> `_ ) * fix order of extensions for FSLeyes, add missing MarkupSafe (dep for Jinja2) ( `#5520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5520> `_ ) .. _release_notes_eb341: EasyBuild v3.4.1 (October 17th 2017) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * improve trace output for executed commands + drop requirement for ``--experimental`` for ``--trace`` ( `#2306 <https://github.com/easybuilders/easybuild-framework/pull/2306> `_ ) * add ``giolf`` toolchain definition: GCC, IntelMPI, OpenBLAS, (Sca)LAPACK and FFTW ( `#2310 <https://github.com/easybuilders/easybuild-framework/pull/2310> `_ ) * add support for ``--force-download`` and ``--ignore-checksums`` ( `#2313 <https://github.com/easybuilders/easybuild-framework/pull/2313> `_ , `#2314 <https://github.com/easybuilders/easybuild-framework/pull/2314> `_ ) * flesh out ``pypi_source_urls`` from ``derive_alt_pypi_url`` ( `#2319 <https://github.com/easybuilders/easybuild-framework/pull/2319> `_ ) * various bug fixes, including: * also check for use of ``--rebuild`` next to ``--force`` to skip sanity check with ``--module-only`` ( `#2307 <https://github.com/easybuilders/easybuild-framework/pull/2307> `_ ) * ensure ``$TMPDIR`` is set to a short path for OpenMPI v2.x ( `#2311 <https://github.com/easybuilders/easybuild-framework/pull/2311> `_ ) * guard ' ``module load`` ' commands in generated modules under ``--recursive-unload`` to avoid load storms ( `#2316 <https://github.com/easybuilders/easybuild-framework/pull/2316> `_ ) * correctly deal with use of special characters in description & co ( `#2320 <https://github.com/easybuilders/easybuild-framework/pull/2320> `_ ) * fix incorrect ``FFT_INC_DIR`` for Intel MKL ( `#2323 <https://github.com/easybuilders/easybuild-framework/pull/2323> `_ ) **easyblocks** * add generic ' ``SystemMPI`` ' easyblock ( `#1106 <https://github.com/easybuilders/easybuild-easyblocks/pull/1106> `_ , `#1261 <https://github.com/easybuilders/easybuild-easyblocks/pull/1261> `_ , `#1262 <https://github.com/easybuilders/easybuild-easyblocks/pull/1262> `_ ) * add software-specific easyblock for SAS ( `#1263 <https://github.com/easybuilders/easybuild-easyblocks/pull/1263> `_ ) * minor enhancements, including: * run ' ``wcleanAll`` ' or ' ``wcleanPlatform -all`` ' before building OpenFOAM ( `#780 <https://github.com/easybuilders/easybuild-easyblocks/pull/780> `_ , `#1258 <https://github.com/easybuilders/easybuild-easyblocks/pull/1258> `_ ) * enhance generic ' ``SystemCompiler`` ' easyblock ( `#1106 <https://github.com/easybuilders/easybuild-easyblocks/pull/1106> `_ ) * clean up ``--trace`` output for Python & Python packages ( `#1248 <https://github.com/easybuilders/easybuild-easyblocks/pull/1248> `_ ) * update Intel MPI easyblock to support 2018.* versions ( `#1253 <https://github.com/easybuilders/easybuild-easyblocks/pull/1253> `_ ) * add support for Intel MPI and Intel MKL to ScaLAPACK easyblock ( `#1255 <https://github.com/easybuilders/easybuild-easyblocks/pull/1255> `_ ) * enhance GCC easyblock to also put symlinks in place for ``cc`` / ``c++`` / ``f77`` / ``f95`` commands ( `#1256 <https://github.com/easybuilders/easybuild-easyblocks/pull/1256> `_ ) * various bug fixes, including: * allow that ' ``gcc -print-multiarch`` ' fails in icc easyblock ( `#1249 <https://github.com/easybuilders/easybuild-easyblocks/pull/1249> `_ ) * fix prefix subdirectory for older versions of icc (in particular 2011.3.174) ( `#1250 <https://github.com/easybuilders/easybuild-easyblocks/pull/1250> `_ ) * use ``remove_file`` rather than ``os.remove`` in generic ``IntelBase`` easyblock to correctly deal with broken symlinks ( `#1251 <https://github.com/easybuilders/easybuild-easyblocks/pull/1251> `_ ) * fix sanity check for MXNet easyblock + correctly detect unpacked source directory ( `#1257 <https://github.com/easybuilders/easybuild-easyblocks/pull/1257> `_ ) * avoid building CP2K twice due to incorrect attempt at running ' ``make clean`` ' first ( `#1266 <https://github.com/easybuilders/easybuild-easyblocks/pull/1266> `_ ) **easyconfigs** * added easyconfigs for new toolchain ``giolf/2017b`` ( `#5140 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5140> `_ ) * added example easyconfig files for 13 new software packages: * ASAP3 ( `#5200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5200> `_ ), Albacore ( `#5153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5153> `_ ), CatMAP ( `#5225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5225> `_ ), DLCpar ( `#5209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5209> `_ ), FSLeyes ( `#5192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5192> `_ ), IQ-TREE ( `#3695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3695> `_ ), NEST ( `#5515 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5515> `_ ), nanonet ( `#5149 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5149> `_ ), OMA ( `#5211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5211> `_ ), , oxford_asl ( `#5193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5193> `_ ), QEMU ( `#5220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5220> `_ ), REMORA ( `#5159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5159> `_ ), SAS ( `#5208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5208> `_ ), supermagic ( `#5187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5187> `_ ) * added additional easyconfigs for various supported software packages, including: * Anaconda2/3 4.4.0, Blender 2.79, Boost 1.65.1, CMake 3.9.4, FFmpeg 3.3.4, GCC 5.5.0, h5py 2.7.1, Keras 2.0.8, matplotlib 2.1.0, mympingpong 0.8.0, OpenCV 3.3.0, OpenFOAM-Extend 4.0, OpenMPI 2.1.2 + 3.0.0, Pillow 4.3.0, Python 2.7.14 + 3.6.3, SAMtools 1.6, scikit-image 0.13.0, scikit-learn 0.19.0, Tensorflow 1.3.0, vsc-mympirun 4.0.2 * minor enhancements, including: * add ``xkeyboard-config`` component in X11 bundle ( `#5066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5066> `_ ) * clean up use of ``wcleanAll`` in OpenFOAM-Extend easyconfigs, now handled by OpenFOAM easyblock ( `#5131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5131> `_ ) * also install ``run_rcorrector.pl`` with Rcorrector ( `#5135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5135> `_ ) * add SHA256 checksum to PyCUDA easyconfig ( `#5154 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5154> `_ ) * fix/improve description in HDF5 easyconfigs ( `#5182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5182> `_ ) * include heatmap3 extension for R 3.4.0 ( `#5185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5185> `_ ) * add ComplexHeatmap to Bioconductor 3.5 bundle + dep pkgs in R 3.4.0 easyconfig ( `#5195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5195> `_ ) * various bug fixes, including: * fix source URLs for AUGUSTUS 3.2.3 ( `#5119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5119> `_ ) * fix building Bison 2.5 on systems with recent glibc ( `#5130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5130> `_ ) * also consider ``rdma-core-devel`` as alternative to ``libibverbs-devel`` OS dependency ( `#5132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5132> `_ ) * consistently use empty toolchain version in icc & ifort easyconfigs to ensure that GCC(core) dep is loaded during installation ( `#5133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5133> `_ , `#5134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5134> `_ ) * add patches for Boost 1.64.0 to fix known issues ( `#5148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5148> `_ ) * remove PyCUDA easyconfig for ``intel/2017a`` , doesn't work due to incompatibility between GCC 6.3.0 & CUDA 8 ( `#5156 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5156> `_ ) * add missing Perl extensions in easyconfig for Worker 1.6.7 ( `#5157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5157> `_ ) * fix checksums for packages that download from ``github.com/x/y/archive`` ( `#5162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5162> `_ ) * add missing libpng dependency to g2lib-1.4.0 easyconfig using intel-2017a ( `#5196 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5196> `_ ) * fix source_urls for Szip 2.1 & include SHA256 checksum ( `#5206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5206> `_ ) * remove unneeded ``--with-fft-incs`` configure option for ABINIT ( `#5207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5207> `_ ) * disable optarch for libjpeg-turbo 1.5.1 built with ``intel/2017a`` ( `#5214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5214> `_ ) * update ``$R_LIBS`` in plotly easyconfig ( `#5215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5215> `_ ) * include NLopt as a dependency in R easyconfigs that include ``nloptr`` as extension ( `#5217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5217> `_ ) .. _release_notes_eb340: EasyBuild v3.4.0 (September 10th 2017) -------------------------------------- feature release **framework** * various enhancements, including: * add support for backing up modules via ``--backup-modules`` ( `#2134 <https://github.com/easybuilders/easybuild-framework/pull/2134> `_ ) * enabled automatically with ``--module-only`` and ``--skip`` * see also http://easybuild.readthedocs.io/en/latest/Backup_modules.html * add support for ``--search-paths`` to extend list of locations considered by ``--search`` / ``-S`` ( `#2255 <https://github.com/easybuilders/easybuild-framework/pull/2255> `_ ) * include ``userInGroup`` check in Lua modules when installation is group-restricted ( `#2274 <https://github.com/easybuilders/easybuild-framework/pull/2274> `_ ) * add experimental support for ' ``eb --trace`` ' ( `#2285 <https://github.com/easybuilders/easybuild-framework/pull/2285> `_ ) * see also http://easybuild.readthedocs.io/en/latest/Tracing_progress.html * add support for ' ``eb --inject-checksums`` ' ( `#2286 <https://github.com/easybuilders/easybuild-framework/pull/2286> `_ , `#2292 <https://github.com/easybuilders/easybuild-framework/pull/2292> `_ , `#2293 <https://github.com/easybuilders/easybuild-framework/pull/2293> `_ ) * see also http://easybuild.readthedocs.io/en/latest/Writing_easyconfig_files.html#adding-or-replacing-checksums-using-inject-checksums * add support for ``append_paths`` in module generator ( `#2294 <https://github.com/easybuilders/easybuild-framework/pull/2294> `_ ) * various bug fixes, including: * strip provided GitHub token of spaces in ``--install-github-token`` ( `#2270 <https://github.com/easybuilders/easybuild-framework/pull/2270> `_ ) * remove ' ``provides`` ' line from ``setup.py`` ( `#2275 <https://github.com/easybuilders/easybuild-framework/pull/2275> `_ ) * pass down stdin in ' ``import`` ' check for extensions during sanity check ( `#2276 <https://github.com/easybuilders/easybuild-framework/pull/2276> `_ ) * make sure location to 'eb' installed during stage 1 is included in ``$PATH`` during stage 2 of bootstrap procedure ( `#2281 <https://github.com/easybuilders/easybuild-framework/pull/2281> `_ ) * make resolve_path robust against ``None`` path being provided ( `#2282 <https://github.com/easybuilders/easybuild-framework/pull/2282> `_ ) * ensure clean error message on easyconfig file parse failure ( `#2290 <https://github.com/easybuilders/easybuild-framework/pull/2290> `_ ) * fix regex to avoid sucking up additional lines prior to module file path in ``modulefile_path`` ( `#2291 <https://github.com/easybuilders/easybuild-framework/pull/2291> `_ ) * fix error message when ``--use-ccache`` is used but ``ccache`` is not available in ``$PATH`` ( `#2295 <https://github.com/easybuilders/easybuild-framework/pull/2295> `_ ) **easyblocks** * minor enhancements, including: * update Siesta easyblock for versions 4.0.1 and 4.1-b3 ( `#1218 <https://github.com/easybuilders/easybuild-easyblocks/pull/1218> `_ ) * updates GAMESS-US easyblock for version 20170420R1 + move ``ddikick.x`` when ``ddi_comm`` is set to ' ``sockets`` ' ( `#1221 <https://github.com/easybuilders/easybuild-easyblocks/pull/1221> `_ ) * update MRtrix easyblock for 3.0 & beyond + use ``copy`` function ( `#1230 <https://github.com/easybuilders/easybuild-easyblocks/pull/1230> `_ ) * update ROOT easyblock to support recent versions that require using CMake, add sanity check, clean up/enhance ``make_module*`` ( `#1236 <https://github.com/easybuilders/easybuild-easyblocks/pull/1236> `_ ) * enhance icc easyblock to include multipath include dir in ``$CPATH`` ( `#1237 <https://github.com/easybuilders/easybuild-easyblocks/pull/1237> `_ , `#1242 <https://github.com/easybuilders/easybuild-easyblocks/pull/1242> `_ ) * various bug fixes, including: * use ``plumed-patch`` command rather than ' ``plumed patch`` ' in GROMACS easyblock ( `#1212 <https://github.com/easybuilders/easybuild-easyblocks/pull/1212> `_ ) * remove ' ``provides`` ' line from ``setup.py`` ( `#1217 <https://github.com/easybuilders/easybuild-easyblocks/pull/1217> `_ ) * fixed wrong use of ``build_type`` in ``self.cfg`` in WRF easyblock that resulted in an raised exception ( `#1220 <https://github.com/easybuilders/easybuild-easyblocks/pull/1220> `_ ) * added a call to super ``post_install_step`` in CUDA easyblock ( `#1226 <https://github.com/easybuilders/easybuild-easyblocks/pull/1226> `_ ) * fix ``$MCRROOT`` definition in generated module file under ``--module-only`` in MCR easyblock ( `#1228 <https://github.com/easybuilders/easybuild-easyblocks/pull/1228> `_ ) * fix permissions for directories in SuiteSparse ( `#1238 <https://github.com/easybuilders/easybuild-easyblocks/pull/1238> `_ ) * fix function signature for ``fetch_extension_sources`` in OCaml easyblock ( `#1240 <https://github.com/easybuilders/easybuild-easyblocks/pull/1240> `_ ) **easyconfigs** * added easyconfigs for ``foss/2017b`` and ``intel/2017b`` common toolchains ( `#4768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4768> `_ ), ( `#4618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4618> `_ ) * added new easyconfigs for existing toolchains: * ``iomkl/2017b`` ( `#5097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5097> `_ ) * added example easyconfig files for 31 new software packages: * BAMM ( `#4650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4650> `_ ), BamM ( `#4650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4650> `_ ), bcl2fastq2 ( `#4902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4902> `_ ), CGNS ( `#5078 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5078> `_ ), CLAPACK ( `#5096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5096> `_ ), CLISP ( `#4926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4926> `_ , `#4986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4986> `_ ), cadaver ( `#4873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4873> `_ ), destiny ( `#5009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5009> `_ ), GroopM ( `#4650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4650> `_ ), Lucene-Geo-Gazetteer ( `#5064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5064> `_ ), libffcall ( `#4850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4850> `_ ), libsigsegv ( `#4840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4840> `_ ), MERCKX ( `#5056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5056> `_ ), minimap2 ( `#4991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4991> `_ ), ncompress ( `#4852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4852> `_ ), OpenNLP ( `#5059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5059> `_ , `#5061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5061> `_ ), OpenRefine ( `#5058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5058> `_ ), PHAST ( `#5096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5096> `_ ), PYTHIA ( `#5083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5083> `_ ), ParallelIO ( `#5071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5071> `_ ), PnetCDF ( `#5071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5071> `_ ), plotly ( `#5010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5010> `_ ), QML ( `#5101 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5101> `_ ), Quorum ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), Rcorrector ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), SCnorm ( `#5008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5008> `_ ), SOAPdenovo-Trans ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), Shannon ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), Tika ( `#5063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5063> `_ ), UNAFold ( `#4997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4997> `_ ), VERSE ( `#4843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4843> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.65.0, binutils 2.29, GAMESS-US 20170420-R1, GCC(core) 7.2.0, gzip 1.8, HDF5 1.8.19, LLVM 4.0.1, MRtrix 3.0_RC2, Perl 5.26.0, ROOT 6.10.04, Spark 2.2.0 * minor enhancements, including: * add checksums to Perl 5.24.1 easyconfigs ( `#4973 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4973> `_ , `#4992 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4992> `_ ) * add additional extensions for R 3.4.0 and Bioconductor 3.5 bundle ( `#5007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5007> `_ , `#5028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5028> `_ , `#5029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5029> `_ , `#5062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5062> `_ , `#5079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5079> `_ ) * also define ``$INCLUDEPATH`` and ``$LIBRARY_PATH`` in Tesla-Deployment-Kit easyconfig ( `#5018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5018> `_ ) * add check to see whether binutils is included as build dep when GCCcore toolchain is used ( `#5084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5084> `_ ) * various bug fixes, including: * added Rmpi patch file for R built with intel toolchains incl. impi 5.x ( `#4623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4623> `_ ) * use single-line description in ``setup.py`` ( `#4881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4881> `_ ) * fix version and source for Seurat + add extensions required by Seurat in R 3.4.0 easyconfig ( `#4889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4889> `_ ) * add zlib as dependency to util-linux easyconfigs ( `#4900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4900> `_ , `#4998 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4998> `_ ) * use ``modextrapaths`` instead of ``modextravars`` in OpenMM easyconfig ( `#4903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4903> `_ ) * update deprecated PLINK urls ( `#4920 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4920> `_ , `#5006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5006> `_ ) * fix ``moduleclass`` for Cookiecutter ( `#4947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4947> `_ ) * fix order of OpenMPI dependency in ``iomkl/2016.09*`` easyconfigs, must come after icc/ifort ( `#5024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5024> `_ ) * fix typo in comment in util-linux easyconfigs & add SHA256 checksums ( `#5052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5052> `_ ) * remove superfluous ``$CPATH`` update in GLib 2.44.0 easyconfig ( `#5053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5053> `_ ) * update ncurses to not build a separate libtinfo but provide a soft link instead + force linking to ncurses in libreadline ( `#5067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5067> `_ , `#5074 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5074> `_ ) * include Autotools as build dep for netCDF ( `#5077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5077> `_ ) * add missing binutils build dep for texinfo ( `#5099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5099> `_ ) .. _release_notes_eb331: EasyBuild v3.3.1 (July 12th 2017) --------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for ' ``allow_prepend_abs_path`` ' easyconfig parameter ( `#2254 <https://github.com/easybuilders/easybuild-framework/pull/2254> `_ ) * support for ``--merge-pr`` ( `#2266 <https://github.com/easybuilders/easybuild-framework/pull/2266> `_ ) * various bug fixes, including: * resolve symlinks to location of ' ``eb`` ' in ``get_paths_for`` ( `#2248 <https://github.com/easybuilders/easybuild-framework/pull/2248> `_ ) * fall back to checking location relative to ' ``eb`` ' location in ``find_eb_script`` ( `#2249 <https://github.com/easybuilders/easybuild-framework/pull/2249> `_ ) * respect ``--suffix-modules-path`` value for user-specific module path extensions ( `#2250 <https://github.com/easybuilders/easybuild-framework/pull/2250> `_ ) * update EasyBuild bootstrap script to download ``distribute`` tarball from http://easybuilders.github.io/easybuild/files ( `#2256 <https://github.com/easybuilders/easybuild-framework/pull/2256> `_ ) * fix default target GitHub account/organisation for ``--new-pr`` & co + fix tests that got broken by migration to github.com/easybuilders ( `#2258 <https://github.com/easybuilders/easybuild-framework/pull/2258> `_ ) * fix checking for new easyconfigs in ``copy_easyconfigs`` , pick up specified commit message as PR title if none was provided ( `#2259 <https://github.com/easybuilders/easybuild-framework/pull/2259> `_ ) * get rid of references to ``hpcugent`` after move to github.com/easybuilders ( `#2261 <https://github.com/easybuilders/easybuild-framework/pull/2261> `_ ) * automatically enable ``--ignore-osdeps`` under ``--new-pr`` and ``--update-pr`` ( `#2262 <https://github.com/easybuilders/easybuild-framework/pull/2262> `_ ) **easyblocks** * minor enhancements, including: * enhance HDF5 easyblock: define ``$HDF5_DIR`` & include ``-DMPICH_IGNORE_CXX_SEEK`` in ``$CXXFLAGS`` ( `#1200 <https://github.com/easybuilders/easybuild-easyblocks/pull/1200> `_ ) * consistently pass down (named) arguments in ``prepare_step`` , and check for it in the tests ( `#1202 <https://github.com/easybuilders/easybuild-easyblocks/pull/1202> `_ ) * remove no longer supported ``VersionIndependentPythonPackage`` generic easyblock ( `#1202 <https://github.com/easybuilders/easybuild-easyblocks/pull/1202> `_ ) * update ABAQUS easyblock for recent versions, incl. support for installing hotfixes ( `#1203 <https://github.com/easybuilders/easybuild-easyblocks/pull/1203> `_ ) * get rid of references to ' ``hpcugent`` ' organisation after move to github.com/easybuilders ( `#1206 <https://github.com/easybuilders/easybuild-easyblocks/pull/1206> `_ ) * make Boost easyblock fully aware of ``(pre)configopts`` , ``(pre)buildopts`` and ``(pre)installopts`` ( `#1207 <https://github.com/easybuilders/easybuild-easyblocks/pull/1207> `_ ) * drop check for ' ``ipython`` ' in sanity check of Anaconda easyblock, to also support Miniconda ( `#1210 <https://github.com/easybuilders/easybuild-easyblocks/pull/1210> `_ ) **easyconfigs** * added example easyconfig files for 6 new software packages: * FastME ( `#4811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4811> `_ ), geopy ( `#4821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4821> `_ ), Miniconda2 ( `#4841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4841> `_ ), ngmlr ( `#4818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4818> `_ ), OpenCoarrays ( `#4799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4799> `_ ), Seurat ( `#4832 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4832> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2017, GCC(core) 6.4.0, Keras 2.0.5, NCBI-Toolkit 18.0.0, numpy 1.13.0, Tensorflow 1.2.0 * minor enhancements, including: * add ``SVG`` and ``Statistics::Basic`` to recent Perl versions ( `#4796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4796> `_ ) * remove ``buildopts`` from HDF5 easyconfigs, taken care of by updated HDF5 easyblock now ( `#4779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4779> `_ ) * include ``joblib`` as extension in recent Python easyconfigs ( `#4805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4805> `_ ) * changed moduleclass in mpi4py to better reflect what it is and to not confuse HMNS ( `#4807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4807> `_ ) * get rid of references to ' ``hpcugent`` ' organisation after move to github.com/easybuilders ( `#4815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4815> `_ , `#4837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4837> `_ ) * add ``Rtsne`` as extension to R 3.4.0 ( `#4831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4831> `_ ) * various bug fixes, including: * use ``PYPI_SOURCE`` as source URL in Tensorflow easyconfigs ( `#4786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4786> `_ ) * fix ``homepage`` for skewer ( `#4791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4791> `_ ) * sync/fix ``source_urls`` & ``homepage`` in HDF5 easyconfigs ( `#4800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4800> `_ ) * fix ``ubsan`` error blocking build of GCCcore 6.1.0, 6.2.0, 6.3.0 with system GCC 7.1 ( `#4813 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4813> `_ ) .. _release_notes_eb330: EasyBuild v3.3.0 (June 26th 2017) --------------------------------- feature release **framework** * various enhancements, including: * clean up easyconfigs that are copied for inclusion in pull request ( `#2197 <https://github.com/easybuilders/easybuild-framework/pull/2197> `_ , `#2227 <https://github.com/easybuilders/easybuild-framework/pull/2227> `_ ) * use devel logging where relevant in ``easybuild.tools.toolchain`` ( `#2198 <https://github.com/easybuilders/easybuild-framework/pull/2198> `_ ) * check exit code for executed ``module`` commands ( `#2200 <https://github.com/easybuilders/easybuild-framework/pull/2200> `_ ) * also copy patches to installation directory & easyconfigs archive along with easyconfig file ( `#2202 <https://github.com/easybuilders/easybuild-framework/pull/2202> `_ , `#2241 <https://github.com/easybuilders/easybuild-framework/pull/2241> `_ ) * add support for SHA256 checksums ( `#2215 <https://github.com/easybuilders/easybuild-framework/pull/2215> `_ ) * also auto-detect whether provided checksum is MD5 or SHA256 based on length (if not checksum type is specified) * add support for ``--enforce-checksums`` , to require availability of checksums for sources/patches * see http://easybuild.readthedocs.io/en/latest/Writing_easyconfig_files.html#source-files-patches-and-checksums * add support for renaming sources on download ( `#2223 <https://github.com/easybuilders/easybuild-framework/pull/2223> `_ ) * also involves deprecating use of 2-tuple elements in list of sources, see http://easybuild.readthedocs.io/en/latest/Deprecated-functionality.html#depr-sources-2-element-tuple * add support for ``--detect-loaded-modules`` ( `#2228 <https://github.com/easybuilders/easybuild-framework/pull/2228> `_ ) * give extensions access to ``module_generator`` of parent ( `#2229 <https://github.com/easybuilders/easybuild-framework/pull/2229> `_ ) * pass down additional arguments to ``copy_dir`` down to ``shutil.copytree`` ( `#2230 <https://github.com/easybuilders/easybuild-framework/pull/2230> `_ ) * avoid reloading already loaded modules that extend ``$MODULEPATH`` ( `#2232 <https://github.com/easybuilders/easybuild-framework/pull/2232> `_ ) * various bug fixes, including: * make sure test account & accompanying token is used in tests for ``github.py`` ( `#2220 <https://github.com/easybuilders/easybuild-framework/pull/2220> `_ , `#2224 <https://github.com/easybuilders/easybuild-framework/pull/2224> `_ ) * only use MPD for old versions of Intel MPI (<4.1) in ``mpi_cmd_for`` ( `#2221 <https://github.com/easybuilders/easybuild-framework/pull/2221> `_ ) * escape dots in package filename to ensure correct match in ``derive_alt_pypi_url`` ( `#2225 <https://github.com/easybuilders/easybuild-framework/pull/2225> `_ ) * fix ``GNU_SOURCE`` template by adding missing ``/gnu/`` ( `#2235 <https://github.com/easybuilders/easybuild-framework/pull/2235> `_ ) * catch exception ``shutil.Error`` in ``copy_file`` ( `#2239 <https://github.com/easybuilders/easybuild-framework/pull/2239> `_ ) * report full error and traceback on unhandled exception in test report ( `#2240 <https://github.com/easybuilders/easybuild-framework/pull/2240> `_ ) * fix ``--set-default-module`` flag ( `#2243 <https://github.com/easybuilders/easybuild-framework/pull/2243> `_ ) **easyblocks** * added easyblocks for MXNet ( `#1135 <https://github.com/easybuilders/easybuild-easyblocks/pull/1135> `_ ), Tkinter( `#1184 <https://github.com/easybuilders/easybuild-easyblocks/pull/1184> `_ ) * minor enhancements, including: * enhance sanity check for NCL ( `#1169 <https://github.com/easybuilders/easybuild-easyblocks/pull/1169> `_ , `#1179 <https://github.com/easybuilders/easybuild-easyblocks/pull/1179> `_ ) * enable building of shared FFTW libraries ( `#1180 <https://github.com/easybuilders/easybuild-easyblocks/pull/1180> `_ ) * include update statements for ``$CPATH`` and ``$*LIBRARY_PATH`` in generated module in numpy easyblock ( `#1183 <https://github.com/easybuilders/easybuild-easyblocks/pull/1183> `_ ) * stop using deprecated ' ``copytree`` ' function from ``easybuild.tools.filetools`` ( `#1185 <https://github.com/easybuilders/easybuild-easyblocks/pull/1185> `_ ) * update SAMtools easyblock for v0.1.17 ( `#1189 <https://github.com/easybuilders/easybuild-easyblocks/pull/1189> `_ ) * update MATLAB easyblock for 2016b & 2017a versions (adjust permissions and change dir) ( `#1182 <https://github.com/easybuilders/easybuild-easyblocks/pull/1182> `_ , `#1197 <https://github.com/easybuilders/easybuild-easyblocks/pull/1197> `_ ) * consider ``$EB_*_LICENSE_SERVER(_PORT)`` in MATLAB and ANSYS easyblocks ( `#1195 <https://github.com/easybuilders/easybuild-easyblocks/pull/1195> `_ ) * add ``omp_num_threads`` custom parameter in CP2K easyblock to allow defining ``$OMP_NUM_THREADS`` during testing ( `#1196 <https://github.com/easybuilders/easybuild-easyblocks/pull/1196> `_ ) * various bug fixes, including: * fix Siesta easyblock to enable and verify parallel build ( `#1186 <https://github.com/easybuilders/easybuild-easyblocks/pull/1186> `_ ) * fix bug in alias definition in impi easyblock for ``mpigxx`` , ``mpiicpc`` and ``mpiifort`` ( `#1192 <https://github.com/easybuilders/easybuild-easyblocks/pull/1192> `_ ) **easyconfigs** * enable automatic style checks in easyconfig tests ( `#2506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2506> `_ ) * added example easyconfig files for 28 new software packages: * ada ( `#4594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4594> `_ ), Aspera-CLI ( `#4635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4635> `_ ), AUGUSTUS ( `#4624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4624> `_ ), ada ( `#4594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4594> `_ ), Bio-SamTools ( `#4637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4637> `_ ), Bpipe ( `#4590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4590> `_ ), BUSCO ( `#4624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4624> `_ ), CNVnator ( `#4649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4649> `_ ), davix ( `#4755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4755> `_ ), EricScript ( `#4594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4594> `_ ), FUNWAVE-TVD ( `#4743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4743> `_ ), gmpy2 ( `#4609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4609> `_ ), gSOAP ( `#4755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4755> `_ ), libsndfile ( `#4628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4628> `_ ), lpsolve ( `#4264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4264> `_ ), LUMPY ( `#4682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4682> `_ ), MaSuRCA ( `#4706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4706> `_ ), modred ( `#4729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4729> `_ ), MXNet ( `#4765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4765> `_ ), NRGLjubljana ( `#4651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4651> `_ ), OrfM ( `#4703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4703> `_ ), Perl4-CoreLibs ( `#4670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4670> `_ ), prodigal ( `#4468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4468> `_ ), pydlpoly ( `#4756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4756> `_ ), SeqAn ( `#4603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4603> `_ ), sharutils ( `#4745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4745> `_ ), Spyder ( `#4627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4627> `_ ), Tkinter ( `#4620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4620> `_ ), VariantMetaCaller ( `#4632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4632> `_ ) * added new easyconfigs for existing toolchains: * ``gimkl/2017a`` ( `#4646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4646> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 8.2.2, BLAST+ 2.6.0, Bowtie2 2.3.2, FFmpeg 3.3.1, NCL 6.4.0, Rust 1.18.0, SAMtools 1.5, VTK 7.1.1 * minor enhancements, including: * use ' ``git diff --name-only`` ' and ``$TRAVIS_COMMIT_RANGE`` in Travis config to get list of changed files ( `#4606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4606> `_ , `#4619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4619> `_ ) * add tuneR, seewave, soundecology, vcfR extensions for R 3.4.0 (+ libsndfile as dep) ( `#4628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4628> `_ , `#4680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4680> `_ , `#4747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4747> `_ ) * also copy ``README`` for GapFiller ( `#4631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4631> `_ ) * enable inclusion of version symbol by using ``--enable-ld-version-script`` configure option for LibTIFF ( `#4639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4639> `_ ) * add SHA256 checksums for libpciaccess to discriminate from old tarballs that required running ``autogen.sh`` ( `#4688 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4688> `_ ) * fix ``NE_GLOBAL_DIR`` path for ne by also specifying ``PREFIX`` in ``buildopts`` ( `#4698 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4698> `_ ) * more (trivial) style fixes ( `#4761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4761> `_ ) * avoid use of ``import`` in ANSYS & MATLAB easyconfigs ( `#4762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4762> `_ ) * set ``$OMP_NUM_THREADS`` during CP2K test step via dedicated easyconfig parameter ( `#4763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4763> `_ ) * avoid use of ' ``import`` ' in BFAST easyconfigs, just strip of ' ``a`` ' from version ( `#4764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4764> `_ ) * add the docopt module to all Python 2017a easyconfigs ( `#4770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4770> `_ ) * stop using deprecated 2-element tuple format in sources, use equivalent dict format instead ( `#4774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4774> `_ ) * various bug fixes, including: * fix typo in statsmodels source url ( ``/sources/`` -> ``/source/`` ) ( `#4612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4612> `_ ) * add location to ``DotLib.pm`` to ``$PERL5LIB`` for SSPACE_Basic ( `#4638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4638> `_ ) * add missing ``/gnu/`` in ftpmirror.gnu.org ``source_urls`` , or use ``GNU_SOURCE`` where possible ( `#4653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4653> `_ ) * consistently use ``--with-harfbuzz=no`` configure option in freetype easyconfigs ( `#4668 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4668> `_ ) * use ``--with-x=yes`` in R easyconfigs that include X11 as a dependency ( `#4701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4701> `_ ) * remove ' ``4.0`` ' in tbb description ( `#4707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4707> `_ ) * add lib sanity check paths for Debian compatibility in nettle ( `#4722 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4722> `_ ) * fix source URLs for HDF5 ( `#4749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4749> `_ ) .. _release_notes_eb321: EasyBuild v3.2.1 (May 12th 2017) -------------------------------- bugfix/update release **framework** * various enhancements, including: * make hardcoded max ratio for failures in ``adjust_permissions`` configurable ( `#2213 <https://github.com/easybuilders/easybuild-framework/pull/2213> `_ ) * allow ``https://`` on direct download in sources ( `#2214 <https://github.com/easybuilders/easybuild-framework/pull/2214> `_ ) * various bug fixes, including: * bump version bootstrap script to sync with latest update ( `#2208 <https://github.com/easybuilders/easybuild-framework/pull/2208> `_ ) * fix crash during module generation when ' ``%`` ' character is used in description ( `#2209 <https://github.com/easybuilders/easybuild-framework/pull/2209> `_ ) **easyblocks** * added easyblock for Siesta ( `#1105 <https://github.com/easybuilders/easybuild-easyblocks/pull/1105> `_ ) * minor enhancements, including: * enhance GROMACS easyblock to build with PLUMED support ( `#1121 <https://github.com/easybuilders/easybuild-easyblocks/pull/1121> `_ ) * enhance NAMD easyblock: add OpenMP support, update for recent NAMD versions (2.12), fix compatibility with Tcl versions other than 8.5 ( `#1173 <https://github.com/easybuilders/easybuild-easyblocks/pull/1173> `_ ) **easyconfigs** * added example easyconfig files for 12 new software packages: * AdapterRemoval ( `#4509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4509> `_ ), blasr_libcpp ( `#4566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4566> `_ ), canu ( `#4473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4473> `_ ), enchant ( `#4567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4567> `_ ), hunspell ( `#4567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4567> `_ ), memkind ( `#4544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4544> `_ ), NLTK ( `#4565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4565> `_ ), pbbam ( `#4566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4566> `_ ), pbdagcon ( `#4566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4566> `_ ), pyenchant ( `#4567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4567> `_ ), Siesta ( `#4562 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4562> `_ ), xarray ( `#4556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4556> `_ ) * added new easyconfigs for existing toolchains: * goolfc 2017.01 ( `#4577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4577> `_ ) * added additional easyconfigs for various supported software packages, including: * HDF5 1.10.1, NAMD 2.12, OpenFOAM 4.1, pandas 0.20.1, ParaView 5.2.0, R 3.4.0, R-bundle-Bioconductor 3.5, Tensorflow 1.1.0 * minor enhancements, including: * update source URLs in libpciaccess easyconfigs ( `#3960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3960> `_ ) * enable use of double precision floating point in METIS 5.1.0 ``foss/2016a`` easyconfig ( `#4555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4555> `_ ) .. _release_notes_eb320: EasyBuild v3.2.0 (May 5th 2017) ------------------------------- feature release **framework** * various enhancements, including: * add support for marking installed module file as new default version using ``--set-default-module`` ( `#2110 <https://github.com/easybuilders/easybuild-framework/pull/2110> `_ ) * additional easyconfig parameters for documentation: ``docpaths`` , ``examples`` , ``site_contacts`` , ``upstream_contacts`` , ``usage`` ( `#2113 <https://github.com/easybuilders/easybuild-framework/pull/2113> `_ ) * add support for ``--allow-use-as-root-and-accept-consequences`` ( `#2123 <https://github.com/easybuilders/easybuild-framework/pull/2123> `_ ) * enable extraction of patches from compressed files before applying them ( `#2128 <https://github.com/easybuilders/easybuild-framework/pull/2128> `_ ) * alphabetically sort functions and methods in ``module_generator`` module ( `#2132 <https://github.com/easybuilders/easybuild-framework/pull/2132> `_ ) * introduce function ``ensure_iterable_license_specs`` ( `#2157 <https://github.com/easybuilders/easybuild-framework/pull/2157> `_ ) * bump Travis config to use Lmod 7.4 ( `#2176 <https://github.com/easybuilders/easybuild-framework/pull/2176> `_ ) * implement ``copy_dir`` function in ``filetools`` ( `#2177 <https://github.com/easybuilders/easybuild-framework/pull/2177> `_ ) * clarify error message when no software-specific easyblock was found ( `#2178 <https://github.com/easybuilders/easybuild-framework/pull/2178> `_ ) * make ``log.deprecated`` more verbose by also printing deprecation warnings to stderr ( `#2179 <https://github.com/easybuilders/easybuild-framework/pull/2179> `_ ) * add ``copy`` function to ``filetools`` for easy copying of lists of files/directories ( `#2180 <https://github.com/easybuilders/easybuild-framework/pull/2180> `_ ) * add support for ``--verify-easyconfig-filenames`` ( `#2185 <https://github.com/easybuilders/easybuild-framework/pull/2185> `_ ) * add support for ``--package-tool-options`` ( `#2187 <https://github.com/easybuilders/easybuild-framework/pull/2187> `_ ) * take into account inline trailing comments in ``fetch_parameters_from_easyconfig`` ( `#2192 <https://github.com/easybuilders/easybuild-framework/pull/2192> `_ ) * add support for customising easyconfig parameters on a per-extension basis ( `#2194 <https://github.com/easybuilders/easybuild-framework/pull/2194> `_ ) * perform sanity check after stage 2 of EasyBuild bootstrap script, module file should be in place ( `#2199 <https://github.com/easybuilders/easybuild-framework/pull/2199> `_ ) * change order in which module commands are checked, consider Lmod first ( `#2201 <https://github.com/easybuilders/easybuild-framework/pull/2201> `_ ) * various bug fixes, including: * fix use of compiler-specific ``--optarch`` value in combination with ``--job`` ( `#2183 <https://github.com/easybuilders/easybuild-framework/pull/2183> `_ ) * call ``run_all_steps`` in regtest mode rather than running steps individually ( `#2203 <https://github.com/easybuilders/easybuild-framework/pull/2203> `_ ) **easyblocks** * added easyblocks for Doris ( `#1154 <https://github.com/easybuilders/easybuild-easyblocks/pull/1154> `_ , `#1161 <https://github.com/easybuilders/easybuild-easyblocks/pull/1161> `_ ), VMD ( `#1148 <https://github.com/easybuilders/easybuild-easyblocks/pull/1148> `_ ) and WRF-Fire ( `#1153 <https://github.com/easybuilders/easybuild-easyblocks/pull/1153> `_ , `#1159 <https://github.com/easybuilders/easybuild-easyblocks/pull/1159> `_ ) * minor enhancements, including: * update ``IntelBase`` , PGI and TotalView easyblocks to allow list of license files/servers via ' ``license_file`` ' easyconfig parameter ( `#1129 <https://github.com/easybuilders/easybuild-easyblocks/pull/1129> `_ ) * update Bowtie2 easyblock to set correct build options, copy more files, extend sanity check ( `#1146 <https://github.com/easybuilders/easybuild-easyblocks/pull/1146> `_ ) * added the option to build Boost with multi-threading support ( `#1147 <https://github.com/easybuilders/easybuild-easyblocks/pull/1147> `_ ) * allow libpng as OS dependency for WPS ( `#1150 <https://github.com/easybuilders/easybuild-easyblocks/pull/1150> `_ ) * extend Boost ``TIME_UTC`` patch to Boost versions <= 1.49.0 ( `#1152 <https://github.com/easybuilders/easybuild-easyblocks/pull/1152> `_ ) * enhance Python sanity check to check for Tkinter support if Tk is included as a dependency ( `#1156 <https://github.com/easybuilders/easybuild-easyblocks/pull/1156> `_ , `#1158 <https://github.com/easybuilders/easybuild-easyblocks/pull/1158> `_ ) * add support to install Python extensions without unpacking ( `#1166 <https://github.com/easybuilders/easybuild-easyblocks/pull/1166> `_ ) * enhance TBB easyblock to also support building open source versions ( `#1168 <https://github.com/easybuilders/easybuild-easyblocks/pull/1168> `_ ) * various bug fixes, including: * update FFTW easyblock: ``--enable-avx-128-fma`` depends on the ``fma4`` CPU feature (AMD), not ``fma`` ( `#1142 <https://github.com/easybuilders/easybuild-easyblocks/pull/1142> `_ ) * fix problems when ``usempi`` not defined in toolchain in NAMD easyblock ( `#1162 <https://github.com/easybuilders/easybuild-easyblocks/pull/1162> `_ ) **easyconfigs** * added example easyconfig files for 34 new software packages: * ACTC ( `#4386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4386> `_ ), atomate ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), BreakDancer ( `#4455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4455> `_ ), bx-python ( `#4486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4486> `_ ), ClusterShell ( `#4432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4432> `_ ), custodian ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), DFTB+ ( `#4398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4398> `_ ), Doris ( `#4404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4404> `_ ), ED2 ( `#4402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4402> `_ ), FireWorks ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), GETORB ( `#4414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4414> `_ ), GapFiller ( `#4462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4462> `_ ), IPy ( `#4450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4450> `_ ), imbalanced-learn ( `#4373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4373> `_ ), ipyrad ( `#4507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4507> `_ ), libiconv ( `#4499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4499> `_ ), MultiQC ( `#3564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3564> `_ ), NLopt ( `#1750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1750> `_ ), Node-RED ( `#4542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4542> `_ ), PyCUDA ( `#4523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4523> `_ ), pymatgen-db ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), QuTiP ( `#4371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4371> `_ ), ROI_PAC ( `#4414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4414> `_ ), Rascaf ( `#4459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4459> `_ ), RepastHPC ( `#4395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4395> `_ ), rootpy ( `#4242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4242> `_ ), SSPACE_Basic ( `#4461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4461> `_ ), Sambamba ( `#4442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4442> `_ ), Spack ( `#4431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4431> `_ ), SpiceyPy ( `#4406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4406> `_ ), StaMPS ( `#4454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4454> `_ ), samblaster ( `#4435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4435> `_ ), VMD ( `#4391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4391> `_ ), WRF-Fire ( `#4403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4403> `_ ) * added additional easyconfigs for various supported software packages, including: * BamTools 2.4.1, Boost 1.64.0, GCC 7.1.0, IPython 5.3.0, LLVM 4.0.0, Mesa 17.0.2, Octave 4.2.1, OpenMPI 2.1.0, PETSc 3.7.5, PGI 17.3, Perl 5.24.1, Python 2.7.13 + 3.6.1 (incl. numpy 1.12.1, scipy 0.19.0), R 3.3.3, SuiteSparse 4.5.5 * various enhancements, including: * sync Bowtie2 easyconfigs, consistently use Bowtie2 easyblock ( `#4380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4380> `_ ) * use ``pl2`` source tarball for FFTW 3.3.6 which already includes patch for ``F03`` interface ( `#4529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4529> `_ ) * various bug fixes, including: * add missing XZ dep in easyconfig for libunwind 1.1 w/ ``GCC/4.9.2`` , sync ``sanity_check_paths`` across libunwind easyconfigs ( `#4369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4369> `_ ) * use ' ``use_fma4`` ' rather than deprecated ' ``use_fma`` ' easyconfig parameter in FFTW easyconfigs using ``intel`` toolchain ( `#4384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4384> `_ ) * fix ``pkgconfig`` patch for Qhull ( `#4451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4451> `_ ) * also use patch for METIS 5.1.0 to enable use of doubles in easyconfig for ``foss/2016b`` ( `#4467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4467> `_ ) * add dependency NLopt for R extension ``nloptr`` ( `#4481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4481> `_ ) * fix issue with ``configparser`` and ``backports`` namespace blocking inclusion of ``nbconvert`` with IPython ( `#4504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4504> `_ ) * change source_urls of pycrypto to encrypted ``https://pypi.python.org/...`` ( `#4505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4505> `_ ) * fix sources spec for HMMER 3.1b2 + minor style fixes + better sanity check ( `#4531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4531> `_ ) * also build IMB-IO in IMB 4.1 easyconfig using ``foss/2016a`` ( `#4539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4539> `_ ) .. _release_notes_eb312: EasyBuild v3.1.2 (March 20th 2017) ---------------------------------- bugfix/update release **framework** * fix broken packaging support by fixing ``run_cmd`` bug with ``shell=False`` ( `#2153 <https://github.com/easybuilders/easybuild-framework/pull/2153> `_ ) * minor enhancements, including: * implement ``change_dir`` function in ``filetools`` module ( `#2155 <https://github.com/easybuilders/easybuild-framework/pull/2155> `_ ) * use ``checker_state`` in trailing whitespace style check + add dedicated test ( `#2160 <https://github.com/easybuilders/easybuild-framework/pull/2160> `_ , `#2169 <https://github.com/easybuilders/easybuild-framework/pull/2169> `_ ) * consider both ``pycodestyle`` and ``pep8`` Python modules in style checks ( `#2161 <https://github.com/easybuilders/easybuild-framework/pull/2161> `_ ) * make bootstrap script aware various modules-related ``$EASYBUILD_*`` environment variables ( `#2170 <https://github.com/easybuilders/easybuild-framework/pull/2170> `_ ) * various bug fixes, including: * interpret statements that extend ``$MODULEPATH`` in ``modpath_extensions_for`` method ( `#2104 <https://github.com/easybuilders/easybuild-framework/pull/2104> `_ ) * also fixes inclusion of superfluous load statements in modules installed in user HMNS module tree (cfr. `#2172 <https://github.com/easybuilders/easybuild-framework/pull/2172> `_ ) * take into account that ``$PATH`` or ``$PYTHONPATH`` may be empty when running tests ( `#2149 <https://github.com/easybuilders/easybuild-framework/pull/2149> `_ ) * handle duplicates in ``--include-*`` ( `#2151 <https://github.com/easybuilders/easybuild-framework/pull/2151> `_ ) * exclude dependencies of dependencies that extend ``$MODULEPATH`` ( `#2152 <https://github.com/easybuilders/easybuild-framework/pull/2152> `_ ) * add ``ld.bfd`` to RPATH wrappers ( `#2156 <https://github.com/easybuilders/easybuild-framework/pull/2156> `_ ) * fix ``test_vsc_location`` , ``vsc.__file__`` may not be available when ``vsc`` is installed as a namespace package ( `#2159 <https://github.com/easybuilders/easybuild-framework/pull/2159> `_ ) * fix reported problems with scripts & docs tests ( `#2164 <https://github.com/easybuilders/easybuild-framework/pull/2164> `_ ) * fix ``--try-software-version`` using non-greedy matching + lookahead assertion, add test for ``tweak_one`` ( `#2166 <https://github.com/easybuilders/easybuild-framework/pull/2166> `_ ) * avoid creating empty modulefile directories when using ``modaltsoftname`` ( `#2168 <https://github.com/easybuilders/easybuild-framework/pull/2168> `_ ) * fix ``fftw_libs`` for MKL without interface libraries ( `#2171 <https://github.com/easybuilders/easybuild-framework/pull/2171> `_ ) **easyblocks** * add easyblock for QScintilla ( `#1127 <https://github.com/easybuilders/easybuild-easyblocks/pull/1127> `_ ) * minor enhancements, including: * auto-disable quad precision on POWER and ARM in FFTW ( `#1102 <https://github.com/easybuilders/easybuild-easyblocks/pull/1102> `_ , `#1138 <https://github.com/easybuilders/easybuild-easyblocks/pull/1138> `_ ) * allow \"download install\" for PETSc ( `#1114 <https://github.com/easybuilders/easybuild-easyblocks/pull/1114> `_ ) * modify Trinity sanity check for versions 2.3 and above ( `#1133 <https://github.com/easybuilders/easybuild-easyblocks/pull/1133> `_ ) * make unpacking Python extensions optional ( `#1134 <https://github.com/easybuilders/easybuild-easyblocks/pull/1134> `_ ) * update SAMtools easyblock for version 1.4 ( `#1139 <https://github.com/easybuilders/easybuild-easyblocks/pull/1139> `_ ) * various bug fixes, including: * reduce number of environment variables in ``icc`` and ``ifort`` modules ( `#1126 <https://github.com/easybuilders/easybuild-easyblocks/pull/1126> `_ , `#1143 <https://github.com/easybuilders/easybuild-easyblocks/pull/1143> `_ ) * also run tests with Tcl module syntax, Lua is the default in EasyBuild v3.x ( `#1128 <https://github.com/easybuilders/easybuild-easyblocks/pull/1128> `_ ) * rename member variable to avoid conflict with member of base class in PGI ( `#1137 <https://github.com/easybuilders/easybuild-easyblocks/pull/1137> `_ ) * don't set ``$FPATH`` environment variable in multiple easyblocks ( `#1140 <https://github.com/easybuilders/easybuild-easyblocks/pull/1140> `_ ) **easyconfigs** * add patch to FFTW 3.3.6 easyconfigs to fix MPI F03 interface ( `#4334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4334> `_ ) * note that this warrants rebuilding FFTW that is a part of ``foss/2017a`` * added example easyconfig files for 14 new software packages: * DBG2OLC ( `#4281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4281> `_ ), disambiguate ( `#4125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4125> `_ ), fqtrim ( `#4280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4280> `_ ), GFOLD ( `#4293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4293> `_ ), Kaiju ( `#4349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4349> `_ ), LSMS ( `#4335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4335> `_ ), L_RNA_scaffolder ( `#4282 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4282> `_ ), PileOMeth ( `#4289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4289> `_ ), psycopg2 ( `#4319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4319> `_ ), QGIS ( `#4307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4307> `_ , `#4332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4332> `_ ), QJson ( `#4305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4305> `_ ), QScintilla ( `#4306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4306> `_ , `#4313 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4313> `_ ), sketchmap ( `#4360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4360> `_ ), snaphu ( `#4362 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4362> `_ ) * added additional easyconfigs for various supported software packages, including GROMACS 2016.3, PGI 17.1, SAMtools 1.4 * various enhancements, including: * fix style in several easyconfigs ( `#4267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4267> `_ - `#4271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4271> `_ , `#4274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4274> `_ , `#4275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4275> `_ , `#4277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4277> `_ , `#4279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4279> `_ , `#4286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4286> `_ - `#4288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4288> `_ , `#4318 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4318> `_ ) * various bug fixes, including: * correctly set ``$PYTHONPATH`` in ROOT easyconfigs ( `#4239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4239> `_ , `#4331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4331> `_ ) * correct libjpeg turbo references in GDAL ( `#4276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4276> `_ ) * make sure that HDF5 provided via EasyBuild is used in BLASR easyconfigs ( `#4278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4278> `_ ) * fix issues with miRDeep2 installation ( `#4291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4291> `_ , `#4301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4301> `_ , `#4316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4316> `_ ) * also run tests with Tcl module syntax, Lua is the default in EasyBuild v3.x ( `#4315 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4315> `_ ) * fix PostgreSQL homepage + minor style fixes ( `#4318 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4318> `_ ) * detect use of ' ``$root`` ', which is not compatible with module files in Lua syntax ( `#4330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4330> `_ ) * fix ``homepage`` / ``source_urls`` for ViennaRNA ( `#4338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4338> `_ ) * pass down ``$FFLAGS`` via ``FLAGS_OPT`` in SWASH easyconfigs ( `#4341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4341> `_ ) * remove ``include/GL/wglext.h`` from Mesa sanity check ( `#4354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4354> `_ ) * rename ``S.A.G.E.`` to ``SAGE`` , can't have directories with trailing dot in Windows ( `#4368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4368> `_ ) .. _release_notes_eb311: EasyBuild v3.1.1 (March 7th 2017) --------------------------------- bugfix/update release **framework** * minor enhancements, including: * print more useful error message when no compiler-specific ``optarch`` flag is defined ( `#1950 <https://github.com/easybuilders/easybuild-framework/pull/1950> `_ ) * add ``ec`` parameter to ``expand_toolchain_load()`` ( `#2103 <https://github.com/easybuilders/easybuild-framework/pull/2103> `_ ) * clarify unstable/closed PR warning message ( `#2129 <https://github.com/easybuilders/easybuild-framework/pull/2129> `_ ) * various bug fixes, including: * ensure that ``$EBEXTSLIST*`` is also included in generated module under ``--module-only`` ( `#2112 <https://github.com/easybuilders/easybuild-framework/pull/2112> `_ ) * fix formatting issues in generated documentation for ``--list-software`` and ``--avail-easyconfig-licenses`` ( `#2121 <https://github.com/easybuilders/easybuild-framework/pull/2121> `_ ) * fix problem with backticks in description breaking ' ``fpm`` ' packaging command ( `#2124 <https://github.com/easybuilders/easybuild-framework/pull/2124> `_ ) * replace ``--enable-new-dtags`` with ``--disable-new-dtags`` instead of removing it in RPATH wrapper script ( `#2131 <https://github.com/easybuilders/easybuild-framework/pull/2131> `_ ) * only perform ``is_short_modname_for`` sanity check in ``det_short_module_name`` if ``modaltsoftname`` is available ( `#2138 <https://github.com/easybuilders/easybuild-framework/pull/2138> `_ ) * fix logic in ``make_module_dep`` w.r.t. excluding loads for toolchain & toolchain components ( `#2140 <https://github.com/easybuilders/easybuild-framework/pull/2140> `_ ) * skip ``test_check_style`` if ``pep8`` is not available ( `#2142 <https://github.com/easybuilders/easybuild-framework/pull/2142> `_ ) **easyblocks** * minor enhancements, including: * change the sanity check for MCR 2016b since the directory structure has changed ( `#1096 <https://github.com/easybuilders/easybuild-easyblocks/pull/1096> `_ ) * update NWChem easyblock for version 6.6.x and to handle different versions of OpenMPI for older versions ( `#1104 <https://github.com/easybuilders/easybuild-easyblocks/pull/1104> `_ ) * allow per-component ``source_urls`` with templating in ``Bundle`` easyblock ( `#1108 <https://github.com/easybuilders/easybuild-easyblocks/pull/1108> `_ ) * add slib to ``$LD_LIBRARY_PATH`` for itac ( `#1112 <https://github.com/easybuilders/easybuild-easyblocks/pull/1112> `_ ) * consider both ``lib`` and ``lib64`` in CGAL sanity check ( `#1113 <https://github.com/easybuilders/easybuild-easyblocks/pull/1113> `_ ) * add support for installing Intel tools that do not require license at installation time ( `#1117 <https://github.com/easybuilders/easybuild-easyblocks/pull/1117> `_ ) * required for Intel MPI and Intel MKL version 2017.2.174 * remove ``prefix_opt`` as custom easyconfig parameter for Qt easyblock ( `#1120 <https://github.com/easybuilders/easybuild-easyblocks/pull/1120> `_ ) * various bug fixes, including: * use ' ``-prefix <path>`` ' rather than ' ``--prefix=<path>`` ' for ``configure`` in Qt ( `#1109 <https://github.com/easybuilders/easybuild-easyblocks/pull/1109> `_ ) * fix indentation problem in PETSc easyblock ( `#1111 <https://github.com/easybuilders/easybuild-easyblocks/pull/1111> `_ ) **easyconfigs** * added example easyconfig files for 16 new software packages: * Caffe ( `#3667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3667> `_ ), DIAMOND ( `#4107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4107> `_ ), fmt ( `#4131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4131> `_ ), googletest ( `#4132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4132> `_ ), igraph ( `#4172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4172> `_ ), MEGA ( `#4202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4202> `_ ), meRanTK ( `#4175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4175> `_ ), meshio ( `#4178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4178> `_ ), miRDeep2 ( `#4229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4229> `_ , `#4255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4255> `_ ), OOMPA ( `#4211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4211> `_ ), PBSuite ( `#4224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4224> `_ , `#4230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4230> `_ ), randfold ( `#4217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4217> `_ ), skewer ( `#4246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4246> `_ ), Smoldyn ( `#4110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4110> `_ ), SpiecEasi ( `#4215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4215> `_ ), stress ( `#4180 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4180> `_ ) * added additional easyconfigs for various supported software packages, including: * binutils 2.28, Cantera 2.3.0, CGAL 4.9, GMP 6.1.2, IPython 5.2.2, JasPer 2.0.10, NWChem 6.6, matplotlib 2.0.0, PCRE 8.40, Qt5 5.8.0, Vim 8.0, X11 bundle v20170129, VTK 7.1.0, Yade 2017.01a * added new easyconfigs for existing toolchains: * ``iomkl/2017a`` ( `#4216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4216> `_ ), ``intel/2017.02`` ( `#4248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4248> `_ ) * various enhancements, including: * fix style in several easyconfigs ( `#4174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4174> `_ , `#4176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4176> `_ , `#4190 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4190> `_ , `#4233 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4233> `_ ) * add sanity check command to Yade easyconfig to make sure that ' ``import yade`` ' works, include bzip2 as dep ( `#4193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4193> `_ ) * add ``PDF::API2`` extension to Perl 5.24.0 easyconfigs + sync ``exts_list`` ( `#4221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4221> `_ ) * various bug fixes, including: * add Bison and gettext as build deps for X11 ( `#4111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4111> `_ ) * clean up dependencies in libdrm ( `#4113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4113> `_ ) * make sure Ghostscript picks up external libraries ( `#4118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4118> `_ ) * fix ippicv source download and library install for OpenCV v3.1.0 ( `#4126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4126> `_ ) * fix software name for OrthoMCL + modernise OrthoMCL easyconfigs ( `#4134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4134> `_ , `#4135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4135> `_ ) * get rid of backticks in gettext descriptions, causes problems when packaging with FPM ( `#4146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4146> `_ ) * remove duplicate sources specification in OpenMPI ( `#4150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4150> `_ ) * fix definition of ``buildopts`` / ``installopts`` in Cantera easyconfig ( `#4133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4133> `_ , `#4164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4164> `_ , `#4177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4177> `_ ) * use ``http://`` rather than ``ftp://`` source URLs in CFITSIO easyconfigs ( `#4167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4167> `_ ) * add patch for XZ 5.2.2 to include ``5.1.2alpha`` symbols required by ' ``rpm`` ' command on CentOS 7.x ( `#4179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4179> `_ ) * add patch for Boost v1.61-1.63 to fix problem with ``make_array`` / ``array_wrapper`` in Boost serialization library ( `#4192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4192> `_ ) * set ``CMAKE_PREFIX_PATH`` to ncurses install directory in CMake easyconfigs ( `#4196 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4196> `_ ) * switch to ``lowopt=True`` for libxc v2.2. * and v3.* ( `#4199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4199> `_ ) * remove custom ``sanity_check_paths`` , since it's identical to that used by the R easyblock ( `#4200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4200> `_ ) * fix ``version`` (& ``homepage`` ) in ea-utils easyconfigs ( `#4205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4205> `_ ) * remove ``--with-threads`` configure option in OpenMPI-2.* ( `#4213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4213> `_ ) * fix check for Szip library in configure script for netCDF 4.1.3 ( `#4226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4226> `_ ) * fix ``source_urls`` in several easyconfigs, including: * bsoft, cutadapt, EMBOSS, GnuTLS, ImageMagick, LibTIFF, Mercurial, netCDF, netCDF-Fortran, pigz, ROOT and Subversion ( `#4227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4227> `_ ) .. _release_notes_eb310: EasyBuild v3.1.0 (February 3rd 2017) ------------------------------------ feature release **framework** * various enhancements, including: * ARM: GCC optimal/generic architecture compiler flags ( `#1974 <https://github.com/easybuilders/easybuild-framework/pull/1974> `_ ) * add support for ``--check-style`` to check style in easyconfig files ( `#1618 <https://github.com/easybuilders/easybuild-framework/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-framework/pull/2038> `_ ) * add ``HOME`` and ``USER`` from env to available cfg file constants ( `#2063 <https://github.com/easybuilders/easybuild-framework/pull/2063> `_ ) * ``--optarch`` can now be specified on a toolchain basis ( `#2071 <https://github.com/easybuilders/easybuild-framework/pull/2071> `_ ) * implement ``get_cpu_features`` function in systemtools ( `#2074 <https://github.com/easybuilders/easybuild-framework/pull/2074> `_ , `#2078 <https://github.com/easybuilders/easybuild-framework/pull/2078> `_ ) * support use of ``linalg`` without MPI, add ``iimkl`` toolchain definition ( `#2082 <https://github.com/easybuilders/easybuild-framework/pull/2082> `_ ) * spoof HTTP request header with empty agent ( `#2083 <https://github.com/easybuilders/easybuild-framework/pull/2083> `_ ) * exclude dependencies of dependencies that extend $MODULEPATH in make_module_dep ( `#2091 <https://github.com/easybuilders/easybuild-framework/pull/2091> `_ ) * various bug fixes, including: * make ``fetch_github_token`` more robust against ``RuntimeError`` from ``keyring`` ( `#2070 <https://github.com/easybuilders/easybuild-framework/pull/2070> `_ ) * POWER: Fix ``--optarch=GENERIC`` for GCC ( `#2073 <https://github.com/easybuilders/easybuild-framework/pull/2073> `_ ) * fix docstring in toolchain class ( `#2075 <https://github.com/easybuilders/easybuild-framework/pull/2075> `_ ) * skip test cases involving ``.yeb`` if ``PyYAML`` is not installed, silence test in options subsuite ( `#2081 <https://github.com/easybuilders/easybuild-framework/pull/2081> `_ ) * fix traceback with ' ``eb --check-github`` ' if ``GitPython`` is not installed ( `#2085 <https://github.com/easybuilders/easybuild-framework/pull/2085> `_ ) * fix regex for determining list of patched files in GitHub diff ( `#2088 <https://github.com/easybuilders/easybuild-framework/pull/2088> `_ ) * modify robot so that it only appends dependencies of tweaked easyconfigs ( `#2090 <https://github.com/easybuilders/easybuild-framework/pull/2090> `_ ) * escape metacharacters in paths passed to ``re.compile`` in ``dry_run_set_dirs`` ( `#2098 <https://github.com/easybuilders/easybuild-framework/pull/2098> `_ ) * fix broken error message in ``get_toolchain_hierarchy`` + dedicated test case ( `#2099 <https://github.com/easybuilders/easybuild-framework/pull/2099> `_ ) **easyblocks** * new easyblock for FFTW ( `#1083 <https://github.com/easybuilders/easybuild-easyblocks/pull/1083> `_ ) * various enhancements, including: * update sanity check for flex 2.6.3, no more ``libfl_pic.a`` library ( `#1077 <https://github.com/easybuilders/easybuild-easyblocks/pull/1077> `_ ) * cleanup build before proceeding with full Boost ( `#1080 <https://github.com/easybuilders/easybuild-easyblocks/pull/1080> `_ ) * update CP2K easyblock: copy data dir, support version 4.1, support ELPA, fix psmp build with foss toolchain ( `#996 <https://github.com/easybuilders/easybuild-easyblocks/pull/996> `_ , `#1020 <https://github.com/easybuilders/easybuild-easyblocks/pull/1020> `_ , `#1043 <https://github.com/easybuilders/easybuild-easyblocks/pull/1043> `_ , `#1084 <https://github.com/easybuilders/easybuild-easyblocks/pull/1084> `_ ) * add sanity check support for OpenSSL 1.1 ( `#1087 <https://github.com/easybuilders/easybuild-easyblocks/pull/1087> `_ ) * support the latest changes in Inspector 2017 ( `#1047 <https://github.com/easybuilders/easybuild-easyblocks/pull/1047> `_ ) * update NEURON easyblock to support the lack of ``hoc_ed`` in 7.4 ( `#987 <https://github.com/easybuilders/easybuild-easyblocks/pull/987> `_ ) * add support for WPS 3.8 ( `#1079 <https://github.com/easybuilders/easybuild-easyblocks/pull/1079> `_ ) * also consider ``setuptools`` in ``EasyBuildMeta`` easyblock ( `#1093 <https://github.com/easybuilders/easybuild-easyblocks/pull/1093> `_ ) * various bug fixes, including: * (correctly) define ``$ROSETTA3_DB`` in Rosetta easyblock ( `#1092 <https://github.com/easybuilders/easybuild-easyblocks/pull/1092> `_ ) **easyconfigs** * added easyconfigs for ``foss/2017a`` and ``intel/2017a`` common toolchains ( `#3968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3968> `_ , `#3969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3969> `_ ) * added example easyconfig files for 16 new software packages: * ack ( `#3983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3983> `_ ), cclib ( `#4065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4065> `_ ), ConnectomeWorkbench ( `#3411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3411> `_ ), GroIMP ( `#3994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3994> `_ ), hyperspy ( `#3991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3991> `_ ), I-TASSER ( `#1216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1216> `_ ), ImageJ ( `#4023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4023> `_ , `#4062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4062> `_ ), libconfig ( `#4051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4051> `_ ), libspatialindex ( `#4002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4002> `_ ), mahotas ( `#3990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3990> `_ ), Minia ( `#3949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3949> `_ ), muParser ( `#4007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4007> `_ ), NetLogo ( `#3941 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3941> `_ ), QIIME ( `#3868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3868> `_ ), QwtPolar ( `#4019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4019> `_ ), Tensorflow ( `#4084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4084> `_ , `#4095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4095> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.62.0 + 1.63.0, CP2K 4.1, GSL 2.3, PLUMED 2.3.0, Qt5 5.7.1, WRF 3.8, WPS 3.8, Yade 2016.06a, zlib 1.2.11 * various enhancements, including: * update FFTW 3.3.5 easyconfigs to use FFTW easyblock & enable running of tests ( `#3985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3985> `_ ) * add FME extensions (+ deps) in R 3.3.1 easyconfigs ( `#4063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4063> `_ ) * various bug fixes, including: * add libxml2 dependency on HDF5 ( `#3759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3759> `_ ) * remove unnecessary dependency in libmatheval ( `#3988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3988> `_ ) * fix permissions on SWASH binaries ( `#4003 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4003> `_ ) * add conda-forge channel to perl-app-cpanminus ( `#4012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4012> `_ ) * add missing deps (libpthread-stubs, libpciaccess) to libdrm 2.4.70 ( `#4032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4032> `_ ) * modloadmsg style fixes in multiple easyconfigs ( `#4035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4035> `_ ) * include X11 as dep for Molden ( `#4082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4082> `_ ) * remove incorrect definition for $ROSETTA3_DB, now (correctly) defined via Rosetta easyblock ( `#4083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4083> `_ ) * fix source URLs for several easyconfigs, including: * arpack-ng 3.1.3 + 3.1.5 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), ChIP-Seq 1.5-1 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), Ghostscript 9.10, 9.14 + 9.16 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), Git 1.7.12, 1.8.2 + 1.8.3.1 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), HBase 1.0.2 ( `#4043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4043> `_ ), libevent 2.0.22 ( `#4037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4037> `_ ), libsodium 1.0.3 ( `#4046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4046> `_ ), lynx 2.8.7 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), Maven 3.2.2 and 3.3.3 ( `#4039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4039> `_ ), MEME 4.8.0 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), PCC 20131024 ( `#4044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4044> `_ ), S-Lang 2.3.0 ( `#4045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4045> `_ ), Spark 1.3.0 ( `#4041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4041> `_ ), splitRef 0.0.2 ( `#4040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4040> `_ ) .. _release_notes_eb302: EasyBuild v3.0.2 (December 22nd 2016) ------------------------------------- bugfix release **framework** * various bug fixes, including: * also skip dependencies of dependencies marked as external module in get_toolchain_hierarchy ( `#2042 <https://github.com/easybuilders/easybuild-framework/pull/2042> `_ ) * disable verbose setvar in modules.py ( `#2044 <https://github.com/easybuilders/easybuild-framework/pull/2044> `_ ) * force copying of easyconfigs in --new-pr/--update-pr, even when combined with -x ( `#2045 <https://github.com/easybuilders/easybuild-framework/pull/2045> `_ ) * fix verification of filename for easyconfigs used to resolve deps ( `#2051 <https://github.com/easybuilders/easybuild-framework/pull/2051> `_ ) * skip RPATH sanity check when toolchain did not use RPATH wrappers ( `#2052 <https://github.com/easybuilders/easybuild-framework/pull/2052> `_ ) * check whether file-like paths are readable before reading them in systemtools module ( `#2065 <https://github.com/easybuilders/easybuild-framework/pull/2065> `_ ) * various small enhancements, including: * add 'rpath' toolchain option to selectively disable use of RPATH wrappers ( `#2047 <https://github.com/easybuilders/easybuild-framework/pull/2047> `_ ) **easyblocks** * various enhancements, including: * enhance DL_POLY_Classic easyblock to support building with Plumed support (REVIEW) ( `#829 <https://github.com/easybuilders/easybuild-easyblocks/pull/829> `_ ) * make the Allinea easyblock search for the templates in the easyconfig paths ( `#1025 <https://github.com/easybuilders/easybuild-easyblocks/pull/1025> `_ ) * make FortranPythonPackage aware of (pre)buildopts ( `#1065 <https://github.com/easybuilders/easybuild-easyblocks/pull/1065> `_ ) * update sanity check for Mono to support recent versions ( `#1069 <https://github.com/easybuilders/easybuild-easyblocks/pull/1069> `_ ) * fix Eigen sanity check for latest version 3.3.1 ( `#1074 <https://github.com/easybuilders/easybuild-easyblocks/pull/1074> `_ ) * various bug fixes, including: * skip RPATH sanity check for binary installations ( `#1056 <https://github.com/easybuilders/easybuild-easyblocks/pull/1056> `_ ) * pass CXXFLAGS and LDFLAGS to Boost bjam ( `#1064 <https://github.com/easybuilders/easybuild-easyblocks/pull/1064> `_ ) * make pip ignore already installed versions of the package being installed ( `#1066 <https://github.com/easybuilders/easybuild-easyblocks/pull/1066> `_ ) * don't pass empty string as custom installopts for numpy in test_step ( `#1067 <https://github.com/easybuilders/easybuild-easyblocks/pull/1067> `_ ) * make the Rosetta EasyBlock work in --module-only mode ( `#1073 <https://github.com/easybuilders/easybuild-easyblocks/pull/1073> `_ ) **easyconfigs** * added example easyconfig files for 13 new software packages: * CryptoMiniSat ( `#3952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3952> `_ ), MATSim ( `#3902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3902> `_ ), Molcas ( `#2084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2084> `_ ), ne ( `#3376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3376> `_ ), psmc ( `#3910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3910> `_ ), PyCogent ( `#3897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3897> `_ ), PyNAST ( `#3897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3897> `_ ), RASPA2 ( `#3903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3903> `_ , `#3946 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3946> `_ ), SimPEG ( `#3876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3876> `_ ), SolexaQA++ ( `#3892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3892> `_ ), taco ( `#3882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3882> `_ ), UCLUST ( `#3896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3896> `_ ), USPEX ( `#3767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3767> `_ ) * added additional easyconfigs for various supported software packages, including: * Mono 4.6.2.7, PGI 16.10, ROOT 6.08.02 * various enhancements, including: * trivial style fixes ( `#3878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3878> `_ , `#3893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3893> `_ , `#3895 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3895> `_ ) * various bug fixes, including: * add X11 develop libs to ncview easyconfig ( `#3881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3881> `_ ) * fix source_urls in pkg-config easyconfigs ( `#3907 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3907> `_ ) * install numpy/scipy as .egg to ensure shadowing of numpy/scipy in parent Python installation ( `#3921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3921> `_ ) * fix broken source URL + homepage for Infernal ( `#3928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3928> `_ ) * fix test that verifies dumped easyconfig, take into account that dumped dependencies may include hardcoded dependency ( `#3932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3932> `_ ) * include libGLU as dependency in freeglut easyconfigs with recent Mesa ( `#3936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3936> `_ ) * add patch for FreeSurfer to fix issue with MATLAB 2013 ( `#3954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3954> `_ ) .. _release_notes_eb301: EasyBuild v3.0.1 (November 30th 2016) ------------------------------------- bugfix release **framework** * important changes * always use Intel-specific MPI compiler wrappers ( ``mpiicc`` , ``mpiicpc`` , ``mpiifort`` ) for toolchains using both Intel compilers and Intel MPI ( `#2005 <https://github.com/easybuilders/easybuild-framework/pull/2005> `_ ) * various small enhancements, including: * use ``setvar`` in ``modules.py`` to define environment variables ( `#2011 <https://github.com/easybuilders/easybuild-framework/pull/2011> `_ ) * include output of ``sanity_check_commands`` in the build log ( `#2020 <https://github.com/easybuilders/easybuild-framework/pull/2020> `_ ) * various bug fixes, including: * fix testing of bootstrap script in Travis config ( `#2003 <https://github.com/easybuilders/easybuild-framework/pull/2003> `_ ) * use correct module syntax in bootstrap script if Lmod is not used (i.e. Tcl) ( `#2007 <https://github.com/easybuilders/easybuild-framework/pull/2007> `_ ) * fix packaging issue with non-Python scripts in easybuild/scripts ( `#2015 <https://github.com/easybuilders/easybuild-framework/pull/2015> `_ ) * fixes issue where RPATH wrapper template script ( ``rpath_wrapper_template.sh.in`` ) was not included in the v3.0.0 release * make tests more robust against running headless ( `#2016 <https://github.com/easybuilders/easybuild-framework/pull/2016> `_ ) * avoid rewrapping already wrapped compiler/linker command with RPATH wrapper script ( `#2022 <https://github.com/easybuilders/easybuild-framework/pull/2022> `_ ) * fix ``log.error`` traceback due to ' ``raise EasyBuildError`` ' involving a ' ``%s`` ' in error message ( `#2024 <https://github.com/easybuilders/easybuild-framework/pull/2024> `_ ) * make sure ' ``modules_tool`` ' attribute is also defined for extensions ( `#2026 <https://github.com/easybuilders/easybuild-framework/pull/2026> `_ ) * only dump easyconfig with modified deps due to ``--minimal-toolchains`` to 'reprod' subdir of install dir ( `#2028 <https://github.com/easybuilders/easybuild-framework/pull/2028> `_ ) * avoid appending ' ``-h'`` to sanity check commands specified as a string ( `#2030 <https://github.com/easybuilders/easybuild-framework/pull/2030> `_ ) * fix bug in ``list_software_rst`` : always include version suffix regardless of value ( `#2032 <https://github.com/easybuilders/easybuild-framework/pull/2032> `_ ) **easyblocks** * various enhancements, including: * update SAMtools easyblock for recent versions ( `#1048 <https://github.com/easybuilders/easybuild-easyblocks/pull/1048> `_ ) * various bugfixes, including: * fix QuantumESPRESSO easyblock to handle gipaw correctly ( `#1041 <https://github.com/easybuilders/easybuild-easyblocks/pull/1041> `_ ) * always specify name of serial Fortran compiler to ALADIN, it already knows to use MPI wrapper commands ( `#1050 <https://github.com/easybuilders/easybuild-easyblocks/pull/1050> `_ ) **easyconfigs** * added example easyconfig files for 7 new software packages: * Cookiecutter ( `#3827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3827> `_ ), ETE ( `#3857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3857> `_ ), findhap ( `#3860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3860> `_ ), graphviz (Python bindings, `#3826 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3826> `_ ), LoFreq ( `#3856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3856> `_ ), PhyloBayes-MPI ( `#3859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3859> `_ ), XGBoost ( `#3849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3849> `_ ) * added additional easyconfigs for various supported software packages * various enhancements, including: * add ``ipywidgets`` and ``widgetsnbextension`` extensions to IPython 5.1.0 easyconfigs ( `#3818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3818> `_ , `#3823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3823> `_ ) * run dadi test suite as a sanity check command ( `#3858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3858> `_ ) * various bug fixes, including: * fix incorrect descriptions for ifort ( `#3817 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3817> `_ ) * fix ``modulename`` for Jinja2 and Pygments ( `#3823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3823> `_ ) * fix download URL in BLAST 2.2.26 easyconfig ( `#3861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3861> `_ ) .. _release_notes_eb300: EasyBuild v3.0.0 (November 16th 2016) ------------------------------------- feature release **framework** * backward-incompatible changes: * make robot always consider subtoolchains, even without ``--minimal-toolchains`` (but in reverse order) ( `#1973 <https://github.com/easybuilders/easybuild-framework/pull/1973> `_ ) * clean up behaviour that was deprecated for EasyBuild v3.0 ( `#1978 <https://github.com/easybuilders/easybuild-framework/pull/1978> `_ ) * change *default* config to use ``Lmod`` / ``Lua`` for modules tool/syntax, ``GC3Pie`` as job backend ( `#1985 <https://github.com/easybuilders/easybuild-framework/pull/1985> `_ ) * the minimal required version of Lmod was bumped to 5.8 ( `#1985 <https://github.com/easybuilders/easybuild-framework/pull/1985> `_ ) * major new features: * (experimental) support for RPATH linking via ``--rpath`` ( `#1942 <https://github.com/easybuilders/easybuild-framework/pull/1942> `_ ) * see http://easybuild.readthedocs.org/en/latest/RPATH-support.html * add support for ``--consider-archived-easyconfigs`` ( `#1972 <https://github.com/easybuilders/easybuild-framework/pull/1972> `_ ) * see http://easybuild.readthedocs.org/en/latest/Archived-easyconfigs.html * stabilize ``--new-pr`` and ``--update-pr`` ( `#1979 <https://github.com/easybuilders/easybuild-framework/pull/1979> `_ ) * see http://easybuild.readthedocs.org/en/latest/Integration_with_GitHub.html * various other small enhancements, including: * add support for ' ``devel`` ' log level ( `#1815 <https://github.com/easybuilders/easybuild-framework/pull/1815> `_ ) * make ``remove_file`` aware of ``--extended-dry-run`` + add dedicated unit test ( `#1932 <https://github.com/easybuilders/easybuild-framework/pull/1932> `_ ) * add support for filtering out setting/updating particular environment variables from generated modules ( `#1943 <https://github.com/easybuilders/easybuild-framework/pull/1943> `_ ) * see ``--filter-env-vars`` * clean up output of EasyBuild bootstrap script & add version ( `#1944 <https://github.com/easybuilders/easybuild-framework/pull/1944> `_ ) * improved ARM platform/CPU detection ( `#1953 <https://github.com/easybuilders/easybuild-framework/pull/1953> `_ ) * use ' ``0`` ' as letter dir for funky software names that don't start with a letter, e.g., ``3to2`` ( `#1954 <https://github.com/easybuilders/easybuild-framework/pull/1954> `_ ) * make bootstrap script aware of ``vsc-install`` for offline installation ( `#1955 <https://github.com/easybuilders/easybuild-framework/pull/1955> `_ ) * add support for ``blas_family()`` and ``lapack_family()`` methods in ``Toolchain`` instances ( `#1961 <https://github.com/easybuilders/easybuild-framework/pull/1961> `_ ) * make ``copy_file`` dry-run aware ( `#1963 <https://github.com/easybuilders/easybuild-framework/pull/1963> `_ ) * reorganise test easyconfigs to match structure in easyconfigs repo ( `#1970 <https://github.com/easybuilders/easybuild-framework/pull/1970> `_ ) * add a toolchain compiler option for enforcing IEEE-754 conformance ( `#1975 <https://github.com/easybuilders/easybuild-framework/pull/1975> `_ ) * support for ``intelcuda`` compiler toolchain ( `#1976 <https://github.com/easybuilders/easybuild-framework/pull/1976> `_ ) * check that each glob pattern matches at least one file ``expand_glob_paths`` (important for ``--include-*`` ) ( `#1980 <https://github.com/easybuilders/easybuild-framework/pull/1980> `_ ) * enhance bootstrap to auto-skip stage 0 in case a suitable setuptools is already available ( `#1946 <https://github.com/easybuilders/easybuild-framework/pull/1946> `_ , `#1984 <https://github.com/easybuilders/easybuild-framework/pull/1984> `_ ) * simplify ``GC3Pie`` version check ( `#1987 <https://github.com/easybuilders/easybuild-framework/pull/1987> `_ ) * include suggestion on how to change configuration w.r.t. modules tool/syntax ( `#1989 <https://github.com/easybuilders/easybuild-framework/pull/1989> `_ ) * various bug fixes, including: * fix test for ``find_easybuild_easyconfig`` ( `#1931 <https://github.com/easybuilders/easybuild-framework/pull/1931> `_ ) * remove existing module file under ``--force`` / ``--rebuild`` ( `#1933 <https://github.com/easybuilders/easybuild-framework/pull/1933> `_ ) * fix combining ``--search`` and ``--try-*`` ( `#1937 <https://github.com/easybuilders/easybuild-framework/pull/1937> `_ ) * fix appending to existing ``buildstats`` in ``FileRepository.add_easyconfig`` ( `#1948 <https://github.com/easybuilders/easybuild-framework/pull/1948> `_ ) * fix handling of iterate easyconfig parameters, restore them during cleanup ( `#1949 <https://github.com/easybuilders/easybuild-framework/pull/1949> `_ ) * fix filtering loads for (hidden) build deps from generated module ( `#1959 <https://github.com/easybuilders/easybuild-framework/pull/1959> `_ ) * handle multi-flag compiler options on all types of options ( `#1966 <https://github.com/easybuilders/easybuild-framework/pull/1966> `_ ) * fix ``--list-software`` by making ``letter_dir_for`` function aware of ' ``*`` ' wildcard name ( `#1969 <https://github.com/easybuilders/easybuild-framework/pull/1969> `_ ) * skip dependencies of toolchain marked as external modules when determining module hierarchy ( `#1977 <https://github.com/easybuilders/easybuild-framework/pull/1977> `_ ) * bump page limit in ``fetch_latest_commit_sha`` , spit out more meaningful error if too many branches were encountered ( `#1981 <https://github.com/easybuilders/easybuild-framework/pull/1981> `_ ) * fix CUDA-related issues in ``HierarchicalMNS`` ( `#1986 <https://github.com/easybuilders/easybuild-framework/pull/1986> `_ ) **easyblocks** * backwards incompatible changes: * remove deprecated GenomeAnalysisTK/GATK easyblock ( `#1001 <https://github.com/easybuilders/easybuild-easyblocks/pull/1001> `_ ) * remove deprecated ' ``get_netcdf_module_set_cmds`` ' function from netCDF easyblock ( `#1015 <https://github.com/easybuilders/easybuild-easyblocks/pull/1015> `_ ) * remove deprecated ' ``get_blas_lib`` ' function from LAPACK easyblock ( `#1016 <https://github.com/easybuilders/easybuild-easyblocks/pull/1016> `_ ) * remove ``QLogicMPI`` easyblock ( `#1023 <https://github.com/easybuilders/easybuild-easyblocks/pull/1023> `_ ) * new easyblock for installing Anaconda ( `#950 <https://github.com/easybuilders/easybuild-easyblocks/pull/950> `_ ) * add generic easyblock for Conda installations ( `#950 <https://github.com/easybuilders/easybuild-easyblocks/pull/950> `_ ) * various enhancements, including: * enable use of ``GCCcore`` as toolchain for Clang, fail if no GCC prefix is found ( `#1002 <https://github.com/easybuilders/easybuild-easyblocks/pull/1002> `_ ) * also build Boost MPI library in parallel ( `#1005 <https://github.com/easybuilders/easybuild-easyblocks/pull/1005> `_ , `#1038 <https://github.com/easybuilders/easybuild-easyblocks/pull/1038> `_ ) * enhance g2clib easyblock to allow to install 1.6.0 or higher ( `#1006 <https://github.com/easybuilders/easybuild-easyblocks/pull/1006> `_ ) * update QuantumESPRESSO easyblock to support packaging changes in 6.0 ( `#1007 <https://github.com/easybuilders/easybuild-easyblocks/pull/1007> `_ ) * add support to ``Scons`` generic easyblock to provide argument to specify installation prefix ( `#1008 <https://github.com/easybuilders/easybuild-easyblocks/pull/1008> `_ ) * update ``IntelBase`` and imkl easyblocks to handle the 2017 versions of compilers/imkl ( `#1012 <https://github.com/easybuilders/easybuild-easyblocks/pull/1012> `_ ) * leverage ``toolchain.linalg`` functionality in ScaLAPACK easyblock, use ``copy_file`` ( `#1014 <https://github.com/easybuilders/easybuild-easyblocks/pull/1014> `_ ) * allow netCDF-C++4 to be used with ESMF ( `#1019 <https://github.com/easybuilders/easybuild-easyblocks/pull/1019> `_ ) * update Advisor easyblock to support latest versions ( `#1021 <https://github.com/easybuilders/easybuild-easyblocks/pull/1021> `_ ) * update CBLAS easyblock to build with ``foss`` toolchain ( `#1024 <https://github.com/easybuilders/easybuild-easyblocks/pull/1024> `_ ) * update Gurobi easyblock to use ``copy_file`` ( `#1028 <https://github.com/easybuilders/easybuild-easyblocks/pull/1028> `_ ) * add support for giving ``/lib`` preference over ``/lib64`` & co in GCC installation ( `#1030 <https://github.com/easybuilders/easybuild-easyblocks/pull/1030> `_ , `#1035 <https://github.com/easybuilders/easybuild-easyblocks/pull/1035> `_ ) * enable installation of ``libiberty`` by default for binutils ( `#1030 <https://github.com/easybuilders/easybuild-easyblocks/pull/1030> `_ ) * avoid CMake fiddling with the RPATHs injected by EasyBuild via ``--rpath`` in CMakeMake and METIS easyblocks ( `#1031 <https://github.com/easybuilders/easybuild-easyblocks/pull/1031> `_ , `#1034 <https://github.com/easybuilders/easybuild-easyblocks/pull/1034> `_ ) * simplify scipy sanity check to make it more robust w.r.t. version updates ( `#1037 <https://github.com/easybuilders/easybuild-easyblocks/pull/1037> `_ ) * various bug fixes, including: * make sure ' ``None`` ' doesn't appear in modules generated with ``--module-only`` ( `#998 <https://github.com/easybuilders/easybuild-easyblocks/pull/998> `_ ) * fix ATLAS easyblock for non-x86 systems ( `#1003 <https://github.com/easybuilders/easybuild-easyblocks/pull/1003> `_ ) * fix ' ``usempi`` ' and ' ``with_mpi`` ' usage to allow for a serial build of Amber 16 ( `#1013 <https://github.com/easybuilders/easybuild-easyblocks/pull/1013> `_ ) * add both ``lib/python2.7/site-packages/{,wx-3.0-gtk2}`` to ``$PYTHONPATH`` for wxPython ( `#1018 <https://github.com/easybuilders/easybuild-easyblocks/pull/1018> `_ ) * only hard inject RPATH for ``/usr/lib*`` directories when building binutils with ``dummy`` toolchain ( `#1026 <https://github.com/easybuilders/easybuild-easyblocks/pull/1026> `_ ) * make HDF5 easyblock handle ``--filter-deps`` correctly ( `#1027 <https://github.com/easybuilders/easybuild-easyblocks/pull/1027> `_ ) * update Travis config w.r.t. changes framework config defaults and required Lmod version ( `#1029 <https://github.com/easybuilders/easybuild-easyblocks/pull/1029> `_ ) * be more patient when running Mathematica Q&A installer ( `#1036 <https://github.com/easybuilders/easybuild-easyblocks/pull/1036> `_ ) **easyconfigs** * backwards incompatible changes: * archive easyconfigs using old inactive toolchains * see `#3725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3725> `_ , `#3728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3728> `_ , `#3729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3729> `_ , `#3730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3730> `_ , `#3731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3731> `_ , `#3732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3732> `_ , `#3733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3733> `_ , `#3735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3735> `_ , `#3736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3736> `_ , `#3737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3737> `_ , `#3738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3738> `_ * only taken into account by EasyBuild if ``--consider-archived-easyconfigs`` is enabled * no easyconfigs available outside of archive for QLogicMPI + 15 toolchains: * ``ClangGCC`` , ``cgmpich`` , ``cgmpolf`` , ``cgmvapich2`` , ``cgmvolf`` , ``cgompi`` , ``cgoolf`` , ``gmacml`` , ``goalf`` , ``gpsmpi`` , ``gpsolf`` , ``iiqmpi`` , ``intel-para`` , ``ipsmpi`` , ``iqacml`` * fix name in PyTables easyconfigs (was 'pyTables') ( `#3785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3785> `_ ) * added example easyconfig files for 32 new software packages: * 3to2 ( `#3655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3655> `_ ), Anaconda2 ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), Anaconda3 ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), ART ( `#3724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3724> `_ ), atools ( `#3631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3631> `_ ), awscli ( `#3645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3645> `_ ), behave ( `#3751 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3751> `_ ), Blosc ( `#3785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3785> `_ ), bokeh ( `#3790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3790> `_ ), Cantera ( `#3655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3655> `_ ), Cargo ( `#3764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3764> `_ ), dadi v1.7.0, distributed ( `#3786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3786> `_ ), ea-utils ( `#3634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3634> `_ ), Elk ( `#3644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3644> `_ ), FGSL ( `#3638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3638> `_ ), gencore_variant_detection ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), help2man ( `#3768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3768> `_ ), lbzip2 ( `#3791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3791> `_ ), Log-Log4perl ( `#3574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3574> `_ ), Minimac2 ( `#3783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3783> `_ ), mypy ( `#3694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3694> `_ ), OBITools ( `#3573 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3573> `_ ), perl-app-cpanminus ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), PGDSpider ( `#3625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3625> `_ ), prokka ( `#3755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3755> `_ ), Reads2snp ( `#3609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3609> `_ ), spglib-python ( `#3620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3620> `_ ), SUNDIALS ( `#3654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3654> `_ , `#3655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3655> `_ ), SelEstim ( `#3626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3626> `_ ), XMLStarlet ( `#3797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3797> `_ ), x265 ( `#3090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3090> `_ ) * added easyconfigs for new ' ``intelcuda`` ' toolchain ( `#3750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3750> `_ ) * added new easyconfigs for existing toolchains: * ``goolfc/2016.08`` ( `#3796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3796> `_ ), ``goolfc/2016.10`` ( `#3666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3666> `_ , `#3775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3775> `_ ), ``intel/2017.00`` ( `#3543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3543> `_ ), ``intel/2017.01`` ( `#3757 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3757> `_ ), ``iomkl/2016.09-GCC-4.9.3-2.25`` ( `#3680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3680> `_ ), ``iomkl/2016.09-GCC-5.4.0-2.26`` ( `#3772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3772> `_ ) * added additional easyconfigs for various supported software packages, including: * Advisor 2017 update 1, Amber 16, ATLAS 3.10.2, GROMACS 2016, Octave 4.0.3, OpenFOAM 3.0.1, PyTables 3.3.0, QuantumESPRESSO 6.0, Rust v1.12.1 * various other enhancements, including: * STREAM builds using ~56GiB and ~111GiB ( `#3670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3670> `_ ) * various bug fixes, including: * fix source spec in VASP easyconfig, ensure static linking with Intel MKL ( `#3381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3381> `_ ) * fix source URL in GCCcore 6.2.0 easyconfig ( `#3608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3608> `_ ) * correct STAMP dependency in i-cisTarget, must be 1.3 ( `#3613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3613> `_ ) * consistently specify to use ``-fgnu89-inline`` flag in M4 1.4.17 easyconfigs ( `#3623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3623> `_ ) * fix source URLs for Cython ( `#3636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3636> `_ ) * add Bison as build dep and M4 as runtime dep for flex 2.6.0 ( `#3656 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3656> `_ ) * enable parallel building of flex 2.6.0 ( `#3630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3630> `_ ) * add zlib and bzip2 dependencies to X11 bundle ( `#3662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3662> `_ ) * use ' ``letter_dir_for`` ' function rather than just grabbing 1st letter of software name in easyconfigs tests ( `#3664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3664> `_ ) * add patch to fix typo in GRIT 2.0.5 ( `#3675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3675> `_ ) * fix typo in patch for WRF 3.8.0 ( `#3702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3702> `_ ) * use ``$CC`` , ``$CXX`` rather than ``$I_MPI_CC`` , ``$I_MPI_CXX`` in patch for OpenFOAM 4.0 ( `#3703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3703> `_ ) * patch FLTK to fix ' ``undefined symbol`` ' issue when building Octave ( `#3704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3704> `_ ) * include Pillow as a proper dep for scikit-image rather than as extension, since it has deps itself ( `#3723 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3723> `_ ) * update Travis config w.r.t. changes framework config defaults and required Lmod version ( `#3773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3773> `_ ) * don't limit parallellism to 4 in recent GCC easyconfigs ( `#3776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3776> `_ , `#3777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3777> `_ , `#3778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3778> `_ ) * include M4 as dependency in flex 2.5.39 easyconfigs + fix consistency issues ( `#3782 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3782> `_ ) * consistently apply patch for ncurses 6.0 ( `#3792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3792> `_ ) * eliminate dependency on ``mpi-mic-rt`` in ifort ( `#3793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3793> `_ ) * include Autotools as build dependency in all beagle-lib and MrBayes easyconfigs ( `#3794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3794> `_ ) * make OpenBLAS use the LAPACK version specified in the easyconfig (v0.2.18 & v0.2.19) ( `#3795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3795> `_ ) * include original download URL for ISL source tarball in GCC easyconfigs ( `#3798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3798> `_ ) * disable installing ``libiberty`` for binutils built with intel toolchain ( `#3802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3802> `_ ) .. _release_notes_eb290: EasyBuild v2.9.0 (September 23rd 2016) -------------------------------------- feature release **framework** * note: vsc-base 2.5.4 or more recent is now required * various small enhancements, including: * change option ``--color`` choices to auto/always/never ( `#1701 <https://github.com/easybuilders/easybuild-framework/pull/1701> `_ , `#1898 <https://github.com/easybuilders/easybuild-framework/pull/1898> `_ , `#1911 <https://github.com/easybuilders/easybuild-framework/pull/1911> `_ ) * add support for ' ``hidden`` ' easyconfig parameter ( `#1837 <https://github.com/easybuilders/easybuild-framework/pull/1837> `_ ) * add support for using ``ccache`` and ``f90cache`` compiler caching tools ( `#1844 <https://github.com/easybuilders/easybuild-framework/pull/1844> `_ , `#1912 <https://github.com/easybuilders/easybuild-framework/pull/1912> `_ ) * see ``--use-ccache`` and ``--use-f90cache`` * update Cray metadata for 16.06 CrayPE release ( `#1851 <https://github.com/easybuilders/easybuild-framework/pull/1851> `_ ) * also include patch files in ``--new-pr`` and ``--update-pr`` ( `#1852 <https://github.com/easybuilders/easybuild-framework/pull/1852> `_ ) * handle deleted files in ``--new-pr`` ( `#1853 <https://github.com/easybuilders/easybuild-framework/pull/1853> `_ ) * add support for ``--install-latest-eb-release`` ( `#1861 <https://github.com/easybuilders/easybuild-framework/pull/1861> `_ ) * add support for hiding toolchains, see ``--hide-toolchains`` and ' ``hidden`` ' key in ' ``toolchain`` ' spec ( `#1871 <https://github.com/easybuilders/easybuild-framework/pull/1871> `_ ) * add template for GitHub source URL ( `#1872 <https://github.com/easybuilders/easybuild-framework/pull/1872> `_ ) * add support for combining ``--new-pr`` / ``--update-pr`` and ``--robot`` ( `#1881 <https://github.com/easybuilders/easybuild-framework/pull/1881> `_ ) * add support for ``--list-software`` and ``--list-installed-software`` ( `#1883 <https://github.com/easybuilders/easybuild-framework/pull/1883> `_ , `#1910 <https://github.com/easybuilders/easybuild-framework/pull/1910> `_ , `#1917 <https://github.com/easybuilders/easybuild-framework/pull/1917> `_ ) * print message on which extension is being installed, incl. progress counter ( `#1886 <https://github.com/easybuilders/easybuild-framework/pull/1886> `_ , `#1914 <https://github.com/easybuilders/easybuild-framework/pull/1914> `_ ) * add support for ``--github-org`` to specify GitHub organisation rather than GitHub user ( `#1894 <https://github.com/easybuilders/easybuild-framework/pull/1894> `_ ) * add support for running Lmod in debug mode ( `#1895 <https://github.com/easybuilders/easybuild-framework/pull/1895> `_ ) * avoid needless use of deepcopy, speed up support for templating in easyconfigs ( `#1897 <https://github.com/easybuilders/easybuild-framework/pull/1897> `_ ) * convert ``all_dependencies`` to a property in ``EasyConfig`` class ( `#1909 <https://github.com/easybuilders/easybuild-framework/pull/1909> `_ ) * add support for ``--mpi-cmd-template`` ( `#1918 <https://github.com/easybuilders/easybuild-framework/pull/1918> `_ ) * add support for ``--disable-mpi-tests`` ( `#1920 <https://github.com/easybuilders/easybuild-framework/pull/1920> `_ ) * various bug fixes, including: * merge with develop when using ``--from-pr`` ( `#1838 <https://github.com/easybuilders/easybuild-framework/pull/1838> `_ , `#1867 <https://github.com/easybuilders/easybuild-framework/pull/1867> `_ ) * ensure ``--new-pr`` doesn't open empty pull requests ( `#1846 <https://github.com/easybuilders/easybuild-framework/pull/1846> `_ ) * better error handling for outdated ``GitPython`` module in ``--check-github`` ( `#1847 <https://github.com/easybuilders/easybuild-framework/pull/1847> `_ ) * fix formatting for generated easyblocks documentation ( `#1860 <https://github.com/easybuilders/easybuild-framework/pull/1860> `_ ) * make sure the robot ignores filtered dependencies when creating toolchain cache ( `#1862 <https://github.com/easybuilders/easybuild-framework/pull/1862> `_ ) * honor ``--filter-deps`` under ``--minimal-toolchains`` ( `#1863 <https://github.com/easybuilders/easybuild-framework/pull/1863> `_ ) * correct format for ' ``param`` ' and ' ``author`` ' tags in docstrings ( `#1866 <https://github.com/easybuilders/easybuild-framework/pull/1866> `_ ) * ignore failing bootstrap test in Travis config file ( `#1870 <https://github.com/easybuilders/easybuild-framework/pull/1870> `_ ) * make sure all output of executed command is included in generated temporary log file ( `#1873 <https://github.com/easybuilders/easybuild-framework/pull/1873> `_ , `#1874 <https://github.com/easybuilders/easybuild-framework/pull/1874> `_ ) * ensure ``--show_hidden`` is used in the correct location for ' ``avail`` ' with Lmod ( `#1875 <https://github.com/easybuilders/easybuild-framework/pull/1875> `_ ) * make sure ``self.path`` is passed down in copy method of ``EasyConfig`` object ( `#1884 <https://github.com/easybuilders/easybuild-framework/pull/1884> `_ ) * take into account possible multi-line modloadmsg in ``ModuleGeneratorLua`` ( `#1885 <https://github.com/easybuilders/easybuild-framework/pull/1885> `_ ) * fix extracting ``.bz2`` source files ( `#1889 <https://github.com/easybuilders/easybuild-framework/pull/1889> `_ ) * don't resolve path to Lmod command ( `#1892 <https://github.com/easybuilders/easybuild-framework/pull/1892> `_ ) * fix skipping of stage 0 in bootstrap script ( `#1893 <https://github.com/easybuilders/easybuild-framework/pull/1893> `_ ) * fix function signature of ``log.deprecated`` compared to ``fancylogger.deprecated`` ( `#1896 <https://github.com/easybuilders/easybuild-framework/pull/1896> `_ , `#1899 <https://github.com/easybuilders/easybuild-framework/pull/1899> `_ ) * apply patch to Tcl/C environment modules tool for Tcl 8.6 support in Travis config ( `#1901 <https://github.com/easybuilders/easybuild-framework/pull/1901> `_ ) * fix combining ``--extended-dry-run`` with ``--from-pr`` ( `#1902 <https://github.com/easybuilders/easybuild-framework/pull/1902> `_ ) * also template dict keys ( `#1904 <https://github.com/easybuilders/easybuild-framework/pull/1904> `_ ) * don't pass ' ``--try-*`` ' command-line options to EB instance running within job script ( `#1908 <https://github.com/easybuilders/easybuild-framework/pull/1908> `_ ) * add workaround for incorrectly passing command line arguments with ``--job`` ( `#1915 <https://github.com/easybuilders/easybuild-framework/pull/1915> `_ ) * fix issues with ``--module-only`` ( `#1919 <https://github.com/easybuilders/easybuild-framework/pull/1919> `_ , `#1924 <https://github.com/easybuilders/easybuild-framework/pull/1924> `_ , `#1925 <https://github.com/easybuilders/easybuild-framework/pull/1925> `_ ) * correctly deal with specified start_dir * do not remove installation directory when build-in-installdir is enabled * make sure ' ``which`` ' function returns path to a file ( `#1921 <https://github.com/easybuilders/easybuild-framework/pull/1921> `_ ) * fix ``:param:`` , ``:return:`` tags in docstrings & add test for it ( `#1923 <https://github.com/easybuilders/easybuild-framework/pull/1923> `_ ) **easyblocks** * new easyblocks for 6 software packages that require customized support: * cppcheck ( `#983 <https://github.com/easybuilders/easybuild-easyblocks/pull/983> `_ ), HEALPix ( `#982 <https://github.com/easybuilders/easybuild-easyblocks/pull/982> `_ ), IMOD ( `#847 <https://github.com/easybuilders/easybuild-easyblocks/pull/847> `_ ), IronPython ( `#321 <https://github.com/easybuilders/easybuild-easyblocks/pull/321> `_ ), Mono ( `#321 <https://github.com/easybuilders/easybuild-easyblocks/pull/321> `_ ), MyMediaLite ( `#321 <https://github.com/easybuilders/easybuild-easyblocks/pull/321> `_ ) * various enhancements, including: * extend OpenFoam-Extend sanity check for decomp libraries ( `#784 <https://github.com/easybuilders/easybuild-easyblocks/pull/784> `_ ) * enhance Java easyblock to support installing Java 6.x ( `#940 <https://github.com/easybuilders/easybuild-easyblocks/pull/940> `_ ) * make QuantumESPRESSO easyblock aware of multithreaded FFT ( `#954 <https://github.com/easybuilders/easybuild-easyblocks/pull/954> `_ ) * extend PSI easyblock to use PCMSolver and CheMPS2 ( `#967 <https://github.com/easybuilders/easybuild-easyblocks/pull/967> `_ ) * make Boost easyblock add definition for ``$BOOST_ROOT`` to generated module file ( `#976 <https://github.com/easybuilders/easybuild-easyblocks/pull/976> `_ ) * add support to Bundle easyblock to install list of components ( `#980 <https://github.com/easybuilders/easybuild-easyblocks/pull/980> `_ ) * enhance & clean up libxml2 easyblock to also enable installing without Python bindings ( `#984 <https://github.com/easybuilders/easybuild-easyblocks/pull/984> `_ ) * update Libint easyblock for Libint 2.1.x ( `#985 <https://github.com/easybuilders/easybuild-easyblocks/pull/985> `_ ) * update sanity check for OpenFOAM to support OpenFOAM 4.x ( `#986 <https://github.com/easybuilders/easybuild-easyblocks/pull/986> `_ ) * make easyblocks that run MPI tests aware of ' ``mpi_tests`` ' build option ( `#993 <https://github.com/easybuilders/easybuild-easyblocks/pull/993> `_ ) * various bug fixes, including: * fix compatibility of OpenFOAM easyblock with ``--module-only`` ( `#784 <https://github.com/easybuilders/easybuild-easyblocks/pull/784> `_ ) * fix testing of ``--module-only`` compatibility for OpenFOAM and IMOD easyblocks ( `#784 <https://github.com/easybuilders/easybuild-easyblocks/pull/784> `_ ) * add ' ``include/libxml2`` ' to ``$CPATH`` in libxml2 easyblock ( `#981 <https://github.com/easybuilders/easybuild-easyblocks/pull/981> `_ ) * fix compatibility of IntelBase generic easyblock with ``--module-only`` ( `#994 <https://github.com/easybuilders/easybuild-easyblocks/pull/994> `_ ) * make sure correct config script is used for Tcl/Tk deps of R ( `#995 <https://github.com/easybuilders/easybuild-easyblocks/pull/995> `_ ) **easyconfigs** * added example easyconfig files for 88 new software packages: * ADMIXTURE ( `#3359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3359> `_ ), angsd ( `#3593 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3593> `_ ), ASHS ( `#3429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3429> `_ ), AutoDock ( `#3465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3465> `_ ), AutoGrid ( `#3466 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3466> `_ ), BayeScan ( `#2748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2748> `_ , `#3356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3356> `_ ), BayPass ( `#3451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3451> `_ ), Bazel ( `#3379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3379> `_ ), Blender ( `#3553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3553> `_ , `#3558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3558> `_ ), bwakit ( `#3567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3567> `_ ), BXH_XCEDE_TOOLS ( `#3410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3410> `_ ), CastXML ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ ), CHASE ( `#3304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3304> `_ ), configparser ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), configurable-http-proxy ( `#3380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3380> `_ ), cppcheck ( `#3508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3508> `_ ), CRPropa ( `#779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/779> `_ ), DicomBrowser ( `#3432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3432> `_ ), DMTCP ( `#3422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3422> `_ ), entrypoints ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), f90cache ( `#3570 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3570> `_ ), fastPHASE ( `#3343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3343> `_ ), fastQValidator ( `#3192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3192> `_ ), FFindex ( `#1135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1135> `_ ), FragGeneScan ( `#1198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1198> `_ ), gdc-client ( `#3399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3399> `_ ), gflags ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), glog ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), GRIT ( `#3561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3561> `_ ), H5hut ( `#3431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3431> `_ ), HAPGEN2 ( `#3344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3344> `_ ), HEALPix ( `#779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/779> `_ ), IMOD ( `#1187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1187> `_ , `#3347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3347> `_ ), IronPython ( `#607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/607> `_ ), jhbuild ( `#3476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3476> `_ ), jupyterhub ( `#3380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3380> `_ ), Keras ( `#3581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3581> `_ ), khmer ( `#1158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1158> `_ ), LeadIT ( `#3345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3345> `_ , `#3599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3599> `_ ), LevelDB ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), libbitmask ( `#3481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3481> `_ ), libcpuset ( `#3481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3481> `_ ), LMDB ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), log4cplus ( `#1136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1136> `_ ), MACH ( `#3346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3346> `_ ), Mako ( `#3460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3460> `_ ), Maq ( `#3428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3428> `_ ), MetaGeneAnnotator ( `#3307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3307> `_ ), Metal ( `#3324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3324> `_ ), Mono ( `#607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/607> `_ ), MyMediaLite ( `#607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/607> `_ ), nco ( `#2575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2575> `_ ), nose-parameterized ( `#3579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3579> `_ ), OpenEXR ( `#3553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3553> `_ ), OpenImageIO ( `#3553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3553> `_ ), path.py ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), PCRE2 ( `#3325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3325> `_ ), pftoolsV3 ( `#3317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3317> `_ ), PHASE ( `#3385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3385> `_ ), PLAST ( `#3288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3288> `_ ), PLINKSEQ ( `#3402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3402> `_ ), POV-Ray ( `#3551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3551> `_ ), ProbABEL ( `#3108 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3108> `_ ), prompt-toolkit ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), protobuf-python ( `#3563 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3563> `_ ), PSORTb ( `#3317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3317> `_ ), py ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), pygccxml ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), pyGIMLi ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), pyplusplus ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), PyQt5 ( `#3533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3533> `_ ), Pyro4 ( `#3527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3527> `_ ), pytest ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), QCA ( `#3595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3595> `_ ), RDMC ( `#1137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1137> `_ ), S.A.G.E. ( `#3427 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3427> `_ ), SDL2 ( `#3551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3551> `_ ), SHORE ( `#3531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3531> `_ ), SimVascular ( `#3555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3555> `_ ), SortMeRNA ( `#3326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3326> `_ ), SUMACLUST ( `#3316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3316> `_ ), SUMATRA ( `#3316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3316> `_ ), Text-CSV ( `#3323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3323> `_ ), Triangle ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ ), VEGAS ( `#3457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3457> `_ ), VirSorter ( `#3307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3307> `_ ), wcwidth ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), X11 ( `#3340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3340> `_ ) * added new easyconfigs for existing toolchains: * CrayGNU + CrayIntel 2016.06 ( `#3377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3377> `_ ) * foss 2016.07 ( `#3517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3517> `_ ) + 2016.09 ( `#3523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3523> `_ ) * iomkl 2016.07 ( `#3458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3458> `_ ) * pomkl 2016.09 ( `#3516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3516> `_ ) * added additional easyconfigs for various supported software packages, including: * FFTW 3.3.5, GCC 4.9.4 + 6.2.0, GROMACS 5.1.4, IPython 5.1.0, LLVM 3.9.0, Mesa 12.0.1, OpenCV 3.1.0, OpenFOAM 4.0, OpenMPI 2.0.1, ParaView 5.1.2, PGI 16.7, QuantumESPRESSO 5.4.0, Qt5 5.7.0, R-bundle-Bioconductor 3.3, VTK 7.0.0, Yade 2016.06a * various enhancements, including: * adjust PSI4 easyconfigs for updated easyblock ( `#3312 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3312> `_ ) * clean up libxml2 easyconfigs according to updated libxml2 easyblock ( `#3479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3479> `_ , `#3509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3509> `_ ) * significantly speed up verifying of dumped easyconfig by resorting to 'shallow' parsing ( `#3520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3520> `_ ) * include sanity checks for all MATIO config files ( `#3528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3528> `_ ) * remove ``--with-tcl-config`` / ``--with-tk-config`` from R easyconfig, already done in R easyblock ( `#3580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3580> `_ ) * various bug fixes, including: * disable testing in all ParaView 4.4.0 easyconfigs, required download is too much of a PITA ( `#3178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3178> `_ ) * add SQLite as dep to GDAL 2.1.0 easyconfigs ( `#3342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3342> `_ ) * add zlib/SQLite/LibTIFF as dep to R 3.3.1 easyconfigs ( `#3342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3342> `_ ) * add bzip2 as a dependency of freetype ( `#3464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3464> `_ ) * specify correct MPI target in FDS easyconfigs ( `#3488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3488> `_ ) * add tcsh as OS dep in NAMD easyconfigs ( `#3491 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3491> `_ ) * statically link ncurses/libreadline in Lua easyconfig with ' ``dummy`` ' toolchain ( `#3545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3545> `_ ) * add M4 as dep for flex 2.6.x ( `#3542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3542> `_ , `#3550 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3550> `_ ) * add bzip2 and libxcb dependencies to FFmpeg 3.x easyconfigs ( `#3548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3548> `_ ) * make sure & check that Graphviz does not install Tcl bindings in Tcl install prefix ( `#3556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3556> `_ ) * add missing patches for extensions in Python 3.x easyconfigs ( `#3557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3557> `_ ) * add missing XZ dependency to libxml2 2.9.4 easyconfigs, change gettext dep of XZ to build-only dep ( `#3568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3568> `_ ) * enable running of tests for HPCG ( `#3578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3578> `_ ) * fix ``buildopts`` in tabix easyconfigs ( `#3584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3584> `_ ) .. _release_notes_eb282: EasyBuild v2.8.2 (July 13th 2016) --------------------------------- bugfix release **framework** * various small enhancements, including: * add support for rst output for ``--list-*`` and ``--avail-*`` ( `#1339 <https://github.com/easybuilders/easybuild-framework/pull/1339> `_ ) * add support for ' ``eb --check-conflicts`` ' ( `#1747 <https://github.com/easybuilders/easybuild-framework/pull/1747> `_ , `#1807 <https://github.com/easybuilders/easybuild-framework/pull/1807> `_ , `#1833 <https://github.com/easybuilders/easybuild-framework/pull/1833> `_ ) * ensure nice error message when non-existing path is passed to ``apply_regex_substitutions`` ( `#1788 <https://github.com/easybuilders/easybuild-framework/pull/1788> `_ ) * add check for module output, empty stdout is a sign of trouble with Lmod ( `#1793 <https://github.com/easybuilders/easybuild-framework/pull/1793> `_ ) * add multi-threaded FFT to toolchain ( `#1802 <https://github.com/easybuilders/easybuild-framework/pull/1802> `_ ) * avoid special characters like '[', ']' in path to temporary directory ( `#1808 <https://github.com/easybuilders/easybuild-framework/pull/1808> `_ ) * add support for ``--zip-logs`` ( `#1820 <https://github.com/easybuilders/easybuild-framework/pull/1820> `_ ) * add support for ``--extra-modules`` ( `#1821 <https://github.com/easybuilders/easybuild-framework/pull/1821> `_ ) * add type conversion for 'checksums' and 'patches' parameter in .yeb easyconfigs ( `#1826 <https://github.com/easybuilders/easybuild-framework/pull/1826> `_ , `#1840 <https://github.com/easybuilders/easybuild-framework/pull/1840> `_ ) * add support for filtering tests by name ( `#1828 <https://github.com/easybuilders/easybuild-framework/pull/1828> `_ ) * add support for ``--avail-toolchain-opts`` ( `#1830 <https://github.com/easybuilders/easybuild-framework/pull/1830> `_ , `#1839 <https://github.com/easybuilders/easybuild-framework/pull/1839> `_ ) * use absolute path for robot and easyconfig files ( `#1834 <https://github.com/easybuilders/easybuild-framework/pull/1834> `_ ) * add backup URL for tarballs hosted on SourceForge in ``install_eb_dep.sh`` script ( `#1843 <https://github.com/easybuilders/easybuild-framework/pull/1843> `_ ) * various bug fixes, including: * fix installation of Lua in ``install_eb_dep.sh`` script ( `#1789 <https://github.com/easybuilders/easybuild-framework/pull/1789> `_ ) * fix OpenMP flag for Cray compiler wrappers ( `#1794 <https://github.com/easybuilders/easybuild-framework/pull/1794> `_ ) * only reset ``$MODULEPATH`` before loading a module if environment was reset ( `#1795 <https://github.com/easybuilders/easybuild-framework/pull/1795> `_ ) * include vsc-install as dependency in ``setup.py`` ( `#1805 <https://github.com/easybuilders/easybuild-framework/pull/1805> `_ ) * cache ``$PATH`` & ``$PYTHONPATH`` in test setUp, restore them in tests where ' ``eb`` ' is used ( `#1806 <https://github.com/easybuilders/easybuild-framework/pull/1806> `_ ) * don't reset ``$MODULEPATH`` in stage 2 of bootstrap script, support forced installation during stage 2 ( `#1810 <https://github.com/easybuilders/easybuild-framework/pull/1810> `_ ) * fix issue with templates defined by deps being required while still parsing deps ( `#1812 <https://github.com/easybuilders/easybuild-framework/pull/1812> `_ ) * skip unneeded unuse/use commands on tail of ``$MODULEPATH`` in ``check_module_path`` ( `#1813 <https://github.com/easybuilders/easybuild-framework/pull/1813> `_ ) * fix auto-convert for all ``*dependencies`` params in ``.yeb`` easyconfigs, ensure version is a string ( `#1818 <https://github.com/easybuilders/easybuild-framework/pull/1818> `_ ) * fix ``keyring`` version in Travis config ( `#1819 <https://github.com/easybuilders/easybuild-framework/pull/1819> `_ ) * fix dumping of ``.yeb`` easyconfig files in easyconfigs archive ( `#1822 <https://github.com/easybuilders/easybuild-framework/pull/1822> `_ ) * fix format of supported easyconfig templates in help output ( `#1825 <https://github.com/easybuilders/easybuild-framework/pull/1825> `_ ) * stick to ``pydot`` 1.1.0 for Python 2.6 in Travis config ( `#1827 <https://github.com/easybuilders/easybuild-framework/pull/1827> `_ ) **easyblocks** * new easyblocks for 5 software packages that require customized support: * Amber ( `#958 <https://github.com/easybuilders/easybuild-easyblocks/pull/958> `_ ), Extrae ( `#955 <https://github.com/easybuilders/easybuild-easyblocks/pull/955> `_ ), Gurobi ( `#962 <https://github.com/easybuilders/easybuild-easyblocks/pull/962> `_ ), Paraver ( `#956 <https://github.com/easybuilders/easybuild-easyblocks/pull/956> `_ ), Tau ( `#887 <https://github.com/easybuilders/easybuild-easyblocks/pull/887> `_ ) * various enhancements, including: * add support for building & installing old GROMACS versions ( `#569 <https://github.com/easybuilders/easybuild-easyblocks/pull/569> `_ , `#960 <https://github.com/easybuilders/easybuild-easyblocks/pull/960> `_ ) * add support for building Boost with Cray toolchain ( `#849 <https://github.com/easybuilders/easybuild-easyblocks/pull/849> `_ ) * libxsmm support for CP2K ( `#942 <https://github.com/easybuilders/easybuild-easyblocks/pull/942> `_ ) * pick up specified components for imkl ( `#943 <https://github.com/easybuilders/easybuild-easyblocks/pull/943> `_ ) * add support for building GROMACS with double precision ( `#946 <https://github.com/easybuilders/easybuild-easyblocks/pull/946> `_ , `#960 <https://github.com/easybuilders/easybuild-easyblocks/pull/960> `_ ) * add support for building GROMACS with CUDA support and using dynamic libraries using ``Cray`` toolchains ( `#951 <https://github.com/easybuilders/easybuild-easyblocks/pull/951> `_ , `#960 <https://github.com/easybuilders/easybuild-easyblocks/pull/960> `_ ) * also install vsc-install in ``EasyBuildMeta`` easyblock, if tarball is provided ( `#957 <https://github.com/easybuilders/easybuild-easyblocks/pull/957> `_ ) * enhance PSI easyblock to support PSI4 1.0 ( `#965 <https://github.com/easybuilders/easybuild-easyblocks/pull/965> `_ ) * various bug fixes, including: * also install scripts with MRtrix 0.3.14 ( `#941 <https://github.com/easybuilders/easybuild-easyblocks/pull/941> `_ ) * enhance Qt easyblock to support Qt3 ( `#944 <https://github.com/easybuilders/easybuild-easyblocks/pull/944> `_ ) * create ' ``release`` ' symlink in MRtrix install dir ( `#947 <https://github.com/easybuilders/easybuild-easyblocks/pull/947> `_ ) * fix ``make_installdir`` in Inspector & VTune easyblocks ( `#952 <https://github.com/easybuilders/easybuild-easyblocks/pull/952> `_ ) * make ``Binary`` and ``MakeCp`` easyblocks aware of ' ``keepsymlinks`` ' ( `#959 <https://github.com/easybuilders/easybuild-easyblocks/pull/959> `_ ) * correctly define ``$G4*`` environment variables in Geant4 easyblock ( `#961 <https://github.com/easybuilders/easybuild-easyblocks/pull/961> `_ , `#970 <https://github.com/easybuilders/easybuild-easyblocks/pull/970> `_ ) * prepend tmp install path to ``$PYTHONPATH`` in numpy test step, move to build dir when removing ' ``numpy`` ' subdir ( `#963 <https://github.com/easybuilders/easybuild-easyblocks/pull/963> `_ ) * correct full path to ALADIN config file & patch it to use right Fortran compiler flags ( `#964 <https://github.com/easybuilders/easybuild-easyblocks/pull/964> `_ ) * ensure correct compiler command/flags are used for SAMtools ( `#966 <https://github.com/easybuilders/easybuild-easyblocks/pull/966> `_ ) **easyconfigs** * added example easyconfig files for 54 new software packages: * Amber ( `#3200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3200> `_ ), Bullet ( `#3175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3175> `_ ), CONTRAlign ( `#690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/690> `_ ), Cluster-Buster ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ ), damageproto ( `#3222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3222> `_ , `#3308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3308> `_ ), DCA++ ( `#3219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3219> `_ ), EIGENSOFT ( `#3147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3147> `_ , `#3163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3163> `_ ), Extrae ( `#507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/507> `_ ), fdstools ( `#3237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3237> `_ ), ffnet ( `#3273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3273> `_ ), GP2C ( `#3257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3257> `_ ), Gurobi ( `#3239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3239> `_ ), gc ( `#3202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3202> `_ , `#3261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3261> `_ ), gputools ( `#546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/546> `_ ), IMa2p ( `#3300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3300> `_ ), IOzone ( `#3253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3253> `_ ), i-cisTarget ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ , `#3194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3194> `_ ), icmake ( `#3243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3243> `_ ), io_lib ( `#3255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3255> `_ ), Kent_tools ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ ), libcmaes ( `#3256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3256> `_ ), libpsortb ( `#3259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3259> `_ ), libxsmm ( `#3099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3099> `_ ), MEGACC ( `#3263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3263> `_ ), MM-align ( `#1428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1428> `_ ), MOSAIK ( `#880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/880> `_ ), MView ( `#1345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1345> `_ ), MySQL-python ( `#3172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3172> `_ , `#3189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3189> `_ ), magma ( `#3219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3219> `_ ), mrFAST ( `#862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/862> `_ ), mrsFAST ( `#862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/862> `_ ), mysqlclient ( `#3172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3172> `_ , `#3232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3232> `_ ), NTL ( `#3183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3183> `_ ), PARI-GP ( `#3257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3257> `_ ), Paraver ( `#508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/508> `_ ), psutil ( `#3171 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3171> `_ , `#3231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3231> `_ ), PSI4 ( `#3293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3293> `_ ), Qwt ( `#3157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3157> `_ ), RMBlast ( `#3142 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3142> `_ ), STAMP ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ ), Seqmagick ( `#3264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3264> `_ ), splitRef ( `#946 <https://github.com/easybuilders/easybuild-easyconfigs/pull/946> `_ ), TAU ( `#509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/509> `_ ), TRF ( `#3141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3141> `_ ), TVB ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), TVB-deps ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), tvb-data ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), tvb-framework ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), tvb-library ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), VampirTrace ( `#509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/509> `_ ), Voro++ ( `#3174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3174> `_ ), wheel ( `#3235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3235> `_ ), wxPropertyGrid ( `#508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/508> `_ ), xonsh ( `#3159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3159> `_ ) * added easyconfigs for update of common toolchains: ``foss/2016b`` ( `#3271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3271> `_ ), ``intel/2016b`` ( `#3270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3270> `_ ) * added new easyconfigs for existing toolchains: ``CrayGNU/2016.03`` & ``CrayGNU/2016.04`` ( `#3291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3291> `_ ), ``foss/2016.06`` ( `#3184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3184> `_ ), ``intel/2016.03-GCC-5.4`` ( `#3185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3185> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.61.0, GCC 5.4.0, GROMACS 3.3.3, HDF5 1.8.17, netCDF 4.4.1, numpy 1.11.0, Perl 5.24.0, PETSc 3.7.2, Python 2.7.12, Python 3.5.2, Qt 3.3.8, R 3.3.1 * various enhancements, including: * use ``check_conflicts`` function in easyconfigs tests ( `#2981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2981> `_ ) * also include vsc-install in list of sources for recent EasyBuild easyconfigs, to support offline installation ( `#3203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3203> `_ ) * enable building of ``libmysqld.*`` in MariaDB easyconfigs ( `#3230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3230> `_ ) * add ALDEx2, phyloseq to bundles for Bioconductor 3.2 ( `#3211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3211> `_ , `#3241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3241> `_ ) * add biom, geepack, lubridate, pim to list of R 3.2.3 extensions ( `#3186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3186> `_ , `#3211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3211> `_ , `#3275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3275> `_ ) * various bug fixes, including: * add patch for Boost 1.60.0 to fix bug resulting in ``TypeError`` ( `#3162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3162> `_ ) * add fftw dependency to CP2K 2.6.0 easyconfigs using CrayGNU ( `#3176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3176> `_ ) * fix location of ``libelf.h`` , only (also) installed as ``include/libelf.h`` is there's no ``/usr/include/libelf.h`` ( `#3201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3201> `_ ) * fix software name for Guile & GnuTLS (was 'guile' & 'gnutls') ( `#3207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3207> `_ ) * added missing space in Geant4 configopts to specify ``-DGEANT4_INSTALL_DATA`` ( `#3209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3209> `_ ) * fix Cython download URL in Python 2.7.11 easyconfigs ( `#3212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3212> `_ ) * add missing build deps for X stack in easyconfigs using ``foss/2016a`` or ``intel/2016a`` ( `#3222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3222> `_ , `#3308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3308> `_ ) * fix overruling of exts_list in Perl 5.22.2 easyconfig ( `#3224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3224> `_ ) * add missing dependency on GMP in R 3.2.3 easyconfigs ( `#3226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3226> `_ ) * don't hard specify toolchain for binutils build dep in likwid easyconfig, since it matches parent toolchain ( `#3240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3240> `_ ) * fix ``homepage`` & ``source_urls`` in HMMER easyconfigs ( `#3246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3246> `_ ) * stick to ``pydot`` 1.1.0 for Python 2.6 in Travis config ( `#3282 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3282> `_ ) * add ``python-dev(el)`` to OS deps in GC3Pie easyconfigs ( `#3310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3310> `_ ) .. _release_notes_eb281: EasyBuild v2.8.1 (May 30th 2016) -------------------------------- bugfix release **framework** * various bug fixes, including: * fix error message on missing module command in bootstrap script ( `#1772 <https://github.com/easybuilders/easybuild-framework/pull/1772> `_ ) * expand ' ``~`` ' in paths specified to ``--include-*`` ( `#1774 <https://github.com/easybuilders/easybuild-framework/pull/1774> `_ ) * break after deleting cache entry to avoid attempt to delete cache entry again ( `#1776 <https://github.com/easybuilders/easybuild-framework/pull/1776> `_ ) * avoid changing ``$MODULEPATH`` when prepending with symlink of path already at head of ``$MODULEPATH`` ( `#1777 <https://github.com/easybuilders/easybuild-framework/pull/1777> `_ ) * filter out duplicates in ``find_flexlm_license`` ( `#1779 <https://github.com/easybuilders/easybuild-framework/pull/1779> `_ ) * stick with GitPython < 2.0 with Py2.6 in Travis configuration ( `#1781 <https://github.com/easybuilders/easybuild-framework/pull/1781> `_ ) * don't use ``LooseVersion`` to define ``version_major`` / ``version_minor`` ( `#1783 <https://github.com/easybuilders/easybuild-framework/pull/1783> `_ ) **easyblocks** * various enhancements, including: * update MRtrix easyblock for version 0.3.14 ( `#932 <https://github.com/easybuilders/easybuild-easyblocks/pull/932> `_ ) * update Inspector easyblock for recent versions ( `#934 <https://github.com/easybuilders/easybuild-easyblocks/pull/934> `_ ) * update VTune easyblock for recent versions ( `#935 <https://github.com/easybuilders/easybuild-easyblocks/pull/935> `_ ) * add debug message to IntelBase easyblock w.r.t. switching to 'exist_lic' ( `#936 <https://github.com/easybuilders/easybuild-easyblocks/pull/936> `_ ) **easyconfigs** * added example easyconfig files for 13 new software packages: * drFAST ( `#906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/906> `_ ), git-lfs ( `#2478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2478> `_ ), grabix ( `#3127 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3127> `_ ), JWM ( `#3007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3007> `_ ), libcroco ( `#3007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3007> `_ ), librsvg ( `#3007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3007> `_ ), MaCH ( `#3136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3136> `_ ), mayavi ( `#3106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3106> `_ ), OpenMM ( `#2762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2762> `_ ), Pysam ( `#3080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3080> `_ ), SeqPrep ( `#3097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3097> `_ ), vt ( `#3128 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3128> `_ ), wkhtmltopdf ( `#3098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3098> `_ ) * added new easyconfigs for existing toolchains: ``intel/2016.03-GCC-4.9`` ( `#3088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3088> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.61.0, ESMF 7.0.0, Inspector 2016 update 3, IPython 4.2, netCDF-C++4 4.3.0, netCDF-Fortran 4.4.4, Perl 5.22.2, VTune 2016 update 3 * various bug fixes, including: * apply libreadline patch to fix bug triggering segmentation fault ( `#3086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3086> `_ ) .. _release_notes_eb280: EasyBuild v2.8.0 (May 18th 2016) -------------------------------- feature + bugfix release **framework** * significant speedup improvements of EasyBuild itself, thanks to: * stop creating ``ModulesTool`` instances over and over again ( `#1735 <https://github.com/easybuilders/easybuild-framework/pull/1735> `_ ) * cache result of ' ``module avail`` ' calls ( `#1742 <https://github.com/easybuilders/easybuild-framework/pull/1742> `_ ) * add support for using PGI as toolchain compiler ( `#1342 <https://github.com/easybuilders/easybuild-framework/pull/1342> `_ , `#1664 <https://github.com/easybuilders/easybuild-framework/pull/1664> `_ , `#1759 <https://github.com/easybuilders/easybuild-framework/pull/1759> `_ , `#1761 <https://github.com/easybuilders/easybuild-framework/pull/1761> `_ , `#1764 <https://github.com/easybuilders/easybuild-framework/pull/1764> `_ ) * incl. new toolchain definitions ``pompi`` and ``pomkl`` ( `#1724 <https://github.com/easybuilders/easybuild-framework/pull/1724> `_ ) * add test configuration for Travis ( `#1733 <https://github.com/easybuilders/easybuild-framework/pull/1733> `_ , `#1737 <https://github.com/easybuilders/easybuild-framework/pull/1737> `_ , `#1743 <https://github.com/easybuilders/easybuild-framework/pull/1743> `_ , `#1767 <https://github.com/easybuilders/easybuild-framework/pull/1767> `_ ) * various other enhancements, including: * add ``get_total_memory()`` function in ``systemtools`` module ( `#1623 <https://github.com/easybuilders/easybuild-framework/pull/1623> `_ ) * ignore ``__init__.py`` files in ``--include-*`` ( `#1704 <https://github.com/easybuilders/easybuild-framework/pull/1704> `_ ) * use ``-fopenmp`` rather than ``-openmp`` for Intel compilers, since ``-openmp`` is deprecated ( `#1718 <https://github.com/easybuilders/easybuild-framework/pull/1718> `_ ) * add modules to metadata for Cray modules ( `#1721 <https://github.com/easybuilders/easybuild-framework/pull/1721> `_ ) * make sure user write permissions are set after failed removal attempt of installation directory ( `#1722 <https://github.com/easybuilders/easybuild-framework/pull/1722> `_ ) * escape special characters in software name in ``find_related_easyconfigs`` ( `#1726 <https://github.com/easybuilders/easybuild-framework/pull/1726> `_ ) * add support for ``CrayPGI`` compiler toolchain ( `#1729 <https://github.com/easybuilders/easybuild-framework/pull/1729> `_ ) * ensure read permission to all installed files for everybody (unless other options specify otherwise) ( `#1731 <https://github.com/easybuilders/easybuild-framework/pull/1731> `_ ) * also consider ``$LMOD_CMD`` in bootstrap script ( `#1736 <https://github.com/easybuilders/easybuild-framework/pull/1736> `_ ) * translate PyPI download URL to alternate URL with a hash ( `#1749 <https://github.com/easybuilders/easybuild-framework/pull/1749> `_ ) * make ``get_software_libdir`` compatible with ``-x`` ( `#1750 <https://github.com/easybuilders/easybuild-framework/pull/1750> `_ ) * set ``$LMOD_REDIRECT`` to ' ``no`` ' when initialising Lmod ( `#1755 <https://github.com/easybuilders/easybuild-framework/pull/1755> `_ ) * add test for broken modules tool setup affecting ' ``module use`` ' ( `#1758 <https://github.com/easybuilders/easybuild-framework/pull/1758> `_ ) * various bug fixes, including: * isolate ' ``options`` ' tests from easyblocks other than the ones included in the tests ( `#1699 <https://github.com/easybuilders/easybuild-framework/pull/1699> `_ ) * don't run ' ``module purge`` ' in tests, since EasyBuild may be made available through a module ( `#1702 <https://github.com/easybuilders/easybuild-framework/pull/1702> `_ ) * avoid rehandling ``--include-*`` options over and over again during ``--show-config`` ( `#1705 <https://github.com/easybuilders/easybuild-framework/pull/1705> `_ ) * remove useless ``test_cwd`` ( `#1706 <https://github.com/easybuilders/easybuild-framework/pull/1706> `_ ) * fix bootstrap script: make sure setuptools installed in stage0 is still available at end of stage1 ( `#1727 <https://github.com/easybuilders/easybuild-framework/pull/1727> `_ ) * forcibly create target branch in ``--update-pr`` ( `#1728 <https://github.com/easybuilders/easybuild-framework/pull/1728> `_ ) * remove check whether ' ``easybuild`` ' is being imported from dir that contains ``easybuild/__init__.py`` ( `#1730 <https://github.com/easybuilders/easybuild-framework/pull/1730> `_ ) * (re)install vsc-base during stage1 using ``--always-copy`` in bootstrap script, if needed ( `#1732 <https://github.com/easybuilders/easybuild-framework/pull/1732> `_ ) * use ``os.path.realpath`` in ``test_wrong_modulepath`` to avoid symlinked path breaking the test ( `#1740 <https://github.com/easybuilders/easybuild-framework/pull/1740> `_ ) * unset ``$PYTHONPATH`` in before tested bootstrapped EasyBuild module ( `#1743 <https://github.com/easybuilders/easybuild-framework/pull/1743> `_ ) * take into account that paths in modulepath may be symlinks in ``test_module_caches`` ( `#1745 <https://github.com/easybuilders/easybuild-framework/pull/1745> `_ ) * change to install dir rather than buildpath in sanity check of extension, latter may not exist ( `#1746 <https://github.com/easybuilders/easybuild-framework/pull/1746> `_ , `#1748 <https://github.com/easybuilders/easybuild-framework/pull/1748> `_ ) * only load modules using short module names ( `#1754 <https://github.com/easybuilders/easybuild-framework/pull/1754> `_ ) * (re)load modules for build deps in extensions_step ( `#1762 <https://github.com/easybuilders/easybuild-framework/pull/1762> `_ ) * fix ``modpath_extensions_for method`` : take into account modules in Lua syntax ( `#1766 <https://github.com/easybuilders/easybuild-framework/pull/1766> `_ ) * fix broken link to VSC website in license headers ( `#1768 <https://github.com/easybuilders/easybuild-framework/pull/1768> `_ ) **easyblocks** * add test configuration for Travis ( `#895 <https://github.com/easybuilders/easybuild-easyblocks/pull/895> `_ , `#897 <https://github.com/easybuilders/easybuild-easyblocks/pull/897> `_ , `#900 <https://github.com/easybuilders/easybuild-easyblocks/pull/900> `_ , `#926 <https://github.com/easybuilders/easybuild-easyblocks/pull/926> `_ ) * new easyblocks for 4 software packages that require customized support: * binutils ( `#907 <https://github.com/easybuilders/easybuild-easyblocks/pull/907> `_ ), libQGLViewer ( `#890 <https://github.com/easybuilders/easybuild-easyblocks/pull/890> `_ ), SuperLU ( `#860 <https://github.com/easybuilders/easybuild-easyblocks/pull/860> `_ ), wxPython ( `#883 <https://github.com/easybuilders/easybuild-easyblocks/pull/883> `_ ) * various other enhancements, including: * update SuiteSparse easyblock for version >= 4.5 ( `#863 <https://github.com/easybuilders/easybuild-easyblocks/pull/863> `_ ) * enhance imkl easyblock to install on top of PGI ( `#866 <https://github.com/easybuilders/easybuild-easyblocks/pull/866> `_ , `#916 <https://github.com/easybuilders/easybuild-easyblocks/pull/916> `_ ) * enable runtime logging of install cmd in ``IntelBase`` ( `#874 <https://github.com/easybuilders/easybuild-easyblocks/pull/874> `_ ) * enhance Qt easyblock to support installing with ``dummy`` toolchain ( `#881 <https://github.com/easybuilders/easybuild-easyblocks/pull/881> `_ ) * delete libnuma symbolic links in PGI installation directory ( `#888 <https://github.com/easybuilders/easybuild-easyblocks/pull/888> `_ ) * enhance PDT easyblock to support installing with ``dummy`` toolchain ( `#894 <https://github.com/easybuilders/easybuild-easyblocks/pull/894> `_ ) * add support for building Clang with OpenMP support ( `#898 <https://github.com/easybuilders/easybuild-easyblocks/pull/898> `_ ) * update Score-P easyblock for additional compilers, MPI libraries & dependencies ( `#889 <https://github.com/easybuilders/easybuild-easyblocks/pull/889> `_ ) * drop deprecated ' ``testrb`` ' from sanity check in Ruby easyblock ( `#901 <https://github.com/easybuilders/easybuild-easyblocks/pull/901> `_ ) * enhance WRF easyblock to support versions >= 3.7 ( `#902 <https://github.com/easybuilders/easybuild-easyblocks/pull/902> `_ ) * update QuantumESPRESSO easyblock for version 5.3.0 ( `#904 <https://github.com/easybuilders/easybuild-easyblocks/pull/904> `_ ) * add support in PythonPackage easyblock to use ' ``setup.py develop`` ' ( `#905 <https://github.com/easybuilders/easybuild-easyblocks/pull/905> `_ ) * update Qt easyblock for Qt 5.6.0 ( `#908 <https://github.com/easybuilders/easybuild-easyblocks/pull/908> `_ ) * extend bzip2 easyblock to also build dynamic libraries ( `#910 <https://github.com/easybuilders/easybuild-easyblocks/pull/910> `_ ) * make threading an explicit option rather than relying on MPI library in SCOTCH easyblock ( `#914 <https://github.com/easybuilders/easybuild-easyblocks/pull/914> `_ ) * update PGI easyblock to install siterc file so PGI picks up ``$LIBRARY_PATH`` ( `#919 <https://github.com/easybuilders/easybuild-easyblocks/pull/919> `_ ) * enhance sanity check paths for compiler commands in PGI easyblock ( `#919 <https://github.com/easybuilders/easybuild-easyblocks/pull/919> `_ ) * also filter out ``-ldl`` from $LIBBLAS & co for Intel MKL in numpy easyblock ( `#920 <https://github.com/easybuilders/easybuild-easyblocks/pull/920> `_ ) * define ``$MIC_LD_LIBRARY_PATH`` for impi ( `#925 <https://github.com/easybuilders/easybuild-easyblocks/pull/925> `_ ) * various bug fixes, including: * don't hardcode Python version in ``test_make_module_pythonpackage`` ( `#876 <https://github.com/easybuilders/easybuild-easyblocks/pull/876> `_ ) * make PythonPackage easyblock compatible with ``--module-only`` ( `#884 <https://github.com/easybuilders/easybuild-easyblocks/pull/884> `_ , `#906 <https://github.com/easybuilders/easybuild-easyblocks/pull/906> `_ ) * remove check whether ' ``easybuild`` ' is being imported from dir that contains ``easybuild/__init__.py`` ( `#891 <https://github.com/easybuilders/easybuild-easyblocks/pull/891> `_ ) * fix passing compiler configure option in PDT easyblock ( `#894 <https://github.com/easybuilders/easybuild-easyblocks/pull/894> `_ ) * fix bug in Score-P easyblock w.r.t. ``--with-libbfd`` ( `#889 <https://github.com/easybuilders/easybuild-easyblocks/pull/889> `_ ) * fix extension filter for Ruby ( `#901 <https://github.com/easybuilders/easybuild-easyblocks/pull/901> `_ ) * fix ``ACTIVATION_TYPES`` list in IntelBase + minor style change ( `#913 <https://github.com/easybuilders/easybuild-easyblocks/pull/913> `_ ) * correctly define ``$MIC_LD_LIBRARY_PATH`` in imkl 11.3.x and newer ( `#915 <https://github.com/easybuilders/easybuild-easyblocks/pull/915> `_ ) * fix broken link to VSC website in license headers ( `#927 <https://github.com/easybuilders/easybuild-easyblocks/pull/927> `_ ) **easyconfigs** * added example easyconfig files for 69 new software packages: * ALPS ( `#2888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2888> `_ ), annovar ( `#3010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3010> `_ ), BayeScEnv ( `#2765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2765> `_ ), BayesAss ( `#2870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2870> `_ ), BerkeleyGW ( `#2925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2925> `_ ), Blitz++ ( `#2784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2784> `_ , `#3004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3004> `_ ), bam-readcount ( `#2850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2850> `_ ), Commet ( `#2938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2938> `_ ), CrossTalkZ ( `#2939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2939> `_ ), cuDNN ( `#2882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2882> `_ ), DBus ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), DFT-D3 ( `#2107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2107> `_ ), DIAL ( `#3056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3056> `_ ), dask ( `#2885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2885> `_ ), dbus-glib ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), FFLAS-FFPACK ( `#2793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2793> `_ ), FLAC ( `#2824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2824> `_ ), FLANN ( `#3015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3015> `_ , `#3029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3029> `_ ), FLEUR ( `#3043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3043> `_ ), GConf ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), GROMOS++ ( `#1297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1297> `_ ), GST-plugins-base ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), GStreamer ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), GTOOL ( `#2805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2805> `_ ), Givaro ( `#2793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2793> `_ ), gdist ( `#2935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2935> `_ ), gromosXX ( `#1297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1297> `_ ), HISAT2 ( `#2809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2809> `_ ), i-PI ( `#2940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2940> `_ ), Kraken ( `#3037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3037> `_ , `#3041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3041> `_ ), LAME ( `#2823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2823> `_ ), LASTZ ( `#3002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3002> `_ ), LinBox ( `#2793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2793> `_ ), Loki ( `#2839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2839> `_ ), libQGLViewer ( `#2923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2923> `_ , `#3008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3008> `_ ), libXxf86vm ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), MDSplus ( `#2787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2787> `_ , `#2838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2838> `_ , `#3027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3027> `_ ), MRIcron ( `#2831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2831> `_ ), Mawk ( `#2732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2732> `_ ), minieigen ( `#2839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2839> `_ ), mpmath ( `#3058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3058> `_ ), NBO ( `#3047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3047> `_ , 3048), NGS ( `#2803 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2803> `_ ), NGS-Python ( `#2810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2810> `_ ), ncbi-vdb ( `#2808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2808> `_ ), OptiX ( `#2795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2795> `_ ), PCL ( `#3024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3024> `_ ), PEAR ( `#2731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2731> `_ ), PLplot ( `#2990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2990> `_ ), Postgres-XL ( `#2891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2891> `_ ), PyGTS ( `#2969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2969> `_ ), RSeQC ( `#2788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2788> `_ ), Rust ( `#2920 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2920> `_ , `#2943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2943> `_ ), rainbow ( `#2730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2730> `_ ), SHAPEIT ( `#2806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2806> `_ ), SIONlib ( `#2908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2908> `_ ), Saxon-HE ( `#2773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2773> `_ ), Singularity ( `#2901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2901> `_ ), SoX ( `#2825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2825> `_ ), Subread ( `#2790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2790> `_ ), SuperLU ( `#2665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2665> `_ ), travis ( `#2953 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2953> `_ ), VASP ( `#2950 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2950> `_ ), Wannier90 ( `#2906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2906> `_ , `#3042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3042> `_ ), wget ( `#3041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3041> `_ ), wxPython ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), xf86vidmodeproto ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), Yade ( `#2839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2839> `_ ), Yambo ( `#2932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2932> `_ ) * add test configuration for Travis ( `#2942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2942> `_ , `#2944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2944> `_ , `#2954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2954> `_ , `#3061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3061> `_ ) * added easyconfigs for new PGI-based toolchains * ``pomkl/2016.03`` ( `#2899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2899> `_ , `#2900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2900> `_ , `#3046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3046> `_ ), ``pomkl/2016.04`` ( `#3044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3044> `_ ), ``CrayPGI/2016.04`` ( `#2927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2927> `_ ) * added new easyconfigs for existing toolchains: * ``foss/2016.04`` ( `#3013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3013> `_ ), ``intel/2016.02-GCC-5.3`` ( `#2523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2523> `_ ), ``intel/2016.03-GCC-5.3`` ( `#3009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3009> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * incl. CGAL 4.8, Clang 3.8.0, icc/ifort 2016.2.181 & 2016.3.210, imkl 11.3.2.181 & 11.3.3.210, impi 5.1.3.181, LLVM 3.8.0, OpenCV 2.4.12, pandas 0.18.0, Qt 5.6.0, Scalasca 2.3, Score-P 2.0.1, SuiteSparse 4.5.2, WRF 3.8 * various other enhancements, including: * enhance ORCA easyconfig for compatibility with SLURM ( `#1819 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1819> `_ ) * enable ``-fPIC`` in GraphicsMagick easyconfig, required by Octave ( `#2764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2764> `_ ) * clean up binutils easyconfigs to use binutils easyblock ( `#3006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3006> `_ ) * add ``include/GraphicsMagick`` to ``$CPATH`` in GraphicsMagick easyconfigs ( `#3034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3034> `_ ) * update SuiteSparse easyconfigs according to updated SuiteSparse easyblock ( `#3050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3050> `_ ) * various bug fixes, including: * fix Perl extensions download urls ( `#2738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2738> `_ ) * add Autoconf as build dep for ``GCCcore`` ( `#2772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2772> `_ ) * fix versions of extensions in Bioconductor 3.2 bundles ( `#2769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2769> `_ ) * fix (build) deps for ``intel/2016a`` easyconfigs of cairo, libXext, libXrender ( `#2785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2785> `_ , `#2874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2874> `_ ) * use ' ``env`` ' wherever preconfig/build/installopts is used to set environmental variables ( `#2807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2807> `_ , `#2811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2811> `_ , `#2812 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2812> `_ ) * add zlib as explicit dep in Tk easyconfigs ( `#2815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2815> `_ ) * consistently specify to use ``-fgnu89-inline`` flag in M4 1.4.17 easyconfigs ( `#2774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2774> `_ , `#2779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2779> `_ , `#2816 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2816> `_ ) * fix homepage and description in Pygments easyconfigs ( `#2822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2822> `_ ) * include pkg-config as build dependencies for libXau, libXdmcp, libxcb ( `#2827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2827> `_ ) * consistently use ``XORG_*_SOURCE`` constants ( `#2829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2829> `_ , `#2830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2830> `_ , `#2848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2848> `_ ) * update source URLs in ScientificPython easyconfig files ( `#2847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2847> `_ ) * add checksums in SuiteSparse easyconfigs ( `#2849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2849> `_ ) * fix build deps for GObject-Introspection ( `#2852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2852> `_ ) * correctly specify Perl location in git easyconfig ( `#2866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2866> `_ ) * fix bitstring 3.1.3 download URL in Python easyconfigs, source tarball on PyPI disappeared ( `#2880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2880> `_ ) * fix Perl dependency in worker easyconfigs, it requires non-standard Perl modules ( `#2884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2884> `_ ) * add XZ as dependency in Python 3.5.1 easyconfigs, required for lzma ( `#2887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2887> `_ ) * fix download URL for packmol ( `#2902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2902> `_ ) * drop ``usempi`` toolchain in numexpr easyconfigs, not needed ( `#2937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2937> `_ ) * fix use of ``resolve_dependencies`` in tests according to changes in framework ( `#2952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2952> `_ ) * add dependency extensions for MarkupSafe and jsonscheme in IPython 3.2.3 easyconfigs ( `#2967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2967> `_ ) * add patch for matplotlib 1.5.1 to fix Tcl/Tk library paths being used ( `#2971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2971> `_ ) * add xproto build dependency for makedepend v1.0.5 ( `#2982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2982> `_ ) * disable parallel build for Doxygen ( `#2986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2986> `_ ) * fix source URLs for ``FreezeThaw`` and ``Tie::Function`` extensions for Perl v5.22.1 ( `#2988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2988> `_ ) * add ``sed`` command in worker easyconfig files to fix module_path in conf/worker.conf ( `#2997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2997> `_ , `#3000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3000> `_ ) * drop toolchainopts from Eigen easyconfigs, since it is headers-only ( `#3025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3025> `_ ) * clean up dummy bzip2 easyconfig, define buildopts rather than defining ``$CC`` and ``$CFLAGS`` via ``os.environ`` ( `#3036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3036> `_ ) * use ``%(pyshortver)s`` template rather than hardcoding 2.7 in VTK easyconfigs ( `#3052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3052> `_ ) * correct install location of OpenCV Python bindings ( `#3054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3054> `_ ) * include XZ as dependency for libunwind ( `#3055 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3055> `_ ) * add patch to fix broken OpenSSL tests due to expired certificates ( `#3057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3057> `_ ) * fix broken link to VSC website in license headers ( `#3062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3062> `_ ) .. _release_notes_eb270: EasyBuild v2.7.0 (March 20th 2016) ---------------------------------- feature + bugfix release **framework** * stabilize Cray support * enable ' ``dynamic`` ' toolchain option by default for ``Cray*`` toolchains ( `#1581 <https://github.com/easybuilders/easybuild-framework/pull/1581> `_ ) * remove FFTW from the Cray toolchains definition ( `#1585 <https://github.com/easybuilders/easybuild-framework/pull/1585> `_ ) * add external modules metadata for Cray systems ( `#1638 <https://github.com/easybuilders/easybuild-framework/pull/1638> `_ ) * fix independency of Cray toolchains w.r.t. toolchain build environment ( `#1641 <https://github.com/easybuilders/easybuild-framework/pull/1641> `_ , `#1647 <https://github.com/easybuilders/easybuild-framework/pull/1647> `_ ) * remove requirement to use ``--experimental`` for Cray toolchains ( `#1663 <https://github.com/easybuilders/easybuild-framework/pull/1663> `_ ) * enable Python optimization mode in ' ``eb`` ' ( `#1357 <https://github.com/easybuilders/easybuild-framework/pull/1357> `_ ) * improved GitHub integration * improve error handling on git commands + better logging for ``--new-pr`` / ``--update-pr`` ( `#1590 <https://github.com/easybuilders/easybuild-framework/pull/1590> `_ ) * use ``git`` rather than ``https`` in ``--new-pr`` / ``--update-pr`` ( `#1602 <https://github.com/easybuilders/easybuild-framework/pull/1602> `_ ) * add ``-u`` as shorthand for ``--upload-test-report`` ( `#1605 <https://github.com/easybuilders/easybuild-framework/pull/1605> `_ ) * fix ``--from-pr`` for PRs that include renamed/deleted files ( `#1615 <https://github.com/easybuilders/easybuild-framework/pull/1615> `_ ) * add support for ``--install-github-token`` and ``--check-github`` ( `#1616 <https://github.com/easybuilders/easybuild-framework/pull/1616> `_ ) * fix ``fetch_easyconfigs_from_pr`` w.r.t. duplicate files in PRs ( `#1628 <https://github.com/easybuilders/easybuild-framework/pull/1628> `_ ) * various other enhancements, including: * add support for ``--search-filename`` and ``--terse`` ( `#1577 <https://github.com/easybuilders/easybuild-framework/pull/1577> `_ ) * support complete bash completion ( `#1580 <https://github.com/easybuilders/easybuild-framework/pull/1580> `_ ) * add support for ``%(*ver)s`` and ``%(*shortver)s`` templates ( `#1595 <https://github.com/easybuilders/easybuild-framework/pull/1595> `_ , `#1604 <https://github.com/easybuilders/easybuild-framework/pull/1604> `_ ) * incl. ``%(javaver)s`` , ``%(javashortver)s`` , ``%(perlver)s`` , ``%(perlshortver)s`` , ``%(pyver)s`` , ``%(pyshortver)s`` , ``%(rver)s`` , ``%(rshortver)s`` * define ``HOME`` constant that can be used in easyconfig files ( `#1607 <https://github.com/easybuilders/easybuild-framework/pull/1607> `_ ) * implement support for generating ' ``swap`` ' statements in module files ( `#1609 <https://github.com/easybuilders/easybuild-framework/pull/1609> `_ ) * add support for ``--show-config`` ( `#1611 <https://github.com/easybuilders/easybuild-framework/pull/1611> `_ , `#1620 <https://github.com/easybuilders/easybuild-framework/pull/1620> `_ ) * simplified support for ``--minimal-toolchains`` ( `#1614 <https://github.com/easybuilders/easybuild-framework/pull/1614> `_ , `#1619 <https://github.com/easybuilders/easybuild-framework/pull/1619> `_ , `#1622 <https://github.com/easybuilders/easybuild-framework/pull/1622> `_ , `#1625 <https://github.com/easybuilders/easybuild-framework/pull/1625> `_ , `#1646 <https://github.com/easybuilders/easybuild-framework/pull/1646> `_ ) * add support for ``--dump-env-script`` ( `#1624 <https://github.com/easybuilders/easybuild-framework/pull/1624> `_ ) * enhance ModulesTool.exist to also recognize partial module names ( `#1630 <https://github.com/easybuilders/easybuild-framework/pull/1630> `_ ) * improve error message for toolchain definition errors ( `#1631 <https://github.com/easybuilders/easybuild-framework/pull/1631> `_ ) * make default is_short_modname_for check less strict to support versionless external modules as deps ( `#1632 <https://github.com/easybuilders/easybuild-framework/pull/1632> `_ ) * mention hostname in comment made by ``--upload-test-report`` ( `#1635 <https://github.com/easybuilders/easybuild-framework/pull/1635> `_ ) * support providing additional relative path for prefix in external module metadata ( `#1637 <https://github.com/easybuilders/easybuild-framework/pull/1637> `_ ) * add ``ThematicModuleNamingScheme`` ( `#1645 <https://github.com/easybuilders/easybuild-framework/pull/1645> `_ ) * enhance logging format: remove logger name, mention location instead ( `#1649 <https://github.com/easybuilders/easybuild-framework/pull/1649> `_ , `#1654 <https://github.com/easybuilders/easybuild-framework/pull/1654> `_ ) * update kernel versions for SLES12 ( `#1659 <https://github.com/easybuilders/easybuild-framework/pull/1659> `_ ) * raise ``EasyBuildError`` rather than ``ImportError`` in ``only_if_module_is_available`` decorator ( `#1662 <https://github.com/easybuilders/easybuild-framework/pull/1662> `_ ) * various bug fixes, including: * fix Lmod spider output in generated modules ( `#1583 <https://github.com/easybuilders/easybuild-framework/pull/1583> `_ ) * correctly define ' ``easybuild`` ' namespaces ( `#1593 <https://github.com/easybuilders/easybuild-framework/pull/1593> `_ , `#1666 <https://github.com/easybuilders/easybuild-framework/pull/1666> `_ , `#1680 <https://github.com/easybuilders/easybuild-framework/pull/1680> `_ ) * this change requires that the ``setuptools`` Python package is available (at runtime) * using custom easyblocks by adding them in the Python search path ( ``$PYTHONPATH`` ) may require adjustments, i.e. also using ``pkg_resources.declare_namespace`` in the ``__init__.py`` files; *we highly recommend to use* ``--include-easyblocks`` *instead* , see http://easybuild.readthedocs.org/en/latest/Including_additional_Python_modules.html * note: this has the side-effect of not being able anymore to reliably use ' ``eb`` ' in the parent directory of the easybuild-framework repository ( `#1667 <https://github.com/easybuilders/easybuild-framework/pull/1667> `_ ) * fix template for ``savannah.gnu.org`` source URL ( `#1601 <https://github.com/easybuilders/easybuild-framework/pull/1601> `_ ) * stop running ' ``module purge`` ', only restore environment ( `#1608 <https://github.com/easybuilders/easybuild-framework/pull/1608> `_ ) * fix license headers: Hercules foundation is now FWO ( `#1629 <https://github.com/easybuilders/easybuild-framework/pull/1629> `_ ) * avoid that ``fancylogger`` tries to import ``mpi4py`` to determine MPI rank ( `#1648 <https://github.com/easybuilders/easybuild-framework/pull/1648> `_ ) * fix error in tests when ' ``file`` ' backend is not available in Python keyring ( `#1650 <https://github.com/easybuilders/easybuild-framework/pull/1650> `_ ) * update develop install script ( `#1651 <https://github.com/easybuilders/easybuild-framework/pull/1651> `_ ) * handle allowed system deps during ``prepare_step`` rather than during parsing of easyconfig ( `#1652 <https://github.com/easybuilders/easybuild-framework/pull/1652> `_ ) * add function to find FlexLM licenses: ``find_flexlm_license`` ( `#1633 <https://github.com/easybuilders/easybuild-framework/pull/1633> `_ , `#1653 <https://github.com/easybuilders/easybuild-framework/pull/1653> `_ ) * fix availability check for external modules with partial module name ( `#1634 <https://github.com/easybuilders/easybuild-framework/pull/1634> `_ , `#1643 <https://github.com/easybuilders/easybuild-framework/pull/1643> `_ ) * fix bootstrap script to ensure ``setuptools`` is also installed ( `#1655 <https://github.com/easybuilders/easybuild-framework/pull/1655> `_ ) * fix issue in bootstrap script with ``vsc-base`` being picked up from the OS ( `#1656 <https://github.com/easybuilders/easybuild-framework/pull/1656> `_ ) * fix bootstrap script for environment where ' ``python`` ' is Python 3.x ( `#1660 <https://github.com/easybuilders/easybuild-framework/pull/1660> `_ ) * remove ``--experimental`` for tests related to ``--package`` ( `#1665 <https://github.com/easybuilders/easybuild-framework/pull/1665> `_ ) * ensure path to setuptools is included in ``$PYTHONPATH`` being used to test scripts ( `#1671 <https://github.com/easybuilders/easybuild-framework/pull/1671> `_ ) * sanitize environment before initializing easyblocks ( `#1676 <https://github.com/easybuilders/easybuild-framework/pull/1676> `_ ) * remove ``reload`` statements in ``include.py`` , since they are not required and break ``--include-toolchains`` ( `#1679 <https://github.com/easybuilders/easybuild-framework/pull/1679> `_ ) **easyblocks** * new easyblocks for 6 software packages that require customized support: * ADF ( `#826 <https://github.com/easybuilders/easybuild-easyblocks/pull/826> `_ ), MPICH ( `#844 <https://github.com/easybuilders/easybuild-easyblocks/pull/844> `_ , `#852 <https://github.com/easybuilders/easybuild-easyblocks/pull/852> `_ , `#868 <https://github.com/easybuilders/easybuild-easyblocks/pull/868> `_ ), mutil ( `#859 <https://github.com/easybuilders/easybuild-easyblocks/pull/859> `_ ), pplacer ( `#835 <https://github.com/easybuilders/easybuild-easyblocks/pull/835> `_ ), psmpi ( `#852 <https://github.com/easybuilders/easybuild-easyblocks/pull/852> `_ ), SNPhylo ( `#865 <https://github.com/easybuilders/easybuild-easyblocks/pull/865> `_ ) * various other enhancements, including: * implement support for ' ``use_pip`` ' in PythonPackage easyblock ( `#719 <https://github.com/easybuilders/easybuild-easyblocks/pull/719> `_ , `#831 <https://github.com/easybuilders/easybuild-easyblocks/pull/831> `_ ) * add support in CUDA easyblock to install wrappers for host compilers ( `#758 <https://github.com/easybuilders/easybuild-easyblocks/pull/758> `_ ) * update sanity check for picard version 1.124 and above ( `#796 <https://github.com/easybuilders/easybuild-easyblocks/pull/796> `_ ) * use ' ``module swap`` ' for all components in ``CrayToolchain`` ( `#823 <https://github.com/easybuilders/easybuild-easyblocks/pull/823> `_ ) * update PSI4 easyblock to cope with changed name of PSI4 data dir ( `#824 <https://github.com/easybuilders/easybuild-easyblocks/pull/824> `_ ) * use ``find_flexlm_license`` function and avoid defining ``$CPATH`` in PGI easyblock ( `#837 <https://github.com/easybuilders/easybuild-easyblocks/pull/837> `_ ) * use ``find_flexlm_license`` function in ``IntelBase`` generic easyblock ( `#839 <https://github.com/easybuilders/easybuild-easyblocks/pull/839> `_ ) * add unit test to check module file generated by ``PythonPackage`` easyblock ( `#841 <https://github.com/easybuilders/easybuild-easyblocks/pull/841> `_ ) * rework MVAPICH2 easyblock on top of new MPICH easyblock ( `#844 <https://github.com/easybuilders/easybuild-easyblocks/pull/844> `_ ) * add CUDA support in CP2K easyblock ( `#850 <https://github.com/easybuilders/easybuild-easyblocks/pull/850> `_ ) * also define ``$LD`` in ``buildopts`` for GATE ( `#855 <https://github.com/easybuilders/easybuild-easyblocks/pull/855> `_ ) * use ``find_flexlm_license`` function in TotalView easyblock ( `#839 <https://github.com/easybuilders/easybuild-easyblocks/pull/839> `_ ) * enhance ``MakeCp`` easyblock to also support renaming of files while copying them ( `#859 <https://github.com/easybuilders/easybuild-easyblocks/pull/859> `_ ) * hunt for usable ' ``python`` ' command in ``PythonPackage`` easyblock when system Python is used ( `#861 <https://github.com/easybuilders/easybuild-easyblocks/pull/861> `_ ) * add sanity check in ``easybuild/__init__.py`` w.r.t. current working dir ( `#869 <https://github.com/easybuilders/easybuild-easyblocks/pull/869> `_ ) * change suffix of original file to ``.easybuild`` when using ``fileinput`` in impi easyblock ( `#870 <https://github.com/easybuilders/easybuild-easyblocks/pull/870> `_ ) * various bug fixes, including: * make sure Python unicode settings match that of the system Python ( `#817 <https://github.com/easybuilders/easybuild-easyblocks/pull/817> `_ ) * remove FFTW related statements in HPL easyblock, since HPL doesn't require FFTW at all ( `#822 <https://github.com/easybuilders/easybuild-easyblocks/pull/822> `_ ) * use ``pkg_resources.declare_namespace`` rather than ``pkgutil.extend_path`` to declare ' ``easybuild`` ' namespaces ( `#827 <https://github.com/easybuilders/easybuild-easyblocks/pull/827> `_ ) * fix license headers: Hercules foundation is now FWO ( `#836 <https://github.com/easybuilders/easybuild-easyblocks/pull/836> `_ ) * fix check for non-empty lib dirs in ``PythonPackage`` easyblock ( `#840 <https://github.com/easybuilders/easybuild-easyblocks/pull/840> `_ ) * consider all Python lib dirs in sanity check for libxml2 ( `#842 <https://github.com/easybuilders/easybuild-easyblocks/pull/842> `_ ) * correctly handle deprecated configure options ( ``--with-hwloc`` / ``--enable-mpe`` ) in MVAPICH2 easyblock ( `#853 <https://github.com/easybuilders/easybuild-easyblocks/pull/853> `_ ) * use correct configure option for checkpoint/restart in MVAPICH2 easyblock ( `#854 <https://github.com/easybuilders/easybuild-easyblocks/pull/854> `_ ) * ensure list of Python lib dirs always has a ' ``lib/...`` ' entry ( `#858 <https://github.com/easybuilders/easybuild-easyblocks/pull/858> `_ ) * check whether ``rpm`` / ``rpmrebuild`` commands are available using ' ``which`` ', rather than checking for OS deps ( `#864 <https://github.com/easybuilders/easybuild-easyblocks/pull/864> `_ ) * fix ``test_step`` in UFC easyblock ( `#872 <https://github.com/easybuilders/easybuild-easyblocks/pull/872> `_ ) **easyconfigs** * added example easyconfig files for 63 new software packages: * ATSAS ( `#616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/616> `_ , `#2587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2587> `_ ), astropy ( `#2724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2724> `_ , `#2727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2727> `_ ), attr ( `#2706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2706> `_ ), BamUtil ( `#2654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2654> `_ ), BBMap ( `#2322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2322> `_ ), BH ( `#2508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2508> `_ ), CheMPS2 ( `#2445 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2445> `_ ), CosmoloPy ( `#2723 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2723> `_ , `#2727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2727> `_ ), csvkit ( `#2639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2639> `_ ), Firefox ( `#2648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2648> `_ ), FreeXL ( `#2422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2422> `_ ), GL2PS ( `#2667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2667> `_ ), Glade ( `#2631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2631> `_ ), htop ( `#2538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2538> `_ ), IGV ( `#2019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2019> `_ ), IGVTools ( `#2019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2019> `_ ), ImageMagick ( `#2438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2438> `_ ), jModelTest ( `#2529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2529> `_ ), KEALib ( `#2420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2420> `_ ), libcerf ( `#2656 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2656> `_ ), libgcrypt ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), libglade ( `#2631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2631> `_ ), libgpg-error ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), libspatialite ( `#2431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2431> `_ ), LittleCMS ( `#2438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2438> `_ ), MAST ( `#2542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2542> `_ ), MLC ( `#2577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2577> `_ ), MPJ-Express ( `#2529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2529> `_ ), mutil ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), neon ( `#758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/758> `_ ), NextClip ( `#2544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2544> `_ ), npstat ( `#2686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2686> `_ , `#2703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2703> `_ ), Octopus ( `#2643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2643> `_ ), QuickFF ( `#2721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2721> `_ ), p4vasp ( `#2328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2328> `_ ), PCMSolver ( `#2445 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2445> `_ ), PFFT ( `#2643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2643> `_ ), PHYLIP ( `#2694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2694> `_ ), pkgconfig ( `#2475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2475> `_ , `#2476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2476> `_ ), Platypus ( `#2618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2618> `_ ), pplacer ( `#1056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1056> `_ ), PRINSEQ ( `#2437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2437> `_ , `#2444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2444> `_ , `#2585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2585> `_ ), PyFFmpeg ( `#2501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2501> `_ , `#2519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2519> `_ ), PyGObject ( `#2443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2443> `_ ), PyGTK ( `#2443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2443> `_ ), PyOpenGL ( `#2628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2628> `_ ), pyringe ( `#2533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2533> `_ ), qrupdate ( `#2675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2675> `_ ), rgeos ( `#2635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2635> `_ ), rpmrebuild ( `#2402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2402> `_ ), shift ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), SNAPE-pooled ( `#2688 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2688> `_ ), SNPhylo ( `#2701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2701> `_ ), sratoolkit ( `#2715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2715> `_ ), STAR-Fusion ( `#2463 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2463> `_ ), statsmodels ( `#2719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2719> `_ ), StringTie ( `#2527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2527> `_ ), synchronicity ( `#2508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2508> `_ ), testpath ( `#2461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2461> `_ ), USEARCH ( `#2537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2537> `_ ), VarScan ( `#2464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2464> `_ ), vsc-install ( `#2165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2165> `_ ), Whoosh ( `#2725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2725> `_ ), xprop ( `#2645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2645> `_ ) * added new easyconfigs for existing toolchains: * ``intel/2016.02-GCC-4.9`` ( `#2620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2620> `_ ), ``gmpolf/2016a`` & ``gmvolf/2016a`` ( `#2589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2589> `_ ) * stable Cray-specific easyconfigs * delete deprecated Cray toolchains and easyconfig files ( `#2400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2400> `_ ) * don't hardcode ``PrgEnv`` version, remove ``craype`` and ``fftw`` components in Cray toolchains ( `#2554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2554> `_ ) * remove ``-XC`` versionsuffix for stable definitions for ``Cray*`` toolchains ( `#2714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2714> `_ ) * support for various software packages with ``CrayGNU`` and ``CrayIntel`` toolchains: CP2K, GROMACS, WRF * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including BWA 0.7.13, CMake 3.4.3, GATE 7.2, GROMACS 5.1.2, Mesa 11.1.2, netCDF 4.4.0, Perl 5.22.1, Python 3.5.1, R 3.2.3, R-bundle-Bioconductor 3.2, scipy 0.17.0, SuiteSparse 4.5.1 * various other enhancements, including: * copy ``contrib`` dir in Velvet easyconfigs so scripts are also available ( `#2456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2456> `_ ) * redefine matplotlib 1.5.1 easyconfig as a bundle, also include ``cycler`` extension (dep for matplotlib) ( `#2470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2470> `_ ) * add bitstring extension to Python 2.7.11 easyconfigs ( `#2471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2471> `_ ) * enable building of MetaVelvet in Velvet 1.2.10 easyconfigs ( `#2473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2473> `_ ) * add custom sanity check for libjpeg-turbo ( `#2480 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2480> `_ ) * add Velvet easyconfigs that include BioPerl dependency, so VelvetOptimizer can use it ( `#2495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2495> `_ , `#2729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2729> `_ , `#2733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2733> `_ ) * add source URL in RAxML 7.2.6 easyconfigs ( `#2536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2536> `_ ) * update MPICH easyconfigs to use new MPICH easyblock ( `#2589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2589> `_ ) * free libX11 & co from unneeded Python dependency/versionsuffix ( `#2549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2549> `_ , `#2563 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2563> `_ , `#2605 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2605> `_ , `#2664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2664> `_ ) * add ' ``--enable-utf --enable-unicode-properties`` ' configure options in PCRE easyconfigs ( `#2561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2561> `_ ) * required for latest R versions * add HCsnip, metagenomeSeq in Bioconductor 3.1 bundles ( `#2553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2553> `_ , `#2578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2578> `_ ) * add additional extensions in R 3.2.x easyconfigs that are required for extra Bioconductor extensions ( `#2547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2547> `_ , `#2556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2556> `_ ) * update psmpi easyconfig files to use the new psmpi easyblock ( `#2619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2619> `_ ) * add easyconfig for Python 2.7.11 on top of X11-enabled Tk ( `#2614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2614> `_ , `#2621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2621> `_ ) * add virtualenv as extension in Python 2.7.11 easyconfigs ( `#2660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2660> `_ ) * various bug fixes, including: * fix software name for GTK+ (was 'gtk+'), PyCairo (was 'pycairo') and Gdk-Pixbuf (was 'gdk-pixbuf') ( `#2468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2468> `_ ) * don't hardcode ``CC`` / ``CXX`` in OpenMPI easyconfigs ( `#2472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2472> `_ ) * remove Google Code source URL for mpi4py ( `#2474 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2474> `_ ) * rename ffmpeg to FFmpeg ( `#2425 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2425> `_ , `#2481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2481> `_ ) * use available easyblock for flex ( `#2486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2486> `_ ) * fix determining list of easyconfigs in unit test suite, don't assume locations are correct ( `#2530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2530> `_ ) * fix specifying DB dependency in DB_File easyconfigs ( `#2539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2539> `_ ) * remove hard-coded ``-xSSE4.2`` for numpy/scipy with Intel compilers ( `#2546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2546> `_ ) * fix license headers: Hercules foundation is now FWO ( `#2550 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2550> `_ ) * add ``--with-zlib`` configure argument in libxml easyconfigs ( `#2555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2555> `_ ) * don't hardcode ``optarch=True`` in xextproto/xtrans easyconfigs ( `#2601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2601> `_ ) * change toolchain version to '' in easyconfigs that use ``dummy`` toolchain and include dependencies ( `#2612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2612> `_ ) * GLib doesn't require libxml2 with Python bindings ( `#2632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2632> `_ ) * add patch file to imkl 10.2.6.038 32-bit easyconfig to fix installer not being able to deal with ' ``--`` ' in build path ( `#2634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2634> `_ ) * add missing 'pkgconfig' dependency for h5py ( `#2476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2476> `_ , `#2650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2650> `_ ) * correct software name in FastQC easyconfigs (was 'fastqc'), use ' ``dummy`` ' toolchain for all FastQC version ( `#2657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2657> `_ , `#2666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2666> `_ ) * add missing libxml2 dependencies in GLib easyconfigs ( `#2658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2658> `_ ) * fix Xerces-C++ download location ( `#2668 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2668> `_ ) * enable ``XML::Bare`` extension in all Perl easyconfigs ( `#2672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2672> `_ ) * update dead link for SuiteSparse ( `#2679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2679> `_ ) * remove custom ``exts_filter`` in easyconfigs used ``PythonPackage`` easyblock ( `#2683 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2683> `_ , `#2685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2685> `_ ) * add M4 as build dep for binutils & flex ( `#2681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2681> `_ ) * add missing dependencies in Python 3.5.x easyconfigs: SQLite, Tk, GMP ( `#2704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2704> `_ ) * fix (OS) deps, add checksums, remove parameter definition with default values in MVAPICH2 easyconfigs ( `#2707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2707> `_ ) * style cleanup in various easyconfigs ( `#2378 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2378> `_ , `#2387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2387> `_ , `#2395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2395> `_ , `#2396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2396> `_ , `#2488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2488> `_ - `#2493 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2493> `_ , `#2496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2496> `_ - `#2500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2500> `_ , `#2502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2502> `_ - `#2504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2504> `_ , `#2602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2602> `_ ) * working towards automated style review of pull requests .. _release_notes_eb260: EasyBuild v2.6.0 (January 26th 2016) ------------------------------------ feature + bugfix release **framework** * add (experimental) support for opening/updating (easyconfigs) pull requests ( ``--new-pr`` , ``--update-pr`` ) ( `#1528 <https://github.com/easybuilders/easybuild-framework/pull/1528> `_ ) * sanitize environment before each installation by undefining ``$PYTHON*`` ( `#1569 <https://github.com/easybuilders/easybuild-framework/pull/1569> `_ , `#1572 <https://github.com/easybuilders/easybuild-framework/pull/1572> `_ ) * various other enhancements, including: * allow user-local modules with hierarchical naming schemes ( ``--subdir-user-modules`` ) ( `#1472 <https://github.com/easybuilders/easybuild-framework/pull/1472> `_ ) * enhance ``--extended-dry-run`` output to include paths for requirements in ``make_module_req`` ( `#1520 <https://github.com/easybuilders/easybuild-framework/pull/1520> `_ ) * rewrite read_file to use ' ``with`` ' ( `#1534 <https://github.com/easybuilders/easybuild-framework/pull/1534> `_ ) * add support for ``eb --last-log`` ( `#1541 <https://github.com/easybuilders/easybuild-framework/pull/1541> `_ ) * support using fixed install dir scheme ( ``--fixed-installdir-naming-scheme`` ) ( `#1546 <https://github.com/easybuilders/easybuild-framework/pull/1546> `_ ) * add edge attributes for build dependencies in ``--dep-graph`` output ( `#1548 <https://github.com/easybuilders/easybuild-framework/pull/1548> `_ ) * check whether dependencies marked as external module are hidden ( `#1552 <https://github.com/easybuilders/easybuild-framework/pull/1552> `_ ) * implement support for ``--modules-header`` ( `#1558 <https://github.com/easybuilders/easybuild-framework/pull/1558> `_ ) * add support to specify ' ``else`` ' body for conditional statements in modules ( `#1559 <https://github.com/easybuilders/easybuild-framework/pull/1559> `_ ) * add extra test for ``--include-easyblocks`` for generic easyblocks ( `#1562 <https://github.com/easybuilders/easybuild-framework/pull/1562> `_ ) * allow user to define the default compiler optimization level ( ``--default-opt-level`` ) ( `#1565 <https://github.com/easybuilders/easybuild-framework/pull/1565> `_ ) * make ``toolchain.get_variable`` more robust w.r.t. dummy toolchain ( `#1566 <https://github.com/easybuilders/easybuild-framework/pull/1566> `_ ) * various bug fixes, including: * fix missing ' ``yaml`` ' module check in tests ( `#1525 <https://github.com/easybuilders/easybuild-framework/pull/1525> `_ ) * fix 'develop' install script ( `#1529 <https://github.com/easybuilders/easybuild-framework/pull/1529> `_ ) * correctly quote FPM option values in packagin support ( `#1530 <https://github.com/easybuilders/easybuild-framework/pull/1530> `_ ) * correctly handle ' ``.`` ' in software name w.r.t. ``$EB*`` environment variables ( `#1538 <https://github.com/easybuilders/easybuild-framework/pull/1538> `_ ) * exclude logs and test reports from packages ( `#1544 <https://github.com/easybuilders/easybuild-framework/pull/1544> `_ ) * also pass down ``--job-cores`` for ``pbs_python`` job backend ( `#1547 <https://github.com/easybuilders/easybuild-framework/pull/1547> `_ ) * skip dependencies marked as external modules when packaging ( `#1550 <https://github.com/easybuilders/easybuild-framework/pull/1550> `_ ) * fix syntax for ``set_alias`` statement in Lua syntax ( `#1554 <https://github.com/easybuilders/easybuild-framework/pull/1554> `_ ) * handle the case of all 'offline' nodes correctly for ``--job`` ( `#1560 <https://github.com/easybuilders/easybuild-framework/pull/1560> `_ ) * fix ``test_modules_tool_stateless`` unit test for stateless ModulesTool with Lmod as modules tool ( `#1570 <https://github.com/easybuilders/easybuild-framework/pull/1570> `_ ) **easyblocks** * add generic easyblock for Cray toolchains ( `#766 <https://github.com/easybuilders/easybuild-easyblocks/pull/766> `_ ) * new easyblocks for 2 software packages that require customized support: * EggLib ( `#811 <https://github.com/easybuilders/easybuild-easyblocks/pull/811> `_ ), PGI ( `#658 <https://github.com/easybuilders/easybuild-easyblocks/pull/658> `_ ) * various other enhancements, including: * update BamTools easyblock for versions 2.3.x and newer: some shared libraries are now static) ( `#785 <https://github.com/easybuilders/easybuild-easyblocks/pull/785> `_ ) * don't hardcode ``.so`` , use ``get_shared_lib_ext`` instead ( `#789 <https://github.com/easybuilders/easybuild-easyblocks/pull/789> `_ , `#790 <https://github.com/easybuilders/easybuild-easyblocks/pull/790> `_ , `#791 <https://github.com/easybuilders/easybuild-easyblocks/pull/791> `_ , `#793 <https://github.com/easybuilders/easybuild-easyblocks/pull/793> `_ , `#794 <https://github.com/easybuilders/easybuild-easyblocks/pull/794> `_ , `#803 <https://github.com/easybuilders/easybuild-easyblocks/pull/803> `_ , `#815 <https://github.com/easybuilders/easybuild-easyblocks/pull/815> `_ ) * enhance CPLEX easyblock by adding more subdirs to ``$PATH`` , define ``$LD_LIBRARY`` and ``$CPLEXDIR`` ( `#797 <https://github.com/easybuilders/easybuild-easyblocks/pull/797> `_ ) * make sanity check for netcdf4-python work with both egg and non-egg installs ( `#799 <https://github.com/easybuilders/easybuild-easyblocks/pull/799> `_ ) * update sanity check in PETSc/SLEPc easyblocks for v3.6.x ( `#800 <https://github.com/easybuilders/easybuild-easyblocks/pull/800> `_ ) * update Trinity easyblock for 2.x versions ( `#802 <https://github.com/easybuilders/easybuild-easyblocks/pull/802> `_ ) * update DOLFIN easyblock for v1.6.0 ( `#804 <https://github.com/easybuilders/easybuild-easyblocks/pull/804> `_ ) * check for ``libkokkoscore.a`` rather than ``libkokkos.a`` for Trilinos 12.x ( `#805 <https://github.com/easybuilders/easybuild-easyblocks/pull/805> `_ ) * add an option to skip the sanitizer tests of Clang ( `#806 <https://github.com/easybuilders/easybuild-easyblocks/pull/806> `_ ) * update Molpro easyblock to support binary installs and 2015 version ( `#807 <https://github.com/easybuilders/easybuild-easyblocks/pull/807> `_ ) * make ``ConfigureMake`` more robust w.r.t. custom easyconfig parameters ( `#810 <https://github.com/easybuilders/easybuild-easyblocks/pull/810> `_ ) * various bug fixes, including: * add back support for Eigen 2.x in Eigen easyblock ( `#798 <https://github.com/easybuilders/easybuild-easyblocks/pull/798> `_ ) * fix for vsc-base being picked up from OS in EasyBuildMeta easyblock ( `#813 <https://github.com/easybuilders/easybuild-easyblocks/pull/813> `_ ) * remove ``setuptools.pth`` if it includes absolute paths after installing EasyBuild ( `#813 <https://github.com/easybuilders/easybuild-easyblocks/pull/813> `_ ) **easyconfigs** * add easyconfigs for ``foss/2016a`` and ``intel/2016`` common toolchains ( `#2310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2310> `_ , `#2311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2311> `_ , `#2339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2339> `_ , `#2363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2363> `_ ) * incl. easyconfigs for Boost, CMake, Python, Perl using these toolchains * added example easyconfig files for 21 new software packages: * BLASR ( `#922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/922> `_ ), BioKanga ( `#2247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2247> `_ ), BoltzTraP ( `#2365 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2365> `_ ), basemap ( `#2221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2221> `_ ), CppUnit ( `#2271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2271> `_ ), EggLib ( `#2335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2335> `_ ), FLASH ( `#2281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2281> `_ ), GLM ( `#2288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2288> `_ ), hub ( `#2249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2249> `_ ), MACS2 ( `#1983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1983> `_ ), MotEvo ( `#843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/843> `_ ), numba ( `#2243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2243> `_ ), PGI ( `#1833 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1833> `_ , `#2367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2367> `_ ), PLY ( `#2305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2305> `_ ), PaStiX ( `#2319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2319> `_ , `#2326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2326> `_ ), patchelf ( `#2327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2327> `_ ), pip ( `#2284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2284> `_ ), RSEM ( `#2316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2316> `_ ), RcppArmadillo ( `#2289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2289> `_ ), SCDE ( `#2289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2289> `_ ), slepc4py ( `#2318 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2318> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including BamTools 2.4.0, Boost 1.60.0, Clang 3.7.1, DOLFIN/FFC/FIAT/Instant/UFL 1.6.0, GATE 7.0, GCC 5.3.0, LLVM 3.7.1, pandas 0.17.1, PETSc 3.6.3, SAMtools 1.3, scipy 0.16.1, SLEPc 3.6.2, Trilinos 12.4.2, Trinity 2.1.1, VTK 6.3.0 * various other enhancements, including: * added new ``Cray*`` toolchain versions with pinned dependency versions ( `#2222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2222> `_ ) * don't hardcode ``.so`` , use ``SHLIB_EXT`` constant instead ( `#2245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2245> `_ ) * add custom sanity check in GEOS easyconfigs ( `#2285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2285> `_ ) * various bug fixes, including: * add Autotools (M4) as a build dependency in GMP v6.x easyconfigs ( `#2096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2096> `_ ) * remove argparse from list of extensions in Python 3.2+ easyconfigs, since it became part of stdlib ( `#2323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2323> `_ ) * various style fixes, including: * get rid of tabs ( `#2302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2302> `_ ) * remove trailing whitespace ( `#2341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2341> `_ ) .. _release_notes_eb250: EasyBuild v2.5.0 (December 17th 2015) ------------------------------------- feature + bugfix release **framework** * add support for IBM XL compilers on Power7 and PowerPC (BlueGene) ( `#1470 <https://github.com/easybuilders/easybuild-framework/pull/1470> `_ ) * add support for generic compilation using ``--optarch=GENERIC`` ( `#1471 <https://github.com/easybuilders/easybuild-framework/pull/1471> `_ ) * see also :ref: `controlling_compiler_optimization_flags` * update experimental support for ``.yeb`` easyconfigs ( `#1515 <https://github.com/easybuilders/easybuild-framework/pull/1515> `_ ) * support clean way to specify toolchain + dependencies in ``.yeb`` easyconfigs * various other enhancements, including: * add support for ' ``whatis`` ' easyconfig parameter ( `#1271 <https://github.com/easybuilders/easybuild-framework/pull/1271> `_ ) * add support for SLES 12 and kernel 3.12.x ( `#1412 <https://github.com/easybuilders/easybuild-framework/pull/1412> `_ ) * add GCCcore toolchain definition ( `#1451 <https://github.com/easybuilders/easybuild-framework/pull/1451> `_ ) * use ' ``diff --git`` ' lines to determine patched files in pull request with ``--from-pr`` ( `#1460 <https://github.com/easybuilders/easybuild-framework/pull/1460> `_ ) * add proper option parser to bootstrap script ( `#1468 <https://github.com/easybuilders/easybuild-framework/pull/1468> `_ ) * add ``get_gcc_version()`` function in systemtools module ( `#1496 <https://github.com/easybuilders/easybuild-framework/pull/1496> `_ ) * don't load fake module in sanity_check_step during a dry run ( `#1499 <https://github.com/easybuilders/easybuild-framework/pull/1499> `_ ) * allow string values to be passed in ``make_module_req`` by hoisting them into a list ( `#1502 <https://github.com/easybuilders/easybuild-framework/pull/1502> `_ ) * add support for listing build dependencies as hidden dependencies ( `#1503 <https://github.com/easybuilders/easybuild-framework/pull/1503> `_ ) * also consider ``lib32/pkgconfig`` and ``lib64/pkgconfig`` for ``$PKG_CONFIG_PATH`` ( `#1505 <https://github.com/easybuilders/easybuild-framework/pull/1505> `_ ) * add support to ``make_module_dep`` to specify module to unload before loading a dependency module ( `#1506 <https://github.com/easybuilders/easybuild-framework/pull/1506> `_ ) * add support to ``make_module_extra`` to specify alternative root/version for ``$EBROOT`` / ``$EBVERSION`` ( `#1508 <https://github.com/easybuilders/easybuild-framework/pull/1508> `_ ) * packaging support is no longer considered experimental ( `#1510 <https://github.com/easybuilders/easybuild-framework/pull/1510> `_ ) * various bug fixes, including: * also consider ``lib64`` in sanity check performed during EasyBuild bootstrap ( `#1464 <https://github.com/easybuilders/easybuild-framework/pull/1464> `_ ) * also add description/homepage to packages created with FPM ( `#1469 <https://github.com/easybuilders/easybuild-framework/pull/1469> `_ ) * fix develop setup script to install EasyBuild-develop module in subdirectory ( `#1480 <https://github.com/easybuilders/easybuild-framework/pull/1480> `_ ) * don't create a whole set of temporary ' ``minimal-easyconfigs`` ' subdirs with ``--minimal-toolchains`` ( `#1484 <https://github.com/easybuilders/easybuild-framework/pull/1484> `_ ) * only keep polling if exit code is ``None`` in ``run_cmd_qa`` , to correctly deal with negative exit codes ( `#1486 <https://github.com/easybuilders/easybuild-framework/pull/1486> `_ ) * fix bootstrap script for missing sys_platform by using newer distribute 0.6.49 in stage 0 ( `#1490 <https://github.com/easybuilders/easybuild-framework/pull/1490> `_ ) * make sure that extra custom easyconfig parameters are known for extensions ( `#1498 <https://github.com/easybuilders/easybuild-framework/pull/1498> `_ ) * add missing import for ``EasyBuildError`` in ``easybuild/toolchains/linalg/libsci.py`` ( `#1512 <https://github.com/easybuilders/easybuild-framework/pull/1512> `_ ) * isolate tests from possible system-wide configuration files ( `#1513 <https://github.com/easybuilders/easybuild-framework/pull/1513> `_ ) * only use ``glob`` in ``make_module_req`` on non-empty strings ( `#1519 <https://github.com/easybuilders/easybuild-framework/pull/1519> `_ ) * this fixes the problem where ``$CUDA_HOME`` and ``$CUDA_PATH`` are not defined in module files for CUDA **easyblocks** * update easyblocks for Intel tools to support 2016 versions ( `#691 <https://github.com/easybuilders/easybuild-easyblocks/pull/691> `_ , `#745 <https://github.com/easybuilders/easybuild-easyblocks/pull/745> `_ , `#756 <https://github.com/easybuilders/easybuild-easyblocks/pull/756> `_ , `#777 <https://github.com/easybuilders/easybuild-easyblocks/pull/777> `_ ) * IntelBase easyblock has been enhanced to support specifying which components to install * new easyblocks for 3 software packages that require customized support: * Intel Advisor ( `#767 <https://github.com/easybuilders/easybuild-easyblocks/pull/767> `_ ), DIRAC ( `#778 <https://github.com/easybuilders/easybuild-easyblocks/pull/778> `_ ), MRtrix ( `#772 <https://github.com/easybuilders/easybuild-easyblocks/pull/772> `_ ) * various other enhancements, including: * update numpy and SuiteSparse easyblock to use scikit-umfpack ( `#718 <https://github.com/easybuilders/easybuild-easyblocks/pull/718> `_ ) * add an option to allow removal of the ``-Dusethreads`` flag in Perl easyblock ( `#724 <https://github.com/easybuilders/easybuild-easyblocks/pull/724> `_ ) * update Doxygen easyblock for 1.10.x (CMake) ( `#734 <https://github.com/easybuilders/easybuild-easyblocks/pull/734> `_ ) * update sanity check in Qt easyblock for Qt 5.x ( `#740 <https://github.com/easybuilders/easybuild-easyblocks/pull/740> `_ ) * add support for multilib build of GCC on PowerPC ( `#741 <https://github.com/easybuilders/easybuild-easyblocks/pull/741> `_ ) * add support to OpenFOAM and SCOTCH easyblocks to support 64-bit integers, via 'i8' toolchain option ( `#744 <https://github.com/easybuilders/easybuild-easyblocks/pull/744> `_ ) * fix sanity check to support numpy 1.10 (dropped _dotblas.so) ( `#757 <https://github.com/easybuilders/easybuild-easyblocks/pull/757> `_ , `#761 <https://github.com/easybuilders/easybuild-easyblocks/pull/761> `_ , `#762 <https://github.com/easybuilders/easybuild-easyblocks/pull/762> `_ ) * update IPP easyblock for v9.x ( `#759 <https://github.com/easybuilders/easybuild-easyblocks/pull/759> `_ ) * cleaner output for PythonPackage under dry run, make numpy easyblock dry-run aware ( `#760 <https://github.com/easybuilders/easybuild-easyblocks/pull/760> `_ , `#671 <https://github.com/easybuilders/easybuild-easyblocks/pull/671> `_ ) * add support for using netCDF-Fortran as dependency in ALADIN easyblock ( `#764 <https://github.com/easybuilders/easybuild-easyblocks/pull/764> `_ ) * add support for tbb 4.4.x in tbb easyblock ( `#769 <https://github.com/easybuilders/easybuild-easyblocks/pull/769> `_ ) * add support for specifying altroot/altversion in Bundle easyblock ( `#773 <https://github.com/easybuilders/easybuild-easyblocks/pull/773> `_ ) * update OpenFOAM easyblock for OpenFOAM-Extend 3.2 + use apply_regex_substitutions ( `#770 <https://github.com/easybuilders/easybuild-easyblocks/pull/770> `_ ) * various bug fixes, including: * fix module path extension of system compiler in HMNS setup ( `#742 <https://github.com/easybuilders/easybuild-easyblocks/pull/742> `_ ) * only restore ``$PYTHONPATH`` if it was defined in EasyBuildMeta easyblock ( `#743 <https://github.com/easybuilders/easybuild-easyblocks/pull/743> `_ ) * make sure ``$PYTHONPATH`` is defined correctly in module file for Python packages created with ``--module-only`` ( `#748 <https://github.com/easybuilders/easybuild-easyblocks/pull/748> `_ ) * fix WRF easyblock to produce correct module under ``--module-only --force`` ( `#746 <https://github.com/easybuilders/easybuild-easyblocks/pull/746> `_ , `#752 <https://github.com/easybuilders/easybuild-easyblocks/pull/752> `_ ) * don't hardcode ' ``openPBS`` ' in GATE easyblock, use value for ``default_platform`` easyconfig parameter ( `#753 <https://github.com/easybuilders/easybuild-easyblocks/pull/753> `_ ) * avoid adding lib subdirs to ``$*LIBRARY_PATH`` if no libraries are there in ``PythonPackage`` easyblock ( `#755 <https://github.com/easybuilders/easybuild-easyblocks/pull/755> `_ ) * fix installing Python bindings for libxml2 to correct installation prefix ( `#765 <https://github.com/easybuilders/easybuild-easyblocks/pull/765> `_ ) **easyconfigs** * add GCCcore easyconfig that can be used as base for all compilers (without getting in the way) ( `#2214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2214> `_ ) * along with easyconfig for ``GCC/4.9.3-2.25`` : bundle of GCCcore 4.9.3 and binutils 2.25 * intended to replace the GNU toolchain * added example easyconfig files for 39 new software packages: * DIRAC ( `#2212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2212> `_ ), GeoIP ( `#2172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2172> `_ , `#2185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2185> `_ ), GeoIP-C ( `#2172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2172> `_ , `#2185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2185> `_ ), graph-tool ( `#1591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1591> `_ ), gtkglext ( `#2217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2217> `_ ), Intel Advisor ( `#2210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2210> `_ ), InterProScan ( `#2225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2225> `_ , `#2227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2227> `_ , `#2234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2234> `_ ), intltool ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), kallisto ( `#2173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2173> `_ ), LibUUID ( `#1930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1930> `_ ), LuaJIT ( `#2153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2153> `_ ), libXcursor ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), libXrandr ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), libXtst ( `#2143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2143> `_ ), libdap ( `#1930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1930> `_ ), libtasn1 ( `#2208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2208> `_ ), libxkbcommon ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), MRtrix ( `#2217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2217> `_ , `#2218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2218> `_ ), MultiNest ( `#2166 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2166> `_ , `#2168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2168> `_ ), Nipype ( `#2150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2150> `_ ), PPfold ( `#2183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2183> `_ , `#2187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2187> `_ ), p11-kit ( `#2208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2208> `_ ), pangox-compat ( `#2217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2217> `_ ), Qt5 ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), randrproto ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), rhdf5 ( `#2175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2175> `_ ), Stampy ( `#2180 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2180> `_ , `#2182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2182> `_ ), scikit-umfpack ( `#2061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2061> `_ ), scp (Python pkg) ( `#2196 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2196> `_ ), sleuth ( `#2175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2175> `_ ), traits ( `#2150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2150> `_ ), vincent ( `#2169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2169> `_ , `#2185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2185> `_ ), XKeyboardConfig ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-image ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-keysyms ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-renderutil ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-wm ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), zlibbioc ( `#2175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2175> `_ ) * added new easyconfigs for existing toolchains: ``intel/2015.08`` ( `#2194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2194> `_ ), ``intel/2016.00`` ( `#2209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2209> `_ ), ``intel/2016.01`` ( `#2219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2219> `_ ), ``iomkl/2015.03`` ( `#2155 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2155> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including CMake 3.4.1, HDF5 1.8.16, netCDF 4.3.3.1, netCDF-Fortran 4.4.2, numpy 1.10.1, Octave 4.0.0, OpenFOAM 3.0.0, OpenFOAM-Extend 3.2, Python 2.7.11 * various other enhancements, including: * add tidyr to R 3.2.1 easyconfigs ( `#2174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2174> `_ ) * enable C++ support in MIGRATE-N ( `#2178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2178> `_ ) * also installed shared libraries for AMD and UMFPACK in SuiteSparse ( `#2061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2061> `_ ) * fix software name for ParaView (was: Paraview) ( `#2132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2132> `_ ) * enable building of shared libraries for binutils ( `#2133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2133> `_ ) * harden binutils built with dummy toolchain by linking to system libraries via ``RPATH`` ( `#2228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2228> `_ ) * enhance easyconfig unit tests to check that each easyconfig file is in the right subdirectory ( `#2232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2232> `_ ) * various bug fixes, including: * fix ALADIN patch file to not use relative paths, and adjust list of ALADIN sources accordingly (( `#2207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2207> `_ ), ( `#2213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2213> `_ )) * rename patch files for OpenFOAM to be in line with other patches ( `#2226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2226> `_ ) * fix typo in bzip2 source URLs ( `#2204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2204> `_ ) * force linking of ncurses in libreadline ( `#2206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2206> `_ ) * enable ``-fPIC`` in all zlib 1.2.8 easyconfigs ( `#2220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2220> `_ ) * move Net-LibIDN/SRA-Toolkit/bbftpPRO/o2scl easyconfigs to right location ( `#2232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2232> `_ ) * restrict parallel build in OpenFOAM-Extend easyconfigs via ' ``maxparallel`` ', not ' ``parallel`` ' ( `#2233 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2233> `_ ) .. _release_notes_eb240: EasyBuild v2.4.0 (November 10th 2015) ------------------------------------- feature + bugfix release **framework** * add support for ``--extended-dry-run`` / ``-x`` ( `#1388 <https://github.com/easybuilders/easybuild-framework/pull/1388> `_ , `#1450 <https://github.com/easybuilders/easybuild-framework/pull/1450> `_ , `#1453 <https://github.com/easybuilders/easybuild-framework/pull/1453> `_ , `#1455 <https://github.com/easybuilders/easybuild-framework/pull/1455> `_ ) * detailed documentation is available at :ref: `extended_dry_run` * fix checking of sanity check paths w.r.t. discriminating between files and directories ( `#1436 <https://github.com/easybuilders/easybuild-framework/pull/1436> `_ ) * this impacts several easyconfig files where ``sanity_check_paths`` was not 100% correct * make ' ``eb`` ' script aware of Python v3.x, fall back to using ``python2`` if required ( `#1411 <https://github.com/easybuilders/easybuild-framework/pull/1411> `_ ) * add experimental support for parsing .yeb easyconfig files in YAML syntax ( `#1447 <https://github.com/easybuilders/easybuild-framework/pull/1447> `_ , `#1448 <https://github.com/easybuilders/easybuild-framework/pull/1448> `_ , `#1449 <https://github.com/easybuilders/easybuild-framework/pull/1449> `_ ) * see also :ref: `easyconfig_yeb_format` * add experimental support for resolving dependencies with minimal toolchains ( `#1306 <https://github.com/easybuilders/easybuild-framework/pull/1306> `_ ) * see also :ref: `minimal_toolchains` * various other enhancements, including: * refactor ``extract_cmd`` function to get rid of if/elif/else spaghetti blob ( `#1382 <https://github.com/easybuilders/easybuild-framework/pull/1382> `_ ) * add support for ``--review-pr`` ( `#1383 <https://github.com/easybuilders/easybuild-framework/pull/1383> `_ ) * add ``apply_regex_substitutions`` function to perform runtime patching from easyblocks ( `#1388 <https://github.com/easybuilders/easybuild-framework/pull/1388> `_ , `#1458 <https://github.com/easybuilders/easybuild-framework/pull/1458> `_ ) * add support for specifying alternate name to be part of generated module name ( `#1389 <https://github.com/easybuilders/easybuild-framework/pull/1389> `_ ) * via ' ``modaltsoftname`` ' easyconfig parameter * support overriding # used cores via ``--parallel`` ( `#1393 <https://github.com/easybuilders/easybuild-framework/pull/1393> `_ ) * also define ``$FC`` and ``$FCFLAGS`` in build environment ( `#1394 <https://github.com/easybuilders/easybuild-framework/pull/1394> `_ ) * add support extracting for ``.tar.Z`` files ( `#1396 <https://github.com/easybuilders/easybuild-framework/pull/1396> `_ ) * include easybuild/scripts in installation ( `#1397 <https://github.com/easybuilders/easybuild-framework/pull/1397> `_ ) * ignore hidden directories in find_base_dir ( `#1413 <https://github.com/easybuilders/easybuild-framework/pull/1413> `_ , `#1415 <https://github.com/easybuilders/easybuild-framework/pull/1415> `_ ) * add ``only_if_module_is_available`` decorator function to guard functionality that uses optional dependencies ( `#1416 <https://github.com/easybuilders/easybuild-framework/pull/1416> `_ ) * give easyblocks the possibility to choose ``maxhits`` for ``run_cmd_qa`` ( `#1417 <https://github.com/easybuilders/easybuild-framework/pull/1417> `_ ) * use class name (string) rather than License instances as values for software license constants ( `#1418 <https://github.com/easybuilders/easybuild-framework/pull/1418> `_ ) * support controlling recursive unloading of dependencies via ' ``recursive_module_unload`` ' easyconfig parameter ( `#1425 <https://github.com/easybuilders/easybuild-framework/pull/1425> `_ ) * implement basic support for type checking of easyconfig parameters ( `#1427 <https://github.com/easybuilders/easybuild-framework/pull/1427> `_ ) * support auto-converting to expected value type for easyconfig parameters (enabled by default) ( `#1428 <https://github.com/easybuilders/easybuild-framework/pull/1428> `_ , `#1437 <https://github.com/easybuilders/easybuild-framework/pull/1437> `_ ) * add support for ``--rebuild`` command line option, alternative for ``--force`` which doesn't imply ``--ignore-osdeps`` ( `#1435 <https://github.com/easybuilders/easybuild-framework/pull/1435> `_ ) * add support for Mercurial easyconfig repository ( `#979 <https://github.com/easybuilders/easybuild-framework/pull/979> `_ , `#1446 <https://github.com/easybuilders/easybuild-framework/pull/1446> `_ ) * add dedicated class for psmpi toolchain MPI component, and use it in gpsmpi and ipsmpi toolchains ( `#1454 <https://github.com/easybuilders/easybuild-framework/pull/1454> `_ ) * various bug fixes, including: * fix extracting of comments from an easyconfig file that includes 'tail' comments ( `#1381 <https://github.com/easybuilders/easybuild-framework/pull/1381> `_ ) * fix dev version to follow PEP-440, as required by recent setuptools versions ( `#1403 <https://github.com/easybuilders/easybuild-framework/pull/1403> `_ ) * required to avoid that setuptools transforms the version itself * see also https://www.python.org/dev/peps/pep-0440/#developmental-releases * allow ``get_cpu_speed`` to return ``None`` if CPU freq could not be determined ( `#1421 <https://github.com/easybuilders/easybuild-framework/pull/1421> `_ ) * relax ``sanity_check_paths`` in EasyBuild bootstrap script to deal with possible zipped .egg ( `#1422 <https://github.com/easybuilders/easybuild-framework/pull/1422> `_ ) * use empty list as default value for src/patches in Extension class ( `#1434 <https://github.com/easybuilders/easybuild-framework/pull/1434> `_ ) * skip symlinked files in ``adjust_permissions`` function ( `#1439 <https://github.com/easybuilders/easybuild-framework/pull/1439> `_ ) * fix HierarchicalMNS to always use full version number ( `#1440 <https://github.com/easybuilders/easybuild-framework/pull/1440> `_ ) **easyblocks** * 3 new generic easyblocks: OCamlPackage ( `#467 <https://github.com/easybuilders/easybuild-easyblocks/pull/467> `_ ), SCons ( `#689 <https://github.com/easybuilders/easybuild-easyblocks/pull/689> `_ , `#700 <https://github.com/easybuilders/easybuild-easyblocks/pull/700> `_ ), Waf ( `#722 <https://github.com/easybuilders/easybuild-easyblocks/pull/722> `_ ) * new easyblocks for 2 software packages that require customized support: * OCaml ( `#467 <https://github.com/easybuilders/easybuild-easyblocks/pull/467> `_ ), Samcef ( `#678 <https://github.com/easybuilders/easybuild-easyblocks/pull/678> `_ ) * various other enhancements, including: * add support for installing OpenFOAM with external METIS, CGAL and Paraview ( `#497 <https://github.com/easybuilders/easybuild-easyblocks/pull/497> `_ ) * update netCDF easyblock updated for netCDF v4.3.3.1 ( `#674 <https://github.com/easybuilders/easybuild-easyblocks/pull/674> `_ ) * update Rosetta easyblock for recent Rosetta versions ( `#677 <https://github.com/easybuilders/easybuild-easyblocks/pull/677> `_ ) * make unpacked source dir detection in easyblock for VSC-tools a little bit more flexible ( `#679 <https://github.com/easybuilders/easybuild-easyblocks/pull/679> `_ ) * add support for building with Plumed support enabled in CP2K easyblock ( `#681 <https://github.com/easybuilders/easybuild-easyblocks/pull/681> `_ ) * update Go easyblock for Go v1.5 ( `#683 <https://github.com/easybuilders/easybuild-easyblocks/pull/683> `_ ) * use ``apply_regex_substitutions`` function in WRF easyblock ( `#685 <https://github.com/easybuilders/easybuild-easyblocks/pull/685> `_ ) * update MUMPS easyblock for 5.x ( `#686 <https://github.com/easybuilders/easybuild-easyblocks/pull/686> `_ ) * implement runtime patching of ``$WM_*`` and compiler variables for OpenFOAM ( `#688 <https://github.com/easybuilders/easybuild-easyblocks/pull/688> `_ ) * specify sequential compiler to use in compiler command that gets injected in OpenFOAM easyblock ( `#692 <https://github.com/easybuilders/easybuild-easyblocks/pull/692> `_ ) * make ``PythonPackage`` and WRF easyblocks dry-run aware ( `#696 <https://github.com/easybuilders/easybuild-easyblocks/pull/696> `_ ) * see also :ref: `extended_dry_run_guidelines_easyblocks` * add support in ``PythonPackage`` for installing with ``easy_install`` + installing zipped eggs ( `#698 <https://github.com/easybuilders/easybuild-easyblocks/pull/698> `_ , `#711 <https://github.com/easybuilders/easybuild-easyblocks/pull/711> `_ , `#715 <https://github.com/easybuilders/easybuild-easyblocks/pull/715> `_ ) * update Bowtie easyblock for recent Bowtie versions ( `#707 <https://github.com/easybuilders/easybuild-easyblocks/pull/707> `_ ) * update CUDA easyblock for CUDA 7.x( `#708 <https://github.com/easybuilders/easybuild-easyblocks/pull/708> `_ ) * also consider ``config/make.sys.in`` for want in QuantumESRESSO easyblock ( `#714 <https://github.com/easybuilders/easybuild-easyblocks/pull/714> `_ ) * define ``$NWCHEM_LONG_PATH`` if needed in NWChem easyblock ( `#720 <https://github.com/easybuilders/easybuild-easyblocks/pull/720> `_ ) * remove custom post-install step in PDT easyblock ( `#723 <https://github.com/easybuilders/easybuild-easyblocks/pull/723> `_ ) * no longer needed now that ``adjust_permissions`` functions ignores symlinks * use ``$LIBS`` in HPL easyblock ( `#727 <https://github.com/easybuilders/easybuild-easyblocks/pull/727> `_ , `#736 <https://github.com/easybuilders/easybuild-easyblocks/pull/736> `_ ) * various bug fixes, including: * also define ``$MCRROOT`` for MCR in module ( `#687 <https://github.com/easybuilders/easybuild-easyblocks/pull/687> `_ ) * add missing ' ``super`` ' call in ``configure_step`` of easyblock for python-meep ( `#694 <https://github.com/easybuilders/easybuild-easyblocks/pull/694> `_ ) * only prepend existing non-empty paths to ``$PYTHONPATH`` in ``PythonPackage`` easyblock ( `#697 <https://github.com/easybuilders/easybuild-easyblocks/pull/697> `_ ) * fix extra_options definition in ``CMakePythonPackage`` easyblock ( `#698 <https://github.com/easybuilders/easybuild-easyblocks/pull/698> `_ ) * fix dev version to follow PEP-440, as required by recent setuptools versions ( `#702 <https://github.com/easybuilders/easybuild-easyblocks/pull/702> `_ , `#703 <https://github.com/easybuilders/easybuild-easyblocks/pull/703> `_ , `#704 <https://github.com/easybuilders/easybuild-easyblocks/pull/704> `_ ) * required to avoid that setuptools transforms the version itself * see also https://www.python.org/dev/peps/pep-0440/#developmental-releases * consider both ``lib`` and ``lib64`` in sanity check paths for flex ( `#705 <https://github.com/easybuilders/easybuild-easyblocks/pull/705> `_ ) * also copy signature file and don't copy CMake files in Eigen easyblock ( `#709 <https://github.com/easybuilders/easybuild-easyblocks/pull/709> `_ ) * fix directory names in ``make_module_req_guess`` of ANSYS easyblock ( `#713 <https://github.com/easybuilders/easybuild-easyblocks/pull/713> `_ ) * fix imports for ``set_tmpdir`` in easyblock unit tests after function was moved in EasyBuild framework ( `#726 <https://github.com/easybuilders/easybuild-easyblocks/pull/726> `_ ) * use ``--with-tcltk*`` configure options for Python to point to ensure Tcl/Tk deps are picked up ( `#729 <https://github.com/easybuilders/easybuild-easyblocks/pull/729> `_ ) * fix order of subdirs for QuantumESPRESSO binaries ( `#730 <https://github.com/easybuilders/easybuild-easyblocks/pull/730> `_ ) * correctly handle having both ``$FC`` / ``$FCFLAGS`` and ``$F90`` / ``$F90FLAGS`` defined when building MVAPICH2 ( `#732 <https://github.com/easybuilders/easybuild-easyblocks/pull/732> `_ ) * fix OpenSSL sanity check paths: lib/engines is a directory ( `#731 <https://github.com/easybuilders/easybuild-easyblocks/pull/731> `_ , `#733 <https://github.com/easybuilders/easybuild-easyblocks/pull/733> `_ ) * fix sanity check paths for netcdf-python ( `#735 <https://github.com/easybuilders/easybuild-easyblocks/pull/735> `_ ) **easyconfigs** * added example easyconfig files for 45 new software packages: * animation ( `#2007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2007> `_ ), ANSYS CFD ( `#1969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1969> `_ ), ANTLR ( `#1191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1191> `_ , `#1980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1980> `_ ), APR ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), APR-util ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), Aspera Connect ( `#2005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2005> `_ ), ChIP-Seq ( `#2119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2119> `_ ), deap ( `#2082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2082> `_ ), DISCOVARdenovo ( `#1932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1932> `_ ), FastQC ( `#1984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1984> `_ ), fontsproto ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), GraphicsMagick ( `#2007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2007> `_ ), HBase ( `#1990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1990> `_ ), ISIS ( `#1972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1972> `_ ), libedit ( `#293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/293> `_ ), libfontenc ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), libGLU ( `#1627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1627> `_ ), libXdamage ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), libXfont ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), LLVM ( `#1620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1620> `_ , `#1989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1989> `_ , `#2031 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2031> `_ ), MIGRATE-N ( `#1944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1944> `_ ), MIRA ( `#1938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1938> `_ ), mympingpong ( `#2049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2049> `_ ), MySQLdb ( `#2011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2011> `_ ), NCO ( `#1191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1191> `_ , `#1980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1980> `_ ), NIPY ( `#2064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2064> `_ ), Nilearn ( `#2064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2064> `_ ), NiBabel ( `#2064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2064> `_ ), PBZIP2 ( `#1038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1038> `_ ), PIL ( `#2062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2062> `_ ), PhyloCSF ( `#2018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2018> `_ ), pycairo ( `#2085 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2085> `_ ), pydicom ( `#2063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2063> `_ ), Salmon ( `#2051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2051> `_ ), Samcef ( `#1941 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1941> `_ ), scikit-image ( `#1974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1974> `_ , `#2006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2006> `_ ), Serf ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), SSAHA2 ( `#1039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1039> `_ ), Subversion ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), SWASH ( `#2059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2059> `_ ), time ( `#1954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1954> `_ ), Trim_Galore ( `#1984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1984> `_ ), Trimmomatic ( `#1987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1987> `_ ), WEKA ( `#1986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1986> `_ ), x264 ( `#2017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2017> `_ ) * added new easyconfigs for existing toolchains: ``gimkl/2.11.5`` ( `#2093 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2093> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Clang + LLVM 3.7.0, CMake 3.3.2, CUDA 7.5.18, hanythingondemand v3.0.1, Mesa 11.0.2, mpi4py v2.0.0, ncurses 6.0, OpenFOAM 2.4.0, Paraview 4.4.0, Python 3.5.0, QuantumESPRESSO v5.2.1 * various other enhancements, including: * enable ' ``pic`` ' toolchain option in libxml2 easyconfigs ( `#1993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1993> `_ ) * extend list of R libraries included in R v3.2.1 easyconfigs ( `#2042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2042> `_ , `#2046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2046> `_ , `#2067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2067> `_ , `#2072 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2072> `_ ) * add Rsubread in Bioconductor easyconfigs ( `#1971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1971> `_ ) * various bug fixes, including: * fix software name for ``BEEF`` (was ' ``libbeef`` ') ( `#1679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1679> `_ ) * add patch to install ``qhull.pc`` (pkgconfig) file with Qhull ( `#1975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1975> `_ ) * don't enable experimental nouveau API in libdrm easyconfigs ( `#1994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1994> `_ ) * fix dev version to follow PEP-440, as required by recent setuptools versions ( `#1997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1997> `_ ) * required to avoid that setuptools transforms the version itself * see also https://www.python.org/dev/peps/pep-0440/#developmental-releases * correct homepage in Cufflinks easyconfigs ( `#2060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2060> `_ ) * fix imports for ``set_tmpdir`` in easyblock unit tests after function was moved in EasyBuild framework ( `#2097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2097> `_ ) * add patch for Tk 8.6.4 to fix problem with ``tk.tcl`` not being found ( `#2102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2102> `_ ) * don't use ``%(version)s`` template in toolchain version, causes problems with HierarchicalMNS ( `#2104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2104> `_ ) * fix sanity check paths in several easyconfig ( `#2109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2109> `_ , `#2120 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2120> `_ , `#2121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2121> `_ , `#2125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2125> `_ ) * required because of bug fix in ``sanity_check_step`` implementation * CVXOPT, h5py, LIBSVM, libunistring, MDP, monty, PhyloCSF, Pyke, pandas, pycosat, pyhull, pymatgen, python-dateutils, Seaborn, Theano, XML-LibXML, XML-Simple .. _release_notes_eb230: EasyBuild v2.3.0 (September 2nd 2015) ------------------------------------- feature + bugfix release **framework** * requires vsc-base v2.2.4 or more recent ( `#1343 <https://github.com/easybuilders/easybuild-framework/pull/1343> `_ ) * required for ``mk_rst_table`` function in ``vsc.utils.docs`` * various other enhancements, including: * add support for generating documentation for (generic) easyblocks in ``.rst`` format ( `#1317 <https://github.com/easybuilders/easybuild-framework/pull/1317> `_ ) * preserve comments in easyconfig file in ``EasyConfig.dump()`` method ( `#1327 <https://github.com/easybuilders/easybuild-framework/pull/1327> `_ ) * add ``--cleanup-tmpdir`` option ( `#1365 <https://github.com/easybuilders/easybuild-framework/pull/1365> `_ ) * enables to preserve the used temporary directory via ``--disable-cleanup-tmpdir`` * enhance ``EasyConfig.dump()`` to reformat dumped easyconfig according to style guidelines ( `#1345 <https://github.com/easybuilders/easybuild-framework/pull/1345> `_ ) * add support for extracting ``.iso`` files using 7z (p7zip) ( `#1375 <https://github.com/easybuilders/easybuild-framework/pull/1375> `_ ) * various bug fixes, including: * correctly deal with special characters in template strings in ``EasyConfig.dump()`` method ( `#1323 <https://github.com/easybuilders/easybuild-framework/pull/1323> `_ ) * rework ``easybuild.tools.module_generator`` module to avoid keeping state w.r.t. fake modules ( `#1348 <https://github.com/easybuilders/easybuild-framework/pull/1348> `_ ) * fix dumping of hidden deps ( `#1354 <https://github.com/easybuilders/easybuild-framework/pull/1354> `_ ) * fix use of ``--job`` with hidden dependencies: include ``--hidden`` in submitted job script when needed ( `#1356 <https://github.com/easybuilders/easybuild-framework/pull/1356> `_ ) * fix ``ActiveMNS.det_full_module_name()`` for external modules ( `#1360 <https://github.com/easybuilders/easybuild-framework/pull/1360> `_ ) * fix ``EasyConfig.all_dependencies`` definition, fix tracking of job dependencies ( `#1359 <https://github.com/easybuilders/easybuild-framework/pull/1359> `_ , `#1361 <https://github.com/easybuilders/easybuild-framework/pull/1361> `_ ) * fix ``ModulesTool.exist()`` for hidden Lua module files ( `#1364 <https://github.com/easybuilders/easybuild-framework/pull/1364> `_ ) * only call ``EasyBlock.sanity_check_step`` for non-extensions ( `#1366 <https://github.com/easybuilders/easybuild-framework/pull/1366> `_ ) * this results in significant speedup when installing easyconfigs with lots of extensions, but also results in checking the default sanity check paths if none were defined for extensions installed as a module * fix using module naming schemes that were included via ``--include-module-naming-schemes`` ( `#1370 <https://github.com/easybuilders/easybuild-framework/pull/1370> `_ ) **easyblocks** * new easyblocks for 2 software packages that require customized support: * MCR ( `#623 <https://github.com/easybuilders/easybuild-easyblocks/pull/623> `_ ), Molpro ( `#665 <https://github.com/easybuilders/easybuild-easyblocks/pull/665> `_ ) * various other enhancements, including: * enhance BWA easyblock to also install man pages ( `#650 <https://github.com/easybuilders/easybuild-easyblocks/pull/650> `_ ) * enhance tbb easyblock to consider lib dirs in order and also define ``$CPATH`` , ``$LIBRARY_PATH`` , ``$TBBROOT`` ( `#653 <https://github.com/easybuilders/easybuild-easyblocks/pull/653> `_ , `#654 <https://github.com/easybuilders/easybuild-easyblocks/pull/654> `_ ) * call ``PythonPackage.configure_step`` in ``ConfigureMakePythonPackage.configure_step`` ( `#668 <https://github.com/easybuilders/easybuild-easyblocks/pull/668> `_ ) * add ' ``foldx3b6`` ' as possible binary name in FoldX easyblock ( `#671 <https://github.com/easybuilders/easybuild-easyblocks/pull/671> `_ ) * enhance/cleanup MATLAB easyblock ( `#672 <https://github.com/easybuilders/easybuild-easyblocks/pull/672> `_ ) * move preparing of ' ``intel`` ' subdir in ``$HOME`` to ``configure_step`` in ``IntelBase`` easyblock ( `#673 <https://github.com/easybuilders/easybuild-easyblocks/pull/673> `_ ) * various bug fixes, including: * add missing super call in ``post_install_step`` of imkl easyblock ( `#648 <https://github.com/easybuilders/easybuild-framework/pull/648> `_ , `#660 <https://github.com/easybuilders/easybuild-framework/pull/660> `_ ) * fix regex used to correct ``I_MPI_ROOT`` in impi ``mpivars.sh`` scripts ( `#662 <https://github.com/easybuilders/easybuild-easyblocks/pull/662> `_ ) * fix regex used to patch ``.mk`` file in configure step of SuiteSparse easyblock ( `#666 <https://github.com/easybuilders/easybuild-easyblocks/pull/666> `_ ) * correctly specify installation prefix via ``$GEM_HOME`` in ``RubyGem`` easyblock ( `#667 <https://github.com/easybuilders/easybuild-easyblocks/pull/667> `_ ) * add custom sanity check in scipy easyblock ( `#669 <https://github.com/easybuilders/easybuild-easyblocks/pull/669> `_ ) * specify to always use the bfd linker for OpenFOAM, to stay away from using ``ld.gold`` ( `#670 <https://github.com/easybuilders/easybuild-easyblocks/pull/670> `_ ) **easyconfigs** * added example easyconfig files for 19 new software packages: * ATK ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), Atkmm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), cairomm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), GLibmm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), GlobalArrays ( `#1868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1868> `_ ), gdk-pixbuf ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), gtk+ ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), Gtkmm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), libbeef ( `#1827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1827> `_ ), libsigc++ ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), libsodium ( `#1876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1876> `_ ), MACS ( `#1869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1869> `_ ), MCR ( `#1677 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1677> `_ ), Molpro ( `#1880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1880> `_ ), NFFT ( `#1921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1921> `_ ), p7zip ( `#1931 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1931> `_ ), Pangomm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), pygraphviz ( `#1861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1861> `_ ), pycosat ( `#1859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1859> `_ ) * added new easyconfigs for existing toolchains: GNU/4.9.3-2.25 ( `#1836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1836> `_ ), foss/2015b ( `#1695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1695> `_ ), intel/2015b ( `#1696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1696> `_ ) * add easyconfigs using this toolchain for BLAST+ 2.2.31, Boost 1.58.0, CP2K 2.6.1, OpenFOAM 2.3.1, Perl 5.20.2 + 5.22.0 (bare), Python 2.7.10, R 3.2.1 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Boost 1.59.0, CP2K 2.6.1, GCC 5.2.0 * various other enhancements, including: * enhance texinfo easyconfig w.r.t. ``texmf`` , only use it as a build dependency ( `#1840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1840> `_ ) * enable building of ``ld.gold`` in binutils 2.25 ( `#1885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1885> `_ ) * various bug fixes, including: * fix enabling MPI support for h5py 2.5.0 ( `#1825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1825> `_ ) * fix versions of Bioconductor packages + add a couple extra ( `#1828 <https://github.com/easybuilders/easybuild-framework/pull/1828> `_ , `#1852 <https://github.com/easybuilders/easybuild-framework/pull/1852> `_ , `#1895 <https://github.com/easybuilders/easybuild-framework/pull/1895> `_ , `#1917 <https://github.com/easybuilders/easybuild-framework/pull/1917> `_ ) * put dummy values in place for ``builddir`` / ``installdir`` templates in easyconfigs unit tests ( `#1835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1835> `_ ) * fix easyconfigs unit tests w.r.t. changes made in framework ( `#1853 <https://github.com/easybuilders/easybuild-framework/pull/1853> `_ , `#1870 <https://github.com/easybuilders/easybuild-framework/pull/1870> `_ , `#1874 <https://github.com/easybuilders/easybuild-framework/pull/1874> `_ , `#1875 <https://github.com/easybuilders/easybuild-framework/pull/1875> `_ ) * add GMP as missing dep in Python 2.7.10 easyconfigs, required for pycrypto extension ( `#1858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1858> `_ ) * specify installation prefix for SIP ( `#1888 <https://github.com/easybuilders/easybuild-framework/pull/1888> `_ , `#1892 <https://github.com/easybuilders/easybuild-framework/pull/1892> `_ ) * add custom sanity check paths in various easyconfigs ( `#1889 <https://github.com/easybuilders/easybuild-framework/pull/1889> `_ , `#1894 <https://github.com/easybuilders/easybuild-framework/pull/1894> `_ , `#1897 <https://github.com/easybuilders/easybuild-framework/pull/1897> `_ - `#1909 <https://github.com/easybuilders/easybuild-framework/pull/1909> `_ ) * required because of fix in EasyBuild framework, causing default sanity check paths to be considered for extensions that are installed as a module * affected easyconfigs include: AnalyzeFMRI, Biggus, bibtexparser, DB_File, DBD-Pg, DBD-SQLite, DBD-mysql, evmix, fmri, FPM, GraphViz, gsl, GSSAPI, MDP, mpi4py, ncdf, ncdf4, netifaces, NetLibIDN, networkx, ordereddict, Parallel-ForkManager, paycheck, PyQuante, Pyke, PyQt, r2py, rjags, runjags, scikit-learn, SOBAcl, vsc-processcontrol, vsc-mympirun-scoop, XML, XML-Dumper, XML-Parser, XML-Twig, YAML-Syck * don't enable ' ``static`` ' toolchain option in SuiteSparse 4.4.3 easyconfig ( `#1911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1911> `_ ) * add --exclude unpack options for OpenFOAM 2.3.1 to avoid cyclic symlink causing problems when unpacking ( `#1925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1925> `_ ) .. _release_notes_eb220: EasyBuild v2.2.0 (July 15th 2015) --------------------------------- feature + bugfix release **framework** * add support for using GC3Pie as a backend for ``--job`` ( `#1008 <https://github.com/easybuilders/easybuild-framework/pull/1008> `_ ) * see also :ref: `submitting_jobs` * add support for ``--include-*`` configuration options to include additional easyblocks, toolchains, etc. ( `#1301 <https://github.com/easybuilders/easybuild-framework/pull/1301> `_ ) * see :ref: `including_additional_python_modules` * add (experimental) support for packaging installed software using FPM ( `#1224 <https://github.com/easybuilders/easybuild-framework/pull/1224> `_ ) * see :ref: `packaging_support` * various other enhancements, including: * use https for PyPI URL templates ( `#1286 <https://github.com/easybuilders/easybuild-framework/pull/1286> `_ ) * add GNU toolchain definition ( `#1287 <https://github.com/easybuilders/easybuild-framework/pull/1287> `_ ) * make bootstrap script more robust ( `#1289 <https://github.com/easybuilders/easybuild-framework/pull/1289> `_ , `#1325 <https://github.com/easybuilders/easybuild-framework/pull/1325> `_ ): * exclude 'easyblocks' pkg from ``sys.path`` to avoid that ``setup.py`` for easybuild-easyblocks picks up wrong version * undefine ``$EASYBUILD_BOOTSTRAP*`` environment variables, since they do not correspond with known config options * improve error reporting/robustness in ``fix_broken_easyconfigs.py`` script ( `#1290 <https://github.com/easybuilders/easybuild-framework/pull/1290> `_ ) * reset keep toolchain component class 'constants' every time ( `#1294 <https://github.com/easybuilders/easybuild-framework/pull/1294> `_ ) * make ``--strict`` also a build option ( `#1295 <https://github.com/easybuilders/easybuild-framework/pull/1295> `_ ) * fix purging of loaded modules in unit tests' setup method ( `#1297 <https://github.com/easybuilders/easybuild-framework/pull/1297> `_ ) * promote ``MigrateFromEBToHMNS`` to a 'production' MNS ( `#1302 <https://github.com/easybuilders/easybuild-framework/pull/1302> `_ ) * add support for ``--read-only-installdir`` and ``--group-writable-installdir`` configuration options ( `#1304 <https://github.com/easybuilders/easybuild-framework/pull/1304> `_ ) * add support for *not* expanding relative paths in ``prepend_paths`` ( `#1310 <https://github.com/easybuilders/easybuild-framework/pull/1310> `_ ) * enhance ``EasyConfig.dump()`` method to use easyconfig templates where possible ( `#1314 <https://github.com/easybuilders/easybuild-framework/pull/1314> `_ ), `#1319 <https://github.com/easybuilders/easybuild-framework/pull/1319> `_ ), `#1320 <https://github.com/easybuilders/easybuild-framework/pull/1320> `_ ), `#1321 <https://github.com/easybuilders/easybuild-framework/pull/1321> `_ ) * various bug fixes, including: * fix issue with cleaning up (no) logfile if ``--logtostdout`` / ``-l`` is used ( `#1298 <https://github.com/easybuilders/easybuild-framework/pull/1298> `_ ) * stop making ``ModulesTool`` class a singleton since it causes problems when multilple toolchains are in play ( `#1299 <https://github.com/easybuilders/easybuild-framework/pull/1299> `_ ) * don't modify values of 'paths' list passed as argument to prepend_paths in ``ModuleGenerator`` ( `#1300 <https://github.com/easybuilders/easybuild-framework/pull/1300> `_ ) * fix issue with ``EasyConfig.dump()`` + cleanup ( `#1308 <https://github.com/easybuilders/easybuild-framework/pull/1308> `_ ), `#1311 <https://github.com/easybuilders/easybuild-framework/pull/1311> `_ ) * re-enable (and fix) accidentally disabled test ( `#1316 <https://github.com/easybuilders/easybuild-framework/pull/1316> `_ ) **easyblocks** * modified easybuild.easyblocks package declaration to support giving preference to custom easyblocks ( `#617 <https://github.com/easybuilders/easybuild-easyblocks/pull/617> `_ ) * 2 new generic easyblocks: RubyGem ( `#565 <https://github.com/easybuilders/easybuild-easyblocks/pull/565> `_ ), SystemCompiler ( `#633 <https://github.com/easybuilders/easybuild-easyblocks/pull/633> `_ ) * new easyblocks for 5 software packages that require customized support: * NEMO ( `#564 <https://github.com/easybuilders/easybuild-easyblocks/pull/564> `_ ), pbdMPI ( `#612 <https://github.com/easybuilders/easybuild-framework/pull/612> `_ ), `#620 <https://github.com/easybuilders/easybuild-framework/pull/620> `_ ), pbdSLAP ( `#620 <https://github.com/easybuilders/easybuild-easyblocks/pull/620> `_ ), PDT ( `#624 <https://github.com/easybuilders/easybuild-easyblocks/pull/624> `_ ), Ruby ( `#565 <https://github.com/easybuilders/easybuild-easyblocks/pull/565> `_ ) * various other enhancements, including: * update CUDA easyblock for v6.x ( `#476 <https://github.com/easybuilders/easybuild-easyblocks/pull/476> `_ ) * make METIS easyblock take into account configopts ( `#494 <https://github.com/easybuilders/easybuild-easyblocks/pull/494> `_ ) * enable building of EOMIP and EOMEA for NWChem versions 6.5 and up ( `#508 <https://github.com/easybuilders/easybuild-easyblocks/pull/508> `_ ) * make out-of-source build with CMake truly out-of-source ( `#615 <https://github.com/easybuilders/easybuild-easyblocks/pull/615> `_ ) * add support in Bundle easyblock to run full sanity check ( `#627 <https://github.com/easybuilders/easybuild-easyblocks/pull/627> `_ ) * also take platform-specific Python lib dirs into account in PythonPackage easyblock ( `#628 <https://github.com/easybuilders/easybuild-easyblocks/pull/628> `_ ) * fix mpivars scripts in Intel MPI installation for versions where the installation is moved ( `#629 <https://github.com/easybuilders/easybuild-easyblocks/pull/629> `_ ) * don't restrict ``det_pylibdir`` function to only EasyBuild-provided Python ( `#631 <https://github.com/easybuilders/easybuild-framework/pull/631> `_ ), `#641 <https://github.com/easybuilders/easybuild-framework/pull/641> `_ ) * support snappy and other optional native libs in Hadoop easyblock ( `#632 <https://github.com/easybuilders/easybuild-framework/pull/632> `_ ), `#638 <https://github.com/easybuilders/easybuild-framework/pull/638> `_ ), `#640 <https://github.com/easybuilders/easybuild-framework/pull/640> `_ ), `#642 <https://github.com/easybuilders/easybuild-framework/pull/642> `_ ) * various bug fixes, including: * fix Xmipp easyblock, use provided ``install.sh`` script ( `#630 <https://github.com/easybuilders/easybuild-easyblocks/pull/630> `_ ) * update Clang easyblock to disable tests that may fail when unlimited stack size is used ( `#622 <https://github.com/easybuilders/easybuild-easyblocks/pull/622> `_ ) * fix setting of ``$INTEL_LICENSE_FILE`` for port@server values ( `#635 <https://github.com/easybuilders/easybuild-easyblocks/pull/635> `_ ) **easyconfigs** * added example easyconfig files for **62** new software packages: * ADF ( `#899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/899> `_ ), AutoDock_Vina ( `#808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/808> `_ ), bibtexparser ( `#1726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1726> `_ ), Biggus ( `#1770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1770> `_ ), Bismark ( `#990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/990> `_ ), blasr ( `#1662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1662> `_ ), BSMAP ( `#1171 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1171> `_ ), Check ( `#811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/811> `_ ), Circuitscape ( `#1222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1222> `_ ), CONTRAfold ( `#689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/689> `_ ), cramtools ( `#1741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1741> `_ ), DBD-Pg ( `#1066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1066> `_ ), DendroPy ( `#995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/995> `_ ), EMAN2 ( `#1737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1737> `_ ), ETSF_IO ( `#727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/727> `_ ), eudev ( `#1578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1578> `_ ), fastqc ( `#1636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1636> `_ ), FDS ( `#814 <https://github.com/easybuilders/easybuild-framework/pull/814> `_ ), `#1617 <https://github.com/easybuilders/easybuild-framework/pull/1617> `_ ), `#1625 <https://github.com/easybuilders/easybuild-framework/pull/1625> `_ ), FPM ( `#1440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1440> `_ ), frealign ( `#1619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1619> `_ ), g2log ( `#1035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1035> `_ ), GC3Pie ( `#1692 <https://github.com/easybuilders/easybuild-framework/pull/1692> `_ ), `#1756 <https://github.com/easybuilders/easybuild-framework/pull/1756> `_ ), `#1768 <https://github.com/easybuilders/easybuild-framework/pull/1768> `_ ), GenotypeHarmonizer ( `#1672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1672> `_ ), gensim ( `#1762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1762> `_ ), GraphViz ( `#1658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1658> `_ ), hisat ( `#1674 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1674> `_ ), IDBA-UD ( `#1045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1045> `_ ), IMa2 ( `#828 <https://github.com/easybuilders/easybuild-easyconfigs/pull/828> `_ ), IMPUTE2 ( `#824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/824> `_ ), JUBE ( `#1396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1396> `_ ), LAMARC ( `#760 <https://github.com/easybuilders/easybuild-easyconfigs/pull/760> `_ ), libXScrnSaver ( `#1653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1653> `_ ), MATIO ( `#1004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1004> `_ ), MuTect ( `#1483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1483> `_ ), ncdf ( `#617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/617> `_ ), NEMO ( `#1640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1640> `_ ), ngspice ( `#1116 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1116> `_ ), ordereddict ( `#1774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1774> `_ ), OSU Micro-Benchmarks ( `#1777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1777> `_ ), Parallel-ForkManager ( `#847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/847> `_ ), pBWA ( `#1009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1009> `_ ), PeakSeq ( `#1412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1412> `_ ), Pillow ( `#1702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1702> `_ ), Pindel ( `#1126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1126> `_ ), PLUMED ( `#1596 <https://github.com/easybuilders/easybuild-framework/pull/1596> `_ ), `#1665 <https://github.com/easybuilders/easybuild-framework/pull/1665> `_ ), PostgreSQL ( `#1066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1066> `_ ), PROJ ( `#1006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1006> `_ ), PyAMG ( `#1222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1222> `_ ), Pyke ( `#1776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1776> `_ ), rpy2 ( `#1775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1775> `_ ), Sailfish ( `#1035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1035> `_ ), SCANMS ( `#1386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1386> `_ ), Seaborn ( `#1763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1763> `_ ), snpEff ( `#1680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1680> `_ ), SOBAcl ( `#1658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1658> `_ ), SPIDER ( `#1624 <https://github.com/easybuilders/easybuild-framework/pull/1624> `_ ), `#1723 <https://github.com/easybuilders/easybuild-framework/pull/1723> `_ ), STAR ( `#1043 <https://github.com/easybuilders/easybuild-framework/pull/1043> `_ ), `#1676 <https://github.com/easybuilders/easybuild-framework/pull/1676> `_ ), system GCC ( `#1778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1778> `_ ), tabix ( `#1059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1059> `_ ), tecplot360ex ( `#1100 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1100> `_ ), Vampir ( `#512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/512> `_ ), VampirServer ( `#512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/512> `_ ), verifyBamID ( `#1675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1675> `_ ) * added easyconfigs for 4 new software bundles: * R-bundle-Bioconductor ( `#1573 <https://github.com/easybuilders/easybuild-framework/pull/1573> `_ ), `#1795 <https://github.com/easybuilders/easybuild-framework/pull/1795> `_ ), R-bundle-devtools ( `#1621 <https://github.com/easybuilders/easybuild-framework/pull/1621> `_ ), `#1759 <https://github.com/easybuilders/easybuild-framework/pull/1759> `_ ), R-bundle-extra ( `#1387 <https://github.com/easybuilders/easybuild-framework/pull/1387> `_ ), `#1759 <https://github.com/easybuilders/easybuild-framework/pull/1759> `_ ), R-bundle-pbd ( `#1659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1659> `_ ) * added easyconfigs for new GNU toolchain ( `#1346 <https://github.com/easybuilders/easybuild-framework/pull/1346> `_ ), `#1669 <https://github.com/easybuilders/easybuild-framework/pull/1669> `_ ) * added new easyconfigs for existing toolchains: goolf/1.5.16, intel/2014.06 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including BLAST 2.2.31+, Clang 3.6.1, CUDA 6.x, GCC 4.9.3, GROMACS 5.0.5, HDF5 1.8.15 + 1.8.15-patch1, Python 2.7.10, R 3.2.0 + 3.2.1, WRF 3.6.1 * various other enhancements, including: * update all ncurses easyconfigs to enable ncursesw and use ConfigureMake easyblock ( `#1337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1337> `_ ) * update PDT easyconfigs to use PDT easyblock ( `#1687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1687> `_ ) * add custom ``sanity_check_paths`` in libxml2 easyconfigs ( `#1690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1690> `_ ) * enhance unit tests to also cover EasyConfig.dump() method on all easyconfigs ( `#1761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1761> `_ ) * include snappy as dependency in Hadoop easyconfigs ( `#1758 <https://github.com/easybuilders/easybuild-framework/pull/1758> `_ ), `#1773 <https://github.com/easybuilders/easybuild-framework/pull/1773> `_ ) * enable SSL support in CMake v3.2.3 easyconfigs ( `#1784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1784> `_ ) * add additional extensions in R easyconfigs ( `#1637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1637> `_ ) * various bug fixes, including: * add patch file required for correct CUDA-aware OpenMPI v1.7.3 build ( `#631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/631> `_ ) * fix issue with OpenMPI dependency in ECore easyconfigs ( `#777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/777> `_ ) * don't run the Bloom tests for Jellyfish, they can randomly fail ( `#1016 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1016> `_ ) * fix source URLs in BioPerl easyconfigs ( `#1075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1075> `_ ) * patch out svnversion command in Python 2.5.6 to fix build on recent systems ( `#1576 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1576> `_ ) * consistently use https for PyPI URLs in homepage/source_urls ( `#1616 <https://github.com/easybuilders/easybuild-framework/pull/1616> `_ ), `#1722 <https://github.com/easybuilders/easybuild-framework/pull/1722> `_ ) * include Tcl and Tk as dependencies in R easyconfig ( `#1623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1623> `_ ) * add patch for installing paycheck as Py3 extension ( `#1629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1629> `_ ) * add Perl dependency in git 2.x easyconfigs ( `#1631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1631> `_ ) * fix easyconfig for GMP 6.0.0, don't use 6.0.0a sources ( `#1635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1635> `_ ) * fix source_urls in QuantumESPRESSO 5.0.2 easyconfigs ( `#1652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1652> `_ ) * include Tk as dependency in Python 2.7.9 easyconfigs ( `#1654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1654> `_ ) * include tk-devel is list of OS deps for Python 2.7.9 Cray easyconfigs, make sure ' ``import Tkinter`` ' works ( `#1655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1655> `_ ) * drop gpfs versionsuffix and stop using no longer existing ``--enable-gpfs`` configopt for recent HDF5 versions ( `#1657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1657> `_ ) * include missing libxml2 dep in GLib easyconfigs ( `#1666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1666> `_ ) * fix source URLs in Qt easyconfigs ( `#1673 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1673> `_ ) * fix source URLs for argparse Python extension ( `#1697 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1697> `_ ) * fix source URLs for deap Python extension ( `#1699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1699> `_ ) * fix easyconfigs unit tests after making ModulesTool a non-singleton class ( `#1708 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1708> `_ ) * fix names for Xmipp easyconfigs and patches ( `#1719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1719> `_ ) * add patch for Qt 4.8.6 to fix build issue on RHEL6 with intel/2015a ( `#1734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1734> `_ ) * add M4 as build dep for GCC 5.1.0 ( `#1735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1735> `_ ) * fix Bioconductor extension versions in R 3.1.3 easyconfigs ( `#1748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1748> `_ ) * remove custom exts_filter definition from Python 3.4.3 easyconfig ( `#1765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1765> `_ ) * fix source_urls in netCDF easyconfigs ( `#1766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1766> `_ ) * fix source_urls in netCDF-C++ and netCDF-Fortran easyconfigs ( `#1767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1767> `_ ) .. _release_notes_eb211: EasyBuild v2.1.1 (May 18th 2015) -------------------------------- bugfix release **framework** * fix issue with missing load statements when ``--module-only`` is used, don't skip ready/prepare steps ( `#1276 <https://github.com/easybuilders/easybuild-framework/pull/1276> `_ ) * enhance ``--search`` : only consider actual filename (not entire path), use regex syntax ( `#1281 <https://github.com/easybuilders/easybuild-framework/pull/1281> `_ ) * various other bug fixes, including: * fix ``generate_software_list.py`` script w.r.t. dependencies marked as external modules ( `#1273 <https://github.com/easybuilders/easybuild-framework/pull/1273> `_ ) * only use ``$LMOD_CMD`` value if ``lmod`` binary can't be found in $PATH ( `#1275 <https://github.com/easybuilders/easybuild-framework/pull/1275> `_ ) * fix location of ``module_only`` build option w.r.t. default value ( `#1277 <https://github.com/easybuilders/easybuild-framework/pull/1277> `_ ) * fix combined use of ``--hide-deps`` and ``hiddendependencies`` ( `#1280 <https://github.com/easybuilders/easybuild-framework/pull/1280> `_ ) * remove log handlers that were added during tests, to ensure effective cleanup of log files ( `#1282 <https://github.com/easybuilders/easybuild-framework/pull/1282> `_ ) * this makes the unit test suite run ~3x faster! * define ``$CRAYPE_LINK_TYPE`` if ' ``dynamic`` ' toolchain option is enabled for Cray compiler wrappers ( `#1283 <https://github.com/easybuilders/easybuild-framework/pull/1283> `_ ) **easyblocks** * fix compatibility of easyblocks with ``--module-only`` + dedicated unit test module ( `#610 <https://github.com/easybuilders/easybuild-easyblocks/pull/610> `_ ) * minor enhancements, including: * update GROMACS easyblock for version 5 ( `#513 <https://github.com/easybuilders/easybuild-easyblocks/pull/513> `_ ) * various other bug fixes, including: * only check compiler being used if FFTW interfaces are being built in Intel MKL easyblock ( `#606 <https://github.com/easybuilders/easybuild-easyblocks/pull/606> `_ ) **easyconfigs** * added example easyconfig files for **3** new software packages: * networkx ( `#1592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1592> `_ ), Platanus ( `#1597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1597> `_ ), SaguaroGW ( `#1600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1600> `_ ) * added new easyconfigs for existing toolchains: ``ictce/7.3.5`` , ``CrayCCE/5.2.40`` , ``CrayGNU/5.2.40`` , ``CrayIntel/5.2.40`` * added easyconfigs using ``CrayGNU/5.2.25`` and ``CrayGNU/5.2.40`` toolchains ( `#1610 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1610> `_ , `#1611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1611> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Boost 1.58.0, GROMACS 5.0.4, Python 3.4.3 * various bug fixes, including: * enable usempi in GROMACS easyconfig using CrayGNU toolchain (as required by GROMACS easyblock) ( `#1590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1590> `_ ) * use system-provided tcsh when building WRF on Cray systems, to avoid hanging build ( `#1595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1595> `_ ) * only use ' ``dynamic`` ' toolchain option, not ' ``shared`` ', in easyconfigs using Cray toolchain ( `#1609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1609> `_ ) .. _release_notes_v2.1.0: EasyBuild v2.1.0 (April 30th 2015) ---------------------------------- feature + bugfix release **framework** * requires vsc-base v2.2.0 or more recent * added support for LoggedException ( `vsc-base#160 <https://github.com/hpcugent/vsc-base/pull/160> `_ , `vsc-base#163 <https://github.com/hpcugent/vsc-base/pull/163> `_ , `vsc-base#165 <https://github.com/hpcugent/vsc-base/pull/165> `_ , `vsc-base#167 <https://github.com/hpcugent/vsc-base/pull/167> `_ ) * added support for add_flex action in GeneralOption ( `vsc-base#162 <https://github.com/hpcugent/vsc-base/pull/162> `_ ) * added support to GeneralOption to act on unknown configuration environment variables ( `vsc-base#162 <https://github.com/hpcugent/vsc-base/pull/162> `_ ) * add support for only (re)generating module files: ``--module-only`` ( `#1018 <https://github.com/easybuilders/easybuild-framework/pull/1018> `_ ) * module naming scheme API is enhanced to include det_install_subdir method * see :ref: `module_only` * add support for generating module files in Lua syntax (note: requires Lmod as modules tool) ( `#1060 <https://github.com/easybuilders/easybuild-framework/pull/1060> `_ , `#1255 <https://github.com/easybuilders/easybuild-framework/pull/1255> `_ , `#1256 <https://github.com/easybuilders/easybuild-framework/pull/1256> `_ , `#1270 <https://github.com/easybuilders/easybuild-framework/pull/1270> `_ ) * see ``--module-syntax`` configuration option and :ref: `module_syntax` * deprecate ``log.error`` method in favor of raising ``EasyBuildError`` exception ( `#1218 <https://github.com/easybuilders/easybuild-framework/pull/1218> `_ ) * see :ref: `depr_error_reporting` * add support for using external modules as dependencies, and to provide metadata for external modules ( `#1230 <https://github.com/easybuilders/easybuild-framework/pull/1230> `_ , `#1265 <https://github.com/easybuilders/easybuild-framework/pull/1265> `_ , `#1267 <https://github.com/easybuilders/easybuild-framework/pull/1267> `_ ) * see :ref: `using_external_modules` * add experimental support for Cray toolchains on top of PrgEnv modules: ``CrayGNU`` , ``CrayIntel`` , ``CrayCCE`` ( `#1234 <https://github.com/easybuilders/easybuild-framework/pull/1234> `_ , `#1268 <https://github.com/easybuilders/easybuild-framework/pull/1268> `_ ) * see https://github.com/easybuilders/easybuild/wiki/EasyBuild-on-Cray * various other enhancements, including: * clear list of checksums when using ``--try-software-version`` ( `#1169 <https://github.com/easybuilders/easybuild-framework/pull/1169> `_ ) * sort the results of searching for files (e.g., ``--search`` output) ( `#1214 <https://github.com/easybuilders/easybuild-framework/pull/1214> `_ ) * enhance test w.r.t. use of templates in cfgfile ( `#1217 <https://github.com/easybuilders/easybuild-framework/pull/1217> `_ ) * define ' ``%(DEFAULT_REPOSITORYPATH)s`` ' template for cfgfiles (see ``eb --avail-cfgfile-constants`` ) ( `#1220 <https://github.com/easybuilders/easybuild-framework/pull/1220> `_ ) * also reset ``$LD_PRELOAD`` when running module commands, in case module defined ``$LD_PRELOAD`` ( `#1222 <https://github.com/easybuilders/easybuild-framework/pull/1222> `_ ) * move location of ' ``module use`` ' statements in generated module file ( *after* ' ``module load`` ' statements) ( `#1232 <https://github.com/easybuilders/easybuild-framework/pull/1232> `_ ) * add support for ``--show-default-configfiles`` ( `#1240 <https://github.com/easybuilders/easybuild-framework/pull/1240> `_ ) * see :ref: `default_configuration_files` * report error on missing configuration files, rather than ignoring them ( `#1240 <https://github.com/easybuilders/easybuild-framework/pull/1240> `_ ) * clean up commit message used in easyconfig git repository ( `#1248 <https://github.com/easybuilders/easybuild-framework/pull/1248> `_ ) * add ``--hide-deps`` configuration option to specify names of software that must be installed as hidden modules ( `#1250 <https://github.com/easybuilders/easybuild-framework/pull/1250> `_ ) * see :ref: `hide_deps` * add support for appending/prepending to ``--robot-paths`` to avoid overwriting default robot search path ( `#1252 <https://github.com/easybuilders/easybuild-framework/pull/1252> `_ ) * see :ref: `robot_search_path_prepend_append` * enable detection of use of unknown ``$EASYBUILD`` -prefixed environment variables ( `#1253 <https://github.com/easybuilders/easybuild-framework/pull/1253> `_ ) * see :ref: `configuration_env_vars` * add ``--installpath-modules`` and ``--installpath-software`` configuration options ( `#1258 <https://github.com/easybuilders/easybuild-framework/pull/1258> `_ ) * see :ref: `installpath` * use dedicated subdirectory in temporary directory for each test to ensure better cleanup ( `#1260 <https://github.com/easybuilders/easybuild-framework/pull/1260> `_ ) * get rid of ``$PROFILEREAD`` hack when running commands, not needed anymore ( `#1264 <https://github.com/easybuilders/easybuild-framework/pull/1264> `_ ) * various bug fixes, including: * make bootstrap script robust against having ``vsc-base`` already available in Python search path ( `#1212 <https://github.com/easybuilders/easybuild-framework/pull/1212> `_ , `#1215 <https://github.com/easybuilders/easybuild-framework/pull/1215> `_ ) * set default value for unpack_options easyconfig parameter to ``''`` , so ``self.cfg.update`` works on it ( `#1229 <https://github.com/easybuilders/easybuild-framework/pull/1229> `_ ) * also copy rotated log files ( `#1238 <https://github.com/easybuilders/easybuild-framework/pull/1238> `_ ) * fix parsing of ``--download-timeout`` value ( `#1242 <https://github.com/easybuilders/easybuild-framework/pull/1242> `_ ) * make ``test_XDG_CONFIG_env_vars`` unit test robust against existing user config file in default location ( `#1259 <https://github.com/easybuilders/easybuild-framework/pull/1259> `_ ) * fix minor robustness issues w.r.t. ``$XDG_CONFIG*`` and ``$PYTHONPATH`` in unit tests ( `#1262 <https://github.com/easybuilders/easybuild-framework/pull/1262> `_ ) * fix issue with handling empty toolchain variables ( `#1263 <https://github.com/easybuilders/easybuild-framework/pull/1263> `_ ) **easyblocks** * replace ' ``log.error`` ' with ' ``raise EasyBuildError`` ' in all easyblocks ( `#588 <https://github.com/easybuilders/easybuild-easyblocks/pull/588> `_ ) * one new generic easyblock: ``ConfigureMakePythonPackage`` ( `#540 <https://github.com/easybuilders/easybuild-easyblocks/pull/540> `_ ) * new easyblocks for 2 software packages that require customized support: * TINKER ( `#578 <https://github.com/easybuilders/easybuild-easyblocks/pull/578> `_ ), Xmipp ( `#581 <https://github.com/easybuilders/easybuild-easyblocks/pull/581> `_ ) * various other enhancements, including: * enhance WIEN2k easyblock for recent versions + cleanup ( `#486 <https://github.com/easybuilders/easybuild-easyblocks/pull/486> `_ ) * define ``$PYTHONNOUSERSITE`` in PythonPackage easyblock so user-installed packages are not picked up ( `#577 <https://github.com/easybuilders/easybuild-easyblocks/pull/577> `_ ) * add support in CP2K easyblock for building on top of MPICH/MPICH2 ( `#579 <https://github.com/easybuilders/easybuild-easyblocks/pull/579> `_ ) * enhance Hadoop easyblock to support parallel builds ( `#580 <https://github.com/easybuilders/easybuild-easyblocks/pull/580> `_ ) * drop ``-noroot`` for recent FLUENT versions, honor ``installopts`` , enable ``-debug`` ( `#582 <https://github.com/easybuilders/easybuild-easyblocks/pull/582> `_ ) * include ``prebuildopts`` in build command for Python packages ( `#585 <https://github.com/easybuilders/easybuild-easyblocks/pull/585> `_ ) * also install ``rosetta_tools`` subdirectory for Rosetta ( `#586 <https://github.com/easybuilders/easybuild-easyblocks/pull/586> `_ ) * update SLEPc easyblock for v3.5 + style cleanup ( `#593 <https://github.com/easybuilders/easybuild-easyblocks/pull/593> `_ ) * minor fix in HPL easyblock w.r.t. checking defined environment variables ( `#595 <https://github.com/easybuilders/easybuild-easyblocks/pull/595> `_ ) * tweak CP2K easyblock w.r.t. LAPACK/FFTW support ( `#596 <https://github.com/easybuilders/easybuild-easyblocks/pull/596> `_ ) * minor update to GCC easyblock to support GCC v5.x ( `#598 <https://github.com/easybuilders/easybuild-easyblocks/pull/598> `_ ) * update sanity check in R easyblock for version 3.2.0 ( `#602 <https://github.com/easybuilders/easybuild-easyblocks/pull/602> `_ ) * various bug fixes, including: * fix Score-P easyblock for compiler-only toolchains, include Qt as optional dependency ( `#552 <https://github.com/easybuilders/easybuild-easyblocks/pull/552> `_ ) * fix definition of ``$MKLROOT`` , should be set to ' ``mkl`` ' subdir of install dir ( `#576 <https://github.com/easybuilders/easybuild-easyblocks/pull/576> `_ ) * add ``-libmpichf90`` to list of MPI libraries in NWChem easyblock ( `#584 <https://github.com/easybuilders/easybuild-easyblocks/pull/584> `_ ) * stop using ' ``$root`` ' to make easyblocks compatible with module files in Lua syntax ( `#590 <https://github.com/easybuilders/easybuild-easyblocks/pull/590> `_ ) * also set ``$PYTHONPATH`` before installing Python package in temporary directory in ``test_step`` ( `#591 <https://github.com/easybuilders/easybuild-easyblocks/pull/591> `_ ) * unset ``buildopts`` / ``installopts`` before installing Python extensions in Python easyblock ( `#597 <https://github.com/easybuilders/easybuild-easyblocks/pull/597> `_ ) * allow not including vsc-base sources when installing EasyBuild (gets installed with easybuild-framework) ( `#600 <https://github.com/easybuilders/easybuild-easyblocks/pull/600> `_ ) * use ``self.initial_environ`` rather than ``self.orig_environ`` in EasyBuildMeta easyblock ( `#600 <https://github.com/easybuilders/easybuild-easyblocks/pull/600> `_ ) * make GCC easyblock compatible with ``--module-only`` by setting default value for ``self.platform_lib`` in constructor ( `#603 <https://github.com/easybuilders/easybuild-easyblocks/pull/603> `_ ) **easyconfigs** * added example easyconfig files for **27** new software packages: * AFNI ( `#1322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1322> `_ , `#1521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1521> `_ ), BCFtools ( `#1492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1492> `_ ), getdp ( `#1518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1518> `_ ), gmsh ( `#1518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1518> `_ ), gtest ( `#1244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1244> `_ ), hanythingondemand ( `#1530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1530> `_ ), mawk ( `#1369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1369> `_ ), Minimac ( `#815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/815> `_ ), Minimac3 ( `#1502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1502> `_ ), monty ( `#1548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1548> `_ ), Octave ( `#1563 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1563> `_ ), pbs_python ( `#1530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1530> `_ ), pigz ( `#1036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1036> `_ ), Pygments ( `#1536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1536> `_ ), pyhull ( `#1539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1539> `_ ), pymatgen ( `#1549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1549> `_ ), PyQt ( `#1322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1322> `_ , `#1521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1521> `_ ), Ray ( `#1494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1494> `_ ), requests ( `#1536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1536> `_ ), seqtk ( `#1524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1524> `_ ), SIP ( `#1322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1322> `_ , `#1521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1521> `_ ), S-Lang ( `#1369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1369> `_ ), Spark ( `#1554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1554> `_ ), spglib ( `#1549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1549> `_ ), TINKER ( `#1465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1465> `_ ), tmux ( `#1369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1369> `_ ), Xmipp ( `#1489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1489> `_ ) * added easyconfigs for new (Cray-specific) toolchains ( `#1538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1538> `_ ): ``CrayGNU`` , ``CrayIntel`` , ``CrayCCE`` * initially supported software (using CrayGNU toolchains): CP2K, GROMACS, HPL, Python + numpy/scipy, WRF ( `#1558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1558> `_ ) * see also https://github.com/easybuilders/easybuild/wiki/EasyBuild-on-Cray * added new easyconfigs for existing toolchains: ``goolf/1.5.16`` , ``intel/2014.06`` * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including GCC v5.1.0, OpenFOAM v2.3.1, R v3.1.3 and v3.2.0, PETSc/SLEPc v3.5.3, WIEN2k v14.1 * various other enhancements, including: * include pbr dependency for lockfile Python extension in Python v2.7.9 easyconfigs + mock/pytz/pandas ( `#1462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1462> `_ , `#1540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1540> `_ ) * include SQLite as dependency in Python v2.7.9 easyconfigs ( `#1468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1468> `_ ) * set ``$LD_PRELOAD`` for Hoard and jemalloc ( `#1470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1470> `_ ) * fix homepage in SCOTCH easyconfigs ( `#1485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1485> `_ ) * adding missing six/ecdsa dependencies for dateutil/paramiko Python packages in Python easyconfigs ( `#1504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1504> `_ , `#1505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1505> `_ , `#1506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1506> `_ , `#1507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1507> `_ , `#1508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1508> `_ , `#1509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1509> `_ , `#1510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1510> `_ ) * enable ``pic`` toolchain option in expat easyconfigs ( `#1562 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1562> `_ ) * extend list of source URLs for Bioconductor packages in R easyconfigs to include 'release' source URLs ( `#1568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1568> `_ ) * various bug fixes, including: * adding missing zlib dependency in all Tcl easyconfig files ( `#1344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1344> `_ ) * fix homepage in FLUENT easyconfigs ( `#1472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1472> `_ ) * use ``--with-verbs`` rather than deprecated ``--with-openib`` in OpenMPI configure options ( `#1511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1511> `_ ) * stop relying on ``OS_NAME`` constant to specify OS dependencies in OpenMPI easyconfigs ( `#1512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1512> `_ ) * replace use of ' ``$root`` ' with ' ``%(installdir)s`` ' to ensure compatibility with module files in Lua syntax ( `#1532 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1532> `_ ) * stop relying on ' ``$MKLROOT`` ' in ROOT easyconfigs ( `#1537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1537> `_ ) * use proper Bundle easyblock for biodeps/PRACE ( `#1566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1566> `_ ) * make source_urls in Cube and Scalasca easyconfigs compatible with --try-software-version ( `#1574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1574> `_ ) * add patch for Cube to fix configure script w.r.t. Qt dependency, add --without-java-reader configure option ( `#1574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1574> `_ ) .. _release_notes_v2.0.0: EasyBuild v2.0.0 (March 6th 2015) --------------------------------- feature + bugfix release **framework** * requires vsc-base v2.0.3 or more recent * avoid deprecation warnings w.r.t. use of ``message`` attribute ( `vsc-base#155 <https://github.com/hpcugent/vsc-base/pull/155> `_ ) * fix typo in log message rendering ``--ignoreconfigfiles`` unusable ( `vsc-base#158 <https://github.com/hpcugent/vsc-base/pull/158> `_ ) * removed functionality that was deprecated for EasyBuild version 2.0 ( `#1143 <https://github.com/easybuilders/easybuild-framework/pull//1143> `_ ) * see :ref: `removed_functionality` * the fix_broken_easyconfigs.py script can be used to update easyconfig files suffering from this ( `#1151 <https://github.com/easybuilders/easybuild-framework/pull//1151> `_ , `#1206 <https://github.com/easybuilders/easybuild-framework/pull//1206> `_ , `#1207 <https://github.com/easybuilders/easybuild-framework/pull//1207> `_ ) * for more information about this script, see :ref: `fix_broken_easyconfigs_script` * stop including a crippled copy of vsc-base, include vsc-base as a proper dependency instead ( `#1160 <https://github.com/easybuilders/easybuild-framework/pull//1160> `_ , `#1194 <https://github.com/easybuilders/easybuild-framework/pull//1194> `_ ) * vsc-base is automatically installed as a dependency for easybuild-framework, if a Python installation tool is used * see :ref: `required_python_packages` * various other enhancements, including: * add support for Linux/POWER systems ( `#1044 <https://github.com/easybuilders/easybuild-framework/pull//1044> `_ ) * major cleanup in ``tools/systemtools.py`` + significantly enhanced tests ( `#1044 <https://github.com/easybuilders/easybuild-framework/pull//1044> `_ ) * add support for ' ``eb -a rst`` ', list available easyconfig parameters in ReST format ( `#1131 <https://github.com/easybuilders/easybuild-framework/pull//1131> `_ ) * add support for specifying one or more easyconfigs in combination with ``--from-pr`` ( `#1132 <https://github.com/easybuilders/easybuild-framework/pull//1132> `_ ) * see :ref: `from_pr_specifying_easyconfigs` * define ``__contains__`` in EasyConfig class ( `#1155 <https://github.com/easybuilders/easybuild-framework/pull//1155> `_ ) * restore support for downloading over a proxy ( `#1158 <https://github.com/easybuilders/easybuild-framework/pull//1158> `_ ) * i.e., use ``urllib2`` rather than ``urllib`` * this involved sacrificing the download progress report (which was only visible in the log file) * let ``mpi_family`` return ``None`` if MPI is not supported by a toolchain ( `#1164 <https://github.com/easybuilders/easybuild-framework/pull//1164> `_ ) * include support for specifying system-level configuration files for EasyBuild via ``$XDG_CONFIG_DIRS`` ( `#1166 <https://github.com/easybuilders/easybuild-framework/pull//1166> `_ ) * see :ref: `default_configuration_files` * make unit tests more robust ( `#1167 <https://github.com/easybuilders/easybuild-framework/pull//1167> `_ , `#1196 <https://github.com/easybuilders/easybuild-framework/pull//1196> `_ ) * see :ref: `unit_tests` * add hierarchical module naming scheme categorizing modules by ``moduleclass`` ( `#1176 <https://github.com/easybuilders/easybuild-framework/pull//1176> `_ ) * enhance bootstrap script to allow bootstrapping using supplied tarballs ( `#1184 <https://github.com/easybuilders/easybuild-framework/pull//1184> `_ ) * see :ref: `bootstrap_advanced_options` * disable updating of Lmod user cache by default, add configuration option ``--update-modules-tool-cache`` ( `#1185 <https://github.com/easybuilders/easybuild-framework/pull//1185> `_ ) * for now, only the Lmod user cache can be updated using ``--update-modules-tool-cache`` * use available ``which()`` function, rather than running ' ``which`` ' via ``run_cmd`` ( `#1192 <https://github.com/easybuilders/easybuild-framework/pull//1192> `_ ) * fix ``install-EasyBuild-develop.sh`` script w.r.t. vsc-base dependency ( `#1193 <https://github.com/easybuilders/easybuild-framework/pull//1193> `_ ) * also consider robot search path when looking for specified easyconfigs ( `#1201 <https://github.com/easybuilders/easybuild-framework/pull//1201> `_ ) * see :ref: `specifying_easyconfigs` * various bug fixes, including: * stop triggering deprecated/no longer support functionality in unit tests ( `#1126 <https://github.com/easybuilders/easybuild-framework/pull//1126> `_ ) * fix ``from_pr`` test by including dummy easyblocks for HPL and ScaLAPACK ( `#1133 <https://github.com/easybuilders/easybuild-framework/pull//1133> `_ ) * escape use of ' ``%`` ' in string with command line options with ``--job`` ( `#1135 <https://github.com/easybuilders/easybuild-framework/pull//1135> `_ ) * fix handling specified patch level 0 (+ enhance tests for fetch_patches method) ( `#1139 <https://github.com/easybuilders/easybuild-framework/pull//1139> `_ ) * fix formatting issues in generated easyconfig file obtained via ``--try-X`` ( `#1144 <https://github.com/easybuilders/easybuild-framework/pull//1144> `_ ) * use ``log.error`` in ``tools/toolchain/toolchain.py`` where applicable ( `#1145 <https://github.com/easybuilders/easybuild-framework/pull//1145> `_ ) * stop hardcoding ``/tmp`` in ``mpi_cmd_for`` function ( `#1146 <https://github.com/easybuilders/easybuild-framework/pull//1146> `_ , `#1200 <https://github.com/easybuilders/easybuild-framework/pull//1200> `_ ) * correctly determine variable name for ``$EBEXTLIST`` when generating module file ( `#1156 <https://github.com/easybuilders/easybuild-framework/pull//1156> `_ ) * do not ignore exit code of failing postinstall commands ( `#1157 <https://github.com/easybuilders/easybuild-framework/pull//1157> `_ ) * fix rare case in which used easyconfig and copied easyconfig are the same ( `#1159 <https://github.com/easybuilders/easybuild-framework/pull//1159> `_ ) * always filter hidden deps from list of dependencies ( `#1161 <https://github.com/easybuilders/easybuild-framework/pull//1161> `_ ) * fix implementation of ``path_matches`` function in ``tools/filetools.py`` ( `#1163 <https://github.com/easybuilders/easybuild-framework/pull//1163> `_ ) * make sure plain text keyring is used by unit tests ( `#1165 <https://github.com/easybuilders/easybuild-framework/pull//1165> `_ ) * suppress creation of module symlinks for ``HierarchicalMNS`` ( `#1173 <https://github.com/easybuilders/easybuild-framework/pull//1173> `_ ) * sort all lists obtained via ``glob.glob`` , since they are in arbitrary order ( `#1187 <https://github.com/easybuilders/easybuild-framework/pull//1187> `_ ) * stop modifying ``$MODULEPATH`` directly in ``setUp`` / ``tearDown`` of toolchain tests ( `#1191 <https://github.com/easybuilders/easybuild-framework/pull//1191> `_ ) **easyblocks** * one new generic easyblock for installing a bundle of modules: ``Bundle`` ( `#550 <https://github.com/easybuilders/easybuild-easyblocks/pull/550> `_ ) * and let the ``Toolchain`` generic easyblock derive from ``Bundle`` * new easyblocks for 2 software packages that require customized support: * GAMESS-US ( `#470 <https://github.com/easybuilders/easybuild-easyblocks/pull/470> `_ , `#544 <https://github.com/easybuilders/easybuild-easyblocks/pull/544> `_ , `#558 <https://github.com/easybuilders/easybuild-easyblocks/pull/558> `_ ), Hadoop ( `#563 <https://github.com/easybuilders/easybuild-easyblocks/pull/563> `_ ) * various other enhancements, including: * move support for ``staged_install`` from CPLEX easyblock to generic ``Binary`` easyblock ( `#502 <https://github.com/easybuilders/easybuild-easyblocks/pull/502> `_ ) * fix sanity check in picard easyblock for v1.119 that doesn't include ``sam.jar`` ( `#522 <https://github.com/easybuilders/easybuild-easyblocks/pull/522> `_ ) * log warning message when unlinking jellyfish symlink fails in Trinity easyblock ( `#534 <https://github.com/easybuilders/easybuild-easyblocks/pull/534> `_ ) * revamp ``EB_libint2`` easyblock into ``EB_Libint`` that works for both Libint v1x and v2.x ( `#536 <https://github.com/easybuilders/easybuild-easyblocks/pull/536> `_ ) * update CP2K easyblock for recent versions (no more ' ``fes`` ') ( `#537 <https://github.com/easybuilders/easybuild-easyblocks/pull/537> `_ ) * update SuiteSparse easyblock for recent versions ( `#541 <https://github.com/easybuilders/easybuild-easyblocks/pull/541> `_ ) * fix easyblock unit tests after dropping support for deprecated behaviour in framework ( `#543 <https://github.com/easybuilders/easybuild-easyblocks/pull/543> `_ ) * rework PSI easyblock to support future releases ( `#545 <https://github.com/easybuilders/easybuild-easyblocks/pull/545> `_ ) * enable always generating a 'verbose' Makefile in the generic CMakeMake easyblock ( `#546 <https://github.com/easybuilders/easybuild-easyblocks/pull/546> `_ ) * remove functionality in (generic) easyblocks that was deprecated for EasyBuild v2.0 ( `#547 <https://github.com/easybuilders/easybuild-easyblocks/pull/547> `_ ) * enhance generic RPackage easyblock to support installing extensions in a separate prefix ( `#551 <https://github.com/easybuilders/easybuild-easyblocks/pull/551> `_ ) * deprecate GenomeAnalysisTK easyblock, since it's basically equivalent to Tarball ( `#557 <https://github.com/easybuilders/easybuild-easyblocks/pull/557> `_ ) * update SAMtools easyblock for v1.2 ( `#562 <https://github.com/easybuilders/easybuild-easyblocks/pull/562> `_ ) * take ``preconfigopts`` easyconfig parameter into account in ROOT easyblock ( `#566 <https://github.com/easybuilders/easybuild-easyblocks/pull/566> `_ ) * update easyblock for installing EasyBuild * to support bootstrapping with provided source tarballs ( `#559 <https://github.com/easybuilders/easybuild-easyblocks/pull/559> `_ ) * to also cover vsc-base dependency, and verify ``easy-install.pth`` ( `#567 <https://github.com/easybuilders/easybuild-easyblocks/pull/567> `_ ) * update disabling sanitizer tests for Clang 3.6 ( `#570 <https://github.com/easybuilders/easybuild-easyblocks/pull/570> `_ ) * various bug fixes, including: * fix handling of LTO in GCC easyblock ( `#535 <https://github.com/easybuilders/easybuild-easyblocks/pull/535> `_ ) * relocate FDTD RPM to fix installation on SL6 ( `#538 <https://github.com/easybuilders/easybuild-easyblocks/pull/538> `_ ) **easyconfigs** * added example easyconfig files for **29** new software packages: * bsoft ( `#1353 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1353> `_ ), Coot ( `#1400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1400> `_ ), Cuby ( `#1258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1258> `_ ), DSRC ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), Exonerate ( `#568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/568> `_ ), fastqz ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), FSA ( `#568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/568> `_ ), fqzcomp ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), GAMESS-US ( `#1153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1153> `_ , `#1406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1406> `_ ), Grep ( `#1308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1308> `_ ), Hadoop ( `#1418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1418> `_ ), Hoard ( `#1415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1415> `_ ), IMB ( `#1284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1284> `_ ), ISL ( `#1389 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1389> `_ ), jemalloc ( `#1416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1416> `_ ), libdwarf ( `#1283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1283> `_ ), libelf ( `#1283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1283> `_ ), MPC ( `#1310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1310> `_ ), multitail ( `#1327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1327> `_ ), Pmw ( `#1403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1403> `_ ), Quip ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), rCUDA ( `#720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/720> `_ ), SCALCE ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), SMALT ( `#568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/568> `_ ), STREAM ( `#1332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1332> `_ ), worker ( `#1307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1307> `_ ), Xerces-C++ ( `#1370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1370> `_ ), XQilla ( `#1370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1370> `_ ), ZPAQ ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ) * added easyconfigs for new (common) toolchains * ``foss/2015a`` ( `#1239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1239> `_ ), ``gompi/1.5.16`` ( `#1380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1380> `_ ), ``gmvolf/1.7.20`` ( `#1397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1397> `_ ), ``goolf/1.7.20`` ( `#1294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1294> `_ ), intel/2015a ( `#1238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1238> `_ ), ``intel/2015.02`` ( `#1393 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1393> `_ ), ``iomkl/2015.01`` ( `#1325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1325> `_ ), ``iomkl/2015.02`` ( `#1401 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1401> `_ ) * added new software bundle: ``Autotools`` ( `#1385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1385> `_ ) * various other enhancements, including: * don't define ``$LDSHARED`` in zlib easyconfigs ( `#1350 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1350> `_ ) * this fixes the long-standing \" ``no version information available`` \" issue with zlib * see also `framework#108 <https://github.com/easybuilders/easybuild-framework/issues/108> `_ * add unit test to check that all ``extra_options`` keys are defined in ``EasyConfig`` instance ( `#1378 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1378> `_ ) * add source MD5 checksums in all GCC easyconfigs ( `#1391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1391> `_ ) * speeding up the unit tests by avoiding rereading of same easyconfig file ( `#1432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1432> `_ ) * fix conflict detection in unit tests by considering build deps separately from runtime deps ( `#1447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1447> `_ ) * fix toolchain for Bison build dep in ``MVAPICH2-1.9-iccifort-2011.13.367.eb`` easyconfig ( `#1448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1448> `_ ) * use ``Bundle`` generic easyblock for HPCBIOS bundles and fix ``moduleclass`` ( `#1451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1451> `_ ) * various bug fixes, including: * revert version of Libint dependency to 1.1.4 in CP2K v2.5.1 easyconfig ( `#1144 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1144> `_ ) * added Java dependencies to EMBOSS easyconfigs ( `#1167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1167> `_ ) * don't list ' ``lto`` ' as a language in GCC easyconfigs ( `#1286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1286> `_ ) * related to the fixes in the GCC easyblock, see `easyblocks#535 <https://github.com/easybuilders/easybuild-easyblocks/pull/535> `_ * rename libint2 easyconfigs as Libint v2 easyconfigs ( `#1287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1287> `_ ) * fix mpi4py ``source_urls`` in Python easyconfigs ( `#1306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1306> `_ ) * consistently use CLooG 0.18.0 for GCC 4.8 series ( `#1392 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1392> `_ ) * rename GenomeAnalysisTk easyconfigs to GATK ( `#1399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1399> `_ ) * include ``openssl-devel`` SLES11 OS dependency in cURL/MySQL/Python easyconfigs ( `#1422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1422> `_ ) * add missing Perl dependency in parallel easyconfigs ( `#1430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1430> `_ ) * correct name in BLAST+ easyconfigs ( `#1443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1443> `_ ) * fix name for sparsehash easyconfigs ( `#1452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1452> `_ ) EasyBuild v1.16.2 (March 6th 2015) ---------------------------------- bugfix release **framework** `(no changes compared to v1.16.1, simple version bump to stay in sync with easybuild-easyblocks)` **easyblocks** * make ``EB_EasyBuildMeta`` easyblock aware of vsc-base to make upgrading to EasyBuild v2.0.0 possible ( `#573 <https://github.com/easybuilders/easybuild-easyblocks/pull/573> `_ ) **easyconfigs** `(no changes compared to v1.16.1, simple version bump to stay in sync with easybuild-easyblocks)` EasyBuild v1.16.1 (December 19th 2014) -------------------------------------- bugfix release **framework** * fix functionality that is broken with ``--deprecated=2.0`` or with ``$EASYBUILD_DEPRECATED=2.0`` * don't include easyconfig parameters for ``ConfigureMake`` in ``eb -a`` , since fallback is deprecated ( `#1123 <https://github.com/easybuilders/easybuild-framework/pull/1123> `_ ) * correctly check software_license value type ( `#1124 <https://github.com/easybuilders/easybuild-framework/pull/1124> `_ ) * fix ``generate_software_list.py`` script w.r.t. deprecated fallback to ``ConfigureMake`` ( `#1127 <https://github.com/easybuilders/easybuild-framework/pull/1127> `_ ) * other bug fixes * fix logging issues in tests, sync with vsc-base v2.0.0 ( `#1120 <https://github.com/easybuilders/easybuild-framework/pull/1120> `_ ) **easyblocks** * fix EasyBuild versions for which ``$EASYBUILD_DEPRECATED=1.0`` is set in EasyBuild sanity check ( `#531 <https://github.com/easybuilders/easybuild-easyblocks/pull/531> `_ ) **easyconfigs** * set default easyblock to ConfigureMake in TEMPLATE.eb ( `#1277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1277> `_ ) EasyBuild v1.16.0 (December 18th 2014) -------------------------------------- feature + bugfix release **framework** * deprecate automagic fallback to ``ConfigureMake`` easyblock ( `#1113 <https://github.com/easybuilders/easybuild-framework/pull/1113> `_ ) * easyconfigs should specify ``easyblock = 'ConfigureMake'`` instead of relying on the fallback mechanism * **note: automagic fallback to** ``ConfigureMake`` **easyblock will be removed in EasyBuild v2.0** * see also `Automagic fallback to ConfigureMake <http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#configuremake-fallback> `_ * stop triggering deprecated functionality, to enable use of ``--deprecated=2.0`` ( `#1107 <https://github.com/easybuilders/easybuild-framework/pull/1107> `_ , `#1115 <https://github.com/easybuilders/easybuild-framework/pull/1115> `_ , `#1119 <https://github.com/easybuilders/easybuild-framework/pull/1119> `_ ) * see `Deprecated functionality <http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#configuremake-fallback> `_ for more information * various other enhancements, including: * add script to clean up gists created via ``--upload-test-report`` ( `#958 <https://github.com/easybuilders/easybuild-framework/pull/958> `_ ) * also use ``-xHost`` when using Intel compilers on AMD systems (as opposed to ``-msse3`` ) ( `#960 <https://github.com/easybuilders/easybuild-framework/pull/960> `_ ) * add Python version check in ``eb`` command ( `#1046 <https://github.com/easybuilders/easybuild-framework/pull/1046> `_ ) * take ``versionprefix`` into account in ``HierarchicalMNS`` module naming scheme ( `#1058 <https://github.com/easybuilders/easybuild-framework/pull/1058> `_ ) * clean up and refactor ``main.py`` , move functionality to other modules ( `#1059 <https://github.com/easybuilders/easybuild-framework/pull/1059> `_ , `#1064 <https://github.com/easybuilders/easybuild-framework/pull/1064> `_ , `#1075 <https://github.com/easybuilders/easybuild-framework/pull/1075> `_ , `#1087 <https://github.com/easybuilders/easybuild-framework/pull/1087> `_ ) * add check in ``download_file`` function for HTTP return code + show download progress report ( `#1066 <https://github.com/easybuilders/easybuild-framework/pull/1066> `_ , `#1090 <https://github.com/easybuilders/easybuild-framework/pull/1090> `_ ) * include info log message with name and location of used easyblock ( `#1069 <https://github.com/easybuilders/easybuild-framework/pull/1069> `_ ) * add toolchains definitions for ``gpsmpi`` , ``gpsolf`` , ``impich`` , ``intel-para`` , ``ipsmpi`` toolchains ( `#1072 <https://github.com/easybuilders/easybuild-framework/pull/1072> `_ , `#1073 <https://github.com/easybuilders/easybuild-framework/pull/1073> `_ ) * support for Parastation MPI based toolchains * enforce that ``hiddendependencies`` is a subset of ``dependencies`` ( `#1078 <https://github.com/easybuilders/easybuild-framework/pull/1078> `_ ) * this is done to avoid that site-specific policies w.r.t. hidden modules slip into contributed easyconfigs * enable use of ``--show_hidden`` for ``avail`` subcommand with recent Lmod versions ( `#1081 <https://github.com/easybuilders/easybuild-framework/pull/1081> `_ ) * add ``--robot-paths`` configure option ( `#1080 <https://github.com/easybuilders/easybuild-framework/pull/1080> `_ , `#1093 <https://github.com/easybuilders/easybuild-framework/pull/1093> `_ , `#1095 <https://github.com/easybuilders/easybuild-framework/pull/1095> `_ , `#1114 <https://github.com/easybuilders/easybuild-framework/pull/1114> `_ ) * support use of ``%(DEFAULT_ROBOT_PATHS)s`` template in EasyBuild configuration files ( `#1100 <https://github.com/easybuilders/easybuild-framework/pull/1100> `_ ) * see also `Controlling the robot search path <http://easybuild.readthedocs.org/en/latest/Using_the_EasyBuild_command_line.html#controlling-the-robot-search-path> `_ * use ``-xHost`` rather than ``-xHOST`` , to match Intel documentation ( `#1084 <https://github.com/easybuilders/easybuild-framework/pull/1084> `_ ) * update and cleanup ``README`` file ( `#1085 <https://github.com/easybuilders/easybuild-framework/pull/1085> `_ ) * deprecate ``self.moduleGenerator`` in favor of ``self.module_generator`` in ``EasyBlock`` ( `#1088 <https://github.com/easybuilders/easybuild-framework/pull/1088> `_ ) * also support ``MPICH`` MPI family in ``mpi_cmd_for`` function ( `#1098 <https://github.com/easybuilders/easybuild-framework/pull/1098> `_ ) * update documentation references to point to http://easybuild.readthedocs.org ( `#1102 <https://github.com/easybuilders/easybuild-framework/pull/1102> `_ ) * check for OS dependencies with *both* ``rpm`` and ``dpkg`` (if available) ( `#1111 <https://github.com/easybuilders/easybuild-framework/pull/1111> `_ ) * various bug fixes, including: * fix picking required software version specified by ``--software-version`` and clean up ``tweak.py`` ( `#1062 <https://github.com/easybuilders/easybuild-framework/pull/1062> `_ , `#1063 <https://github.com/easybuilders/easybuild-framework/pull/1063> `_ ) * escape ``$`` characters in module load message specified via ``modloadmsg`` easyconfig parameter) ( `#1068 <https://github.com/easybuilders/easybuild-framework/pull/1068> `_ ) * take available hidden modules into account in dependency resolution ( `#1065 <https://github.com/easybuilders/easybuild-framework/pull/1065> `_ ) * fix hard crash when using patch files with an empty list of sources ( `#1070 <https://github.com/easybuilders/easybuild-framework/pull/1070> `_ ) * fix Intel MKL BLACS library being used for MPICH/MPICH2-based toolchains ( `#1072 <https://github.com/easybuilders/easybuild-framework/pull/1072> `_ ) * fix regular expression in ``fetch_parameter_from_easyconfig_file`` function ( `#1096 <https://github.com/easybuilders/easybuild-framework/pull/1096> `_ ) * don't hardcode queue names when submitting a job ( `#1106 <https://github.com/easybuilders/easybuild-framework/pull/1106> `_ ) * fix affiliation/mail address for Fotis in headers ( `#1105 <https://github.com/easybuilders/easybuild-framework/pull/1105> `_ ) * filter out ``/dev/null`` entries in patch file in ``det_patched_files`` function ( `#1108 <https://github.com/easybuilders/easybuild-framework/pull/1108> `_ ) * fix ``gmpolf`` toolchain definition, to have ``gmpich`` as MPI components (instead of ``gmpich2`` ) ( `#1101 <https://github.com/easybuilders/easybuild-framework/pull/1101> `_ ) * 'MPICH' refers to MPICH v3.x, while MPICH2 refers to MPICH(2) v2.x (MPICH v1.x is ancient/obsolete) * **note** : this requires to reinstall the ``gmpolf`` module, using the updated easyconfig from `easybuild-easyconfigs#1217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1217> `_ **easyblocks** * new easyblocks for **2** software packages that requires customized support: * Chimera ( `#524 <https://github.com/easybuilders/easybuild-easyblocks/pull/524> `_ ), GATE ( `#518 <https://github.com/easybuilders/easybuild-easyblocks/pull/518> `_ ) * fix use of deprecated functionality, enhance unit tests to check for it ( `#523 <https://github.com/easybuilders/easybuild-easyblocks/pull/523> `_ ) * various other enhancements, including: * update PETSc easyblock for recent versions (v3.5) ( `#446 <https://github.com/easybuilders/easybuild-easyblocks/pull/446> `_ ) * only include major/minor version numbers for FLUENT subdir ( `#480 <https://github.com/easybuilders/easybuild-easyblocks/pull/480> `_ ) * factor out 'move after install' code from impi easyblock to ``IntelBase`` , use it for itac ( `#487 <https://github.com/easybuilders/easybuild-easyblocks/pull/487> `_ ) * support custom easyconfig parameters in ``EB_impi`` easyblock to correct behavior of MPI wrapper commands ( `#493 <https://github.com/easybuilders/easybuild-easyblocks/pull/493> `_ ) * consider both ``lib`` and ``lib64`` in sanity check for GROMACS ( `#501 <https://github.com/easybuilders/easybuild-easyblocks/pull/501> `_ ) * take ``preinstallopts`` and ``installopts`` into account in ``Binary`` easyblock ( `#503 <https://github.com/easybuilders/easybuild-easyblocks/pull/503> `_ ) * add sanity check command ``abaqus information=all`` for ABAQUS ( `#504 <https://github.com/easybuilders/easybuild-easyblocks/pull/504> `_ ) * update and clean up ``README`` , refer to http://easybuild.readthedocs.org documentation ( `#505 <https://github.com/easybuilders/easybuild-easyblocks/pull/505> `_ , `#516 <https://github.com/easybuilders/easybuild-easyblocks/pull/516> `_ ) * rename deprecated ``self.moduleGenerator`` to ``self.module_generator`` ( `#506 <https://github.com/easybuilders/easybuild-easyblocks/pull/506> `_ ) * see also `easybuild-framework#1088 <https://github.com/easybuilders/easybuild-easyblocks/pull/1088> `_ * check whether specified ``type`` value is a known value ( ``psmp`` or ``popt`` ) in CP2K easyblock ( `#509 <https://github.com/easybuilders/easybuild-easyblocks/pull/509> `_ ) * add support to ``SAMtools`` easyblock for installing recent versions (v1.x) ( `#512 <https://github.com/easybuilders/easybuild-easyblocks/pull/512> `_ ) * fix version check + sanity check in Geant4 easyblock + style fixes ( `#517 <https://github.com/easybuilders/easybuild-easyblocks/pull/517> `_ ) * added ``$root/modlib`` to ``$PYTHONPATH`` guesses in Modeller easyblock ( `#525 <https://github.com/easybuilders/easybuild-easyblocks/pull/525> `_ ) * mark ``license`` custom easyconfig parameter as deprecated in ``IntelBase`` ( `#527 <https://github.com/easybuilders/easybuild-easyblocks/pull/527> `_ ) * various bug fixes, including: * fix Libxc version check in CP2K easyblock ( `#478 <https://github.com/easybuilders/easybuild-easyblocks/pull/478> `_ ) * correctly specify ``mkl_libs`` when building *numpy* with GCC and imkl ( `#485 <https://github.com/easybuilders/easybuild-easyblocks/pull/485> `_ ) * extend noqa for OpenFOAM-Extend in build_step ( `#488 <https://github.com/easybuilders/easybuild-easyblocks/pull/488> `_ , `#520 <https://github.com/easybuilders/easybuild-easyblocks/pull/520> `_ ) * correctly set ``$LD_LIBRARY_PATH`` , ``$LIBRARY_PATH`` and ``$PKG_CONFIG_PATH`` for ``R`` ( `#495 <https://github.com/easybuilders/easybuild-easyblocks/pull/495> `_ ) * fix default value for ``files_to_copy`` in ``MakeCp`` easyblock ( `#500 <https://github.com/easybuilders/easybuild-easyblocks/pull/500> `_ ) * treat ``MPICH`` MPI family as MPICH v3.x instead of MPICH v1.x ( `#519 <https://github.com/easybuilders/easybuild-easyblocks/pull/519> `_ ) * see also `easybuild-framework#1112 <https://github.com/easybuilders/easybuild-easyblocks/pull/1112> `_ * fix affiliation/mail address for Fotis in headers ( `#521 <https://github.com/easybuilders/easybuild-easyblocks/pull/521> `_ ) * clean up in ``extra_options`` methods, avoid casting return value to ``dict`` or returning via parent ( `#528 <https://github.com/easybuilders/easybuild-easyblocks/pull/528> `_ ) **easyconfigs** * added example easyconfig files for **39** new software packages: * ANTs ( `#1232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1232> `_ ), BEOPS ( `#1264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1264> `_ ), Chhimera ( `#1255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1255> `_ ), ctffind ( `#1249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1249> `_ ), DBD-SQLite ( `#1064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1064> `_ ), DBD-mysql ( `#1063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1063> `_ ), DIALIGN-TX ( `#668 <https://github.com/easybuilders/easybuild-easyconfigs/pull/668> `_ ), ffmpeg ( `#1088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1088> `_ ), GObject-Introspection ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), GTS ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), Graphviz ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), GraphViz2 ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), grace ( `#1131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1131> `_ ), HarfBuzz ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), HTSlib ( `#1161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1161> `_ ), GSSAPI ( `#1048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1048> `_ ), Kerberos_V5 ( `#1048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1048> `_ ), libevent ( `#1063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1063> `_ ), libXdmcp ( `#1129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1129> `_ ), libXft ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), libXinerama ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), libXrender ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), Maven ( `#1094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1094> `_ ), MySQL ( `#1063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1063> `_ ), Net-LibIDN ( `#1060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1060> `_ ), OpenCV ( `#1088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1088> `_ ), OpenMD ( `#1105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1105> `_ ), Qhull ( `#1105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1105> `_ ), Pango ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), psmpi ( `#1245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1245> `_ , `#1246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1246> `_ ), RELION ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), renderproto ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), rjags ( `#1125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1125> `_ ), runjags ( `#1125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1125> `_ ), SPRNG ( `#1138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1138> `_ , `#1141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1141> `_ ), xineramaproto ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), XML-Dumper ( `#1061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1061> `_ ), XML-Parser ( `#1061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1061> `_ ), XML-Twig ( `#1061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1061> `_ ) * added easyconfigs for new toolchains * ``intel/2014.10`` & ``intel/2014.11`` ( `#1219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1219> `_ ), ``intel-para/2014.12`` ( `#1246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1246> `_ ), ``gpsolf/2014.12`` ( `#1245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1245> `_ ), ``iompi/6.6.4`` ( `#1215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1215> `_ ) * include ``easyblock = 'ConfigureMake'`` in relevant easyconfigs to deal with deprecation of automagic fallback to ``ConfigureMake`` ( `#1248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1248> `_ ) * see also `easybuild-framework#1113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1113> `_ and `Automagic fallback to ConfigureMake <http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#configuremake-fallback> `_ * clean up use of deprecated functionality in existing easyconfigs ( `#1252 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1252> `_ , `#1259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1259> `_ ) * stop using deprecated ``makeopts`` , ``premakeopts`` and ``shared_lib_ext`` * check for use of deprecated functionality in easyconfigs unit tests * see also http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#easyconfig-parameters * various other enhancements, including: * also build ``fftw3_threads`` libraries, and enhance sanity checks ( `#1013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1013> `_ ) * add unit test to verify specified ``sanity_check_paths`` ( `#1119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1119> `_ ) * update and clean up ``README`` , refer to http://easybuild.readthedocs.org documentation ( `#1184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1184> `_ , `#1224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1224> `_ ) * various bug fixes, including: * fix unit tests w.r.t. changes in framework ( `#1146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1146> `_ ) * remove unnecessary build dependencies for OpenMPI ( `#1168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1168> `_ ) * remove duplicate line in OpenMPI easyconfigs ( `#1207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1207> `_ ) * fix affiliation/mail address for Fotis in headers ( `#1237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1237> `_ ) * fix permissions of easyconfig files for consistency ( `#1210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1210> `_ ) * disable symbol lookup feature in cairo to fix build on SL6 ( `#1241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1241> `_ ) * fix easyconfig ``gmpolf`` toolchain w.r.t. MPICH software name ( `#1217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1217> `_ ) * see also `easybuild-framework#1112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1112> `_ * fix ``source_urls`` for WRF and WPS ( `#1225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1225> `_ ) * fix and clean up GATE easyconfigs ( `#1228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1228> `_ ) * fix broken CLHEP builds by including ``-gcc`` in ``$CXXFLAGS`` ( `#1254 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1254> `_ ) * add patch to fix broken test in Go ( `#1257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1257> `_ ) * fix name of GMAP easyconfigs, should be GMAP-GSNAP ( `#1268 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1268> `_ ) * fix easyconfig filenames, enhance unit test to check easyconfig filenames ( `#1271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1271> `_ ) EasyBuild v1.15.2 (October 7th 2014) ------------------------------------ bugfix release **framework** * fix ``$MODULEPATH`` extensions for Clang/CUDA, to make ``goolfc`` / ``cgoolf`` compatible with ``HierarchicalMNS`` ( `#1050 <https://github.com/easybuilders/easybuild-framework/pull/1050> `_ ) * include ``versionsuffix`` in module subdirectory with ``HierarchicalMNS`` ( `#1050 <https://github.com/easybuilders/easybuild-framework/pull/1050> `_ , `#1055 <https://github.com/easybuilders/easybuild-framework/pull/1055> `_ ) * fix unit tests which were broken with bash patched for ShellShock bug ( `#1051 <https://github.com/easybuilders/easybuild-framework/pull/1051> `_ ) * add definition of gimpi toolchain, required to make gimkl toolchain compatible with ``HierarchicalMNS`` ( `#1052 <https://github.com/easybuilders/easybuild-framework/pull/1052> `_ ) * don't override ``COMPILER_MODULE_NAME`` obtained from ``ClangGCC`` in Clang-based toolchains ( `#1053 <https://github.com/easybuilders/easybuild-framework/pull/1053> `_ ) * fix wrong code in ``path_to_top_of_module_tree`` function ( `#1054 <https://github.com/easybuilders/easybuild-framework/pull/1054> `_ ) * because of this, load statements for compilers were potentially included in higher-level modules under ``HierarchicalMNS`` **easyblocks** * only disable sanitizer tests for recent Clang versions ( `#481 <https://github.com/easybuilders/easybuild-easyblocks/pull/481> `_ , `#482 <https://github.com/easybuilders/easybuild-easyblocks/pull/482> `_ ) * pass down installopts to CUDA install command ( `#483 <https://github.com/easybuilders/easybuild-easyblocks/pull/483> `_ ) **easyconfigs** * disable parallel build for slalib ( `#968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/968> `_ ) * fix compatibility of goolfc with HierarchicalMNS by using GCC toolchain for installing CUDA ( `#1106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1106> `_ , `#1115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1115> `_ ) * fix zlib OS dependency spec for Debian in Boost easyconfigs ( `#1109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1109> `_ ) * fix compatibility of gimkl with HierarchicalMNS by using gimpi subtoolchain ( `#1110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1110> `_ ) * make both GCC and Clang first-class members in Clang-based toolchains to fix compatibility with HierarchicalMNS ( `#1113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1113> `_ ) EasyBuild v1.15.1 (September 23rd 2014) --------------------------------------- bugfix release **framework** * take into account that multiple modules may be extending ``$MODULEPATH`` with the same path, when determining path to top of module tree (see `#1047 <https://github.com/easybuilders/easybuild-framework/pull/1047> `_ ) * this bug caused a load statement for either ``icc`` or ``ifort`` to be included in higher-level modules installed with an Intel-based compiler toolchain, under the ``HierarchicalMNS`` module naming scheme * make ``HierarchicalMNS`` module naming scheme compatible with ``cgoolf`` and ``goolfc`` toolchain ( `#1049 <https://github.com/easybuilders/easybuild-framework/pull/1049> `_ ) * add definition of ``iompi`` (sub)toolchain to make ``iomkl`` toolchain compatible with ``HierarchicalMNS`` ( `#1049 <https://github.com/easybuilders/easybuild-framework/pull/1049> `_ ) **easyblocks** `(no changes compared to v1.15.0, simple version bump to stay in sync with easybuild-framework)` **easyconfigs** * minor bug fixes, including: * use SHLIB_EXT in GMP/MPFR easyconfigs ( `#1090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1090> `_ ) * fix TopHat homepage and source_urls since page moved ( `#1092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1092> `_ ) * make iomkl toolchain compatible with HierarchicalMNS ( `#1099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1099> `_ ) EasyBuild v1.15.0 (September 12th 2014) --------------------------------------- feature + bugfix release **framework** * various other enhancements, including: * fetch extension sources in fetch_step to enhance ``--stop=fetch`` ( `#978 <https://github.com/easybuilders/easybuild-framework/pull/978> `_ ) * add ``iimpi`` toolchain definition ( `#993 <https://github.com/easybuilders/easybuild-framework/pull/993> `_ ) * prepend robot path with download location of files when ``--from-pr`` is used ( `#995 <https://github.com/easybuilders/easybuild-framework/pull/995> `_ ) * add support for excluding module path extensions from generated modules ( `#1003 <https://github.com/easybuilders/easybuild-framework/pull/1003> `_ ) * see ``include_modpath_extensions`` easyconfig parameter * add support for installing hidden modules and using them as dependencies ( `#1009 <https://github.com/easybuilders/easybuild-framework/pull/1009> `_ , `#1021 <https://github.com/easybuilders/easybuild-framework/pull/1021> `_ , `#1023 <https://github.com/easybuilders/easybuild-framework/pull/1023> `_ ) * see ``--hidden`` and ``hiddendependencies`` easyconfig parameter * stop relying on ``conflict`` statement in module files to determine software name of toolchain components ( `#1017 <https://github.com/easybuilders/easybuild-framework/pull/1017> `_ , `#1037 <https://github.com/easybuilders/easybuild-framework/pull/1037> `_ ) * instead, the ``is_short_modname_for`` method defined by the module naming scheme implementation is queried * improve error message generated for a missing easyconfig file ( `#1019 <https://github.com/easybuilders/easybuild-framework/pull/1019> `_ ) * include path where tweaked easyconfigs are placed in robot path ( `#1032 <https://github.com/easybuilders/easybuild-framework/pull/1032> `_ ) * indicate forced builds in ``--dry-run`` output ( `#1034 <https://github.com/easybuilders/easybuild-framework/pull/1034> `_ ) * fix interaction between ``--force`` and ``--try-toolchain --robot`` ( `#1035 <https://github.com/easybuilders/easybuild-framework/pull/1035> `_ ) * add ``--software`` option, disable recursion for ``--try-software(-X)`` ( `#1036 <https://github.com/easybuilders/easybuild-framework/pull/1036> `_ ) * various bug fixes, including: * fix ``HierarchicalMNS`` crashing when MPI library is installed with a dummy toolchain ( `#986 <https://github.com/easybuilders/easybuild-framework/pull/986> `_ ) * fix list of FFTW wrapper libraries for Intel MKL ( `#987 <https://github.com/easybuilders/easybuild-framework/pull/987> `_ ) * fix stability of unit tests ( `#988 <https://github.com/easybuilders/easybuild-framework/pull/988> `_ , `#1027 <https://github.com/easybuilders/easybuild-framework/pull/1027> `_ , `#1033 <https://github.com/easybuilders/easybuild-framework/pull/1033> `_ ) * make sure ``$SCALAPACK_INC_DIR`` (and ``$SCALAPACK_LIB_DIR`` ) are defined when using ``imkl`` ( `#990 <https://github.com/easybuilders/easybuild-framework/pull/990> `_ ) * fix error message on missing FFTW wrapper libs ( `#992 <https://github.com/easybuilders/easybuild-framework/pull/992> `_ ) * fix duplicate toolchain elements in ``--list-toolchains`` output ( `#993 <https://github.com/easybuilders/easybuild-framework/pull/993> `_ ) * filter out load statements that extend the ``$MODULEPATH`` to make the module being installed available ( `#1016 <https://github.com/easybuilders/easybuild-framework/pull/1016> `_ ) * fix conflict specification included in module files ( `#1017 <https://github.com/easybuilders/easybuild-framework/pull/1017> `_ ) * avoid ``--from-pr`` crashing hard unless ``--robot`` is used ( `#1022 <https://github.com/easybuilders/easybuild-framework/pull/1022> `_ ) * properly quote GCC version string in archived easyconfig ( `#1028 <https://github.com/easybuilders/easybuild-framework/pull/1028> `_ ) * fix issue with ``--repositorypath`` not honoring ``--prefix`` ( `#1031 <https://github.com/easybuilders/easybuild-framework/pull/1031> `_ ) * sync with latest vsc-base version to fix log order ( `#1039 <https://github.com/easybuilders/easybuild-framework/pull/1039> `_ ) * increase # commits per page for ``--from-pr`` ( `#1040 <https://github.com/easybuilders/easybuild-framework/pull/1040> `_ ) **easyblocks** * added support for **2** new software packages that requires customized support: * Modeller ( `#392 <https://github.com/easybuilders/easybuild-easyblocks/pull/392> `_ ), NAMD ( `#397 <https://github.com/easybuilders/easybuild-easyblocks/pull/397> `_ ) * various enhancements, including: * fix locale used for running Perl unit tests ( `#425 <https://github.com/easybuilders/easybuild-easyblocks/pull/425> `_ ) * fix Rmpi easyblock to correctly configure for Intel MPI ( `#435 <https://github.com/easybuilders/easybuild-easyblocks/pull/435> `_ ) * add support in generic Rpackage easyblock for handling patches ( `#435 <https://github.com/easybuilders/easybuild-easyblocks/pull/435> `_ ) * enhance OpenFOAM easyblock: fix building MPI build of Pstream and (pt)scotchDecomp + overall cleanup ( `#436 <https://github.com/easybuilders/easybuild-easyblocks/pull/436> `_ ) * enhance NWChem easyblock for version 6.3, clean up running of test cases ( `#441 <https://github.com/easybuilders/easybuild-easyblocks/pull/441> `_ ) * enhance noqa for interactive configuration of Qt build procedure ( `#447 <https://github.com/easybuilders/easybuild-easyblocks/pull/447> `_ ) * add custom sanity check for R in easyblock ( `#449 <https://github.com/easybuilders/easybuild-easyblocks/pull/449> `_ ) * make perlmodule take into account ``(pre){config,build,install}opts`` ( `#450 <https://github.com/easybuilders/easybuild-easyblocks/pull/450> `_ ) * add support for specifying an activation key after installing Mathematica ( `#452 <https://github.com/easybuilders/easybuild-easyblocks/pull/452> `_ ) * consider both ``lib`` and ``lib64`` directories in netCDF sanity check ( `#453 <https://github.com/easybuilders/easybuild-easyblocks/pull/453> `_ ) * fix sanity check for ANSYS for v15.0.x ( `#458 <https://github.com/easybuilders/easybuild-easyblocks/pull/458> `_ ) * fix Trilinos easyblock for recent version ( `#462 <https://github.com/easybuilders/easybuild-easyblocks/pull/462> `_ ) * enhance impi easyblock to handle install subdir for impi v5.0.1 and future version ( `#465 <https://github.com/easybuilders/easybuild-easyblocks/pull/465> `_ , `#472 <https://github.com/easybuilders/easybuild-easyblocks/pull/472> `_ ) * include $CFLAGS in linker flags for HPL ( `#466 <https://github.com/easybuilders/easybuild-easyblocks/pull/466> `_ ) * update sanity test checks for GROMACS 5.x ( `#471 <https://github.com/easybuilders/easybuild-easyblocks/pull/471> `_ ) * various bug fixes: * fix building of FFTW wrappers for Intel MKL v11.1.x + cleanup of imkl easyblock ( `#445 <https://github.com/easybuilders/easybuild-easyblocks/pull/445> `_ ) **easyconfigs** * added example easyconfig files for **13** new software packages: * Circos ( `#780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/780> `_ ), DB_File ( `#913 <https://github.com/easybuilders/easybuild-easyconfigs/pull/913> `_ ), Emacs ( `#970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/970> `_ ), evmix ( `#1077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1077> `_ ), GD ( `#780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/780> `_ ), gsl ( `#1077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1077> `_ ), IOR ( `#949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/949> `_ ), JAGS ( `#1076 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1076> `_ ), libgd ( `#780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/780> `_ ), MethPipe ( `#1070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1070> `_ ), Modeller ( `#825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/825> `_ ), NAMD ( `#835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/835> `_ ), netCDF-C++4 ( `#1015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1015> `_ ) * added easyconfigs for new toolchains ( `#986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/986> `_ , `#1051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1051> `_ ): * gimkl/1.5.9, ictce/7.1.2 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Python 2.7.8/3.4.1, Perl 5.20.0, R 3.1.1, NWChem 6.3, OpenFOAM-Extend 3.1, GCC 4.9.1, Clang 3.4.2, ... * various enhancements, including: * make existing ictce/intel toolchains compatible with HierarchicalMNS ( `#1069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1069> `_ ) * this involves installing impi with an iccifort toolchain, and imkl with an iimpi toolchain * various bug fixes, including: * download link for Perl modules changed to use cpan.metapan.org * fix missing MPI-based OpenFOAM libraries ( ``Pstream`` , ``(pt)scotchDecomp`` ), make sure provided SCOTCH is used ( `#957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/957> `_ ) EasyBuild v1.14.0 (July 9th 2014) --------------------------------- feature + bugfix release **framework** * important changes * required Lmod version bumped to v5.6.3 ( `#944 <https://github.com/easybuilders/easybuild-framework/pull/944> `_ ) * required due to enhancements and bug fixes in Lmod, e.g. making ``--terse avail`` significantly faster, and correctly handling a ``prepend-path`` statement that includes multiple directories at once * required Tcl/C environment modules version set to 3.2.10 ( * hard requirement due to fixed ``modulecmd`` segmentation fault bug, that only tends manifests itself when making a large amount of changes in the environment (e.g. ``module load <toolchain>`` ) * renamed ``EasyBuildModuleNamingScheme`` to ``EasyBuildMNS`` * enhanced custom module naming schemes functionality to support hierarchical module naming schemes ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ , `#971 <https://github.com/easybuilders/easybuild-framework/pull/971> `_ , `#975 <https://github.com/easybuilders/easybuild-framework/pull/975> `_ ) * extended API for custom module naming schemes to allow tweaking different aspects of module naming * see ``easybuild/tools/module_naming_scheme/mns.py`` for abstract ``ModuleNamingScheme`` class * an example hierarchical module naming scheme is included, see ``HierarchicalMNS`` * split up full module names into a module subdirectory part, which becomes part of ``$MODULEPATH`` ), and a 'short' module name (is exposed to end-users) * example: ``GCC/4.7.2`` in ``Core`` subdir, ``OpenMPI/1.6.5`` in ``Compiler/GCC/4.7.2`` subdir * make ``ModuleNamingScheme`` class a singleton, move it into ``easybuild.tools.module_naming_scheme.mns`` module * implement ``ActiveMNS`` wrapper class for querying active module naming scheme * implement toolchain inspection functions that can be used in a custom module naming scheme * ``det_toolchain_compilers`` , ``det_toolchain_mpi`` in ``easybuild.tools.module_naming_scheme.toolchain`` * significant code cleanup & enhanced unit tests * enhance & clean up ``tools/modules.py`` ( `#944 <https://github.com/easybuilders/easybuild-framework/pull/944> `_ , `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ , `#963 <https://github.com/easybuilders/easybuild-framework/pull/963> `_ , `#964 <https://github.com/easybuilders/easybuild-framework/pull/964> `_ , `#969 <https://github.com/easybuilders/easybuild-framework/pull/969> `_ ) * make ``ModulesTool`` a singleton to avoid repeating module commands over & over again needlessly * use ``module use`` , ``module unuse`` rather than fiddling with ``$MODULEPATH`` directly * improve debug logging (include full stdout/stderr output of module commands) * remove deprecated functionality ( ``add_module`` , ``remove_module`` , indirect module load) * various other enhancements, including: * added toolchain definitions for 'common' toolchains: ``intel`` and ``foss`` ( `#956 <https://github.com/easybuilders/easybuild-framework/pull/956> `_ ) * implement caching for easyconfig files, parsed easyconfigs and toolchains ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * enable ``--ignore-osdeps`` implicitly when ``-D`` , ``--dry-run`` or ``--dep-graph`` are used ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * flesh out ``use_group`` and ``det_parallelism`` function, include them in ``easybuild.tools.systemtools`` ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * make symlinking of module files part of module naming scheme API ( `#973 <https://github.com/easybuilders/easybuild-framework/pull/973> `_ ) * list of symlinks paths can be controlled using ``det_module_symlink_paths()`` method * added support for new configuration options: * tweaking compiler flags triggered by ``optarch`` toolchain options using ``--optarch`` ( `#949 <https://github.com/easybuilders/easybuild-framework/pull/949> `_ ) * filtering out dependencies from easyconfig files using ``--filter-deps`` ( `#957 <https://github.com/easybuilders/easybuild-framework/pull/957> `_ ) * filtering environment included in test reports with ``--test-report-env-filter`` ( `#959 <https://github.com/easybuilders/easybuild-framework/pull/959> `_ ) e.g. ``--test-report-env-filter='^SSH|USER|HOSTNAME|UID|.*COOKIE.*'`` * made suffix used for module files install path configurable, using ``--suffix-modules-path`` ( `#973 <https://github.com/easybuilders/easybuild-framework/pull/973> `_ ) * added support for additional easyconfig parameters: * define aliases in module files ( ``modaliases`` ) ( `#952 <https://github.com/easybuilders/easybuild-framework/pull/952> `_ ) * add print message on module load ( ``modloadmsg`` ) and Tcl footer ( ``modtclfooter`` ) in module files ( `#954 <https://github.com/easybuilders/easybuild-framework/pull/954> `_ , `#974 <https://github.com/easybuilders/easybuild-framework/pull/974> `_ ) * various bug fixes, including: * don't try to tweak generated easyconfigs when using ``--try-X`` ( `#942 <https://github.com/easybuilders/easybuild-framework/pull/942> `_ ) * currently create symlinks to module files modules/all under a custom module naming scheme ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * restore traceback error reporting on hard crashes ( `#965 <https://github.com/easybuilders/easybuild-framework/pull/965> `_ ) **easyblocks** * added **one** new `generic` easyblock: CmdCp (`#395 <https://github.com/easybuilders/easybuild-easyblocks/pull/395> `_ ) * added support for **2** new software packages that requires customized support: * ANSYS ( `#398 <https://github.com/easybuilders/easybuild-easyblocks/pull/398> `_ ), HPCG ( `#408 <https://github.com/easybuilders/easybuild-easyblocks/pull/408> `_ ) * various enhancements, including: * updated ABAQUS easyblock so that it works for version 13.2 ( `#406 <https://github.com/easybuilders/easybuild-easyblocks/pull/406> `_ ) * enhance BLAT easyblock by using ``super`` 's ``build_step`` and ``prebuildopts`` / ``buildopts`` ( `#423 <https://github.com/easybuilders/easybuild-easyblocks/pull/423> `_ ) * enhance Mothur easyblock to guess correct start dir for recent versions ( `#424 <https://github.com/easybuilders/easybuild-easyblocks/pull/424> `_ ) * replace use of deprecated (pre)makeopts with ( ``pre`` ) ``buildopts`` in all easyblocks ( `#427 <https://github.com/easybuilders/easybuild-easyblocks/pull/427> `_ ) * fix poor mans version of toolchain compiler detection in imkl easyblock ( `#429 <https://github.com/easybuilders/easybuild-easyblocks/pull/429> `_ ) * various bug fixes: * only check for ``idb`` for older versions of icc ( `#426 <https://github.com/easybuilders/easybuild-easyblocks/pull/426> `_ ) * fix issues with installing RPMS when ``rpmrebuild`` is required ( `#433 <https://github.com/easybuilders/easybuild-easyblocks/pull/433> `_ ) * correctly disable parallel build for ATLAS ( `#434 <https://github.com/easybuilders/easybuild-easyblocks/pull/434> `_ ) * fix sanity check for Intel MPI v5.x (only provides bin64) ( `#432 <https://github.com/easybuilders/easybuild-easyblocks/pull/432> `_ ) * add ``$MIC_LD_LIBRARY_PATH`` for MKL v11.x ( `#437 <https://github.com/easybuilders/easybuild-easyblocks/pull/437> `_ ) **easyconfigs** * added example easyconfig files for **17** new software packages: * ANSYS ( `#836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/836> `_ ), Beast ( `#912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/912> `_ ), ELPH ( `#910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/910> `_ , `#911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/911> `_ ), FastTree ( `#900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/900> `_ , `#947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/947> `_ ), GEM-library ( `#858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/858> `_ ), HPCG ( `#853 <https://github.com/easybuilders/easybuild-easyconfigs/pull/853> `_ ), mdtest ( `#925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/925> `_ ), ncview ( `#648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/648> `_ ), PRANK ( `#917 <https://github.com/easybuilders/easybuild-easyconfigs/pull/917> `_ ), RDP-Classifier ( `#903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/903> `_ ), SDPA ( `#955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/955> `_ ), SIBELia ( `#886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/886> `_ ), SOAPaligner ( `#857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/857> `_ ), SPAdes ( `#884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/884> `_ ), stemming ( `#891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/891> `_ ), WHAM ( `#872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/872> `_ ), YAXT ( `#656 <https://github.com/easybuilders/easybuild-easyconfigs/pull/656> `_ ) * added easyconfigs for new toolchains ( `#935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/935> `_ , `#944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/944> `_ , `#948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/948> `_ ): * foss/2014b, ictce/6.3.5, intel/2014b * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * various enhancements, including: * replace use of deprecated ``(pre)makeopts`` with ``(pre)buildopts`` in all easyblocks ( `#954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/954> `_ ) * disable running embossupdate on installation of EMBOSS ( `#963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/963> `_ ) * various bug fixes, including: * really enable OpenMP support in FastTree easyconfigs ( `#947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/947> `_ ) * fix easyconfigs unit tests after changes in framework ( `#958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/958> `_ ) EasyBuild v1.13.0 (May 29th 2014) --------------------------------- feature + bugfix release **framework** * make ``--try-X`` command line options work recursively (i.e. collaborate with ``--robot`` ) ( `#922 <https://github.com/easybuilders/easybuild-framework/pull/922> `_ ) * EasyBuild will first build a full dependency graph of the specified easyconfigs, and then apply the ``--try`` specifications * the elements of the dependency graph for the used toolchain and its dependencies are left untouched * this makes ``eb foo-1.0-goolf-1.4.10.eb --try-toolchain=ictce,5.5.0 --robot`` also work when ``foo`` has dependencies * caveat: the specified easyconfig files must all use the same toolchain (version) * add support for testing easyconfig pull requests from EasyBuild command line ( `#920 <https://github.com/easybuilders/easybuild-framework/pull/920> `_ , `#924 <https://github.com/easybuilders/easybuild-framework/pull/924> `_ , `#925 <https://github.com/easybuilders/easybuild-framework/pull/925> `_ , `#932 <https://github.com/easybuilders/easybuild-framework/pull/932> `_ , `#933 <https://github.com/easybuilders/easybuild-framework/pull/933> `_ , `#938 <https://github.com/easybuilders/easybuild-framework/pull/938> `_ ) * add ``--from-pr`` command line option for downloading easyconfig files from pull requests * add ``--upload-test-report`` command line option for uploading a detailed test report to GitHub as a gist * this requires specifying a GitHub username for which a GitHub token is available, using ``--github-user`` * with ``--dump-test-report`` , the test report can simply be dumped to file rather than being uploaded to GitHub * see also https://github.com/easybuilders/easybuild/wiki/Review-process-for-contributions#testing-result * the ``makeopts`` and ``premakeopts`` easyconfig parameter are deprecated, and replaced by ``buildopts`` and ``prebuildopts`` ( `#918 <https://github.com/easybuilders/easybuild-framework/pull/918> `_ ) * both ``makeopts`` and ``premakeopts`` will still be honored in future EasyBuild v1.x versions, but should no longer be used * various other enhancements, including: * add ``--disable-cleanup-builddir`` command line option, to keep the build dir after a (successful) build ( `#853 <https://github.com/easybuilders/easybuild-framework/pull/853> `_ ) * the build dir is still cleaned up by default for successful builds, i.e. ``--cleanup-builddir`` is the default * also consider lib32 in paths checked for ``$LD_LIBRARY_PATH`` and ``$LIBRARY_PATH`` ( `#912 <https://github.com/easybuilders/easybuild-framework/pull/912> `_ ) * reorganize support for file/git/svn repositories into ``repository`` package, making it extensible ( `#913 <https://github.com/easybuilders/easybuild-framework/pull/913> `_ ) * add support for ``postinstallcmds`` easyconfig parameter, to specify commands that need to be run after the install step ( `#918 <https://github.com/easybuilders/easybuild-framework/pull/918> `_ ) * make ``VERSION=`` part in version of C environment modules tool optional, which is required for older versions ( `#930 <https://github.com/easybuilders/easybuild-framework/pull/930> `_ ) * various bug fixes, including: * fix small issues in bootstrap script: correctly determine EasyBuild version and make sure modules path exists ( `#915 <https://github.com/easybuilders/easybuild-framework/pull/915> `_ ) * fix github unit tests ( `#916 <https://github.com/easybuilders/easybuild-framework/pull/916> `_ ) * disable useless debug logging for unit tests ( `#919 <https://github.com/easybuilders/easybuild-framework/pull/919> `_ ) * fix unit test for ``--skip`` ( `#929 <https://github.com/easybuilders/easybuild-framework/pull/929> `_ ) * make sure ``start_dir`` can be set based on location of unpacked first source file ( `#931 <https://github.com/easybuilders/easybuild-framework/pull/931> `_ ) * the ``vsc`` package shipped with easybuild-framework is synced with vsc-base v1.9.1 ( `#935 <https://github.com/easybuilders/easybuild-framework/pull/935> `_ ) * fancylogger (used for logging in EasyBuild) is now robust against strings containing UTF8 characters * the ``deprecated`` logging function now does a non-strict version check (rather than an erroneous strict check) * the ``easybuild.tools.agithub`` module is removed, ``vsc.utils.rest`` now provides the required functionality * fix support for unpacking gzipped source files, don't unpack ``.gz`` files in-place in the source directory ( `#936 <https://github.com/easybuilders/easybuild-framework/pull/936> `_ ) **easyblocks** * added support for **1** new software package that requires customized support: * Go ( `#417 <https://github.com/easybuilders/easybuild-easyblocks/pull/417> `_ ) * various enhancements, including: * enhance OpenFOAM easyblock so OpenFOAM-Extend fork can be built too + style fixes ( `#253 <https://github.com/easybuilders/easybuild-easyblocks/pull/253> `_ , `#416 <https://github.com/easybuilders/easybuild-easyblocks/pull/416> `_ ) * enhance CPLEX easyblock by adding support for staged installation ( `#372 <https://github.com/easybuilders/easybuild-easyblocks/pull/372> `_ ) * include support for ``configure_cmd_prefix`` easyconfig parameter in ConfigureMake generic easyblock ( `#393 <https://github.com/easybuilders/easybuild-easyblocks/pull/393> `_ ) * enhance GCC easyblock for building v4.9.0 and versions prior to v4.5 ( `#396 <https://github.com/easybuilders/easybuild-easyblocks/pull/396> `_ , `#400 <https://github.com/easybuilders/easybuild-easyblocks/pull/400> `_ ) * enhance easyblocks for Intel ipp and itac to support recent versions ( `#399 <https://github.com/easybuilders/easybuild-easyblocks/pull/399> `_ ) * enhance Clang easyblock: install static analyzer ( `#402 <https://github.com/easybuilders/easybuild-easyblocks/pull/402> `_ ), be more robust against changing source dir names ( `#413 <https://github.com/easybuilders/easybuild-easyblocks/pull/413> `_ ) * enhance FoldX easyblock, update list of potential FoldX binaries to support recent versions ( `#407 <https://github.com/easybuilders/easybuild-easyblocks/pull/407> `_ ) * add runtime patching in Boost easyblock to fix build issue with old Boost versions and recent glibc (> 2.15) ( `#412 <https://github.com/easybuilders/easybuild-easyblocks/pull/412> `_ ) * enhance ``MakeCp`` generic easyblock: use location of 1st unpacked source as fallback base dir for ``files_to_copy`` ( `#415 <https://github.com/easybuilders/easybuild-easyblocks/pull/415> `_ ) * various bug fixes: * fix installing Mathematica when X forwarding is enabled (make sure ``$DISPLAY`` is unset) ( `#391 <https://github.com/easybuilders/easybuild-easyblocks/pull/391> `_ ) * fix permissions of installed files in SAMtools easyblock, ensure read/execute for group/other ( `#409 <https://github.com/easybuilders/easybuild-easyblocks/pull/409> `_ ) * fix implementation of ``det_pylibdir`` function in PythonPackage generic easyblock ( `#419 <https://github.com/easybuilders/easybuild-easyblocks/pull/419> `_ , `#420 <https://github.com/easybuilders/easybuild-easyblocks/pull/420> `_ ) * determine Python lib dir via ``distutils`` Python, which works cross-OS (as opposed to hardcoding ``lib`` ) **easyconfigs** * added example easyconfig files for **32** new software packages: * APBS ( `#742 <https://github.com/easybuilders/easybuild-easyconfigs/pull/742> `_ ), BayesTraits ( `#770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/770> `_ ), bc ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), BitSeq ( `#791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/791> `_ ), CEM ( `#789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/789> `_ ), CVS ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), eXpress ( `#786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/786> `_ ), file ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), GEMSTAT ( `#861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/861> `_ ), GMAP ( `#594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/594> `_ ), Go ( `#887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/887> `_ ), iscp ( `#602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/602> `_ ), IsoInfer ( `#773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/773> `_ ), Jellyfish ( `#868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/868> `_ ), less ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), libcircle ( `#883 <https://github.com/easybuilders/easybuild-easyconfigs/pull/883> `_ ), mcpp ( `#602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/602> `_ ), MMSEQ ( `#795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/795> `_ ), MUSTANG ( `#800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/800> `_ ), OpenFOAM-Extend ( `#437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/437> `_ ), popt ( `#759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/759> `_ ), pscom ( `#759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/759> `_ ), psmpi2 ( `#759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/759> `_ ), QuadProg++ ( `#773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/773> `_ ), rSeq ( `#771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/771> `_ ), RSEQtools ( `#870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/870> `_ ), Ruby ( `#873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/873> `_ ), segemehl ( `#792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/792> `_ ), SOAPec ( `#879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/879> `_ ), SOAPdenovo2 ( `#874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/874> `_ ), SRA-Toolkit ( `#793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/793> `_ ), texinfo ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ) * added easyconfig for new toolchain goolfc/1.4.10 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * e.g., older versions of Boost (1.47.0), GCC (4.1-4.4), & recent versions of Clang, GCC, Lmod, etc. * various enhancements, including: * add OpenSSL dependency for cURL, to enable HTTPS support ( `#881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/881> `_ ) * also install esl-X binaries for HMMER ( `#889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/889> `_ ) * various bug fixes, including: * properly pass down compiler flags for ParMGridGen ( `#437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/437> `_ ) * specify proper make options for PLINK, fixing the build on SL6 ( `#594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/594> `_ , `#772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/772> `_ ) * fix netloc version (0.5 rather than 0.5beta) ( `#707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/707> `_ ) * remove Windows-style line ending in netCDF patch file ( `#796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/796> `_ ) * bump version of OpenSSL dep for BOINC ( `#882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/882> `_ ) EasyBuild v1.12.1 (April 25th 2014) ----------------------------------- bugfix release **framework** * return to original directory after executing a command in a subdir ( `#908 <https://github.com/easybuilders/easybuild-framework/pull/908> `_ ) * fix bootstrap with Lmod, fix issue with module function check and Lmod ( `#911 <https://github.com/easybuilders/easybuild-framework/pull/911> `_ ) **easyblocks** `(no changes compared to v1.12.0, simple version bump to stay in sync with easybuild-framework)` **easyconfigs** `(no changes compared to v1.12.0, simple version bump to stay in sync with easybuild-framework)` EasyBuild v1.12.0 (April 4th 2014) ---------------------------------- feature + bugfix release **framework** * various enhancements, including: * completed support for custom module naming schemes ( `#879 <https://github.com/easybuilders/easybuild-framework/pull/879> `_ , `#904 <https://github.com/easybuilders/easybuild-framework/pull/904> `_ ) * a fully parsed easyconfig file is now passed to the ``det_full_module_name`` function * this does require that an easyconfig file matching the dependency specification is available * added more features to better support using a shared install target with multiple users ( `#902 <https://github.com/easybuilders/easybuild-framework/pull/902> `_ , `#903 <https://github.com/easybuilders/easybuild-framework/pull/903> `_ , `#904 <https://github.com/easybuilders/easybuild-framework/pull/904> `_ ) * further development on support for new easyconfig format (v2.0) ( `#844 <https://github.com/easybuilders/easybuild-framework/pull/844> `_ , `#848 <https://github.com/easybuilders/easybuild-framework/pull/848> `_ ) * not considered stable yet, so still requires using ``--experimental`` * enhanced bootstrap script to also support Lmod and ``modulecmd.tcl`` module tools ( `#869 <https://github.com/easybuilders/easybuild-framework/pull/869> `_ ) * added support to ``run_cmd_qa`` function to supply a list of answers ( `#887 <https://github.com/easybuilders/easybuild-framework/pull/887> `_ ) * detect mismatch between definition of ``module`` function and selected modules tool ( `#871 <https://github.com/easybuilders/easybuild-framework/pull/871> `_ ) * allowing mismatch now requires ``--allow-modules-tool-mismatch`` ; an empty ``module`` function is simply ignored * provide lib64 fallback option for directories in default sanity check paths ( `#896 <https://github.com/easybuilders/easybuild-framework/pull/896> `_ ) * add support for adding JAR files to ``$CLASSPATH`` ( `#898 <https://github.com/easybuilders/easybuild-framework/pull/898> `_ ) * enhanced and cleaned up unit tests ( `#877 <https://github.com/easybuilders/easybuild-framework/pull/877> `_ , `#880 <https://github.com/easybuilders/easybuild-framework/pull/880> `_ , `#884 <https://github.com/easybuilders/easybuild-framework/pull/884> `_ , `#899 <https://github.com/easybuilders/easybuild-framework/pull/899> `_ , `#901 <https://github.com/easybuilders/easybuild-framework/pull/901> `_ ) * code cleanup and refactoring * get rid of global variable for configuration settings in ``config.py`` , use singleton instead ( `#874 <https://github.com/easybuilders/easybuild-framework/pull/874> `_ , `#888 <https://github.com/easybuilders/easybuild-framework/pull/888> `_ , `#890 <https://github.com/easybuilders/easybuild-framework/pull/890> `_ , `#892 <https://github.com/easybuilders/easybuild-framework/pull/892> `_ ) * track build options via singleton in ``config.py`` rather than passing them around all over ( `#886 <https://github.com/easybuilders/easybuild-framework/pull/886> `_ , `#889 <https://github.com/easybuilders/easybuild-framework/pull/889> `_ ) * avoid parsing easyconfig files multiple times by passing a parsed easyconfig to the easyblock ( `#891 <https://github.com/easybuilders/easybuild-framework/pull/891> `_ ) * deprecate list of tuples return type of ``extra_options`` static method ( `#893 <https://github.com/easybuilders/easybuild-framework/pull/893> `_ , `#894 <https://github.com/easybuilders/easybuild-framework/pull/894> `_ ) * move OS dependency check to ``systemtools.py`` module ( `#895 <https://github.com/easybuilders/easybuild-framework/pull/895> `_ ) * bug fixes, including: * fix linking with ``-lcudart`` if CUDA is part of the toolchain, should also include ``-lrt`` ( `#882 <https://github.com/easybuilders/easybuild-framework/pull/882> `_ ) **easyblocks** * various enhancements, including: * also run ``Perl Build build`` for Perl modules (usually not required, but sometimes it is) ( `#380 <https://github.com/easybuilders/easybuild-easyblocks/pull/380> `_ ) * added glob support in generic makecp block ( `#367 <https://github.com/easybuilders/easybuild-easyblocks/pull/367> `_ , `#384 <https://github.com/easybuilders/easybuild-easyblocks/pull/384> `_ ) * enhance sanity check in GCC easyblock such that it also passes/works on OpenSuSE ( `#365 <https://github.com/easybuilders/easybuild-easyblocks/pull/365> `_ ) * add multilib support in GCC easyblock ( `#379 <https://github.com/easybuilders/easybuild-easyblocks/pull/379> `_ ) * various bug fixes: * Clang: disable sanitizer tests when vmem limit is set ( `#366 <https://github.com/easybuilders/easybuild-easyblocks/pull/366> `_ ) * make sure all libraries are installed for recent Intel MKL versions ( `#375 <https://github.com/easybuilders/easybuild-easyblocks/pull/375> `_ ) * fix appending Intel MPI include directories to ``$CPATH`` ( `#371 <https://github.com/easybuilders/easybuild-easyblocks/pull/371> `_ ) * statically link readline/ncurses libraries in Python and NWChem easyblocks ( `#370 <https://github.com/easybuilders/easybuild-easyblocks/pull/370> `_ , `#383 <https://github.com/easybuilders/easybuild-easyblocks/pull/383> `_ , `#385 <https://github.com/easybuilders/easybuild-easyblocks/pull/385> `_ ) * fix easyblock unit tests after changes in framework ( `#376 <https://github.com/easybuilders/easybuild-easyblocks/pull/376> `_ , `#377 <https://github.com/easybuilders/easybuild-easyblocks/pull/377> `_ , `#378 <https://github.com/easybuilders/easybuild-easyblocks/pull/378> `_ ) **easyconfigs** * added example easyconfig files for **6** new software packages: * CLooG ( `#653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/653> `_ ), ELPA ( `#738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/738> `_ ), LIBSVM ( `#788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/788> `_ ), netaddr ( `#753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/753> `_ ), netifcas ( `#753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/753> `_ ), slalib-c ( `#750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/750> `_ ) * added easyconfigs for new toolchains: * ClangGCC/1.3.0 ( `#653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/653> `_ ), goolf/1.4.10-no-OFED ( `#749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/749> `_ ), goolf/1.5.14(-no-OFED) ( `#764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/764> `_ , `#767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/767> `_ ), ictce/6.2.5 ( `#726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/726> `_ ), iomkl ( `#747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/747> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * various enhancements, including: * tweak BOINC easyconfig to make use of ``glob`` support available for ``files_to_copy`` ( `#781 <https://github.com/easybuilders/easybuild-easyconfigs/pull/781> `_ ) * enable ``-fPIC`` for libreadline, so it can be linked into shared libs (e.g. ``libpython2.x.so`` ) ( `#798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/798> `_ ) * various bug fixes, including: * fix Qt source_urls ( `#756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/756> `_ ) * enable ``-fPIC`` in ncurses 5.9 ictce/5.2.0 easyconfig, just like in the others ( `#801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/801> `_ ) * fix unit tests after changes to framework ( `#763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/763> `_ , `#766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/766> `_ , `#769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/769> `_ ) EasyBuild v1.11.1 (February 28th 2014) -------------------------------------- bugfix release **framework** * various bug fixes, including: * fix hard crash when ``$LMOD_CMD`` specified full path to lmod binary, but ``spider`` binary is not in ``$PATH`` ( `#861 <https://github.com/easybuilders/easybuild-framework/pull/861> `_ , `#873 <https://github.com/easybuilders/easybuild-framework/pull/873> `_ ) * fix bug in initialisation of repositories, causing problems when a repository subdirectory is specified ( `#852 <https://github.com/easybuilders/easybuild-framework/pull/852> `_ ) * avoid long wait when dependency resolution fails if ``--robot`` is not specified ( `#875 <https://github.com/easybuilders/easybuild-framework/pull/875> `_ ) **easyblocks** `(no changes compared to v1.11.0, simple version bump to stay in sync with easybuild-framework)` **easyconfigs** `(no changes compared to v1.11.0, simple version bump to stay in sync with easybuild-framework)` EasyBuild v1.11.0 (February 16th 2014) -------------------------------------- feature + bugfix release **framework** * various enhancements, including: * add checksum support for extensions ( `#807 <https://github.com/easybuilders/easybuild-framework/pull/807> `_ ) * make checksum functionality more memory efficient by reading in blocks ( `#836 <https://github.com/easybuilders/easybuild-framework/pull/836> `_ ) * rewrite of dependency solving for speed and better reporting of missing dependencies ( `#806 <https://github.com/easybuilders/easybuild-framework/pull/806> `_ , `#818 <https://github.com/easybuilders/easybuild-framework/pull/818> `_ ) * refactoring of ``main.py`` ( `#815 <https://github.com/easybuilders/easybuild-framework/pull/815> `_ , `#828 <https://github.com/easybuilders/easybuild-framework/pull/828> `_ ) * function/method signatures to pass down build options * move functions from main.py into easybuild.framework.X or easybuild.tools * provide better build statistics ( `#824 <https://github.com/easybuilders/easybuild-framework/pull/824> `_ ) * add --experimental, ``--deprecated`` and ``--oldstyleconfig`` command line options ( `#838 <https://github.com/easybuilders/easybuild-framework/pull/838> `_ ) * with ``--experimental`` , new but incomplete (or partially broken) features are enabled * with ``--deprecated`` , removed of deprecated functionality can be tested (anything deprecated will fail hard) * with ``--disable-oldstyleconfig`` , support for the old style configuration is disabled * define ``$LIBRARY_PATH`` in generated module files ( `#832 <https://github.com/easybuilders/easybuild-framework/pull/832> `_ ) * more constants for source URLs (e.g. for downloads from bitbucket) ( `#831 <https://github.com/easybuilders/easybuild-framework/pull/831> `_ ) * prefer ``$XDG_CONFIG_HOME`` and ``~/.config/easybuild`` over ``~/.easybuild`` for configuration files ( `#820 <https://github.com/easybuilders/easybuild-framework/pull/820> `_ ) * add support for specifying footers to be appended to generated module files ( `#808 <https://github.com/easybuilders/easybuild-framework/pull/808> `_ ) * see ``--modules-footer`` command line option * track version of modules tool + cleanup of ``modules.py`` ( `#839 <https://github.com/easybuilders/easybuild-framework/pull/839> `_ ) * move actual ``run_cmd`` and ``run_cmd_qa`` implementations from ``tools.filetools`` into ``tools.run`` ( `#842 <https://github.com/easybuilders/easybuild-framework/pull/842> `_ , `#843 <https://github.com/easybuilders/easybuild-framework/pull/843> `_ ) * add support for generating modules that support recursive unloading ( `#830 <https://github.com/easybuilders/easybuild-framework/pull/830> `_ ) * see ``--recursive-module-unload`` command line option * add flexibility support for specifying OS dependencies ( `#846 <https://github.com/easybuilders/easybuild-framework/pull/846> `_ ) * alternatives can be specified, e.g. ( ``openssl-devel`` , ``libssl-dev`` ) * initial (incomplete) support for easyconfig files in new format (v2.0) ( `#810 <https://github.com/easybuilders/easybuild-framework/pull/810> `_ , `#826 <https://github.com/easybuilders/easybuild-framework/pull/826> `_ , `#827 <https://github.com/easybuilders/easybuild-framework/pull/827> `_ , `#841 <https://github.com/easybuilders/easybuild-framework/pull/841> `_ ) * requires ``--experimental`` to be able to experiment with format v2 easyconfig files * various bug fixes, including: * fix problems with use of new-style configuration file ( `#821 <https://github.com/easybuilders/easybuild-framework/pull/821> `_ ) * fix removal of old build directories, unless ``cleanupoldbuild`` easyconfig parameter is set ( `#809 <https://github.com/easybuilders/easybuild-framework/pull/809> `_ ) * fix support for different types of repository path specifications ( `#814 <https://github.com/easybuilders/easybuild-framework/pull/814> `_ ) * fix unit tests sensitive to ``$MODULEPATH`` and available easyblocks ( `#845 <https://github.com/easybuilders/easybuild-framework/pull/845> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``VSCPythonPackage`` (`#348 <https://github.com/easybuilders/easybuild-easyblocks/pull/348> `_ ) * added support for **1** new software package that requires customized support: * netcdf4-python ( `#347 <https://github.com/easybuilders/easybuild-easyblocks/pull/347> `_ ) * various enhancements, including: * add support for installing recent tbb versions ( `#341 <https://github.com/easybuilders/easybuild-easyblocks/pull/341> `_ ) * use ``makeopts`` in the build step of the generic ``PythonPackage`` easyblock ( `#352 <https://github.com/easybuilders/easybuild-easyblocks/pull/352> `_ ) * define the ``$CMAKE_INCLUDE_PATH`` and ``$CMAKE_LIBRARY_PATH`` in the generic ``CMakeMake`` easyblock ( `#351 <https://github.com/easybuilders/easybuild-easyblocks/pull/351> `_ , `#360 <https://github.com/easybuilders/easybuild-easyblocks/pull/360> `_ ) * update Clang easyblock to support v3.4 ( `#346 <https://github.com/easybuilders/easybuild-easyblocks/pull/346> `_ ) * make sure Python is built with SSL support, adjust Python easyblock to pick up OpenSSL dep ( `#359 <https://github.com/easybuilders/easybuild-easyblocks/pull/359> `_ ) * note: providing OpenSSL via an OS package is still recommended, such that security updates are picked up * add support for recent netCDF versions ( `#347 <https://github.com/easybuilders/easybuild-easyblocks/pull/347> `_ ) * update SuiteSparse easyblock for new versions, and clean it up a bit ( `#350 <https://github.com/easybuilders/easybuild-easyblocks/pull/350> `_ ) * various bug fixes: * fix name of ``VersionIndependentPythonPackage`` easyblock, deprecate ``VersionIndependendPythonPackage`` easyblock ( `#348 <https://github.com/easybuilders/easybuild-easyblocks/pull/348> `_ ) * fix detection of machine architecture in FSL easyblock ( `#353 <https://github.com/easybuilders/easybuild-easyblocks/pull/353> `_ ) * fix bug in NWChem easyblock w.r.t. creating local dummy ``.nwchem`` file ( `#360 <https://github.com/easybuilders/easybuild-easyblocks/pull/360> `_ ) * make sure ``$LIBRARY_PATH`` is set for Intel compilers and Intel MPI, fix 64-bit specific paths ( `#360 <https://github.com/easybuilders/easybuild-easyblocks/pull/360> `_ ) **easyconfigs** * added example easyconfig files for **30** new software packages: * argtable ( `#669 <https://github.com/easybuilders/easybuild-easyconfigs/pull/669> `_ ), Clustal-Omega ( `#669 <https://github.com/easybuilders/easybuild-easyconfigs/pull/669> `_ ), Coreutils ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), GMT ( `#560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/560> `_ ), gperftools ( `#596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/596> `_ ), grep ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), h4toh5 ( `#597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/597> `_ ), libunwind ( `#596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/596> `_ ), Lmod ( `#600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/600> `_ , `#692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/692> `_ ), Lua ( `#600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/600> `_ , `#692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/692> `_ ), MAFFT ( `#654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/654> `_ ), Molekel ( `#597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/597> `_ ), NEdit ( `#597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/597> `_ ), netcdf4-python ( `#660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/660> `_ ), nodejs ( `#678 <https://github.com/easybuilders/easybuild-easyconfigs/pull/678> `_ ), OCaml ( `#704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/704> `_ ), patch ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), PhyML ( `#664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/664> `_ ), PRACE Common Production Environment ( `#599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/599> `_ ), protobuf ( `#680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/680> `_ ), python-dateutil ( `#438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/438> `_ ), sed ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), sickle ( `#651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/651> `_ ), Tesla-Deployment-Kit ( `#489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/489> `_ ), TREE-PUZZLE ( `#662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/662> `_ ), VCFtools ( `#626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/626> `_ ), Vim ( `#665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/665> `_ ), vsc-mympirun-scoop ( `#661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/661> `_ ), vsc-processcontrol ( `#661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/661> `_ ), XZ ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * OpenSSL with ictce toolchain ( `#703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/703> `_ ) * various enhancements, including: * using more constants and templates ( `#613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/613> `_ , `#615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/615> `_ ) * specify OS dependency for SSL support, with OpenSSL dependency as fallback ( `#703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/703> `_ ) * various bug fixes, including: * fix unit tests after (internal) framework API changes ( `#667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/667> `_ , `#672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/672> `_ ) * fix homepage in vsc-mympirun easyconfig file ( `#681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/681> `_ ) * align OpenMPI easyconfigs ( `#650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/650> `_ ) * add additional source URL in Qt easyconfigs ( `#676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/676> `_ ) * specify correct $PATH specification and define ``$CHPL_HOME`` for Chapel ( `#683 <https://github.com/easybuilders/easybuild-easyconfigs/pull/683> `_ ) EasyBuild v1.10.0 (December 24th 2013) -------------------------------------- feature + bugfix release **framework** * various enhancements, including: * set unique default temporary directory, add ``--tmpdir`` command line option ( `#695 <https://github.com/easybuilders/easybuild-framework/pull/695> `_ ) * add support for computing and verifying source/patch file checksums ( `#774 <https://github.com/easybuilders/easybuild-framework/pull/774> `_ , `#777 <https://github.com/easybuilders/easybuild-framework/pull/777> `_ , `#779 <https://github.com/easybuilders/easybuild-framework/pull/779> `_ , `#801 <https://github.com/easybuilders/easybuild-framework/pull/801> `_ , `#802 <https://github.com/easybuilders/easybuild-framework/pull/802> `_ ) * cfr. ``checksums`` easyconfig parameter * add support for `eb --confighelp`, which prints out an example configuration file (`#775 <https://github.com/easybuilders/easybuild-framework/pull/775> `_ ) * add initial support for ``eb`` tab completion in bash shells ( `#775 <https://github.com/easybuilders/easybuild-framework/pull/775> `_ , `#797 <https://github.com/easybuilders/easybuild-framework/pull/797> `_ , `#798 <https://github.com/easybuilders/easybuild-framework/pull/798> `_ ) * see also https://github.com/easybuilders/easybuild/wiki/Setting-up-tab-completion-for-bash * note: may be quite slow for now * enhancements for using Lmod as modules tool ( `#780 <https://github.com/easybuilders/easybuild-framework/pull/780> `_ , `#795 <https://github.com/easybuilders/easybuild-framework/pull/795> `_ , `#796 <https://github.com/easybuilders/easybuild-framework/pull/796> `_ ): * ignore Lmod spider cache by setting ``$LMOD_IGNORE_CACHE`` (requires Lmod 5.2) * bump required Lmod version to v5.2 * get rid of slow workaround for detecting module directories (only required for older Lmod versions) * fix version parsing for Lmod release candidates (rc) * improve integration with `lmod spider` by adding ``Description: `` prefix to ``module-whatis`` field of module * add ``--dry-short-short`` / ``-D`` and ``--search-short`` / ``-S`` command line options ( `#781 <https://github.com/easybuilders/easybuild-framework/pull/781> `_ ) * add toolchain definition for 'gompic', intended for using with CUDA-aware OpenMPI ( `#783 <https://github.com/easybuilders/easybuild-framework/pull/783> `_ ) * add support for specifying multiple robot paths ( `#786 <https://github.com/easybuilders/easybuild-framework/pull/786> `_ ) * add various source URL constants, add support for ``%(nameletter)s`` and ``%(nameletterlower)s`` templates ( `#793 <https://github.com/easybuilders/easybuild-framework/pull/793> `_ ) * add ``buildininstalldir`` easyconfig parameter ( `#794 <https://github.com/easybuilders/easybuild-framework/pull/794> `_ ) * add ``--ignore-osdeps`` command line option ( `#799 <https://github.com/easybuilders/easybuild-framework/pull/799> `_ , `#802 <https://github.com/easybuilders/easybuild-framework/pull/802> `_ ) * various bug fixes, including: * enable ``-mt_mpi`` compiler flag if both ``usempi`` and ``openmp`` toolchain options are enabled ( `#771 <https://github.com/easybuilders/easybuild-framework/pull/771> `_ ) * only use ``libmkl_solver*`` libraries for Intel MKL versions prior to 10.3 ( `#776 <https://github.com/easybuilders/easybuild-framework/pull/776> `_ ) * fix toolchain support for recent Intel tools ( `#785 <https://github.com/easybuilders/easybuild-framework/pull/785> `_ ) * code style fixes in ``main.py`` to adhere more to PEP8 ( `#789 <https://github.com/easybuilders/easybuild-framework/pull/789> `_ ) * make sure ``easyblock`` easyconfig parameter is listed in ``eb -a`` ( `#791 <https://github.com/easybuilders/easybuild-framework/pull/791> `_ ) * fix error that may pop up when using ``skipsteps=source`` ( `#792 <https://github.com/easybuilders/easybuild-framework/pull/792> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``VersionIndependendPythonPackage`` (`#329 <https://github.com/easybuilders/easybuild-easyblocks/pull/329> `_ , `#334 <https://github.com/easybuilders/easybuild-easyblocks/pull/334> `_ ) * added support for **2** new software packages that require customized support: * Charmm ( `#318 <https://github.com/easybuilders/easybuild-easyblocks/pull/318> `_ ), GROMACS ( `#335 <https://github.com/easybuilders/easybuild-easyblocks/pull/335> `_ , `#339 <https://github.com/easybuilders/easybuild-easyblocks/pull/339> `_ ) * various enhancements, including: * fix support for recent SAMtools version (>= 0.1.19) ( `#320 <https://github.com/easybuilders/easybuild-easyblocks/pull/320> `_ ) * fix support for recent Intel tools (icc, ifort, imkl, impi) ( `#325 <https://github.com/easybuilders/easybuild-easyblocks/pull/325> `_ , `#327 <https://github.com/easybuilders/easybuild-easyblocks/pull/327> `_ , `#338 <https://github.com/easybuilders/easybuild-easyblocks/pull/338> `_ ) * enhance generic easyblock for installing RPMs ( `#332 <https://github.com/easybuilders/easybuild-easyblocks/pull/332> `_ ) * pick up ``preinstallopts`` in generic ``PythonPackage`` easyblock ( `#334 <https://github.com/easybuilders/easybuild-easyblocks/pull/334> `_ ) * enhance CP2K easyblock (libxc support, new versions) + style cleanup ( `#336 <https://github.com/easybuilders/easybuild-easyblocks/pull/336> `_ ) * various bug fixes: * use unwanted env var functionality to unset ``$MKLROOT`` rather than failing with an error ( `#273 <https://github.com/easybuilders/easybuild-easyblocks/pull/273> `_ ) * always include ``-w`` flag for preprocessor to suppress warnings that may break QuantumESPRESSO configure ( `#317 <https://github.com/easybuilders/easybuild-easyblocks/pull/317> `_ ) * link with multithreaded LAPACK libs for ESMF ( `#319 <https://github.com/easybuilders/easybuild-easyblocks/pull/319> `_ ) * extend ``noqanda`` list of patterns in CUDA easyblock ( `#328 <https://github.com/easybuilders/easybuild-easyblocks/pull/328> `_ , `#337 <https://github.com/easybuilders/easybuild-easyblocks/pull/337> `_ ) * add ``import _ctypes`` to Python sanity check commands to capture a common build issue ( `#329 <https://github.com/easybuilders/easybuild-easyblocks/pull/329> `_ ) * bug fixes in generic ``IntelBase`` easyblock ( `#331 <https://github.com/easybuilders/easybuild-easyblocks/pull/331> `_ , `#333 <https://github.com/easybuilders/easybuild-easyblocks/pull/333> `_ , `#335 <https://github.com/easybuilders/easybuild-easyblocks/pull/335> `_ ) * remove broken symlink ``$HOME/intel`` if present * fix use of gettempdir to obtain a common (user-specific) tmp dir to symlink ``$HOME/intel`` to * fix build of recent scipy versions with GCC-based toolchain ( `#334 <https://github.com/easybuilders/easybuild-easyblocks/pull/334> `_ ) * fix use of gettempdir to obtain common (user-specific) tmp dir for ``$HOME/.nwchemrc`` symlink ( `#340 <https://github.com/easybuilders/easybuild-easyblocks/pull/340> `_ , `#342 <https://github.com/easybuilders/easybuild-easyblocks/pull/342> `_ ) * extend ``noqanda`` list in Qt easyblock ( `#342 <https://github.com/easybuilders/easybuild-easyblocks/pull/342> `_ ) **easyconfigs** * added example easyconfig files for **18** new software packages: * BEDTools ( `#579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/579> `_ , `#632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/632> `_ , `#635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/635> `_ ), CAP3 ( `#548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/548> `_ ), CHARMM ( `#584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/584> `_ ), cutadapt ( `#620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/620> `_ ), ErlangOTP ( `#556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/556> `_ , `#630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/630> `_ ), Ghostscript ( `#547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/547> `_ , `#632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/632> `_ ), HTSeq ( `#554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/554> `_ , `#632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/632> `_ ), Jansson ( `#545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/545> `_ ), libjpeg-turbo ( `#574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/574> `_ ), Molden ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ), netloc ( `#545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/545> `_ ), o2scl ( `#633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/633> `_ ), packmol ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ), PP ( `#405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/405> `_ ), qtop ( `#500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/500> `_ ), TAMkin ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ), vsc-base ( `#621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/621> `_ ), vsc-mympirun ( `#621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/621> `_ ) * added easyconfigs for new toolchains ( `#545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/545> `_ , `#609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/609> `_ , `#629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/629> `_ ): * gcccuda/2.6.10, gompic/2.6.10, goolfc/2.6.10, ictce/6.0.5, ictce/6.1.5 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * new versions of icc, ifort, imkl, impi ( `#609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/609> `_ , `#629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/629> `_ ) * large collection of ictce/5.3.0 easyconfigs ( `#627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/627> `_ ) * various enhancements, including: * extended list of Python packages as extensions to Python ( `#625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/625> `_ ) * add MPI-enabled version of GROMACS + easyconfigs using ictce ( `#606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/606> `_ , `#636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/636> `_ ) * clean up templating of ``source_urls`` ( `#637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/637> `_ ) * various bug fixes, including: * provide alternative download URL for Mesa ( `#532 <https://github.com/easybuilders/easybuild-easyconfigs/pull/532> `_ ) * add Python versionsuffix in OpenBabel filenames ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ) * apply no-gets patch in all M4 v1.4.16 easyconfigs ( `#623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/623> `_ ) * fix patching of Python w.r.t. ``libffi`` / ``_ctypes`` issues ( `#625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/625> `_ , `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * bug fixes in GROMACS easyconfigs ( `#606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/606> `_ ) * change versionsuffix for non-MPI GROMACS easyconfigs to ``-mt`` * stop using 'CMakeMake' easyblock for GROMACS now that there's a dedicated GROMACS easyblock, which correctly specifies building against external BLAS/LAPACK libraries * fix Qt dependency for CGAL ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * fix libctl, libmatheval, Meep, PSI build issues caused by full paths in ``guile-config`` / ``python-config`` shebang ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * make sure HDF easyconfigs specify dedicated ``include/hdf`` include dir ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * this is required to avoid build issues with NCL, because HDF ships it's own ``netcdf.h`` * this also triggered removal of patch files for NCL that rewrote ``include/hdf`` to ``include`` * fix WPS v3.5.1 patch file after upstream source tarball was changed, supply checksum for verification ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) EasyBuild v1.9.0 (November 17th 2013) ------------------------------------- feature + bugfix release **framework** * add support for Tcl environment modules ( ``modulecmd.tcl`` ) ( `#728 <https://github.com/easybuilders/easybuild-framework/pull/728> `_ , `#729 <https://github.com/easybuilders/easybuild-framework/pull/729> `_ , `#739 <https://github.com/easybuilders/easybuild-framework/pull/739> `_ ) * special care was taken to make sure also the DEISA variant of ``modulecmd.tcl`` can be used * code refactoring to prepare for supporting two formats for easyconfig files ( `#693 <https://github.com/easybuilders/easybuild-framework/pull/693> `_ , `#750 <https://github.com/easybuilders/easybuild-framework/pull/750> `_ ) * this prepares the codebase for supporting easyconfig format v2.0 * some initial work on adding support for the new easyconfig format is included, but it's by no means complete yet * the current easyconfig format (now dubbed v1.0) is still the default and only supported format, for now * for more details, see https://github.com/easybuilders/easybuild/wiki/Easyconfig-format-two * various other enhancements, including: * include a full version of vsc-base (see the ``vsc`` subdirectory) ( `#740 <https://github.com/easybuilders/easybuild-framework/pull/740> `_ ) * this is a first step towards switching to using vsc-base as a proper dependency * implement get_avail_core_count function in systemtools module that takes cpusets and co into account ( `#700 <https://github.com/easybuilders/easybuild-framework/pull/700> `_ ) * the ``get_core_count`` function is now deprecated * add ``impmkl`` toolchain definition ( `#736 <https://github.com/easybuilders/easybuild-framework/pull/736> `_ ) * make regtest more robust: put holds on jobs without dependencies, release holds once all jobs are submitted ( `#751 <https://github.com/easybuilders/easybuild-framework/pull/751> `_ ) * add support for specifying multiple alternatives for sanity check paths ( `#753 <https://github.com/easybuilders/easybuild-framework/pull/753> `_ ) * add ``get_software_libdir`` function to modules.py (along with unit tests) ( `#758 <https://github.com/easybuilders/easybuild-framework/pull/758> `_ ) * add support for more file extensions and constants w.r.t. sources ( `#738 <https://github.com/easybuilders/easybuild-framework/pull/738> `_ , `#760 <https://github.com/easybuilders/easybuild-framework/pull/760> `_ , `#761 <https://github.com/easybuilders/easybuild-framework/pull/761> `_ ) * add MPICH2 support in ``mpi_cmd_for`` function ( `#761 <https://github.com/easybuilders/easybuild-framework/pull/761> `_ ) * various bug fixes, including: * fix checking of OS dependencies on Debian/Ubuntu that have ``rpm`` command available ( `#732 <https://github.com/easybuilders/easybuild-framework/pull/732> `_ ) * make unit tests more robust w.r.t. non-writeable ``/tmp`` and loaded modules prior to starting unit tests ( `#752 <https://github.com/easybuilders/easybuild-framework/pull/752> `_ , `#756 <https://github.com/easybuilders/easybuild-framework/pull/756> `_ ) * also call ``EasyBlock`` 's sanity check in ``ExtensionEasyblock`` if paths/commands are specified in easyconfig ( `#757 <https://github.com/easybuilders/easybuild-framework/pull/757> `_ ) * set compiler family for dummy compiler, add definition of toolchain constant for dummy ( `#759 <https://github.com/easybuilders/easybuild-framework/pull/759> `_ ) * other * add build status badges for master/develop branches to ``README`` ( `#742 <https://github.com/easybuilders/easybuild-framework/pull/742> `_ ) * add scripts for installing EasyBuild develop version or setting up git development environment ( `#730 <https://github.com/easybuilders/easybuild-framework/pull/730> `_ , `#755 <https://github.com/easybuilders/easybuild-framework/pull/755> `_ ) **easyblocks** * added support for **8** new software packages that require customized support: * Allinea DDT/MAP ( `#279 <https://github.com/easybuilders/easybuild-easyblocks/pull/279> `_ ), ARB ( `#291 <https://github.com/easybuilders/easybuild-easyblocks/pull/291> `_ ), GenomeAnalysisTK ( `#278 <https://github.com/easybuilders/easybuild-easyblocks/pull/278> `_ ), OpenBabel ( `#305 <https://github.com/easybuilders/easybuild-easyblocks/pull/305> `_ , `#309 <https://github.com/easybuilders/easybuild-easyblocks/pull/309> `_ ), picard ( `#278 <https://github.com/easybuilders/easybuild-easyblocks/pull/278> `_ ), PyQuante ( `#297 <https://github.com/easybuilders/easybuild-easyblocks/pull/297> `_ ), Scalasca v1.x ( `#304 <https://github.com/easybuilders/easybuild-easyblocks/pull/304> `_ ), Score-P ( `#304 <https://github.com/easybuilders/easybuild-easyblocks/pull/304> `_ ) * the Score-P easyblock is also used for Cube 4.x, LWM2, OTF2, and Scalasca v2.x * various enhancements, including: * add support building ScaLAPACK on top of MPICH2, required for gmpolf toolchain ( `#274 <https://github.com/easybuilders/easybuild-easyblocks/pull/274> `_ ) * add support to ConfigureMake easyblock to customize configure ``--prefix`` option ( `#287 <https://github.com/easybuilders/easybuild-easyblocks/pull/287> `_ ) * add support for specifying install command in Binary easyblock ( `#288 <https://github.com/easybuilders/easybuild-easyblocks/pull/288> `_ ) * enhance CMakeMake easyblock to specify srcdir via easyconfig parameter, and to perform out-of-source builds ( `#303 <https://github.com/easybuilders/easybuild-easyblocks/pull/303> `_ ) * various bug fixes: * use correct configure flag for Szip in HDF5 easyblocks, should be ``--with-szlib`` ( `#286 <https://github.com/easybuilders/easybuild-easyblocks/pull/286> `_ , `#301 <https://github.com/easybuilders/easybuild-easyblocks/pull/301> `_ ) * add support for serial HDF5 builds ( `#290 <https://github.com/easybuilders/easybuild-easyblocks/pull/290> `_ , `#301 <https://github.com/easybuilders/easybuild-easyblocks/pull/301> `_ ) * enhance robustness of Qt easyblock w.r.t. interactive configure ( `#295 <https://github.com/easybuilders/easybuild-easyblocks/pull/295> `_ , `#302 <https://github.com/easybuilders/easybuild-easyblocks/pull/302> `_ ) * enhance support for picking up license specification via environment variables ( `#298 <https://github.com/easybuilders/easybuild-easyblocks/pull/298> `_ , `#307 <https://github.com/easybuilders/easybuild-easyblocks/pull/307> `_ ) * extend list of values for ``$CPATH`` in libint2 easyblock ( `#300 <https://github.com/easybuilders/easybuild-easyblocks/pull/300> `_ ) * fix ``extra_options`` ``super`` call in Clang easyblock ( `#306 <https://github.com/easybuilders/easybuild-easyblocks/pull/306> `_ ) * add support in Boost easyblock to specify toolset in easyconfig file ( `#308 <https://github.com/easybuilders/easybuild-easyblocks/pull/308> `_ ) * other: * add build status badges for master/develop branches to README ( `#289 <https://github.com/easybuilders/easybuild-easyblocks/pull/289> `_ ) **easyconfigs** * added example easyconfig files for **58** new software packages: * Allinea ( `#468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/468> `_ ), ARB + dependencies ( `#396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/396> `_ , `#493 <https://github.com/easybuilders/easybuild-easyconfigs/pull/493> `_ , `#495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/495> `_ ), arpack-ng ( `#451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/451> `_ , `#481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/481> `_ ), CDO ( `#484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/484> `_ , `#521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/521> `_ ), Cube ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), ed ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), FLTK ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), GenomeAnalysisTK ( `#467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/467> `_ ), GIMPS ( `#527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/527> `_ ), GTI ( `#511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/511> `_ ), IPython ( `#485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/485> `_ , `#519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/519> `_ ), LWM2 ( `#510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/510> `_ ), MPICH2 ( `#460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/460> `_ ), MUST ( `#511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/511> `_ ), ncdf ( `#496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/496> `_ , `#522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/522> `_ ), OPARI2 ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), OpenBabel ( `#504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/504> `_ , `#524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/524> `_ ), OTF ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), OTF2 ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), PandaSEQ ( `#475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/475> `_ ), ParaView ( `#498 <https://github.com/easybuilders/easybuild-easyconfigs/pull/498> `_ , `#514 <https://github.com/easybuilders/easybuild-easyconfigs/pull/514> `_ ), ParFlow ( `#483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/483> `_ , `#520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/520> `_ ), PCC ( `#486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/486> `_ , `#528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/528> `_ ), PDT ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), picard ( `#467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/467> `_ ), PnMPI ( `#511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/511> `_ ), PyQuante ( `#499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/499> `_ , `#523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/523> `_ ), pysqlite ( `#519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/519> `_ ), Scalasca ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), Score-P ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), SDCC ( `#486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/486> `_ , `#528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/528> `_ ), Silo ( `#483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/483> `_ , `#520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/520> `_ ), Stride ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), SURF ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), TCC ( `#486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/486> `_ , `#528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/528> `_ ) * ARB dependencies (23): fixesproto, imake, inputproto, kbproto, libICE, libSM, libX11, libXau, libXaw, libXext, libXfixes, libXi, libXmu, libXp, libXpm, libXt, lynx, motif, printproto, Sablotron, xbitmaps, xextproto, xtrans * added easyconfigs for new gmpich2/1.4.8, gmpolf/1.4.8 and goolf/1.6.10 toolchains ( `#460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/460> `_ , `#525 <https://github.com/easybuilders/easybuild-easyconfigs/pull/525> `_ , `#530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/530> `_ ) * added additional easyconfigs for various software packages (list too long to include here) * version updates, different toolchains, ... * various bug fixes, including: * enable building of shared libraries for MPICH ( `#482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/482> `_ ) * fix HDF configure option for Szip, should be ``--with-szlib`` ( `#533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/533> `_ ) * for HDF5, this issue is fixed in the HDF5 easyblock * other * add build status badges for master/develop branches to README ( `#490 <https://github.com/easybuilders/easybuild-easyconfigs/pull/490> `_ ) EasyBuild v1.8.2 (October 18th 2013) ------------------------------------ bugfix release **framework** * fix regular expression used for obtaining list of modules from ``module avail`` ( `#724 <https://github.com/easybuilders/easybuild-framework/pull/724> `_ ) * modules marked as default were being hidden from EasyBuild, causing problems when they are used as dependency **easyblocks** * fix installing of EasyBuild with a loaded EasyBuild module ( `#280 <https://github.com/easybuilders/easybuild-easyblocks/pull/280> `_ ) * this is important to make upgrading to the latest EasyBuild version possible with a bootstrapped EasyBuild **easyconfigs** * port thread pool patch to PSI 4.0b4 and include it to avoid hanging tests ( `#471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/471> `_ ) EasyBuild v1.8.1 (October 14th 2013) ------------------------------------ bugfix release * various bug fixes, including: * fix bugs in regtest procedure ( `#713 <https://github.com/easybuilders/easybuild-framework/pull/713> `_ ) * force 2nd and 3rd attempt of build in case 1st attempt failed * fix copying of install log to install directory ( `#716 <https://github.com/easybuilders/easybuild-framework/pull/716> `_ ) * only create first source path if multiple paths are specified ( `#718 <https://github.com/easybuilders/easybuild-framework/pull/718> `_ ) * detect failed PBS job submission by checking obtained job ID for ``None`` value ( `#713 <https://github.com/easybuilders/easybuild-framework/pull/713> `_ , `#717 <https://github.com/easybuilders/easybuild-framework/pull/717> `_ , `#719 <https://github.com/easybuilders/easybuild-framework/pull/719> `_ , `#720 <https://github.com/easybuilders/easybuild-framework/pull/720> `_ ) **easyblocks** * various bug fixes: * fix problems in PSI easyblock causing build to fail ( `#270 <https://github.com/easybuilders/easybuild-easyblocks/pull/270> `_ ) * fix issues with running NWChem test cases, fail early in case broken symlink is present ( `#275 <https://github.com/easybuilders/easybuild-easyblocks/pull/275> `_ ) **easyconfigs** * added additional easyconfigs for various software packages ( `#457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/457> `_ ): * Boost, bzip2, libreadline, ncurses, PSI, Python, zlib * various bug fixes, including: * fix faulty easyconfig file names for HPCBIOS_Math, MUSCLE, XML-LibXML and YAML-Syck ( `#459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/459> `_ , `#462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/462> `_ ) * stop (re)specifying default maximum ratio for failed tests in NWChem easyconfig ( `#457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/457> `_ ) EasyBuild v1.8.0 (October 4th 2013) ----------------------------------- feature + bugfix release **framework** * add support for using alternative module naming schemes ( `#679 <https://github.com/easybuilders/easybuild-framework/pull/679> `_ , `#696 <https://github.com/easybuilders/easybuild-framework/pull/696> `_ , `#705 <https://github.com/easybuilders/easybuild-framework/pull/705> `_ , `#706 <https://github.com/easybuilders/easybuild-framework/pull/706> `_ , `#707 <https://github.com/easybuilders/easybuild-framework/pull/707> `_ ) * see https://github.com/easybuilders/easybuild/wiki/Using-a-custom-module-naming-scheme for documentation * module naming scheme classes that derive from the 'abstract' ``ModuleNamingScheme`` class can be provided to EasyBuild * the Python module providing the class must be available in the ``easybuild.tools.module_naming_scheme`` namespace * a function named ``det_full_module_name`` must be implemented, that determines the module name in the form of an string based on the supplied dictionary(-like) argument * the active module naming scheme is determined by EasyBuild configuration option ``--module-naming-scheme`` * for now, only the ``name`` / ``version`` / ``versionsuffix`` / ``toolchain`` easyconfig parameters are guaranteed to be provided * consistently providing all easyconfig parameters (i.e., also for dependencies) requires more work (see `#687 <https://github.com/easybuilders/easybuild-framework/pull/687> `_ ) * implementing this involved a number of intrusive changes: * the API of the modules.py module needed to be changed, breaking backward compatibility * the function for which the signatures were modified are considered to be internal to the framework, so this should have very minor impact w.r.t. easyblocks not included with EasyBuild * affected functions include: ``available`` , ``exists`` , ``show`` , ``modulefile_path`` , ``dependencies_for`` * the format for specifying dependencies was extended, to allow for specifying a custom toolchain * this allows to fix inaccurate dependency specifications, for example: ``('OpenMPI', '1.6.4-GCC-4.7.2')\" to \"('OpenMPI', '1.6.4', '', ('GCC', '4.7.2'))`` * see also `easyconfigs#431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/431> `_ * the recommended version for Lmod was bumped to v5.1.5 * using earlier 5.x version still works, but may be very slow when 'available' is used, due to bugs and a missing feature in Lmod versions prior to v5.1.5 on which we rely * various other enhancements, including: * only (try to) change group id if it is different from what is wanted ( `#685 <https://github.com/easybuilders/easybuild-framework/pull/685> `_ ) * added toy build unit test ( `#688 <https://github.com/easybuilders/easybuild-framework/pull/688> `_ ) * support for specifying a list of source paths in EasyBuild configuration ( `#690 <https://github.com/easybuilders/easybuild-framework/pull/690> `_ , `#702 <https://github.com/easybuilders/easybuild-framework/pull/702> `_ ) * add function to determine CPU clock speed in ``systemtools.py`` ( `#694 <https://github.com/easybuilders/easybuild-framework/pull/694> `_ , `#699 <https://github.com/easybuilders/easybuild-framework/pull/699> `_ ) * various bug fixes, including: * avoid importing toolchain modules over and over again to make toolchain constants available in toolchain module ( `#679 <https://github.com/easybuilders/easybuild-framework/pull/679>` ) * only change the group id if current gid is different from what we want in ``adjust_permissions`` function ( `#685 <https://github.com/easybuilders/easybuild-framework/pull/685>` ) * restore original environment after running 'module purge' ( `#698 <https://github.com/easybuilders/easybuild-framework/pull/698>` ) * important sidenote: this results in resetting the entire environment, and has impact on the sanity check step; * any environment variables that are set before the EasyBlock.sanity_check_step method fires, are no longer there when the sanity check commands are run (cfr. `easyblocks#268 <https://github.com/easybuilders/easybuild-easyblocks/pull/268> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``BinariesTarball`` (`#255 <https://github.com/easybuilders/easybuild-easyblocks/pull/255> `_ ) * added support for **5** new software packages that require customized support: * DB ( `#226 <https://github.com/easybuilders/easybuild-easyblocks/pull/226> `_ ), FDTD Solutions ( `#239 <https://github.com/easybuilders/easybuild-easyblocks/pull/239> `_ ), FoldX ( `#256 <https://github.com/easybuilders/easybuild-easyblocks/pull/256> `_ ), Mathematica ( `#240 <https://github.com/easybuilders/easybuild-easyblocks/pull/240> `_ ), MUMPS ( `#262 <https://github.com/easybuilders/easybuild-easyblocks/pull/262> `_ ) * various enhancements, including: * support optionally running configure in generic ``MakeCp`` easyblock ( `#252 <https://github.com/easybuilders/easybuild-easyblocks/pull/252> `_ ) * enhanced Clang easyblock to support building Clang 3.3 ( `#248 <https://github.com/easybuilders/easybuild-easyblocks/pull/248> `_ ) * add support for ``$INTEL_LICENSE_FILE`` specifying multiple paths ( `#251 <https://github.com/easybuilders/easybuild-easyblocks/pull/251> `_ ) * enhanced ATLAS easyblock to support building ATLAS 3.10.1 ( `#258 <https://github.com/easybuilders/easybuild-easyblocks/pull/258> `_ ) * various bug fixes: * add zlib lib dir in link path dirs for WPS ( `#249 <https://github.com/easybuilders/easybuild-easyblocks/pull/249> `_ ) * stop using deprecated ``add_module`` function in imkl easyblock ( `#250 <https://github.com/easybuilders/easybuild-easyblocks/pull/250> `_ ) * fixed PSI easyblock w.r.t. support for building plugins ( `#254 <https://github.com/easybuilders/easybuild-easyblocks/pull/254> `_ , `#269 <https://github.com/easybuilders/easybuild-easyblocks/pull/269> `_ ) * move OS check for Clang to ``check_readiness_step`` , to allow a build job to be submitted from SL5 ( `#263 <https://github.com/easybuilders/easybuild-easyblocks/pull/263> `_ , `#264 <https://github.com/easybuilders/easybuild-easyblocks/pull/264> `_ ) * enable verbose build for DOLFIN, to allow for proper debugging if the build fails ( `#265 <https://github.com/easybuilders/easybuild-easyblocks/pull/265> `_ ) * make sure ``$LDFLAGS`` and ``$INSTANT_*_DIR`` env vars are set for DOLFIN sanity check commands ( `#268 <https://github.com/easybuilders/easybuild-easyblocks/pull/268> `_ ) * this is required after resetting the environment after running module purge (see framework release notes) * don't try to load module in LAPACK test-only build ( `#264 <https://github.com/easybuilders/easybuild-easyblocks/pull/264> `_ , `#266 <https://github.com/easybuilders/easybuild-easyblocks/pull/266> `_ ) **easyconfigs** * added example easyconfig files for **9** new software packages: * BOINC ( `#436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/436> `_ ), DB ( `#343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/343> `_ , `#449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/449> `_ ), fastahack ( `#374 <https://github.com/easybuilders/easybuild-easyconfigs/pull/374> `_ ), FDTD Solutions ( `#387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/387> `_ ), FoldX ( `#440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/440> `_ , `#442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/442> `_ ), Mathematica ( `#394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/394> `_ ), Mesquite ( `#447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/447> `_ ), MUMPS ( `#447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/447> `_ ), ParMGridGen ( `#447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/447> `_ ) * added additional easyconfigs for goalf, gompi, ClangGCC, cgmvapich2, cgmvolf toolchains ( `#350 <https://github.com/easybuilders/easybuild-easyconfigs/pull/350> `_ , `#441 <https://github.com/easybuilders/easybuild-easyconfigs/pull/441> `_ ) * added additional easyconfigs for various software packages: * ATLAS, Bison, bzip2, Clang, CMake, cURL, EasyBuild, expat, FFTW, GDB, gettext, git, HPL, LAPACK, libreadline, M4, METIS, MVAPICH2, Mercurial, ncurses, OpenBLAS, OpenMPI, ParMETIS, Python, ScaLAPACK, SCOTCH, Valgrind, zlib * various 'bug' fixes, including: * fix source URL for lockfile in Python easyconfigs ( `#428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/428> `_ ) * correct dependency specifications w.r.t. versionsuffix and toolchain ( `#431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/431> `_ ) * this is required to support building the affected easyconfigs with a custom module naming scheme * correct PSI patch file to avoid errors w.r.t. memcpy not being in scope ( `#446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/446> `_ ) * fix gettext build with adding ``--without-emacs`` configure options, add gettext as dependency for a2ps ( `#448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/448> `_ ) * exclude EMACS support in a2ps because of build failures ( `#452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/452> `_ ) EasyBuild v1.7.0 (September 2nd 2013) ------------------------------------- feature + bugfix release **framework** * various enhancements, including: * also search for patch files in directory where easyconfig file is located ( `#667 <https://github.com/easybuilders/easybuild-framework/pull/667> `_ ) * reduce false positives in reporting of possible errors messages ( `#669 <https://github.com/easybuilders/easybuild-framework/pull/669> `_ ) * make module update ``$ACLOCAL`` if a share/aclocal subdir is found ( `#670 <https://github.com/easybuilders/easybuild-framework/pull/670> `_ ) * add ``unwanted_env_vars`` easyconfig parameter to list environment variables to unset during install procedure ( `#673 <https://github.com/easybuilders/easybuild-framework/pull/673> `_ ) * add support for updating list easyconfig values (next to string values) ( `#676 <https://github.com/easybuilders/easybuild-framework/pull/676> `_ ) * add ``--dry-run`` command line option which prints installation overview for specified easyconfig files ( `#677 <https://github.com/easybuilders/easybuild-framework/pull/677> `_ ) * various bug fixes, including: * ensure that all extensions are listed in ``$EBEXTSLISTX`` set by module, also when using ``--skip`` ( `#671 <https://github.com/easybuilders/easybuild-framework/pull/671> `_ ) * report reason for failed sanity check for extensions ( `#672 <https://github.com/easybuilders/easybuild-framework/pull/672> `_ , `#678 <https://github.com/easybuilders/easybuild-framework/pull/678> `_ ) * fix ``--list-toolchains`` command line option ( `#675 <https://github.com/easybuilders/easybuild-framework/pull/675> `_ ) **easyblocks** * added support for **3** new software packages that require customized support: * Libint2 ( `#236 <https://github.com/easybuilders/easybuild-easyblocks/pull/236> `_ ), Qt ( `#210 <https://github.com/easybuilders/easybuild-easyblocks/pull/210> `_ ), Rosetta ( `#218 <https://github.com/easybuilders/easybuild-easyblocks/pull/218> `_ ) * various enhancements, including: * allow building OpenFOAM without 3rd party tools ( `#230 <https://github.com/easybuilders/easybuild-easyblocks/pull/230> `_ ) * also add sitelib path to ``$PERL5LIB`` , refactor code to add generic ``get_site_suffix`` function ( `#232 <https://github.com/easybuilders/easybuild-easyblocks/pull/232> `_ , `#233 <https://github.com/easybuilders/easybuild-easyblocks/pull/233> `_ ) * support building imkl FFT wrappers using MVAPICH2 MPI library ( `#234 <https://github.com/easybuilders/easybuild-easyblocks/pull/234> `_ ) * remove libnpp from CUDA sanity check to support installing CUDA v5.5 ( `#238 <https://github.com/easybuilders/easybuild-easyblocks/pull/238> `_ ) * pick up ``$INTEL_LICENSE_FILE`` for Intel tools, if it is set ( `#243 <https://github.com/easybuilders/easybuild-easyblocks/pull/243> `_ ) * note: gets preference over ``license_file`` easyconfig parameter * various bug fixes: * call WRF build script with ' ``tcsh <script>`` to ensure that tcsh available in ``$PATH`` is used ( `#231 <https://github.com/easybuilders/easybuild-easyblocks/pull/231> `_ ) * make sure some environment variables that may disrupt the GCC install procedure are unset ( `#237 <https://github.com/easybuilders/easybuild-easyblocks/pull/237> `_ ) * e.g., ``$CPATH`` , ``$C_INCLUDE_PATH`` , ``$CPLUS_INCLUDE_PATH`` , ``$OBJC_INCLUDE_PATH`` , ``$LIBRARY_PATH`` * code cleanup in GEANT4 easyblock: use ``self.version`` (instead of ``self.get_installversion()`` ) ( `#242 <https://github.com/easybuilders/easybuild-easyblocks/pull/242> `_ ) * enhance list of ``noqanda`` patterns for CUDA, to get less failing installations ( `#244 <https://github.com/easybuilders/easybuild-easyblocks/pull/244> `_ ) **easyconfigs** * added example easyconfig files for **15** new software packages: * Glib ( `#294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/294> `_ , `#400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/400> `_ ), GLPK ( `#400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/400> `_ ), horton ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), libint2 ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), molmod ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), Rosetta ( `#336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/336> `_ ), SCons ( `#336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/336> `_ ), Stacks ( `#367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/367> `_ , `#377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/377> `_ ), sympy ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), Qt ( `#294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/294> `_ ), XML-LibXML ( `#397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/397> `_ ), XML-Simple ( `#397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/397> `_ ), yaff ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), YAML-Syck ( `#380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/380> `_ ), zsh ( `#376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/376> `_ ) * added additional easyconfigs for various software packages: * BLAST, BamTools, BioPerl, Bison, Boost, bzip2, CMake, Cython, CUDA, FFTW, FIAT, GCC, GMP, gettext, git, h5py, HDF5, libffi, libreadline, libxc, matplotlib, METIS, ncurses, Oases, Python, RAxML, ScientificPython, Szip, tcsh, imkl, MVAPICH2, TotalView, VTune, WRF, zlib * added toolchain easyconfig files for HPCBIOS policies ( `#402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/402> `_ , `#407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/407> `_ ) * HPCBIOS_BioInfo, HPCBIOS_Debuggers, HPCBIOS_LifeSciences, HPCBIOS_Math, HPCBIOS_Profilers * various enhancements, including: * added more XML Perl modules to non-bare Perl easyconfigs ( `#375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/375> `_ ) * various 'bug' fixes, including: * fix website/description in scipy easyconfigs ( `#399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/399> `_ ) * specify OpenMPI libibverbs-dev(el) OS dependency in an OS-dependent way ( `#403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/403> `_ ) * add patch file for M4 to fix building on systems with recent glibc (>=2.16) ( `#406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/406> `_ ) * align moduleclass in R easyconfigs ( `#411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/411> `_ ) * fixed filename of Biopython/CD-HIT easyconfig files ( `#407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/407> `_ ) * disable parallel building of otcl ( `#419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/419> `_ ) EasyBuild v1.6.0 (July 11th 2013) --------------------------------- feature + bugfix release **framework** * added support for using Lmod as module tool ( `#645 <https://github.com/easybuilders/easybuild-framework/pull/645> `_ ) * various other enhancements, including: * allow prepending to/appending to/overwriting list easyconfig parameters using ``--try-amend-X`` ( `#658 <https://github.com/easybuilders/easybuild-framework/pull/658> `_ , `#664 <https://github.com/easybuilders/easybuild-framework/pull/664> `_ ) * various bug fixes, including: * add salt to temporary log file name ( `#656 <https://github.com/easybuilders/easybuild-framework/pull/656> `_ , `#665 <https://github.com/easybuilders/easybuild-framework/pull/665> `_ ) * fix determining CPU architecture on Raspberry Pi (ARM) systems ( `#655 <https://github.com/easybuilders/easybuild-framework/pull/655> `_ , `#662 <https://github.com/easybuilders/easybuild-framework/pull/662> `_ ) * fix support for determining base path of tarballs containing a single file ( `#660 <https://github.com/easybuilders/easybuild-framework/pull/660> `_ ) **easyblocks** * added support for **2** new software packages that require customized support: * BamTools ( `#224 <https://github.com/easybuilders/easybuild-easyblocks/pull/224> `_ ), BLAT ( `#214 <https://github.com/easybuilders/easybuild-easyblocks/pull/214> `_ ) * various enhancements, including: * update impi easyblock to allow installing impi v4.1.1, which features a slight change in build procedure ( `#217 <https://github.com/easybuilders/easybuild-easyblocks/pull/217> `_ ) * enhance ``PackedBinary`` easyblock to copy both files and directories ( `#212 <https://github.com/easybuilders/easybuild-easyblocks/pull/212> `_ ) * added get ``sitearch_suffix`` to Perl search path and use it in ``PerlModule`` easyblock ( `#209 <https://github.com/easybuilders/easybuild-easyblocks/pull/209> `_ ) * various bug fixes: * make sure EasyBuild configuration is initialized when running unit tests ( `#220 <https://github.com/easybuilders/easybuild-easyblocks/pull/220> `_ ) * make Boost easyblock pick up configopts easyconfig parameter ( `#221 <https://github.com/easybuilders/easybuild-easyblocks/pull/221> `_ ) * add ``-DMPICH_IGNORE_CXX_SEEK`` compiler flag for Mothur when MPI support is enabled ( `#222 <https://github.com/easybuilders/easybuild-easyblocks/pull/222> `_ ) * fix Boost sanity check, only check for ``libboost_python.so`` if Python module is loaded ( `#223 <https://github.com/easybuilders/easybuild-easyblocks/pull/223> `_ ) * enhance Trinity support w.r.t. jellyfish ( `#225 <https://github.com/easybuilders/easybuild-easyblocks/pull/225> `_ , `#227 <https://github.com/easybuilders/easybuild-easyblocks/pull/227> `_ ) * fix checking for ``beagle-lib`` dep (deprecate checking for BEAGLE) for MrBayes ( `#228 <https://github.com/easybuilders/easybuild-easyblocks/pull/228> `_ ) **easyconfigs** * added example easyconfig files for **26** new software packages: * ALLPATHS-LG ( `#359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/359> `_ ), AutoMake ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), BamTools ( `#319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/319> `_ , `#338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/338> `_ ), BLAT ( `#340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/340> `_ ), Biopython ( `#356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/356> `_ ), cairo ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), CCfits ( `#327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/327> `_ ), CD-HIT ( `#344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/344> `_ ), CFITSIO ( `#327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/327> `_ ), Diffutils ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), FASTA ( `#358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/358> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), findutils ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), fontconfig ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), gawk ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), gettext ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), GLIMMER ( `#357 <https://github.com/easybuilders/easybuild-easyconfigs/pull/357> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), libidn ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), LibTIFF ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), libungif ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), make ( `#355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/355> `_ ), MUSCLE ( `#339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/339> `_ ), Oases ( `#354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/354> `_ ), pixman ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), PLINK ( `#352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/352> `_ ), RCS ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), SQLite ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ) * added additional easyconfigs for various software packages: * ant, Bash, Bison, bzip2, cURL, expat, GCC, EasyBuild, freetype, FFTW, GDB, git, HMMER, JUnit, libreadline, libpng, libtool, libxml2, libxslt, M4, makedepend, Mothur, MVAPICH2, Mercurial, ncurses, OpenBLAS, Python, ScaLAPACK, Tcl, tcsh, TopHat, Trinity, Valgrind, Velvet, VTune, zlib (see `#169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/169> `_ , `#297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/297> `_ , `#298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/298> `_ , `#301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/301> `_ , `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ , `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ , `#331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/331> `_ , `#332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/332> `_ , `#341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/341> `_ , `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ , `#349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/349> `_ , `#351 <https://github.com/easybuilders/easybuild-easyconfigs/pull/351> `_ , `#355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/355> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ) * various enhancements, including: * added easyconfigs for ``ictce/5.4.0`` , ``ictce/5.5.0`` and ``gmvolf/1.7.12`` toolchain modules ( `#297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/297> `_ , `#332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/332> `_ , `#349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/349> `_ ) * added a template sanity_check_paths as 'MUST' in TEMPLATE.eb ( `#329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/329> `_ ) * introduced biodeps 'toolchain' to ease keeping common dependencies for bio* software in sync ( `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ ) * added collection of easyconfigs for ictce/5.3.0 ( `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ , `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ ) * bam2fastq, bbFTP, BLAST, Boost, DL_POLY Classic, EMBOSS, FFTW, libharu, libxml2, libxslt, libyaml, lxml, Mercurial, Mothur, mpi4py, ncurses, ns, orthomcl, otcl, PAML, Perl, PyYAML, pandas, problog, scikit-learn, TiCCutils, TiMBL, TinySVM, TopHat, tclcl, YamCha * added missing dependencies for various software packages ( `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ , `#328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/328> `_ , `#348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/348> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ) * style fixes in various easyconfigs ( `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ , `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ , `#345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/345> `_ , `#349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/349> `_ , `#355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/355> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ) * various 'bug' fixes, including: * added ``pic`` toolchain option for Perl goolf easyconfig ( `#299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/299> `_ ) * fixed source URLs for R (use correct template ``%(version_major)s`` ) ( `#302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/302> `_ ) * synced libreadline easyconfigs w.r.t. ncurses dependency ( `#303 <https://github.com/easybuilders/easybuild-easyconfigs/pull/303> `_ ) * make sure EasyBuild configuration is initialized when running unit tests ( `#334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/334> `_ ) * specify ``lowopt`` (-O1) optimization level for OpenIFS, to avoid floating-point related issues ( `#328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/328> `_ ) * fix naming of 'beagle-lib' (used to be 'BEAGLE'), to avoid name clashes with other software package(s) ( `#346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/346> `_ ) EasyBuild v1.5.0 (June 1st 2013) -------------------------------- feature + bugfix release **framework** * various enhancements, including: * define ``SHLIB_EXT`` constant for shared library extension ( ``.so`` , ``.dylib`` ), deprecate ``shared_lib_ext`` global var ( `#630 <https://github.com/easybuilders/easybuild-framework/pull/630> `_ ) * enhance support for sanity checking extensions ( `#632 <https://github.com/easybuilders/easybuild-framework/pull/632> `_ , `#649 <https://github.com/easybuilders/easybuild-framework/pull/649> `_ ) * add support for ``modextrapaths`` easyconfig parameter ( `#634 <https://github.com/easybuilders/easybuild-framework/pull/634> `_ , `#637 <https://github.com/easybuilders/easybuild-framework/pull/637> `_ ) * allow ``source_urls`` to be templated for extensions ( `#639 <https://github.com/easybuilders/easybuild-framework/pull/639> `_ , `#646 <https://github.com/easybuilders/easybuild-framework/pull/646> `_ , `#647 <https://github.com/easybuilders/easybuild-framework/pull/647> `_ ) * set ``OMPI_*`` environment variables for OpenMPI ( `#640 <https://github.com/easybuilders/easybuild-framework/pull/640> `_ ) * make BLACS optional as toolchain element, depending on ScaLAPACK version ( `#638 <https://github.com/easybuilders/easybuild-framework/pull/638> `_ ) * various bug fixes, including: * fixed ``--list-toolchains`` , avoid listing toolchains multiple times ( `#628 <https://github.com/easybuilders/easybuild-framework/pull/628> `_ ) * fix templating dictionary after parsing easyconfig file ( `#633 <https://github.com/easybuilders/easybuild-framework/pull/633> `_ ) * fix support for ACML as compiler toolchain element ( `#632 <https://github.com/easybuilders/easybuild-framework/pull/632> `_ ) * make unit tests clean up after themselves more thoroughly ( `#641 <https://github.com/easybuilders/easybuild-framework/pull/641> `_ , `#642 <https://github.com/easybuilders/easybuild-framework/pull/642> `_ , `#643 <https://github.com/easybuilders/easybuild-framework/pull/643> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``MakeCp`` (`#208 <https://github.com/easybuilders/easybuild-easyblocks/pull/208> `_ ) * added support for **5** new software packages that require customized support: * CBLAS ( `#192 <https://github.com/easybuilders/easybuild-easyblocks/pull/192> `_ ), FreeSurfer ( `#194 <https://github.com/easybuilders/easybuild-easyblocks/pull/194> `_ ), Mothur ( `#206 <https://github.com/easybuilders/easybuild-easyblocks/pull/206> `_ ), OpenIFS ( `#200 <https://github.com/easybuilders/easybuild-easyblocks/pull/200> `_ ), PSI ( `#191 <https://github.com/easybuilders/easybuild-easyblocks/pull/191> `_ ) * various enhancements, including: * add support for building ScaLAPACK 2.x on top of QLogic MPI ( `#195 <https://github.com/easybuilders/easybuild-easyblocks/pull/195> `_ ) * support newer BWA versions ( `#199 <https://github.com/easybuilders/easybuild-easyblocks/pull/199> `_ ) * explicitly list license server type in ABAQUS install options, required for correct installation of v6.12 ( `#198 <https://github.com/easybuilders/easybuild-easyblocks/pull/198> `_ ) * update SCOTCH and OpenFOAM easyblock for recent versions ( `#201 <https://github.com/easybuilders/easybuild-easyblocks/pull/201> `_ ) * various bug fixes: * fix numpy easyblock to get an optimal build (w.r.t. ``numpy.dot`` performance) ( `#192 <https://github.com/easybuilders/easybuild-easyblocks/pull/192> `_ ) * correct build procedure for MUMmer to yield a complete installation ( `#196 <https://github.com/easybuilders/easybuild-easyblocks/pull/196> `_ , `#197 <https://github.com/easybuilders/easybuild-easyblocks/pull/197> `_ ) * make unit tests clean up after themselves more thoroughly ( `#203 <https://github.com/easybuilders/easybuild-easyblocks/pull/203> `_ , `#204 <https://github.com/easybuilders/easybuild-easyblocks/pull/204> `_ ) * fix getting Perl version for extensions ( `#205 <https://github.com/easybuilders/easybuild-easyblocks/pull/205> `_ ) **easyconfigs** * added example easyconfig files for **23** new software packages: * bam2fastq ( `#287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/287> `_ ), CBLAS ( `#263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/263> `_ ), EMBOSS ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ , `#290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/290> `_ ), FCM ( `#272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/272> `_ ), FRC_align ( `#273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/273> `_ ), freeglut ( `#271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/271> `_ ), FreeSurfer ( `#271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/271> `_ ), FSL ( `#271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/271> `_ ), GATK ( `#287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/287> `_ ), libharu ( `#290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/290> `_ ), libxslt ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), MariaDB ( `#292 <https://github.com/easybuilders/easybuild-easyconfigs/pull/292> `_ ), Mothur ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ) mpi4py ( `#276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/276> `_ ), OpenIFS ( `#272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/272> `_ ), orthomcl ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), PAML ( `#287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/287> `_ ), pandas ( `#262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/262> `_ ), phonopy ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), problog ( `#277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/277> `_ ), PSI ( `#258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/258> `_ ), PyYAML ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), RAxML ( `#277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/277> `_ ) * added additional example easyconfig files for: * ABINIT ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), ACML ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), BLAST ( `#275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/275> `_ ), Boost ( `#273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/273> `_ ), BWA ( `#270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/270> `_ ), bzip2 ( `#263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/263> `_ ), Chapel ( `#240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/240> `_ ), CMake ( `#290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/290> `_ ), FFTW2 ( `#247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/247> `_ , `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), flex ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), freetype ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), grib_api ( `#272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/272> `_ ), gzip ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), Java ( `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ), libpng ( `#240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/240> `_ , `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ), libreadline ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), libxml2 ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), libxml ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), matplotlib ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), MCL ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), MUMmer ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), ncurses ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), numpy ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), OpenFOAM ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), Perl ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), Python ( `#276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/276> `_ , `#263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/263> `_ ), R ( `#240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/240> `_ , `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ), SCOTCH ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), ScaLAPACK ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), TopHat ( `#289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/289> `_ ), Valgrind ( `#255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/255> `_ ), zlib ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ) * various enhancements, including: * enhance unit test suite, include testing for module conflicts ( `#256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/256> `_ ) and presence of patch files ( `#264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/264> `_ ) * use provided constants and templates in easyconfig files where appropriate ( `#248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/248> `_ , `#266 <https://github.com/easybuilders/easybuild-easyconfigs/pull/266> `_ , `#281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/281> `_ ) * various 'bug' fixes, including: * get rid of hardcoded license_file paths for VTune, Inspector ( `#253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/253> `_ ) * assign proper moduleclass where they were missing ( `#278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/278> `_ ) * fix naming for LZO ( `#280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/280> `_ ) * make unit tests clean up after themselves more thoroughly ( `#283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/283> `_ , `#284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/284> `_ , `#285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/285> `_ , `#286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/286> `_ ) * fix TopHat dependencies ( `#289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/289> `_ ) * fix source URLs for XML ( `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ) * fix versions for all listed R extensions ( `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ) * fix CUDA easyconfig file for use on Debian Squeeze ( `#291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/291> `_ ) * correct easyconfig filename and module name mismatches (bbcp, DL_POLY Classic, ...) ( `#295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/295> `_ ) EasyBuild v1.4.0 (May 2nd 2013) ------------------------------- feature + bugfix release **framework** * the unit tests for easybuild-framework were moved to test/framework, to make things consistent with easybuild-easyblocks and easybuild-easyconfigs ( `#611 <https://github.com/easybuilders/easybuild-framework/pull/611> `_ , `#613 <https://github.com/easybuilders/easybuild-framework/pull/613> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ ) * running the framework unit tests should now be using ``python -m test.framework.suite`` * various other enhancements, including: * extend unit test suite ( `#593 <https://github.com/easybuilders/easybuild-framework/pull/593> `_ , `#599 <https://github.com/easybuilders/easybuild-framework/pull/599> `_ , `#603 <https://github.com/easybuilders/easybuild-framework/pull/603> `_ , `#618 <https://github.com/easybuilders/easybuild-framework/pull/618> `_ , `#620 <https://github.com/easybuilders/easybuild-framework/pull/620> `_ , `#622 <https://github.com/easybuilders/easybuild-framework/pull/622> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ , ...) * extended list of constants and templates that can be used in easyconfig files ( `#566 <https://github.com/easybuilders/easybuild-framework/pull/566> `_ ) * add support for additional compiler toolchains * CUDA-enabled toolchain: ``goolfc`` ( `#603 <https://github.com/easybuilders/easybuild-framework/pull/603> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ ) * Clang(+GCC)-based toolchains: ``cgoolf`` , ``cgmpolf`` , ``cgmvolf`` ( `#593 <https://github.com/easybuilders/easybuild-framework/pull/593> `_ , `#598 <https://github.com/easybuilders/easybuild-framework/pull/598> `_ , `#600 <https://github.com/easybuilders/easybuild-framework/pull/600> `_ ) * gmvolf (GCC+MVAPICH2+...) ( `#585 <https://github.com/easybuilders/easybuild-framework/pull/585> `_ ) * properly decode easyblock to module name using ``decode_*`` functions ( `#618 <https://github.com/easybuilders/easybuild-framework/pull/618> `_ ) * various bug fixes, including: * fixed default value for ``--stop`` ( `#601 <https://github.com/easybuilders/easybuild-framework/pull/601> `_ ) * remove useless ``sleep()`` calls in ``run_cmd`` , ``run_cmd_qa`` ( `#599 <https://github.com/easybuilders/easybuild-framework/pull/599> `_ ) * determine module path based on class name, not software name ( `#606 <https://github.com/easybuilders/easybuild-framework/pull/606> `_ ) * remove unwanted characters in build dirs ( `#591 <https://github.com/easybuilders/easybuild-framework/pull/591> `_ , `#607 <https://github.com/easybuilders/easybuild-framework/pull/607> `_ ) * ignore some error codes spit out by modulecmd that are actually warnings ( `#609 <https://github.com/easybuilders/easybuild-framework/pull/609> `_ ) * fix ``agithub.py`` w.r.t. changes in GitHub API (user-agent string is now obligatory for non-authenticated connections) ( `#617 <https://github.com/easybuilders/easybuild-framework/pull/617> `_ ) * fix typo breaking the ``adjust_cmd`` decorator on SuSE ( `#615 <https://github.com/easybuilders/easybuild-framework/pull/615> `_ ) * fix prepending paths with absolute paths in module file ( `#621 <https://github.com/easybuilders/easybuild-framework/pull/621> `_ ) * clean up open file handles properly ( `#620 <https://github.com/easybuilders/easybuild-framework/pull/620> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ ) * fix ``--search`` help and implementation ( `#622 <https://github.com/easybuilders/easybuild-framework/pull/622> `_ ) **easyblocks** * added a unit test suite for easyblocks ( `#175 <https://github.com/easybuilders/easybuild-easyblocks/pull/175> `_ , `#177 <https://github.com/easybuilders/easybuild-easyblocks/pull/177> `_ , `#178 <https://github.com/easybuilders/easybuild-easyblocks/pull/178> `_ ) * every easyblock is parsed and instantiated as a sanity check * added **one** new `generic` easyblock: ``PerlModule`` (`#183 <https://github.com/easybuilders/easybuild-easyblocks/pull/183> `_ ) * added support for **8** new software packages that require customized support: * ABAQUS ( `#179 <https://github.com/easybuilders/easybuild-easyblocks/pull/179> `_ ), Bowtie ( `#174 <https://github.com/easybuilders/easybuild-easyblocks/pull/174> `_ , `#185 <https://github.com/easybuilders/easybuild-easyblocks/pull/185> `_ , `#186 <https://github.com/easybuilders/easybuild-easyblocks/pull/186> `_ ), Clang ( `#151 <https://github.com/easybuilders/easybuild-easyblocks/pull/151> `_ ), DL_POLY Classic ( `#118 <https://github.com/easybuilders/easybuild-easyblocks/pull/118> `_ ), ESMF ( `#171 <https://github.com/easybuilders/easybuild-easyblocks/pull/171> `_ ), Perl ( `#183 <https://github.com/easybuilders/easybuild-easyblocks/pull/183> `_ ), Intel VTune and Intel Inspector ( `#180 <https://github.com/easybuilders/easybuild-easyblocks/pull/180> `_ ) * the ``CMakeMake.configure_step`` parameter ``builddir`` was renamed to ``srcdir`` , because the name ``builddir`` is incorrect ( `#151 <https://github.com/easybuilders/easybuild-easyblocks/pull/151> `_ ) * ``builddir`` will remain supported for legacy purposes up until v2.0 * various enhancements, including: * reverted back to hardcoding Python library path, since it's hardcoded by setuptools too ( `#184 <https://github.com/easybuilders/easybuild-easyblocks/pull/184> `_ ) * added MPICH support in ScaLAPACK easyblock ( `#172 <https://github.com/easybuilders/easybuild-easyblocks/pull/172> `_ ) * enhanced NCL easyblock: add support UDUNITS and ESMF dependencies ( `#171 <https://github.com/easybuilders/easybuild-easyblocks/pull/171> `_ ) * enhanced MATLAB easyblock: avoid hardcoding Java options, make sure ``$DISPLAY`` is unset, extend list of sanity check paths ( `#181 <https://github.com/easybuilders/easybuild-easyblocks/pull/181> `_ ) * enhanced TotalView easyblock: add support for license file ( `#146 <https://github.com/easybuilders/easybuild-easyblocks/pull/146> `_ ) **easyconfigs** * added a unit test suite for easyconfigs ( `#228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/228> `_ , `#230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/230> `_ ) * added example easyconfig files for **20** new software packages: * ABAQUS ( `#231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/231> `_ ), BioPerl ( `#242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/242> `_ ), Bowtie ( `#227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/227> `_ ), Clang ( `#177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/177> `_ ), CRF++ ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), DL_POLY Classic ( `#132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/132> `_ ), ESMF, GROMACS ( `#165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/165> `_ ), HH-suite ( `#219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/219> `_ ), Inspector ( `#232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/232> `_ ), likwid ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), Perl ( `#242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/242> `_ ), scikit ( `#133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/133> `_ ), TiCCutils ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), TiMBL ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), TinySVM ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), UDUNITS ( `#167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/167> `_ ), VTune ( `#232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/232> `_ ), YamCha ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ) * add example easyconfigs for new compiler toolchains (use ``eb --list-toolchains`` for a full list of supported toolchains): * the newly added toolchains only differ in compilers/MPI library, and all feature OpenBLAS, LAPACK, ScaLAPACK and FFTW * `goolfc`: GCC, CUDA (co-compiler), OpenMPI (`#191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/191> `_ ) * a goolfc easyconfig for GROMACS is included as proof-of-concept ( `#165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/165> `_ ) * `cgmpolf`: Clang (C/C++ compilers), GCC (Fortran compilers), MPICH (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `cgmvolf`: Clang, GCC, MVAPICH2 (`#218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/218> `_ ) * `cgoolf`: Clang, GCC, OpenMPI (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `gmvolf`: GCC, MVAPICH (`#202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/202> `_ , `#222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/222> `_ ) * ported already available easyconfigs to new compiler toolchains: * `ictce-5.3.0`: 193 easyconfigs (`#229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/229> `_ ) * `cgmpolf`: 11 easyconfigs (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `cgmvolf`: 11 easyconfigs (`#218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/218> `_ ) * `cgoolf`: 12 easyconfigs (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `gmvolf`: 10 easyconfigs (`#215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/215> `_ ) * added additional example easyconfig files for: * CMake ( `#163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/163> `_ ), git ( `#210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/210> `_ ), Java ( `#206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/206> `_ ), `#221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/221> `_ , Mercurial ( `#201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/201> `_ , `#215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/215> `_ ), ncurses ( `#225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/225> `_ ), TotalView ( `#160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/160> `_ ) * various enhancements, including: * added ESMF and UDUNITS dependencies to NCL easyconfigs ( `#211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/211> `_ ) * changed value of source_urls in R easyconfigs, to be generic enough for version 3.0 and possibly beyond ( `#251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/251> `_ ) * various 'bug' fixes, including: * add ``--enable-mpirun-prefix-by-default`` configure option for all OpenMPI easyconfigs ( `#205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/205> `_ ) EasyBuild v1.3.0 (April 1st 2013) --------------------------------- feature + bugfix release **framework** * added script to bootstrap EasyBuild with EasyBuild, see https://github.com/easybuilders/easybuild/wiki/Bootstrapping-EasyBuild ( `#531 <https://github.com/easybuilders/easybuild-framework/pull/531> `_ ) * reorganize framework/easyconfig.py module into framework/easyconfig package with modules ( `#574 <https://github.com/easybuilders/easybuild-framework/pull/574> `_ , `#580 <https://github.com/easybuilders/easybuild-framework/pull/580> `_ ) * support EasyBuild configuration via command line, environment variables and configuration files ( `#529 <https://github.com/easybuilders/easybuild-framework/pull/529> `_ , `#552 <https://github.com/easybuilders/easybuild-framework/pull/552> `_ , `#556 <https://github.com/easybuilders/easybuild-framework/pull/556> `_ , `#558 <https://github.com/easybuilders/easybuild-framework/pull/558> `_ , `#559 <https://github.com/easybuilders/easybuild-framework/pull/559> `_ ) * various other enhancements, including: * extended set of unit tests for eb command line options and EasyBuild configuration ( `#517 <https://github.com/easybuilders/easybuild-framework/pull/517> `_ , `#556 <https://github.com/easybuilders/easybuild-framework/pull/556> `_ , `#559 <https://github.com/easybuilders/easybuild-framework/pull/559> `_ , `#571 <https://github.com/easybuilders/easybuild-framework/pull/571> `_ ) * made ``--search`` also useful when easybuild-easyconfigs package is not installed ( `#524 <https://github.com/easybuilders/easybuild-framework/pull/524> `_ ) * extended set of default module classes ( `#525 <https://github.com/easybuilders/easybuild-framework/pull/525> `_ ) * add support for license easyconfig parameter (which will be mandatory in v2.x) ( `#526 <https://github.com/easybuilders/easybuild-framework/pull/526> `_ , `#569 <https://github.com/easybuilders/easybuild-framework/pull/569> `_ ) * added ``setup.cfg`` for ``setup.py`` to allow creating RPMs ( `#528 <https://github.com/easybuilders/easybuild-framework/pull/528> `_ ) * added support for obtaining system information, see ``get_os_*`` functions in ``easybuild/tools/systemtools.py`` ( `#543 <https://github.com/easybuilders/easybuild-framework/pull/543> `_ , `#546 <https://github.com/easybuilders/easybuild-framework/pull/546> `_ , `#547 <https://github.com/easybuilders/easybuild-framework/pull/547> `_ ) * added support for iterated builds that require cycling over multiple sets of configure/build/install options, e.g. FFTW ( `#549 <https://github.com/easybuilders/easybuild-framework/pull/549> `_ ) * added support for OpenBLAS as toolchain lib for linear algebra ( `#537 <https://github.com/easybuilders/easybuild-framework/pull/537> `_ , `#565 <https://github.com/easybuilders/easybuild-framework/pull/565> `_ ) * added support for tweaking prefix and separator for library toolchain variables ( ``LIB*`` ) ( `#572 <https://github.com/easybuilders/easybuild-framework/pull/572> `_ , `#576 <https://github.com/easybuilders/easybuild-framework/pull/576> `_ ) * skip already built modules in regression testing mode, to ease regression testing ( `#582 <https://github.com/easybuilders/easybuild-framework/pull/582> `_ ) * various bug fixes, including: * added ``zip_safe`` flag to ``setup.py`` , to silence multitude of warnings ( `#521 <https://github.com/easybuilders/easybuild-framework/pull/521> `_ ) * only define ``LIBFFT`` for Intel MKL if FFTW interface libraries are available ( `#518 <https://github.com/easybuilders/easybuild-framework/pull/518> `_ , `#567 <https://github.com/easybuilders/easybuild-framework/pull/567> `_ , `#579 <https://github.com/easybuilders/easybuild-framework/pull/579> `_ ) * set POSIX group early in build process, make EasyBuild aware of consistent chmod/chown failures ( `#527 <https://github.com/easybuilders/easybuild-framework/pull/527> `_ ) * properly order the name/version keys for the toolchain easyconfig parameter when using ``--try-toolchain`` ( `#563 <https://github.com/easybuilders/easybuild-framework/pull/563> `_ ) * take the ``skipsteps`` easyconfig parameter into account in regression testing mode as well ( `#583 <https://github.com/easybuilders/easybuild-framework/pull/583> `_ ) **easyblocks** * added support for **2** new software packages that require customized support: * CUDA ( `#145 <https://github.com/easybuilders/easybuild-easyblocks/pull/145> `_ ), Ferret ( `#160 <https://github.com/easybuilders/easybuild-easyblocks/pull/160> `_ , `#163 <https://github.com/easybuilders/easybuild-easyblocks/pull/163> `_ ) * remove ``license`` easyconfig parameter from ``IntelBase`` , since it clashes with generic ``license`` parameter ( `#153 <https://github.com/easybuilders/easybuild-easyblocks/pull/153> `_ , `#158 <https://github.com/easybuilders/easybuild-easyblocks/pull/158> `_ ) * ``license_file`` should be used instead (see `framework#569 <https://github.com/easybuilders/easybuild-easyblocks/pull/569/files> `_ ) * using ``license`` instead of ``license_file`` will be supported until v2.x for legacy purposes * various enhancements, including: * stop hardcoding Python site-packages library dir, obtain it via ``distutils.sysconfig`` instead ( `#141 <https://github.com/easybuilders/easybuild-easyblocks/pull/141> `_ , `#156 <https://github.com/easybuilders/easybuild-easyblocks/pull/156> `_ , `#159 <https://github.com/easybuilders/easybuild-easyblocks/pull/159> `_ , `#161 <https://github.com/easybuilders/easybuild-easyblocks/pull/161> `_ ) * stop hardcoding list of libraries for BLAS libs, ask toolchain modules or use ``$LIBBLAS`` instead ( `#150 <https://github.com/easybuilders/easybuild-easyblocks/pull/150> `_ , `#155 <https://github.com/easybuilders/easybuild-easyblocks/pull/155> `_ ) * enhanced CP2K easyblock, following Intel guidelines for ``ictce`` builds ( `#138 <https://github.com/easybuilders/easybuild-easyblocks/pull/138> `_ ) * added ``setup.cfg`` for ``setup.py`` to allow creating RPMs ( `#140 <https://github.com/easybuilders/easybuild-easyblocks/pull/140> `_ ) * clean up specifying BLAS/LAPACK libs for building numpy, check whether requires patch is being used for IMKL builds ( `#155 <https://github.com/easybuilders/easybuild-easyblocks/pull/155> `_ , `#161 <https://github.com/easybuilders/easybuild-easyblocks/pull/161> `_ ) * various bug fixes, including: * added ``zip_safe`` flag to ``setup.py`` , to silence multitude of warnings ( `#135 <https://github.com/easybuilders/easybuild-easyblocks/pull/135> `_ ) * install EasyBuild packages in reversed order to avoid funky setuptools issues ( `#139 <https://github.com/easybuilders/easybuild-easyblocks/pull/139> `_ ) * fixed a typo in the ScaLAPACK easyblock, and set CCFLAGS and FCFLAGS for v2.x ( `#149 <https://github.com/easybuilders/easybuild-easyblocks/pull/149> `_ , `#162 <https://github.com/easybuilders/easybuild-easyblocks/pull/162> `_ ) * fix sanity check for python-meep ( `#159 <https://github.com/easybuilders/easybuild-easyblocks/pull/159> `_ ) * exclude Python tests from DOLFIN sanity check, since they hang sometimes ( `#161 <https://github.com/easybuilders/easybuild-easyblocks/pull/161> `_ ) * add support in ALADIN easyblock for answering question on location of ``libgrib_api.a`` ( `#165 <https://github.com/easybuilders/easybuild-easyblocks/pull/165> `_ ) **easyconfigs** * added example easyconfig files for **13** new software packages: * Bash, CUDA, ccache, Ferret, gzip, libxc, ns, numactl, OpenBLAS, otcl, Tar, tclcl, tcsh * several of these easyconfig files were contributed by attendees of the EasyBuild hackathon in Cyprus! * added example easyconfigs for goolf toolchain ( `#158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/158> `_ ) * added example easyconfigs for builds with goolf toolchain, i.e. for all goalf easyconfigs ( `#189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/189> `_ ) * for several software packages, a patch file was needed to get them to build with GCC 4.7: * AMOS, BEAGLE, Cufflinks, DOLFIN, GATE, ns, Pasha, Trilinos, Trinity * for PETSc, a patch file was required to make it build with a toolchain that doesn't include BLACS * added additional example easyconfig files for: * gompi, hwloc, LAPACK, MVAPICH2, OpenMPI, ScaLAPACK * various enhancements, including: * define a proper module class in `all` easyconfigs, cfr. default module classes defined in framework (`#150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/150> `_ , `#159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/159> `_ , `#161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/161> `_ , `#162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/162> `_ , `#179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/179> `_ , `#181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/181> `_ ) * extend FFTW easyconfig to 'fat' builds that include single, double, long double and quad precision libraries in the same module * quad precision is disabled for Intel compiler based builds (it requires GCC v4.6+) * the imkl easyconfigs used for the ictce 3.2.2.u3 toolchain now also enable FFTW interfaces * various 'bug' fixes, including: * fix filename for Mercurial and ROOT easyconfig files * fix homepage/description for Hypre * fix enabling OpenMP support in OpenMPI: use ``--enable-openmp`` , not ``--with-openmp`` * use correct configure flag for enabling OpenMPI threading support in v1.6 ( `#186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/186> `_ ) * ``--enable-mpi-thread-multiple`` instead of ``--enable-mpi-threads`` * explicitly add ``--without-openib --without-udapl`` configure options in OpenMPI easyconfig using versionsuffix ``-no-OFED`` ( `#168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/168> `_ ) * this avoids that OpenMPI auto-detects that it can enable Infiniband (OpenIB) support, which doesn't fit the -no-OFED versionsuffix * Note: this makes goalf-1.1.0-no-OFED effectively not suitable to produce software builds that are IB-capable! * remove explicit ``--with-udapl`` from OpenMPI easyconfigs, does more harm than good ( `#178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/178> `_ ) * remove libibvers, libibmad, libibumad as explicit dependencies for OpenMPI/MVAPICH2 ( `#173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/173> `_ , `#182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/182> `_ ) * leave it up to the OS to provide these, since the required version is too much tied to the version of IB drivers * use ``license_file`` in Intel tools easyconfigs, as opposed to the new generic ``license`` parameter with a different meaning ( `#180 <https://github.com/easybuilders/easybuild-easyconfigs/pull/180> `_ ) * modify patch for impi to avoid installation problems due to hardcoded path in /tmp ( `#185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/185> `_ ) * now uses ``$USER-$RANDOM`` subdir to avoid clashes between different users on the same system * the patch file for numpy was extended to also supporting ATLAS and other BLAS libraries spread across multiple directories * the extension for ATLAS is required because we now no longer rely on the automatic numpy mechanism to find the ATLAS libs * fixed dependencies: * libibumad as dependency for libibmad * ncurses as dependency for libreadline * ncurses and zlib as dependency for SAMtools (+ enhanced patch) * remove explicit FFTW dependency for Meep, ... since toolchain already provided FFTW EasyBuild v1.2.0 (February 28th 2013) ------------------------------------- feature + bugfix release **framework** * new backend module for option parsing: generaloption * support for using constants and string templates in easyconfig files * currently disabled for ``exts_filter`` and ``exts_list`` easyconfig parameters, for backward compatibility * various other enhancements, including: * support for iqacml and iiqmpi toolchains (Intel compilers + QLogic MPI based) * clearer errors messages when sanity check failed * unit tests for (about half of) the ``eb`` command line options * support for specifying build/install steps to skip in easyconfig file ( ``skipsteps`` ) * support for allowing certain dependencies to be resolved by the system instead of modules ( ``allow_system_deps`` ) * cache ppn value required by regtest, clean up temporary files let behind by ``--regtest`` / ``--job`` * make sure MPD is used as process manager for Intel MPI (required for impi v4.1 and later) * rename template names ``name`` and ``version`` used in exts_filter to ``ext_name`` , ``ext_version`` * ``name`` and ``version`` are still supported for legacy reasons * cleaned up module docstrings w.r.t. list of authors * various bug fixes, including: * print correct (lowercase) toolchain names with ``--list-toolchains`` * correct easyconfig parameter name ``license_server_port`` * fix string quoting in develop modules * ensure ``modulecmd`` is run with original ``$LD_LIBRARY_PATH`` value * to avoid breaking ``modulecmd`` , see https://bugzilla.redhat.com/show_bug.cgi?id=719785 * remove use of hardcoded files/dirs in unit tests * fix various inconsistencies w.r.t. paths considered with ``--robot`` * various cleanup and fixes w.r.t. logging * use correct logger instance in main script * stop passing logger instances around * make module logging variables private * get rid of ``ModuleGenerator`` deconstructor, clean up via ``EasyBlock.clean_up_fake_module`` * fix disabling of ``optarch`` toolchain option (and extend unit tests to check on this) **easyblocks** * added **one** new `generic` easyblock: ``Rpm`` * added support for **6** new software packages that require customized support: * EasyBuild, EPD (Enthought Python Distribution), freetype, MATLAB, QLogic MPI (RPM), TotalView * support for installing EasyBuild with EasyBuild enables bootstrapping an EasyBuild installation! * various enhancements, including: * corrections in WRF/WPS to also enable building with iqacml toolchain * use ``mpi_cmd_for`` instead of hardcoding test commands, using correct Fortran compilers (F90) * fix NCL easyblock to also support v6.1.x * use correct Fortran compiler (F90), set correct lib/include paths for dependencies (netCDF-Fortran, GDAL) * cleanup sweep of license headers and authors list in easyblock module docstrings * use new ``ext_name`` template name in ``exts_filter`` in Python and R easyblocks * various bug fixes, including: * general code cleanup * don't set ``sanityCheckOK`` in ``Toolchain`` easyblock * get rid of using ``os.putenv`` * NEURON easyblock: don't hardcode number of processes used in test cases * make sure ``easybuild.easyblocks.generic`` namespace is extendable **easyconfigs** * added example easyconfig files for **41** new software packages: * a2ps, AnalyzeFMRI, aria, bbcp, bbFTP, bbftpPRO, binutils, Bonnie++, ccache, cflow, cgdb, Corkscrew, EasyBuild, Elinks, EPD, FLUENT, fmri, GDB, GDAL, gnuplot, gnutls, gperf, Iperf, lftp, libyaml, lzo, MATLAB, mc, nano, NASM, nettle, numexpr, parallel, pyTables, QLogic MPI, Stow, TotalView, Valgrind, VTK, Yasm, zsync * added example easyconfigs for iqacml and iiqmpi toolchains * added additional example easyconfig files for: * ABINIT, ABySS, ACML, BFAST, Bison, BLACS, Cython, cURL, Doxygen, FFTW, flex, g2clib, g2lib, GHC, h5py, HDF, HDF5, HMMER, JasPer, icc, ictce, ifort, imkl, impi, libpng, libreadline, M4, matplotlib, MCL, MEME, mpiBLAST, NCL, ncurses, netCDF, netCDF-Fortran, NWChem, R, ScaLAPACK, Tcl, Tk, WPS, WRF, zlib * various enhancements, including: * fix version of xtable R library in list of extensions for R, to avoid installation failures * various 'bug' fixes, including: * fix toolchain and file names for ABINIT easyconfigs * fix sanity check paths for cURL * don't disable ``optarch`` for WRF, it's not needed (only disable heavy optimizations is required) * fix homepage/description for ALADIN EasyBuild v1.1.0 (January 27th 2013) ------------------------------------ feature + bugfix release **framework** * improvements w.r.t. support for software extensions (tested on Python and R, see easyblocks package) * cleaned up support for building/installing extensions * define ``ExtensionEasyblock`` class that implements support for installing extensions as stand-alone module as well * return to build dir before building/installing each extension * define ``EBEXTSLIST<NAME>`` environment variable in module if ``exts_list`` was defined * make sure sanity check for extensions results in an error if it fails * various enhancements, including: * log both framework and easyblocks versions * add support for ``gimkl`` , ``gmacml`` , ``iccifort`` , ``iomkl`` and ``ismkl`` toolchains * define ``*_SEQ compiler`` variables for sequential compilers * add ``--list-toolchains`` command line option for listing supported toolchains * add support for customizing software and modules install path suffixes * support both setuptools and distutils installation methods for finding installed easyconfigs * also consider robot path in list of paths searched for patch files * allow skipping of default extension sanity check (by setting ``modulename`` to False in options) * various bug fixes, including: * typos in toolchain Python modules w.r.t. ``imkl`` support, handling of ``i8`` / ``optarch`` / ``unroll`` options * purge before loading 'fake' module, unload 'fake' module before removing it, use original ``$MODULEPATH`` * restore environment after unloading fake module, set variables that were incorrectly unset, i.e., that were defined before as well * unset ``$TMPDIR`` for builds submitted as jobs (required by ``IntelBase`` easyblock) * correctly track easyconfig parse error * always run all jobs in regtest, also if dependency jobs failed * cosmetic adjustments to default EasyBuild configuration file to avoid confusion between e.g. ``build_dir`` and ``build_path`` (only latter matters) * fix SuSe hack, only prefix command with sourcing of ``/etc/profile.d/modules.sh`` if it is there * leave build directory before it is removed during cleanup step * load generated module file before running test cases **easyblocks** * added **3** new `generic` easyblocks: ``CMakePythonPackage`` , ``JAR`` , ``RPackage`` * added support for **23** new software packages that require customized support: * ACML, ALADIN, ant, Bioconductor (R packages), Chapel, Cufflinks, ESPResSo, FLUENT, Geant4, GHC, Java, NEURON, NWChem, PyZMQ, QuantumESPRESSO, R, Rmpi, ROOT, Rserve, SCOOP, Trinity, VSC-tools, XML * various enhancements, including: * clean up of ``python.py`` easyblock: * merge ``EB_DefaultPythonPackage`` and ``PythonPackage`` easyblocks into generic `easyblock` ``PythonPackage`` , which derives from ``ExtensionEasyblock`` * move ``EB_FortranPythonPackage`` into dedicated `generic` ``FortranPythonPackage`` easyblock module * split off support for building/installing ``nose`` , ``numpy`` , ``scipy`` into dedicated ``EB_*`` easyblock modules, which allows them to be built as stand-alone modules as well * clean up testing of Python packages ( ``PythonPackage`` easyblock) * make sure there is no ``site.cfg`` in home dir when building Python packages, because e.g. ``scipy`` will pick it up * added support for building Intel MKL wrappers with OpenMPI toolchain * cleaning up of fake module that was loaded for running tests * move calls to functions that rely on environment up in the chain of steps (mostly for cleanup reasons) * use better module name for UFC sanity check, minor change to sanity check paths for UFC * various bug fixes, including: * only call ``make ptcheck`` for ATLAS when multi-threading support is enabled * use a symbolic link for $HOME/intel instead of a randomly suffixed subdirectory in home and patching of Intel install scripts * latter does not work anymore with recent versions of Intel tools (2013.x) **easyconfigs** * added example easyconfig files for **48** new software packages: * ABINIT, ABySS, ACML, ALADIN, ant, BFAST, BLAST, Chapel, CLHEP, Cufflinks, ESPRresSo, GATE, GHC, Geant4, Greenlet, google-sparsehash, grib_api, HMMER, Java, JUnit, libibmad, libibumad, libibverbs, MCL, MDP, MEME, mpiBLAST, NCBI Toolkit, NEURON, NWChem, numpy, MDP, Oger, OpenPGM, paycheck, PyZMQ, QuantumESPRESSO, R, ROOT, SCOOP, scipy, Tophat, Trinity, util-linux, VSC-tools, wiki2beamer, XML, ZeroMQ * added example easyconfigs for gmacml, gmvapich2, iccifort, ictce, iomkl toolchains * added additional example easyconfig files for: * ATLAS, BLACS, Boost, Bowtie2, bzip2, CP2K, Doxygen, FFTW, GCC, HDF5, hwloc, icc, ifort, imkl, impi, JasPer, Libint, libreadline, libsmm, libxml, ncurses, netCDF, M4, Meep, MVAPICH2, OpenMPI, Python, ScaLAPACK, Szip, zlib * various enhancements, including: * major style cleanup of all example easyconfig file (PEP008 compliance) * added setuptools to list of Python extensions * get rid of ``parallel`` versionsuffix for HDF5, as its meaningless (MPI-enabled build is always parallel) * various 'bug' fixes, i.e. added missing dependencies or replaced OS dependencies with proper dependencies EasyBuild v1.0.2 (December 8th 2012) ------------------------------------ bugfix release **framework** * properly catch failing sanity check commands * fix bug in toolchain support which cause linking environment variables set by toolchain to include too many libraries * elements in toolchain variables were being passed by reference instead of by value * fix selecting a compiler toolchain for a specified software package ( ``--software-name`` ) if only a template is a viable option * fix passing command line parameters with ``--job`` * fix list of valid stops ( ``-s`` / ``--stop`` ) * fix minor issues in help messages ( ``-h`` / ``--help`` ) **easyblocks** * fix typos in WIEN2k easyblock (missing commas after list elements) **easyconfigs** * fixed source URL for ligtextutils (toolchain refactoring error) EasyBuild v1.0.1 (November 24th 2012) ------------------------------------- bugfix release **framework** * fix support for installing with ``distutils`` (broken import in ``setup.py`` ) * fix support for ACML as a toolchain element ( ``toolchains/linalg/acml.py`` ) * add name to aggregated regtest XML so that is parsed correctly by Jenkins * reorder code in ``main.py`` so that regtest also works with incomplete easyconfig paths * add bash script for running regression test and sending a trigger to Jenkins to pull in the XML with results * get rid of assumption that loaded modules should have name like ``foo/bar`` , make it more flexible * retry failed builds in regtest twice to ignore fluke errors * report leaf nodes in dependency graph when regtest is submitted * this is required for setting job dependencies in the regtest script for the Jenkins trigger job * implement and use rmtree2 as more (NFS) robust replacement for ``shutil.rmtree`` * bump max hit count for ``run_cmd_qa`` from 20 to 50, to make false positives of unasnwered questions less likely **easyblocks** * fix support for installing with ``distutils`` (broken import in ``setup.py`` ) * only build GMP/CLooG/PPL libraries during GCC build in parallel, don't install in parallel * ``make -j N install`` doesn't work consistently for GMP * fix GCC build on OS X * location of libraries is slightly different ( ``lib`` vs ``lib64`` dir) * add support to ``ConfigureMake`` easyblock for pre-passing tar options to configure * see ``tar_config_opts`` easyconfig parameter * workaround for issue with pax hanging ``configure`` with an interactive prompt * enhance Q&A for WRF and WIEN2k by adding entries to ``qa`` dict and ``no_qa`` list * use ``rmtree2`` from ``tools/filetools.py`` as more (NFS) robust replacement for ``shutil.rmtree`` **easyconfigs** * remove patch file for OpenMPI to resolve issue with pax hanging configure * ``tar_config_opts`` should be enabled as needed * disable parallel build for PAPI, seems to be causing problems EasyBuild v1.0 (November 13th 2012) ----------------------------------- * split up EasyBuild across three repositories: framework, easyblocks and easyconfigs * packaged EasyBuild, different parts can now be installed easily using ``easy_install`` **framework** * various changes to both internal and external API: * renamed main script to main.py (from ``build.py`` ) * file and directory organisation * module, class, function and function argument renaming and reorganisation * split up ``Application`` into ``EasyBlock`` and ``ConfigureMake`` (see easybuild-easyblocks for the latter) * created ``EasyConfig`` class for handling easyconfig files * renaming of EasyBuild configuration parameters (non-camelCase) * renaming of various easyconfig parameters (non-camelCase) * rename ``SOFTROOT`` and ``SOFTVERSION`` environment variables set in generated module files to ``EBROOT`` and ``EBVERSION`` * use 'extension' as generic terminology for Python packages, R libraries, Perl modules, ... * added support for building software packages in parallel via PBS jobs * added unit testing framework and initial set of unit tests for basic functionality * and run them in Jenkins continuous integration service, see https://jenkins1.ugent.be/view/EasyBuild/ * implement single-command regression test (e.g. to test building all supported software) * eb ``--regtest`` --robot * switch to new style Python classes * replaced ``toolkit`` module with ``toolchain`` package (total rewrite), providing modular support for toolchains * adjust default EasyBuild configuration to only use ``$HOME/.local/easybuild`` by default * added support for running EasyBuild without supplying an easyconfig file * make EasyBuild search for a matching easyconfig file * support automatic rewriting of an existing partially-matching easyconfig file (use this with care!) * support for automatically generating an easyconfig file according to given specifications (best effort!) * add support for looking for easyconfig file in Python search path if it can't be found on specified (relative) path (that way, easyconfig files available in the easybuild-easyconfigs package can be used easily) * various other enhancements and bug fixes, e.g.: * extended sanity check capabilities * cleaned up logging * creating of devel module which allows to mimic environment that was used by EasyBuild to build the software * support for creating dependency graphs for a set of easyconfig files * grouped options in help output and categorised available easyconfig parameters * more consistent code style **easyblocks** * implement class name encoding scheme, see wiki https://github.com/easybuilders/easybuild/wiki/Encode-class-names * (non-generic) easyblock class names are now prefixed with ``EB_`` and non-alphanumeric characters are escaped * split off generic easyblocks into separate package ``easyblocks.generic`` * added custom support for **39** software packages: * Armadillo, BiSearch, Boost, Bowtie2, BWA, bzip2, CGAL, CPLEX, DOLFIN, Eigen, flex, FSL, Hypre, libxml2, MetaVelvet, METIS, MTL4, MUMmer, ncurses, OpenFOAM, OpenSSL, ParMETIS, Pasha, PETSc, Primer3, python-meep, SAMtools, SCOTCH, SHRiMP, SLEPc, SOAPdenovo, SuiteSparse, SWIG, Tornado, Trilinos, UFC, Velvet, WIEN2k, XCrySDen * various enhancements and bug fixes to existing easyblocks **easyconfigs** * added example easyconfig files for **106** new software packages: * AMOS, Armadillo, ASE, Autoconf, BiSearch, Boost, Bowtie2, BWA, byacc, bzip2, CGAL, ClustalW2, CMake, CPLEX, cURL, CVXOPT, Cython, Docutils, DOLFIN, ECore, Eigen, expat, FASTX-Toolkit, FFC, FIAT, freetype, FSL, GEOS, git, glproto, GMP, gmvapich2, gompi, GPAW, GSL, guile, h5py, h5utils, Harminv, hwloc, Hypre, Infernal, Instant, Jinja2, libctl, libdrm, libffi, libgtextutils, libmatheval, libpciaccess, libpthread-stubs, libreadline, libtool, libunistring, libxcb, libxml2, makedepend, matplotlib, Meep, Mercurial, Mesa, MetaVelvet, METIS, MPFR, MTL4, MUMmer, ncurses, OpenFOAM, OpenSSL, ORCA, PAPI, ParMETIS, Pasha, PCRE, PETSc, petsc4py, pkg-config, Primer3, python-meep, RNAz, SAMtools, ScientificPython, SCOTCH, setuptools, Shapely, SHRiMP, SLEPc, SOAPdenovo, Sphinx, SuiteSparse, SWIG, Tcl, Theano, Tk, Tornado, Trilinos, UFC, UFL, Velvet, ViennaRNA, Viper, WIEN2k, xcb-proto, XCrySDen, xorg-macros, xproto * added additional example easyconfig files (versions, builds) for several software packages * Bison, BLACS, Doxygen, flex, GCC, HDF5, icc, ifort, libpng, M4, MVAPICH2, OpenMPI, Szip, tbb, zlib * replaced GCC/OpenMPI based easyconfig files with equivalents using the `gompi` toolchain * ATLAS, BLACS, FFTW, LAPACK, ScaLAPACK * enhanced Python example easyconfig files (more dependencies required for features, e.g. libreadline, bzip2, zlib, ...) * corrected file name of easyconfig files to adher to standard as followed by EasyBuild robot dependency resolver * style cleanup in existing easyconfig files EasyBuild v0.8 (June 29th 2012) ------------------------------- * added support for building/installing 17 additional software packages: * BEAGLE, Doxygen, g2clib, g2lib, HDF, HDF5, JasPer, libpng, Maple, MrBayes, NCL, netCDF, netCDF-Fortran, Szip, WPS, WRF, zlib * the build procedure for WRF and WPS includes running the tests available for these packages * various bug fixes and enhancements: * made support for interactive installers ( ``run_cmd_qa`` ) more robust * fixed Python git package check * implemented toolkit functions for determine compiler family, MPI type, MPI run command, ... EasyBuild v0.7 (June 18th 2012) ------------------------------- * fixed BLACS build * diagnostic tools to determine ``INTERFACE`` and ``TRANSCOMM`` values are now used * added support for building Bison, CP2K, flex * with regression test enabled for CP2K as part of build process * note: BLACS built with EasyBuild prior to v0.7 needs to be rebuilt for CP2K to work correctly * added ``--enable-mpi-threads`` to OpenMPI example easyconfigs * required for correct CP2K psmp build * adjusted libsmm example easyconfig for lower build time * to make the full regression test finish in a reasonable amount of time * added script to make porting of easyblocks from old to new EasyBuild codebase easier * takes care of refactoring, checks for PyLint warnings/errors, ... * fixed several small bugs * prefixed EasyBuild messages with ``==`` * full regression test passed (58 easyconfigs tested) EasyBuild v0.6 (May 11th 2012) ------------------------------ * added support for Intel compiler toolkit (ictce) * which included the Intel compilers, Intel Math Kernel Library (imkl) and Intel MPI library (impi) * added support for building Python with nose/numpy/scipy packages * added simple regression test * this version is able to build all supplied example easyconfigs EasyBuild v0.5 (April 6th 2012) ------------------------------- * first public release of EasyBuild * after a thorough cleanup of the EasyBuild framework of the in-house version * supports building HPL with goalf compiler toolkit * the goalf toolkit consists of the GCC compilers, and the OpenMPI, ATLAS, LAPACK, FFTW and ScaLAPACK libraries * also support build and installation of MVAPICH2","title":"Release notes"},{"location":"release-notes/#easybuild-release-notes","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Release_notes.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Release_notes.rst in easybuilders/easybuild repo target: docs/release-notes.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _release_notes: EasyBuild release notes ======================= The latest version of EasyBuild provides support for building and installing **2,798** different software packages, including 37 different (compiler) toolchains. It contains 248 software-specific easyblocks and 37 generic easyblocks, alongside 15,535 easyconfig files. .. note :: See also the :ref: `concise overview of major changes in EasyBuild v4.0 <eb4_changes_overview>` . .. _release_notes_eb462: EasyBuild v4.6.2 (October 21st 2022) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add support for easystack file that contains easyconfig filenames + implement parsing of configuration options ( `#4021 <https://github.com/easybuilders/easybuild-framework/pull/4021> `_ ) * skip over unset ``$EB_PYTHON`` / ``$EB_INSTALLPYTHON`` in eb wrapper script ( `#4080 <https://github.com/easybuilders/easybuild-framework/pull/4080> `_ ) * add ``GITHUB_RELEASE`` and ``GITHUB_LOWER_RELEASE`` templates ( `#4084 <https://github.com/easybuilders/easybuild-framework/pull/4084> `_ ) * add ``%(cuda_cc_cmake)s`` template ( `#4087 <https://github.com/easybuilders/easybuild-framework/pull/4087> `_ ) * various bug fixes, including: * make ``check_sha256_checksums`` verify all checksums if they're specified as a dict value ( `#4076 <https://github.com/easybuilders/easybuild-framework/pull/4076> `_ ) * replace use of symlink with copied files in ``alt_location`` tests to fix failing EasyBuild installation on BeeGFS ( `#4083 <https://github.com/easybuilders/easybuild-framework/pull/4083> `_ ) * fix trying to generate RPATH wrappers for Clang ( `#4088 <https://github.com/easybuilders/easybuild-framework/pull/4088> `_ ) * make sure that GitPython version is a proper version before checking minimal required version ( `#4090 <https://github.com/easybuilders/easybuild-framework/pull/4090> `_ , `#4091 <https://github.com/easybuilders/easybuild-framework/pull/4091> `_ ) * first look for patch in ``alt_location`` when it is specified ( `#4093 <https://github.com/easybuilders/easybuild-framework/pull/4093> `_ ) * other changes: * make scripts executable ( `#4081 <https://github.com/easybuilders/easybuild-framework/pull/4081> `_ ) * make ``--inject-checksums`` inject dictionary value for checksums which maps filename to SHA256 checksum ( `#4085 <https://github.com/easybuilders/easybuild-framework/pull/4085> `_ ) * update to v3 of actions/checkout and actions/setup-python in CI workflows ( `#4089 <https://github.com/easybuilders/easybuild-framework/pull/4089> `_ ) * use ``SYSTEM`` template constant in dependencies instead of ``True`` in framework tests ( `#4094 <https://github.com/easybuilders/easybuild-framework/pull/4094> `_ ) **easyblocks** * 2 new software-specific easyblock: * CUDA compatibility libraries ( `#2764 <https://github.com/easybuilders/easybuild-easyblocks/pull/2764> `_ ) and mamba ( `#2808 <https://github.com/easybuilders/easybuild-easyblocks/pull/2808> `_ ) * minor enhancements and updates, including: * update OpenFOAM easyblock to support OpenFOAM 10 + clean up variant/version checks ( `#2766 <https://github.com/easybuilders/easybuild-easyblocks/pull/2766> `_ ) * added support for ESMPy in ESMF ( `#2789 <https://github.com/easybuilders/easybuild-easyblocks/pull/2789> `_ ) * enhance OpenBLAS easyblock to support running LAPACK test suite + checking how many tests fail ( `#2801 <https://github.com/easybuilders/easybuild-easyblocks/pull/2801> `_ ) * make numexpr easyblock aware of toolchain with GCC + imkl ( `#2810 <https://github.com/easybuilders/easybuild-easyblocks/pull/2810> `_ ) * add sanity check commands for netCDF ( `#2811 <https://github.com/easybuilders/easybuild-easyblocks/pull/2811> `_ ) * various bug fixes, including: * handle problems copying symlink that points to CUDA folder that is not created for non CUDA builds of SuiteSparse ( `#2790 <https://github.com/easybuilders/easybuild-easyblocks/pull/2790> `_ ) * don't install docs (to avoid trouble with Java) + add Rocky support for ABAQUS ( `#2792 <https://github.com/easybuilders/easybuild-easyblocks/pull/2792> `_ ) * correctly count the number of failing tests (not failing test suites) in PyTorch builds ( `#2794 <https://github.com/easybuilders/easybuild-easyblocks/pull/2794> `_ , `#2803 <https://github.com/easybuilders/easybuild-easyblocks/pull/2803> `_ ) * fix docstring for PyTorch easyblock ( `#2795 <https://github.com/easybuilders/easybuild-easyblocks/pull/2795> `_ ) * handle iterative builds with MakeCp easyblock ( `#2798 <https://github.com/easybuilders/easybuild-easyblocks/pull/2798> `_ ) * accept both ``None`` and empty value for optarch to let OpenCV detect host CPU ( `#2804 <https://github.com/easybuilders/easybuild-easyblocks/pull/2804> `_ ) * enhance EasyBuildMeta easyblock: auto-enable installing with pip + fix setup.py of easyconfigs package so installation with setuptools >= 61.0 works ( `#2805 <https://github.com/easybuilders/easybuild-easyblocks/pull/2805> `_ ) * use ``python -m pip`` instead of ``pip`` in PythonPackage easyblock ( `#2807 <https://github.com/easybuilders/easybuild-easyblocks/pull/2807> `_ ) * other changes: * make the test output from PythonPackage less verbose by disabling default search for error patterns done by ``run_cmd`` ( `#2797 <https://github.com/easybuilders/easybuild-easyblocks/pull/2797> `_ ) **easyconfigs** * add easyconfig for intel/2022.09 toolchain ( `#16435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16435> `_ ) * added example easyconfig files for 25 new software packages: * AGAT ( `#16261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16261> `_ ), AMAPVox ( `#16438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16438> `_ ), Avogadro2 ( `#16257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16257> `_ ), buildingspy ( `#16308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16308> `_ ), CDBtools ( `#16436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16436> `_ ), Compress-Raw-Zlib ( `#16307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16307> `_ ), CUDAcompat ( `#15892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15892> `_ ), CWIPI ( `#16342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16342> `_ ), enchant-2 ( `#16082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16082> `_ , `#16319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16319> `_ ), f90wrap ( `#16346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16346> `_ ), Imath ( `#16276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16276> `_ ), Mamba ( `#16432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16432> `_ ), Miller ( `#16221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16221> `_ ), nghttp2 ( `#16096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16096> `_ ), ngtcp2 ( `#16098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16098> `_ ), NVSHMEM ( `#16254 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16254> `_ ), pairsnp ( `#16331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16331> `_ ), paladin ( `#16320 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16320> `_ ), PyMOL ( `#16394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16394> `_ ), python-irodsclient ( `#16328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16328> `_ ), ruffus ( `#16428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16428> `_ ), TELEMAC-MASCARET ( `#16274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16274> `_ ), torchdata ( `#16344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16344> `_ ), Waylandpp ( `#16092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16092> `_ ), x13as ( `#16163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16163> `_ ) * added additional easyconfigs for various supported software packages, including: * Amber 22.0, AMS 2022.102, ASE 3.22.1, atools 1.5.1, Beast 2.6.7, biogeme 3.2.10, Boost.Python 1.79.0, ccache 4.6.3, dbus-glib 0.112, Delly 1.1.5, ESMF 8.3.0, expat 2.4.9, FDS 6.7.9, file 5.43, FLTK 1.3.8, FTGL 2.4.0, gc 8.2.2, GitPython 3.1.27, Go 1.18.3, GPAW 22.8.0, Guile 3.0.8, htop 3.2.1, hunspell 1.7.1, IPython 8.5.0, jq 1.6, Julia 1.8.2, LDC 1.30.0, libcint 5.1.6, libconfig 1.7.3, libreadline 8.2, LibSoup 3.0.7, LIBSVM 3.30, libwebp 1.2.4, likwid 5.2.2, MariaDB 10.9.3, matplotlib 3.5.2, ncdu 1.17, netcdf4-python 1.6.1, Nextflow 22.10.0, NFFT 3.5.3, Nipype 1.8.5, numactl 2.0.16, onedrive 2.4.21, OpenCV 4.6.0, OpenEXR 3.1.5, OpenJPEG 2.5.0, OpenMM 7.7.0, OpenPGM 5.2.122, OpenSSL 1.1.1q, Perl 5.36.0, Pillow-SIMD 9.2.0, pkgconf 1.9.3, PostgreSQL 14.4, PyCharm 2022.2.2, PyTorch 1.12.0, PyTorch 1.12.0, PyTorch-Lightning 1.7.7, RDFlib 6.2.0, SAMtools 1.16.1, scikit-learn 1.1.2, Score-P 7.1, SDL2 2.0.22, spaln 2.4.12, spglib-python 2.0.0, SuiteSparse 5.13.0, SUNDIALS 6.3.0, sympy 1.11.1, tensorboard 2.10.0, torchvision 0.13.1, TRIQS 3.1.1, TRIQS-cthyb 3.1.0, TRIQS-dft_tools 3.1.0, TRIQS-tprf 3.1.1, TRUST4 1.0.7, TurboVNC 3.0.1, typing-extensions 4.3.0, UCX 1.13.1, umap-learn 0.5.3, VEP 107, VMD 1.9.4a57, Wayland 1.21.0, wxWidgets 3.2.1, xprop 1.2.5 * minor enhancements, including: * configure recent pocl versions with ``-DLLC_HOST_CPU=native`` to avoid CPU auto-detection ( `#16246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16246> `_ ) * add multi-dep exception to easyconfigs test suite for ncbi-vdb-3.0.0 which requires HDF5 1.10.x ( `#16316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16316> `_ ) * enable running of LAPACK tests for recent OpenBLAS easyconfigs + add patch to fix failing LAPACK tests due to use of ``-ftree-vectorize`` ( `#16406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16406> `_ ) * add ``GITHUB_(LOWER_)RELEASE`` to known constants in ``setup.cfg`` ( `#16422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16422> `_ ) * add AMAPVox extension to R v4.2.1 ( `#16439 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16439> `_ ) * add OpenEXR dependency to POV-Ray 3.7.0.10 ( `#16408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16408> `_ ) * various bug fixes, including: * add patch for OpenBLAS 0.3.7-0.3.12 to fix miscomputation on POWER ( `#16199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16199> `_ ) * skip flaky test in PyTorch 1.9.0 ( `#16258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16258> `_ ) * add ``--with-versioned-syms`` to ncurses 6.2 and 6.3 ( `#16270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16270> `_ ) * add missing pkg-config build dependency to Guile ( `#16317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16317> `_ ) * add patches to fix incompatibilites between ASE and other packages in 2022a toolchain ( `#16332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16332> `_ ) * add patches to fix PyTorch 1.11 on POWER ( `#16339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16339> `_ ) * add patches for Ambertools 21 to Amber 20.11 to work with updated Amber easyblock ( `#16343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16343> `_ ) * use Intel MPI from EasyBuild toolchain in AMS ( `#16363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16363> `_ ) * fix execution permissions for ``bin/ngm*`` for NextGenMap v0.5.5 ( `#16383 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16383> `_ ) * fix using provided Qhull and freetype dependencies for matplotlib 3.5.2 by creating ``mplsetup.cfg`` rather than ``setup.cfg`` ( `#16396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16396> `_ ) * fix GitHub download link in for libpsl 0.21.1 ( `#16397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16397> `_ ) * stick to http in source URL for ``stride.tar.gz`` in VMD 1.9.4a51 easyconfigs due to problems with SSL certificate ( `#16403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16403> `_ ) * add patch to detect available cores and remove unneeded deps for Unicycler 0.5.0 ( `#16407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16407> `_ ) * add missing ICU + libunistring dependencies for libpsl 0.21.1 w/ GCCcore/10.3.0 ( `#16410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16410> `_ ) * add patch to GCC 11.x + 12.x to fix vectorizer bug ( `#16411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16411> `_ ) * fix checksum for GULP 6.1 ( `#16423 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16423> `_ ) * add bzip2 and libxml2 as dependencies for netCDF 4.9.0 ( `#16450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16450> `_ ) * other changes: * drop Java dep from ABAQUS 2022 ( `#16314 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16314> `_ ) * deprecate use of ``True`` in favour of ``SYSTEM`` for system-toolchain dependencies in easyconfigs using a recent toolchain version (>2019b) ( `#16384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16384> `_ ) * update easyconfigs to use ``SYSTEM`` template constant instead of ``True`` in dependencies ( `#16386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16386> `_ , `#16418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16418> `_ ) * update libxml2 + libxslt easyconfigs to use ``gnome.org`` source URL ( `#16429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16429> `_ ) .. _release_notes_eb461: EasyBuild v4.6.1 (September 12th 2022) -------------------------------------- bugfix/update release **framework** * various enhancements, including: * add script to find dependencies of Python packages ( `#3839 <https://github.com/easybuilders/easybuild-framework/pull/3839> `_ ) * add ``ai`` default module class ( `#4053 <https://github.com/easybuilders/easybuild-framework/pull/4053> `_ ) * various bug fixes, including: * fix code style issues reported by recent flake8 linter ( `#4049 <https://github.com/easybuilders/easybuild-framework/pull/4049> `_ ) * stick to autopep8 < 1.7.0 with Python 2.7 ( `#4055 <https://github.com/easybuilders/easybuild-framework/pull/4055> `_ ) * ensure we call ``EasyBlock.patch_step`` for ``postinstallpatches`` ( `#4063 <https://github.com/easybuilders/easybuild-framework/pull/4063> `_ ) * fix leaked handles in ``set_columns`` , ``complete_cmd`` , ``run_cmd_qa`` , ``det_terminal_size functions`` + tests ( `#4066 <https://github.com/easybuilders/easybuild-framework/pull/4066> `_ ) * fix ``quote_str`` when string with both ``'`` and ``\"`` ends with a double quote ( `#4068 <https://github.com/easybuilders/easybuild-framework/pull/4068> `_ ) * fix type-checking of patches to allow dict values + correctly handle patches specified as dict values in ``--new-pr`` ( `#4070 <https://github.com/easybuilders/easybuild-framework/pull/4070> `_ ) * relax toolchain test by accepting both ``-march=native`` (x86_64) and ``-mcpu=native`` (aarch64) ( `#4071 <https://github.com/easybuilders/easybuild-framework/pull/4071> `_ ) * other changes: * run python in the same process as ``eb`` wrapper script by using ``exec`` ( `#4048 <https://github.com/easybuilders/easybuild-framework/pull/4048> `_ ) * add ``get_linked_libs_raw`` function, and use it from both ``check_linked_shared_libs`` and ``sanity_check_rpath`` ( `#4051 <https://github.com/easybuilders/easybuild-framework/pull/4051> `_ ) * update CI workflows (except container tests) to use Ubuntu 20.04, since Ubuntu 18.04 is deprecated ( `#4064 <https://github.com/easybuilders/easybuild-framework/pull/4064> `_ ) * use ``SYSTEM`` constant for dependency that uses system toolchain in dumped easyconfig ( `#4069 <https://github.com/easybuilders/easybuild-framework/pull/4069> `_ ) **easyblocks** * minor enhancements and updates, including: * update LAMMPS easyblock for LAMMPS/23Jun22 ( `#2213 <https://github.com/easybuilders/easybuild-easyblocks/pull/2213> `_ ) * reduce the number of command line options for ``cmake`` command in CMakeMake generic easyblock ( `#2514 <https://github.com/easybuilders/easybuild-easyblocks/pull/2514> `_ ) * update libQGLViewer easyblock to take into account changes in the shared library names depending on Qt versions they are compiled with ( `#2730 <https://github.com/easybuilders/easybuild-easyblocks/pull/2730> `_ ) * improve PLUMED detection in GROMACS easyblock ( `#2749 <https://github.com/easybuilders/easybuild-easyblocks/pull/2749> `_ ) * make ``$LD_LIBRARY_PATH`` detection more robust for LAMMPS ( `#2765 <https://github.com/easybuilders/easybuild-easyblocks/pull/2765> `_ ) * enhance NVHPC easyblock to avoid superfluous warning ( `#2767 <https://github.com/easybuilders/easybuild-easyblocks/pull/2767> `_ ) * enhance PyTorch easyblock to also capture tests failing with signal ( `#2768 <https://github.com/easybuilders/easybuild-easyblocks/pull/2768> `_ ) * enhance PythonPackage easyblock to make sure all test command output makes it to the EasyBuild log, also when ``return_output_ec=True`` ( `#2770 <https://github.com/easybuilders/easybuild-easyblocks/pull/2770> `_ ) * set ``$NVHPC_CUDA_HOME`` for NVHPC 22.7+ ( `#2776 <https://github.com/easybuilders/easybuild-easyblocks/pull/2776> `_ ) * various bug fixes, including: * make Amber easyblock aware of FlexiBLAS ( `#2720 <https://github.com/easybuilders/easybuild-easyblocks/pull/2720> `_ ) * update PyTorch easyblock to configure without breakpad support on POWER ( `#2763 <https://github.com/easybuilders/easybuild-easyblocks/pull/2763> `_ ) * use ``lib*`` in ``post_install`` step of FFTW.MPI easyblock to fix paths not being found on Linux distros favouring lib64 (like Suse/SLES) ( `#2771 <https://github.com/easybuilders/easybuild-easyblocks/pull/2771> `_ ) * use ``det_cmake_version`` function to determine CMake version in CMakeMake generic easyblock ( `#2772 <https://github.com/easybuilders/easybuild-easyblocks/pull/2772> `_ ) * don't enable building of ``ld.gold`` when installing binutils on a RISC-V system + don't configure GCC to use gold as default linker on a RISC-V system ( `#2780 <https://github.com/easybuilders/easybuild-easyblocks/pull/2780> `_ ) * tweak Amber(Tools) easyblock to run tests from top-level directory ( `#2781 <https://github.com/easybuilders/easybuild-easyblocks/pull/2781> `_ ) * fix version check for NVPTX library in sanity check of Clang easyblock ( `#2783 <https://github.com/easybuilders/easybuild-easyblocks/pull/2783> `_ ) * other changes: * update CI workflows to use Ubuntu 20.04 (since Ubuntu 18.04 is deprecated) ( `#2779 <https://github.com/easybuilders/easybuild-easyblocks/pull/2779> `_ ) **easyconfigs** * added example easyconfig files for 37 new software packages: * AptaSUITE ( `#8583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8583> `_ ), BigDFT ( `#15860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15860> `_ ), colossalai ( `#15971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15971> `_ ), CrystFEL ( `#8407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8407> `_ ), Dakota ( `#15883 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15883> `_ , `#16210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16210> `_ ), FastFold ( `#15972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15972> `_ ), fastparquet ( `#15020 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15020> `_ ), FOX-Toolkit ( `#15986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15986> `_ ), GLM-AED ( `#15879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15879> `_ ), hiredis ( `#16071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16071> `_ ), how_are_we_stranded_here ( `#16220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16220> `_ , `#16227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16227> `_ ), indicators ( `#16209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16209> `_ ), JavaFX ( `#8583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8583> `_ ), json-fortran ( `#15979 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15979> `_ ), jupyter-resource-usage ( `#15834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15834> `_ ), libev ( `#16086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16086> `_ ), libmad ( `#16067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16067> `_ ), libplinkio ( `#13040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13040> `_ ), LuaJIT2-OpenResty ( `#16047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16047> `_ ), MetaMorpheus ( `#15825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15825> `_ ), mgltools ( `#16226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16226> `_ ), miniasm ( `#15858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15858> `_ ), muMerge ( `#16115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16115> `_ ), nano ( `#16198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16198> `_ ), nghttp3 ( `#16097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16097> `_ ), olaFlow ( `#16021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16021> `_ ), OpenFAST ( `#15983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15983> `_ , `#15983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15983> `_ ), OpenFold ( `#15971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15971> `_ ), Phantompeakqualtools ( `#15871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15871> `_ ), pyGenomeTracks ( `#16143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16143> `_ ), QuickPIC ( `#15978 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15978> `_ ), RheoTool ( `#16077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16077> `_ ), Satsuma2 ( `#16068 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16068> `_ ), SMC++ ( `#16017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16017> `_ ), stripy ( `#15866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15866> `_ ), UCC-CUDA ( `#15956 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15956> `_ ), VESTA ( `#16217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16217> `_ ) * added additional easyconfigs for various supported software packages, including: * alevin-fry 0.6.0, AmberTools 22.3, arrow-R 8.0.0, ASE 3.22.1, BBMap 38.98, BCFtools 1.15.1, binutils 2.39, BLAST+ 2.13.0, Bowtie2 2.4.5, BUSCO 5.4.3, CapnProto 0.10.2, Cartopy 0.20.3, ccache 4.6.1, cclib 1.7.2, CDO 2.0.5, CellRanger-ATAC 2.1.0, CoordgenLibs 3.0.1, cURL 7.84.0, cuTENSOR 1.6.0.3, einops 0.4.1, Elk 8.5.2, Emacs 28.1, Embree 3.13.4, FFmpeg 4.4.2 + 5.0.1, fio 3.32, Flask 2.2.2, Flye 2.9.1, fmt 9.1.0, FORD 6.1.15, FreeSurfer 7.3.2, GATE 9.2, GATK 4.2.6.1, GCC(core) 12.2.0, GDB 12.1, Geant4 11.0.2, GetOrganelle 1.7.6.1, gifsicle 1.93, GLFW 3.3.8, glib-networking 2.72.1, Globus-CLI 3.6.0, gnuplot 5.4.4, gperftools 2.10, Graphviz 5.0.0, Gurobi 9.5.2, HDF5 1.12.2, HTSlib 1.15.1, Hypre 2.25.0, Jansson 2.14, jax 0.3.14, Kalign 3.3.2, kim-api 2.3.0, LAMMPS 23Jun2022, libcerf 2.1, libdwarf 0.4.1, Libint 2.7.2, libQGLViewer 2.8.0, LibSoup 2.74.0, libzip 1.9.2, Lua 5.4.4, lxml 4.9.1, maeparser 1.3.0, matplotlib 3.5.2, MATSim 14.0, MDAnalysis 2.2.0, medaka 1.6.0, Megalodon 2.5.0, Mercurial 6.2, MetaEuk 6, Mini-XML-3.3.1, MUMmer 4.0.0rc1, MUMPS 5.5.1, netCDF-Fortran 4.6.0, NGSpeciesID 0.1.2.1, ont-remora 1.0.0, OpenFOAM v2206, OTF2 3.0, parallel 20220722, ParaView 5.10.1, patchelf 0.15.0, Perl 5.36.0, pftoolsV3 3.2.12, PLINK 2.00a3.6, pretty-yaml 21.10.1, PRSice 2.3.5, pugixml 1.12.1, Pyomo 6.4.2, PyOpenCL 2021.2.13, Pysam 0.19.1, PyStan 3.5.0, PyYAML 6.0, RDKit 2022.03.5, scikit-bio 0.5.7, scikit-build 0.15.0, scikit-learn 1.1.2, scikit-optimize 0.9.0, SCOTCH 7.0.1, SIONlib 1.7.7, SISSO 3.1, spglib-python 2.0.0, Stacks 2.62, Stata 17, SUMO 1.14.1, tbb 2021.5.0, tqdm 4.64.0, Transformers 4.21.1, Trycycler 0.5.3, Unicycler 0.5.0, Valgrind 3.19.0, ViennaRNA 2.5.1, VTune 2022.3.0.eb, wxPython 4.1.1, x264 20220620, Z3 4.10.2, zfp 1.0.0 * minor enhancements, including: * add alternate download URL for Voro++ ( `#15898 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15898> `_ ) * add extra symlinks and sanity checks for libtinfo in ncurses ( `#15903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15903> `_ ) * include some easyconfig constants in flake8 configuration file ( `#16040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16040> `_ ) * add pigz dependency for cutadapt v3.4 + v3.5 ( `#16056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16056> `_ ) * add sanity check commands for recent gettext versions (>= 0.20.x) ( `#16091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16091> `_ ) * various bug fixes, including: * use correct Matlab Runtime Compiler (v8.4) for FreeSurfer v7.1.1 ( `#13375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13375> `_ ) * fix set-alias statements for MaxQuant v2.0.3.0 ( `#15743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15743> `_ ) * add Autotools build dependency to R 4.2.0 w/ foss 2021b ( `#15822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15822> `_ ) * add patch for BLIS to fix auto-detection of POWER ( `#15826 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15826> `_ ) * downgrade SPAdes dependency to v3.13.1 for Unicycler 0.4.9 since v3.15.3 is too new ( `#15840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15840> `_ ) * explicitly enable HDF5 from kallisto v0.46.2 onwards ( `#15843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15843> `_ ) * add CVE patch for XZ 5.2.5 + attempt to fix symbol patch for all OSs ( `#15856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15856> `_ ) * use build environment set by EasyBuild and add missing dependency on zlib to minimap2 ( `#15859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15859> `_ ) * add missing dependencies and execute tests on Trycycler v0.5.2 ( `#15864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15864> `_ ) * add patch for AlphaFold v2.2.2 to fix NaN problem with jax 0.3.9 ( `#15874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15874> `_ ) * exclude (flaky) ``fault_tolerance_test`` and fix non-x86 build for TensorFlow 2.7.1 ( `#15882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15882> `_ ) * work around miscompilation of OpenBLAS on POWER by compiling with ``-fstack-protector-strong`` ( `#15885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15885> `_ ) * fix tests on POWER9 for BLIS 0.9.0 + fix auto-detect for POWER10 for BLIS (AMD) v2.0 + v3.0 ( `#15889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15889> `_ ) * add and fix patches for PyTorch 1.9.0 on POWER ( `#15919 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15919> `_ ) * exclude Binary, PackedBinary and JAR easyblocks from binutils build requirements ( `#15932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15932> `_ ) * consistently add libffi + elfutils dependencies to recent Clang easyconfigs ( `#15935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16935> `_ , `#16225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16225> `_ ) * add patch to fix broken test on POWER for numpy in SciPy-bundle 2022.05 ( `#15968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15968> `_ ) * refactor checksum test for extensions to use ``collect_exts_file_info`` ( `#15973 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15973> `_ ) * fix dependency on FOX Toolkit in SUMO ( `#15986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15986> `_ ) * add missing SciPy-bundle dependency for rMATS-turbo ( `#15988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15988> `_ ) * explicitly download wannier90 source tarball from wannier90 GitHub repository in QuantumESPRESSO 7.1 easyconfigs ( `#15993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15993> `_ ) * restore ploteig in EIGENSOFT 7.2.1 ( `#15996 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15996> `_ ) * add alternative checksum for plot3Drgl extension in R v4.1.x + v4.2.0 easyconfigs ( `#16011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16011> `_ ) * add patch to fix missing sync in LINCS and SETTLE CUDA kernels for GROMACS 2020 ( `#16027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16027> `_ ) and 2021 ( `#16026 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16026> `_ ) * exclude failing test in TensorFlow 2.4.1 ( `#16042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16042> `_ ) * skip NASA performance and remote server tests in netCDF v4.9.0 ( `#16050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16050> `_ , `#16158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16158> `_ ) * use versioned symbols in ncurses built with system toolchain (by adding ``--with-versioned-syms`` configure option) ( `#16064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16064> `_ ) * add patch to fix pkgconfig file for Blitz++ v1.0.2 ( `#16102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16102> `_ ) * add missing BCFtools dependency for recent medaka versions ( `#16107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16107> `_ ) * add GTK2 v2.24.33 as a dependency for Ghostscript v9.56.1 ( `#16112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16112> `_ ) * fix checksum for Stacks v2.62 (due to silent re-release without version bump) ( `#16134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16134> `_ ) * fix libsanitzer for glibc 2.36 to build GCCcore 11.3.0 ( `#16145 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16145> `_ ) * fix top level Makefile for AmberTools 20 and enable tests ( `#16150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16150> `_ ) * add missing patches + enable running tests for AmberTools 21 with intel/2021a ( `#16151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16151> `_ ) and intel/2021b ( `#16152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16152> `_ ) * replace HDF5 v1.13.1 with v1.12.1 as dependency, since we shouldn't use odd minor versions of HDF5 which are not stable releases ( `#16153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16153> `_ ) * remove modextrapaths to add top-level install directory to ``$PATH ``for recent InterProScan easyconfigs (now done by default by Binary easyblock) (`#16167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16167>`_) * fix sources + source URL + homepage for Molekel v5.4.0 ( `#16219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16219> `_ ) * consistently add maeparser + CoordgenLibs dependencies to OpenBabel 3.1.1 easyconfigs ( `#16231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16231> `_ ) * fix checksum for CUDA 11.4.1 aarch64 installer ( `#16234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16234> `_ ) * remove incorrect comment for Boost dependency in OpenBabel 3.1.1 easyconfigs ( `#16238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16238> `_ ) * add direct Pango dependency in recent ImageMagick easyconfigs ( `#16237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16237> `_ ) * other changes: * remove superfluous ``-DCMAKE_BUILD_TYPE=Release`` , use of ``build_type = Release`` , or enabling ``separate_build_dir`` from easyconfigs using CMakeMake easyblock ( `#13384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13384> `_ ) * synchronize ncurses easyconfigs using system toolchain ( `#15903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15903> `_ ) * stick to Java/11 as dependency for Bazel 5.1.1 (which is available for x86_64, aarch64, ppc64le) ( `#15906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15906> `_ ) * speed up OpenMPI 4.1.4 configure by not running ``autogen.pl --force`` , but only running required Autotools commands ( `#15957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15957> `_ ) * replace sed commands by upstreamed patches for BLIS built with intel-compilers toolchain ( `#15958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15958> `_ ) * simplify AlphaFold foss/2021a easyconfigs by using a fleshed out patched OpenMM dependency ( `#15981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15981> `_ ) * update Java/11 to 11.0.16 and Java/17 to 17.0.4 ( `#16001 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16001> `_ ) * remove unnecessary patch in recent JupyterLab ( `#16030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16030> `_ ) * update CI workflows to use Ubuntu 20.04 (since Ubuntu 18.04 is deprecated) ( `#16070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16070> `_ ) * make check for toolchain value in dependency spec in easyconfigs test suite aware that dumped easyconfig uses ``SYSTEM`` constant ( `#16126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/16126> `_ ) .. _release_notes_eb460: EasyBuild v4.6.0 (July 8th 2022) -------------------------------- feature release **framework** * various enhancements, including: * allow searching for sources/patches in alternative location by specifying ' ``alt_location`` ' in source/patch spec ( `#3994 <https://github.com/easybuilders/easybuild-framework/pull/3994> `_ ) * show URLs used for download attempts in trace output ( `#4026 <https://github.com/easybuilders/easybuild-framework/pull/4026> `_ ) * add support for setting environment variables via ' ``pushenv`` ' with ``modextravars`` ( `#4030 <https://github.com/easybuilders/easybuild-framework/pull/4030> `_ ) * add support for OneAPI compilers using toolchain option ' ``oneapi`` ' ( `#4031 <https://github.com/easybuilders/easybuild-framework/pull/4031> `_ , `#4032 <https://github.com/easybuilders/easybuild-framework/pull/4032> `_ , `#4039 <https://github.com/easybuilders/easybuild-framework/pull/4039> `_ ) * make ``check_linked_shared_libs`` more robust by taking into account that ' ``ldd`` ' may fail ( `#4033 <https://github.com/easybuilders/easybuild-framework/pull/4033> `_ ) * fall back to sequential extension install if parallel install is not implemented ( `#4034 <https://github.com/easybuilders/easybuild-framework/pull/4034> `_ ) * add support for using template values in name/version of extensions ( `#4036 <https://github.com/easybuilders/easybuild-framework/pull/4036> `_ ) * various bug fixes, including: * make sure that ``ARCH`` constant has ' ``aarch64`` ' (rather than ' ``arm64`` ') as value on macOS ARM ( `#4018 <https://github.com/easybuilders/easybuild-framework/pull/4018> `_ ) * tweak ' ``eb`` ' wrapper script to correctly handle errors when python command being considered fails to run ( `#4019 <https://github.com/easybuilders/easybuild-framework/pull/4019> `_ ) * tweak ``is_patch_for`` function to make it more robust ( `#4028 <https://github.com/easybuilders/easybuild-framework/pull/4028> `_ ) * other changes: * update Lmod used to run tests to version 8.7.6 ( `#4027 <https://github.com/easybuilders/easybuild-framework/pull/4027> `_ , `#4030 <https://github.com/easybuilders/easybuild-framework/pull/4030> `_ ) * tweak ``apply_patch`` to not create ``.orig files`` (by default) when applying patch files ( `#4038 <https://github.com/easybuilders/easybuild-framework/pull/4038> `_ ) **easyblocks** * new software-specific easyblock for STAR-CCM+ ( `#1613 <https://github.com/easybuilders/easybuild-easyblocks/pull/1613> `_ ) * minor enhancements and updates, including: * update Siesta EasyBlock to support GCC 10+ by adding ``-fallow-argument-mismatch`` Fortran compiler option ( `#2690 <https://github.com/easybuilders/easybuild-easyblocks/pull/2690> `_ ) * enable building of shared library for Libint 2.7+ ( `#2738 <https://github.com/easybuilders/easybuild-easyblocks/pull/2738> `_ ) * allow some PyTorch tests to fail + print warning if one or more tests fail ( `#2742 <https://github.com/easybuilders/easybuild-easyblocks/pull/2742> `_ ) * also support OpenSSL 3.0 in OpenSSL wrapper easyblock ( `#2746 <https://github.com/easybuilders/easybuild-easyblocks/pull/2746> `_ ) * add more logging to ``install_pc_files`` method of OpenSSL wrapper easyblock ( `#2752 <https://github.com/easybuilders/easybuild-easyblocks/pull/2752> `_ ) * make WPS easyblock aware of ``(pre)buildopts`` ( `#2754 <https://github.com/easybuilders/easybuild-easyblocks/pull/2754> `_ ) * add Abseil system dependency for TensorFlow 2.9+ ( `#2757 <https://github.com/easybuilders/easybuild-easyblocks/pull/2757> `_ ) * disable altivec when building FFTW versions < 3.4 with single-precision with GCC on POWER ( `#2758 <https://github.com/easybuilders/easybuild-easyblocks/pull/2758> `_ ) * various bug fixes, including: * make VEP easyblock compatible with ``--sanity-check-only`` ( `#2743 <https://github.com/easybuilders/easybuild-easyblocks/pull/2743> `_ ) * update Rosetta easyblock to take into account that ``$LD_LIBRARY_PATH`` , ``$CPATH`` , ``$PATH`` may not be defined ( `#2744 <https://github.com/easybuilders/easybuild-easyblocks/pull/2744> `_ ) * only load temporary module file during sanity check for pybind11 for stand-alone installations, so it can be installed as extension ( `#2747 <https://github.com/easybuilders/easybuild-easyblocks/pull/2747> `_ ) * make sure that ``CMakeMakeCp`` uses correct build dir ( `#2748 <https://github.com/easybuilders/easybuild-easyblocks/pull/2748> `_ ) * enhance Bazel easyblock to avoid writing to ``$HOME`` in sanity check ( `#2756 <https://github.com/easybuilders/easybuild-easyblocks/pull/2756> `_ ) **easyconfigs** * added easyconfigs for ``foss/2022a`` , ``intel/2022a`` common toolchains ( `#15755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15755> `_ ) * see also https://docs.easybuild.io/en/latest/Common-toolchains.html * add easyconfig for ``gfbf/2022a`` toolchain ( `#15653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15653> `_ , `#15755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15755> `_ ) * added example easyconfig files for 24 new software packages: * BLT ( `#15624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15624> `_ ), category_encoders ( `#15638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15638> `_ ), fio ( `#10321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10321> `_ ), FSON ( `#15721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15721> `_ ), G-PhoCS ( `#7619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7619> `_ ), GCTA ( `#15649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15649> `_ ), Gibbs2 ( `#15702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15702> `_ ), InterProScan_data ( `#15717 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15717> `_ ), Jorg ( `#15346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15346> `_ ), libopus ( `#15682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15682> `_ ), Minipolish ( `#15713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15713> `_ ), mm-common ( `#15764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15764> `_ ), MONA ( `#15696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15696> `_ ), NetPyNE ( `#15606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15606> `_ ), pfind ( `#15685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15685> `_ ), regionmask ( `#15786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15786> `_ ), samplot ( `#15686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15686> `_ ), SISSO ( `#15766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15766> `_ ), sklearn-pandas ( `#15637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15637> `_ ), STAR-CCM+ ( `#7398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7398> `_ ), SWIPE ( `#6795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6795> `_ ), topaz ( `#15739 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15739> `_ ), uncertainty-calibration ( `#15612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15612> `_ ), Virtuoso-opensource ( `#14102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14102> `_ ) * added additional easyconfigs for various supported software packages, including: * AlphaFold 2.2.2, Arriba 2.3.0, Arrow 8.0.0, Bracken 2.7, CellRanger 7.0.0, Clp 1.17.7, CoinUtils 2.11.6, cppy 1.2.1, deal.II 9.3.3, double-conversion 3.2.0, Doxygen 1.9.4, FLAC 1.3.4, fmt 7.1.1, FSL 6.0.5.1, GDAL 3.5.0, gdbm 1.21, geopandas 0.11.0, GEOS 3.10.3, Ghostscript 9.56.1, GLibmm 2.66.4, Groovy 4.0.3, GULP 6.1, h5py 3.7.0, HDF5 1.13.1, hifiasm 0.16.1, IGMPlot 2.6.9b, ImageMagick 7.1.0-37, InterProScan 5.55-88.0, IRkernel 1.3, jemalloc 5.3.0, JsonCpp 1.9.5, Julia 1.7.3, Leptonica 1.82.0, libgeotiff 1.7.1, libgit2 1.4.3, libiconv 1.17, libRmath 4.2.0, libsigc++ 2.10.8, libsndfile 1.1.0, libxc 5.2.3, libxml++ 2.42.1, line_profiler 3.5.1, LittleCMS 2.13.1, MaSuRCA 4.0.9, mayavi 4.7.4, MetaEuk 5, mold 1.3.0, NCCL 2.12.12, netCDF 4.9.0, nettle 3.8, networkx 2.8.4, NEURON 7.8.2, NLopt 2.7.1, nodejs 16.15.1, NSPR 4.34, NSS 3.79, nsync 1.25.0, nvtop 2.0.2, Osi 0.108.7, p4est 2.8, parasail 2.5, Pillow 9.1.1, PLUMED 2.8.0, PnetCDF 1.12.3, PRISMS-PF 2.2, PROJ 9.0.0, protobuf 3.19.4, protobuf-python 3.19.4, pyfaidx 0.7.0, PyOpenGL 3.1.6, pyproj 3.3.1, PyTorch 1.11.0, Qhull 2020.2, Qt5 5.15.5, QuantumESPRESSO 7.1, Qwt 6.2.0, R 4.2.1, rasterio 1.2.10, Ray-project 1.13.0, RE2 2022-06-01, redis-py 4.3.3, ReFrame 3.11.2, rioxarray 0.11.1, RNA-SeQC 2.4.2, Schrodinger 2022-2, Shapely 1.8.2, Siesta 4.1.5, SimpleITK 2.1.1.2, SpectrA 1.0.1, TensorFlow 2.7.1, Tk 8.6.12, Tkinter 3.10.4, Transformers 4.20.1, UCX-CUDA 1.12.1, utf8proc 2.7.0, WhatsHap 1.4, WPS 3.9.1, Xvfb 21.1.3 * minor enhancements, including: * add extensions to R v4.2.0: hypergeo ( `#15701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15701> `_ ), rtdists ( `#15734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15734> `_ ), geeM ( `#15810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15810> `_ ) * add patch for GCCcore 11.3.0 to support using ``-fuse-ld=mold`` ( `#15715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15715> `_ ) * add patch for porefoam to fix hardcoded ``mpirun`` command and take into account ``$POREFOAM_MPIRUN_CMD`` ( `#15730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15730> `_ ) * various bug fixes, including: * switch to Rust 1.60.0 build dependency for bamtofastq, since build fails with Rust 1.52.1 ( `#15636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15636> `_ ) * avoid that pygmo v2.18.0 installs stuff in Python installation directory + add custom sanity check paths to pygmo easyconfigs ( `#15657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15657> `_ ) * add patch for Mmg v5.6.0 to remove library CI tests that point to external sources ( `#15691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15691> `_ ) * correct configopts in deal.II v9.1.1 easyconfig ( `#15692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15692> `_ ) * add missing Python dependency for HPDBSCAN to fix unresolved ``%(pyshortver)s`` template ( `#15694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15694> `_ ) * other changes: * disable flaky GPU test for TensorFlow 2.6.0 ( `#15824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15824> `_ ) .. _release_notes_eb455: EasyBuild v4.5.5 (June 8th 2022) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add toolchain definitions for ``nvompi`` (NVHPC + OpenMPI) ( `#3969 <https://github.com/easybuilders/easybuild-framework/pull/3969> `_ ), ``nvpsmpi`` (NVHPC + ParaStationMPI) ( `#3970 <https://github.com/easybuilders/easybuild-framework/pull/3970> `_ ), ``gfbf`` (GCC, FlexiBLAS, FFTW) ( `#4006 <https://github.com/easybuilders/easybuild-framework/pull/4006> `_ ) * add support for ``FFTW.MPI`` toolchain component ( ``$FFT*DIR`` variables) ( `#4012 <https://github.com/easybuilders/easybuild-framework/pull/4012> `_ ) * add support for customizing EasyBuild command used in jobs via ``--job-eb-cmd`` ( `#4016 <https://github.com/easybuilders/easybuild-framework/pull/4016> `_ ) * various bug fixes, including: * fix copying of easyconfig file with ``--copy-ec`` without ``--rebuild`` if module is already installed ( `#3993 <https://github.com/easybuilders/easybuild-framework/pull/3993> `_ ) * ignore deprecation warnings regarding cryptography in Python 3.6 + Blowfish with Python 3.10 in test suite output ( `#3999 <https://github.com/easybuilders/easybuild-framework/pull/3999> `_ ) * fix typo in debug log message in ``easyblock.py`` ( `#4000 <https://github.com/easybuilders/easybuild-framework/pull/4000> `_ ) * fix printing of list of attempted download URLs when url-encoded characters are used in URL ( `#4005 <https://github.com/easybuilders/easybuild-framework/pull/4005> `_ ) * set ``$FFT(W)_LIB_DIR`` to imkl-FFTW's lib path in build environment if usempi toolchain option is enabled ( `#4011 <https://github.com/easybuilders/easybuild-framework/pull/4011> `_ ) * correctly identify Apple Silicon M1 as Arm 64-bit by also considering arm64 next to aarch64 ( `#4014 <https://github.com/easybuilders/easybuild-framework/pull/4014> `_ ) * fix ' ``eb --show-system-info`` ' on Apple M1 system ( `#4015 <https://github.com/easybuilders/easybuild-framework/pull/4015> `_ ) * other changes: * change ' ``eb`` ' command to ``import easybuild.framework`` to check if EasyBuild framework is available ( `#3995 <https://github.com/easybuilders/easybuild-framework/pull/3995> `_ , `#3998 <https://github.com/easybuilders/easybuild-framework/pull/3998> `_ ) **easyblocks** * new software-specific easyblock for FFTW.MPI ( `#2724 <https://github.com/easybuilders/easybuild-easyblocks/pull/2724> `_ ) * minor enhancements and updates, including: * update NEURON easyblock to use CMakeMake for recent versions ( `#2304 <https://github.com/easybuilders/easybuild-easyblocks/pull/2304> `_ ) * enhance Clang easyblock to add support for building with AMDGPU offload ( `#2684 <https://github.com/easybuilders/easybuild-easyblocks/pull/2684> `_ , `#2729 <https://github.com/easybuilders/easybuild-easyblocks/pull/2729> `_ ) * update sanity check in OpenMPI easyblock to support OpenMPI v5.0.0 ( `#2709 <https://github.com/easybuilders/easybuild-easyblocks/pull/2709> `_ ) * don't use ``gold`` linker by default for GCC >= 11.3 ( `#2711 <https://github.com/easybuilders/easybuild-easyblocks/pull/2711> `_ ) * update sanity check in R easyblock for versions >= 4.2.0, since S.h is not included anymore ( `#2713 <https://github.com/easybuilders/easybuild-easyblocks/pull/2713> `_ ) * update ABAQUS easyblock for ABAQUS 2022 ( `#2716 <https://github.com/easybuilders/easybuild-easyblocks/pull/2716> `_ ) * update LLVM easyblock for LLVM v14.0.x ( `#2718 <https://github.com/easybuilders/easybuild-easyblocks/pull/2718> `_ ) * update Mesa easyblock to remove swr driver configopts for versions 22+ ( `#2719 <https://github.com/easybuilders/easybuild-easyblocks/pull/2719> `_ ) * enhance Clang easyblock to support also installing Python bindings ( `#2721 <https://github.com/easybuilders/easybuild-easyblocks/pull/2721> `_ , `#2725 <https://github.com/easybuilders/easybuild-easyblocks/pull/2725> `_ ) * enhance SuperLU easyblock to support building on top of FlexiBLAS and be compatible with SuperLU v5.3 ( `#2722 <https://github.com/easybuilders/easybuild-easyblocks/pull/2722> `_ ) * update TensorFlow easyblock for version 2.8.0 ( `#2723 <https://github.com/easybuilders/easybuild-easyblocks/pull/2723> `_ ) * modify FFTW's sanity check step to allow checking only for MPI parts of FFTW installation ( `#2724 <https://github.com/easybuilders/easybuild-easyblocks/pull/2724> `_ ) * add support to ConfigureMake for tweaking (first part of) test command via ' ``test_cmd`` ' ( `#2726 <https://github.com/easybuilders/easybuild-easyblocks/pull/2726> `_ , `#2737 <https://github.com/easybuilders/easybuild-easyblocks/pull/2737> `_ ) * enhance MrBayes easyblock with custom sanity check command ( `#2727 <https://github.com/easybuilders/easybuild-easyblocks/pull/2727> `_ ) * update cudnnarch string templates used to compose source tarball names from cuDNN 8.3.3 onwards ( `#2728 <https://github.com/easybuilders/easybuild-easyblocks/pull/2728> `_ ) * add sanity check command to OpenSSL wrapper easyblock to verify that system certificates are available to OpenSSL ( `#2735 <https://github.com/easybuilders/easybuild-easyblocks/pull/2735> `_ ) * ignore exit code of ``pkg-config`` command in OpenSSL wrapper easyblock, since with ``pkgconf`` they exit with a non-zero exit code if the OS package is not installed ( `#2736 <https://github.com/easybuilders/easybuild-easyblocks/pull/2736> `_ ) * various bug fixes, including: * remove system-compiled binutils dirs from ``$LDFLAGS`` in binutils easyblock ( `#2712 <https://github.com/easybuilders/easybuild-easyblocks/pull/2712> `_ ) * fix for FreeSurfer easyblock: define ``$FREESURFER`` needed by recon_all ( `#2717 <https://github.com/easybuilders/easybuild-easyblocks/pull/2717> `_ ) * also symlink ``cert.pem`` in from-source OpenSSL installation (if it exists) ( `#2735 <https://github.com/easybuilders/easybuild-easyblocks/pull/2735> `_ ) **easyconfigs** * add candidates for 2022a common toolchains: ``foss/2022.05`` ( `#15561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15561> `_ ), intel/2022.05 ( `#15485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15485> `_ ) * added example easyconfig files for 35 new software packages: * Albumentations ( `#15302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15302> `_ ), AMPtk ( `#15435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15435> `_ ), arosics ( `#15249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15249> `_ ), CellTypist ( `#15530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15530> `_ ), detectron2 ( `#15442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15442> `_ ), EigenExa ( `#15234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15234> `_ ), Fastaq ( `#15332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15332> `_ ), FFTW.MPI ( `#15561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15561> `_ ), FreeBarcodes ( `#15350 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15350> `_ ), gcloud ( `#15443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15443> `_ ), GST-plugins-bad ( `#15446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15446> `_ ), gsutil ( `#15507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15507> `_ ), GTK4 ( `#15447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15447> `_ ), hector ( `#15397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15397> `_ ), i7z ( `#15236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15236> `_ ), libde265 ( `#15395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15395> `_ ), libheif ( `#15395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15395> `_ ), ModelTest-NG ( `#15448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15448> `_ ), num2words ( `#15473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15473> `_ ), OGDF ( `#15407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15407> `_ ), panito ( `#15314 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15314> `_ ), parameterized ( `#15481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15481> `_ ), purge_dups ( `#15385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15385> `_ ), redis-py ( `#15475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15475> `_ ), ruamel.yaml ( `#15531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15531> `_ ), SCGid ( `#15065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15065> `_ ), scPred ( `#15575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15575> `_ ), slow5tools ( `#15457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15457> `_ ), smooth-topk ( `#15506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15506> `_ ), SPOTPY ( `#15326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15326> `_ ), tmap ( `#14601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14601> `_ ), UCC ( `#14291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14291> `_ ), Wayland ( `#11107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11107> `_ ), XGrafix ( `#15268 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15268> `_ ), XPLOR-NIH ( `#15479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15479> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2022, Arb 2.22.1, ARGoS 3.0.0, Arriba 2.2.1, astropy 5.0.4, ATK 2.38.0, Autotools 20220317, Bader 1.04, Bazel 4.2.2 + 5.1.1, BDBag 1.6.3, binutils 2.38, biom-format 2.1.12, BLIS 0.9.0, Boost 1.79.0, breseq 0.36.1, bx-python 0.8.13, cairo 1.17.4, CellRanger-ARC 2.0.1, CMake 3.23.1, cryoDRGN 1.0.0, CUDA 11.7.0, cuDNN 8.4.1.50, cURL 7.83.0, DBus 1.14.0, eggnog-mapper 2.1.7, elfutils 0.187, EvidentialGene 2022.01.14, expat 2.4.8, FlexiBLAS 3.2.0, FLINT 2.8.4, fontconfig 2.14.0, freebayes 1.3.6, freeglut 3.2.2, freetype 2.12.1, FriBidi 1.0.12, GCC 9.5.0 + 11.3.0 + GCC 12.1.0, Gdk-Pixbuf 2.42.8, geopandas 0.10.2, git 2.36.0, GLib 2.72.1, GMAP-GSNAP 2021-21-17, Go 1.18.1, GObject-Introspection 1.72.0, Graphene 1.10.8, GST-plugins-base 1.20.2, GStreamer 1.20.2, GTDB-Tk 2.0.0, GTK3 3.24.33, gzip 1.12, HarfBuzz 4.2.1, help2man 1.49.2, hwloc 2.7.1, hypothesis 6.46.7, Hypre 2.24.0, ICU 71.1, IGV 2.12.3, IMB 2021.3, inferCNV 1.10.1, InterProScan 5.52, IQ-TREE 2.2.1, jax 0.3.9, json-c 0.16, LAPACK 3.10.1, libarchive 3.6.1, libdeflate 1.10, libdrm 2.4.110, libedit 20210910, libepoxy 1.5.10, libfabric 1.15.1, libglvnd 1.4.0, libjpeg-turbo 2.1.3, libreadline 8.1.2, librsb 1.3.0.1, librsvg 2.52.8, libtool 2.4.7, libunwind 1.6.2, libxml2 2.9.13, LLVM 14.0.3, LocARNA 1.9.2.3, MACS2 2.2.7.1, magma 2.6.2, Mako 1.2.0, Mathematica 13.0.0, MCL 14.137, MCR R2022a.1, Mesa 22.0.3, Meson 0.62.1, MIRA 5.0rc2, Mmg 5.6.0, mold 1.2.1, mosdepth 0.3.3, MrBayes 3.2.7a, MultiQC 1.12, MUMPS 5.5.0, muParser 2.3.3, ncurses 6.3, neptune-client 0.16.2, Nextflow 22.04.0, Nim 1.6.6, NTPoly 2.7.1, OpenMPI 4.1.4, openpyxl 3.0.9, OpenSSL 1.1.1n, OpenStackClient 5.8.0, OSU-Micro-Benchmarks 5.9, pagmo 2.18.0, Pango 1.50.7, parallel-fastq-dump 0.6.7, PCRE2 10.40, Perl 5.34.1, Pillow 9.1.0, PLINK 2.00a3.1, PMIx 4.1.2, PyAMG 4.2.3, pybind11 2.9.2, PyCairo 1.21.0, pygmo 2.18.0, PyGObject 3.42.1, Python 3.10.4, R 4.2.0, RAxML-NG 1.1.0, R-bundle-Bioconductor 3.15, ReFrame 3.11.0, RNA-Bloom 1.4.3, rnaQUAST 2.2.2, Rust 1.60.0, Sambamba 0.8.2, SAMtools 1.15.1, ScaLAPACK 2.2.0, SciPy-bundle 2022.05, SeqKit 2.2.0, Shapely 1.8.1.post1, SpaceRanger 1.3.1, Spack 0.17.2, Spark 3.2.1, SQLite 3.38.3, StringTie 2.2.1, SUMO 1.12.0, SuperLU 5.3.0, tbl2asn 20220427, Tcl 8.6.12, TCLAP 1.2.5, tcsh 6.24.01, texlive 20220321, ToFu 1.5.0, UCX 1.12.1, util-linux 2.38, VEP 105, ViennaRNA 2.5.0, vsc-mympirun 5.2.11, worker 1.6.13, X11 2022050, YAXT 0.9.2.1, Z3 4.8.16, Zip 3.0, zlib 1.2.12, zstd 1.5.2 * minor enhancements, including: * use OpenSSL wrapper dependency for CMake 3.18.4 with system toolchain ( `#15227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15227> `_ ) * also build BLIS backend for FlexiBLAS v3.0.4 with GCC/10.3.0 ( `#15347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15347> `_ ) * add extensions to R v4.1.2 + v4.2.0 easyconfigs: * Hmsc ( `#15393 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15393> `_ ), MonteCarlo + RhpcBLASctl ( `#15438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15438> `_ ), chkptstanr ( `#15540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15540> `_ ), chkptstanr + MLmetrics + renv ( `#15573 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15573> `_ ) * add extensions to R-bundle-Bioconductor 3.14 easyconfig: DNABarcodes ( `#15405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15405> `_ ) * use redist source_urls for cuDNN > 7.5 ( `#15411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15411> `_ ) * add download_instructions to Java 1.8 > 200 ( `#15412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15412> `_ ) * update Arrow to use EB versions of some dependencies and enable all compression codecs ( `#15512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15512> `_ ) * add csh -> tcsh symlink in recent tcsh easyconfigs ( `#15571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15571> `_ ) * allow external tools to be located elsewhere for ETE ( `#15578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15578> `_ ) * add additional sanity check commands for IQ-TREE v2.2.1 ( `#15596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15596> `_ ) * various bug fixes, including: * fix source URL for freetype 2.6.5 with ``foss/2016b`` ( `#14204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14204> `_ ) * fix installation of easybuild-easyconfigs with setuptools>=61 by explicitly declaring there are no Python packages ( `#15206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15206> `_ ) * use x.py to bootstrap Rust so that build options are properly passed through ( `#15211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15211> `_ ) * fix RepeatMasker-4.1.2-p1 easyconfig by moving the database configure command to postinstallcmds ( `#15280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15280> `_ , `#15615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15615> `_ ) * add hwloc dependency to tbb v2021.4.0 ( `#15294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15294> `_ ) * tweak find command used in preconfigopts in easyconfig for pkg-config v0.29.2 with system toolchain to avoid descending into other filesystems ( `#15313 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15313> `_ ) * remove pkg-config use from SeqLib configure patch (avoids problem due to faulty autoconf macro) ( `#15316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15316> `_ ) * update source URL for isl in GCCcore easyconfigs ( `#15320 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15320> `_ ) * update source URLs for YAXT 0.9.x to fix download ( `#15323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15323> `_ ) * define ``$HHLIB`` as path to HH-suite installation directory, required by Perl scripts ( `#15324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15324> `_ ) * add missing parallel and tbl2asn dependencies for prokka 1.14.5 ( `#15360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15360> `_ , `#15381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15381> `_ ) * add missing dependencies for libheif (libpng, libjpeg-turbo) ( `#15408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15408> `_ ) * switch to configuring build of libheif with CMake so libde265 dependency is picked up ( `#15408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15408> `_ ) * disable use of ``-ftree-vectorize`` for OpenFOAM v2112 with ``foss/2021b`` ( `#15495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15495> `_ ) * add patch for OpenMPI 4.1.1 to support building using ``--with-cuda=internal`` ( `#15528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15528> `_ , `#15589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15589> `_ ) * add patch to fix support for external PMIx v3.1 in OpenMPI v3.1.3 ( `#15566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15566> `_ ) * also build shared library + fix ``$PYTHONPATH`` for gmsh 4.9.0 ( `#15579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15579> `_ ) * add patch for GLib 2.68.2 to fix use of close_range ( `#15594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15594> `_ ) * fix download of thrift 0.12.0 for Arrow 0.16.0 ( `#15597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15597> `_ ) * add Bison and flex build dependencies to SCOTCH 6.1.x ( `#15618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15618> `_ ) * add alternative checksums for class, nnet, spatial extensions in R v4.2.0 easyconfig ( `#15619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15619> `_ ) * add missing dependencies + switch to non-static build for Arriba v2.1.0 ( `#15623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15623> `_ ) * other changes: * add R dependency to vcflib 1.0.3, and move from GCC/11.2.0 to ``foss/2021b`` toochain ( `#15216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15216> `_ ) * update fallback version for OpenSSL 1.1 wrapper to v1.1.1o ( `#15592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15592> `_ ) * install sklearn meta-package with scikit-learn v1.0.1 ( `#15613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15613> `_ ) * switch from ``pkg-config`` to ``pkgconf`` as build dependency for OpenSSL wrapper easyconfigs ( `#15616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15616> `_ , `#15617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15617> `_ ) .. _release_notes_eb454: EasyBuild v4.5.4 (March 31st 2022) ---------------------------------- bugfix/update release **framework** * various enhancements, including: * warn about potentially missing patches in ``--new-pr`` ( `#3759 <https://github.com/easybuilders/easybuild-framework/pull/3759> `_ , `#3966 <https://github.com/easybuilders/easybuild-framework/pull/3966> `_ ) * add support for ' ``clone_into`` ' field in git_config source spec to specify different name for top-level directory ( `#3949 <https://github.com/easybuilders/easybuild-framework/pull/3949> `_ ) * add bash completion for easyconfigs from local dir but not robot search path ( `#3953 <https://github.com/easybuilders/easybuild-framework/pull/3953> `_ ) * add a 'sync pr' message when the PR has a mergeable state but is showing a failed status for the test suite on the last commit ( `#3967 <https://github.com/easybuilders/easybuild-framework/pull/3967> `_ ) * add ``gmpit`` toolchain definition (GCC + MPItrampoline) ( `#3971 <https://github.com/easybuilders/easybuild-framework/pull/3971> `_ ) * use ' ``zypper search -i`` ' to check whether specified OS dependency is installed on openSUSE + make sure that rpm is considered for checking OS dependencies on RHEL8 ( `#3973 <https://github.com/easybuilders/easybuild-framework/pull/3973> `_ ) * add support for post-install patches ( `#3974 <https://github.com/easybuilders/easybuild-framework/pull/3974> `_ ) * add support for ' ``download_instructions`` ' easyconfig parameter key to specify some download or installation steps for user in case of complicated way of obtaining needed files ( `#3976 <https://github.com/easybuilders/easybuild-framework/pull/3976> `_ , `#3981 <https://github.com/easybuilders/easybuild-framework/pull/3981> `_ ) * also try collecting AMD GPU info (via ``rocm-smi`` ) for ``--show-system-info`` ( `#3978 <https://github.com/easybuilders/easybuild-framework/pull/3978> `_ , `#3982 <https://github.com/easybuilders/easybuild-framework/pull/3982> `_ ) * various bug fixes, including: * ensure ``--review-pr`` can find dependencies included in PR ( `#3979 <https://github.com/easybuilders/easybuild-framework/pull/3979> `_ ) * run ' ``apt-get update`` ' in GitHub Actions workflow for container tests to update container package list before installing anything ( `#3985 <https://github.com/easybuilders/easybuild-framework/pull/3985> `_ ) * other changes: * enable code linting check for all supported Python versions ( `#3725 <https://github.com/easybuilders/easybuild-framework/pull/3725> `_ ) * update copyright lines for 2022 ( `#3986 <https://github.com/easybuilders/easybuild-framework/pull/3986> `_ ) **easyblocks** * minor enhancements and updates, including: * update Clang-AOMP easyblock to add support for ROCm v5.0 ( `#2681 <https://github.com/easybuilders/easybuild-easyblocks/pull/2681> `_ ) * enable system SSL certificates in OpenSSL installations ( `#2683 <https://github.com/easybuilders/easybuild-easyblocks/pull/2683> `_ ) * enhance MRtrix easyblock: build in parallel + enable OpenMP support for MRtrix >= 3.0 ( `#2685 <https://github.com/easybuilders/easybuild-easyblocks/pull/2685> `_ ) * avoid dependency on ' ``which`` ' command in sanity check for Python, use ' ``command -v`` ' instead ( `#2687 <https://github.com/easybuilders/easybuild-easyblocks/pull/2687> `_ ) * enhance Tarball easyblock to support using it for installing extensions ( `#2688 <https://github.com/easybuilders/easybuild-easyblocks/pull/2688> `_ ) * update wxPython easyblock to support wxPython v4.1 ( `#2689 <https://github.com/easybuilders/easybuild-easyblocks/pull/2689> `_ ) * enhance Gurobi easyblock to also update ``$MATLABPATH`` ( `#2691 <https://github.com/easybuilders/easybuild-easyblocks/pull/2691> `_ ) * build single-file shared libraries for imkl so it can be used as FlexiBLAS backend via ``$FLEXIBLAS_LIBRARY_PATH`` ( `#2694 <https://github.com/easybuilders/easybuild-easyblocks/pull/2694> `_ ) * various bug fixes, including: * added regex to replace /lib/cpp with cpp in OpenFOAM's wmake rules file ( `#2331 <https://github.com/easybuilders/easybuild-easyblocks/pull/2331> `_ ) * set ``$NINJAFLAGS`` to make sure Ninja doesn't use all visible cores when building Qt5 ( `#2338 <https://github.com/easybuilders/easybuild-easyblocks/pull/2338> `_ ) * update Siesta EasyBlock to use serial FFTW ( `#2662 <https://github.com/easybuilders/easybuild-easyblocks/pull/2662> `_ ) * fix support for imkl for numexpr 2.8.0+ in numexpr easyblock ( `#2678 <https://github.com/easybuilders/easybuild-easyblocks/pull/2678> `_ ) * make sure TensorFlow doesn't see the ``nvptx-none`` dir when searching for ``gcc`` include dir ( `#2682 <https://github.com/easybuilders/easybuild-easyblocks/pull/2682> `_ ) * force use of bash for Anaconda install script ( `#2692 <https://github.com/easybuilders/easybuild-easyblocks/pull/2692> `_ ) * add guess for path to add to ``$MANPATH`` for intel-compilers ( `#2696 <https://github.com/easybuilders/easybuild-easyblocks/pull/2696> `_ ) * change permissions of the Java build directory to avoid permission denied error ( `#2698 <https://github.com/easybuilders/easybuild-easyblocks/pull/2698> `_ ) * also consider ``$MKLROOT/lib/pkgconfig`` for ``$PKG_CONFIG_PATH`` for imkl ( `#2701 <https://github.com/easybuilders/easybuild-easyblocks/pull/2701> `_ ) * close log after installing Bundle component ( `#2702 <https://github.com/easybuilders/easybuild-easyblocks/pull/2702> `_ ) * fixes problem of log leaking across installations ( `framework issue #3533 <https://github.com/easybuilders/easybuild-framework/issues/3533> `_ ) * replace hardcoded /tmp to make sure that Bazel build respects ``$TMPDIR`` ( `#2703 <https://github.com/easybuilders/easybuild-easyblocks/pull/2703> `_ ) * other changes: * minor code cleanup in numexpr easyblock ( `#2679 <https://github.com/easybuilders/easybuild-easyblocks/pull/2679> `_ ) * update copyright lines for 2022 ( `#2705 <https://github.com/easybuilders/easybuild-easyblocks/pull/2705> `_ ) **easyconfigs** * added example easyconfig files for 29 new software packages: * Abseil ( `#15102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15102> `_ ), AMS ( `#13155 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13155> `_ ), ArchR ( `#15119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15119> `_ ), CMAverse ( `#14963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14963> `_ ), CmdStanR ( `#15198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15198> `_ ), CONN ( `#15052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15052> `_ ), Devito ( `#14984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14984> `_ , `#15009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15009> `_ ), GraphMap ( `#10299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10299> `_ ), gRPC ( `#14728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14728> `_ ), Hydra ( `#15025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15025> `_ ), jupyter-server-proxy ( `#14844 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14844> `_ ), M1QN3 ( `#15002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15002> `_ ), MAGeCK ( `#15082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15082> `_ ), matplotlib-inline ( `#15084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15084> `_ ), MEGAN ( `#15064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15064> `_ ), MNE-Python ( `#15174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15174> `_ ), ONNX ( `#15158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15158> `_ ), ONNX-Runtime ( `#15158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15158> `_ ), ont-remora ( `#15162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15162> `_ ), Optuna ( `#15021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15021> `_ ), patch ( `#15035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15035> `_ ), porefoam ( `#15067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15067> `_ ), presto ( `#15119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15119> `_ ), PyFrag ( `#15184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15184> `_ ), skorch ( `#15175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15175> `_ ), SlamDunk ( `#15197 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15197> `_ ), SPM ( `#15050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15050> `_ ), STRique ( `#14980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14980> `_ ), XML-Compile ( `#15177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15177> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2021, AlphaFold 2.1.2, AmberTools 21, archspec 0.1.3, Bandage 0.9.0, BLIS 3.1, c-ares 1.18.1, CCL 1.12.1, CharLS 2.3.4, Clang-Python-bindings 13.0.1, dcm2niix 1.0.20211006, DFTB+ 21.1, DIRAC 22.0, ELPA 2021.11.001, FlexiBLAS 3.1.3, FLUENT 2021R2, GATK 4.2.5.0, GetOrganelle 1.7.5.3, IgBLAST 1.18.0, IntelClusterChecker 2021.5.0, intervaltree-python 3.1.0, ITSx 1.1.3, Julia 1.7.2, kallisto 0.48.0, KMC 3.2.1, libobjcryst 2021.1.2, libtree 3.0.3, loompy 3.0.7, matplotlib 3.5.1, MCR R2022a, MDAnalysis 1.1.1+ 2.0.0, MDTraj 1.9.7, medaka 1.5.0, meshalyzer 20200308, MRtrix 3.0.3, NiBabel 3.2.2, NLTK 3.7, numexpr 2.8.1, ont-fast5-api 4.0.2, OpenAI-Gym 0.21.0, OpenBLAS 0.3.20, ORCA 5.0.3, parallel-fastq-dump 0.6.6, PIPITS 2.8, pocl 1.8, pycocotools 2.0.4, pyEGA3 4.0.0, pyobjcryst 2.2.1, RE2 2022-02-01, SAMtools 1.15, SBCL 2.2.1, shovill 1.1.0, SKESA 2.4.0, SOCI 4.0.3, sympy 1.9, TensorFlow 2.5.3, VirtualGL 3.0, vsc-mympirun 5.2.10, VSEARCH 2.21.1, VTK 9.1.0, VTune 2022.2.0, XGBoost 1.5.0 * minor enhancements, including: * add Flask-Session to Flask v1.1.4 and Flask v2.0.2 ( `#15027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15027> `_ ) * add check to verify that patch files touched in PRs have a description in place ( `#15061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15061> `_ ) * add extensions to R v4.1.2 easyconfig: hash ( `#15098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15098> `_ ), nabor + harmony ( `#15117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15117> `_ ), apluster, DataCombine, docstring, gdalUtils, openair, mstate, SNFtool, and deps ( `#15141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15141> `_ ) * also install rMATS_P commands in rMATS-turbo easyconfig ( `#15113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15113> `_ ) * add extensions to Bioconductor v3.14 easyconfig: chromVAR ( `#15118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15118> `_ ), EnsDb.Hsapiens.v79 ( `#15154 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15154> `_ ), WGCNA ( `#15178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15178> `_ ) * add extensions to Perl v5.34.0 easyconfigs: Sys::Info, HTML::Template, Log::Report ( `#15176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15176> `_ ), Sys::Info::Driver::Unknown, Sys::Info::Driver::Linux, Unix::Processors ( `#15190 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15190> `_ ) * enable running of tests for MEME with ``gompi/2021b`` ( `#15191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15191> `_ , `#15199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15199> `_ ) * various bug fixes, including: * add missing xxd build dependency for recent PLUMED versions (2.6.2, 2.7.x) ( `#14847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14847> `_ ) * downgrade dependency on nodejs + use jupyter-server-proxy in jupyter-matlab-proxy and configurable-http-proxy easyconfigs using ``GCCcore/10.3.0`` toolchain ( `#14942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14942> `_ ) * add additional valid checksum for extensions in R 4.1.0 and 4.1.2 easyconfigs: norm ( `#14987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14987> `_ ), optmatch ( `#14993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14993> `_ ) * avoid pollution in the tmp directory when running the AlphaFold tests ( `#14989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14989> `_ ) * consistently enable usempi toolchain option in OSU-Micro-Benchmarks easyconfigs ( `#15039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15039> `_ ) * fix GBprocesS easyconfig by switching to source tarball created using ``git_config`` ( `#15048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15048> `_ ) * add patches for mauveAligner to fix build on RHEL8 ( `#15049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15049> `_ ) * fix installation of RDKit by using ``-DBoost_NO_BOOST_CMAKE=ON`` ( `#15051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15051> `_ ) * add patch to fix linking error for imread extension in scikit-image easyconfigs using intel toolchain ( `#15054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15054> `_ ) * avoid excessively long shebang in Autoconf/Automake Perl scripts + promote Perl to runtime dependency + fix Perl shebang for intltool ( `#15055 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15055> `_ ) * fix ``python`` shebang in cutadapt script for cutadapt 1.18 w/ ``GCCcore/8.3.0`` ( `#15059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15059> `_ ) * don't use v2.1.0rc1 release candidate of gmpy2, stick to proper release v2.1.2 ( `#15060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15060> `_ ) * add M4 as build dependency for CCL-1.12 ( `#15075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15075> `_ ) * configure libffi 3.4.2 with ``--disable-exec-static-tramp`` to prevent segfaults ( `#15086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15086> `_ ) * set ``XLA_PYTHON_CLIENT_ALLOCATOR=platform`` for running tests in jax CUDA easyconfigs ( `#15097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15097> `_ ) * remove disable flag for RTTI in snappy v1.1.9 ( `#15099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15099> `_ ) * fix grconvert build for Grace 5.1.25 with ``foss/2021a`` by adding libtirpc dependency + related patch ( `#15121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15121> `_ ) * clean up PSolver and futile easyconfigs and add dynamic libs ( `#15148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15148> `_ ) * enhance vcflib easyconfigs to also install scripts ( `#15181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15181> `_ ) * add patch to fix shared linking in vcflib ( `#15203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15203> `_ ) * fix failing sanity check for PRINSEQ ( `#15205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15205> `_ ) * other changes: * use typing-extensions from Python v3.9.6 easyconfig in ArviZ and PyMC3 ( `#15003 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15003> `_ ) * disable building of documentation for DBus 1.13.18 ( `#15010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15010> `_ ) * consistently use system toolchain in EasyBuild easyconfigs ( `#15126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15126> `_ ) * use EasyBuild hwloc in likwid and move to GCC/intel-compiler level due to Fortran modules ( `#15149 <https://github.com/easybuilders/easybuild-easyconfigs/pull/15149> `_ ) .. _release_notes_eb453: EasyBuild v4.5.3 (February 11th 2022) ------------------------------------- bugfix/update release **framework** * various enhancements, including: * also check for git in ``--check-eb-deps`` ( `#3954 <https://github.com/easybuilders/easybuild-framework/pull/3954> `_ ) * add end2end test for ``eb --containerize`` ( `#3958 <https://github.com/easybuilders/easybuild-framework/pull/3958> `_ ) * various bug fixes, including: * take into account that patch files can also be zipped when checking filename extension for patches ( `#3936 <https://github.com/easybuilders/easybuild-framework/pull/3936> `_ ) * initialize ``BACKUP_PKG_URL`` with empty string in ``install_eb_dep.sh`` script ( `#3939 <https://github.com/easybuilders/easybuild-framework/pull/3939> `_ ) * fix ``get_os_name`` and ``get_os_version`` to avoid reporting ``UNKNOWN`` in output of ``eb --show-system-info`` ( `#3942 <https://github.com/easybuilders/easybuild-framework/pull/3942> `_ ) * consistently use ``actions/setup-python@v2`` in CI workflows ( `#3944 <https://github.com/easybuilders/easybuild-framework/pull/3944> `_ ) * switch to using ``pip3`` for installing EasyBuild in container recipes generated by EasyBuild ( `#3945 <https://github.com/easybuilders/easybuild-framework/pull/3945> `_ ) * specify ``easybuild.io`` as EasyBuild homepage in ``setup.py`` ( `#3947 <https://github.com/easybuilders/easybuild-framework/pull/3947> `_ ) * avoid crash in ``get_os_version`` on modern SLES-based OSs ( `#3955 <https://github.com/easybuilders/easybuild-framework/pull/3955> `_ ) * other changes: * indicate compatibility with Python 3.10 in ``setup.py`` ( `#3940 <https://github.com/easybuilders/easybuild-framework/pull/3940> `_ ) **easyblocks** * new software-specific easyblock for reticulate R package ( `#2668 <https://github.com/easybuilders/easybuild-easyblocks/pull/2668> `_ ) * minor enhancements and updates, including: * set CUDA target architecture(s) for GROMACS based on ``cuda_cc_semicolon_sep`` template value ( `#2655 <https://github.com/easybuilders/easybuild-easyblocks/pull/2655> `_ ) * add support to NAMD easyblock to opt out of building with CUDA support even if CUDA is included as dependency ( `#2666 <https://github.com/easybuilders/easybuild-easyblocks/pull/2666> `_ ) * update sanity check in CUDA easyblock: CUDA 11.6 no longer includes samples ( `#2669 <https://github.com/easybuilders/easybuild-easyblocks/pull/2669> `_ ) * various bug fixes, including: * also run easyblocks test suite with Python 3.8-3.10 + consistently use ``actions/setup-python@v2`` in CI workflows ( `#2664 <https://github.com/easybuilders/easybuild-easyblocks/pull/2664> `_ ) * specify ``easybuild.io`` as EasyBuild homepage in ``setup.py`` ( `#2667 <https://github.com/easybuilders/easybuild-easyblocks/pull/2667> `_ ) * other changes: * remove vulnerable binaries from sanity check of HDF5, no longer installed by default with HDF5 1.10.8 ( `#2670 <https://github.com/easybuilders/easybuild-easyblocks/pull/2670> `_ ) **easyconfigs** * added example easyconfig files for 25 new software packages: * Arcade-Learning-Environment ( `#14753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14753> `_ ), Bambi ( `#14811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14811> `_ ), CASTEP ( `#14420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14420> `_ ), Crumble ( `#14785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14785> `_ ), deepmedic ( `#14953 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14953> `_ ), FoBiS ( `#14771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14771> `_ ), histolab ( `#14945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14945> `_ ), Iris ( `#14788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14788> `_ ), Jasmine ( `#14789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14789> `_ ), libexif ( `#14823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14823> `_ ), libgdiplus ( `#14823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14823> `_ ), MuJoCo ( `#14965 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14965> `_ ), mujoco-py ( `#14776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14776> `_ , `#14965 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14965> `_ ), namedlist ( `#14814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14814> `_ ), OpenCensus-python ( `#14837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14837> `_ ), PyEVTK ( `#14911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14911> `_ ), pyradiomics ( `#14851 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14851> `_ ), PyTorch-Lightning ( `#14933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14933> `_ ), Redis ( `#14783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14783> `_ ), rising ( `#14952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14952> `_ ), SoXt ( `#14803 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14803> `_ ), SURVIVOR ( `#14786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14786> `_ ), tensorboard ( `#14926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14926> `_ ), xtensor ( `#14944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14944> `_ ), xxd ( `#14846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14846> `_ ) * added additional easyconfigs for various supported software packages, including: * aiohttp 3.8.1, AOCC 3.2.0, ArviZ 0.11.4, BeautifulSoup 4.10.0, bokeh 2.4.2, Boost.Python 1.77.0, Bowtie 1.3.1, CheMPS2 1.8.11, Clang 13.0.1, CLHEP 2.4.5.1, ConnectomeWorkbench 1.5.0, Crumble 0.8.3, CUDA 11.5.1 + 11.6.0, cutadapt 3.5, dask 2022.1.0, deepdiff 5.7.0, deepTools 3.5.0, dm-tree 0.1.6, DROP 1.1.1, ecCodes 2.24.2, Emacs 27.2, FDS 6.7.7, file 5.41, Flask 2.0.2, FORD 6.1.6, GATE 9.1, Geant4 11.0.0, GEMMA 0.98.5, GnuTLS 3.7.3, Go 1.17.6, gpustat 1.0.0b1, Graphviz 2.50.0, GROMACS 2021.5, Guile 3.0.7, HDF5 1.10.8, imageio 2.13.5, JupyterLab 3.2.8, lftp 4.9.2, libBigWig 0.4.6, libpsml 1.1.10, libRmath 4.1.2, librsb 1.3.0.0, libtasn1 4.18.0, libunistring 1.0, likwid 5.2.1, MaxQuant 2.0.3.0, MEGA 11.0.10.eb, MethylDackel 0.6.1, methylpy 1.2.9, minimap2 2.24, Mono 6.12.0.122, MUSCLE 5.1, nanomax-analysis-utils 0.4.3, ncbi-vdb 2.11.2, NCIPLOT-4.0 20200624, Nextflow 21.10.6, NGS 2.11.2, nvtop 1.2.2, OpenCV 4.5.5, openslide-python 1.1.2, pftoolsV3 3.2.11, picard 2.26.10, pydicom 2.2.2, pyFAI 0.20.0, Pysam 0.18.0, pytest-xdist 2.5.0, Racon 1.5.0, RAxML 8.2.12, ReFrame 3.10.1, ROOT 6.24.06, scikit-image 0.19.1, SDL2 2.0.20, SeqKit 2.1.0, Siesta 4.1.5, SimpleITK 2.1.1, SqueezeMeta 1.5.0, tMAE 1.0.1, torchvision 0.11.3, Trim_Galore 0.6.7, typing-extensions 3.10.0.2 * minor enhancements, including: * also install Python bindings for SHTns 3.5.1 ( `#14893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14893> `_ ) * add catlearn extension to easyconfig for R v4.1.2 ( `#14940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14940> `_ ) * various bug fixes, including: * update TALYS sources to (hopefully) ensure constant checksums ( `#14797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14797> `_ ) * add missing graphite2 + HarfBuzz dependencies to Qt5 v5.15.2 ( `#14802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14802> `_ ) * add missing UCX-CUDA dep to GROMACS for foss-2021a-CUDA-11.3.1 ( `#14859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14859> `_ ) * specify ``easybuild.io`` as EasyBuild homepage in ``setup.py`` ( `#14870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14870> `_ ) * add alternative checksum for MASS, class, nnet, spatial extensions in R 4.1.0 ( `#14873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14873> `_ ) and R 4.1.2 ( `#14880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14880> `_ ) easyconfigs * add patch to fix Kraken2 ncbi ``ftp`` / ``https`` check in ``rsync_from_ncbi.pl`` for versions 2.0.9-2.1.1 ( `#14889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14889> `_ ) * disable building of tests/benchmarks for snappy 1.1.8 to avoid failing build ( `#14923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14923> `_ ) * disable use of ``-Werror`` for recent NSS versions ( `#14924 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14924> `_ ) * fix download URL in UDUNITS v2.2.28 easyconfigs ( `#14954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14954> `_ ) * remove unnecessary CUDAcore dependency from nvtop v1.2.1 easyconfig ( `#14957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14957> `_ ) * consistently apply patch for mapDamage 2.2.1 to use external seqtk ( `#14961 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14961> `_ ) * fix typo in templated source URL in RcppGSL 0.3.8 easyconfig: ``$(name)s`` should be ``%(name)s`` ( `#14962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14962> `_ ) * other changes: * update Java/17 wrapper to Java 17.0.2 ( `#14868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14868> `_ ) * use ``actions/setup-python@v2`` in CI workflows + trim test configurations for easyconfigs test suite: only test with Python 2.7 + 3.6 and Lmod 7.x + 8.x ( `#14857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14857> `_ , `#14881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14881> `_ ) .. _release_notes_eb452: EasyBuild v4.5.2 (January 24th 2022) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * automatically prepend value for ``env-for-shebang`` configuration setting with sysroot ( `#3919 <https://github.com/easybuilders/easybuild-framework/pull/3919> `_ ) * enhance ``update_build_option`` to return original value + add support for ``update_build_options`` ( `#3923 <https://github.com/easybuilders/easybuild-framework/pull/3923> `_ ) * fix compatibility with Python 3.10 ( `#3926 <https://github.com/easybuilders/easybuild-framework/pull/3926> `_ , `#3933 <https://github.com/easybuilders/easybuild-framework/pull/3933> `_ ) * also take ``/etc/os-release`` into account in ``get_os_name`` and ``get_os_version`` ( `#3930 <https://github.com/easybuilders/easybuild-framework/pull/3930> `_ ) * enhance ``get_cpu_architecture`` and ``get_cpu_family`` to be aware of RISC-V ( `#3931 <https://github.com/easybuilders/easybuild-framework/pull/3931> `_ ) * various bug fixes, including: * relax pattern checks in ``test_toy_exts_parallel`` ( `#3921 <https://github.com/easybuilders/easybuild-framework/pull/3921> `_ ) * use ``sources.easybuild.io`` as backup URL for downloading Environment Modules sources to run test suite ( `#3928 <https://github.com/easybuilders/easybuild-framework/pull/3928> `_ ) * make intelfftw toolchain component aware of GCCcore ( `#3929 <https://github.com/easybuilders/easybuild-framework/pull/3929> `_ ) * other changes: * deprecate use of (actual) patch files that don't have a filename ending with ``.patch`` ( `#3920 <https://github.com/easybuilders/easybuild-framework/pull/3920> `_ ) * remove version restriction for keyring in ``requirements.txt`` to test with latest version ( `#3925 <https://github.com/easybuilders/easybuild-framework/pull/3925> `_ ) * simplify ``requirements.txt`` by removing Python 2.6 support ( `#3927 <https://github.com/easybuilders/easybuild-framework/pull/3927> `_ ) * only run GitHub tests when testing with Lua module syntax, to avoid hitting GitHub rate limit when running tests ( `#3938 <https://github.com/easybuilders/easybuild-framework/pull/3938> `_ ) **easyblocks** * minor enhancements and updates, including: * remove necessity for license for oneAPI versions (>= 2021.x) in itac easyblock ( `#2492 <https://github.com/easybuilders/easybuild-easyblocks/pull/2492> `_ ) * add CUDA support in SuiteSparse easyblock ( `#2627 <https://github.com/easybuilders/easybuild-easyblocks/pull/2627> `_ ) * use all available cores for running Perl test suite ( `#2637 <https://github.com/easybuilders/easybuild-easyblocks/pull/2637> `_ ) * add option to not copy the license file for Gurobi ( `#2639 <https://github.com/easybuilders/easybuild-easyblocks/pull/2639> `_ , `#2641 <https://github.com/easybuilders/easybuild-easyblocks/pull/2641> `_ ) * update AOCC easyblock to support version 3.2.0 ( `#2643 <https://github.com/easybuilders/easybuild-easyblocks/pull/2643> `_ ) * don't grep for specific version in ``--version`` output of Intel compiler commands for versions 2022.x ( `#2644 <https://github.com/easybuilders/easybuild-easyblocks/pull/2644> `_ ) * add support for enabling sanity checks for specific components in the Bundle easyblock ( `#2649 <https://github.com/easybuilders/easybuild-easyblocks/pull/2649> `_ ) * update Libint easyblock for LibInt v2.7.0 which requires configuring via CMake ( `#2650 <https://github.com/easybuilders/easybuild-easyblocks/pull/2650> `_ ) * update Mathematica easyblock for version 13 ( `#2652 <https://github.com/easybuilders/easybuild-easyblocks/pull/2652> `_ ) * add sanity check command for Bazel ( `#2653 <https://github.com/easybuilders/easybuild-easyblocks/pull/2653> `_ ) * update NAMD easyblock to allow non-system csh ( `#2654 <https://github.com/easybuilders/easybuild-easyblocks/pull/2654> `_ ) * enhance CUDA easyblock to create version independent pkgconfig files ( `#2656 <https://github.com/easybuilders/easybuild-easyblocks/pull/2656> `_ ) * add ``util`` subdirectory to ``$PATH`` for WPS ( `#2658 <https://github.com/easybuilders/easybuild-easyblocks/pull/2658> `_ ) * various bug fixes, including: * convert version numbers to strictly numerical in Siesta easyblock ( `#2553 <https://github.com/easybuilders/easybuild-easyblocks/pull/2553> `_ ) * fix shebang of scripts in Perl installation if installation prefix is too long ( `#2640 <https://github.com/easybuilders/easybuild-easyblocks/pull/2640> `_ ) * enhance IntelBase easyblock to avoid crash when ``$USER`` is not set ( `#2642 <https://github.com/easybuilders/easybuild-easyblocks/pull/2642> `_ ) * fix quotes in definition of default platform macro and enhance sanity check in GATE easyblock ( `#2645 <https://github.com/easybuilders/easybuild-easyblocks/pull/2645> `_ ) * avoid excessively long shebang line in compile script for WRF ( `#2648 <https://github.com/easybuilders/easybuild-easyblocks/pull/2648> `_ ) * fix checking of Intel Fortran compiler version in CP2K easyblock for recent toolchains ( `#2651 <https://github.com/easybuilders/easybuild-easyblocks/pull/2651> `_ ) **easyconfigs** * added easyconfig for intel/2022.00 toolchain ( `#14620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14620> `_ ) * added example easyconfig files for 48 new software packages: * alevin-fry ( `#14617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14617> `_ ), AMD-uProf ( `#14626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14626> `_ ), ANGEL ( `#11857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11857> `_ ), atropos ( `#7580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7580> `_ ), Austin ( `#14596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14596> `_ ), AutoDock-GPU ( `#14671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14671> `_ ), AutoDock-Vina ( `#14675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14675> `_ ), boost_histogram ( `#14516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14516> `_ ), CAFE5 ( `#14603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14603> `_ ), Calcam ( `#7488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7488> `_ ), Carma ( `#14527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14527> `_ ), Cogent ( `#14278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14278> `_ ), dlib ( `#14556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14556> `_ ), DualSPHysics ( `#14632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14632> `_ ), dune-core ( `#14693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14693> `_ ), dune-fem ( `#14693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14693> `_ ), DyMat ( `#14615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14615> `_ ), elbencho ( `#14548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14548> `_ ), Embree ( `#7471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7471> `_ ), ExaML ( `#14530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14530> `_ ), FMPy ( `#14481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14481> `_ ), genozip ( `#14583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14583> `_ ), hivtrace ( `#14691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14691> `_ ), intervaltree-python ( `#8995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8995> `_ ), IsoNet ( `#14075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14075> `_ ), MACSE ( `#14709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14709> `_ ), MetaPhlAn ( `#12917 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12917> `_ ), MicrobeAnnotator ( `#14549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14549> `_ ), mold ( `#14595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14595> `_ ), numdiff ( `#14609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14609> `_ ), OpenFace ( `#14556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14556> `_ ), PhyloPhlAn ( `#14564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14564> `_ ), PREQUAL ( `#14722 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14722> `_ ), PuLP ( `#14581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14581> `_ ), PyCalib ( `#14616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14616> `_ ), PyTorch3D ( `#13240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13240> `_ ), QCG-PilotJob ( `#14337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14337> `_ ), RaGOO ( `#8995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8995> `_ ), RAPSearch2 ( `#13199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13199> `_ ), SCopeLoomR ( `#14518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14518> `_ ), ShengBTE ( `#14557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14557> `_ ), SHTns ( `#14682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14682> `_ ), STRUMPACK ( `#14560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14560> `_ ), TALYS ( `#14716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14716> `_ ), TN93 ( `#14691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14691> `_ ), xxHash ( `#14251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14251> `_ ), yaml-cpp ( `#14547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14547> `_ ), Zgoubi ( `#14516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14516> `_ ) * added additional easyconfigs for various supported software packages, including: * annovar 20200607, antiSMASH 5.2.0, Armadillo 10.7.5, Arrow 6.0.1, Bismark 0.23.1, BLAST+ 2.12.0, cDNA_Cupcake 26.0.0, CHERAB 1.3.0, CMake 3.22.1, CP2K 8.2, DIAMOND 2.0.13, dotNET-Core-Runtime 6.0.1, dotNET-SDK 6.0.101, Extrae 3.8.3, fastp 0.23.2, FreeSurfer 7.2.0, GffCompare 0.12.6, gmsh 4.9.0, GTK3 3.24.31, h5py 3.6.0, igraph 0.9.5, Inspector 2022.0.0, IQ-TREE 2.1.3, itac 2021.5.0.eb, Java/15 + Java/17, JUBE 2.4.2, libdeflate 1.8, libxsmm 1.17, LSD2 2.3, MAGMA 1.09b, MATLAB 2021b, MinPath 1.6, MultiQC 1.11, MUSCLE 5.0.1428, numba 0.54.1, NVHPC 21.11, OBITools 1.2.13, occt 7.5.0p1, openCARP 8.2, OpenCV 3.4.1, OpenFOAM v2112, ORCA 5.0.2, phonopy 2.12.0, Pillow 8.3.2, Pillow-SIMD 8.3.2, PLUMED 2.7.3, poppler 22.01.0, PyQtGraph 0.12.3, python-igraph 0.9.8, PyZMQ 22.3.0, Raysect 0.7.1, Rgurobi 9.5.0, scanpy 1.8.2, Schrodinger 2021, SqueezeMeta 1.0.0, statsmodels 0.13.1, texlive 20210324, VTune 2022.0.0 * minor enhancements, including: * add yaml-cpp dependency to Trilinos 12.12.1 with foss/2019b ( `#14547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14547> `_ ) * include output of failing code style check in message produced by failing easyconfigs style test ( `#14578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14578> `_ ) * bundle LAPACKE with FlexiBLAS 3.0.4 ( `#14591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14591> `_ ), `#14769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14769> `_ ) * add extensions to R v4.1.2 easyconfig: semTools, mirt, OpenMX ( `#14634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14634> `_ ), FactorCopula ( `#14648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14648> `_ ), rpact, ldbounds ( `#14750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14750> `_ ) * add extensions to R-bundle-Bioconductor 3.14: ExomeDepth ( `#14684 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14684> `_ ), DSS ( `#14748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14748> `_ ), pathview ( `#14806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14806> `_ ) * various bug fixes, including: * fix ``homepage`` and ``source_urls`` for GLIMMER 3.02b ( `#7945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7945> `_ ) * fix source URL for Trilinos 12.12.1 with foss/2019b ( `#14547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14547> `_ ) * use proper Perl dependency for worker 1.6.12 with foss/2019a (fixes installation on RHEL8 OS) ( `#14565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14565> `_ ) * fix checksum and versions of annovar v20191024 ( `#14579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14579> `_ ) * add patch for Rust 1.52.2 and 1.54.0 to fix build when using alternate sysroot ( `#14584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14584> `_ ) * retain version in filename for cromwell sources ( `#14586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14586> `_ ) * specify compiler to use in WildMagic easyconfig ( `#14594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14594> `_ ) * avoid need for git build dependency for recent x265 easyconfigs ( `#14605 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14605> `_ ) * fix broken patch file for recent GPAW versions ( `#14619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14619> `_ ) * add alternative checksum for Siesta-4.1-MaX-1.0 ( `#14643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14643> `_ ) * add missing PCRE dependency for pullseq + add sanity check commands ( `#14650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14650> `_ ) * use ``%(arch)s`` template to avoid hardcoding ``x86_64`` in recent XML-LibXML easyconfigs ( `#14655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14655> `_ ) * fix name for (binary) AutoDock-Vina v1.1.2 ( `#14675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14675> `_ ) * add patch to fix memory leak in OpenMPI that heavily affects CP2K, SIESTA, QuantumESPRESSO, VASP, ... ( `#14726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14726> `_ ) * set ``$GRPC_PYTHON_BUILD_EXT_COMPILER_JOBS`` for installing grcpio extension included with: * TensorFlow 2.2.3-2.4.1 with 2020* toolchain ( `#14729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14729> `_ ) and 2.5.0+ ( `#14728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14728> `_ ) * Ray-project ( `#14730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14730> `_ ) * enforce using internal boost for bcl2fastq2 with a GCC 10.x toolchain ( `#14741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14741> `_ ) * add patch for hard-coded checksum value of downloaded source file in the source code of RDKit 2021.03.4 ( `#14743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14743> `_ ) * also install ``libaio.so.1`` symlink in easyconfigs for libaio v0.3.112 ( `#14745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14745> `_ ) * do not use external libgcrypt or python for libxslt with recent toolchains ( `#14756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14756> `_ ) * add patches to fix CVE-2021-23437 for Pillow ( `#14765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14765> `_ ) and Pillow-SIMD ( `#14792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14792> `_ ) * add libXfont2 patch to fix build when libbsd is present ( `#14821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14821> `_ ) * other changes: * update Java 1.8 wrapper to 1.8.0_311 for x86_64 ( `#14644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14644> `_ ) * bring gffread back down to GCCcore level for toolchain version 10.3.0 ( `#14660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14660> `_ ) * update build dependencies for recent binutils + GCCcore easyconfigs to avoid depending on M4 1.4.18 with system toolchain ( `#14731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14731> `_ ), `#14755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14755> `_ ) * bump nbconvert extension in recent IPython easyconfigs to version 6.4.0 ( `#14738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14738> `_ ) .. _release_notes_eb451: EasyBuild v4.5.1 (December 13th 2021) ------------------------------------- bugfix/update release **framework** * various enhancements, including: * also dump environment to reprod directory ( `#3374 <https://github.com/easybuilders/easybuild-framework/pull/3374> `_ ) * determine which extensions can be skipped in parallel (if ``--parallel-extensions-install`` is enabled) ( `#3890 <https://github.com/easybuilders/easybuild-framework/pull/3890> `_ ) * fall back to sequential installation for extensions with unknown dependencies when using ``--parallel-extensions-install`` ( `#3906 <https://github.com/easybuilders/easybuild-framework/pull/3906> `_ ) * allow oversubscription in sanity check for OpenMPI-based toolchains ( `#3909 <https://github.com/easybuilders/easybuild-framework/pull/3909> `_ ) * various bug fixes, including: * don't try to ensure absolute path for path part of ``repositorypath`` ( `#3893 <https://github.com/easybuilders/easybuild-framework/pull/3893> `_ , `#3899 <https://github.com/easybuilders/easybuild-framework/pull/3899> `_ ) * fix typo in EULA agreement error message ( `#3894 <https://github.com/easybuilders/easybuild-framework/pull/3894> `_ ) * only remove lock if it was created in the same EasyBuild session (not if it existed already) ( `#3889 <https://github.com/easybuilders/easybuild-framework/pull/3889> `_ ) * introduce ``EasyBlock.post_init`` method to correctly define ``builddir`` variable when ``build-in-installdir`` mode is enabled in easyconfig or easyblock ( `#3900 <https://github.com/easybuilders/easybuild-framework/pull/3900> `_ ) * also show download progress bar when using ``--inject-checksums`` ( `#3905 <https://github.com/easybuilders/easybuild-framework/pull/3905> `_ ) * pick up custom ``extract_cmd`` specified for extension ( `#3907 <https://github.com/easybuilders/easybuild-framework/pull/3907> `_ ) * make ``test_run_cmd_async`` more robust against fluke failures ( `#3908 <https://github.com/easybuilders/easybuild-framework/pull/3908> `_ ) **easyblocks** * new software-specific easyblock for Clang-AOMP ( `#2617 <https://github.com/easybuilders/easybuild-easyblocks/pull/2617> `_ ) * minor enhancements and updates, including: * enhance Rpm generic easyblock to support installing tarball of RPMs (by unpacking it first) + take into account ``(pre)installopts`` ( `#2580 <https://github.com/easybuilders/easybuild-easyblocks/pull/2580> `_ ) * add option to control use of MKL-DNN in jaxlib easyblock ( `#2619 <https://github.com/easybuilders/easybuild-easyblocks/pull/2619> `_ ) * update SAMtools easyblock to support installation of SAMtools 1.14 ( `#2620 <https://github.com/easybuilders/easybuild-easyblocks/pull/2620> `_ ) * add option to ignore PLUMED version check for GROMACS ( `#2621 <https://github.com/easybuilders/easybuild-easyblocks/pull/2621> `_ ) * update Inspector easyblock for recent versions (>= 2021, oneAPI versions) ( `#2624 <https://github.com/easybuilders/easybuild-easyblocks/pull/2624> `_ ) * enhance tbb easyblock by adding option to build Python bindings ( `#2626 <https://github.com/easybuilders/easybuild-easyblocks/pull/2626> `_ ) * fix patching of ``CMakeLists.txt`` for Eigen v3.4 ( `#2633 <https://github.com/easybuilders/easybuild-easyblocks/pull/2633> `_ ) * various bug fixes, including: * update CP2K easyblock to use ``-D__MKL`` for CP2K versions newer than 2.3 ( `#2586 <https://github.com/easybuilders/easybuild-easyblocks/pull/2586> `_ ) * set OpenMPI configuration for ORCA sanity check ( `#2596 <https://github.com/easybuilders/easybuild-easyblocks/pull/2596> `_ ) * allow oversubscription in OpenMPI sanity check ( `#2611 <https://github.com/easybuilders/easybuild-easyblocks/pull/2611> `_ ) * set ``wm_*`` class variables in OpenFOAM easyblock constructor (to fix ``--sanity-check-only`` ) ( `#2616 <https://github.com/easybuilders/easybuild-easyblocks/pull/2616> `_ ) * remove newline from easybuild-easyblocks package description (required to avoid installation error with setuptools>=59.0.0) ( `#2623 <https://github.com/easybuilders/easybuild-easyblocks/pull/2623> `_ ) * avoid patching binary files + other enhancements for MUMmer easyblock ( `#2630 <https://github.com/easybuilders/easybuild-easyblocks/pull/2630> `_ ) * enable ``build-in-installdir`` mode in constructor of PETSc and SLEPc easyblocks ( `#2631 <https://github.com/easybuilders/easybuild-easyblocks/pull/2631> `_ ) * skip netcdf4-python tests that require network connectivity ( `#2634 <https://github.com/easybuilders/easybuild-easyblocks/pull/2634> `_ ) **easyconfigs** * added example easyconfig files for 71 new software packages: * ANIcalculator ( `#14478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14478> `_ , `#14494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14494> `_ , `#14510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14510> `_ ), arrow-R ( `#14267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14267> `_ ), ASAP ( `#14367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14367> `_ ), BabelStream ( `#14503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14503> `_ ), bamtofastq ( `#14391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14391> `_ ), bcbio-gff ( `#14322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14322> `_ ), biom-format ( `#13205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13205> `_ ), Blosc2 ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), boto3 ( `#14452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14452> `_ ), Brotli-python ( `#14528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14528> `_ ), Brunsli ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), Clang-AOMP ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), CLEASE ( `#14413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14413> `_ ), CMSeq ( `#14326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14326> `_ ), cpu_features ( `#14385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14385> `_ ), cromwell ( `#12125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12125> `_ ), cxxopts ( `#14487 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14487> `_ , `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ), dRep ( `#14479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14479> `_ ), DUBStepR ( `#14495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14495> `_ ), eht-imaging ( `#14239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14239> `_ ), einops ( `#14373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14373> `_ ), ELFIO ( `#14488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14488> `_ , `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ), elprep ( `#14422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14422> `_ ), epiScanpy ( `#14447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14447> `_ ), FMM3D ( `#14257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14257> `_ ), FORD ( `#13653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13653> `_ ), GPy ( `#14380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14380> `_ ), HIP ( `#14339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14339> `_ ), idemux ( `#14499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14499> `_ ), imagecodecs ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), InChI ( `#13902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13902> `_ ), jupyter-matlab-proxy ( `#14270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14270> `_ ), jxrlib ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), LBFGS++ ( `#14230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14230> `_ ), LERC ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), libaec ( `#14247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14247> `_ ), libavif ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), LibLZF ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), libnsl ( `#14494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14494> `_ ), libtree ( `#14501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14501> `_ ), LPeg ( `#14157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14157> `_ ), Megalodon ( `#14256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14256> `_ ), nnU-Net ( `#14249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14249> `_ ), PAL2NAL ( `#14430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14430> `_ ), photontorch ( `#14410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14410> `_ ), pkgconf ( `#14426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14426> `_ ), pmx ( `#14319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14319> `_ ), PPanGGOLiN ( `#14449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14449> `_ ), ProFit ( `#14340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14340> `_ ), pugixml ( `#14367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14367> `_ , `#14492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14492> `_ ), PySide2 ( `#13460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13460> `_ ), Relate ( `#14443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14443> `_ ), ROCm ( `#14355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14355> `_ ), rocm-cmake ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), ROCm-CompilerSupport ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), rocminfo ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), rocm-smi ( `#14354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14354> `_ ), ROCR-Runtime ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), ROCT-Thunk-Interface ( `#14327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14327> `_ ), SCENIC ( `#14260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14260> `_ ), Shasta ( `#14385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14385> `_ ), SimNIBS ( `#14257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14257> `_ ), SMV ( `#14157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14157> `_ ), SRST2 ( `#14253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14253> `_ ), STACEY ( `#14293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14293> `_ ), termcolor ( `#14489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14489> `_ , `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ), ThemisPy ( `#14231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14231> `_ ), TOBIAS ( `#14452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14452> `_ , `#14458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14458> `_ ), zfp ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), zlib-ng ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ), Zopfli ( `#14246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14246> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 9.6.2, ABRicate 1.0.0, AlphaFold 2.1.1, antiSMASH 6.0.1, Arrow 6.0.0, astropy 4.3.1, BCFtools 1.14, BeautifulSoup 4.9.3, Boost 1.77.0, bpp 4.4.0, Bracken 2.6.2, CapnProto 0.9.1, CellRanger 6.1.2, Eigen 3.4.0, enaBrowserTool 1.6, ESMF 8.2.0, Flye 2.9, FMRIprep 1.4.1, FSL 6.0.4, GATK 4.2.3.0, gc 8.2.0, GDB 11.1, git 2.33.1, Go 1.17.3, Gurobi 9.5.0, Horovod 0.23.0, HTSlib 1.14, HyPhy 2.5.33, Infernal 1.1.4, Inspector 2021.4.0 ITK 5.2.1, jax 0.2.24, Julia 1.7.0, Kent_tools 422, king 2.2.7, libdwarf 20210528, MAFFT 7.490, makeinfo 6.8, Mash 2.3, matplotlib 3.4.3, MCR R2021b, minimap2 2.22, MUST 1.7.2, NCO 5.0.3, NCO 5.0.3, nlohmann_json 3.10.4, NVHPC 21.9, OpenMPI 4.0.7 + 4.1.2, panaroo 1.2.9, pangolin 3.1.16, pkgconfig 1.5.5, plotly.py 5.4.0, pyfaidx 0.6.3.1, Pysam 0.17.0, PyTorch 1.10.0, R 4.1.2, R-bundle-Bioconductor 3.14, ReFrame 3.9.1, rpy2 3.4.5, scikit-image 0.18.3, scikit-learn 1.0.1 SimpleITK 2.1.0, snakemake 6.10.0, SPAdes 3.15.3, tbb 2021.4.0, torchtext 0.10.0, torchvision 0.11.1, tqdm 4.62.3, TRUST4 1.0.6, Trycycler 0.5.2, Unicycler 0.4.9, UShER 0.5.0, WPS 4.3.1, xarray 0.20.1, XlsxWriter 3.0.2, Yambo 5.0.4 * minor enhancements, including: * add RcisTarget + NMF extensions to R-bundle-Bioconductor 3.13 ( `#14259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14259> `_ ) * add extensions for R v4.1.x: * geex + momentfit ( `#14299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14299> `_ ); StatMatch, leaflet, tmap + collapse ( `#14328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14328> `_ ), genoPlotR + penfa ( `#14433 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14433> `_ ), adcovsim ( `#14484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14484> `_ ) * add M3Drop extension to R-bundle-Bioconductor 3.14 ( `#14436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14436> `_ ) * various bug fixes, including: * specify to use Python provided as dependency, remove ``separate_build_dir`` , and fix URL in comment for Arrow 0.17.1 ( `#14263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14263> `_ ) * fix ``gettid`` nameclash with glibc 2.30 in Bazel 0.25.2, 0.26.1, 0.29.1, and 1.1.0 ( `#14269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14269> `_ ) * restore and fix sanity check commands in RStudio-Server 1.4 ( `#14275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14275> `_ ) * add pkg-config build dependency to Python easyconfigs, to ensure OpenSSL wrapper is detected ( `#14316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14316> `_ ) * add patch for UCX v1.11.2 to fix missing include statement for ``string.h`` ( `#14317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14317> `_ ) * set ``$DALTON_TMPDIR`` to build directory to run Dalton tests ( `#14341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14341> `_ ) * add patch for libfabric v1.12.1 to fix ``unknown link width 0x10`` warning ( `#14387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14387> `_ ) * add missing Automake dependency to PhyML 3.3.20200621 ( `#14397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14397> `_ ) * add git as build dependency to Python 3.8.x and 3.9.x easyconfigs (required for pbr extension) ( `#14421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14421> `_ ) * add missing XZ dependency to recent PROJ easyconfigs ( `#14429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14429> `_ ) * fix homepage/source URL for king v2.2.4 ( `#14444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14444> `_ ) * add patch for GCCcore 9.1-9.3 to fix compatibility with recent kernel headers ( `#14453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14453> `_ ) * add patch for GCCcore 10.1-11.1 to fix compatibility with recent kernel headers ( `#14454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14454> `_ ) * add patch to fix CVE-2021-43527 in NSS ( `#14497 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14497> `_ ) * pass tests on A* GPUs by setting ``NVIDIA_TF32_OVERRIDE=0`` in jax 0.2.19 ( `#14502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14502> `_ ) * add patch to fix broken (hanging) Mash binaries ( `#14511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14511> `_ ) * add missing Perl build dependency for Longshot ( `#14535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14535> `_ ) * add googletest build dependency for Highway ( `#14536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14536> `_ ) * seed in PCRE2 sources to fix broken MariaDB 10.5.8 + 10.6.4 easyconfigs ( `#14537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14537> `_ ) * other changes: * rename R bindings for Arrow to arrow-R, so it can be used in a lowercase module naming scheme ( `#14262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14262> `_ ) * comment out imkl build dependency for FlexiBLAS 3.0.4 with GCC/11.2.0 ( `#14335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14335> `_ ) * don't add ``bin`` subdir to ``$PATH`` via ``modextrapaths`` in ReFrame easyconfigs ( `#14415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14415> `_ ) * consistently use 'Grace' software name + sync ``homepage`` / ``source_urls`` ( `#14493 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14493> `_ ) * move cxxopts, termcolor and ELFIO header only libraries to ``SYSTEM`` toolchain ( `#14504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14504> `_ ) .. _release_notes_eb450: EasyBuild v4.5.0 (October 29th 2021) ------------------------------------ feature release **framework** * various enhancements, including: * add ``--review-pr-max`` and ``--review-pr-filter`` options to limit easyconfigs used by ``--review-pr`` + retain order of easyconfigs being compared with ( `#3754 <https://github.com/easybuilders/easybuild-framework/pull/3754> `_ ) * use Rich (if available) to show progress bars when installing easyconfigs ( `#3823 <https://github.com/easybuilders/easybuild-framework/pull/3823> `_ , `#3826 <https://github.com/easybuilders/easybuild-framework/pull/3826> `_ , `#3833 <https://github.com/easybuilders/easybuild-framework/pull/3833> `_ , `#3835 <https://github.com/easybuilders/easybuild-framework/pull/3835> `_ , `#3844 <https://github.com/easybuilders/easybuild-framework/pull/3844> `_ , `#3864 <https://github.com/easybuilders/easybuild-framework/pull/3864> `_ , `#3867 <https://github.com/easybuilders/easybuild-framework/pull/3867> `_ , `#3882 <https://github.com/easybuilders/easybuild-framework/pull/3882> `_ ) * see also https://docs.easybuild.io/en/latest/Progress_bars.html * add support for checking required/optional EasyBuild dependencies via ``eb --check-eb-deps`` ( `#3829 <https://github.com/easybuilders/easybuild-framework/pull/3829> `_ ) * add support for collecting GPU info (via ``nvidia-smi`` ), and include it in ``--show-system-info`` and test report ( `#3851 <https://github.com/easybuilders/easybuild-framework/pull/3851> `_ ) * added support for ``--insecure-download`` configuration option ( `#3859 <https://github.com/easybuilders/easybuild-framework/pull/3859> `_ ) * make intelfftw toolchain component aware of imkl-FFTW module ( `#3861 <https://github.com/easybuilders/easybuild-framework/pull/3861> `_ ) * make sure the contrib/hooks tree is included in the source tarball for easybuild-framework ( `#3862 <https://github.com/easybuilders/easybuild-framework/pull/3862> `_ ) * add ``check_async_cmd`` function to facilitate checking on asynchronously running commands ( `#3865 <https://github.com/easybuilders/easybuild-framework/pull/3865> `_ , `#3881 <https://github.com/easybuilders/easybuild-framework/pull/3881> `_ ) * add initial/experimental support for installing extensions in parallel ( `#3667 <https://github.com/easybuilders/easybuild-framework/pull/3667> `_ , `#3878 <https://github.com/easybuilders/easybuild-framework/pull/3878> `_ ) * see also https://docs.easybuild.io/en/latest/Installing_extensions_in_parallel.html * filter out duplicate paths added to module files, and print warning when they occur ( `#3770 <https://github.com/easybuilders/easybuild-framework/pull/3770> `_ , `#3874 <https://github.com/easybuilders/easybuild-framework/pull/3874> `_ ) * various bug fixes, including: * ensure that path configuration options have absolute path values ( `#3832 <https://github.com/easybuilders/easybuild-framework/pull/3832> `_ ) * fix broken test by taking into account changed error raised by Python 3.9.7 when copying directory via ``shutil.copyfile`` ( `#3840 <https://github.com/easybuilders/easybuild-framework/pull/3840> `_ ) * ensure newer location of CUDA stubs is taken into account by RPATH filter ( `#3850 <https://github.com/easybuilders/easybuild-framework/pull/3850> `_ ) * replace ``which`` by ``command -v`` in ``eb`` wrapper script to avoid dependency on ``which`` command ( `#3852 <https://github.com/easybuilders/easybuild-framework/pull/3852> `_ ) * refactor EasyBlock to decouple collecting of information on extension source/patch files from downloading them ( `#3860 <https://github.com/easybuilders/easybuild-framework/pull/3860> `_ ) * in this context, the ``EasyBlock.fetch_extension_sources`` method was deprecated, and replaced by ``EasyBlock.collect_exts_file_info`` * fix library paths to add to ``$LDFLAGS`` for intel-compilers toolchain component ( `#3866 <https://github.com/easybuilders/easybuild-framework/pull/3866> `_ ) * remove ``--depth 1`` from git clone when ``commit`` specified ( `#3871 <https://github.com/easybuilders/easybuild-framework/pull/3871> `_ , `#3872 <https://github.com/easybuilders/easybuild-framework/pull/3872> `_ ) * make sure correct include directory is used for FlexiBLAS toolchain component ( `#3875 <https://github.com/easybuilders/easybuild-framework/pull/3875> `_ ) * explicitly disable rebase when pulling develop branch to create a merge commit, since not specifying how to reconcile divergent branches is an error with Git 2.33.1 and newer ( `#3879 <https://github.com/easybuilders/easybuild-framework/pull/3879> `_ ) * tweak ``test_http_header_fields_urlpat`` to download from ``sources.easybuild.io`` rather than ``https://ftp.gnu.org`` ( `#3883 <https://github.com/easybuilders/easybuild-framework/pull/3883> `_ ) * other changes: * change ``copy_file`` function to raise an error when trying to copy non-existing file ( `#3836 <https://github.com/easybuilders/easybuild-framework/pull/3836> `_ , `#3855 <https://github.com/easybuilders/easybuild-framework/pull/3855> `_ , `#3877 <https://github.com/easybuilders/easybuild-framework/pull/3877> `_ ) * only print the hook messages if EasyBuild is running in debug mode ( `#3843 <https://github.com/easybuilders/easybuild-framework/pull/3843> `_ ) * deprecate old toolchain versions (pre-2019a common toolchains) ( `#3876 <https://github.com/easybuilders/easybuild-framework/pull/3876> `_ , `#3884 <https://github.com/easybuilders/easybuild-framework/pull/3884> `_ ) * see also https://docs.easybuild.io/en/latest/Deprecated-easyconfigs.html#deprecated-toolchains **easyblocks** * new software-specific easyblock for imkl-FFTW ( `#2599 <https://github.com/easybuilders/easybuild-easyblocks/pull/2599> `_ ) * minor enhancements and updates, including: * add support for installing R extensions in parallel ( `#2408 <https://github.com/easybuilders/easybuild-easyblocks/pull/2408> `_ ) * update MotionCor2 easyblock to consider to locations for built binary ( `#2541 <https://github.com/easybuilders/easybuild-easyblocks/pull/2541> `_ , `#2598 <https://github.com/easybuilders/easybuild-easyblocks/pull/2598> `_ ) * let GROMACS runtime logs show EasyBuild was used by setting ``-DGMX_VERSION_STRING_OF_FORK`` configuration option ( `#2571 <https://github.com/easybuilders/easybuild-easyblocks/pull/2571> `_ ) * adjust qa list in WIEN2k easyblock to handle new questions + fix sanity check for v21.1 ( `#2572 <https://github.com/easybuilders/easybuild-easyblocks/pull/2572> `_ ) * enhance GCC easyblock to add support for AMD GPU offloading ( `#2578 <https://github.com/easybuilders/easybuild-easyblocks/pull/2578> `_ ) * add support for specifying subdirectory for target installation directory in CMakeMake ( `#2579 <https://github.com/easybuilders/easybuild-easyblocks/pull/2579> `_ ) * enhance COMSOL easyblock to change permission on build directory during extract step (to allow using patches) ( `#2584 <https://github.com/easybuilders/easybuild-easyblocks/pull/2584> `_ ) * enhance FlexiBLAS easyblock to support building with Intel MKL (imkl) as backend ( `#2588 <https://github.com/easybuilders/easybuild-easyblocks/pull/2588> `_ ) * update MATLAB easyblock for 2021b (jre is no longer included) ( `#2589 <https://github.com/easybuilders/easybuild-easyblocks/pull/2589> `_ ) * update OpenCV easyblock to detect GTK3 and GTK2 dependencies (next to GTK+) ( `#2591 <https://github.com/easybuilders/easybuild-easyblocks/pull/2591> `_ ) * avoid that path to CUDA install directory is added to ``$PATH`` ( `#2593 <https://github.com/easybuilders/easybuild-easyblocks/pull/2593> `_ ) * enhance imkl easyblock to add support for installing with NVHPC ( `#2595 <https://github.com/easybuilders/easybuild-easyblocks/pull/2595> `_ ) * enhance PETSc easyblock to run tests in parallel ( `#2601 <https://github.com/easybuilders/easybuild-easyblocks/pull/2601> `_ ) * update ELSI easyblock to support two new external dependencies ( `#2602 <https://github.com/easybuilders/easybuild-easyblocks/pull/2602> `_ ) * add custom custom easyconfig parameter ``backends`` in FlexiBLAS easyblock to specify backends ( `#2605 <https://github.com/easybuilders/easybuild-easyblocks/pull/2605> `_ ) * detect problem with compiling CPU detection code in configure output in GROMACS easyblock ( `#2609 <https://github.com/easybuilders/easybuild-easyblocks/pull/2609> `_ ) * use correct include directory for FlexiBLAS ( `#2610 <https://github.com/easybuilders/easybuild-easyblocks/pull/2610> `_ ) * various bug fixes, including: * unset ``$EASYBUILD_*`` environment variables when running sanity check in EasyBuildMeta easyblock + also unset ``$MODULES_LMCONFLICT`` to avoid conflict when loading EasyBuild module ( `#2568 <https://github.com/easybuilders/easybuild-easyblocks/pull/2568> `_ ) * ensure that all ABAQUS components get installed for ABAQUS 2021.x (+ add support for enabling/disabling fe-safe) ( `#2569 <https://github.com/easybuilders/easybuild-easyblocks/pull/2569> `_ ) * fix subdir path in VTune easyblock for 2021.x versions + add sanity check command ( `#2576 <https://github.com/easybuilders/easybuild-easyblocks/pull/2576> `_ ) * make sure custom easyblock for installing EasyBuild respects requested version of Python (like ``$EB_PYTHON`` ) ( `#2581 <https://github.com/easybuilders/easybuild-easyblocks/pull/2581> `_ ) * restore RPATH wrappers for OpenMPI sanity check ( `#2582 <https://github.com/easybuilders/easybuild-easyblocks/pull/2582> `_ ) * fix installation of libcp2k for recent CP2K versions ( `#2585 <https://github.com/easybuilders/easybuild-easyblocks/pull/2585> `_ ) * make version regex in OpenSSL wrapper easyblock less strict (version string does not always end with a letter) ( `#2597 <https://github.com/easybuilders/easybuild-easyblocks/pull/2597> `_ ) * redefine ``collect_exts_file_info`` instead of now deprecated fetch_extension_sources in OCaml easyblock ( `#2603 <https://github.com/easybuilders/easybuild-easyblocks/pull/2603> `_ ) * other changes: * don't use ``--config=mkl`` for TensorFlow 2.4+ ( `#2583 <https://github.com/easybuilders/easybuild-easyblocks/pull/2583> `_ ) * this fixes some performance related issues for TensorFlow, see https://github.com/easybuilders/easybuild-easyblocks/issues/2577 and https://github.com/easybuilders/easybuild-easyconfigs/issues/14120 * fix support for recent imkl version in numexpr easyblock ( `#2606 <https://github.com/easybuilders/easybuild-easyblocks/pull/2606> `_ ) * derive custom easyblock from MotionCor2 from PackedBinary instead of EasyBlock ( `#2607 <https://github.com/easybuilders/easybuild-easyblocks/pull/2607> `_ ) **easyconfigs** * added easyconfigs for foss/2021b ( `#14217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14217> `_ ) and intel/2021b ( `#14218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14218> `_ ) common toolchains * see also https://docs.easybuild.io/en/latest/Common-toolchains.html * add easyconfig for gobff/2021a toolchain ( `#14019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14019> `_ , `#14038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14038> `_ ) * added example easyconfig files for 39 new software packages: * abTEM ( `#13974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13974> `_ ), ARTS ( `#9651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9651> `_ ), AutoGeneS ( `#13903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13903> `_ ), bashplotlib ( `#13942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13942> `_ ), CIRI-long ( `#13985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13985> `_ ), DFT-D4 ( `#12803 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12803> `_ ), ELSI-RCI ( `#14147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14147> `_ ), ESL-Bundle ( `#14179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14179> `_ ), expecttest ( `#14106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14106> `_ ), fdict ( `#14161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14161> `_ ), flook ( `#14161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14161> `_ ), FreeTDS ( `#13952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13952> `_ ), HDBSCAN ( `#14062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14062> `_ ), imkl-FFTW ( `#14195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14195> `_ ), isoCirc ( `#13982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13982> `_ ), libfdf ( `#14173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14173> `_ ), libmbd ( `#14129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14129> `_ ), libpspio ( `#14173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14173> `_ ), libSBML ( `#14050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14050> `_ ), longread_umi ( `#13987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13987> `_ ), Mesa-demos ( `#14123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14123> `_ ), MixMHC2pred ( `#14041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14041> `_ ), NTPoly ( `#14183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14183> `_ ), OpenSceneGraph ( `#14197 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14197> `_ ), panaroo ( `#14203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14203> `_ ), PEPT ( `#14077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14077> `_ ), pycoQC ( `#14012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14012> `_ ), python-docx ( `#13930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13930> `_ ), QD ( `#14122 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14122> `_ ), radeontop ( `#14124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14124> `_ ), Rgurobi ( `#14188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14188> `_ ), RInChI ( `#14049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14049> `_ ), scGeneFit ( `#13963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13963> `_ ), swifter ( `#14114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14114> `_ ), TOML-Fortran ( `#13929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13929> `_ ), TRUST4 ( `#14035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14035> `_ ), ucx-py ( `#14051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14051> `_ ), vawk ( `#14040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14040> `_ ), VMTK ( `#14023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14023> `_ ) * added additional easyconfigs for various supported software packages, including: * AlphaFold 2.0.1, artic-ncov2019 2021.06.24, BerkeleyGW 3.0.1, bokeh 2.4.1, Boost.Python 1.76.0, canu 2.2, Cartopy 0.20.0, CP2K 8.2, CUDA 11.4.2, Dalton 2020.0, dask 2021.9.1, edlib 1.3.9, ELSI 2.7.1, FFTW 3.3.10, GD 2.73, GDAL 3.3.2, GTDB-Tk 1.7.0, ImageJ 1.52q, jax 0.2.20, Kraken2 2.1.2, leidenalg 0.8.7, libfabric 1.13.2, libspatialindex 1.9.3, libxc 5.1.6, libxsmm 1.16.2, lifelines 0.26.3, Longshot 0.4.3, LSD2 2.2, MAFFT 7.487, MEME 5.4.1, MotionCor2 1.4.4, NCCL 2.11.4, netCDF 4.8.1, networkx 2.6.3, Nextflow 21.08.0, OpenBLAS 0.3.18, OpenCV 4.5.3, OrthoFinder 2.5.4, OSU-Micro-Benchmarks 5.8, PhyML 3.3.20200621, PostgreSQL 13.4, pygraphviz 1.7, pyproj 3.1.0, python-Levenshtein 0.12.1, PyTorch-Geometric 2.0.1, QIIME2 2021.8.eb, Qiskit 0.31.0, QuantumESPRESSO 6.8, Racon 1.4.21, rampart 1.2.0, rclone 1.56.0, RDKit 2021.03.4, SAMtools 1.13, scanpy 1.8.1, scikit-allel 1.3.3, SciPy-bundle 2021.10, Seaborn 0.11.2, SHAPEIT4 4.2.2, spglib 1.16.2, UCX 1.11.2, UCX-CUDA 1.11.2, VSEARCH 2.18.0, Z3 4.8.12, zarr 2.10.1 * minor enhancements, including: * add JASPAR2020 to R-bundle-Bioconductor 3.13 ( `#13962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13962> `_ ) * add Autotools as build dependency for CubeGUI-4.6 ( `#14109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14109> `_ ) * add compiler/parallel/tcltk R libraries included in base installation to extensions in recent R easyconfigs ( `#14189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14189> `_ , `#14190 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14190> `_ , `#14194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14194> `_ ) * required for parallel installation of extensions for these R easyconfigs * also add location to MPI startup tests to ``$PATH`` in OSU-Micro-Benchmarks easyconfigs ( `#14126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14126> `_ ) * various bug fixes, including: * add missing Brotli dependency to freetype ( `#13915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13915> `_ , `#14002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14002> `_ ) * add patch for OpenBLAS 0.3.15 to fix failing numpy tests on aarch64 ( `#13923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13923> `_ ) * fix source URL + add alternate checksum for ADMIXTURE 1.3.0 ( `#13933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13933> `_ ) * just use ``cp`` to copy ``stereo_chemical_props.txt`` to AlphaFold installation directory ( `#13938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13938> `_ ) * add UnZip build dependency to TensorFlow 2.4.1 ( `#13958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13958> `_ ), 2.5.0 ( `#13959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13959> `_ ) and 2.6.0 easyconfigs ( `#13960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13960> `_ ) * add missing Python dependency for WIEN2k 21.1 + patch to fix build failure for ``lapw0_mpi`` with libxc ( `#13961 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13961> `_ ) * add additional valid checksum for lhs 1.1.1 extension in recent R 4.0.x and 4.1.0 easyconfigs ( `#13969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13969> `_ ) * fix Fortran system call stdout/err redirection for WIEN2k v21.1 ( `#13972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13972> `_ ) * add OpenSSL dependency to Kent_tools 418 easyconfig to fix a link error ( `#13989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13989> `_ ) * make binutils a build-only dependency for Brotli + add sanity check command ( `#14004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14004> `_ ) * fix installation of Racon v1.4.7 with gcccuda/2019b after move of ClaraGenomicsAnalysis repository ( `#14010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14010> `_ ) * fix source URL for KEGG.db extension in R-bundle-Bioconductor 3.13 easyconfig (since it's a deprecated library now) ( `#14013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14013> `_ ) * add patch for BLIS 0.8.1 to fix dgemm FPE signalling on Broadwell ( `#14018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14018> `_ ) * add patch to fix installation of TensorFlow 2.2.3 on POWER ( `#14025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14025> `_ ) * fix AmberTools v20 easyconfig using intel/2020a toolchain ( `#14028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14028> `_ ) * fix download + permissions of binary for USEARCH v11.0.667 ( `#14036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14036> `_ ) * remove h5py 3.x dependency for Keras with 2020b toolchain, since TensorFlow provides (and requires) h5py 2.x ( `#14052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14052> `_ ) * correctly specify install prefix for CUDA in OSU-Micro-Benchmarks after renaming CUDAcore to CUDA for 2021a ( `#14063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14063> `_ ) * add patch to fix failing file system cache test for jax on recent Linux kernels ( `#14067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14067> `_ ), `#14070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14070> `_ ) * fix compilation of BWA 0.7.17 with GCC/10.2.0 on POWER ( `#14073 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14073> `_ ) * add missing dependencies for recent LibTIFF versions: XZ, jbigkit, zstd ( `#14079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14079> `_ ) * add missing header file to existing versions of jbigkit ( `#14081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14081> `_ ) * fix source URL for SUNDIALS 5.x ( `#14092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14092> `_ , `#14096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14096> `_ ) * add Perl and Python runtime dependencies to Bowtie2 2.4.4 ( `#14097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14097> `_ ) * fix source URL for SCOTCH 6.1.0 ( `#14099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14099> `_ ) * drop tcmalloc from SymEngine as it causes crashes with scipy ( `#14119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14119> `_ ) * fix homepage + description in SimpleITK easyconfigs ( `#14125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14125> `_ ) * add missing scripts from ``utils`` and ``analysis_scripts`` to ``bin`` for cryoDRGN ( `#14137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14137> `_ ) * patch ``rsync_from_ncbi.pl`` in Kraken2 v2.1.2 to allow syncing with NCBI servers over HTTPS ( `#14148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14148> `_ ) * skip ``mkl_fused_batch_norm_op_test`` test (broken on AMD EPYC systems) for TensorFlow 2.5.0 and 2.6.0 ( `#14151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14151> `_ , `#14153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14153> `_ ) * fix incorrect module load message and update morphology plugin of ImageJ 1.51k ( `#14152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14152> `_ ) * fix XCrySDen v1.6.2 linking to libdl and Togl ( `#14160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14160> `_ ) * add patch to fix PMIx detection in OpenMPI v4.0.3, v4.0.5, v4.1.0 ( `#14177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14177> `_ ) * add patch for OpenBLAS 0.3.17 + 0.3.18 to fix segfault triggered by scipy tests ( `#14178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14178> `_ ) * fix spatstat.* downloads for Seurat v4.0.1 ( `#14199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14199> `_ ) * add patch for GROMACS 2019.3 easyconfigs using CMake 3.15.3 to fix CPU detection ( `#14212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14212> `_ ) * other changes: * remove help2man build dependency for flex using system toolchain (because it requires Perl) ( `#13922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13922> `_ ) * use proper dependency for python-Levenshtein in CIRI-long easyconfig ( `#13985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13985> `_ ) * in-place updates for foss/2021b and intel/2021b common toolchains * update to UCX(-CUDA) 1.11.2 as dependency for OpenMPI v4.1.1 + NCCL v2.10.3 ( `#14090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14090> `_ ) * update libfabric to 1.13.1 in OpenMPI and add it as a dependency in PMIx for the upcoming foss 2021b toolchain ( `#14164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14164> `_ ) * update to OpenBLAS 0.3.18 as dependency for FlexiBLAS 3.0.4 with GCCcore/11.2.0 toolchain ( `#14167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14167> `_ ) * update libfabric to 1.13.2 in OpenMPI v4.1.1 + PMIx 4.1.0 for the upcoming foss/2021b toolchain ( `#14176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14176> `_ ) * remove format mapping from homepage of Subread easyconfigs ( `#14145 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14145> `_ ) * add BLIS and imkl (x86_64 only) builddependencies to FlexiBLAS 0.3.4 with GCC/11.2.0 toolchain ( `#14225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/14225> `_ ) .. _release_notes_eb442: EasyBuild v4.4.2 (September 7th 2021) ------------------------------------- bugfix/update release **framework** * various enhancements, including: * add per-extension timing in output produced by ``eb`` command ( `#3734 <https://github.com/easybuilders/easybuild-framework/pull/3734> `_ ) * add definition for new toolchain ``nvpsmpic`` (NVHPC + ParaStationMPI + CUDA) ( `#3736 <https://github.com/easybuilders/easybuild-framework/pull/3736> `_ ) * include list of missing libraries in warning about missing FFTW libraries in ``imkl`` toolchain component ( `#3776 <https://github.com/easybuilders/easybuild-framework/pull/3776> `_ ) * check for recursive symlinks by default before copying a folder ( `#3784 <https://github.com/easybuilders/easybuild-framework/pull/3784> `_ ) * add ``--filter-ecs`` configuration option to filter out easyconfigs from set of easyconfigs to install ( `#3796 <https://github.com/easybuilders/easybuild-framework/pull/3796> `_ ) * check type of ``source_tmpl`` value for extensions, ensure it's a string value (not a list) ( `#3799 <https://github.com/easybuilders/easybuild-framework/pull/3799> `_ ) * also define ``$BLAS_SHARED_LIBS`` & co in build environment (analogous to ``$BLAS_STATIC_LIBS`` ) ( `#3800 <https://github.com/easybuilders/easybuild-framework/pull/3800> `_ ) * report use of ``--ignore-test-failure`` in success message in output ( `#3806 <https://github.com/easybuilders/easybuild-framework/pull/3806> `_ ) * add ``get_cuda_cc_template_value`` method to ``EasyConfig`` class ( `#3807 <https://github.com/easybuilders/easybuild-framework/pull/3807> `_ ) * add support for ``fix_bash_shebang_for`` ( `#3808 <https://github.com/easybuilders/easybuild-framework/pull/3808> `_ ) * pick up ``$MODULES_CMD`` to facilitate using Environment Modules 4.x as modules tool ( `#3816 <https://github.com/easybuilders/easybuild-framework/pull/3816> `_ ) * use more sensible branch name for creating easyblocks PR with ``--new-pr`` ( `#3817 <https://github.com/easybuilders/easybuild-framework/pull/3817> `_ ) * various bug fixes, including: * remove Python 2.6 from list of supported Python versions in ``setup.py`` ( `#3767 <https://github.com/easybuilders/easybuild-framework/pull/3767> `_ ) * don't add directory that doesn't include any files to ``$PATH`` or ``$LD_LIBRARY_PATH`` ( `#3769 <https://github.com/easybuilders/easybuild-framework/pull/3769> `_ ) * make logdir writable also when ``--stop`` / ``--fetch`` is used and ``--read-only-installdir`` is enabled ( `#3771 <https://github.com/easybuilders/easybuild-framework/pull/3771> `_ ) * fix forgotten renaming of ``l`` to ``char`` in ``__init__.py`` that is created for included Python modules ( `#3773 <https://github.com/easybuilders/easybuild-framework/pull/3773> `_ ) * fix ``verify_imports`` by deleting all imported modules before re-importing them one by one ( `#3780 <https://github.com/easybuilders/easybuild-framework/pull/3780> `_ ) * fix ``ignore_test_failure`` not set for Extension instances ( `#3782 <https://github.com/easybuilders/easybuild-framework/pull/3782> `_ ) * update ``iompi`` toolchain to ``intel-compiler`` subtoolchain for oneAPI versions (>= ``iompi`` 2020.12) ( `#3785 <https://github.com/easybuilders/easybuild-framework/pull/3785> `_ ) * don't parse patch files as easyconfigs when searching for where patch file is used ( `#3786 <https://github.com/easybuilders/easybuild-framework/pull/3786> `_ ) * make sure git clone with a tag argument actually downloads a tag ( `#3795 <https://github.com/easybuilders/easybuild-framework/pull/3795> `_ ) * fix CI by excluding GC3Pie 2.6.7 (which is broken with Python 2) and improve error reporting for option parsing ( `#3798 <https://github.com/easybuilders/easybuild-framework/pull/3798> `_ ) * correctly resolve templates for patches in extensions when uploading to GitHub ( `#3805 <https://github.com/easybuilders/easybuild-framework/pull/3805> `_ ) * add ``--easystack`` to ignored options when submitting job ( `#3813 <https://github.com/easybuilders/easybuild-framework/pull/3813> `_ ) * other changes: * speed up tests by caching checked paths in ``set_tmpdir`` + less test cases for ``test_compiler_dependent_optarch`` ( `#3802 <https://github.com/easybuilders/easybuild-framework/pull/3802> `_ ) * speed up ``set_parallel`` method in ``EasyBlock`` class ( `#3812 <https://github.com/easybuilders/easybuild-framework/pull/3812> `_ ) **easyblocks** * 4 new software-specific easyblocks: * CRISPR-DAV ( `#2487 <https://github.com/easybuilders/easybuild-easyblocks/pull/2487> `_ ), jaxlib ( `#2545 <https://github.com/easybuilders/easybuild-easyblocks/pull/2545> `_ ), ORCA ( `#2504 <https://github.com/easybuilders/easybuild-easyblocks/pull/2504> `_ ), RepeatModeler ( `#2470 <https://github.com/easybuilders/easybuild-easyblocks/pull/2470> `_ ) * minor enhancements, including: * update ABAQUS easyblock to support installation of v2020 ( `#2034 <https://github.com/easybuilders/easybuild-easyblocks/pull/2034> `_ ) * enable make check and sanity check exec for OpenMPI ( `#2444 <https://github.com/easybuilders/easybuild-easyblocks/pull/2444> `_ ) * fixed sanity check for later versions of Molpro ( `#2499 <https://github.com/easybuilders/easybuild-easyblocks/pull/2499> `_ ) * add Ampere to known GPU architectures for Kokkos in LAMMPS easyblock ( `#2510 <https://github.com/easybuilders/easybuild-easyblocks/pull/2510> `_ ) * update sanity check in ESMF easyblock to take into account new binary names from version 8.1.0 onwards ( `#2512 <https://github.com/easybuilders/easybuild-easyblocks/pull/2512> `_ ) * use ``report_test_failure`` in TensorFlow easyblock ( `#2519 <https://github.com/easybuilders/easybuild-easyblocks/pull/2519> `_ ) * add support for imkl 2021.x in easyblocks for * Amber ( `#2527 <https://github.com/easybuilders/easybuild-easyblocks/pull/2527> `_ ), BerkeleyGW ( `#2528 <https://github.com/easybuilders/easybuild-easyblocks/pull/2528> `_ ), CP2K ( `#2529 <https://github.com/easybuilders/easybuild-easyblocks/pull/2529> `_ ), FreeFEM ( `#2530 <https://github.com/easybuilders/easybuild-easyblocks/pull/2530> `_ ), GROMACS ( `#2531 <https://github.com/easybuilders/easybuild-easyblocks/pull/2531> `_ ), numexpr ( `#2532 <https://github.com/easybuilders/easybuild-easyblocks/pull/2532> `_ ) * add ``install_src`` option and enhance ``buildcmd`` option in PythonPackage easyblock ( `#2534 <https://github.com/easybuilders/easybuild-easyblocks/pull/2534> `_ ) * make sure AOCC commands like clang/flang pick up ``GCCcore`` as GCC toolchain ( `#2538 <https://github.com/easybuilders/easybuild-easyblocks/pull/2538> `_ ) * create ``CMakeConfig`` files for tbb >= 2020 ( `#2539 <https://github.com/easybuilders/easybuild-easyblocks/pull/2539> `_ ) * find source dir for libunwind when building ldd for Clang versions >= 12.0.1 ( `#2540 <https://github.com/easybuilders/easybuild-easyblocks/pull/2540> `_ ) * fix motorBike test in sanity check for OpenFOAM 9 ( `#2544 <https://github.com/easybuilders/easybuild-easyblocks/pull/2544> `_ ) * generate and install pkg-config files for OpenSSL wrapper ( `#2549 <https://github.com/easybuilders/easybuild-easyblocks/pull/2549> `_ ) * don't run ``setup.py config`` for numpy >= 1.21, since it's no longer supported ( `#2554 <https://github.com/easybuilders/easybuild-easyblocks/pull/2554> `_ ) * update WIEN2k easyblock to handle new Intel versions, WIEN2k v21, Perl dependency, and tuning of dimension parameters ( `#2558 <https://github.com/easybuilders/easybuild-easyblocks/pull/2558> `_ ) * remove PCRE from list of system libraries for TensorFlow 2.6.0 ( `#2559 <https://github.com/easybuilders/easybuild-easyblocks/pull/2559> `_ ) * add support for also installing Tosca component in ABAQUS ( `#2560 <https://github.com/easybuilders/easybuild-easyblocks/pull/2560> `_ ) * update ABAQUS easyblock to support installing of version 2021 with hot fixes ( `#2562 <https://github.com/easybuilders/easybuild-easyblocks/pull/2562> `_ ) * update sanity check in VTune easyblock for 2021.x versions ( `#2563 <https://github.com/easybuilders/easybuild-easyblocks/pull/2563> `_ ) * various bug fixes, including: * handle failure of running ``nvidia-smi`` in TensorFlow tests ( `#2506 <https://github.com/easybuilders/easybuild-easyblocks/pull/2506> `_ ) * remove Python 2.6 from list of supported Python versions in ``setup.py`` ( `#2507 <https://github.com/easybuilders/easybuild-easyblocks/pull/2507> `_ ) * clean up installation of Tkinter ( `#2509 <https://github.com/easybuilders/easybuild-easyblocks/pull/2509> `_ ) * remove redundant ``$CPATH`` entry of tbb modules + fix ``--module-only`` ( `#2511 <https://github.com/easybuilders/easybuild-easyblocks/pull/2511> `_ ) * honor ``--ignore-test-failure`` in PythonPackage ( `#2516 <https://github.com/easybuilders/easybuild-easyblocks/pull/2516> `_ ) * use correct GTK+ version for OpenCV based on dependencies ( `#2520 <https://github.com/easybuilders/easybuild-easyblocks/pull/2520> `_ ) * ensure Python prep is done in sanity check + support debug builds in TensorFlow easyblock ( `#2522 <https://github.com/easybuilders/easybuild-easyblocks/pull/2522> `_ ) * correct cleanup of single-letter local variable in ``__init__`` of ``easybuild.easyblocks`` ( `#2524 <https://github.com/easybuilders/easybuild-easyblocks/pull/2524> `_ ) * reset runtest to ``None`` in CMakePythonPackage ( `#2536 <https://github.com/easybuilders/easybuild-easyblocks/pull/2536> `_ ) * set ``$I_MPI_ROOT`` correctly for 2021.x in impi easyblock ( `#2537 <https://github.com/easybuilders/easybuild-easyblocks/pull/2537> `_ ) * let Bundle easyblock pick up custom easyblock for components based on name if no easyblock is specified explicitly ( `#2543 <https://github.com/easybuilders/easybuild-easyblocks/pull/2543> `_ , `#2547 <https://github.com/easybuilders/easybuild-easyblocks/pull/2547> `_ ) * explicitly use only OpenBLAS for PyTorch if MKL is not used ( `#2448 <https://github.com/easybuilders/easybuild-easyblocks/pull/2448> `_ ) * keep symlinks in cuDNN installations ( `#2550 <https://github.com/easybuilders/easybuild-easyblocks/pull/2550> `_ ) * use ``${BLAS,LAPACK}_SHARED_LIBS`` in GROMACS easyblock for FlexiBLAS-based toolchains ( `#2552 <https://github.com/easybuilders/easybuild-easyblocks/pull/2552> `_ ) * copy the list to avoid changing the original lists in ``DEFAULT_TARGETS_MAP`` for Clang and LLVM ( `#2556 <https://github.com/easybuilders/easybuild-easyblocks/pull/2556> `_ ) * fix ``pathsep`` ``join`` bug that breaks installation of CUDA versions < 10.1 if ``$PERL5LIB`` is defined ( `#2561 <https://github.com/easybuilders/easybuild-easyblocks/pull/2561> `_ ) * other changes: * simplify Boost easyblock ( `#2513 <https://github.com/easybuilders/easybuild-easyblocks/pull/2513> `_ ) * remove deprecated options from PythonPackage ( `#2535 <https://github.com/easybuilders/easybuild-easyblocks/pull/2535> `_ ) **easyconfigs** * added easyconfig for foss/2021.07 (candidate for foss/2021b) ( `#13788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13788> `_ ) and iomkl/2021a ( `#13521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13521> `_ ) toolchains * added example easyconfig files for 79 new software packages: * AlphaFold ( `#13867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13867> `_ ), andi ( `#13768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13768> `_ ), aria2 ( `#13709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13709> `_ ), AUTO-07p ( `#13831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13831> `_ ), babl ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), BAli-Phy ( `#13484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13484> `_ ), biogeme ( `#13735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13735> `_ ), Bio-SearchIO-hmmer ( `#13419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13419> `_ ), BuDDy ( `#13907 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13907> `_ ), c-ares ( `#13709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13709> `_ ), CellRank ( `#13408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13408> `_ ), Coin ( `#13818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13818> `_ ), Co-phylog ( `#13769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13769> `_ ), cppy ( `#13823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13823> `_ ), CREST ( `#13648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13648> `_ ), CRISPR-DAV ( `#13139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13139> `_ ), CSBLAST ( `#13794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13794> `_ ), DGL ( `#13793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13793> `_ ), DistributedStream ( `#13659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13659> `_ ), Excel-Writer-XLSX ( `#13139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13139> `_ ), FBPIC ( `#13500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13500> `_ ), freebayes ( `#12859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12859> `_ ), freud-analysis ( `#13354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13354> `_ ), fumi_tools ( `#13517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13517> `_ ), GEGL ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), GIMP ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), glib-networking ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), GOATOOLS ( `#13364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13364> `_ , `#13629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13629> `_ ), gofasta ( `#13651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13651> `_ ), GTK2 ( `#13900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13900> `_ ), GTK3 ( `#13900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13900> `_ ), Highway ( `#13453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13453> `_ ), hipSYCL ( `#13837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13837> `_ ), ISA-L ( `#13663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13663> `_ ), jax ( `#13760 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13760> `_ ), JSON-GLib ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), Kalign ( `#13463 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13463> `_ ), LADR ( `#13351 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13351> `_ ), lDDT ( `#13794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13794> `_ ), libdivsufsort ( `#13768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13768> `_ ), libjxl ( `#13453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13453> `_ , `#13829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13829> `_ ), libmypaint ( `#13216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13216> `_ ), libtecla ( `#13908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13908> `_ ), lie_learn ( `#13793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13793> `_ ), longestrunsubsequence ( `#13800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13800> `_ ), Maude ( `#13909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13909> `_ ), mimalloc ( `#13726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13726> `_ ), MINPACK ( `#13802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13802> `_ ), Mish-Cuda ( `#13759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13759> `_ , `#13784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13784> `_ ), muparserx ( `#13779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13779> `_ ), nlohmann_json ( `#13777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13777> `_ ), OpenStackClient ( `#13644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13644> `_ ), OSPRay ( `#12852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12852> `_ ), pandapower ( `#13687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13687> `_ ), pangolin ( `#13733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13733> `_ , `#13848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13848> `_ ), PSIPRED ( `#13794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13794> `_ ), PYPOWER ( `#13689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13689> `_ ), PyPSA ( `#13673 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13673> `_ ), PyRosetta ( `#13793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13793> `_ ), pysamstats ( `#13139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13139> `_ ), pytest-benchmark ( `#13622 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13622> `_ ), python-isal ( `#13663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13663> `_ ), QCxMS ( `#13650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13650> `_ ), RepeatModeler ( `#13126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13126> `_ ), Schrodinger ( `#11698 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11698> `_ ), sklearn-som ( `#13699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13699> `_ ), SoQt ( `#13818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13818> `_ ), spdlog ( `#13778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13778> `_ ), SpectrA ( `#13743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13743> `_ ), SymEngine-python ( `#13652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13652> `_ ), SyRI ( `#13800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13800> `_ ), torchinfo ( `#13662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13662> `_ ), TRAVIS-Analyzer ( `#13503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13503> `_ ), UShER ( `#13708 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13708> `_ ), Vampire ( `#13352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13352> `_ ), VBZ-Compression ( `#13536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13536> `_ ), VisPy ( `#13468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13468> `_ ), wgsim ( `#13475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13475> `_ ), Yices ( `#13906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13906> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2020.eb, ANTs 2.3.5, AOCC 3.1.0, Arb 2.19.0, archspec 0.1.2, Armadillo 10.5.3, ASE 3.22.0, Autotools 20210726, BamTools 2.5.2, bgen 4.1.3, Biopython 1.79, bitarray 1.5.3, Boost 1.76.0, Bowtie2 2.4.4, bpytop 1.0.67, Cartopy 0.19.0.post1, Centrifuge 1.0.4, Clang 12.0.1, CMake 3.21.1, CRISPResso2 2.2.1, CUDA 11.4.1, cuDNN 8.2.2.26, cURL 7.78.0, cutadapt 3.4, DIAMOND 2.0.11, DROP 1.1.0, Dsuite 20210718, dtcmp 1.1.2, ecCodes 2.22.1, Elk 7.2.42, ESMF 8.1.1, expat 2.4.1, fastq-tools 0.8.3, Fiona 1.8.20, FLINT 2.7.1, g2clib 1.6.3, g2lib 3.2.0, GCC(core) 11.2.0, GDCM 3.0.8, GDRCopy 2.3, GenomeTools 1.6.2, GffCompare 0.12.2, gffread 0.12.7, GLib 2.69.1, GMT 6.2.0, Go 1.16.6, GPAW 21.6.0, Gradle 6.9.1.eb, GROMACS 2021.3, HarfBuzz 2.8.2, HDF5 1.12.1, Horovod 0.22.1, hwloc 2.5.0, hypothesis 6.14.6, igraph 0.9.4, ImageMagick 7.1.0, IMOD 4.11.5, IPython 7.26.0, Java 16, Julia 1.6.2, JupyterHub 1.4.1, JupyterLab 3.1.6, Kent_tools 418, lavaan 0.6-9, libfabric 1.13.0, libffcall 2.4, libffi 3.4.2, libgeotiff 1.7.0, libRmath 4.1.0, LIBSVM 3.25, LibTIFF 4.3.0, likwid 5.2.0, LLVM 12.0.1, LMDB 0.9.29, magma 2.6.1, MariaDB 10.6.4, MATIO 1.5.21, matplotlib 3.4.2, MEGA 10.0.5, Mesa 21.1.7, Meson 0.59.1, Metal 2020-05-05, Mini-XML 3.2, molmod 1.4.8, MPICH 3.4.2, nanopolish 0.13.3, NCCL 2.10.3, ncdu 1.16, NCO 5.0.1, neptune-client 0.10.5, netcdf4-python 1.5.7, networkx 2.5.1, nodejs 14.17.6, NSPR 4.32, NSS 3.69, NVHPC 21.7, OpenBLAS 0.3.17, OpenEXR 3.1.1, OpenFOAM 9, OpenFOAM v2106, OpenMM 7.5.1, OpenMolcas 21.06, openpyxl 3.0.7, Pango 1.48.8, parallel 20210722, Paraver 4.9.2, ParaView 5.9.1, patchelf 0.13, PCRE2 10.37, PCRE 8.45, Perl 5.34.0, PETSc 3.15.1, petsc4py 3.15.0, Pillow 8.3.1, Pillow-SIMD 8.3.1, plotly.py 5.1.0, PLUMED 2.7.2, PMIx 4.1.0, poppler 21.06.1, PostgreSQL 13.3, preseq 3.1.2, pybind11 2.7.1, pyFFTW 0.12.0, PyGEOS 0.10.2, Pyomo 6.0.1, PyQt5 5.15.4, pyshp 2.1.3, Python 3.9.6, python-igraph 0.9.6, QTLtools 1.3.1, RAxML-NG 1.0.3, R-bundle-Bioconductor 3.13, re2c 2.2, ReFrame 3.8.0., RStudio-Server 1.4.1717, Rust 1.54.0, Scalasca 2.6, scVelo 0.2.3, Shapely 1.8a1, shrinkwrap 1.1.0, SLEPc 3.15.1, slepc4py 3.15.1, snakemake 6.6.1, snappy 1.1.9, snippy 4.6.0, snpEff 5.0e, SOCI 4.0.2, SpaceRanger 1.3.0, Spack 0.16.2, spatialreg 1.1-8, spglib-python 1.16.1, SQLite 3.36, STAR 2.7.9a, statsmodels 0.12.2, StringTie 2.1.7, Subread 2.0.3, SymEngine 0.7.0, TensorFlow 2.6.0, TetGen 1.6.0, Tkinter 3.9.6, torchtext 0.9.1, tqdm 4.61.2, UCX 1.11.0, UCX-CUDA 1.11.0, unrar 6.0.2, util-linux 2.37, VTune 2021.6.0, WIEN2k 21.1, WPS 4.2, WRF 4.3, X11 20210802, x264 20210613, xarray 0.19.0, XlsxWriter 1.4.4, XML-Parser 2.46, zstd 1.5.0 * minor enhancements, including: * add extensions to recent R v4.x easyconfigs: PCAmatchR ( `#13448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13448> `_ ), hal9001 ( `#13451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13451> `_ ), cobalt ( `#13544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13544> `_ ), CBPS ( `#13549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13549> `_ ), SBdecomp ( `#13565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13565> `_ ), lwgeom ( `#13674 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13674> `_ ), naturalsort ( `#13762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13762> `_ ), finalfit + gtsummary ( `#13766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13766> `_ ) * add VBZ compress capability to nanopolish 0.13.3 (for fast5 files) ( `#13536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13536> `_ ) * add CMake build dependency to easyconfig for tbb 2020.03 ( `#13704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13704> `_ ) * also build shared libs for MUMPS 5.3.5 ( `#13702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13702> `_ ) and 5.4.0 ( `#13705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13705> `_ ) * add dependency on pkg-config to OpenSSL wrappers ( `#13765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13765> `_ ) * various bug fixes, including: * fix LAMMPS 3Mar2020 easyconfigs using intel toolchain on AMD CPUs by patching out hardcoded ``-xHost`` ( `#11577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11577> `_ ) * fix sanity check error for OpenCV v4.5.1 by adding (and using) freetype and HarfBuzz dependencies ( `#12517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12517> `_ ) * add patches for TensorFlow 1.13.1 to fix installation ( `#13326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13326> `_ ) * remove Python 2.6 from list of supported Python versions in ``setup.py`` ( `#13349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13349> `_ ) * switch back to Bundle easyblock for PyQt5 5.15.1 + add back source URLs for components ( `#13371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13371> `_ ) * add pkg-config build dependency for GDAL 3.2.1 ( `#13383 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13383> `_ , `#13808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13808> `_ ), Rust ( `#13538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13538> `_ ), GenomeTools ( `#13805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13805> `_ ), x264 ( `#13834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13834> `_ ) * add missing Python 3 build dependency for Rust v1.52.1 ( `#13399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13399> `_ ) * fix order of cffi extension in old Python easyconfigs ( `#13400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13400> `_ ) * patch out ``__asm__`` use in ctffind to avoid build failure on ppc64le ( `#13409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13409> `_ ) * disable building man pages in Gdk-Pixbuf ( `#13410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13410> `_ ) * add missing Bio-Search-hmmer dependency for prokka ( `#13419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13419> `_ ) * avoid downloading old numpy version during install for h5py ( `#13428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13428> `_ ) * add patch for Qt5 5.8.0 to fix compilation failure in webkit ( `#13434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13434> `_ ) * avoid downloading and building freetype and qhull for matplotlib 3.4.2 ( `#13437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13437> `_ ) * fix order of components in recent GTK+ easyconfigs to avoid dependency on system GTK+ in GTK+ themes ( `#13449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13449> `_ ) * fix Python 2.7.13 easyconfigs by adding missing extensions ( `#13456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13456> `_ ) * add TensorFlow patch to fix crash on shutdown ( `#13462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13462> `_ ) * allow for non-x86_64 in ``postinstallcmds`` for CuPy ( `#13501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13501> `_ ) * disable default EULA acceptance in easyconfig for NVHPC v21.5 ( `#13516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13516> `_ ) * fix error with p7zip's 7z command not finding ``7z.dll`` ( `#13542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13542> `_ ) * patch MaxBin2 Perl script to use provided Perl dependency ( `#13551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13551> `_ ) * add missing zlib dependency to libarchive ( `#13579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13579> `_ ) * fix pkgconfig version in patch for bzip 1.0.8 (+ add easyconfig with GCCcore/11.2.0 toolchain) ( `#13581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13581> `_ ) * fix build of DIRAC 19.0 easyconfig with high compiler optimizations ( `#13613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13613> `_ ) * fix source URLs and add alternative checksum for Hypre 2.15.1 (since it moved to a different GitHub repo) ( `#13616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13616> `_ ) * add new source URL for Mesa easyconfigs using 2017b toolchain ( `#13617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13617> `_ ) * avoid ``MPICXX`` dependency in SimpleElastics ITK ( `#13623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13623> `_ ) * add upstream patch for GCC 9.x, 10.x, 11.x to avoid spurious FPE on avx512 (affects UCX) ( `#13628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13628> `_ ) * add patch for ctffind 4.1.14 to declare functions without return as void (fixes segfault) ( `#13665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13665> `_ ) * enable EGL in recent libepoxy ECs ( `#13684 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13684> `_ ) * remove unused ``buildcmd`` from libgpuarray easyconfigs ( `#13720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13720> `_ ) * add patch to fix building Qt5.10.1 against newer glibc ( `#13730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13730> `_ ) * add Python 3 as a builddependency to recent fontconfig easyconfigs ( `#13731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13731> `_ ) * update source_URL in BLAST 2.2.26 easyconfig ( `#13732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13732> `_ ) * restore error message on failing easyconfigs test suite, required by bot to determine end of output of test suite ( `#13745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13745> `_ , `#13770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13770> `_ ) * add Perl build dependency to recent Clang easyconfigs ( `#13746 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13746> `_ ) * disable using system Valgrind in the json-c tests ( `#13750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13750> `_ ) * use Archive source URL for spatstat.geom extension in Seurat ( `#13761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13761> `_ ) * add ld.gold relocts patch to binutils 2.30 ( `#13785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13785> `_ ) * add missing Python + Zip build dependencies for old Bazel versions used as build dep for TensorFlow 1.12.0 + 1.13.1 ( `#13786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13786> `_ ) * add alternative checksum for AFNI 18.3.00 ( `#13790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13790> `_ ) * update tensorflow-probability easyconfigs to include ``--release`` flag in ``installopts`` ( `#13810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13810> `_ ) * fix source URL for DB 18.1.32 ( `#13813 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13813> `_ ) * add missing cppy build dependency for matplotlib 3.4.2 ( `#13823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13823> `_ ) * disable bash completion in recent x264 easyconfigs ( `#13834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13834> `_ ) * add Perl as build dependency for ELPA 2021.05.001 + patch to fix hardcoded ``/usr/bin/perl`` ( `#13835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13835> `_ ) * add archive source URL to Spark 3.x easyconfigs to fix broken download ( `#13842 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13842> `_ ) * fix PCRE dependency for GDAL 3.2.1 and 3.3.0, don't use PCRE2 ( `#13861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13861> `_ ) * add Perl build dependency for HMMER 3.3.2 + patch to ensure it is used ( `#13870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13870> `_ ) * stick to intel-compilers toolchain for DFT-D3 v3.2.0 ( `#13878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13878> `_ ) * add missing flex build dependency for leidenalg ( `#13884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13884> `_ ) * update CMake build dependency for Eigen 3.3.4 + 3.3.5 ( `#13889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13889> `_ ) * fix source URL for Yasm 1.3.0 (+ add missing checksum) ( `#13901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13901> `_ ) * update to more recent Meson build dependency for GCCcore/8.3.0 easyconfigs to fix failing RPATH sanity check ( `#13910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13910> `_ ) * fix shebang for RepeatMasker 4.1.2-p1 Perl script ( `#13911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13911> `_ ) * other changes: * use custom ORCA easyblock in easyconfigs for ORCA v4.x ( `#13348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13348> `_ ) * move archived easyconfig files to correct ``__archive__`` folder ( `#13422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13422> `_ ) * rename NINJA to TWL-NINJA to avoid nameclash ( `#13529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13529> `_ ) * remove superfluous ``configopts`` and add sanity checks/checksums in CLHEP easyconfigs ( `#13614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13614> `_ ) * remove superfluous ``-DCMAKE_BUILD_TYPE`` configuration option in Arrow easyconfigs ( `#13615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13615> `_ ) * switch ITK easyconfigs to CMakePythonPackage easyblock, also enable ``-DITK_USE_SYSTEM_HDF5`` configuration option, fix download URLs ( `#13619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13619> `_ ) * use ``build_type`` instead of ``-DCMAKE_BUILD_TYPE=RELEASE`` in ``configopts`` in MMseqs2 easyconfigs ( `#13620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13620> `_ ) * avoid using system GTK+3 and remove ``-DCMAKE_BUILD_TYPE=RELEASE`` configure option in OpenCV easyconfigs ( `#13621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13621> `_ ) * remove ``-DCMAKE_BUILD_TYPE=RELEASE`` configure option and add checksums in LLVM easyconfigs ( `#13624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13624> `_ ) * create libtinfo symlinks in easyconfigs for ncurses with system toolchain ( `#13658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13658> `_ ), 6.1 ( `#13661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13661> `_ ) and 6.2 ( `#13660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13660> `_ ) * increase test timeouts for PyTorch 1.8.1 and 1.9.0 ( `#13700 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13700> `_ ) * rename CUDAcore to CUDA for v11.3.1 and v11.4.1 after merging foss/fosscuda, to ensure that ``get_software_root('CUDA')`` used in easyblocks works ( `#13874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13874> `_ ) * use CUDA instead of CUDAcore in recent NVHPC comments ( `#13875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13875> `_ ) .. _release_notes_eb441: EasyBuild v4.4.1 (July 6th 2021) -------------------------------- bugfix/update release **framework** * various enhancements, including: * enhance detection of patch files supplied to ``eb`` command with better error messages ( `#3709 <https://github.com/easybuilders/easybuild-framework/pull/3709> `_ ) * add per-step timing information ( `#3716 <https://github.com/easybuilders/easybuild-framework/pull/3716> `_ ) * add ``module-write hook`` ( `#3728 <https://github.com/easybuilders/easybuild-framework/pull/3728> `_ ) * add ``ignore-test-failure`` configuration option to ignore failing test step ( `#3732 <https://github.com/easybuilders/easybuild-framework/pull/3732> `_ ) * add toolchain definition for nvompic (NVHPC + OpenMPI) ( `#3735 <https://github.com/easybuilders/easybuild-framework/pull/3735> `_ ) * warn about generic milestone in ``--review-pr`` and ``--merge-pr`` ( `#3751 <https://github.com/easybuilders/easybuild-framework/pull/3751> `_ ) * various bug fixes, including: * don't override ``COMPILER_MODULE_NAME`` , inherited from ``Ffmpi`` , in Fujitsu toolchain definition ( `#3721 <https://github.com/easybuilders/easybuild-framework/pull/3721> `_ ) * avoid overwriting ``pr_nr`` in ``post_pr_test_report`` for reports with ``--include-easyblocks-from-pr`` ( `#3724 <https://github.com/easybuilders/easybuild-framework/pull/3724> `_ , `#3726 <https://github.com/easybuilders/easybuild-framework/pull/3726> `_ ) * fix crash in ``get_config_dict`` when copying modules that were imported in easyconfig file (like ``import os`` ) ( `#3729 <https://github.com/easybuilders/easybuild-framework/pull/3729> `_ ) * parse C standard flags in ``CFLAGS`` for Fujitsu compiler ( `#3731 <https://github.com/easybuilders/easybuild-framework/pull/3731> `_ ) * fix error message for ``--use-ccache`` ( `#3733 <https://github.com/easybuilders/easybuild-framework/pull/3733> `_ ) * error out when passing a list to ``run_cmd*`` to avoid running wrong command unintended, unless ``shell=True`` is used ( `#3737 <https://github.com/easybuilders/easybuild-framework/pull/3737> `_ ) * minor fixes to output of test reports when using multiple PRs ( `#3741 <https://github.com/easybuilders/easybuild-framework/pull/3741> `_ ) * fix location for modules installed with intel-compilers toolchain in HierarchicalMNS by always checking toolchain compiler name against template map ( `#3745 <https://github.com/easybuilders/easybuild-framework/pull/3745> `_ ) * avoid checking ``msg`` attribute of ``GitCommandError`` ( `#3756 <https://github.com/easybuilders/easybuild-framework/pull/3756> `_ ) * consider sources provided as dict in ``EasyBlock.check_checksums_for`` ( `#3758 <https://github.com/easybuilders/easybuild-framework/pull/3758> `_ ) * don't make changes to software installation directory when using ``--sanity-check-only`` ( `#3761 <https://github.com/easybuilders/easybuild-framework/pull/3761> `_ ) * honor specified easyblock for extensions ( `#3762 <https://github.com/easybuilders/easybuild-framework/pull/3762> `_ ) * other changes: * make sure that tests requiring a github token have ``github`` in the test name so that they can be easily filtered ( `#3730 <https://github.com/easybuilders/easybuild-framework/pull/3730> `_ ) * deprecate EasyBuild bootstrap script ( `#3742 <https://github.com/easybuilders/easybuild-framework/pull/3742> `_ ) * use temporary download folder in ``test_http_header_fields_urlpat`` ( `#3755 <https://github.com/easybuilders/easybuild-framework/pull/3755> `_ ) **easyblocks** * 5 new software-specific easyblocks: * AOMP ( `#2435 <https://github.com/easybuilders/easybuild-easyblocks/pull/2435> `_ , `#2462 <https://github.com/easybuilders/easybuild-easyblocks/pull/2462> `_ , `#2464 <https://github.com/easybuilders/easybuild-easyblocks/pull/2464> `_ ), FreeFEM ( `#1969 <https://github.com/easybuilders/easybuild-easyblocks/pull/1969> `_ ), NCCL (built from source) ( `#2337 <https://github.com/easybuilders/easybuild-easyblocks/pull/2337> `_ , `#2460 <https://github.com/easybuilders/easybuild-easyblocks/pull/2460> `_ ), torchvision ( `#2467 <https://github.com/easybuilders/easybuild-easyblocks/pull/2467> `_ ), UCX plugins ( `#2491 <https://github.com/easybuilders/easybuild-easyblocks/pull/2491> `_ ) * minor enhancements, including: * enhance Amber easyblock to support installing Amber via CMake ( `#2445 <https://github.com/easybuilders/easybuild-easyblocks/pull/2445> `_ ) * enhance ConfigureMake generic easyblock to add support for building multiple build targets ( `#2449 <https://github.com/easybuilders/easybuild-easyblocks/pull/2449> `_ , `#2479 <https://github.com/easybuilders/easybuild-easyblocks/pull/2479> `_ , `#2480 <https://github.com/easybuilders/easybuild-easyblocks/pull/2480> `_ ) * enhance sanity check for Clang to verify if CUDA offload library was produced ( `#2454 <https://github.com/easybuilders/easybuild-easyblocks/pull/2454> `_ ) * update custom easyblock for Boost to always build single and multi threaded versions ( `#2456 <https://github.com/easybuilders/easybuild-easyblocks/pull/2456> `_ ) * enhance ``sitecustomize.py`` in Python easyblock to support overriding core Python packages, and allowing overriding in virtualenv ( `#2458 <https://github.com/easybuilders/easybuild-easyblocks/pull/2458> `_ , `#2483 <https://github.com/easybuilders/easybuild-easyblocks/pull/2483> `_ ) * update CMakeMake to handle old and new Boost/Boost.Python builds using custom easyblock for Boost ( `#2461 <https://github.com/easybuilders/easybuild-easyblocks/pull/2461> `_ ) * add file prefix option to XALT easyblock ( `#2463 <https://github.com/easybuilders/easybuild-easyblocks/pull/2463> `_ ) * enhance Java easyblock to define ``%(jdkarch)s`` template ( `#2472 <https://github.com/easybuilders/easybuild-easyblocks/pull/2472> `_ ) * adjust Perl easyblock to only check for a ``man`` subdirectory if groff is a dependency ( `#2474 <https://github.com/easybuilders/easybuild-easyblocks/pull/2474> `_ ) * support arbitrary version strings in OpenSSL wrapper and add ``minimum_openssl_version`` option ( `#2475 <https://github.com/easybuilders/easybuild-easyblocks/pull/2475> `_ ) * enhance Python easyblock to explicitly disable installing core-pip when ``install_pip`` is not ``True`` ( `#2476 <https://github.com/easybuilders/easybuild-easyblocks/pull/2476> `_ ) * enhance intel-compiler easyblock to include multipath include dir in ``$CPATH`` ( `#2477 <https://github.com/easybuilders/easybuild-easyblocks/pull/2477> `_ ) * enhance Hypre easyblock to enable CUDA support ( `#2482 <https://github.com/easybuilders/easybuild-easyblocks/pull/2482> `_ ) * update Xmipp easyblock for new version (v3.20.07) ( `#2486 <https://github.com/easybuilders/easybuild-easyblocks/pull/2486> `_ ) * enhance FFTW easyblock to skip tests if ``--mpi-tests`` EasyBuild configuration option is disabled ( `#2490 <https://github.com/easybuilders/easybuild-easyblocks/pull/2490> `_ ) * use ``PYPI_SOURCE`` as the default for ``source_urls`` of extensions of Python easyconfigs ( `#2493 <https://github.com/easybuilders/easybuild-easyblocks/pull/2493> `_ ) * various bug fixes, including: * only use siterc fix for NVHPC < 21.3 ( `#2453 <https://github.com/easybuilders/easybuild-easyblocks/pull/2453> `_ ) * fix CPU-only runtime for dpcpp-generated executables in custom easyblock for intel-compilers ( `#2457 <https://github.com/easybuilders/easybuild-easyblocks/pull/2457> `_ ) * always add ``distinct_host_configuration=false`` to build command for TensorFlow ( `#2459 <https://github.com/easybuilders/easybuild-easyblocks/pull/2459> `_ ) * disable installation of bundled BioPerl and HTSLib if they are dependencies of VEP ( `#2468 <https://github.com/easybuilders/easybuild-easyblocks/pull/2468> `_ ) * don't use list value for command to detect installed Python packages in TensorFlow easyblock ( `#2469 <https://github.com/easybuilders/easybuild-easyblocks/pull/2469> `_ ) * change Bundle easyblock to also collect ``altroot`` and ``altversion`` in the module step so they are set when running ``--module-only`` ( `#2485 <https://github.com/easybuilders/easybuild-easyblocks/pull/2485> `_ ) * always strip output from ``gcc -print-multiarch`` in intel-compilers easyblock ( `#2489 <https://github.com/easybuilders/easybuild-easyblocks/pull/2489> `_ ) * don't overwrite all of ``exts_default_options`` in TensorFlow easyblock ( `#2494 <https://github.com/easybuilders/easybuild-easyblocks/pull/2494> `_ ) * enhance GCC easyblock to make sure that system GCC provides LTO support, and disable LTO when building MPFR if not ( `#2498 <https://github.com/easybuilders/easybuild-easyblocks/pull/2498> `_ ) * rework the dependency handling of OpenMPI to use explicit configure options to disable features if required dependency is not provided ( `#2500 <https://github.com/easybuilders/easybuild-easyblocks/pull/2500> `_ , `#2501 <https://github.com/easybuilders/easybuild-easyblocks/pull/2501> `_ ) **easyconfigs** * added example easyconfig files for 39 new software packages: * AMPHORA2 ( `#13003 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13003> `_ ), AOMP ( `#12909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12909> `_ ), CAMPARI ( `#13152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13152> `_ ), CSB ( `#12877 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12877> `_ ), dijitso ( `#10719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10719> `_ ), DosageConvertor ( `#13278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13278> `_ ), dSFMT ( `#12971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12971> `_ ), exiv2 ( `#13204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13204> `_ ), FEniCS ( `#10719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10719> `_ ), FreeFEM ( `#9902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9902> `_ ), futhark ( `#12921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12921> `_ ), futile ( `#12864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12864> `_ ), gappa ( `#13186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13186> `_ ), GenomeWorks ( `#13083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13083> `_ , `#13092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13092> `_ ), gexiv2 ( `#13204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13204> `_ ), HAL ( `#13267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13267> `_ ), hipify-clang ( `#12961 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12961> `_ ), inline ( `#12029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12029> `_ ), libcint ( `#13214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13214> `_ ), LTR_retriever ( `#13125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13125> `_ ), mapDamage ( `#13172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13172> `_ ), MbedTLS ( `#13061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13061> `_ ), microctools ( `#13010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13010> `_ ), Nektar++ ( `#12664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12664> `_ ), NINJA ( `#13125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13125> `_ ), OBITools3 ( `#12969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12969> `_ ), ont-fast5-api ( `#13033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13033> `_ ), OpenMM-PLUMED ( `#13268 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13268> `_ ), phototonic ( `#13241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13241> `_ ), PyFoam ( `#12675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12675> `_ ), RagTag ( `#13247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13247> `_ ), RcppGSL ( `#13172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13172> `_ ), RECON ( `#13123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13123> `_ ), RepeatScout ( `#13124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13124> `_ ), retworkx ( `#13228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13228> `_ ), UCX-CUDA ( `#13260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13260> `_ ), unimap ( `#13247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13247> `_ ), Vala ( `#13204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13204> `_ ), WhatsHap ( `#12989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12989> `_ ) * added additional easyconfigs for various supported software packages, including: * Amber 20.11, BBMap 38.90, Beast 2.6.4, BLIS 3.0 (AMDo fork), Bonito 0.4.0, CellRanger-ARC 2.0.0, CellRanger-ATAC 2.0.0, Check 0.15.2, CubeGUI 4.6, CubeLib 4.6, CubeWriter 4.6, cuDNN 8.2.1.32, CVXOPT 1.2.6, DOLFIN 2019.1.0.post0, eggnog-mapper 2.1.4, ELPA 2021.05.001, FDS 6.7.6, FFC 2019.1.0.post0, FFmpeg 4.3.2, FIAT 2019.1.0, flatbuffers 2.0.0, flatbuffers-python 2.0, FLTK 1.3.6, gc 8.0.4, GCC 8.4.0 + 9.4.0, GDAL 3.3.0, Gdk-Pixbuf 2.42.6, geopy 2.1.0, Ghostscript 9.54.0, git 2.32.0, GitPython 3.1.18, GLFW 3.3.4, gmsh 4.8.4, gnuplot 5.4.2, GnuTLS 3.7.2, Go 1.16.5, GObject-Introspection 1.68.0, gperftools 2.9.1, GraphicsMagick 1.3.36, Graphviz 2.47.2, GSL 2.7, GTK+ 2.24.33, Guile 2.2.7, h5py 3.2.1, HarfBuzz 2.8.1, Horovod 0.22.0, Hypre 2.21.0, ICU 69.1, ImageMagick 7.0.11-14, IOR 3.3.0, IPython 7.25.0, IRkernel 1.2, ispc 1.16.0, JupyterLab 3.0.16, LDC 1.26.0, libcerf 1.17, libepoxy 1.5.8, libgd 2.3.1, libStatGen 1.0.15, libxc 5.1.5, LittleCMS 2.12, LMfit 1.0.2, Lua 5.4.3, M4 1.4.19, MCR R2021a.3, medaka 1.4.3, Mercurial 5.8, minimap2 2.20, MMseqs2 13, MrBayes 3.2.7, MUMPS 5.4.0, NCCL 2.9.9, netCDF 4.8.0, Nim 1.4.8, nodejs 14.17.0, Nsight-Compute 2021.2.0, numba 0.53.1, NVHPC 21.5.eb, nvtop 1.2.1, Octave 6.2.0, OPARI2 2.0.6, openkim-models 20210128, OpenMPI 4.0.6, OTF2 2.3, p11-kit 0.24.0, Pango 1.48.5, parallel 20210622, petsc4py 3.12.0, picard 2.25.5, Pillow 8.2.0, PROJ 8.0.1, protobuf 3.17.3, protobuf-python 3.17.3, PSolver 1.8.3, PySCF 1.7.6, pyspoa 0.0.8, pytest-xdist 2.3.0, PyTorch 1.9.0, PyYAML 5.4.1, Qhull 2020.2, Quandl 3.6.1, R 4.0.5 + R 4.1.0, Ragout 2.3, RE2 2021-06-01, ReFrame 3.6.2, RepeatMasker 4.1.2, rgdal 1.5-23, RMBlast 2.11.0, Ruby 3.0.1, scikit-learn 0.24.2, Score-P 7.0, Seurat 4.0.3, slepc4py 3.12.0, spoa 4.0.7, Subread 2.0.2, Subversion 1.14.1, SuiteSparse 5.10.1, sympy 1.8, tensorboardX 2.2, TensorFlow 2.5.0, Tk 8.6.11, tmux 3.2a, torchtext 0.8.1, torchvision 0.9.1, UDUNITS 2.2.28, UFL 2019.1.0, utf8proc 2.6.1, VEP 103.1, VMD 1.9.4a51, vsc-mympirun 5.2.6, XCFun 2.1.1, Xvfb 1.20.11, Z3 4.8.11, ZeroMQ 4.3.4 * minor enhancements, including: * update cuDNN 8.0.x easyconfigs with a download location ( `#12368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12368> `_ ) * add extensions to recent R easyconfigs: GxEScanR ( `#13039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13039> `_ ), cSEM ( `#13208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13208> `_ ), cubelyr + broom.mixed ( `#13252 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13252> `_ ), grf ( `#13261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13261> `_ ), twang + xgboost ( `#13284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13284> `_ ), neuralnet ( `#13330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13330> `_ ) * add check to easyconfigs test suite to ensure OpenSSL wrapper is used in easyconfigs using a recent toolchain ( `#13079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13079> `_ ) * add gipaw to QuantumESPRESSO/6.7 ( `#13087 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13087> `_ ) * add checksum for aarch64 installation file for CUDAcore easyconfigs ( `#13014 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13014> `_ , `#13097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13097> `_ ) * add Perl dependency to makeinfo easyconfigs ( `#13166 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13166> `_ ) * set minimal OpenSSL version to 1.1.1 for OpenSSL v1.1 wrapper ( `#13188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13188> `_ ) * add JIT support for CUDA 11 to PyTorch 1.7.1 ( `#13207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13207> `_ ) * add ``ninja --version`` as sanity check command in Ninja easyconfigs ( `#13222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13222> `_ ) * code cleanup + improvements for easyconfigs test suite ( `#13257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13257> `_ ) * various bug fixes, including: * download sources via git for XGBoost 20171120 easyconfig due to use of submodules ( `#6880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6880> `_ ) * add elfutils as build dependency for Clang 8.0.x and 9.0.1 ( `#13015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13015> `_ ) and Clang 11.0.1 ( `#13008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13008> `_ ) easyconfigs that have a CUDA dependency * add missing CMake option to Geant4 v10.7.1 in order to actually use external CLHEP ( `#13019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13019> `_ ) * add new checksum for mvabund extension to R v4.0.4 eaysconfigs ( `#13020 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13020> `_ , `#13021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13021> `_ ) * add patch to fix numpy ``test_ccompiler_opt`` in SciPy-bundle v2021.05 ( `#13042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13042> `_ ) * add patch to fix installation of HDF 4.2.15 on aarch64 ( `#13059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13059> `_ ) * make sure that MbedTLS' Makefile uses ``python`` rather than ``python2`` ( `#13061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13061> `_ ) * fix checksum for snpEff 5.0 ( `#13062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13062> `_ ) * fix source URL for LIBSVM 3.24 by downloading from GitHub ( `#13076 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13076> `_ ) * add ``preinstallopts`` for minimap2 to fix installation on aarch64 ( `#13080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13080> `_ ) * add patch for GCC 10.2.0 to fix internal compiler error on aarch64 ( `#13086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13086> `_ ) * switch to NCCL 2.8.3 built from source for CuPy, Horovod, libgpuarray, PyTorch and TensorFlow using fosscuda/2020b ( `#13103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13103> `_ ) * add astor to dependencies of TensorFlow with 2019b ( `#13111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13111> `_ ) and 2020b ( `#13103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13103> `_ , `#13112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13112> `_ ) toolchains * break cyclic dependency between groff, makeinfo and Perl by adding Perl-minimal and makeinfo-minimal easyconfigs ( `#13163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13163> `_ - `#13165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13165> `_ ) * add missing rgdal dep to R-INLA ( `#13179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13179> `_ ) * add patch to fix ``uniq`` operation in TensorFlow 2.4.1 ( `#13181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13181> `_ ) * add Perl build dependency for PnetCDF 1.12.1 ( `#13183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13183> `_ ) * disable own avx detection of libfabric v1.12.1 ( `#13215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13215> `_ ) * add GCCcore-[1-9][0-9].x to ``test_dep_versions_per_toolchain_generation`` ( `#13243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13243> `_ , `#13249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13249> `_ , `#13251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13251> `_ ) * add patch to fix installation of TensorFlow 2.0.x ( `#13248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13248> `_ ) * add patch for recent GCCcore versions to fix compatibility with CUDA 11 ( `#13290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13290> `_ ) * fix install step for glew ( `#13297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13297> `_ ) * update Boost 1.74.0 easyconfigs to use ``tagged_layout`` rather than ``boost_multi_thread`` ( `#13300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13300> `_ ) * avoid using PMIx from system instead of PMIx dependency specified via ``--with-pmix`` for OpenMPI 4.x ( `#13307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13307> `_ ) * add patch for GCCcore 10.3.0 to prevent issues when compiling with nvcc ( `#13310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13310> `_ ) * add patch for OpenMPI 4.0.x to fix building against (system) UCX version > 1.7 ( `#13329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13329> `_ ) * fix build of manta 1.6.0 on top of Boost 1.74.0 ( `#13338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13338> `_ ) * fix recent taxator-tk easyconfigs by adding (back) ``-DBoost_NO_BOOST_CMAKE=ON`` configure option ( `#13342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13342> `_ ) * other changes: * disable ``debuginfod`` for elfutils to minimize required dependencies ( `#13034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13034> `_ ) * add bare Python 3.9.5 easyconfig and use that as builddep for LLVM 11.1.0 ( `#13035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13035> `_ ) * remove misleading comment from Python >= 3.7 easyconfigs, libffi is now also required for Python itself (no longer bundled) ( `#13041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13041> `_ ) * use new custom easyblock in torchvision easyconfigs ( `#13102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13102> `_ ) * remove superfluous TensorFlow patch ( `#13223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13223> `_ ) * cleanup of easyconfigs for (bundles) of Python packages: remove default ``PYPI_SOURCE`` source URLs + use ``PythonBundle`` rather than ``Bundle`` easyblock ( `#13253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13253> `_ , `#13295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13295> `_ , `#13336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13336> `_ ) * update ``README`` with instructions for MATLAB easyconfigs ( `#12597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12597> `_ ) .. _release_notes_eb440: EasyBuild v4.4.0 (June 2nd 2021) -------------------------------- feature release **framework** * various enhancements, including: * enhance ``apply_regex_substitutions`` to allow specifying action to take in case there are no matches ( `#3440 <https://github.com/easybuilders/easybuild-framework/pull/3440> `_ ) * performance improvements for easyconfig parsing and eb startup ( `#3555 <https://github.com/easybuilders/easybuild-framework/pull/3555> `_ ) * add support for downloading easyconfigs from multiple PRs with ``--from-pr`` ( `#3605 <https://github.com/easybuilders/easybuild-framework/pull/3605> `_ , `#3707 <https://github.com/easybuilders/easybuild-framework/pull/3707> `_ , `#3708 <https://github.com/easybuilders/easybuild-framework/pull/3708> `_ ) * add support for prepending custom library paths in RPATH section via ``--rpath-override-dirs`` ( `#3650 <https://github.com/easybuilders/easybuild-framework/pull/3650> `_ ) * allow amending easyconfig parameters which are not the default ( `#3651 <https://github.com/easybuilders/easybuild-framework/pull/3651> `_ ) * update HierarchicalMNS for Intel OneAPI compilers ( `#3653 <https://github.com/easybuilders/easybuild-framework/pull/3653> `_ ) * add support for ``--sanity-check-only`` ( `#3655 <https://github.com/easybuilders/easybuild-framework/pull/3655> `_ ) * add support for running commands asynchronously via ``run_cmd`` + ``complete_cmd`` functions ( `#3656 <https://github.com/easybuilders/easybuild-framework/pull/3656> `_ ) * add support for using oneAPI versions of 'intel' toolchain components ( `#3665 <https://github.com/easybuilders/easybuild-framework/pull/3665> `_ ) * add toolchain definition for gofbf (foss with FlexiBLAS rather than OpenBLAS) ( `#3666 <https://github.com/easybuilders/easybuild-framework/pull/3666> `_ ) * add support for using ``ARCH`` constant in easyconfig files ( `#3670 <https://github.com/easybuilders/easybuild-framework/pull/3670> `_ ) * honor keyboard interrupt in ``eb`` command ( `#3674 <https://github.com/easybuilders/easybuild-framework/pull/3674> `_ ) * add toolchain definition for Fujitsu toolchain ( `#3677 <https://github.com/easybuilders/easybuild-framework/pull/3677> `_ , `#3704 <https://github.com/easybuilders/easybuild-framework/pull/3704> `_ , `#3712 <https://github.com/easybuilders/easybuild-framework/pull/3712> `_ , `#3713 <https://github.com/easybuilders/easybuild-framework/pull/3713> `_ , `#3714 <https://github.com/easybuilders/easybuild-framework/pull/3714> `_ , `#3717 <https://github.com/easybuilders/easybuild-framework/pull/3717> `_ ) * extend sanity check step to check whether specific libraries are not linked into installed binaries/libraries ( `#3678 <https://github.com/easybuilders/easybuild-framework/pull/3678> `_ ) * via ``banned-linked-shared-libs`` and ``required-linked-shared-libs`` EasyBuild configuration options * via ``banned_linked_shared_libs`` and ``required_linked_shared_libs`` methods in toolchain support * via ``banned_linked_shared_libs`` and ``required_linked_shared_libs`` methods in easyblock * via ``banned_linked_shared_libs`` and ``required_linked_shared_libs`` easyconfig parameters * add ``locate_solib`` function to locate Linux shared libraries ( `#3682 <https://github.com/easybuilders/easybuild-framework/pull/3682> `_ ) * add system agnostic function to locate shared libraries ( `#3683 <https://github.com/easybuilders/easybuild-framework/pull/3683> `_ ) * add ``update_build_option`` function to update specific build options after initializing the EasyBuild configuration ( `#3684 <https://github.com/easybuilders/easybuild-framework/pull/3684> `_ ) * allow opting out of recursively unloaded of modules via recursive_module_unload easyconfig parameter ( `#3689 <https://github.com/easybuilders/easybuild-framework/pull/3689> `_ ) * check for correct version values when parsing easystack file ( `#3693 <https://github.com/easybuilders/easybuild-framework/pull/3693> `_ ) * run post-install commands specified for a specific extension ( `#3696 <https://github.com/easybuilders/easybuild-framework/pull/3696> `_ ) * add support for ``--skip-extensions`` ( `#3702 <https://github.com/easybuilders/easybuild-framework/pull/3702> `_ ) * include PR title in output produced by ``--merge-pr`` ( `#3706 <https://github.com/easybuilders/easybuild-framework/pull/3706> `_ ) * various bug fixes, including: * avoid metadata greedy behaviour when probing for external module metadata (mostly relevant for integration with Cray Programming Environment) ( `#3559 <https://github.com/easybuilders/easybuild-framework/pull/3559> `_ ) * catch problems early on if ``--github-user`` is not specified for ``--new-pr`` & co ( `#3644 <https://github.com/easybuilders/easybuild-framework/pull/3644> `_ ) * re-enable write permissions when installing with ``read-only-installdir`` ( `#3649 <https://github.com/easybuilders/easybuild-framework/pull/3649> `_ ) * also run sanity check for extensions when using ``--module-only`` ( `#3655 <https://github.com/easybuilders/easybuild-framework/pull/3655> `_ ) * improve logging when failing to load class from ``exts_classmap`` ( `#3657 <https://github.com/easybuilders/easybuild-framework/pull/3657> `_ ) * fix use of ``--module-only`` on existing installations without write permissions ( `#3659 <https://github.com/easybuilders/easybuild-framework/pull/3659> `_ ) * correct help text for ``subdir-user-modules`` ( `#3660 <https://github.com/easybuilders/easybuild-framework/pull/3660> `_ ) * avoid picking up easyblocks outside of sandbox in framework tests ( `#3680 <https://github.com/easybuilders/easybuild-framework/pull/3680> `_ ) * use unload/load in ``ModuleGeneratorLua.swap_module`` , since ``swap`` is not supported by Lmod ( `#3685 <https://github.com/easybuilders/easybuild-framework/pull/3685> `_ ) * update HierarchicalMNS to also return 'Toolchain/<name>/<version>' as ``$MODULEPATH`` extension for cpe* Cray toolchains ( `#3686 <https://github.com/easybuilders/easybuild-framework/pull/3686> `_ ) * make ``EasyConfigParser.get_config_dict`` return a copy rather than a reference ( `#3692 <https://github.com/easybuilders/easybuild-framework/pull/3692> `_ ) * make sure that ``$TAPE`` is unset when using piped tar ( `#3698 <https://github.com/easybuilders/easybuild-framework/pull/3698> `_ ) * fix extending message for changed files in ``new_pr_from_branch`` ( `#3699 <https://github.com/easybuilders/easybuild-framework/pull/3699> `_ ) * enhance ``sched_getaffinity`` function to avoid early crash when counting available cores on systems with more than 1024 cores ( `#3701 <https://github.com/easybuilders/easybuild-framework/pull/3701> `_ ) * correctly strip extension from filename in ``extract_cmd`` and ``back_up_file`` functions ( `#3705 <https://github.com/easybuilders/easybuild-framework/pull/3705> `_ ) * other changes: * deprecate adding a non-existing path to ``$MODULEPATH`` ( `#3637 <https://github.com/easybuilders/easybuild-framework/pull/3637> `_ ) * bump cryptography requirement from 3.2.1 to 3.3.2 ( `#3643 <https://github.com/easybuilders/easybuild-framework/pull/3643> `_ , `#3648 <https://github.com/easybuilders/easybuild-framework/pull/3648> `_ ) * test bootstrap script in separate workflow, and limit test configurations a bit ( `#3646 <https://github.com/easybuilders/easybuild-framework/pull/3646> `_ ) * update ``setup.py`` to indicate compatibility with Python 3.8 and 3.9 ( `#3647 <https://github.com/easybuilders/easybuild-framework/pull/3647> `_ ) * replace ``log_error`` parameter of ``which()`` by ``on_error`` ( `#3661 <https://github.com/easybuilders/easybuild-framework/pull/3661> `_ , `#3664 <https://github.com/easybuilders/easybuild-framework/pull/3664> `_ ) * don't skip sanity check for ``--module-only --rebuild`` ( `#3645 <https://github.com/easybuilders/easybuild-framework/pull/3645> `_ ) * move ``disable_templating`` function into the EasyConfig class ( `#3668 <https://github.com/easybuilders/easybuild-framework/pull/3668> `_ ) * pin GitPython version for Python<3.6, don't test bootstrap script against Python 3.8/3.9 ( `#3675 <https://github.com/easybuilders/easybuild-framework/pull/3675> `_ ) * tweak foss toolchain definition to switch from OpenBLAS to FlexiBLAS in foss/2021a ( `#3679 <https://github.com/easybuilders/easybuild-framework/pull/3679> `_ ) * suggest missing SSH key when not able to read from remote repository in ``--check-github`` ( `#3681 <https://github.com/easybuilders/easybuild-framework/pull/3681> `_ ) * drop support for Python 2.6 ( `#3715 <https://github.com/easybuilders/easybuild-framework/pull/3715> `_ ) **easyblocks** * 3 new software-specific easyblocks: * FlexiBLAS ( `#2369 <https://github.com/easybuilders/easybuild-easyblocks/pull/2369> `_ , `#2422 <https://github.com/easybuilders/easybuild-easyblocks/pull/2422> `_ , `#2424 <https://github.com/easybuilders/easybuild-easyblocks/pull/2424> `_ , `#2426 <https://github.com/easybuilders/easybuild-easyblocks/pull/2426> `_ ) * dm-reverb ( `#2413 <https://github.com/easybuilders/easybuild-easyblocks/pull/2413> `_ ) * custom easyblock to install OpenSSL wrapper for OpenSSL installed in OS, with fallback to build and install OpenSSL from source if not available in OS ( `#2429 <https://github.com/easybuilders/easybuild-easyblocks/pull/2429> `_ ) * minor enhancements, including: * also add ``-pthread`` to ``prebuildopts`` of cryptography ( `#2270 <https://github.com/easybuilders/easybuild-easyblocks/pull/2270> `_ ) * don't unpack Python wheel (*.whl) files by default in generic PythonPackage easyblock ( `#2366 <https://github.com/easybuilders/easybuild-easyblocks/pull/2366> `_ , `#2442 <https://github.com/easybuilders/easybuild-easyblocks/pull/2442> `_ ) * enable installation of samples for CUDA > 10.1 ( `#2374 <https://github.com/easybuilders/easybuild-easyblocks/pull/2374> `_ ) * add option to disable pip connecting to PyPi (enable use of ``--no-index`` ) ( `#2390 <https://github.com/easybuilders/easybuild-easyblocks/pull/2390> `_ ) * update MotionCor2 easyblock to handle new version and be aware of CUDAcore ( `#2394 <https://github.com/easybuilders/easybuild-easyblocks/pull/2394> `_ ) * make it possible to force disabling kernel features in Qt easyblock ( `#2403 <https://github.com/easybuilders/easybuild-easyblocks/pull/2403> `_ ) * update imkl easyblock to support oneAPI versions (>= 2021.x) ( `#2407 <https://github.com/easybuilders/easybuild-easyblocks/pull/2407> `_ ) * add ``\"gurobi_cl --help`` as default sanity check command for Gurobi ( `#2411 <https://github.com/easybuilders/easybuild-easyblocks/pull/2411> `_ ) * enhance BWA easyblock to copy includes and libraries ( `#2417 <https://github.com/easybuilders/easybuild-easyblocks/pull/2417> `_ ) * allow ``default`` versions to be defined by ModuleRC easyblock ( `#2418 <https://github.com/easybuilders/easybuild-easyblocks/pull/2418> `_ ) * enhance MesonNinja and CMakeMake easyblocks to create unused build dir when ``separate_build_dir`` is set ( `#2419 <https://github.com/easybuilders/easybuild-easyblocks/pull/2419> `_ ) * enable ``sanity_pip_check`` by default for Python easyconfigs if pip >= 9.0 will be installed ( `#2423 <https://github.com/easybuilders/easybuild-easyblocks/pull/2423> `_ ) * enhance FFTW easyblock to support SVE CPU feature and building with Fujitsu compiler ( `#2425 <https://github.com/easybuilders/easybuild-easyblocks/pull/2425> `_ ) * make ScaLAPACK easyblock aware of FlexiBLAS ( `#2427 <https://github.com/easybuilders/easybuild-easyblocks/pull/2427> `_ ) * update imkl easyblock to unpack example tarballs and set ``$MKL_EXAMPLES`` (+ some code cleanup) ( `#2430 <https://github.com/easybuilders/easybuild-easyblocks/pull/2430> `_ ) * update list of system libs for TensorFlow 2.5 ( `#2432 <https://github.com/easybuilders/easybuild-easyblocks/pull/2432> `_ ) * allow disabling MPI tests when installing Intel MPI (impi) via ``--disable-mpi-tests`` ( `#2440 <https://github.com/easybuilders/easybuild-easyblocks/pull/2440> `_ ) * exclude bottleneck tests in PyTorch ( `#2450 <https://github.com/easybuilders/easybuild-easyblocks/pull/2450> `_ ) * various bug fixes, including: * ensure lib subdirectory is found in stage 2 of GCC installation + fall back to lib64 ( `#2339 <https://github.com/easybuilders/easybuild-easyblocks/pull/2339> `_ ) * fix permission on MATLAB installer config file so it can be written to ( `#2385 <https://github.com/easybuilders/easybuild-easyblocks/pull/2385> `_ ) * fix problem with installing older CUDA versions that uses the Perl based installer ( `#2387 <https://github.com/easybuilders/easybuild-easyblocks/pull/2387> `_ ) * enhance Python easyblock: add option to install pip with core Python, tweak defaults, create unversioned pip symlink ( `#2388 <https://github.com/easybuilders/easybuild-easyblocks/pull/2388> `_ ) * fix ``installopts`` before installing the extension in GROMACS easyblock ( `#2391 <https://github.com/easybuilders/easybuild-easyblocks/pull/2391> `_ ) * updated numpy easyblock to use ``read_file`` for patch ( `#2395 <https://github.com/easybuilders/easybuild-easyblocks/pull/2395> `_ ) * use explicit build toolset and compiler path in Boost easyblock ( `#2402 <https://github.com/easybuilders/easybuild-easyblocks/pull/2402> `_ ) * replace hardcoded ``2021.1.1`` with ``self.version`` in impi easyblock ( `#2405 <https://github.com/easybuilders/easybuild-easyblocks/pull/2405> `_ ) * set ``$SANDCASTLE`` when running PyTorch tests to disable some tests as-if we are on Facebook's CI ( `#2412 <https://github.com/easybuilders/easybuild-easyblocks/pull/2412> `_ ) * make GROMACS easyblock work with ``--module-only`` ( `#2414 <https://github.com/easybuilders/easybuild-easyblocks/pull/2414> `_ ) * make sure OpenFOAM sanity checks don't require builddir write permissions ( `#2415 <https://github.com/easybuilders/easybuild-easyblocks/pull/2415> `_ ) * make Tkinter easyblock work with ``--module-only`` ( `#2416 <https://github.com/easybuilders/easybuild-easyblocks/pull/2416> `_ ) * also disable altivec with FFTW 3.3.9 on POWER ( `#2437 <https://github.com/easybuilders/easybuild-easyblocks/pull/2437> `_ ) * make sure that ``self.python_cmd`` is set before using it in ``PythonPackage.sanity_check_step`` ( `#2447 <https://github.com/easybuilders/easybuild-easyblocks/pull/2447> `_ ) * other changes, including: * update ``setup.py`` to indicate compatibility with Python 3.8 and 3.9 ( `#2384 <https://github.com/easybuilders/easybuild-easyblocks/pull/2384> `_ ) * use ``on_error`` rather than deprecated ``log_error`` named argument for ``which`` function ( `#2406 <https://github.com/easybuilders/easybuild-easyblocks/pull/2406> `_ ) * remove ``cuda_compute_capabilities`` from custom easyconfig parameters for Clang, LAMMPS and TensorFlow (now supported as general easyconfig parameter) ( `#2433 <https://github.com/easybuilders/easybuild-easyblocks/pull/2433> `_ ) **easyconfigs** * added easyconfigs for new Fujitsu toolchain: FCC/4.5.0 ( `#12999 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12999> `_ , `#12995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12995> `_ , `#13007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13007> `_ ), ffmpi/4.5.0 ( `#13000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13000> `_ ) and Fujitsu/21.05 ( `#13001 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13001> `_ , `#13007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13007> `_ ) * add easyconfigs for updates of common toolchains: foss/2021a ( `#12867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12867> `_ , `#12975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12975> `_ ), intel/2021a ( `#12885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12885> `_ , `#12975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12975> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added easyconfig for gomkl/2021a toolchain ( `#12987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12987> `_ ) * added example easyconfig files for 58 new software packages: * Archive-Zip ( `#12651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12651> `_ ), BirdNET ( `#12737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12737> `_ , `#12712 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12712> `_ , `#12737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12737> `_ ), cell2location ( `#12448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12448> `_ ), cryoDRGN ( `#12704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12704> `_ ), dm-reverb ( `#12824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12824> `_ ), DROP ( `#12559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12559> `_ , `#12801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12801> `_ , `#12950 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12950> `_ ), fastahack ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), fermi-lite ( `#12856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12856> `_ ), filevercmp ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), FlexiBLAS ( `#12476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12476> `_ ), freetype-py ( `#12918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12918> `_ ), fsom ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), garnett ( `#12529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12529> `_ ), gawk ( `#12716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12716> `_ ), gemmi ( `#12855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12855> `_ ), georges ( `#12570 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12570> `_ ), hifiasm ( `#12897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12897> `_ ), intervaltree ( `#12838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12838> `_ ), LDC ( `#12671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12671> `_ ), libidn2 ( `#12670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12670> `_ ), librosa ( `#10477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10477> `_ ), librsb ( `#12780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12780> `_ ), line_profiler ( `#12556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12556> `_ ), loompy ( `#12804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12804> `_ ), mmtf-cpp ( `#12580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12580> `_ ), mongolite ( `#12632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12632> `_ ), msgpack-c ( `#12580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12580> `_ ), multichoose ( `#12839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12839> `_ ), networkTools ( `#12810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12810> `_ ), NewHybrids ( `#12528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12528> `_ ), Octopus-vcf ( `#12598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12598> `_ ), onedrive ( `#12671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12671> `_ ), p4-phylogenetics ( `#12549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12549> `_ ), pagmo ( `#12678 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12678> `_ ), pyfaidx ( `#12872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12872> `_ ), pyfasta ( `#12952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12952> `_ ), pygmo ( `#12678 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12678> `_ ), pysheds ( `#12791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12791> `_ ), R-INLA ( `#12955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12955> `_ , `#12927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12927> `_ , `#12955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12955> `_ ), RegTools ( `#12874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12874> `_ ), request ( `#12448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12448> `_ ), rMATS-turbo ( `#12982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12982> `_ ), scanpy ( `#12731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12731> `_ ), SeqLib ( `#12856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12856> `_ ), SeuratData ( `#12993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12993> `_ ), SeuratWrappers ( `#12994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12994> `_ ), smithwaterman ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), snp-sites ( `#12900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12900> `_ ), SSW ( `#12856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12856> `_ ), tabixpp ( `#12837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12837> `_ ), TagDust ( `#11599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11599> `_ ), TALON ( `#12963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12963> `_ ), tMAE ( `#12559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12559> `_ ), TranscriptClean ( `#12952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12952> `_ ), umap-learn ( `#12448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12448> `_ ), vcflib ( `#12841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12841> `_ ), xESMF ( `#12799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12799> `_ ), XlsxWriter ( `#12820 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12820> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 9.4.1, apex 20210420, astropy 4.2.1, binutils 2.36.1, BLIS 0.8.1, Bonito 0.3.8, BUSCO 5.1.2, canu 2.1.1, carputils 20210513, CastXML 0.4.3, ccache 4.2.1, CDO 1.9.10, CIRCexplorer2 2.3.8, CLHEP 2.4.4.0, CMake 3.20.1, CNVkit 0.9.8, CUDA(core) 11.3.0, CuPy 8.5.0, cURL 7.76.0, DFA 2.1.2, Doxygen 1.9.1, Eigen 3.3.9, FastANI 1.33, FFTW 3.3.9, GATK 4.2.0.0, GCC 10.3.0 + 11.1.0, GDB 10.2, gdc-client 1.6.0, GDRCopy 2.2, Geant4 10.7.1, Geant4-data 20210510, GeneMark-ET 4.65, glew 2.2.0, GLib 2.68.2, GLPK 5.0, GMP 6.2.1, Go 1.16.3, Graphviz 2.47.0, GROMACS 2021.2, GStreamer 1.18.4, GTDB-Tk 1.5.0, Gurobi 9.1.2, HMMER 3.3.2, Horovod 0.21.3, hwloc 2.4.1, hypothesis 6.13.1, IGV 2.9.4, impi 2021.2.0, imkl 2021.2.0, intel-compilers 2021.2.0, JasPer 2.0.28, Julia 1.6.1, Kraken2 2.1.1, KronaTools 2.8, libarchive 3.5.1, libdeflate 1.7, libdrm 2.4.106, libfabric 1.12.1, libreadline 8.1, libRmath 4.0.0, libsndfile 1.0.31, LIBSVM 3.24, LibTIFF 4.2.0, libunwind 1.5.0, libwebp 1.2.0, LLVM 11.1.0, LMDB 0.9.28, LUMPY 0.3.1, lz4 1.9.3, Mako 1.1.4, MATLAB 2021a, Mesa 21.1.1, meshalyzer 2.2, Meson 0.58.0, MetaBAT 2.15, metaWRAP 1.3, minimap2 2.18, Molden 6.8, MotionCor2 1.4.2, ncview 2.1.8, NetPIPE 5.1.4, nettle 3.7.2, NiBabel 3.2.1, Nilearn 0.7.1, Nim 1.4.6, Ninja 1.10.2, NLopt 2.7.0, NSS 3.65, numactl 2.0.14, NWChem 7.0.2, OpenBLAS 0.3.15, openCARP 6.0, OpenEXR 3.0.1, OpenMM 7.5.0, OpenMPI 4.1.1, OpenSSL 1.1 (wrapper), OSU-Micro-Benchmarks 5.7.1, Pandoc 2.13, parallel 20210322, parasail 2.4.3, PAUP 4.0a168, PCRE2 10.36, Perl 5.32.1, pigz 2.6, PMIx 3.2.3, Primer3 2.5.0, PRSice 2.3.3, py-aiger 6.1.14, pybind11 2.6.2, PyCharm 2021.1.1, pydot 1.4.2, pyproj 3.0.1, PySAT 0.1.7.dev1, PyTorch 1.8.1, python-parasail 1.2.4, Pylint 2.7.4, Python 3.9.5, Qt5 5.15.2, R-keras 2.4.0, rasterio 1.2.3, RAxML-NG 1.0.2, rclone 1.54.1, re2c 2.1.1, ReFrame 3.5.2, Rmath 4.0.4, Rust 1.52.1, Sambamba 0.8.0, samblaster 0.1.26, samclip 0.4.0, scikit-allel 1.3.2, SciPy-bundle 2021.05, SCons 4.1.0.post1, snakemake 6.1.0, SQLite 3.35.4, SRPRISM 3.1.2, Tcl 8.6.11, TCLAP 1.2.4, tmux 3.2, tqdm 4.60.0, UCX 1.10.0, Valgrind 3.17.0, WannierTools 2.5.1, wget 1.21.1, wxWidgets 3.1.4, X11 20210518, x264 20210414, x265 3.5, xorg-macros 1.19.3, YAXT 0.9.0, zarr 2.8.1, zstd 1.4.9 * minor enhancements, including: * add additional extensions to R v4.0.3 and v4.0.4: miceadds, visdat, UpSetR, naniar, stringdist, image.binarization ( `#12735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12735> `_ ), lassosum ( `#12821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12821> `_ ), lslx, regsem, semPLS ( `#13005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/13005> `_ ) * add GenABEL to R-bundle-Bioconductor ( `#12822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12822> `_ ) * various bug fixes, including: * disable automatic acceptance of NVHPC EULA ( `#12014 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12014> `_ ) * enhance RStudio-Server, add patch to inherit environment variables, add sanity check commands to verify installation ( `#12544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12544> `_ ) * add fix to scipy to handle ``NaN`` arguments to ``vi`` function ( `#12551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12551> `_ ) * copy all binaries + examples & co for PAML v4.9j ( `#12567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12567> `_ ) * add patch to fix hardcoded ``num_cores`` in DMCfun extension included with R 4.0.x ( `#12583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12583> `_ ) * backport Charm++ patch for NAMD/2.14 on intel/2020a to handle newer glibc ( `#12594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12594> `_ ) * add setuptools_scm and pytest-runner extensions to Pylint easyconfigs ( `#12599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12599> `_ ) * fix typo in Delly easyconfig to actually do parallel build ( `#12633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12633> `_ ) * fix potential memory leak in OpenBLAS 0.3.12 ( `#12649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12649> `_ ) * consistently use pip to install Python packages in recent Python easyconfigs ( `#12650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12650> `_ ) * replace bintray source url for Groovy ( `#12652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12652> `_ ) * add missing Python & Perl dependencies to AUGUSTUS v3.4.0 with foss/2020b ( `#12662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12662> `_ ) * fix wget dependency: use libidn2 rather than libidn ( `#12670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12670> `_ ) * fix source URLs for recent ELPA versions ( `#12700 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12700> `_ ) * override host compiler check in CUDAcore ( `#12701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12701> `_ ) * add Python build dependency to libpsl 0.21.0 easyconfigs ( `#12715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12715> `_ ) * fix error in libgpg-error 1.36 with gawk builtin ( `#12716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12716> `_ ) * add libtool build dependency to leidenalg ( `#12741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12741> `_ ) * fix source URLs for Boost 1.71.0 - 1.74.0 easyconfigs ( `#12743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12743> `_ ) and Boost.Python ( `#12744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12744> `_ ) * add patches for PyTorch 1.7.1 avoiding failures on POWER and A100 ( `#12753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12753> `_ ) * add patch for OpenPGM 5.2.122 eaysconfigs to fix non-existent directory in *.pc (pkgconfig) file ( `#12774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12774> `_ ) * add missing Perl build dependency to recent wget easyconfigs ( `#12787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12787> `_ ) * make sure Python dependency is used in preCICE 2.x easyconfigs ( `#12793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12793> `_ ) * don't skip source step in FastTree easyconfigs + fix SHA256 checksum for FastTree 2.1.11 ( `#12794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12794> `_ ) * add patch for rhdf5filters extension in Bioconductor 3.12 bundle to fix installation on aarch64 ( `#12836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12836> `_ ) * add IceLake detection to OpenBLAS 0.3.12 and 0.3.15 ( `#12865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12865> `_ ) * fix checksum for MaxBin 2.2.7 ( `#12869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12869> `_ ) * run ``make clean`` before building FragGeneScan, to clean up object files included in source tarball ( `#12870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12870> `_ ) * clean up install of KronaTools ( `#12871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12871> `_ ) * add UCX dependency to OneAPI versions of impi ( `#12873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12873> `_ ) * correct description in libdeflate easyconfig ( `#12886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12886> `_ ) * override Makefile with hardcoded ``CC=cc`` in UnZip easyconfigs ( `#12887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12887> `_ ) * fix compatibility of FLAIR v1.5.1-20200630 with rpy2 v3.x ( `#12899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12899> `_ ) * fix test step for libxc 4.3.4 and 5.1.x when using RPATH linking ( `#12912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12912> `_ ) * fix source URLs in BLAST 2.10.x easyconfigs ( `#12914 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12914> `_ ) * add missing xproto build dependency to imake easyconfig ( `#12930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12930> `_ ) * add patch to fix GCC 10.2.0 rejecting valid code on PPC ( `#12948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12948> `_ ) * in easyconfig tests, check version of dependencies named Python, not if dependencies with certain versions are named Python ( `#12962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12962> `_ ) * update easyconfigs for binutils 2.35 to use binutils 2.35.2 source tarball instead to pick up bug fixes ( `#12967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12967> `_ , `#12988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12988> `_ ) * fix download URL for DB 18.1.40 ( `#12974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12974> `_ ) * fix test failure in TensorFlow 2.4.1 on recent CUDA drivers ( `#12979 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12979> `_ ) * fix error in ``configopts`` for netCDF and HDF5 and add missing dependencies of ABINIT 9.x ( `#12981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12981> `_ ) * add patch to fix buffer overflow in OpenMPI 4.1.x ( `#12983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12983> `_ ) * other changes: * update ``setup.py`` to indicate compatibility with Python 3.8 and 3.9 ( `#12565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12565> `_ ) * add ``-Java`` versionsuffix for Hadoop easyconfig using GCCcore/10.2.0 toolchain, since it depends on Java 1.8 ( `#12709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12709> `_ ) * remove unnecessary workaround for missing version of OpenDataCube and Spyder for 2020+ toolchains ( `#12757 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12757> `_ ) * remove ``unpack_sources = False`` from recent easyconfigs that use a *.whl file as source ( `#12783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12783> `_ ) * whitelist Seaborn 0.10.1 for NanoComp 1.13.1 and NanoPlot 1.33.0 ( `#12790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12790> `_ ) * add check to make sure that source step is not being skipped ( `#12807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12807> `_ ) * use ``EasyConfig.disable_templating`` method in test suite ( `#12848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12848> `_ ) * disable usNIC by default in libfabric to avoid problems due to linking to both libnl and libnl-3 ( `#12854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12854> `_ ) * use OpenSSL wrapper as dependency in easyconfigs using GCCcore/10.3.0 toolchain ( `#12922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12922> `_ , `#12944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12944> `_ ) * dump easyconfig before initializing easyblock in order to compare it with original easyconfig ( `#12925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12925> `_ ) * remove postinstallcmds from imkl 2020.x easyconfigs, easyblock now installs examples ( `#12937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12937> `_ ) .. _release_notes_eb434: EasyBuild v4.3.4 (Apr 9th 2021) ------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for filtering dependencies by using ``False`` as version ( `#3506 <https://github.com/easybuilders/easybuild-framework/pull/3506> `_ ) * add ``create_unused_dir`` function to create a directory which does not yet exist ( `#3551 <https://github.com/easybuilders/easybuild-framework/pull/3551> `_ ) * avoid running expensive ``module use`` and ``module unuse`` commands when using Lmod as modules tool, update ``$MODULEPATH`` directly instead ( `#3557 <https://github.com/easybuilders/easybuild-framework/pull/3557> `_ , `#3633 <https://github.com/easybuilders/easybuild-framework/pull/3633> `_ ) * create CUDA cache (for JIT compiled PTX code) in build dir instead of ``$HOME`` ( `#3569 <https://github.com/easybuilders/easybuild-framework/pull/3569> `_ ) * add \"Citing\" section to module files ( `#3596 <https://github.com/easybuilders/easybuild-framework/pull/3596> `_ ) * add support for using fallback ``arch=*`` key in dependency version specified as arch->version mapping ( `#3600 <https://github.com/easybuilders/easybuild-framework/pull/3600> `_ ) * also check for pending change requests and mergeable_state in ``check_pr_eligible_to_merge`` ( `#3604 <https://github.com/easybuilders/easybuild-framework/pull/3604> `_ ) * ignore undismissed ``changes requested`` review if there is an ``approved`` review by the same user ( `#3607 <https://github.com/easybuilders/easybuild-framework/pull/3607> `_ , `#3608 <https://github.com/easybuilders/easybuild-framework/pull/3608> `_ ) * sort output of ``eb --search`` in natural order (respecting numbers) ( `#3609 <https://github.com/easybuilders/easybuild-framework/pull/3609> `_ ) * enhance ``eb`` command to ensure that ``easybuild.main`` can be imported before settling on python* command to use ( `#3610 <https://github.com/easybuilders/easybuild-framework/pull/3610> `_ ) * add ``--env-for-shebang`` configuration option to define the ``env`` command to use for shebangs ( `#3613 <https://github.com/easybuilders/easybuild-framework/pull/3613> `_ ) * add templates for architecture independent Python wheels ( `#3618 <https://github.com/easybuilders/easybuild-framework/pull/3618> `_ ) * mention easyblocks PR in gist when uploading test report for it + fix ``clean_gists.py`` script ( `#3622 <https://github.com/easybuilders/easybuild-framework/pull/3622> `_ ) * also accept regular expression value for ``--accept-eula-for`` ( `#3630 <https://github.com/easybuilders/easybuild-framework/pull/3630> `_ ) * update ``validate_github_token`` function to accept GitHub token in new format ( `#3632 <https://github.com/easybuilders/easybuild-framework/pull/3632> `_ ) * various bug fixes, including: * fix ``$BLAS_LIB_MT`` for OpenBLAS, ensure ``-lpthread`` is included ( `#3584 <https://github.com/easybuilders/easybuild-framework/pull/3584> `_ ) * use ``--opt=val`` for passing settings from config file to option parser to avoid error for values starting with ``-`` or ``--`` ( `#3594 <https://github.com/easybuilders/easybuild-framework/pull/3594> `_ ) * avoid raised exception when getting output from interactive command in ``run_cmd_qa`` ( `#3599 <https://github.com/easybuilders/easybuild-framework/pull/3599> `_ ) * add option to write file from file-like object and use in ``download_file`` ( `#3614 <https://github.com/easybuilders/easybuild-framework/pull/3614> `_ ) * make sure that path to ``eb`` is always found by tests ( `#3617 <https://github.com/easybuilders/easybuild-framework/pull/3617> `_ ) * other changes: * add ``pick_default_branch`` function to clean up duplicate code in ``tools/github.py`` ( `#3592 <https://github.com/easybuilders/easybuild-framework/pull/3592> `_ ) * refactor the CI configuration to use inclusion instead of exclusion ( `#3616 <https://github.com/easybuilders/easybuild-framework/pull/3616> `_ ) * use develop branch when testing push access in ``--check-github`` ( `#3629 <https://github.com/easybuilders/easybuild-framework/pull/3629> `_ ) * deprecate ``--accept-eula`` , rename to ``--accept-eula-for`` ( `#3630 <https://github.com/easybuilders/easybuild-framework/pull/3630> `_ ) **easyblocks** * minor enhancements, including: * make OpenCV easyblock aware of protobuf, libwebp and OpenEXR dependencies provided via EasyBuild ( `#2346 <https://github.com/easybuilders/easybuild-easyblocks/pull/2346> `_ ) * update CP2K easyblock w.r.t. running regtest for CP2K v8.1 ( `#2350 <https://github.com/easybuilders/easybuild-easyblocks/pull/2350> `_ ) * update GROMACS easyblock for GROMACS/2021 with CUDA ( `#2353 <https://github.com/easybuilders/easybuild-easyblocks/pull/2353> `_ ) * adjust call to ``python-config`` for Python >= 3.8 in VMD easyblock ( `#2355 <https://github.com/easybuilders/easybuild-easyblocks/pull/2355> `_ ) * enhance cuDNN and CUDA easyblocks to support ``aarch64`` ( `#2356 <https://github.com/easybuilders/easybuild-easyblocks/pull/2356> `_ ) * pass down compiler flags provided by EasyBuild in g2clib easyblock ( `#2357 <https://github.com/easybuilders/easybuild-easyblocks/pull/2357> `_ ) * update VTune easyblock for version 2020 ( `#2359 <https://github.com/easybuilders/easybuild-easyblocks/pull/2359> `_ ) * make WRF and WPS easyblocks aware of ``(pre)configopts`` ( `#2361 <https://github.com/easybuilders/easybuild-easyblocks/pull/2361> `_ ) * add Clang version 12.0.0 for AOCC 3.0.0 to mapping in custom easyblock for AOCC ( `#2362 <https://github.com/easybuilders/easybuild-easyblocks/pull/2362> `_ ) * use ``PYPI_SOURCE`` as the default for source_urls of PythonPackage ( `#2364 <https://github.com/easybuilders/easybuild-easyblocks/pull/2364> `_ , `#2370 <https://github.com/easybuilders/easybuild-easyblocks/pull/2370> `_ ) * enhance PythonPackage easyblock to catch faulty version (0.0.0) for installed Python packages ( `#2367 <https://github.com/easybuilders/easybuild-easyblocks/pull/2367> `_ , `#2377 <https://github.com/easybuilders/easybuild-easyblocks/pull/2377> `_ ) * enhance BWA easyblock: pass compiler flags + use ``filetools`` functions ( `#2368 <https://github.com/easybuilders/easybuild-easyblocks/pull/2368> `_ ) * various bug fixes, including: * set ``$R_LIBS_SITE`` rather than ``$R_LIBS`` when installing R packages ( `#2326 <https://github.com/easybuilders/easybuild-easyblocks/pull/2326> `_ ) * update PETSc easyblock to take into account that ScaLAPACK installation may not have header files + fix building in parallel ( `#2348 <https://github.com/easybuilders/easybuild-easyblocks/pull/2348> `_ ) * disable CMake user package repository in CMakeMake generic easyblock ( `#2351 <https://github.com/easybuilders/easybuild-easyblocks/pull/2351> `_ ) * update LAPACK easyblock to keep control of compiler options for versions >= 3.9.0 ( `#2358 <https://github.com/easybuilders/easybuild-easyblocks/pull/2358> `_ ) * also set ``$TORCH_CUDA_ARCH_LIST`` for PyTorch tests ( `#2363 <https://github.com/easybuilders/easybuild-easyblocks/pull/2363> `_ ) * enhance Hadoop easyblock to avoid copying same native library twice ( `#2371 <https://github.com/easybuilders/easybuild-easyblocks/pull/2371> `_ ) * fix pip extension download pattern for PythonPackage easyblock ( `#2372 <https://github.com/easybuilders/easybuild-easyblocks/pull/2372> `_ ) * make the CUDA stub libs take preference over system libs when linking ( `#2373 <https://github.com/easybuilders/easybuild-easyblocks/pull/2373> `_ ) * improve Python package version check and add ``unversioned_packages`` easyconfig parameter ( `#2377 <https://github.com/easybuilders/easybuild-easyblocks/pull/2377> `_ ) **easyconfigs** * added easyconfig for goblf/2020b toolchain ( `#12381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12381> `_ , `#12535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12535> `_ ) * added example easyconfig files for 41 new software packages: * amplimap ( `#12205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12205> `_ ), BEEF ( `#12104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12104> `_ ), bpp ( `#12036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12036> `_ ), Brotli ( `#11651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11651> `_ ), CDAT ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), cicero ( `#12252 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12252> `_ ), CIF2Cell ( `#12258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12258> `_ ), CompareM ( `#9377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9377> `_ ), DL_POLY_4 ( `#12324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12324> `_ ), DMCfun ( `#12412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12412> `_ ), ESMPy ( `#12339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12339> `_ ), FLAC ( `#12300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12300> `_ ), gdbm ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), GPyOpt ( `#12524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12524> `_ ), json-c ( `#12344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12344> `_ ), libcdms ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), libdrs ( `#12322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12322> `_ ), libogg ( `#12285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12285> `_ ), libvorbis ( `#12300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12300> `_ ), LncLOOM ( `#12287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12287> `_ ), LPJmL ( `#12344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12344> `_ ), maze ( `#12354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12354> `_ ), MetaEuk ( `#12188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12188> `_ ), mrcfile ( `#12497 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12497> `_ ), Myokit ( `#12261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12261> `_ ), NCCL-tests ( `#12415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12415> `_ ), pyABC ( `#12329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12329> `_ ), PyCifRW ( `#12258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12258> `_ ), PyOD ( `#12507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12507> `_ ), pyro-api ( `#12447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12447> `_ ), pyro-ppl ( `#12447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12447> `_ ), R-opencv ( `#12226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12226> `_ ), Ratatosk ( `#12443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12443> `_ ), RevBayes ( `#12419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12419> `_ ), sansa ( `#12354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12354> `_ ), scikit-cuda ( `#12352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12352> `_ ), Seeder ( `#9057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9057> `_ ), suave ( `#12354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12354> `_ ), voltools ( `#12497 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12497> `_ ), vorbis-tools ( `#12300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12300> `_ ), YACS ( `#12309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12309> `_ ) * added additional easyconfigs for various supported software packages, including: * AOCC 3.0.0, Arriba 2.1.0, ArviZ 0.11.1, arpack-ng 3.8.0 BCFtools 1.12, BEDTools 2.30.0, BUSCO 5.0.0, BioPerl 1.7.8, Blosc 1.21.0, Boost.Python 1.74.0, bitarray 1.2.1, bokeh 2.2.3, CP2K 8.1, CUDAcore 11.2.2, CellRanger 6.0.0, Clang 11.0.1, DIAMOND 2.0.7, Delly 0.8.7, dask 2021.2.0, dm-tree 0.1.5, Elk 7.0.12, Extrae 3.8.0, FLUENT 2021R1, FabIO 0.11.0, Fiji 20201104, Flye 2.8.3, FreeSurfer 7.1.1, GDAL 3.2.1, GEOS 3.9.1, GLFW 3.3.3, GMAP-GSNAP 2020-12-17, GROMACS 2021, GetOrganelle 1.7.4, gmsh 4.7.1, HTSeq 0.11.3, HTSlib 1.12, Hypre 2.20.0, hyperopt 0.2.5, iVar 1.3.1, igraph 0.9.1, Jansson 2.13.1, Kent_tools 411, LAPACK 3.9.1, LAST 1179, LibSoup 2.72.0, libxc 5.1.3, MAFFT 7.475, MCR R2020a.6 + R2020b.5 + R2021a.0.eb, MDTraj 1.9.5, MUMPS 5.3.5, MaSuRCA 4.0.1, Mercurial 5.7.1, Monocle3 0.2.3, NGS 2.10.9, NVHPC 21.2, NetLogo 6.2.0, Nextflow 21.03.0, ncbi-vdb 2.10.9, OSU-Micro-Benchmarks 5.7, OpenCV 4.5.1, OpenEXR 2.5.5, OptiX 7.2.0, PETSc 3.14.4, PLUMED 2.7.0, PROJ 7.2.1, PyAMG 4.0.0, PyCUDA 2020.1, PyCairo 1.20.0, PyOpenCL 2021.1.2, PyTorch-Geometric 1.6.3, p7zip 17.03, pFUnit 4.2.0, picard 2.25.1, pocl 1.6, preCICE 2.2.0, protobuf 2.5.0, pymatgen 2022.0.4, python-igraph 0.9.0, Qtconsole 5.0.2, R 4.0.4, RASPA2 2.0.41, RDFlib 5.0.0, ReFrame 3.5.1, Ruby 2.7.2, rnaQUAST 2.2.0, SAMtools 1.12, SDL2 2.0.14, SIMPLE 3.0.0, SPAdes 3.15.2, SUNDIALS 5.7.0, Seurat 4.0.1, Spark 3.1.1, scikit-image 0.18.1, silx 0.14.0, spglib 1.16.1, sympy 1.7.1, tensorboardX 2.1, tensorflow-probability 0.12.1, tmux 3.1c, USEARCH 11.0.667, VTK 9.0.1, VTune 2020_update3 * minor enhancements, including: * verify checksum of all patch files in easyconfigs test suite ( `#12221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12221> `_ ) * add libwebp and OpenEXR dependencies for OpenCV 4.2.0 easyconfig with foss/2020a ( `#12227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12227> `_ ) * add sanity check commands for vorbis-tools ( `#12304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12304> `_ ) * add extensions to R-bundle-Bioconductor 3.12: motifmatchr ( `#12390 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12390> `_ ), OUTRIDER + FRASER ( `#12510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12510> `_ ) * add DMCfun extension for R v4.0.3 + v4.0.4 ( `#12409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12409> `_ ) * various bug fixes, including: * add missing GNU time dependency to WRF 4.0.2 built with foss/2018b ( `#12179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12179> `_ ) * add archive ``source_urls`` for Hadoop and Spark ( `#12220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12220> `_ ) * add missing Python build dep for SeqAn 2.4.0 ( `#12222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12222> `_ ) * add missing pkg-config build dependency to VCFtools 0.1.16 ( `#12245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12245> `_ ), GObject-Introspection-1.64.0 ( `#12298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12298> `_ ), libsndfile ( `#12303 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12303> `_ ) * set ``$HTSLIB_DIR`` in HTSlib for use by EnsEMBLCoreAPI & Bio-DB-HTS ( `#12253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12253> `_ ) * bump JasPer version to latest 2.0.24 for 2020b generation of easyconfigs + remove easyconfigs for ancient JasPer 2.0.1.4 with GCCcore/10.2.0 ( `#12277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12277> `_ , `#12288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12288> `_ ) * bump pip to 20.3.4 in Python 2.7.18 easyconfig to fix unicode error ( `#12293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12293> `_ ) * skip sanity check test in IPython-7.18.1-GCCcore-10.2.0.eb ( `#12294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12294> `_ ) * add missing Perl and Autotools build dependencies in recent WRF easyconfigs ( `#12301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12301> `_ ) * add missing groff build dependency for Perl 5.30.0 and 5.32.0 ( `#12307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12307> `_ ) * add linkcomm + rnetcarto extensions to R v4.0.3 ( `#12311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12311> `_ ) * add dependency on Flask in all ASE v3.21.1 easyconfigs ( `#12312 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12312> `_ ) * remove hard-coded ``-xHost`` from MMseqs2-11-e1a1c ( `#12317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12317> `_ ) * revised outdated easyconfigs for libcerf + replaced obsolete homepages and source urls ( `#12323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12323> `_ ) * consistently include ``new_archive`` source URL in Qt5 easyconfigs + add missing checksums ( `#12325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12325> `_ , `#12426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12426> `_ ) * fix source URL and add alternate checksum for Hypre 2.14.0 ( `#12337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12337> `_ ) * add patch for recent netCDF easyconfigs to fix MPI_Info_f2c issue with OpenMPI ( `#12340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12340> `_ ) * add SourceForge fallback source URL for recent freetype easyconfigs ( `#12341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12341> `_ ) * revert to Seaborn 0.10.1 as dependency for NanoPlot 1.33.0 ( `#12345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12345> `_ ) * use ``-D_USE_METIS_5p1`` in OpenSees v3.2.0 patch to correctly build on top of METIS v5.1.0 ( `#12403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12403> `_ ) * make sure that path to ``eb`` is always found by tests ( `#12436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12436> `_ ) * stop tests changing the EasyBuild easyconfigs ( `#12454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12454> `_ ) * use pip to install pkgconfig 1.5.1 ( `#12455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12455> `_ ) * add CI test checking if the Python default ``source_urls`` are used and fix CI check where ``use_pip=False`` was ignored ( `#12456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12456> `_ , `#12471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12471> `_ ) * fix source URLs in Arrow 0.x easyconfigs ( `#12475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12475> `_ ) * fix numpy tests for recent SciPy-bundle easyconfig on POWER ( `#12481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12481> `_ ) * don't download hwloc during FIRESTARTER build ( `#12482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12482> `_ ) * avoid 0.0.0 install version for various Python apps ( `#12519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12519> `_ , `#12522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12522> `_ ) * enable USER_SDPD package and disable building docs in LAMMPS 3Mar2020 ( `#12527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12527> `_ ) * update ``$R_LIBS_SITE`` rather than ``$R_LIBS`` in easyconfigs installing R packages ( `#12534 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12534> `_ ) * add Python 3 build dep for HMMER 3.3.x test step ( `#12536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12536> `_ ) * other changes: * rename opencv_contrib and update to OpenCV v3.4.1 with contrib ``versionsuffix`` ( `#12229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12229> `_ ) * fix minor style issues in POV-Ray v3.7.0.8 easyconfigs ( `#12342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12342> `_ ) * enable ``-fPIC`` for g2clib ( `#12349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12349> `_ ) * consistently include Keras-Applications and Keras-Preprocessing extensions in Keras 2.3.1 easyconfigs ( `#12375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12375> `_ ) * remove ``PYPI_SOURCE`` source URL from easyconfigs using PythonPackage or PythonBundle ( `#12541 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12541> `_ , `#12452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12452> `_ , `#12453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12453> `_ ) * require ``sanity_pip_check`` for all Python package/bundles ( `#12464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12464> `_ ) .. _release_notes_eb433: EasyBuild v4.3.3 (Feb 23rd 2021) -------------------------------- bugfix/update release **framework** * various enhancements, including: * advise PR labels in ``--review-pr`` and add support for ``--add-pr-labels`` ( `#3177 <https://github.com/easybuilders/easybuild-framework/pull/3177> `_ ) * add support for using customized HTTP headers in ``download_file`` ( `#3472 <https://github.com/easybuilders/easybuild-framework/pull/3472> `_ , `#3583 <https://github.com/easybuilders/easybuild-framework/pull/3583> `_ ) * also take toolchain dependencies into account when defining template values ( `#3541 <https://github.com/easybuilders/easybuild-framework/pull/3541> `_ , `#3560 <https://github.com/easybuilders/easybuild-framework/pull/3560> `_ ) * add support for ``--accept-eula`` configuration option + ``accept_eula`` easyconfig parameter ( `#3535 <https://github.com/easybuilders/easybuild-framework/pull/3535> `_ , `#3536 <https://github.com/easybuilders/easybuild-framework/pull/3536> `_ , `#3546 <https://github.com/easybuilders/easybuild-framework/pull/3546> `_ ) * detect ``SYSTEM`` toolchain as special case in easystack files ( `#3543 <https://github.com/easybuilders/easybuild-framework/pull/3543> `_ ) * enhance ``extract_cmd`` function to use ``cp -a`` for shell scripts (.sh) ( `#3545 <https://github.com/easybuilders/easybuild-framework/pull/3545> `_ ) * allow use of alternate envvar(s) to ``$HOME`` for user modules ( `#3558 <https://github.com/easybuilders/easybuild-framework/pull/3558> `_ ) * use https://sources.easybuild.io as fallback source URL ( `#3572 <https://github.com/easybuilders/easybuild-framework/pull/3572> `_ , `#3576 <https://github.com/easybuilders/easybuild-framework/pull/3576> `_ ) * add toolchain definition for ``iibff`` toolchain ( `#3574 <https://github.com/easybuilders/easybuild-framework/pull/3574> `_ ) * add ``%(cuda_cc_space_sep)s`` and ``%(cuda_cc_semicolon_sep)s`` templates ( `#3578 <https://github.com/easybuilders/easybuild-framework/pull/3578> `_ ) * add support for intel-compiler toolchain (>= 2021.x versions, oneAPI) ( `#3581 <https://github.com/easybuilders/easybuild-framework/pull/3581> `_ , `#3582 <https://github.com/easybuilders/easybuild-framework/pull/3582> `_ ) * various bug fixes, including: * add ``--init`` and ``--recursive`` options to ``git submodule update`` command that is used when creating source tarball for specific commit ( `#3537 <https://github.com/easybuilders/easybuild-framework/pull/3537> `_ ) * filter out duplicate paths in RPATH wrapper script ( `#3538 <https://github.com/easybuilders/easybuild-framework/pull/3538> `_ ) * don't clean up imported modules after verifying imports of included Python modules ( `#3544 <https://github.com/easybuilders/easybuild-framework/pull/3544> `_ ) * avoid no-op changes to ``$LD_*`` environment variables in ModulesTool ( `#3553 <https://github.com/easybuilders/easybuild-framework/pull/3553> `_ ) * fix UTF-8 encoding errors when running EasyBuild with Python 3.0.x-3.6.x ( `#3565 <https://github.com/easybuilders/easybuild-framework/pull/3565> `_ ) * create ``lib64`` symlink as a relative symlink ( `#3566 <https://github.com/easybuilders/easybuild-framework/pull/3566> `_ ) * don't reuse variable name in the loop to fix adding extra compiler flags via toolchainopts ( `#3571 <https://github.com/easybuilders/easybuild-framework/pull/3571> `_ ) * symlink ``lib`` to ``lib64`` if it doesn't exist ( `#3580 <https://github.com/easybuilders/easybuild-framework/pull/3580> `_ ) * include ``%(mpi_cmd_prefix)s`` and ``%(cuda_*)s`` templates in output of ``--avail-easyconfig-templates`` ( `#3586 <https://github.com/easybuilders/easybuild-framework/pull/3586> `_ ) * other changes: * rename ``EasyBlock._skip_step`` to ``EasyBlock.skip_step`` , to make it part of the public API ( `#3561 <https://github.com/easybuilders/easybuild-framework/pull/3561> `_ ) * make symlinking of ``posix_c.so`` to ``posix.so`` in test suite configuration conditional ( `#3570 <https://github.com/easybuilders/easybuild-framework/pull/3570> `_ ) **easyblocks** * 2 new software-specific easyblocks: * AOCC ( `#2295 <https://github.com/easybuilders/easybuild-easyblocks/pull/2295> `_ ), Intel compilers (v2021.x, oneAPI) ( `#2305 <https://github.com/easybuilders/easybuild-easyblocks/pull/2305> `_ ) * minor enhancements, including: * run motorBike tutorial case as sanity check for recent (community) OpenFOAM versions ( `#2201 <https://github.com/easybuilders/easybuild-easyblocks/pull/2201> `_ ) * add foamMonitor to sanity checks of OpenFOAM ( `#2256 <https://github.com/easybuilders/easybuild-easyblocks/pull/2256> `_ ) * create versioned symlinks for CMake commands + create symlink for ``cmake3`` in PyTorch easyblock if ``cmake3`` command is not found ( `#2259 <https://github.com/easybuilders/easybuild-easyblocks/pull/2259> `_ ) * improve Bazel easyblock: add support for running tests, enable static linking, use build dir rather than ``tmpdir`` , verbose output ( `#2285 <https://github.com/easybuilders/easybuild-easyblocks/pull/2285> `_ ) * add support for skipping steps in Python packages installed as extension + print progress on individual steps for installing Python packages as extensions ( `#2290 <https://github.com/easybuilders/easybuild-easyblocks/pull/2290> `_ ) * update BerkeleyGW easyblock to support GCC 10 and fftlib ( `#2297 <https://github.com/easybuilders/easybuild-easyblocks/pull/2297> `_ ) * update QuantumESPRESSO easyblock to support GCC 10 ( `#2298 <https://github.com/easybuilders/easybuild-easyblocks/pull/2298> `_ ) * update Clang easyblock to add support for building extra tools + leveraging hwloc and Z3 as optional dependencies ( `#2310 <https://github.com/easybuilders/easybuild-easyblocks/pull/2310> `_ ) * add support for running TensorFlow CPU and GPU tests ( `#2263 <https://github.com/easybuilders/easybuild-easyblocks/pull/2263> `_ , `#2292 <https://github.com/easybuilders/easybuild-easyblocks/pull/2292> `_ , `#2312 <https://github.com/easybuilders/easybuild-easyblocks/pull/2312> `_ ) * update impi easyblock for impi 2021.x (oneAPI) ( `#2313 <https://github.com/easybuilders/easybuild-easyblocks/pull/2313> `_ ) * update QuantumESPRESSO easyblock to handle v6.7 ( `#2319 <https://github.com/easybuilders/easybuild-easyblocks/pull/2319> `_ ) * update OpenFOAM easyblock for changes in v2012 ( `#2321 <https://github.com/easybuilders/easybuild-easyblocks/pull/2321> `_ ) * add sanity check commands to GCC (including LTO support) ( `#2322 <https://github.com/easybuilders/easybuild-easyblocks/pull/2322> `_ ) * update FLUENT sanity check for v2021R1 ( `#2334 <https://github.com/easybuilders/easybuild-easyblocks/pull/2334> `_ ) * various bug fixes, including: * filter out user packages in LAMMPS easyblock if corresponding dependency isn't included + only set ``-DUSER-INTEL`` on x86_64 systems ( `#2254 <https://github.com/easybuilders/easybuild-easyblocks/pull/2254> `_ ) * unify handling of ``pylibdirs`` and don't add duplicated ``$PYTHONPATH`` in PythonBundle ( `#2281 <https://github.com/easybuilders/easybuild-easyblocks/pull/2281> `_ ) * enhance Amber easyblock to fix running of ``update_amber`` script when ``python`` command is not available in OS ( `#2282 <https://github.com/easybuilders/easybuild-easyblocks/pull/2282> `_ ) * guard ``module unload`` statements in modules for Cray* toolchains ( `#2286 <https://github.com/easybuilders/easybuild-easyblocks/pull/2286> `_ ) * set ``$PYTHONNOUSERSITE`` in ``PythonBundle.extensions_step`` to avoid picking up on Python packages installed in $HOME ( `#2289 <https://github.com/easybuilders/easybuild-easyblocks/pull/2289> `_ ) * create less temporary directories for TensorFlow by (only) using ``--output_user_root`` ( `#2293 <https://github.com/easybuilders/easybuild-easyblocks/pull/2293> `_ ) * fix logic w.r.t. enabling Python support in PETSc ( `#2299 <https://github.com/easybuilders/easybuild-easyblocks/pull/2299> `_ ) * make ``builddeps`` a list of names in SLEPc easyblock ( `#2300 <https://github.com/easybuilders/easybuild-easyblocks/pull/2300> `_ ) * make ``builddeps`` a list of names in Trilinos easyblock ( `#2301 <https://github.com/easybuilders/easybuild-easyblocks/pull/2301> `_ ) * make sure the installation of ``libiberty.a`` in the binutils easyblock goes into a populated directory ( `#2308 <https://github.com/easybuilders/easybuild-easyblocks/pull/2308> `_ ) * fix for building GCC with ``--sysroot`` on ppc64le ( `#2315 <https://github.com/easybuilders/easybuild-easyblocks/pull/2315> `_ ) * fix OpenFOAM sanity check on POWER ( `#2320 <https://github.com/easybuilders/easybuild-easyblocks/pull/2320> `_ ) * use library search paths of compiler for RPATH when building binutils with system compiler + enhance sanity check by running ``--version`` for binutils commands ( `#2323 <https://github.com/easybuilders/easybuild-easyblocks/pull/2323> `_ , `#2327 <https://github.com/easybuilders/easybuild-easyblocks/pull/2327> `_ ) * pass ``$CXXFLAGS`` to PDT's configure script via ``-useropt`` ( `#2324 <https://github.com/easybuilders/easybuild-easyblocks/pull/2324> `_ ) * pass down compilation flags from build environment for ESMF ( `#2325 <https://github.com/easybuilders/easybuild-easyblocks/pull/2325> `_ ) * update URLs for test data for WRF to ``https`` ( `#2335 <https://github.com/easybuilders/easybuild-easyblocks/pull/2335> `_ ) * read MATLAB configuration file in binary mode to avoid UTF-8 encoding errors when using Python 3.6 ( `#2340 <https://github.com/easybuilders/easybuild-easyblocks/pull/2340> `_ ) * fix Boost sanity check on POWER ( `#2291 <https://github.com/easybuilders/easybuild-easyblocks/pull/2291> `_ ) and aarch64 ( `#2341 <https://github.com/easybuilders/easybuild-easyblocks/pull/2341> `_ ) * other changes, including: * rework module-only tests to use unique software name (rather than 'foo') ( `#2287 <https://github.com/easybuilders/easybuild-easyblocks/pull/2287> `_ ) * prefer default value for extra options in easyblock tests ( `#2280 <https://github.com/easybuilders/easybuild-easyblocks/pull/2280> `_ , `#2302 <https://github.com/easybuilders/easybuild-easyblocks/pull/2302> `_ ) * add check for accepted EULA in custom easyblock for NVHPC ( `#2311 <https://github.com/easybuilders/easybuild-easyblocks/pull/2311> `_ ) * update optional feature support of TensorFlow ( `#2314 <https://github.com/easybuilders/easybuild-easyblocks/pull/2314> `_ ) * make symlinking of ``posix_c.so`` to ``posix.so`` in test suite configuration conditional ( `#2330 <https://github.com/easybuilders/easybuild-easyblocks/pull/2330> `_ ) **easyconfigs** * add easyconfig for new iibff toolchain: iibff/2020b ( `#12185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12185> `_ ) * added easyconfigs for 6 new toolchains: * gobff/2020b ( `#12098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12098> `_ ), goblf/2018b ( `#6615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6615> `_ ), gomkl/2020b ( `#12198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12198> `_ ), iimkl/2018a ( `#6092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6092> `_ ), iomkl/2019b ( `#11981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11981> `_ ), iomkl/2020b ( `#12009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12009> `_ ) * added example easyconfig files for 72 new software packages: * AOCC ( `#11868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11868> `_ ), CHERAB ( `#7141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7141> `_ ), CaDiCaL ( `#11966 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11966> `_ ), CellRanger-ARC ( `#12114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12114> `_ ), CuPy ( `#11749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11749> `_ ), DFA ( `#11979 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11979> `_ ), FIGARO ( `#11924 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11924> `_ ), FIRESTARTER ( `#12160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12160> `_ ), FIt-SNE ( `#8630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8630> `_ ), GPyTorch ( `#12010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12010> `_ ), GSEA ( `#10395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10395> `_ ), GetOrganelle ( `#11948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11948> `_ ), Glucose ( `#11965 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11965> `_ ), GraPhlAn ( `#10707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10707> `_ ), ITSx ( `#10558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10558> `_ ), Kaleido ( `#11998 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11998> `_ ), LAPACK ( `#6615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6615> `_ ), LSD2 ( `#11903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11903> `_ ), Lingeling ( `#11964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11964> `_ ), MPB ( `#7026 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7026> `_ ), MiniCARD ( `#11963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11963> `_ ), MiniSat ( `#11962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11962> `_ ), NGSpeciesID ( `#11918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11918> `_ ), NanopolishComp ( `#11823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11823> `_ ), Nsight-Compute ( `#12043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12043> `_ ), Nsight-Systems ( `#12042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12042> `_ ), PHANOTATE ( `#8667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8667> `_ ), PIPITS ( `#10558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10558> `_ ), PyClone ( `#11940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11940> `_ ), PySAT ( `#12000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12000> `_ ), RNAmmer ( `#7262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7262> `_ ), Raysect ( `#7141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7141> `_ ), SICER2 ( `#12200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12200> `_ ), SOCI ( `#12045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12045> `_ ), SeisSol ( `#7194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7194> `_ ), SignalP ( `#11862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11862> `_ ), Stack ( `#11310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11310> `_ ), SuperLU_DIST ( `#11693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11693> `_ ), Teneto ( `#12056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12056> `_ ), Transformers ( `#12032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12032> `_ ), YANK ( `#11742 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11742> `_ ), Z3 ( `#12013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12013> `_ ), bgen ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), bgen-reader ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), bpytop ( `#12040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12040> `_ ), byobu ( `#11932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11932> `_ ), chi2comb ( `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), cuTENSOR ( `#11914 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11914> `_ ), dd ( `#11978 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11978> `_ ), decona ( `#11891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11891> `_ ), dicom2nifti ( `#11955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11955> `_ ), eccodes-python ( `#12083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12083> `_ ), fftlib ( `#11944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11944> `_ ), flatbuffers-python ( `#12148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12148> `_ ), fpocket ( `#11980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11980> `_ ), gh ( `#11851 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11851> `_ ), intel-compilers (oneAPI) ( `#11982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11982> `_ ), libGDSII ( `#7026 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7026> `_ ), libpci ( `#11871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11871> `_ ), liknorm ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), limix ( `#7456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7456> `_ , `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), logaddexp ( `#11867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11867> `_ ), neptune-client ( `#11985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11985> `_ ), plinkQC ( `#12068 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12068> `_ ), preCICE ( `#11886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11886> `_ ), py-aiger ( `#11999 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11999> `_ ), py-aiger-bdd ( `#11999 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11999> `_ ), pytest-xdist ( `#11883 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11883> `_ , `#11893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11893> `_ ), samblaster ( `#7378 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7378> `_ ), terastructure ( `#12197 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12197> `_ ), typing-extensions ( `#11636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11636> `_ ), webin-cli ( `#8674 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8674> `_ ) * added additional easyconfigs for various supported software packages, including: * ack 3.4.0, AmberTools 20, AMD-LibM 3.6.0-4, AMD-RNG 2.2, AMD-SecureRNG 2.2, annovar 20191024, ASE 3.21.1, AUGUSTUS 3.4.0, Bazel 3.7.2, bcgTree 1.1.0, BLAST+ 2.11.0, Bonito 0.3.5, Bowtie2 2.4.2, causalml 0.8.0-20200909, CGAL 5.2, ConnectomeWorkbench 1.4.2, CUDAcore 11.2.1, cuDNN 8.0.5.39, dcm2niix 1.0.20201102, DendroPy 4.5.2, DIAMOND 0.9.36 + 2.0.6, ecCodes 2.20.0, ELPA 2020.11.001, Emacs 27.1, FusionCatcher 1.30, gensim 3.8.3, GHC 8.6.5, gnuplot 5.4.1, GPAW 21.1.0, Graphviz 2.44.1, GROMACS 2020.5, Gurobi 9.1.0, HH-suite 3.3.0, HMMER 3.3.2, HTSlib 1.11, Horovod 0.21.1, imbalanced-learn 0.7.0, impi 2021.1.1, inferCNV 1.3.3, ITK 5.1.2, IQ-TREE 2.1.2, JasPer 2.0.24, JUBE 2.4.1, libgit2 1.1.0, libzip 1.7.3, likwid 5.1.0, MariaDB 10.5.8, medaka 1.2.0, Meep 1.6.0, mkl-service 2.3.0, MPICH 3.3.2, muParser 2.3.2, NanoComp 1.13.1, NanoPlot 1.33.0, networkx 2.5, NLTK 3.5, numba 0.52.0, NVHPC 20.11, nvtop 1.1.0, OpenCoarrays 2.9.2, OpenFOAM v2012, OpenJPEG 2.4.0, OpenMPI 4.1.0, parasail 2.4.2, PLUMED 2.6.2, PostgreSQL 13.2, pydicom 2.1.2, PyMC3 3.11.0, python-parasail 1.2.2, PyTorch 1.7.1, QIIME2 2020.11, QuantumESPRESSO 6.7, QuickFF 2.2.7, R 4.0.3, R-bundle-Bioconductor 3.12, ReFrame 3.4.1, RMBlast 2.10.0, RSEM 1.3.3, Salmon 1.4.0, scikit-build 0.11.1, SciPy-bundle 2020.03 w/ Python 2.7.18, Seaborn 0.11.1, SEPP 4.4.0, SHAPEIT4 4.2.0, SpaceRanger 1.2.2, Stacks 2.54, STAR 2.7.7.a, statsmodels 0.12.1, SuiteSparse 5.8.1, tbb 2020.3, TensorFlow 1.15.5 + 2.4.1, Theano 1.1.2, torchvision 0.8.2, V8 3.4.0, Wannier90 3.1.0 * minor enhancements, including: * enable building of QtWebEngine in Qt5 easyconfig using foss/2017b or intel/2017b ( `#7302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7302> `_ ) * enable NVPTX offload in GCCcore 9.3.0 easyconfig ( `#11839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11839> `_ ) * also build shared library in recent HDF easyconfigs ( `#11847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11847> `_ ) * add support for HDF4 to GDAL v3.0.2 and v3.0.4 ( `#11855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11855> `_ ) * add patch for magma 2.5.4 with fosscuda/2019b to allow any ``sm_*`` value to be passed via ``GPU_TARGET`` ( `#11861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11861> `_ ) * add missing M4 build dependency to recent SuiteSparse versions ( `#11869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11869> `_ ) * enable tests for most recent Bazel versions (3.x) ( `#11894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11894> `_ ) * enable gipaw in QuantumESPRESSO 6.6 easyconfig ( `#11905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11905> `_ ) * add RCAL + sensemakr extensions to R 4.0.0 ( `#11921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11921> `_ ) * add additional extensions to R v4.0.3 easyconfig ( `#11922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11922> `_ , `#12057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12057> `_ ) * improve sanity_check_paths for AMD-LibM ( `#11933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11933> `_ ) * symlink ``include`` / ``lib`` subdirs + enhance ``sanity_check_paths`` for AMD-RNG v2.2-4 ( `#11934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11934> `_ ) * improve ``sanity_check_paths`` for AMD-SecureRNG ( `#11935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11935> `_ ) * update Clang 10+ dependencies & build extra tools ( `#12013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12013> `_ ) * add Inline extension to recent Perl easyconfigs (5.30+) ( `#12029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12029> `_ ) * add EnsDb.Hsapiens.v86 to Bioconductor 3.11 ( `#12078 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12078> `_ ) * add sanity check command for bam-readcount v0.8.0 to check ``--version`` output ( `#12092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12092> `_ ) * add EnsDb.Hsapiens.v75 + Signac extensions to R-bundle-Bioconductor 3.12 ( `#12174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12174> `_ ) * add tensorboard profile plugin to recent TensorFlow 2.x easyconfigs ( `#12136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12136> `_ , `#12137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12137> `_ ) * various bug fixes, including: * added missing space in ``configopts`` in ParaView 5.8.0 easyconfigs using 2020a toolchain ( `#10989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10989> `_ ) * use bfd linker for glibc 2.30 ( `#11331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11331> `_ ) * add missing moduleclass in UCLUST easyconfig ( `#11477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11477> `_ ) * don't disable optarch for Clang 11.0.0 ( `#11814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11814> `_ ) * add patch to fix miscompilation bug on POWER for GCC 8.x and 9.x ( `#11837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11837> `_ ) * fix compilation of TensorFlow 2.3.1 with CUDA and glibc 2.26 on POWER ( `#11859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11859> `_ ) * disable building of manpages for GDCM to fix installation problem with docbook ( `#11866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11866> `_ ) * add patch for LLVM 6.0.0 to fix missing exported symbol ``LLVMInitializeInstCombine`` ( `#11873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11873> `_ ) * fix name of source file for GDRCopy v2.1 ( `#11887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11887> `_ ) * fix Tombo to work with rpy2 v3 when creating DataFrames ( `#11892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11892> `_ ) * fix GCCcore 8.1.0 w.r.t. removed ``sys/ustat.h`` in glibc 2.28 ( `#11896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11896> `_ ) * add git as a dependency to GitPython version 3.x ( `#11902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11902> `_ ) * fix undefined ``__ieee128`` on ppc64le with glibc 2.26 for magma ( `#11930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11930> `_ ) and PyTorch ( `#11936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11936> `_ ) * update Hypre git location for PETSc 3.11.0 using downloaded dependencies ( `#11947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11947> `_ ) * fix source URL in expat easyconfigs (and consistently add custom ``sanity_check_paths`` ) ( `#11960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11960> `_ ) * use libpng provided by EasyBuild in VTK to fix build issue on ppc64le ( `#11990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11990> `_ ) * add missing pkg-config build dependency for GObject-Introspection v1.66.1 ( `#11949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11949> `_ ) * add missing plotly-orca dependency for NanoPlot ( `#11967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11967> `_ , `#12015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12015> `_ ) * add patch for Boost 1.74.0 to fix missing include file ( `#12007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12007> `_ ) * fix for ``error: 'runtime_error' is not a member of 'std'`` in qtlocation for Qt5 v5.14.2 ( `#12012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12012> `_ ) * fix homepage for gnuplot 5.2.8, use ``http://`` since homepage is not reachable via ``https://`` ( `#12047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12047> `_ ) * fix OS dependencies for libfabric ( `#12058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12058> `_ ) * fix vector ``mul`` and ``div`` with broadcasts in ``-masm=intel`` mode in GCCcore v9.3.0 ( `#12065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12065> `_ ) * add missing ESMF dependency in NCO easyconfigs ( `#12071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12071> `_ , `#12072 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12072> `_ ) * add patch to fix version for bam-readcount 0.8.0 ( `#12075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12075> `_ ) * add missing Perl build dep for (recent) libcerf versions, required for ``pod2html`` command ( `#12085 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12085> `_ ) * add missing bzip2 dependency to recent ncbi-vdb easyconfigs ( `#12120 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12120> `_ ) * add missing Perl build dependency for BLIS 0.8.0 ( `#12146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12146> `_ ) * use ``https://sources.easybuild.io`` as fallback source URL for UDUNITS ( `#12049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12049> `_ , `#12156 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12156> `_ , `#12182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12182> `_ ) * correct the GCC version check to allow IBM VSX builds of GROMACS 2020.4 and 2020.5 ( `#12159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12159> `_ ) * add missing mkl-service dependency for Theano built with intel/2019b + enhance sanity check ( `#12172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12172> `_ ) * add patches to fix test problems with p4est 2.2 ( `#12028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12028> `_ ) * fix build of Bison using older system GCC (v4.x) ( `#12203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12203> `_ ) * fix lack of optimisation for SHAPEIT4 v4.1.3 ( `#12206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12206> `_ ) * add missing gnuplot dependency for OpenFOAM from v2.4.0 to v6 ( `#11801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11801> `_ , `#12208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12208> `_ ) * fix source URL for libspatialite ( `#12213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12213> `_ ) * add ``archive`` fallback source URL to MAGMA easyconfigs ( `#12214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12214> `_ ) * fix checksum for patch in make 4.2.1 easyconfig using GCC/7.3.0-2.30 ( `#12223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12223> `_ ) * other changes: * replace easyconfigs for bpp-core/bpp-phyl/bpp-seq v2.4.1 with a single easyconfig for BioPP v2.4.1 (using Bundle easyblock) ( `#11609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11609> `_ ) * add CESM-deps to whitelist in check for custom ``sanity_check_paths`` ( `#11916 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11916> `_ ) * include '-4' in version for AMD-SecureRNG v2.2-4 ( `#11934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11934> `_ , `#11935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11935> `_ ) * switch to using python-parasail and tqdm dependencies in Bonito easyconfigs ( `#11937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11937> `_ ) * rename orca to plotly-orca ( `#12015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12015> `_ ) * remove duplicate extensions in R 3.5.x easyconfigs, and add test to detect such issues ( `#12059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12059> `_ ) * remove Python dependency from ecCodes v2.17.0 since it doesn't provide Python bindings ( `#12084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12084> `_ ) * update Java/1.8 wrapper to Java 1.8.0_281 ( `#11928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11928> `_ , `#12088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12088> `_ ) * update Bison (build) dependency for flex built with system compiler to v3.5.3 ( `#12111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12111> `_ ) * make symlinking of ``posix.so`` in test suite configuration conditional ( `#12123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12123> `_ ) * move make 4.3 easyconfigs to GCCcore toolchain ( `#12166 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12166> `_ ) * move most recent BLIS and libFLAME easyconfigs from GCC to GCCcore ( `#12168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12168> `_ ) * rename SNAP to SNAP-HMM and update easyconfig ( `#12218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/12218> `_ ) .. _release_notes_eb432: EasyBuild v4.3.2 (December 10th 2020) ------------------------------------- bugfix/update release **framework** * add (experimental) support for specifying easyconfig files via an \"easystack\" file ( `#3479 <https://github.com/easybuilders/easybuild-framework/pull/3479> `_ , `#3511 <https://github.com/easybuilders/easybuild-framework/pull/3511> `_ , `#3515 <https://github.com/easybuilders/easybuild-framework/pull/3515> `_ , `#3517 <https://github.com/easybuilders/easybuild-framework/pull/3517> `_ , `#3520 <https://github.com/easybuilders/easybuild-framework/pull/3520> `_ , `#3521 <https://github.com/easybuilders/easybuild-framework/pull/3521> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Easystack-files.html * add definition for new ``gobff`` toolchain using BLIS and LibFLAME ( `#3505 <https://github.com/easybuilders/easybuild-framework/pull/3505> `_ ) * various enhancements, including: * add support for toolchain options like ``extra_cxxflags`` to specify extra compiler options ( `#2193 <https://github.com/easybuilders/easybuild-framework/pull/2193> `_ ) * fix combination of ``--copy-ec`` and ``--from-pr`` ( `#3482 <https://github.com/easybuilders/easybuild-framework/pull/3482> `_ ) * enhance ``copy_files`` function: support single file target, error on empty input list, support verbose mode ( `#3483 <https://github.com/easybuilders/easybuild-framework/pull/3483> `_ ) * cache result of ``fetch_files_from_pr`` function (mainly to speed up framework test suite) ( `#3484 <https://github.com/easybuilders/easybuild-framework/pull/3484> `_ ) * add ``locate_files`` function to filetools module ( `#3485 <https://github.com/easybuilders/easybuild-framework/pull/3485> `_ ) * add support for ``%(module_name)s`` template value ( `#3497 <https://github.com/easybuilders/easybuild-framework/pull/3497> `_ ) * clarify input format for ``--cuda-compute-capabilities`` in ``eb --help`` output ( `#3509 <https://github.com/easybuilders/easybuild-framework/pull/3509> `_ ) * add support for skipping unit tests (test step) via ``--skip-test-step`` ( `#3524 <https://github.com/easybuilders/easybuild-framework/pull/3524> `_ ) * various bug fixes, including: * also ignore ``vsc.*`` imports coming from from ``pkg_resources/__init__.py`` (setuptools) in fake vsc namespace ( `#3491 <https://github.com/easybuilders/easybuild-framework/pull/3491> `_ ) * don't pass username in ``github_api_get_request`` when no GitHub token is available ( `#3494 <https://github.com/easybuilders/easybuild-framework/pull/3494> `_ ) * also inject ``-rpath`` options for all entries in ``$LIBRARY_PATH`` in ``RPATH`` wrappers ( `#3495 <https://github.com/easybuilders/easybuild-framework/pull/3495> `_ ) * avoid ``TypeError`` being raised by ``list_toolchains`` ( `#3499 <https://github.com/easybuilders/easybuild-framework/pull/3499> `_ ) * check if PR is already merged in ``--merge-pr`` ( `#3502 <https://github.com/easybuilders/easybuild-framework/pull/3502> `_ ) * graciously handle wrong PR id in ``fetch_pr_data`` ( `#3503 <https://github.com/easybuilders/easybuild-framework/pull/3503> `_ ) * fix regression in ``apply_regex_substitutions`` : also accept list of paths to patch ( `#3507 <https://github.com/easybuilders/easybuild-framework/pull/3507> `_ ) * update installation procedure for EasyBuild in generated Singularity container recipes ( `#3510 <https://github.com/easybuilders/easybuild-framework/pull/3510> `_ ) * fix GitHub Actions workflow for test suite: run outside of repo checkout + also test bootstrap script with Python 3.9 ( `#3518 <https://github.com/easybuilders/easybuild-framework/pull/3518> `_ ) * bump cryptography from 2.9.2 to 3.2 for Python 2 in ``requirements.txt`` ( `#3519 <https://github.com/easybuilders/easybuild-framework/pull/3519> `_ ) * fix ``eb --help=rst`` when running with Python 3 ( `#3525 <https://github.com/easybuilders/easybuild-framework/pull/3525> `_ ) * other changes: * exclude test configurations with Lmod 7 and Python 3, except for Python 3.6 ( `#3496 <https://github.com/easybuilders/easybuild-framework/pull/3496> `_ ) * significantly speed up parsing of easyconfig files by only extracting comments from an easyconfig file when they're actually needed ( `#3498 <https://github.com/easybuilders/easybuild-framework/pull/3498> `_ ) * don't include ``file`` / ``ldd`` / ``readelf`` commands run during RPATH sanity check in ``--trace`` output ( `#3508 <https://github.com/easybuilders/easybuild-framework/pull/3508> `_ ) **easyblocks** * 2 new software-specific easyblocks: * code-server ( `#2255 <https://github.com/easybuilders/easybuild-easyblocks/pull/2255> `_ ), Metagenome-Atlas ( `#2219 <https://github.com/easybuilders/easybuild-easyblocks/pull/2219> `_ ) * minor enhancements, including: * add ``-fallow-argument-mismatch`` option when building CP2K 7.1 or older with GCC 10.x ( `#2223 <https://github.com/easybuilders/easybuild-easyblocks/pull/2223> `_ ) * update TensorFlow easyblock for upcoming TensorFlow 2.4 ( `#2225 <https://github.com/easybuilders/easybuild-easyblocks/pull/2225> `_ ) * add support for building Clang with OpenMP offload support ( `#2229 <https://github.com/easybuilders/easybuild-easyblocks/pull/2229> `_ ) * enhance OpenMPI easyblock to catch any ``--with-ucx*`` configure options ( `#2230 <https://github.com/easybuilders/easybuild-easyblocks/pull/2230> `_ ) * take into account ``preinstallopts`` and ``installopts`` in custom easyblock for NCL ( `#2234 <https://github.com/easybuilders/easybuild-easyblocks/pull/2234> `_ ) * add support for ``withnvptx`` easyconfig parameter, to enable GPU offloading, in GCC easyblock ( `#2235 <https://github.com/easybuilders/easybuild-easyblocks/pull/2235> `_ ) * take into account versions like ``4.x`` in OpenFOAM easyblock ( `#2239 <https://github.com/easybuilders/easybuild-easyblocks/pull/2239> `_ ) * also add ``bin`` subdir to ``$PATH`` when installing a Python package ( `#2244 <https://github.com/easybuilders/easybuild-easyblocks/pull/2244> `_ ) * various bug fixes, including: * fix two bugs in GROMACS easyblock when using GCC & MKL for FFT and BLAS/LAPACK ( `#2212 <https://github.com/easybuilders/easybuild-easyblocks/pull/2212> `_ ) * fix version check in Qt5 easyblock w.r.t. disabling features on old Linux kernel versions ( `#2220 <https://github.com/easybuilders/easybuild-easyblocks/pull/2220> `_ ) * always define ``$FCCPP`` in QuantumESPRESSO easyblock (not just when using Intel compilers) ( `#2221 <https://github.com/easybuilders/easybuild-easyblocks/pull/2221> `_ ) * allow wxPython to be installed as an extension ( `#2227 <https://github.com/easybuilders/easybuild-easyblocks/pull/2227> `_ , `#2275 <https://github.com/easybuilders/easybuild-easyblocks/pull/2275> `_ ) * only configure Python with ``--enable-optimizations`` when compiling Python with (recent) GCC compiler ( `#2228 <https://github.com/easybuilders/easybuild-easyblocks/pull/2228> `_ ) * fix sanity check for Boost MT libraries ( `#2231 <https://github.com/easybuilders/easybuild-easyblocks/pull/2231> `_ ) * fix hardcoded path in NVHPC easyblock to support multiple architectures ( `#2233 <https://github.com/easybuilders/easybuild-easyblocks/pull/2233> `_ ) * fix ``CPASSERT`` test faults on RHEL8 in CP2K easyblock ( `#2236 <https://github.com/easybuilders/easybuild-easyblocks/pull/2236> `_ ) * stop silently ignoring failing numpy tests, but include support for ignoring (failing) numpy tests ( `#2238 <https://github.com/easybuilders/easybuild-easyblocks/pull/2238> `_ , `#2271 <https://github.com/easybuilders/easybuild-easyblocks/pull/2271> `_ ) * append to module guesses in easyblocks for Chapel, icc, imkl and impi (rather than overwriting guesses from parent easyblock) ( `#2242 <https://github.com/easybuilders/easybuild-easyblocks/pull/2242> `_ ) * weed out duplicates when determining paths to ``include-fixed`` subdirectory in GCC easyblock ( `#2245 <https://github.com/easybuilders/easybuild-easyblocks/pull/2245> `_ ) * prepend all hardcoded ``/usr/*`` paths with sysroot in Python's setup.py installation script ( `#2246 <https://github.com/easybuilders/easybuild-easyblocks/pull/2246> `_ ) * don't try to patch newer versions of Bazel where the patches won't apply ( `#2249 <https://github.com/easybuilders/easybuild-easyblocks/pull/2249> `_ ) * fix setting of ``$RUNPARALLEL`` in HDF5 easyblock ( `#2250 <https://github.com/easybuilders/easybuild-easyblocks/pull/2250> `_ ) * move ``--build`` and ``--host`` logic to ``run_configure_cmd`` in GCC easyblock ( `#2252 <https://github.com/easybuilders/easybuild-easyblocks/pull/2252> `_ ) * set ``$UCX_TLS`` in module for impi installation on top of UCX, and allow it to be overwritten in impi easyconfig file ( `#2253 <https://github.com/easybuilders/easybuild-easyblocks/pull/2253> `_ , `#2258 <https://github.com/easybuilders/easybuild-easyblocks/pull/2258> `_ ) * enhance PyTorch easyblock to ensure it finds MKL (via ``$MKLROOT`` ) ( `#2257 <https://github.com/easybuilders/easybuild-easyblocks/pull/2257> `_ ) * use integer division to determine number MPI ranks to use in WRF test step ( `#2266 <https://github.com/easybuilders/easybuild-easyblocks/pull/2266> `_ ) * also specify ``locincpth`` and ``glibpth`` configure options for Perl based on ``--sysroot`` ( `#2268 <https://github.com/easybuilders/easybuild-easyblocks/pull/2268> `_ ) * other changes, including: * add link to GCC mailing list thread confirming that binutils should not be configured with ``--with-sysroot=$EASYBUILD_SYSROOT`` when GCC is being configured like that ( `#2215 <https://github.com/easybuilders/easybuild-easyblocks/pull/2215> `_ ) * pass paths to patch one by one to ``apply_regex_substitutions`` in GCC easyblock when ``--sysroot`` is set ( `#2217 <https://github.com/easybuilders/easybuild-easyblocks/pull/2217> `_ ) * workaround for regression in ``apply_regex_substitutions`` introduced in EasyBuild v4.3.1 (which was fixed for v4.3.2) **easyconfigs** * add easyconfigs for new `gobff` toolchain: `gobff/2020.11` + `gobff/2020.06-amd` (`#11761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11761> `_ ) * add easyconfigs for updates of common toolchains: `foss/2020b` , `fosscuda/2020b` , `intel/2020b` , `intelcuda/2020b` * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added example easyconfig files for 41 new software packages: * alsa-lib ( `#11658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11658> `_ ), assimp ( `#11759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11759> `_ ), BioServices ( `#11602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11602> `_ ), carputils ( `#11270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11270> `_ ), cctools ( `#11799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11799> `_ ), code-server ( `#11778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11778> `_ ), CRISPResso2 ( `#11775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11775> `_ ), elfutils ( `#11783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11783> `_ ), EMU ( `#11641 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11641> `_ ), fgbio ( `#11519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11519> `_ ), Flink ( `#11747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11747> `_ ), FreeSASA ( `#11699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11699> `_ ), Geant4-data ( `#11610 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11610> `_ ), geocube ( `#11714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11714> `_ ), IPM ( `#11768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11768> `_ , `#11772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11772> `_ ), libmicrohttpd ( `#11783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11783> `_ ), libStatGen ( `#7982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7982> `_ ), libzeep ( `#11687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11687> `_ ), LLDB ( `#11822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11822> `_ ), meshalyzer ( `#11270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11270> `_ ), meshtool ( `#11270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11270> `_ ), Metagenome-Atlas ( `#11620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11620> `_ ), MLxtend ( `#11601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11601> `_ ), MRChem ( `#11604 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11604> `_ ), MRCPP ( `#11579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11579> `_ ), mxml ( `#11769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11769> `_ ), mxmlplus ( `#11771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11771> `_ ), nanocompore ( `#11690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11690> `_ ), neon ( `#11797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11797> `_ ), Open-Data-Cube-Core ( `#11713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11713> `_ ), OpenSees ( `#11613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11613> `_ ), PEST++ ( `#11565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11565> `_ ), pyFAI ( `#11849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11849> `_ ), pymca ( `#11848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11848> `_ ), RE2 ( `#11718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11718> `_ ), scikit-bio ( `#11660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11660> `_ ), SpaceRanger ( `#11776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11776> `_ ), SplAdder ( `#11607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11607> `_ ), SWAT+ ( `#11615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11615> `_ ), velocyto ( `#11744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11744> `_ ), WCT ( `#11779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11779> `_ ) * added additional easyconfigs for various supported software packages, including: * BBMap 38.87, Boost 1.74.0, CUDA 11.1.1, CellRanger 5.0.0.eb, CheckM 1.1.3, Clang 11.0.0, cuDNN 8.0.4.30, DMTCP 2.6.0, FDS 6.7.5, FFmpeg 4.3.1, GROMACS 2020.4, Geant4 10.6.2, Ghostscript 9.53.3, GitPython 3.1.9, GlobalArrays 5.8, HDF5 1.10.7, h5py 3.1.0, hypothesis 5.41.5, JasPer 2.0.16, LittleCMS 2.11, libedit 20191231, libyaml 0.2.5, MPFR 4.1.0, magma 2.5.4, matplotlib 3.3.3, NCCL 2.8.3, NLopt 2.6.2, Nextflow 20.10.0, netCDF-Fortran 4.5.3, OpenBLAS 0.3.12, OpenMolcas 20.10, Pillow 8.0.1, PnetCDF 1.12.1, PyYAML 5.3.1, packmol 20.2.2, protobuf 3.14.0, psycopg2 2.8.6, pybind11 2.6.0, pycocotools 2.0.2, Qt5 5.14.2, RAxML-NG 1.0.1, RSeQC 4.0.0, rioxarray 0.1.1, SCOTCH 6.1.0, SciPy-bundle 2020.11, SentencePiece 0.1.94, StringTie 2.1.4, SuperLU 5.2.2, scikit-learn 0.23.2, snakemake 5.26.1, tqdm 4.51.0, vsc-mympirun 5.2.5, x264 20201026 * minor enhancements, including: * add extension to R-bundle-Bioconductor 3.11: snpStats ( `#11586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11586> `_ ), SCANVIS ( `#11638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11638> `_ ) * add extensions to R 4.0.0: coloc, Exact, lmom, gld, DescTools ( `#11587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11587> `_ ); nlsem ( `#11733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11733> `_ ); mitools, survey, tableone, jstable ( `#11841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11841> `_ ) * add gxmapi extension (Python bindings) to GROMACS 2020.4 ( `#11640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11640> `_ ) * add missing extensions for QIIME2 to Perl 5.30.2 and 5.32.0 easyconfigs ( `#11654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11654> `_ ) * enable NVPTX offload support in GCCcore 10.2.0 easyconfig ( `#11720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11720> `_ ) * various bug fixes, including: * prevent Minimac4 easyconfig from downloading libStatGen from GitHub ( `#7982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7982> `_ ) * limit build parallelism for RAxML-NG to avoid build failure ( `#10363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10363> `_ ) * fix ``source_urls`` in Geant4 easyconfigs ( `#11596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11596> `_ ) * add alternate checksum for extensions in R easyconfigs: KernSmooth ( `#11600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11600> `_ ), codetools ( `#11616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11616> `_ , `#11736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11736> `_ ) * fix BBMap version check in FusionCatcher v1.20 ( `#11608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11608> `_ ) * add patch for TensorFlow 2.3.1 to fix installation on Arm64 ( `#11614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11614> `_ ) * add patch for GCCcore 10.2 to fix ``__has_include`` regression ( `#11627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11627> `_ ) * change default ``bitmaptype`` for IRkernel to cairo ( `#11645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11645> `_ ) * set ``$JUPYTER_PATH`` to make Jupyter find the ipywidgets extension in recent IPython easyconfigs ( `#11649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11649> `_ ) * add missing dependencies + fix moduleclass in CheckM easyconfigs (should be bio) ( `#11662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11662> `_ ) * use Python 2 build dep for nodejs 12.19.0 ( `#11679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11679> `_ ) * use correct OS deps in UCX ( `#11702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11702> `_ ) * in-place update to magma 2.5.4 for PyTorch 1.2.0 ( `#11723 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11723> `_ ) * in-place update to magma 2.5.4 for PyTorch easyconfigs using fosscuda/2019b toolchain ( `#11726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11726> `_ ) * add missing Java dep to Prokka ( `#11732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11732> `_ ) * add patch to fix possible memory leak in OpenBLAS 0.3.3+ ( `#11745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11745> `_ ) * do not treat warnings as errors in Java v1.8_191-b26-OpenJDK (POWER) ( `#11755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11755> `_ ) * add missing PEAR dependency in easyconfig for GBprocesS v2.3 + enhance sanity check ( `#11767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11767> `_ ) * add missing gnuplot dependency in OpenFOAM easyconfigs ( `#11770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11770> `_ , `#11800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11800> `_ ) * consistently add Java as a dep for prokka 1.14.5 ( `#11782 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11782> `_ ) * stick to http download URL in fetchMG easyconfig (https doesn't work) ( `#11788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11788> `_ ) * other changes: * rename XCfun to XCFun ( `#11603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11603> `_ ) * rename ambiguous Ray easyconfigs to Ray-assembler and Ray-project ( `#11727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11727> `_ ) * change 'rstudio' name to 'RStudio-Server' to agree with official name and better reflect what it provides ( `#11764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11764> `_ ) * rename Sumo to SUMO for consistency ( `#11791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11791> `_ ) .. _release_notes_eb431: EasyBuild v4.3.1 (October 29th 2020) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * further GCC toolchain fixes for aarch64 ( `#3433 <https://github.com/easybuilders/easybuild-framework/pull/3433> `_ ) * take into account ``--include-easyblocks-from-pr`` when uploading test reports ( `#3446 <https://github.com/easybuilders/easybuild-framework/pull/3446> `_ ) * add path to pkg-config files in sysroot to ``$PKG_CONFIG_PATH`` when ``--sysroot`` is specified ( `#3451 <https://github.com/easybuilders/easybuild-framework/pull/3451> `_ ) * add support for NVHPC compiler + toolchain (based on PGI) ( `#3454 <https://github.com/easybuilders/easybuild-framework/pull/3454> `_ ) * check for _VERSION and _PREFIX Cray environment variables with both software and module name ( `#3460 <https://github.com/easybuilders/easybuild-framework/pull/3460> `_ ) * allow including easyblocks from multiple PRs ( `#3480 <https://github.com/easybuilders/easybuild-framework/pull/3480> `_ , `#3481 <https://github.com/easybuilders/easybuild-framework/pull/3481> `_ ) * various bug fixes, including: * avoid ``UnicodeDecodeError`` in ``apply_regex_substitutions`` when patching files that include non-UTF-8 characters ( `#3450 <https://github.com/easybuilders/easybuild-framework/pull/3450> `_ ) * avoid appending lib stubs pattern to RPATH filter over and over again ( `#3452 <https://github.com/easybuilders/easybuild-framework/pull/3452> `_ ) * fix missing string template on error for incorrect extension ``sources`` value ( `#3461 <https://github.com/easybuilders/easybuild-framework/pull/3461> `_ ) * fix compatibility with Python 3.9 by renaming fancy root logger ( `#3465 <https://github.com/easybuilders/easybuild-framework/pull/3465> `_ ) * also remove empty checksums list specified in easyconfig file when using ``--inject-checksums`` ( `#3466 <https://github.com/easybuilders/easybuild-framework/pull/3466> `_ ) * avoid confusing error log message when determining impi version while trying to define value for ``%(mpi_cmd_prefix)s`` template ( `#3474 <https://github.com/easybuilders/easybuild-framework/pull/3474> `_ ) * unset ``$LD_LIBRARY_PATH`` when checking for OS dependencies with ``rpm`` & co ( `#3477 <https://github.com/easybuilders/easybuild-framework/pull/3477> `_ ) * don't change directory in ``download_repo`` function in ``tools.github`` ( `#3486 <https://github.com/easybuilders/easybuild-framework/pull/3486> `_ ) * take ``source_urls`` , ``checksums`` , ``patches`` into account when extension source is specified via ``sources`` ( `#3487 <https://github.com/easybuilders/easybuild-framework/pull/3487> `_ ) * other changes: * consider ``$EB_INSTALLPYTHON`` in ``eb`` command to specify ``python`` command to use for running EasyBuild ( `#3428 <https://github.com/easybuilders/easybuild-framework/pull/3428> `_ ) * use only the sub folder name for ``createSubmoduleDeps`` script ( `#3464 <https://github.com/easybuilders/easybuild-framework/pull/3464> `_ ) **easyblocks** * 2 new software-specific easyblocks: * CFDEMcoupling ( `#1439 <https://github.com/easybuilders/easybuild-easyblocks/pull/1439> `_ ), NVHPC ( `#2190 <https://github.com/easybuilders/easybuild-easyblocks/pull/2190> `_ ) * minor enhancements, including: * support having PyQt5 installed as part of Qt5 in QScintilla easyblock ( `#2040 <https://github.com/easybuilders/easybuild-easyblocks/pull/2040> `_ ) * update TensorFlow easyblock to put Bazel build files in build directory + avoid unnecessary runtime patching ( `#2166 <https://github.com/easybuilders/easybuild-easyblocks/pull/2166> `_ ) * update CBLAS easyblock for toolchains that include imkl ( `#2175 <https://github.com/easybuilders/easybuild-easyblocks/pull/2175> `_ ) * add workaround for duplicate prefix path in Eigen CMake config ( `#2176 <https://github.com/easybuilders/easybuild-easyblocks/pull/2176> `_ ) * enable ``CTEST_OUTPUT_ON_FAILURE`` for CMakeMake test step ( `#2181 <https://github.com/easybuilders/easybuild-easyblocks/pull/2181> `_ ) * add XLA build support to TensorFlow easyblock ( `#2182 <https://github.com/easybuilders/easybuild-easyblocks/pull/2182> `_ ) * also consider libfabric dep ( ``--with-ofi`` ) when setting default OpenMPI configure options ( `#2184 <https://github.com/easybuilders/easybuild-easyblocks/pull/2184> `_ ) * make easyblock for installing CMake aware of ``--sysroot`` ( `#2187 <https://github.com/easybuilders/easybuild-easyblocks/pull/2187> `_ ) * make OpenBLAS respect the parallelism set by easybuild ( `#2191 <https://github.com/easybuilders/easybuild-easyblocks/pull/2191> `_ ) * handle option of building Michigan State University CCT3 & CCSD3A methods in GAMESS_US easyblock ( `#2194 <https://github.com/easybuilders/easybuild-easyblocks/pull/2194> `_ ) * add support to RubyGem easyblock for installing zipped gems ( `#2203 <https://github.com/easybuilders/easybuild-easyblocks/pull/2203> `_ ) * update ScaLAPACK easyblock to support installation with CMake for recent versions (>= v2.1.0) ( `#2205 <https://github.com/easybuilders/easybuild-easyblocks/pull/2205> `_ ) * update Score-P easyblock to add support for NVHPC toolchain ( `#2206 <https://github.com/easybuilders/easybuild-easyblocks/pull/2206> `_ ) * various bug fixes, including: * add ``torch/lib`` subdirectory in Python lib dir to ``$LD_LIBRARY_PATH`` for PyTorch installations ( `#2183 <https://github.com/easybuilders/easybuild-easyblocks/pull/2183> `_ ) * update MUMmer easyblock to use ``apply_regex_substitutions`` and ``copy_file`` functions ( `#2185 <https://github.com/easybuilders/easybuild-easyblocks/pull/2185> `_ ) * configure OpenMPI 4.x with ``--without-verbs`` when using UCX ( `#2188 <https://github.com/easybuilders/easybuild-easyblocks/pull/2188> `_ ) * take into account that zlib may be listed in ``--filter-deps`` in custom easyblock for XML R package ( `#2189 <https://github.com/easybuilders/easybuild-easyblocks/pull/2189> `_ ) * add sanity check commands to Clang easyblock and print warning for missing ncurses ( `#2193 <https://github.com/easybuilders/easybuild-easyblocks/pull/2193> `_ ) * enhance OpenFOAM easyblock to add symlinks for libraries to ensure ``mpi`` versions have preference over ``dummy`` versions ( `#2196 <https://github.com/easybuilders/easybuild-easyblocks/pull/2196> `_ ) * leverage installed OpenSSL/BoringSSL when cURL is used as a dependency for TensorFlow ( `#2197 <https://github.com/easybuilders/easybuild-easyblocks/pull/2197> `_ ) * add ``-ffree-line-length-none`` to gfortran flags in Siesta easyblock ( `#2204 <https://github.com/easybuilders/easybuild-easyblocks/pull/2204> `_ ) * respect ``--disable-mpi-tests`` in Siesta easyblock ( `#2207 <https://github.com/easybuilders/easybuild-easyblocks/pull/2207> `_ ) * other changes, including: * set ``$EB_INSTALLPYTHON`` in module generated for EasyBuild rather than setting ``$EB_PYTHON`` , to allow overriding Python command to be used for running EasyBuild with ``$EB_PYTHON`` ( `#2109 <https://github.com/easybuilders/easybuild-easyblocks/pull/2109> `_ ) * remove unused custom easyblock for DIRAC ( `#2192 <https://github.com/easybuilders/easybuild-easyblocks/pull/2192> `_ , `#2198 <https://github.com/easybuilders/easybuild-easyblocks/pull/2198> `_ ) **easyconfigs** * added easyconfigs for 2 new toolchains: * fosscuda/2020a ( `#11424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11424> `_ ) and intelcuda/2020a ( `#11425 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11425> `_ ) * added example easyconfig files for 75 new software packages: * Bsoft ( `#6551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6551> `_ , `#11537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11537> `_ ), causallift ( `#11436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11436> `_ ), CAVIAR ( `#11158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11158> `_ ), CCfits ( `#11505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11505> `_ ), Cereal ( `#11506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11506> `_ ), CFDEMcoupling ( `#6465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6465> `_ ), Check ( `#11295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11295> `_ ), chewBBACA ( `#11418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11418> `_ ), COMSOL ( `#11513 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11513> `_ ), CUDAcore ( `#11295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11295> `_ ), Dalton ( `#5808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5808> `_ ), DIRAC ( `#11414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11414> `_ ), ESMValTool ( `#6329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6329> `_ ), eSpeak-NG ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), ExifTool ( `#11521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11521> `_ ), FabIO ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), festival ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), fetchMG ( `#11283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11283> `_ ), FHI-aims ( `#11198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11198> `_ ), Flexbar ( `#11305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11305> `_ ), FRUIT ( `#6613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6613> `_ ), FRUIT_processor ( `#6631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6631> `_ ), Gaussian ( `#4247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4247> `_ ), GBprocesS ( `#11512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11512> `_ ), GDRCopy ( `#11295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11295> `_ ), Genome_Profiler ( `#6066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6066> `_ ), groff ( `#11200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11200> `_ ), ILAMB ( `#11309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11309> `_ ), kedro ( `#11436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11436> `_ ), leidenalg ( `#11407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11407> `_ ), libav ( `#6194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6194> `_ ), libmo_unpack ( `#6329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6329> `_ ), libobjcryst ( `#11321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11321> `_ ), makeinfo ( `#11368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11368> `_ ), mauveAligner ( `#11395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11395> `_ ), MBROLA ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), MDSplus-Java ( `#10705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10705> `_ ), MDSplus-Python ( `#10705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10705> `_ ), MyCC ( `#11283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11283> `_ ), nanomax-analysis-utils ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), Nek5000 ( `#6408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6408> `_ ), NVHPC ( `#11391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11391> `_ ), OPERA-MS ( `#11410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11410> `_ ), ORFfinder ( `#7031 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7031> `_ ), phonemizer ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), Pingouin ( `#11280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11280> `_ ), Pint ( `#11151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11151> `_ ), pydantic ( `#11151 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11151> `_ ), pyobjcryst ( `#11321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11321> `_ ), PyOpenCL ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), pyspoa ( `#11438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11438> `_ ), QtPy ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), Qtconsole ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), rasterio ( `#11468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11468> `_ ), rasterstats ( `#11468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11468> `_ ), ReMatCh ( `#6067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6067> `_ ), Ruby-Tk ( `#6613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6613> `_ ), SBCL ( `#11413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11413> `_ ), scikit-uplift ( `#11432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11432> `_ ), SDL ( `#6202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6202> `_ ), SDL2 ( `#6203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6203> `_ ), SDL2_image ( `#6203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6203> `_ ), SDL_image ( `#6202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6202> `_ ), SeqKit ( `#11538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11538> `_ ), silx ( `#11517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11517> `_ ), SiNVICT ( `#11404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11404> `_ ), sonic ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), speech_tools ( `#11236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11236> `_ ), Statistics-R ( `#11274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11274> `_ ), SUMO ( `#11435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11435> `_ ), tidybayes ( `#11335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11335> `_ ), treatSens ( `#11431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11431> `_ ), tsne ( `#11283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11283> `_ ), wandb ( `#11450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11450> `_ ), WisecondorX ( `#11399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11399> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 9.2.1, ASE 3.20.1, Autotools 20200321, Bazel 3.6.0, Biopython 1.78, CCL 1.12, CMake 3.18.4, CUDA 11.0.2, cURL 7.72.0, deepdiff 5.0.2, fmt 7.0.3, GATK 4.1.8.1, GLib 2.66.1, GROMACS 2020.3, GTK+ 3.24.23, git 2.28.0, HMMER 3.3.1, Horovod 0.20.3, ICU 67.1, IPython 7.18.1, ichorCNA 0.3.2, JupyterHub 1.1.0, JupyterLab 2.2.8, LLVM 11.0.0, libarchive 3.4.3, libcircle 0.3, libevent 2.1.12, libfabric 1.11.0, libglvnd 1.3.2, libunwind 1.4.0, libxcb 1.13, MAFFT 7.471, MDSplus 7.96.12, MEGAHIT 1.2.9, MMseqs2 11-e1a1c, Mako 1.1.3, Mesa 20.2.1, Meson 0.55.3, medaka 1.1.3, mpifileutils 0.10.1, NASM 2.15.05, NSPR 4.29, NSS 3.57, Ninja 1.10.1, nettle 3.6, nglview 2.7.7, nodejs 12.19.0, OpenImageIO 2.1.12.0, OpenRefine 3.4.1, OpenSSL 1.1.1h, PCRE2 10.35, PSI4 1.3.2, Pango 1.47.0, PyGEOS 0.8, PyOpenGL 3.1.5, PyQt5 5.15.1, PyQtGraph 0.11.0, PyRETIS 2.5.0, Python 3.8.6, pandas 1.1.2, phonopy 2.7.1, picard 2.22.1, pixman 0.40.0, protobuf 3.13.0, pyEGA3 3.4.0, pytest 6.0.1, ReFrame 3.2. re2c 2.0.3, SAMtools 1.11, SCons 4.0.1, SQLite 3.33.0, Spyder 4.1.5, Subversion 1.14.0, sbt 1.3.13, spglib-python 1.16.0, spoa 4.0.0, TINKER 8.8.1, TRIQS 3.0.0, Taiyaki 5.1.0, TensorFlow 2.3.1, Tkinter 2.7.18 + 3.8.6, torchvision 0.7.0, UCX 1.9.0, V8 3.2.0, VirtualGL 2.6.2, vsc mympirun 5.2.0 X11 20201008, XGBoost 1.2.0, XZ 5.2.5, Xerces-C++ 3.2.3, xarray 0.16.1, ZeroMQ 4.3.3, zstd 1.4.5 * minor enhancements, including: * use more EasyBuild installed dependencies for TensorFlow 2.2.0 ( `#11224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11224> `_ ) * add additional extensions to R 4.0.0 easyconfig ( `#11340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11340> `_ , `#11430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11430> `_ , `#11487 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11487> `_ ) * add additional extensions to Bioconductor 3.11 bundle ( `#11341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11341> `_ , `#11488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11488> `_ ) * make libtirpc easier to use as replacement of rpc in glibc (for RHEL8) ( `#11355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11355> `_ ) * add libevent, libfabric and PMIx dependencies to OpenMPI 4.0.3 (for foss/2020a & iomkl/2020a) ( `#11387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11387> `_ , `#11568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11568> `_ ) * build LibTIFF with ``-fPIC`` ( `#11527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11527> `_ ) * update Java/1.8 wrapper to also support aarch64 ( `#11545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11545> `_ ) * various bug fixes, including: * add Python 3 as build dep for Xvfb 1.20.8 easyconfigs ( `#10745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10745> `_ ) * patch out bug in collective primitive in TensorFlow 2.2.0 ( `#11175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11175> `_ ) * add missing groff build dependency for Perl (provides nroff tool requires to install man pages) ( `#11200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11200> `_ ) * add pocl dependency to GDAL easyconfig using fosscuda/2019b toolchain to make sure it builds on POWER ( `#11273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11273> `_ ) * add libtirpc as a build dep for HDF to fix installation on RHEL8 ( `#11279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11279> `_ ) * fix build problems with make 4.2.1 on RHEL8 ( `#11282 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11282> `_ , `#11371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11371> `_ ) * change ``$LIBS`` in Ghostscript 9.27 easyconfig to include location of zlib library to link with ( `#11291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11291> `_ ) * remove ``--no-dist-info`` configuration option for SIP in recent PyQt5 easyconfigs ( `#11307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11307> `_ ) * make sure correct zlib is used in recent Ghostscript easyconfigs ( `#11319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11319> `_ ) * remove GLog and GFlags from PyTorch 1.2.0 ( `#11327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11327> `_ ), 1.3.1 ( `#11325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11325> `_ ), 1.4.0 ( `#11322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11322> `_ ) and 1.6.0 ( `#11323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11323> `_ ) * use PyTorch easyblock for PyTorch 1.3.1 ( `#11325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11325> `_ ) * add missing git build dependency for OpenImageIO 2.0.12 ( `#11328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11328> `_ ) * fix HDF 4.2.14 easyconfigs for RHEL8 ( `#11330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11330> `_ ) * add patch to fix installation of LAMMPS 7Aug2019 on AMD Epyc systems ( `#11334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11334> `_ ) * fix dependency on Bowtie of v0.x in seq2HLA easyconfigs ( `#11339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11339> `_ ) * fix installation of Hadoop v2.10.0 on RHEL8 ( `#11358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11358> `_ ) * add patch to fix installation of Sailfish v0.10.1 on RHEL8 ( `#11364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11364> `_ ) * add patch to fix installation of FuSeq v1.1.2 on RHEL8 ( `#11365 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11365> `_ ) * fix installation of Qt5 5.14.1 on top of zlib provided by Gentoo + stick to Python 2 as build dep ( `#11385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11385> `_ , `#11386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11386> `_ ) * add patch for LAME configure script to make it check for correct ncurses symbol ( `#11388 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11388> `_ ) * add protobuf-python as a dependency and corresponding sanity check to PyTorch 1.6 ( `#11390 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11390> `_ ) * fix Multiwfn 3.6 installation on RHEL8 ( `#11402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11402> `_ ) * fix OpenFOAM 2.3.1 installation with intel/2019b on RHEL8 ( `#11409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11409> `_ ) * fix broken worker easyconfigs ( `#11412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11412> `_ ) * add ncurses runtime dependency to Clang easyconfigs ( `#11415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11415> `_ , `#11416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11416> `_ , `#11419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11419> `_ , `#11472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11472> `_ ) * fix installation of Bioconductor 3.11 bundle on aarch64 ( `#11417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11417> `_ ) * add patch to libunwind fixing a failure on POWER ( `#11421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11421> `_ ) * fix infinite loop build bug on ppc64le for R 4.0.0 ( `#11428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11428> `_ ) * fix compilation of Qt5 v5.12.3 and v5.13.1 on Ubuntu 20.04 ( `#11434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11434> `_ ) * fix PyVCF easyconfig, only supports Python 2 ( `#11437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11437> `_ ) * add patches to fix miscomputation (on POWER) and performance issues for OpenBLAS ( `#11443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11443> `_ , `#11444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11444> `_ , `#11445 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11445> `_ ) * add missing DB dependency (required for DB_File) to easyconfigs for Perl ( `#11451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11451> `_ , `#11452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11452> `_ ) * fix dbarts extension in R v4.0.0 easyconfigs for non-x86_64 ( `#11453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11453> `_ ) * use Homebrew source mirror to auto-download sources for DB v18.1.25 and v18.1.32 ( `#11454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11454> `_ ) * add missing UnZip dependency for Python 3.8.2 ( `#11458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11458> `_ ) * add support for building OpenBLAS on ARM TSV110 with GCC 8.3 ( `#11464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11464> `_ ) * allow Kent_tools to build when MySQL installed at the OS level ( `#11471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11471> `_ ) * add missing ``moduleclass`` to easyconfigs for: * Arlequin 3.5.2.2 ( `#11473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11473> `_ ), MEGAHIT 1.2.8 ( `#11474 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11474> `_ ) and 1.2.9 ( `#11475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11475> `_ ), PyCUDA 2019.1.2 ( `#11476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11476> `_ ) * fix source for SQLite 3.31.1 ( `#11483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11483> `_ ) * fix installation of worker 1.6.11 with intel/2019b on RHEL 8.2 ( `#11498 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11498> `_ ) * fix checksum in NAMD 2.12 easyconfigs + add source URL ( `#11515 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11515> `_ ) * add BLAS/LAPACK check to GPAW patch adding EasyBuild configuration files ( `#11523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11523> `_ ) * backport fixes for Score-P v6.0 ( `#11540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11540> `_ ) * add XZ build dep to easyconfigs for libarchive v3.4.0 and v3.4.2 ( `#11561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11561> `_ ) * add patch for OpenMPI 3.1.4 adding device parameters for ConnectX-6 ( `#11575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11575> `_ ) * other changes: * update README on constructing source file for MATLAB ( `#6341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6341> `_ ) * remove easyconfigs for Taiyaki that depend on PyTorch 1.3.1, since latest version still requires PyTorch 1.2.0 ( `#11301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11301> `_ ) * make CI error messages less confusing (\"is\" -> \"should be\") ( `#11314 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11314> `_ ) * remove extensions from R-bundle-Bioconductor 3.11 easyconfigs that are also included in R 4.0.0 ( `#11429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11429> `_ ) * cache M4 source tarball to avoid test failures because of download problems ( `#11469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11469> `_ ) * rename jupyterhub to JupyterHub ( `#11571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11571> `_ ) .. _release_notes_eb430: EasyBuild v4.3.0 (September 13th 2020) -------------------------------------- feature release **framework** * various enhancements, including: * add script to create ``sources`` entries for git submodules ( `#3369 <https://github.com/easybuilders/easybuild-framework/pull/3369> `_ , `#3436 <https://github.com/easybuilders/easybuild-framework/pull/3436> `_ ) * add templates for CUDA compute capabilities ( `#3382 <https://github.com/easybuilders/easybuild-framework/pull/3382> `_ ) * ``%(cuda_compute_capabilities)s`` , ``%(cuda_sm_comma_sep)s`` , ``%(cuda_sm_space_sep)s`` * add EasyBuild configuration option ``--generate-devel-module`` ( `#3388 <https://github.com/easybuilders/easybuild-framework/pull/3388> `_ ) * to allow disabling generating of \"devel\" modules via ``--disable-generate-devel-module`` * set up a minimal build environment when using system compiler ( `#3399 <https://github.com/easybuilders/easybuild-framework/pull/3399> `_ ) * by default, ``$CC`` is set to ``gcc`` and ``$CXX`` is set to ``g++`` when using ``system`` toolchain * minimal build environment can be customized via ``--minimal-build-env`` configuration option * add ``--sysroot`` configuration option to specify alternative location of system root ( `#3419 <https://github.com/easybuilders/easybuild-framework/pull/3419> `_ ) * this is useful when installing software in a Gentoo Prefix environment (for example) * various bug fixes, including: * allow including easyblocks from multiple locations, by combining ``--include-easyblocks`` and ``--include-easyblocks-from-pr`` ( `#3311 <https://github.com/easybuilders/easybuild-framework/pull/3311> `_ ) * also escape backslashes in ``quote_py_str()`` ( `#3386 <https://github.com/easybuilders/easybuild-framework/pull/3386> `_ ) * use one argument ``module swap`` statements in Tcl modulefiles (required by Modules 4.2.3+) ( `#3397 <https://github.com/easybuilders/easybuild-framework/pull/3397> `_ ) * fix copying of (non-existing) file with ``apply_patch`` ( `#3400 <https://github.com/easybuilders/easybuild-framework/pull/3400> `_ ) * create symlink from ``lib64`` to ``lib`` subdir in installation directories to avoid that GCC prefers ``/lib64`` system directories ( `#3401 <https://github.com/easybuilders/easybuild-framework/pull/3401> `_ ) * fix default value for ``lib64_fallback_sanity_check`` build option ( `#3402 <https://github.com/easybuilders/easybuild-framework/pull/3402> `_ ) * correctly determine commit status in ``--merge-pr`` ( `#3406 <https://github.com/easybuilders/easybuild-framework/pull/3406> `_ ) * stop installing ccache wrapper for Fortran compiler ( `#3409 <https://github.com/easybuilders/easybuild-framework/pull/3409> `_ ) * fix issues with applying PR patch in ``--from-pr`` ( `#3414 <https://github.com/easybuilders/easybuild-framework/pull/3414> `_ ) * make ``RPATH`` wrapper script more robust by using ``python -E -s -S`` to run ``rpath_args.py`` ( `#3422 <https://github.com/easybuilders/easybuild-framework/pull/3422> `_ ) * don't inject ``-Wl,-rpath`` options when ``-x c++-header`` compiler option is used ( `#3424 <https://github.com/easybuilders/easybuild-framework/pull/3424> `_ ) * fix lack of ``-mno-recip`` on aarch64 by tweaking GCC options used when ``precise`` toolchain option is enabled ( `#3425 <https://github.com/easybuilders/easybuild-framework/pull/3425> `_ ) * make sure ``self.start_dir`` is set in ``ExtensionEasyBlock`` ( `#3426 <https://github.com/easybuilders/easybuild-framework/pull/3426> `_ , `#3435 <https://github.com/easybuilders/easybuild-framework/pull/3435> `_ ) * exclude local variables from typo check in easyconfig files ( `#3427 <https://github.com/easybuilders/easybuild-framework/pull/3427> `_ ) * other changes: * stick to cryptography 2.9.2 when using Python 2.7 to avoid broken test suite in CI ( `#3392 <https://github.com/easybuilders/easybuild-framework/pull/3392> `_ ) * automatically enable ``--ignore-locks`` with ``--fetch`` ( `#3404 <https://github.com/easybuilders/easybuild-framework/pull/3404> `_ ) * switch to status badge based on tests run in GitHub Actions CI in README ( `#3415 <https://github.com/easybuilders/easybuild-framework/pull/3415> `_ ) * make ``flake8`` code style checks pass ( `#3416 <https://github.com/easybuilders/easybuild-framework/pull/3416> `_ , `#3417 <https://github.com/easybuilders/easybuild-framework/pull/3417> `_ ) * limit Travis to only test with Python 2.6 + Lmod 7 ( `#3418 <https://github.com/easybuilders/easybuild-framework/pull/3418> `_ ) * ignore deprecation warning raised for cryptography when using Python 3.5 produced by output of test suite ( `#3423 <https://github.com/easybuilders/easybuild-framework/pull/3423> `_ ) **easyblocks** * 2 new software-specific easyblocks: * pybind11 ( `#2115 <https://github.com/easybuilders/easybuild-easyblocks/pull/2115> `_ ), PyTorch ( `#2104 <https://github.com/easybuilders/easybuild-easyblocks/pull/2104> `_ ) * minor enhancements, including: * update MATLAB easyblock to use new binary installer for versions >= 2020a ( `#2058 <https://github.com/easybuilders/easybuild-easyblocks/pull/2058> `_ ) * add ``use_pip_requirement`` custom easyconfig parameter to PythonPackage easyblock to allow providing a requirements file to the ``pip`` command, as a source ( `#2064 <https://github.com/easybuilders/easybuild-easyblocks/pull/2064> `_ ) * update CP2K easyblock for recent versions (>= 7.0) ( `#2069 <https://github.com/easybuilders/easybuild-easyblocks/pull/2069> `_ ) * add ``multi_deps`` support into custom easyblock for QScintilla ( `#2077 <https://github.com/easybuilders/easybuild-easyblocks/pull/2077> `_ ) * update Mothur easyblock for v1.44.0 and higher ( `#2084 <https://github.com/easybuilders/easybuild-easyblocks/pull/2084> `_ ) * update MotionCor2 easyblock to add support for v1.3.2 ( `#2100 <https://github.com/easybuilders/easybuild-easyblocks/pull/2100> `_ ) * update Tinker easyblock to handle skipping of tests depending on version and link with ``fftw_omp`` ( `#2102 <https://github.com/easybuilders/easybuild-easyblocks/pull/2102> `_ ) * launch test & sanity check commands through ``mpirun`` for netcdf4-python if MPI support is enabled ( `#2106 <https://github.com/easybuilders/easybuild-easyblocks/pull/2106> `_ ) * check for installation of pip & setuptools in Python 3.4+ ( `#2108 <https://github.com/easybuilders/easybuild-easyblocks/pull/2108> `_ ) * update QuantumESPRESSO easyblock to support version 6.6 ( `#2112 <https://github.com/easybuilders/easybuild-easyblocks/pull/2112> `_ ) * allow NAMD to be built on POWER, and also use the CUDA arch info ( `#2113 <https://github.com/easybuilders/easybuild-easyblocks/pull/2113> `_ , `#2123 <https://github.com/easybuilders/easybuild-easyblocks/pull/2123> `_ ) * update Libint easyblock for versions >= 2.6.0 + add custom easyconfig parameter to enable Fortran support ( `#2116 <https://github.com/easybuilders/easybuild-easyblocks/pull/2116> `_ ) * update TensorFlow easyblock to use system/EasyBuild installed libraries ( `#2117 <https://github.com/easybuilders/easybuild-easyblocks/pull/2117> `_ , `#2165 <https://github.com/easybuilders/easybuild-easyblocks/pull/2165> `_ , `#2163 <https://github.com/easybuilders/easybuild-easyblocks/pull/2163> `_ , `#2172 <https://github.com/easybuilders/easybuild-easyblocks/pull/2172> `_ ) * add support in NAMD easyblock to pass additional C++ compiler options for building Charm++ component with + wrap them in single quotes ( `#2118 <https://github.com/easybuilders/easybuild-easyblocks/pull/2118> `_ ) * automatically add required ``-G Ninja`` option when using CMakeNinja easyblock + add ``generator`` custom easyconfig parameter for CMakeMake ( `#2120 <https://github.com/easybuilders/easybuild-easyblocks/pull/2120> `_ ) * make several easyblocks aware of ``--sysroot`` EasyBuild configuration option: binutils ( `#2147 <https://github.com/easybuilders/easybuild-easyblocks/pull/2147> `_ , `#2159 <https://github.com/easybuilders/easybuild-easyblocks/pull/2159> `_ ), CMakeMake ( `#2152 <https://github.com/easybuilders/easybuild-easyblocks/pull/2152> `_ ), GCC ( `#2143 <https://github.com/easybuilders/easybuild-easyblocks/pull/2143> `_ ), Perl ( `#2142 <https://github.com/easybuilders/easybuild-easyblocks/pull/2142> `_ ), Python ( `#2148 <https://github.com/easybuilders/easybuild-easyblocks/pull/2143> `_ , `#2149 <https://github.com/easybuilders/easybuild-easyblocks/pull/2149> `_ ) * make Mesa easyblock aware of aarch64 ( `#2153 <https://github.com/easybuilders/easybuild-easyblocks/pull/2153> `_ ) * enhance sanity check in custom Doxygen easyblock to catch broken installation ( `#2171 <https://github.com/easybuilders/easybuild-easyblocks/pull/2171> `_ ) * various bug fixes, including: * make TensorFlow easyblock ignore the ``PKG_REVISION`` identifier if NCCL version if it exists ( `#2085 <https://github.com/easybuilders/easybuild-easyblocks/pull/2085> `_ ) * remove version check against the ``version.txt`` file in CUDA easyblock ( `#2097 <https://github.com/easybuilders/easybuild-easyblocks/pull/2097> `_ ) * add ``lib`` symlink in tbb installation directory when building from source ( `#2103 <https://github.com/easybuilders/easybuild-easyblocks/pull/2103> `_ ) * handle GNUInstallDirs special cases in CMakeMake easyblock ( `#2105 <https://github.com/easybuilders/easybuild-easyblocks/pull/2105> `_ , `#2124 <https://github.com/easybuilders/easybuild-easyblocks/pull/2124> `_ ) * patch ELPA's ``manual_cpp`` script to fix hardcoded ``/usr/bin/python`` ( `#2107 <https://github.com/easybuilders/easybuild-easyblocks/pull/2107> `_ ) * make TensorFlow easyblock also set ``$GCC_HOST_COMPILER_PREFIX`` to specify binutils location ( `#2110 <https://github.com/easybuilders/easybuild-easyblocks/pull/2110> `_ ) * ensure stand-alone Python package being installed is in view when running ``pip check`` by loading fake module first ( `#2114 <https://github.com/easybuilders/easybuild-easyblocks/pull/2114> `_ ) * be more patient when running interactive configure script for WRF ( `#2119 <https://github.com/easybuilders/easybuild-easyblocks/pull/2119> `_ ) * make sure ``self.start_dir`` is set to a full path before constructing installation command in RPackage easyblock ( `#2125 <https://github.com/easybuilders/easybuild-easyblocks/pull/2125> `_ ) * correctly check whether ``modinc`` easyconfig parameter is set to ``True`` in CP2K easyblock ( `#2138 <https://github.com/easybuilders/easybuild-easyblocks/pull/2138> `_ ) * update PSI easyblock to correctly find Python and enable PCMSolver/CheMPS2 ( `#2141 <https://github.com/easybuilders/easybuild-easyblocks/pull/2141> `_ ) * fix running GROMACS tests when using ``eb --rpath`` ( `#2144 <https://github.com/easybuilders/easybuild-easyblocks/pull/2144> `_ , `#2154 <https://github.com/easybuilders/easybuild-easyblocks/pull/2154> `_ ) * remove existing Python installation directory if both ``eb --rpath`` and ``--enable-optimizations`` configuration option are used ( `#2146 <https://github.com/easybuilders/easybuild-easyblocks/pull/2146> `_ ) * ensure ``libQt5Core.so`` is compatible with older Linux kernels by disabling ``renameat2`` and ``getentropy`` features ( `#2151 <https://github.com/easybuilders/easybuild-easyblocks/pull/2151> `_ ) * solve issue where pybind11 picks up on the system Python instead of one provided by a module ( `#2158 <https://github.com/easybuilders/easybuild-easyblocks/pull/2158> `_ ) * fix Qt5 easyblock to support installation on Arm/aarch64 (requires platform to be ``linux-g++`` ) ( `#2160 <https://github.com/easybuilders/easybuild-easyblocks/pull/2160> `_ ) * fix OpenFOAM easyblock to support installation on Arm/aarch64 systems ( `#2162 <https://github.com/easybuilders/easybuild-easyblocks/pull/2162> `_ ) * explicitly enable/disable CUDA options in PyTorch easyblock + fix download check in sanity check + fix for disabling of *NNPACK on POWER systems ( `#2164 <https://github.com/easybuilders/easybuild-easyblocks/pull/2164> `_ ) * fix sanity check in Mathematica easyblock for 11.x versions older than 11.3 ( `#2168 <https://github.com/easybuilders/easybuild-easyblocks/pull/2168> `_ ) * unset ``$COLUMNS`` if it is set to ``0`` before running Perl's configure script ( `#2169 <https://github.com/easybuilders/easybuild-easyblocks/pull/2169> `_ ) * other changes: * filter out Python in SLEPc configure ( `#2101 <https://github.com/easybuilders/easybuild-easyblocks/pull/2101> `_ ) * switch to status badge based on tests run in GitHub Actions CI in README ( `#2126 <https://github.com/easybuilders/easybuild-easyblocks/pull/2126> `_ ) * fix code style issues to make ``flake8`` checks pass ( `#2128 <https://github.com/easybuilders/easybuild-easyblocks/pull/2128> `_ - `#2137 <https://github.com/easybuilders/easybuild-easyblocks/pull/2137> `_ , `#2140 <https://github.com/easybuilders/easybuild-easyblocks/pull/2140> `_ , `#2145 <https://github.com/easybuilders/easybuild-easyblocks/pull/2145> `_ , `#2155 <https://github.com/easybuilders/easybuild-easyblocks/pull/2155> `_ ) * limit test configurations in Travis CI to only Python 2.6 ( `#2139 <https://github.com/easybuilders/easybuild-easyblocks/pull/2139> `_ ) **easyconfigs** * added easyconfigs for 2 new toolchains: * gomkl/2020a and iomkl/2020a ( `#11036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11036> `_ ) * added example easyconfig files for 49 new software packages: * almosthere ( `#11152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11152> `_ ), arcasHLA ( `#10867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10867> `_ ), BioPP ( `#11113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11113> `_ ), Bracken ( `#10829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10829> `_ ), BUFRLIB ( `#11140 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11140> `_ ), Calib ( `#11111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11111> `_ ), CellRanger-ATAC ( `#11186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11186> `_ ), edlib ( `#10470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10470> `_ , `#11246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11246> `_ ), flatbuffers ( `#11109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11109> `_ ), gengetopt ( `#11117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11117> `_ ), graphite2 ( `#11168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11168> `_ ), HeFFTe ( `#10990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10990> `_ ), hierfstat ( `#11249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11249> `_ ), immunedeconv ( `#11136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11136> `_ ), ioapi ( `#10959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10959> `_ ), itpp ( `#10958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10958> `_ ), LiBis ( `#11059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11059> `_ ), libosmium ( `#11024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11024> `_ ), limix-bgen ( `#11152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11152> `_ ), minibar ( `#10470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10470> `_ , `#11246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11246> `_ ), misha ( `#11127 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11127> `_ ), MOABS ( `#10747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10747> `_ ), moonjit ( `#11163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11163> `_ ), NGLess ( `#11128 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11128> `_ ), nsync ( `#11109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11109> `_ ), openCARP ( `#11117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11117> `_ ), OpenForceField ( `#11048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11048> `_ ), OpenMMTools ( `#11046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11046> `_ ), OpenMS ( `#10994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10994> `_ ), PennCNV ( `#10986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10986> `_ ), plantcv ( `#10968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10968> `_ ), PlasmaPy ( `#10732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10732> `_ ), Portcullis ( `#11038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11038> `_ ), PycURL ( `#11169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11169> `_ ), PyGEOS ( `#11110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11110> `_ ), pySCENIC ( `#11115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11115> `_ ), Reapr ( `#9296 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9296> `_ ), RnBeads ( `#11142 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11142> `_ ), sf ( `#11248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11248> `_ ), SLiM ( `#11172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11172> `_ ), stars ( `#11215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11215> `_ , `#11248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11248> `_ ), Sumo ( `#11071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11071> `_ ), Telescope ( `#10943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10943> `_ ), tensorflow-probability ( `#10312 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10312> `_ ), texlive ( `#11168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11168> `_ ), tidymodels ( `#11010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11010> `_ ), Trycycler ( `#11207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11207> `_ ), umi4cPackage ( `#11127 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11127> `_ ), variant_tools ( `#11169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11169> `_ ) * added additional easyconfigs for various supported software packages, including: * Bazel 3.4.1, Bonito 0.2.2, binutils 2.35, CP2K 7.1, Clang 10.0.1, ccache 3.7.11, ctffind 4.1.14, datamash 1.5, ELPA 2020.05.001, Emacs 26.3, Flye 2.8.1, GCC(core) 10.2.0, googletest 1.10.0, HDF 4.2.15, Horovod 0.19.5, imageio 2.9.0, JUBE 2.4.0, Julia 1.5.1, Kent_tools 401, Libint 2.6.0, libxsmm 1.16.1, MDSplus 7.96.8, MDTraj 1.9.4, MariaDB 10.4.13, Meson 0.55.1, MotionCor2 1.3.2, NAMD 2.14, NCO 4.9.3, OpenFOAM 8, OpenMPI 4.0.5, OptiX 6.5.0, Pandoc 2.10, Perl 5.32.0, PostgreSQL 12.4, PyCUDA 2019.1.2, PyFR 1.9.0, PyTorch 1.6.0, PyZMQ 18.1.1, patchelf 0.12, pocl 1.5, pycocotools 2.0.1, pyproj 2.6.1.post1, QuantumESPRESSO 6.6, RDKit 2020.03.3, rgdal 1.5, Salmon 1.3.0, Spark 3.0.0, scikit-image 0.17.1, scipy 1.4.1, snpEff 5.0, sympy 1.6.2, TINKER 8.7.2, tqdm 4.47.0, Unicycler 0.4.8, VMD 1.9.4a43 * minor enhancements, including: * also build Python libraries for ParaView 5.8.0 ( `#10927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10927> `_ ) * add extensions to recent Bioconductor easyconfigs: FlowSorted.Blood.EPIC ( `#11021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11021> `_ ), DRIMSeq + stageR ( `#11053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11053> `_ ) * add extensions to recent R easyconfigs: AICcmodavg + biomod2 ( `#11030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11030> `_ ), qqman ( `#11052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11052> `_ ), poLCA ( `#11081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11081> `_ ), coxed ( `#11094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11094> `_ ), testit + data.tree ( `#11135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11135> `_ ), celestial + fasterize ( `#11206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11206> `_ ) * add Config::Simple extension to Perl 5.30.x easyconfigs ( `#11051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11051> `_ ) * update TensorFlow v2.1.0 ( `#11109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11109> `_ ) and v2.0.0 ( `#11233 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11233> `_ ) easyconfigs to provide more dependencies via EasyBuild * add CUDA compute capabilities to torchvision-0.5.0 ( `#11241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11241> `_ ) * various bug fixes, including: * patch to fix exporting images with PyQtGraph v0.10.0 ( `#10848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10848> `_ ) * add missing Python dependency to PETSc 3.11.1 ( `#10907 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10907> `_ ) and PETSc 3.12.x ( `#10908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10908> `_ ) easyconfigs * use CMakeMake easyblock for installing magma to avoid C++11 related failures on POWER ( `#10929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10929> `_ ) * fix source URL for Graphviz v2.40.1 ( `#10944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10944> `_ ) * fix ``lapack.h`` for use with C++ in OpenBLAS 0.3.9 easyconfigs ( `#10960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10960> `_ ) * add missing build dep on M4 for 2019b versions of netCDF-Fortran ( `#10972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10972> `_ ) * update easyconfig for PyTorch 1.4 to use custom easyblock and run on POWER ( `#11000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11000> `_ ) * create symlinks to incorrectly named directories in OpenBabel-3.1.1 so ``$BABEL_LIBDIR`` and ``$BABEL_DATADIR`` work properly ( `#11004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11004> `_ ) * add missing Python build dep to recent ELPA easyconfigs ( `#11011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11011> `_ ) * use ``is_generic_easyblock`` from filetools in easyconfigs test suite ( `#11020 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11020> `_ ) * fix sources in Portcullis v1.2.2 easyconfigs ( `#11038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11038> `_ ) * add patch for FFTW 3.3.8 to avoid use of ``-no-gcc`` when building with Intel compilers, to fix installation on CentOS 8 (cfr. `#10932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10932> `_ ) ( `#11050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11050> `_ ) * add missing Python build dep for BEDTools 2.29.x ( `#11054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11054> `_ ) * add missing SciPy-bundle and Kent_tools (for bedPartition command) dependencies to FLAIR ( `#11057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11057> `_ ) * add patch to fix bug in LiBiS v20200428 easyconfig ( `#11059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11059> `_ ) * use FFTW provided via EasyBuild for ScaFaCoS ( `#11060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11060> `_ ) * fix undefined reference to ``qfloat16::mantissatable`` in Qt5.14.1 ( `#11063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11063> `_ ) * add alternative checksum for rstantools 2.0.0 extension ( `#11081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11081> `_ ) * update checksums for R 3.6.0 packages and add patch for ppc ( `#11088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11088> `_ ) * install scikit-learn 0.23.1 as a bundle and include required threadpoolctl extension ( `#11089 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11089> `_ ) * update pybind11 easyconfigs to use custom easyblock to install with pip ( `#11091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11091> `_ ) * add recent six as extension to archspec installed on top of Python 3.7.4 ( `#11092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11092> `_ ) * add missing Seaborn dependency to LiBis easyconfig ( `#11095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11095> `_ ) * add missing dependencies for OpenPIV + switch to PythonBundle easyblock and include progressbar2 as extension ( `#11096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11096> `_ ) * add missing argparse dep to TEtranscripts easyconfig ( `#11097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11097> `_ ) * add missing pkg-config build dep in Octave 5.1.0 easyconfigs ( `#11100 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11100> `_ ) * don't statically link MUSCLE, to avoid requiring that glibc-static is installed in OS ( `#11102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11102> `_ ) * add missing pkg-config build dependency in recent R-bundle-Bioconductor easyconfigs ( `#11104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11104> `_ ) * add patch to h5py 2.8.0 ( `#11119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11119> `_ ) and 2.9.0 ( `#11118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11118> `_ ) easyconfigs to avoid MPI_Init on ``import h5py`` * add patch to support libbfd 2.34 API change in Score-P 6.0 ( `#11123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11123> `_ ) * use pip to install protobuf-python in 2019b toolchain (requires re-downloading source tarball!) ( `#11143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11143> `_ , `#11260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11260> `_ ) * add missing Keras-Applications extension to TensorFlow 2.2.0 easyconfigs with ``foss*/2019b`` toolchain ( `#11156 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11156> `_ ) * add missing pocl dependency in R 3.6.0 ( `#11157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11157> `_ ) * update Meson build dep to 0.55.1 for GLib, X11, Mesa & co to fix aggressive RPATH stripping ( `#11178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11178> `_ ) * disable generating of man pages in recent libdrm easyconfigs to avoid installation failure if docbook-xsl is not installed ( `#11182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11182> `_ ) * add fontconfig and bzip2 as direct dependencies for Qt5 to fix installation with ``--rpath`` ( `#11183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11183> `_ ) * fix failing ``make check`` for MPFR 4.x ( `#11187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11187> `_ ) and GMP ( `#11188 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11188> `_ ) when installing with ``eb --rpath`` * add pkg-config as a build dependency for libglvnd ( `#11189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11189> `_ ) * add missing libiconv dep in recent Doxygen easyconfigs ( `#11191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11191> `_ , `#11257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11257> `_ ) * enhance Java/11 wrapper to also support for aarch64/Arm ( `#11192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11192> `_ ) * add pkg-config as a build dependency to Ghostscript 9.52, needed on aarch64/arm ( `#11194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11194> `_ ) * add patch for pycrypto extension in recent Python easyconfigs to remove hardcoded ``/usr/include`` which causes problems when ``eb --sysroot`` is used ( `#11202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11202> `_ ) * fix installation of R v3.6.3 and v4.0.0 with foss/2020a on Arm (aarch64) ( `#11213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11213> `_ ) * update PyTorch 1.4 easyconfigs to use custom easyblock (and do less downloading during installations) ( `#11219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11219> `_ ) * other changes: * don't require custom ``sanity_check_paths`` for CUDA bundle easyconfigs ( `#10936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10936> `_ ) * move intervaltree and sortedcontainers to main Python easyconfigs ( `#10969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10969> `_ , `#10970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10970> `_ ) * disable qtwayland in Qt5 v5.14.1 ( `#11107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11107> `_ ) * remove mklml (small MKL) from PyTorch 1.3.1 and 1.4.0 easyconfigs ( `#11019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11019> `_ ) * use pip to install h5py 2.10.0 ( `#11044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11044> `_ ) * stop testing easyconfig PRs with Travis, only use GitHub Actions from now on ( `#11008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11008> `_ , `#11055 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11055> `_ ) * switch to Kent_tools built from source as dep for FusionCatcher ( `#11057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11057> `_ ) * fall back to using PR target branch when determining \"merge base\" between PR branch & target branch fails in test suite ( `#11069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11069> `_ ) * rename gtest to googletest ( `#11082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11082> `_ ) * rename sdsl-lite to SDSL (to use one single name) ( `#11084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11084> `_ ) * stop using ``remove_usr_bin`` patch in TensorFlow easyconfig, no longer required with updated TensorFlow easyblock ( `#11087 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11087> `_ ) * extend timeout for libxc-4.3.4 to avoid failing tests ( `#11126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11126> `_ ) * move GitHub Actions status badge to top of README ( `#11138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11138> `_ ) * fix code style issues in test ( `#11146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11146> `_ ) * enable ``flake8`` on CI and fix issues ( `#11147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11147> `_ ) * prefer gc GitHub site for source downloads ( `#11208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11208> `_ ) * prefer ``https`` over ``ftp`` in ``source_urls`` of IgBLAST easyconfig ( `#11244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/11244> `_ ) .. _release_notes_eb422: EasyBuild v4.2.2 (July 8th 2020) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for using ``sources`` and ``git_config`` for extensions in ``exts_list`` ( `#3294 <https://github.com/easybuilders/easybuild-framework/pull/3294> `_ ) * add support for software minver template (like ``%(pyminver)s`` , etc.) ( `#3344 <https://github.com/easybuilders/easybuild-framework/pull/3344> `_ , `#3345 <https://github.com/easybuilders/easybuild-framework/pull/3345> `_ ) * add support for updating dictionary or tuple easyconfig parameters with ``self.cfg.update`` ( `#3356 <https://github.com/easybuilders/easybuild-framework/pull/3356> `_ ) * various bug fixes, including: * fix crash in ``--avail-easyconfig-constants`` when using ``--output-format=rst`` + ensure sorted output ( `#3341 <https://github.com/easybuilders/easybuild-framework/pull/3341> `_ ) * always take into account ``builddependencies`` when generating template values, also when we're not iterating over ``builddependencies`` ( `#3346 <https://github.com/easybuilders/easybuild-framework/pull/3346> `_ ) * fix running command as ``easybuild`` user in generated Singularity definition file ( `#3347 <https://github.com/easybuilders/easybuild-framework/pull/3347> `_ ) * allow ignoring ``versionsuffix`` in ``--try-update-deps`` ( `#3350 <https://github.com/easybuilders/easybuild-framework/pull/3350> `_ , `#3353 <https://github.com/easybuilders/easybuild-framework/pull/3353> `_ ) * retain order of paths when generating ``prepend_path`` statements for module file (don't sort them alphabetically) ( `#3367 <https://github.com/easybuilders/easybuild-framework/pull/3367> `_ ) * also put easyblocks used by extensions in ``reprod`` directory ( `#3375 <https://github.com/easybuilders/easybuild-framework/pull/3375> `_ ) * also copy template values in ``EasyConfig.copy`` method to ensure they are defined when installing extensions ( `#3377 <https://github.com/easybuilders/easybuild-framework/pull/3377> `_ ) * skip lines that start with ``module-version`` when determining whether a module exists in ``ModulesTool.exist`` ( `#3379 <https://github.com/easybuilders/easybuild-framework/pull/3379> `_ ) **easyblocks** * 3 new software-specific easyblocks: * LLVM ( `#2065 <https://github.com/easybuilders/easybuild-easyblocks/pull/2065> `_ ), Scipion ( `#1847 <https://github.com/easybuilders/easybuild-easyblocks/pull/1847> `_ ), XALT ( `#1942 <https://github.com/easybuilders/easybuild-easyblocks/pull/1942> `_ ) * minor enhancements, including: * use ``wclean -platform`` instead of ``wcleanPlatform`` for OpenFOAM v2006 & newer ( `#2088 <https://github.com/easybuilders/easybuild-easyblocks/pull/2088> `_ ) * various bug fixes, including: * only build OpenCV with IPP support on x86_64 systems ( `#2056 <https://github.com/easybuilders/easybuild-easyblocks/pull/2056> `_ ) * make sure ``CFLAGS`` and ``MYCFLAGS`` are used in Lua easyblock ( `#2062 <https://github.com/easybuilders/easybuild-easyblocks/pull/2062> `_ ) * also accept ``exist_lic`` as valid value for ``license_file`` in IntelBase easyblock ( `#2067 <https://github.com/easybuilders/easybuild-easyblocks/pull/2067> `_ ) * fix minor bug in shared libs handling and correctly setup SuiteSparse variables in Trilinos easyblock ( `#2071 <https://github.com/easybuilders/easybuild-easyblocks/pull/2071> `_ ) * make sure ``PythonBundle`` uses correct ``python`` command in extensions filter + also add ``lib64/python*/site-packages`` to ``$PYTHONPATH`` (if it exists) ( `#2075 <https://github.com/easybuilders/easybuild-easyblocks/pull/2075> `_ , `#2081 <https://github.com/easybuilders/easybuild-easyblocks/pull/2081> `_ ) * fix build environment for WRF by patching shebang in compile script ( `#2079 <https://github.com/easybuilders/easybuild-easyblocks/pull/2079> `_ ) * fix order of ``intel64/lib`` paths in generated module for impi (and drop ``intel64/lib/release_mt`` ) ( `#2080 <https://github.com/easybuilders/easybuild-easyblocks/pull/2080> `_ ) * set ``$XDG_CACHE_HOME`` to avoid abuse of ``$HOME/.cache/pip`` when installing DOLFIN ( `#2082 <https://github.com/easybuilders/easybuild-easyblocks/pull/2082> `_ ) * make VMD easyblock Python 3 compatible ( `#2083 <https://github.com/easybuilders/easybuild-easyblocks/pull/2083> `_ ) * rename include-fixed subdirectory in GCC installation to avoid problems after OS upgrade ( `#2087 <https://github.com/easybuilders/easybuild-easyblocks/pull/2087> `_ , `#2093 <https://github.com/easybuilders/easybuild-easyblocks/pull/2093> `_ , `#2094 <https://github.com/easybuilders/easybuild-easyblocks/pull/2094> `_ ) * use glob pattern to determine name of Mathematica installation script ( `#2089 <https://github.com/easybuilders/easybuild-easyblocks/pull/2089> `_ ) * use ``mpirun`` for sanity check commands in LAMMPS easyblock ( `#2096 <https://github.com/easybuilders/easybuild-easyblocks/pull/2096> `_ ) **easyconfigs** * added easyconfigs for 2 new toolchains: * golf/2020a ( `#10672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10672> `_ ) * intel/2020.06, based on intel/2020a but with impi 2018 update 5 ( `#10864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10864> `_ ) * added example easyconfig files for 36 new software packages: * AmrPlusPlus ( `#9919 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9919> `_ ), arrow ( `#10882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10882> `_ ), attrdict ( `#10827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10827> `_ ), Cartopy ( `#10685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10685> `_ ), dm-tree ( `#10775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10775> `_ ), dotNET-SDK ( `#10661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10661> `_ ), FLAIR ( `#10860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10860> `_ ), fastqsplitter ( `#10706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10706> `_ ), GLFW ( `#10709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10709> `_ ), git-extras ( `#10440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10440> `_ ), hl7apy ( `#10728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10728> `_ ), hyperopt ( `#10735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10735> `_ ), IgBLAST ( `#10889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10889> `_ ), IntelDAAL ( `#9848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9848> `_ ), ichorCNA ( `#10595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10595> `_ ), MARS ( `#10691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10691> `_ ), MITObim ( `#10897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10897> `_ ), MUST ( `#10849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10849> `_ ), mhcnuggets ( `#9743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9743> `_ ), PAUP ( `#10830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10830> `_ ), Percolator ( `#10665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10665> `_ ), PyBerny ( `#10885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10885> `_ ), poetry ( `#10884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10884> `_ ), pycocotools ( `#10806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10806> `_ ), python-hl7 ( `#10673 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10673> `_ ), SHAPEIT4 ( `#10814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10814> `_ ), SYMPHONY ( `#10058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10058> `_ ), SunPy ( `#10676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10676> `_ ), sdsl-lite ( `#10691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10691> `_ ), TEtranscripts ( `#10909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10909> `_ , `#10921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10921> `_ ), Tombo ( `#10646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10646> `_ ), tensorboardX ( `#10774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10774> `_ ), Unidecode ( `#10828 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10828> `_ ), WHAM ( `#10736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10736> `_ ), XALT ( `#9792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9792> `_ ), Xvfb ( `#10512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10512> `_ ) * added additional easyconfigs for various supported software packages, including: * Armadillo 9.900.1, astropy 4.0.1, BLAST+ 2.10.1, BioPerl 1.7.7, Blitz++ 1.0.2, Bonito 0.2.0, bokeh 2.0.2, CFITSIO 3.48, CGAL 4.14.3, CLHEP 2.4.1.3, cutadapt 2.10, dask 2.18.1, Elk 6.3.2, GATE 9.0, GLM 0.9.9.8, GRASS 7.8.3, Geant4 10.6, geopandas 0.8.0, giflib 5.2.1, HDF5 1.12.0, HISAT2 2.2.0, Hadoop 2.10.0, IPython 7.15.0, inferCNV 1.2.1, Julia 1.4.2, LibSoup 2.70.0, MATIO 1.5.17, MRtrix 3.0.0, Mathematica 12.1.1 MultiQC 1.9, NGS 2.10.5, NiBabel 3.1.0, Nipype 1.4.2, ncbi-vdb 20.10.7, numba 0.50.0, OpenBabel 3.1.1, OpenFOAM v2006, PDT 3.25.1, PRSice 2.3.1, ParaView 5.8.0, ParmEd 3.2.0, PyQt5 5.13.2, Pysam 0.16.0.1, parallel 20200522, plotly.py 4.8.1, pybedtools 0.8.1, ROOT 6.20.04, ReFrame 3.0, Roary 3.13.0, rjags 4-10, rstudio 1.3.959, SPAdes 3.14.1, SRA-Toolkit 2.10.8, Saxon-HE 9.9.1.7, Seaborn 0.10.1, Seurat 3.1.5, SimPEG 0.14.1, Spark 2.4.5, StringTie 2.1.3, scikit-allel 1.2.1, scikit-learn 0.23.1, snpEff 4.3t, Valgrind 3.16.1, VarScan 2.4.4, vsc-mympirun 5.1.0, WebKitGTK+ 2.27.4, wxPython 4.0.7.post2, zarr 2.4.0 * minor enhancements, including: * add extensions to R 4.0.0 easyconfig: drgee + stdReg ( `#10833 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10833> `_ ), copCAR ( `#10911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10911> `_ ), ngspatial ( `#10913 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10913> `_ ), drugCombo ( `#10914 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10914> `_ ) * add extensions to R-bundle-Bioconductor 3.11 easyconfig: BSgenome.Cfamiliaris.UCSC.canFam3 ( `#10840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10840> `_ ), SingleR ( `#10904 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10904> `_ ) * include extra extension and support for MPI in MAFFT v7.453 and v7.470 ( `#10853 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10853> `_ ) * add Array::Transpose to Perl ( `#10878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10878> `_ ) * various bug fixes, including: * fix dependencies and configuration of CoinUtils ecosystem ( `#10450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10450> `_ ) * fix Togl configure patch so that it completely ignores ``TCL_SRC_DIR`` and ``TK_SRC_DIR`` ( `#10662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10662> `_ ) * change Xerces-C++ to official CMakeMake build (fixes missing links to curl) ( `#10664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10664> `_ ) * add ``-fPIC`` to ``toolchainopts`` in easyconfig for Lua 5.3.5 with system toolchain ( `#10671 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10671> `_ ) * remove hardcoded X86 target in LLVM easyconfigs ( `#10677 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10677> `_ ) * switch to https ``homepage`` and ``source_urls`` in libGLU easyconfigs ( `#10686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10686> `_ ) * add patch for h5py 2.10.0 to avoid triggering ``MPI_Init`` at import ( `#10687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10687> `_ ) * add alternative checksum for pkgmaker, doRNG, cobs extension in R 3.6.0 easyconfigs ( `#10692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10692> `_ ) * update UDUNITS ``source_urls`` to https sources ( `#10693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10693> `_ ) * add missing M4 to netCDF-Fortran easyconfigs using 2020a toolchain ( `#10695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10695> `_ , `#10697 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10697> `_ ) * add Rgraphviz patch to R-bundle-Bioconductor easyconfigs ( `#10710 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10710> `_ ) * add M4 builddependency to SuiteSparse 2019b easyconfigs ( `#10720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10720> `_ ) * make sure WHAM is built with correct compiler ( `#10736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10736> `_ ) * define ``MAX_JOBS`` in easyconfigs of PyTorch from v1.1.0 to v1.4.0 ( `#10772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10772> `_ ) * add dm-tree and lz4 as dependencies to Ray v0.8.4 ( `#10775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10775> `_ ) * fix source URL in recent ant easyconfigs ( `#10790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10790> `_ ) * bump versions of GO.gb/org.Hs.eg.db/PFAM.db extensions in Bioconductor 3.11 bundle, since sources for old versions have disappeared ( `#10791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10791> `_ ) * add patch to Armadillo easyconfigs using the foss toolchain to prevent it from picking up MKL if installed system-wide ( `#10812 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10812> `_ ) * add missing kerneltree extension in FLAIR easyconfig ( `#10860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10860> `_ ) * fix source URLs in Eigen 3.2. * (`#10872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10872>`_) and 3.3.* ( `#10869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10869> `_ ) easyconfigs * refer to issue in GitHub repo in configparser patch, since Bitbucket repo is disappearing ( `#10873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10873> `_ ) * switch to github.com source URL for MetaPhlAn ( `#10874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10874> `_ ) * switch to GitHub sources for ScientificPython 2.9.4 ( `#10875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10875> `_ ) * switch to GitHub source URL for HPDBSCAN ( `#10876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10876> `_ ) * download x265 3.2/3.3 sources from ``bitbucket.org/multicoreware/x265_git`` ( `#10905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10905> `_ ) * fix download URL for libatomic in gc 7.6.12 easyconfigs ( `#10915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10915> `_ ) * fix ``sanity_check_paths`` in CFITSIO-3.48-GCCcore-9.3.0.eb easyconfig ( `#10917 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10917> `_ ) * add missing dependencies for geopandas 0.7.0 ( `#10923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10923> `_ ) * other changes: * rename OpenPyXL 2.6.4 easyconfig to openpyxl ( `#10916 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10916> `_ ) .. _release_notes_eb421: EasyBuild v4.2.1 (May 20th 2020) -------------------------------- bugfix/update release **framework** * various enhancements, including: * also mention CPU architecture (x86_64, POWER) in comment for test reports ( `#3281 <https://github.com/easybuilders/easybuild-framework/pull/3281> `_ ) * add support for enhancing existing sanity check in easyconfigs, as opposed to overwriting paths/commands ( `#3288 <https://github.com/easybuilders/easybuild-framework/pull/3288> `_ ) * clean up locks when EasyBuild session is cancelled with a signal like ``SIGTERM`` ( `#3291 <https://github.com/easybuilders/easybuild-framework/pull/3291> `_ , `#3321 <https://github.com/easybuilders/easybuild-framework/pull/3321> `_ ) * add ``find_glob_pattern`` function to ``filetools`` module ( `#3297 <https://github.com/easybuilders/easybuild-framework/pull/3297> `_ ) * add constants for common OS dependencies ( ``OS_PKG_IBVERBS_DEV`` , ``OS_PKG_OPENSSL_DEV`` , ...) ( `#3309 <https://github.com/easybuilders/easybuild-framework/pull/3309> `_ , `#3334 <https://github.com/easybuilders/easybuild-framework/pull/3334> `_ ) * flesh out ``get_mpi_cmd_template`` function from ``Mpi.mpi_cmd_for`` method ( `#3312 <https://github.com/easybuilders/easybuild-framework/pull/3312> `_ ) * add variable ``moddependpaths`` to specify extra ``$MODULEPATH`` entry to consider for loading dependency modules ( `#3324 <https://github.com/easybuilders/easybuild-framework/pull/3324> `_ ) * allow copying of tweaked easyconfigs when using ``--try-*`` with ``--copy-ec`` ( `#3332 <https://github.com/easybuilders/easybuild-framework/pull/3332> `_ ) * various bug fixes, including: * make ``ModulesTool.exist`` more robust w.r.t. module wrappers, aliases, defaults, etc. ( `#3216 <https://github.com/easybuilders/easybuild-framework/pull/3216> `_ , `#3337 <https://github.com/easybuilders/easybuild-framework/pull/3337> `_ ) * clean up rst output of ``--list-toolchains`` ( `#3246 <https://github.com/easybuilders/easybuild-framework/pull/3246> `_ ) * cast CPU arch name provided by archspec to a regular string ( `#3286 <https://github.com/easybuilders/easybuild-framework/pull/3286> `_ ) * get ``pr_title`` and ``pr_descr`` build_options in ``new_pr_from_branch`` instead of ``new_pr`` (and commit_msg in both) ( `#3298 <https://github.com/easybuilders/easybuild-framework/pull/3298> `_ ) * make ``pypi_source_urls`` more robust by using ``HTMLParser`` rather than ``xml.etree.ElementTree`` ( `#3303 <https://github.com/easybuilders/easybuild-framework/pull/3303> `_ , `#3329 <https://github.com/easybuilders/easybuild-framework/pull/3329> `_ ) * fix broken test for ``--include-easyblocks-from-pr`` ( `#3304 <https://github.com/easybuilders/easybuild-framework/pull/3304> `_ ) * don't use ``distutils.dir_util`` in ``copy_dir`` ( `#3310 <https://github.com/easybuilders/easybuild-framework/pull/3310> `_ ) * print trace message for sanity check command before running it ( `#3316 <https://github.com/easybuilders/easybuild-framework/pull/3316> `_ ) * fix problems with processing of easyconfigs using a Cray* toolchain when there are no actual external modules ( `#3319 <https://github.com/easybuilders/easybuild-framework/pull/3319> `_ ) * make ``test_find_eb_script`` more robust in case ``$EB_SCRIPT_PATH`` is already set ( `#3320 <https://github.com/easybuilders/easybuild-framework/pull/3320> `_ ) * fix several small problems with ``--try-update-deps`` (experimental feature) ( `#3325 <https://github.com/easybuilders/easybuild-framework/pull/3325> `_ , `#3326 <https://github.com/easybuilders/easybuild-framework/pull/3326> `_ , `#3330 <https://github.com/easybuilders/easybuild-framework/pull/3330> `_ ) * add ``--disable-job`` in ``eb`` command used in jobs, to prevent infinite job cycle ( `#3328 <https://github.com/easybuilders/easybuild-framework/pull/3328> `_ ) * avoid empty entries in ``$LD_LIBRARY_PATH`` and other path-like environment variables ( `#3333 <https://github.com/easybuilders/easybuild-framework/pull/3333> `_ ) * other changes: * fix code style issues in ``easybuild.tools`` + add ``flake8`` linting test ( `#3282 <https://github.com/easybuilders/easybuild-framework/pull/3282> `_ ) * introduce ``contextmanager`` for disabling templating and reduce resolving errors ( `#3287 <https://github.com/easybuilders/easybuild-framework/pull/3287> `_ ) * add ``change_into_dir`` named argument to ``extract_file`` + print deprecation warning if it's not specified ( `#3292 <https://github.com/easybuilders/easybuild-framework/pull/3292> `_ ) * improve ``install_eb_dep.sh`` script to install EasyBuild dependencies in CI environment ( `#3314 <https://github.com/easybuilders/easybuild-framework/pull/3314> `_ ) **easyblocks** * add generic easyblock for installing Go packages: ``GoPackage`` ( `#2042 <https://github.com/easybuilders/easybuild-easyblocks/pull/2042> `_ ) * minor enhancements, including: * update ``config.guess`` for all R packages, required installing R + extensions on Linux/POWER systems ( `#1949 <https://github.com/easybuilders/easybuild-easyblocks/pull/1949> `_ ) * add support for ``preinstallopts`` and install in subdirectory to ``Tarball`` generic easyblock ( `#1989 <https://github.com/easybuilders/easybuild-easyblocks/pull/1989> `_ , `#2049 <https://github.com/easybuilders/easybuild-easyblocks/pull/2049> `_ ) * rewrite ``GROMACS`` easyblock to install all four variations (single/double precision, with/without MPI) in the same directory ( `#1991 <https://github.com/easybuilders/easybuild-easyblocks/pull/1991> `_ ) * add custom ``subdir_version`` easyconfig parameter for FLUENT ( `#2021 <https://github.com/easybuilders/easybuild-easyblocks/pull/2021> `_ ) * use updated ``config.guess`` in ``GCC`` easyblock ( `#2033 <https://github.com/easybuilders/easybuild-easyblocks/pull/2033> `_ , `#2059 <https://github.com/easybuilders/easybuild-easyblocks/pull/2059> `_ ) * add extra question pattern to support installing CPLEX 12.10 ( `#2038 <https://github.com/easybuilders/easybuild-easyblocks/pull/2038> `_ ) * add support for building NWChem on top of external GlobalArrays + also define ``$LAPACK_LIB`` (required for NWChem 7.x) ( `#2043 <https://github.com/easybuilders/easybuild-easyblocks/pull/2043> `_ ) * execute minimal test in sanity check commands in ``impi`` easyblock ( `#2045 <https://github.com/easybuilders/easybuild-easyblocks/pull/2045> `_ ) * update for ``MotionCor2`` easyblock for v1.3.1 ( `#2046 <https://github.com/easybuilders/easybuild-easyblocks/pull/2046> `_ ) * fixes + enhancements for ``PETSc`` easyblock ( `#2048 <https://github.com/easybuilders/easybuild-easyblocks/pull/2048> `_ ) * various bug fixes, including: * use correct version in ``ELPA`` preprocessor flag used for QuantumESPRESSO v6.x ( `#2027 <https://github.com/easybuilders/easybuild-easyblocks/pull/2027> `_ ) * generically find the arch folder and add top-level bin/lib symlinks in ``PDT`` & ``TAU`` easyblocks ( `#2029 <https://github.com/easybuilders/easybuild-easyblocks/pull/2029> `_ ) * fix typo in ``LAMMPS`` easyblock preventing disabling the ``USER-INTEL`` package via ``configopts`` ( `#2031 <https://github.com/easybuilders/easybuild-easyblocks/pull/2031> `_ ) * let ``CMakeMake`` remove ``easybuild_obj`` build directory if it already exists ( `#2032 <https://github.com/easybuilders/easybuild-easyblocks/pull/2032> `_ ) * include own lib dir in ``RPATH`` before system lib dirs in ``binutils`` easyblock ( `#2044 <https://github.com/easybuilders/easybuild-easyblocks/pull/2044> `_ ) * clean ``$CPATH`` before building ROOT to avoid clash between external LLVM loaded as a dependency and internal LLVM used by ROOT ( `#2047 <https://github.com/easybuilders/easybuild-easyblocks/pull/2047> `_ ) * don't let ``extract_file`` change directory in various easyblocks ( `#2051 <https://github.com/easybuilders/easybuild-easyblocks/pull/2051> `_ ) * make ``postinstallcmds`` available to Mathematica easyconfigs + add bin/Executables to ``$PATH`` ( `#2052 <https://github.com/easybuilders/easybuild-easyblocks/pull/2052> `_ ) * fix the extra dirs added to PATH in ``FreeSurfer`` easyblock ( `#2053 <https://github.com/easybuilders/easybuild-easyblocks/pull/2053> `_ ) * correct download url for test data in ``WPS`` easyblock ( `#2055 <https://github.com/easybuilders/easybuild-easyblocks/pull/2055> `_ ) * fix typo in warning in ``TensorFlow`` easyblock ( `#2057 <https://github.com/easybuilders/easybuild-easyblocks/pull/2057> `_ ) * fix failing sanity check under ``--module-only`` in ``GCC`` easyblock ( `#2059 <https://github.com/easybuilders/easybuild-easyblocks/pull/2059> `_ ) * other changes: * add configure options for CubeLib/CubeWriter dependencies in ``Score-P`` easyblock ( `#2030 <https://github.com/easybuilders/easybuild-easyblocks/pull/2030> `_ ) * remove local ``find_glob_pattern`` in ``Blender`` & ``ROOT`` easyblocks, use function provided by ``filetools`` instead ( `#2037 <https://github.com/easybuilders/easybuild-easyblocks/pull/2037> `_ ) **easyconfigs** * added easyconfigs for new common toolchains: foss/2020a ( `#10483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10483> `_ , `#10492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10492> `_ ), intel/2020a ( `#10494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10494> `_ ) * added example easyconfig files for 66 new software packages: * Alpha ( `#9994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9994> `_ ), antiSMASH ( `#10589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10589> `_ ), Arlequin ( `#10620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10620> `_ ), artic-ncov2019 ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), augur ( `#10405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10405> `_ ), AutoMap ( `#10419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10419> `_ ), Bio-EUtilities ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ), CaSpER ( `#10593 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10593> `_ ), cdbfasta ( `#10547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10547> `_ ), cddlib ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ), CoCoALib ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ) dftd3-lib ( `#10351 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10351> `_ ), DoubletFinder ( `#10603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10603> `_ ), E-ANTIC ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ), FastViromeExplorer ( `#10571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10571> `_ ), FIX ( `#8870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8870> `_ ), FusionCatcher ( `#10134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10134> `_ ), geopandas ( `#10322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10322> `_ ), goalign ( `#10469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10469> `_ ), gotree ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), gretl ( `#10413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10413> `_ ), harmony ( `#10604 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10604> `_ ), HDF-EOS ( `#10534 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10534> `_ ), HDF-EOS5 ( `#10536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10536> `_ ), HMMER2 ( `#10588 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10588> `_ ), HyPo ( `#10642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10642> `_ ), king ( `#10365 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10365> `_ ), libdeflate ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), libfabric ( `#10616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10616> `_ ), libgit2 ( `#10453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10453> `_ ), libuv ( `#10444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10444> `_ ), mbuffer ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ), MDAnalysis ( `#10545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10545> `_ ), MEM ( `#10605 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10605> `_ ), MESS ( `#10597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10597> `_ ), metaerg ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ), MinCED ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ), MitoZ ( `#7735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7735> `_ ), nauty ( `#10429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10429> `_ ), nifti2dicom ( `#10598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10598> `_ ), NLMpy ( `#10029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10029> `_ ), ntCard ( `#10502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10502> `_ ), NTL ( `#10431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10431> `_ ), pIRS ( `#10508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10508> `_ ), popscle ( `#10550 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10550> `_ ), ProtHint ( `#10549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10549> `_ ), protozero ( `#10495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10495> `_ ), pysndfx ( `#10452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10452> `_ ), PyVCF ( `#10564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10564> `_ ), PyWavelets ( `#10501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10501> `_ ), rampart ( `#10459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10459> `_ ), rickflow ( `#10641 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10641> `_ ), RNA-Bloom ( `#10502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10502> `_ ), root_numpy ( `#10424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10424> `_ ), rstudio ( `#10619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10619> `_ ), ScaFaCoS ( `#10537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10537> `_ ), Scythe ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ), SDSL ( `#10642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10642> `_ ), SHAP ( `#10379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10379> `_ ), SNPomatic ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ), SoX ( `#10452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10452> `_ ), swissknife ( `#10037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10037> `_ ),) Taiyaki ( `#10573 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10573> `_ ), TCLAP ( `#10598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10598> `_ ), torchaudio ( `#10516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10516> `_ ), wtdbg2 ( `#10524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10524> `_ ) * added additional easyconfigs for various supported software packages, including: * ADF 2019.303, BRAKER 2.1.5, Bazel 2.0.0, Bonito 0.1.4, Boost.Python 1.72.0, Bowtie2 2.4.1, CMake 3.16.4, CPLEX 12.10, CVXOPT 1.2.4, Coreutils 8.32, cURL 7.69.1, DFTB+ 19.1, ecCodes 2.17.0, expat 2.2.9, FFmpeg 4.2.2, FriBidi 1.0.9, GATK 4.1.5.0, GCC(core) 10.1.0, GDAL 3.0.4, GEOS 3.8.1, GLib 2.64.1, GMP 6.2.0, GROMACS 2020.1, GTK+ 3.24.17, GenomeThreader 1.7.3, GffCompare 0.11.6, Ghostscript 9.52, GlimmerHMM 3.0.4c, GlobalArrays 5.7.2, gmpy2 2.1.0b4, gmsh 4.5.6, gpustat 0.6.0, gradunwarp 1.2.0, HDF5 1.10.6, hwloc 2.2.0, hypothesis 5.6.0, ICU 66.1, IPython 7.13.0, ImageMagick 7.0.10, Julia 1.4.1, KMC 3.1.2rc1, Kraken2 2.0.9, LMfit 1.0.0, Longshot 0.4.1, libarchive 3.4.2, libffcall 2.2, libffi 3.3, libgd 2.3.0, libjpeg-turbo 2.0.4, librsvg 2.48.4, libsigsegv 2.12, lrslib 7.0a, MEME 5.1.1, MPC 1.1.0, Mako 1.1.2, Mesa 20.0.2, Meson 0.53.2, MotionCor2 1.3.1, MultiQC 1.8, matplotlib 3.2.1, NGS-Python-2.10.4, NGS 2.10.4, NSPR 4.25, NSS 3.51, NWChem 7.0.0, Nextflow 20.04.1, Ninja 1.10.0, Normaliz 3.7.4, nanopolish 0.13.1, ncbi-vdb 2.10.4 netCDF 4.7.4, OpenBLAS 0.3.9, OpenEXR 2.4.1, OpenMPI 4.0.3, OpenSSL 1.1.1e, openpyxl 3.0.3, PAPI 6.0.0, PCRE 8.44, PCRE2 10.34, PLUMED 2.6.0, PMIx 3.1.5, PROJ 7.0.0, Perl 5.30.2, Pillow 7.0.0, PyYAML 5.3, Python 2.7.18 + 3.8.2, parallel 20200422, Qt5 5.14.1, R-bundle-Bioconductor 3.11, R 3.6.3 + 4.0.0, RMBlast 2.9.0, Racon 1.4.13, Ray 0.8.4, Rust 1.42.0, re2c 1.3, rioxarray 0.0.24, rootpy 1.0.1, rstudio 1.2.5042, SCons 3.1.2, SDL2 2.0.10, SIONlib 1.7.6, SQLite 3.31.1, SRA-Toolkit 2.10.4, Salmon 1.2.0, ScaLAPACK 2.1.0, SciPy-bundle 2020.03, Stacks 2.53, StringTie 2.1.1, SuiteSparse 5.7.1, snappy 1.1.8, spaln 2.4.03, sympy 1.5.1, Tcl 8.6.10, TensorFlow 2.2.0, Tk 8.6.10, Tkinter 3.8.2, tbl2asn 20200302, torchvision 0.5.0, UCX 1.8.0, UMI-tools 1.0.1, utf8proc 2.5.0, util-linux 2.35, worker 1.6.12, wxWidgets 3.1.3, X11 20200222, XZ 5.2.5, x264 20191217, x265 3.3, zsh 5.8, zstd 1.4.4 * minor enhancements, including: * add additional extensions for recent versions of R ( `#10359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10359> `_ , `#10585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10585> `_ , `#10586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10586> `_ , `#10621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10621> `_ ) and R-bundle-Bioconductor ( `#10585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10585> `_ , `#10596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10596> `_ , `#10621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10621> `_ ) * add additional extensions for recent versions of Perl ( `#10412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10412> `_ , `#10546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10546> `_ , `#10623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10623> `_ ) * include LLVM linker in Clang 7.0.1 on GCC 7.3.0-2.30( `#10458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10458> `_ ) * include static lib and header in nimimap2 easyconfigs for foss-2018b and GCC-8.2.0* ( `#10464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10464> `_ ) * add alternate checksum for EMBOSS ( `#10607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10607> `_ ) * various bug fixes, including: * fix incorrect checksums for Amber patches ( `#8870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8870> `_ ) * add patches to fix installation of R 3.6.2 on POWER ( `#9830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9830> `_ ) * add missing build dep. pkg-config in GObject-Introspection 1.63.1 w/ Python 3.7.4 easyconfig ( `#10380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10380> `_ ) * add Perl as a build dependency for recent Autoconf/Automake easyconfigs ( `#10408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10408> `_ , `#10426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10426> `_ ) * fix source_urls in ICU easyconfigs ( `#10417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10417> `_ ) * disable ``USER-INTEL`` package in LAMMPS easyconfigs using intel/2019b, since it results in an installation that produces incorrect results ( `#10418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10418> `_ ) * fix undefined reference to ``qfloat16::mantissatable`` in Qt5-5.13.1-GCCcore-8.3.0 ( `#10425 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10425> `_ ) * get rid of double '-' in versionsuffix of torchtext easyconfig ( `#10472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10472> `_ ) * fix broken Mako easyconfigs ( `#10480 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10480> `_ , `#10627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10627> `_ ) * move builddependencies to dependencies in OTF2 and Score-P easyconfigs ( `#10496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10496> `_ ) * add missing cURL dep for LAMMPS ( `#10527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10527> `_ ) * add Python 2 build dependency for OpenPGM ( `#10539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10539> `_ ) * use ``OS_PKG_IBVERBS_DEV`` constant for OS dependency in PyTorch 1.4.0 easyconfigs ( `#10540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10540> `_ ) * add missing Bison build dep in Graphviz easyconfigs ( `#10541 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10541> `_ ) * use https in homepage for Mathematica 12.0.0 + clean up sanity check commands (now done by easyblock) ( `#10559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10559> `_ ) * add missing PyVCF dependency for BAMSurgeon ( `#10564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10564> `_ ) * remove FFTW dependencies from LAMMPS easyconfigs, no longer needed (MKL can be used too now) ( `#10565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10565> `_ ) * fix ITK v5.0.1 easyconfig w.r.t. locale and location of libjpeg-turbo library ( `#10592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10592> `_ ) * add patch to fix missing ``const`` qualifiers for ncurses ( `#10606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10606> `_ ) * fix OS dependency for rstudio for Debian-based systems ( `#10608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10608> `_ ) * fix Rmath paths in easyconfig for FastQTL v2.184 ( `#10612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10612> `_ ) * add symlink for Arlequin commands + fix sanity check commands ( `#10620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10620> `_ ) * fix recent binutils easyconfigs using system toolchain for Fedora 32 / GCC 10 ( `#10633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10633> `_ ) * replace '/path/to' with actual installation prefix in FuSeq scripts ( `#10640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10640> `_ ) * other changes: * check sdist with different Python versions in CI ( `#10388 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10388> `_ ) * use Bison 3.3.2 as build dep for flex 2.6.4 ( `#10403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10403> `_ ) * mention ``http://`` Pfam website rather than ``ftp://`` in load message of BiG-SCAPE easyconfig ( `#10439 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10439> `_ ) * archive old Singularity configs ( `#10591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10591> `_ ) * Singularity is not well suited to install via EasyBuild because it requires admin privileges to enable setuid * stop using old hpcugent URL for cloning framework/easyblocks repos in CI ( `#10635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10635> `_ ) * use ``SYSTEM`` constant for toolchain in easyconfigs already use ``system`` toolchain ( `#10638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10638> `_ ) .. _release_notes_eb420: EasyBuild v4.2.0 (April 14th 2020) ---------------------------------- feature release **framework** * add support for ``--try-update-deps`` (experimental feature), to upgrade dependencies based on available easyconfigs ( `#2599 <https://github.com/easybuilders/easybuild-framework/pull/2599> `_ ) * adding locking to prevent two parallel builds of the same installation directory ( `#3009 <https://github.com/easybuilders/easybuild-framework/pull/3009> `_ ) * for more information, see https://easybuild.readthedocs.io/en/latest/Locks.html * significantly speed up ``-D/--dry-run`` by avoiding useless ' ``module show`` ' ( `#3203 <https://github.com/easybuilders/easybuild-framework/pull/3203> `_ ) * add support for creating an index & using it when searching for easyconfigs ( `#3210 <https://github.com/easybuilders/easybuild-framework/pull/3210> `_ ) * for more information, see https://easybuild.readthedocs.io/en/latest/Easyconfigs_index.html * additional GitHub integration features: * add support for targeting easyblocks and framework repositories in ``--new-pr`` ( `#1876 <https://github.com/easybuilders/easybuild-framework/pull/1876> `_ , `#3189 <https://github.com/easybuilders/easybuild-framework/pull/3189> `_ ) * add support for ``--include-easyblocks-from-pr`` ( `#3206 <https://github.com/easybuilders/easybuild-framework/pull/3206> `_ ) * for more information, https://easybuild.readthedocs.io/en/latest/Integration_with_GitHub.html * various other enhancements, including: * add a contrib/hooks dir with some examples of hooks used ( `#2777 <https://github.com/easybuilders/easybuild-framework/pull/2777> `_ ) * also mention working directory + input passed via stdin (if any) in trace output of ``run_cmd`` ( `#3168 <https://github.com/easybuilders/easybuild-framework/pull/3168> `_ ) * probe external modules for missing metadata that is not provided via extermal module metadata file ( `#3174 <https://github.com/easybuilders/easybuild-framework/pull/3174> `_ ) * also update ``$CMAKE_PREFIX_PATH`` and ``$CMAKE_LIBRARY_PATH`` in generated module file ( `#3176 <https://github.com/easybuilders/easybuild-framework/pull/3176> `_ ) * optionally call ``log.warning`` in ``print_warning`` ( `#3195 <https://github.com/easybuilders/easybuild-framework/pull/3195> `_ ) * add an option to ``git_config`` to retain the ``.git`` directory ( `#3197 <https://github.com/easybuilders/easybuild-framework/pull/3197> `_ ) * allow use of ``SYSTEM`` as ``--try-toolchain`` option ( `#3213 <https://github.com/easybuilders/easybuild-framework/pull/3213> `_ ) * mention CPU arch name in comment for uploaded test report, if it's known by ``archspec`` ( `#3227 <https://github.com/easybuilders/easybuild-framework/pull/3227> `_ ) * make ``--merge-pr`` take into account ``--pr-target-branch`` ( `#3236 <https://github.com/easybuilders/easybuild-framework/pull/3236> `_ ) * make ``--check-contrib`` print a warning when ``None`` is used for checksums ( `#3244 <https://github.com/easybuilders/easybuild-framework/pull/3244> `_ ) * update ``install-EasyBuild-develop.sh`` script and create script for 2020a merge sprint ( `#3245 <https://github.com/easybuilders/easybuild-framework/pull/3245> `_ ) * add template for ``mpi_cmd_prefix`` ( `#3264 <https://github.com/easybuilders/easybuild-framework/pull/3264> `_ ) * update ``copy_dir`` to include option to merge directories ( `#3270 <https://github.com/easybuilders/easybuild-framework/pull/3270> `_ ) * support template name for CUDA version ( `#3274 <https://github.com/easybuilders/easybuild-framework/pull/3274> `_ ) * various bug fixes, including: * use correct module for ``errors_found_in_log`` ( `#3119 <https://github.com/easybuilders/easybuild-framework/pull/3119> `_ ) * fix ``EasyConfig.update`` code to handle both strings and lists as input ( `#3170 <https://github.com/easybuilders/easybuild-framework/pull/3170> `_ ) * fix removing temporary branch on ``--check-github`` ( `#3182 <https://github.com/easybuilders/easybuild-framework/pull/3182> `_ ) * fix shebang even if first line doesn't start with ' ``#!`` ' ( `#3183 <https://github.com/easybuilders/easybuild-framework/pull/3183> `_ ) * make bootstrap script work with Python 3 ( `#3186 <https://github.com/easybuilders/easybuild-framework/pull/3186> `_ ) * read patch files as bytestring to avoid ``UnicodeDecodeError`` for patches that include funky characters ( `#3191 <https://github.com/easybuilders/easybuild-framework/pull/3191> `_ ) * fix online check in ``--check-github`` : try repeatedly and with different URLs to cater for HTTP issues ( `#3194 <https://github.com/easybuilders/easybuild-framework/pull/3194> `_ ) * don't crash when GitPython is not installed when using Python 3 ( `#3198 <https://github.com/easybuilders/easybuild-framework/pull/3198> `_ ) * fix ``os_name_map`` for RHEL8 ( `#3201 <https://github.com/easybuilders/easybuild-framework/pull/3201> `_ ) * don't add shebang to binary files ( `#3208 <https://github.com/easybuilders/easybuild-framework/pull/3208> `_ ) * use ``checkout@v2`` in GitHub Actions to fix broken re-triggered tests ( `#3219 <https://github.com/easybuilders/easybuild-framework/pull/3219> `_ ) * don't filter out ``None`` values in to_checksums, leave them in place ( `#3225 <https://github.com/easybuilders/easybuild-framework/pull/3225> `_ ) * fix defining of ``$MPI_INC_*`` and ``$MPI_LIB_*`` environment variables for impi version 2019 and later ( `#3229 <https://github.com/easybuilders/easybuild-framework/pull/3229> `_ ) * use correct target account/repo when creating test report & posting comment in PR ( `#3234 <https://github.com/easybuilders/easybuild-framework/pull/3234> `_ ) * reorganize ``EasyBlock.extensions_step`` to ensure correct filtering of extensions ( `#3235 <https://github.com/easybuilders/easybuild-framework/pull/3235> `_ ) * also support ``%(installdir)s`` and ``%(builddir)s`` templates for extensions ( `#3237 <https://github.com/easybuilders/easybuild-framework/pull/3237> `_ ) * unset ``$GITHUB_TOKEN`` in Travis after installing token, to avoid failing ``test_from_pr_token_log`` ( `#3252 <https://github.com/easybuilders/easybuild-framework/pull/3252> `_ ) * fix reporting when skipping extensions ( `#3254 <https://github.com/easybuilders/easybuild-framework/pull/3254> `_ ) * avoid API rate limit errors on online check in ``--check-github`` ( `#3257 <https://github.com/easybuilders/easybuild-framework/pull/3257> `_ ) * show easyconfig filenames for parallel build ( `#3258 <https://github.com/easybuilders/easybuild-framework/pull/3258> `_ ) * make ``EasyConfig.dump`` aware of toolchain hierarchy, to avoid hardcoded subtoolchains in dependencies easyconfig parameters ( `#3261 <https://github.com/easybuilders/easybuild-framework/pull/3261> `_ ) * fix use of ``--copy-ec`` with a single argument, assume copy to current working directory ( `#3262 <https://github.com/easybuilders/easybuild-framework/pull/3262> `_ ) * fix posting of comment in PR with ``--upload-test-report`` ( `#3272 <https://github.com/easybuilders/easybuild-framework/pull/3272> `_ ) * take into account dependencies marked as external modules when composing template values like ``%(pyver)s`` ( `#3273 <https://github.com/easybuilders/easybuild-framework/pull/3273> `_ ) * other changes: * increase timeout & use ``api.github.com`` for connectivity check in ``check_github`` ( `#3192 <https://github.com/easybuilders/easybuild-framework/pull/3192> `_ ) * restore ``flake8`` default ignores ( `#3193 <https://github.com/easybuilders/easybuild-framework/pull/3193> `_ ) * enable tracking of test suite coverage using coveralls ( `#3204 <https://github.com/easybuilders/easybuild-framework/pull/3204> `_ ) * make tests use ``easybuilders/testrepository`` rather than ``hpcugent/testrepository`` after it was moved ( `#3238 <https://github.com/easybuilders/easybuild-framework/pull/3238> `_ ) * improve raised error in ``remove_dir`` and deprecate ``rmtree2`` ( `#3228 <https://github.com/easybuilders/easybuild-framework/pull/3228> `_ ) **easyblocks** * 7 new software-specific easyblocks: * BerkeleyGW ( `#1951 <https://github.com/easybuilders/easybuild-easyblocks/pull/1951> `_ ), CMake ( `#1936 <https://github.com/easybuilders/easybuild-easyblocks/pull/1936> `_ ), ELSI ( `#1883 <https://github.com/easybuilders/easybuild-easyblocks/pull/1883> `_ ), LAMMPS ( `#1964 <https://github.com/easybuilders/easybuild-easyblocks/pull/1964> `_ , `#1975 <https://github.com/easybuilders/easybuild-easyblocks/pull/1975> `_ , `#1978 <https://github.com/easybuilders/easybuild-easyblocks/pull/1978> `_ , `#1982 <https://github.com/easybuilders/easybuild-easyblocks/pull/1982> `_ , `#1997 <https://github.com/easybuilders/easybuild-easyblocks/pull/1997> `_ ), libdrm ( `#1983 <https://github.com/easybuilders/easybuild-easyblocks/pull/1983> `_ ), Mesa ( `#1892 <https://github.com/easybuilders/easybuild-easyblocks/pull/1892> `_ , `#2006 <https://github.com/easybuilders/easybuild-easyblocks/pull/2006> `_ ), SEPP ( `#1998 <https://github.com/easybuilders/easybuild-easyblocks/pull/1998> `_ ) * minor enhancements, including: * make ParMETIS easyblock compatible with custom ``configopts`` ( `#1774 <https://github.com/easybuilders/easybuild-easyblocks/pull/1774> `_ ) * update Trinity easyblock for v2.9.0 ( `#1906 <https://github.com/easybuilders/easybuild-easyblocks/pull/1906> `_ ) * disable ROCM and Android workspace explicitly in TensorFlow easyblock ( `#1944 <https://github.com/easybuilders/easybuild-easyblocks/pull/1944> `_ ) * update QuantumESPRESSO easyblock for version 6.5 ( `#1947 <https://github.com/easybuilders/easybuild-easyblocks/pull/1947> `_ ) * update Siesta easyblock to support MaX-1.0 release ( `#1954 <https://github.com/easybuilders/easybuild-easyblocks/pull/1954> `_ ) * update Ferret easyblock for versions >= 7.5.0 ( `#1956 <https://github.com/easybuilders/easybuild-easyblocks/pull/1956> `_ ) * update XCrySDen easyblock to support Togl dependency ( `#1959 <https://github.com/easybuilders/easybuild-easyblocks/pull/1959> `_ ) * pass value for ``TARGET`` specified in ``buildopts`` to ``testopts`` and ``installopts`` in OpenBLAS easyblock ( `#1960 <https://github.com/easybuilders/easybuild-easyblocks/pull/1960> `_ ) * fix netCDF(-Fortran) support in Siesta easyblock ( `#1967 <https://github.com/easybuilders/easybuild-easyblocks/pull/1967> `_ , 1971) * add ``NCDF_PARALLEL`` and METIS support to Siesta easyblock ( `#1973 <https://github.com/easybuilders/easybuild-easyblocks/pull/1973> `_ ) * add support for ``use_pip_extras`` custom easyconfig parameter in ``PythonPackage`` easyblock ( `#1980 <https://github.com/easybuilders/easybuild-easyblocks/pull/1980> `_ ) * update Open Babel easyblock for version 3.0.0 ( `#1992 <https://github.com/easybuilders/easybuild-easyblocks/pull/1992> `_ ) * allow differing names for TensorFlow wheel ( `#1995 <https://github.com/easybuilders/easybuild-easyblocks/pull/1995> `_ ) * make MATLAB runtime available from MATLAB ( `#2008 <https://github.com/easybuilders/easybuild-easyblocks/pull/2008> `_ ) * various bug fixes, including: * fix linking of Hypre to external BLAS/LAPACK + support building (only) static/shared library ( `#1885 <https://github.com/easybuilders/easybuild-easyblocks/pull/1885> `_ ) * fix MPI-CXX dependency of PETSc ( `#1917 <https://github.com/easybuilders/easybuild-easyblocks/pull/1917> `_ ) * limit amount of parallelism in TensorFlow easyblock ( `#1934 <https://github.com/easybuilders/easybuild-easyblocks/pull/1934> `_ ) * support GCCcore and gcc4.8 (if that dir exists) in function ``get_tbb_gccprefix`` in tbb easyblock ( `#1943 <https://github.com/easybuilders/easybuild-easyblocks/pull/1943> `_ ) * restore default ``flake8`` warnings ( `#1950 <https://github.com/easybuilders/easybuild-easyblocks/pull/1950> `_ ) * remove tests from ``build_step`` and raise error on failed tests in OpenBLAS easyblock ( `#1952 <https://github.com/easybuilders/easybuild-easyblocks/pull/1952> `_ , `#1955 <https://github.com/easybuilders/easybuild-easyblocks/pull/1955> `_ , `#1962 <https://github.com/easybuilders/easybuild-easyblocks/pull/1962> `_ ) * add optional ``runtest`` to the catch for ``FATAL ERRORS`` to OpenBLAS easyblock ( `#1958 <https://github.com/easybuilders/easybuild-easyblocks/pull/1958> `_ ) * ensure right ' ``python`` ' command is used to determine Python lib dir when system Python is used with PythonBundle easyblock ( `#1961 <https://github.com/easybuilders/easybuild-easyblocks/pull/1961> `_ ) * make sure ``lib/python*/lib-dynload`` exists in Python installation ( `#1966 <https://github.com/easybuilders/easybuild-easyblocks/pull/1966> `_ ) * in version 6.0 of TensorRT, ``libnvinfer.a`` is renamed ``libnvinfer_static.a`` ( `#1970 <https://github.com/easybuilders/easybuild-easyblocks/pull/1970> `_ ) * handle ``configopts`` without configure args in CMake easyblock ( `#1974 <https://github.com/easybuilders/easybuild-easyblocks/pull/1974> `_ ) * use ``checkout@v2`` in GitHub Actions to fix broken re-triggered tests ( `#1976 <https://github.com/easybuilders/easybuild-easyblocks/pull/1976> `_ ) * don't insist that pylibdir always exists in OpenCV easyblock ( `#1977 <https://github.com/easybuilders/easybuild-easyblocks/pull/1977> `_ ) * also set ``$TRINITY_HOME`` environment variable in Trinity easyblock ( `#1979 <https://github.com/easybuilders/easybuild-easyblocks/pull/1979> `_ ) * fix sanity check for OpenFOAM-Extend >= 4.1 ( `#1981 <https://github.com/easybuilders/easybuild-easyblocks/pull/1981> `_ ) * fix pattern matching in regex subst for ``I_MPI_ROOT`` in impi easyblock ( `#1986 <https://github.com/easybuilders/easybuild-easyblocks/pull/1986> `_ ) * use ``remove_dir`` instead of deprecated ``rmtree2`` in various easyblocks ( `#1993 <https://github.com/easybuilders/easybuild-easyblocks/pull/1993> `_ ) * fix \" ``AttributeError: module 'git' has no attribute 'Git'`` \" that may occur when using Python 3 ( `#1994 <https://github.com/easybuilders/easybuild-easyblocks/pull/1994> `_ ) * don't sanity check for ``QtWebEngine`` in Qt easyblock when building for POWER ( `#2000 <https://github.com/easybuilders/easybuild-easyblocks/pull/2000> `_ ) * fix installation of TensorFlow in some environments, by setting ``$PYTHONNOUSERSITE`` (& more) ( `#2002 <https://github.com/easybuilders/easybuild-easyblocks/pull/2002> `_ , `#2020 <https://github.com/easybuilders/easybuild-easyblocks/pull/2020> `_ ) * make sure libxml2 is built with XZ provided as dependency ( `#2005 <https://github.com/easybuilders/easybuild-easyblocks/pull/2005> `_ ) * look for Python version directories with suffixes in ROOT easyblock ( `#2010 <https://github.com/easybuilders/easybuild-easyblocks/pull/2010> `_ ) * enable TK, FLTK and OPENGL configure options in VMD easyblock ( `#2013 <https://github.com/easybuilders/easybuild-easyblocks/pull/2013> `_ ) * update the contributing docs ( `#2014 <https://github.com/easybuilders/easybuild-easyblocks/pull/2014> `_ ) * fix numexpr easyblock to allow (correctly) installing it as extension ( `#2022 <https://github.com/easybuilders/easybuild-easyblocks/pull/2022> `_ ) * other changes: * simplify various CMakeMake-based easyblocks by enhancing ``CMakeMake`` (w.r.t. ``CMAKE_BUILD_TYPE`` , shared vs static libs, ``-fPIC`` ) ( `#1929 <https://github.com/easybuilders/easybuild-easyblocks/pull/1929> `_ ) * enable out of tree build by default in ``CMakeMake`` easyblock ( `#1933 <https://github.com/easybuilders/easybuild-easyblocks/pull/1933> `_ ) * force building Clang without CUDA when it is not found as a proper dependency ( `#1968 <https://github.com/easybuilders/easybuild-easyblocks/pull/1968> `_ ) **easyconfigs** * added example easyconfig files for 114 new software packages: * ABRA2 ( `#10272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10272> `_ ), ABRicate ( `#10310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10310> `_ ), ADIOS ( `#10036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10036> `_ ), aNCI ( `#9929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9929> `_ ), any2fasta ( `#10310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10310> `_ ), apex ( `#10269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10269> `_ ), archspec ( `#9898 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9898> `_ ), ArviZ ( `#10366 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10366> `_ ), autopep8 ( `#9626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9626> `_ ), BAMSurgeon ( `#10330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10330> `_ ), BatMeth2 ( `#10323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10323> `_ ), BiG-SCAPE ( `#10352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10352> `_ ), BinSanity ( `#10001 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10001> `_ ), Bonito ( `#10269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10269> `_ ), BSMAPz ( `#10283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10283> `_ ), BSseeker2 ( `#10039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10039> `_ ), BUStools ( `#9838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9838> `_ ), Cbc ( `#10052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10052> `_ ), Cgl ( `#10048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10048> `_ ), CGmapTools ( `#10288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10288> `_ ), Clp ( `#10033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10033> `_ ), CoinUtils ( `#9937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9937> `_ ), dtcwt ( `#9695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9695> `_ ), ELSI ( `#9857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9857> `_ ), EnsEMBLCoreAPI ( `#8734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8734> `_ ), fastq-pair ( `#9894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9894> `_ ), FigureGen ( `#10076 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10076> `_ ), Fiona ( `#10321 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10321> `_ ), FuSeq ( `#10004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10004> `_ ), GenomeTools ( `#9797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9797> `_ ), GraphMap2 ( `#10299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10299> `_ ), GRASP ( `#9896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9896> `_ ), Groovy ( `#9809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9809> `_ ), gsport ( `#9821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9821> `_ ), gubbins ( `#9689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9689> `_ ), igv-reports ( `#9977 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9977> `_ ), inferCNV ( `#9686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9686> `_ ), iVar ( `#10291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10291> `_ ), joypy ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), JupyterLab ( `#9752 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9752> `_ ), kma ( `#10259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10259> `_ ), LAMMPS ( `#10371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10371> `_ ), lancet ( `#10271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10271> `_ ), libBigWig ( `#10006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10006> `_ ), libGridXC ( `#9858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9858> `_ ), libPSML ( `#5859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5859> `_ ), LtrDetector ( `#10343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10343> `_ ), manta ( `#5104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5104> `_ ), medImgProc ( `#10228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10228> `_ ), MedPy ( `#9748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9748> `_ ), Mini-XML ( `#10036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10036> `_ ), mkl_fft ( `#9887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9887> `_ ), Monocle3 ( `#9825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9825> `_ ), MoreRONN ( `#10255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10255> `_ ), motionSegmentation ( `#10228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10228> `_ ), NanoComp ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), NanoFilt ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), nanoget ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), nanomath ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), NanoPlot ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), ngspice ( `#9922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9922> `_ ), ntEdit ( `#9836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9836> `_ ), ntHits ( `#9833 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9833> `_ ), occt ( `#9939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9939> `_ ), OCNet ( `#9955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9955> `_ ), OpenAI-Gym ( `#10347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10347> `_ ), OpenPIV ( `#9959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9959> `_ ), OpenPyXL ( `#10115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10115> `_ ), orca ( `#9518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9518> `_ ), Osi ( `#10361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10361> `_ ), PartitionFinder ( `#9983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9983> `_ ), pauvre ( `#10212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10212> `_ ), polymake ( `#9904 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9904> `_ ), pretty-yaml ( `#10041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10041> `_ )), PRSice ( `#9988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9988> `_ ), pycodestyle ( `#9626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9626> `_ ), pydot ( `#9899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9899> `_ ), pygraphviz ( `#9969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9969> `_ ), pylift ( `#10051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10051> `_ ), PyMC3 ( `#10279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10279> `_ ), pyparsing ( `#9983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9983> `_ ), PyRe ( `#10095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10095> `_ ), python-weka-wrapper3 ( `#9704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9704> `_ ), PyTorch-Geometric ( `#9995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9995> `_ ), qcat ( `#10244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10244> `_ ), RAxML-NG ( `#9990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9990> `_ ), Ray ( `#10302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10302> `_ ), rclone ( `#7934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7934> `_ ), Red ( `#9856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9856> `_ ), rstanarm ( `#9964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9964> `_ ), scikit-build ( `#9762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9762> `_ ), scVelo ( `#9805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9805> `_ ), SECAPR ( `#9721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9721> `_ ), segmentation-models ( `#10211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10211> `_ ), SentencePiece ( `#10192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10192> `_ ), SEPP ( `#10047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10047> `_ ), Shapely ( `#10309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10309> `_ ), Singular ( `#10030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10030> `_ ), SLATEC ( `#7529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7529> `_ ), spatialreg ( `#9767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9767> `_ ), split-seq ( `#9749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9749> `_ ), spoa ( `#9705 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9705> `_ ), SSN ( `#9955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9955> `_ ), STEAK ( `#10337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10337> `_ ), stpipeline ( `#9736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9736> `_ ), SVG ( `#9905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9905> `_ ), Togl ( `#9868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9868> `_ ), torchtext ( `#10193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10193> `_ ), units ( `#9682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9682> `_ ), UQTk ( `#10279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10279> `_ ), WildMagic ( `#10044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10044> `_ ), Winnowmap ( `#10005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10005> `_ ), xtb ( `#9993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9993> `_ ), Zip ( `#9972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9972> `_ ) * added additional easyconfigs for various supported software packages, including: * ABySS 2.1.5, Arrow 0.16.0, BCFtools 1.10.2, BEDTools 2.29.2, BUSCO 4.0.5, BerkeleyGW 2.1.0, binutils 2.34, CVXPY 1.0.28, CharLS 2.1.0, CheckM 1.1.2, Clang 10.0.0, CppUnit 1.15.1, canu 1.9, cutadapt 2.8, DIAMOND 0.9.30, davix 0.7.5, ELPA 2019.11.001, FastANI 1.3, FastQC 0.11.9, Ferret 7.5.0, GATK 4.1.4.1, GCCcore 9.3.0, GDB 9.1, GMAP-GSNAP-2019-09-12, GObject-Introspection 1.63.1, GPAW 20.1.0, GROMACS 2020, GTDB-Tk 1.0.2, GTK+ 3.24.13, Go 1.14.1, Gradle 6.1.1, GraphicsMagick 1.3.34, Graphviz 2.42.2, Gurobi 9.0.1, gSOAP 2.8.100, gnuplot 5.2.8, gtest 1.10.0, HDDM 0.7.5, HTSlib 1.10.2, HarfBuzz 2.6.4, Horovod 0.19.1, Hypre 2.18.2, IGV 2.8.0, IQ-TREE 1.6.12, IRkernel 1.1, iccifort 2020.0.166, igraph 0.8.0, impi 2019.6.166, ispc 1.12.0, Java 13(.0.2), Julia 1.4.0, Keras 2.3.1, Kraken2 2.0.8-beta, kim-api 2.1.3, LAST 1045, LASTZ 1.04.03, LLVM 9.0.1 + 10.0.0, LMfit 0.9.14, LS-PrePost 4.7.8, likwid 5.0.1, MAFFT 7.453, MATLAB 2019b, MMseqs2 10, Maven 3.6.3, Meson 0.53.1, MethylDackel 0.5.0, Mono 6.8.0.105, medaka 0.12.0, Nextflow 20.01.0, ncdf4 1.17, netcdf4-python 1.5.3, nodejs 12.16.1, numba 0.47.0, numexpr 2.7.1, Octave 5.1.0, OpenBLAS 0.3.8, OpenBabel 3.0.0, OpenCV 4.2.0, OpenFOAM-Extend 4.1-20191120, OrthoFinder 2.3.11, PETSc 3.12.4, PGI 19.10, PMIx 2.2.1, Pango 1.44.7, PyTables 3.6.1, PyTorch 1.4.0, parasail 2.4.1, pydicom 1.4.2, pyproj 2.4.2, Qhull 2019.1, QuantumESPRESSO 6.5, R-bundle-Bioconductor 3.10, RDKit 2019.09.3 Racon 1.4.10, ReFrame 2.21, Ruby 2.7.1, rjags 4-9, rpy2 3.2.6, SLEPc 3.12.2, SPAdes 3.14.0, SPAdes 3.14.0, STAR-Fusion 1.8.1, STAR 2.7.3a, Seaborn 0.10.0, SeqAn 1.4.2, Seurat 3.1.2, SimpleElastix 1.1.0, SimpleITK 1.2.4, Stacks 2.5, Stata 16, StringTie 2.1.0, scikit-optimize 0.7.4, statsmodels 0.11.0, TensorFlow 1.15.2 + 2.0.1, Tkinter 2.7.16, Trim_Galore 0.6.5, Trimmomatic 0.39, Trinity 2.10.0, tbb 2020.2, tqdm 4.41.1, XCrySDen 1.6.2, XGBoost 0.90, xarray 0.15.1, xmlf90 1.5.4 * minor enhancements, including: * add easyconfig for Java 11.0.6 on ``ppc64le`` and alter the Java 11 wrapper to support both x86_64 and ppc64le ( `#9371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9371> `_ ) * add additional extensions for R: ``HiddenMarkov`` ( `#9685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9685> `_ ), ``lmerTest`` ( `#9853 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9853> `_ ), ``VSURF`` + ``Rborist`` ( `#10355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10355> `_ ) * change Mesa 19.1.7 + 19.2.1 easyconfigs to use custom easyblock for Mesa ( `#9764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9764> `_ ) * build shared libs and install header files for Ghostscript ( `#9785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9785> `_ ) * add MUMPS as dependency in PETSc 3.12.4 easyconfigs ( `#9880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9880> `_ , `#9891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9891> `_ ) * add Perl extensions: ``Term::ReadLine::Gnu`` ( `#9901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9901> `_ ), ``URI::Escape`` and ``Set::IntervalTree`` ( `#10049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10049> `_ ) * add dat directory to aNCI ( `#9929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9929> `_ ) * add patch to create a symlink from ``libsvm.so.$(SHVER)`` to ``libsvm.so`` in LIBSVM easyconfigs ( `#10045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10045> `_ ) * build SUNDIALS with ' ``pic`` ' ( `#10278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10278> `_ ) * add ``BSgenome.Hsapiens.UCSC.hg38`` + ``MEDIPS`` extensions to R-bundle-Bioconductor v3.10 ( `#10298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10298> `_ ) * fix checksums for ``mkl-dnn`` and ``tbb`` extensions (moved to oneAPI repo) in PyTorch easyconfigs ( `#10367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10367> `_ ) * update ``Java/1.8`` wrapper to ``Java/1.8.0_241.eb`` ( `#10305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10305> `_ ) * various bug fixes, including: * use CMake for building double-conversion ( `#9659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9659> `_ ) * update recent libdrm easyconfigs to use custom easyblock & avoid hardcoded x86-specific sanity check ( `#9694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9694> `_ ) * add alternate checksum for OpenMolcas 18.09 ( `#9701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9701> `_ ) * use Github to download releases for MariaDB-connector-c ( `#9702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9702> `_ ) * add ``-DOMPI_SKIP_MPICXX`` in ``configopts`` for MathGL, to avoid using mpicxx during build ( `#9703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9703> `_ ) * make installing independent of build folder in pybind11 easyconfig ( `#9738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9738> `_ ) * add Lua as a dependency to gnuplot ( `#9773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9773> `_ ) * stick to ``http://`` source URLS for ISL in GCCcore easyconfigs, since ``https://`` doesn't work ( `#9784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9784> `_ ) * add alternative checksums for ``farver`` / ``fracdiff`` / ``pkgmaker`` / ``rngtools`` / ``doRNG`` / ``cobs`` extensions in R 3.6.2 easyconfigs ( `#9789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9789> `_ ) * add patch for OpenBLAS 0.3.4 w/ GCC/8.2.0-2.31.1 to fix broken tests ( `#9865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9865> `_ ) * revert removal of AVX512 vmovd with 64-bit operands in binutils 2.32 easyconfigs ( `#9866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9866> `_ ) * fix inline asm in dscal: mark x, x1 as clobbered, in OpenBLAS 0.3.8 ( `#9867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9867> `_ ) * add missing ``sanity_check_commands`` to cutadapt v1.18 and v2.7 easyconfigs ( `#9869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9869> `_ ) * don't overwrite ``configopts`` in BLAST+ easyconfigs, append to it ( `#9875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9875> `_ ) * add alternate checksum for ``LaplacesDemon`` in R 3.6.x easyconfigs ( `#9879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9879> `_ , `#10382 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10382> `_ ) * fix redefining of preconfigopts in OpenCV easyconfigs ( `#9895 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9895> `_ ) * use symlinks for terminfo files instead of hard links in ncurses 6.1 easyconfigs ( `#9912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9912> `_ ) * fix NCIPLOT build flags ( `#9915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9915> `_ ) * add missing patch to iccifort libxc easyconfigs ( `#9918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9918> `_ ) * use ``checkout@v2`` in GitHub Actions to fix broken re-triggered tests ( `#9925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9925> `_ ) * re-enable building utils in Siesta 4.1-MaX-1.0 release ( `#9936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9936> `_ ) * fix homepage and source URLs in SLEPc easyconfigs by using https ( `#9943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9943> `_ ) * fix source URLs for rgeos after source tarball was moved to CRAN archive ( `#9954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9954> `_ ) * add dependencies on Python 3 and SciPy-bundle in Trinity v2.9.1 easyconfig ( `#9957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9957> `_ ) * patch GCC ``lisanitizer`` for glibc 2.31 ( `#9966 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9966> `_ ) * add Zip as build dependency for recent Bazel versions ( `#9972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9972> `_ ) * fix checksums in Jellyfish v2.3.0 easyconfigs ( `#9997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9997> `_ ) * fix source URLs for ParMGridGen easyconfigs ( `#10019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10019> `_ ) * disable unintended Octave support in all libsndfile easyconfigs ( `#10027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10027> `_ ) * fix sources for LS-PrePost 4.6 ( `#10236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10236> `_ ) * security update for vsc-mympirun 4.1.9 ( `#10185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10185> `_ ) * configure libwebp to also install ``libwebpmux`` ( `#10274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10274> `_ ) * ensure that CVS easyconfigs are included in source tarball produced by ' ``python setup.py sdist`` ' ( `#10326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10326> `_ ) * fix undefined reference error due to libxc 4.3.4 built with CMake ( `#10356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10356> `_ ) * fix source_urls for tbb: use (new) official ' ``oneapi-src`` ' GitHub repository ( `#10361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10361> `_ ) * update checksums and homepage in tbb easyconfigs ( `#10285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10285> `_ ) * other changes: * use new custom easyblock in recent CMake easyconfigs ( `#9871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9871> `_ , `#9923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9923> `_ ) * add check for redefined easyconfig parameters in easyconfig tests ( `#9876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9876> `_ ) * use M4-1.4.18.eb for test installation in easyconfigs test suite ( `#9926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9926> `_ ) * use ``https://`` in ``homepage`` / ``source_urls`` of ``zlib-1.2.11.eb`` ( `#10018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10018> `_ ) * add ``-GCCcore-9.2.0`` versionsuffix for ``intel/2020.00`` components ( `#10083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10083> `_ ) * add checksum of new tbb 2019_U9 source tarball, next to original one + update homepage ( `#10237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10237> `_ ) * add comment informing about manually setting Gallium drivers in easyconfigs for Mesa v19.1.7 and v19.2.1 ( `#10276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/10276> `_ ) .. _release_notes_eb412: EasyBuild v4.1.2 (March 16th 2020) ---------------------------------- bugfix release .. note :: This release includes a bug fix for the leaking of your GitHub token in the EasyBuild (debug) log file. **We strongly encourage that you revoke the GitHub tokens you are using currently, via** https://github.com/settings/tokens, **and to replace them using a new token (using** ``eb --install-github-token --force`` **).** More information in https://github.com/easybuilders/easybuild-framework/pull/3248 . **framework** * fix gitdb dependency on Python 2.6 in test configuration ( `#3212 <https://github.com/easybuilders/easybuild-framework/pull/3212> `_ ) * fix broken test for --review-pr by using different PR to test with ( `#3226 <https://github.com/easybuilders/easybuild-framework/pull/3226> `_ ) * censor authorization part of headers before logging ReST API request ( `#3248 <https://github.com/easybuilders/easybuild-framework/pull/3248> `_ ) **easyblocks** *(no changes)* **easyconfigs** *(no changes)* .. _release_notes_eb411: EasyBuild v4.1.1 (January 16th 2020) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add ``check_log_for_errors`` function (in ``easybuild.tools.run`` ) to detect and handle multiple errors ( `#3118 <https://github.com/easybuilders/easybuild-framework/pull/3118> `_ ) * implement support for ``eb --show-ec`` to show contents of specified easyconfig file ( `#3132 <https://github.com/easybuilders/easybuild-framework/pull/3132> `_ ) * also update ``$XDG_DATA_DIR`` (share/) and ``$GI_TYPELIB_PATH`` environment variables (lib */girepository-* ) in generated module files ( `#3133 <https://github.com/easybuilders/easybuild-framework/pull/3133> `_ ) * add support for ``--copy-ec`` to copy easyconfig file to specified location ( `#3142 <https://github.com/easybuilders/easybuild-framework/pull/3142> `_ ) * mention ``--disable-*`` option in ``--help`` output for boolean options enabled by default ( `#3151 <https://github.com/easybuilders/easybuild-framework/pull/3151> `_ ) * add ``--cuda-compute-capabilities`` configuration option ( `#3161 <https://github.com/easybuilders/easybuild-framework/pull/3161> `_ ) * various bug fixes, including: * ignore imports from ``vsc`` namespace made from pkgutil.py ( `#3120 <https://github.com/easybuilders/easybuild-framework/pull/3120> `_ ) * only actually change permissions using ``os.chmod`` in ``adjust_permissions`` if the current permissions are not correct already ( `#3125 <https://github.com/easybuilders/easybuild-framework/pull/3125> `_ ) * use ``shutil.copyfile`` to just copy file contents if target path exists and is owned by someone else ( `#3127 <https://github.com/easybuilders/easybuild-framework/pull/3127> `_ ) * fix or avoid warnings that commonly arise in build log ( `#3129 <https://github.com/easybuilders/easybuild-framework/pull/3129> `_ ) * disable buffering in ``asyncprocess.Popen`` using ``bufsize=0`` , to fix ``run_cmd_qa`` missing output ( `#3130 <https://github.com/easybuilders/easybuild-framework/pull/3130> `_ ) * update pip & install wheel package in generated Singularity container recipes ( `#3136 <https://github.com/easybuilders/easybuild-framework/pull/3136> `_ ) * avoid crash in ``modify_env`` & unset ``unset_env_vars`` when using (older versions) of Python 3.5 & 3.6 by using ``list(...)`` ( `#3140 <https://github.com/easybuilders/easybuild-framework/pull/3140> `_ ) * take into account that lib64 could be a symlink to lib (or vice versa) in ``get_software_libdir`` function ( `#3141 <https://github.com/easybuilders/easybuild-framework/pull/3141> `_ ) * only parse docstring if it exists in ``gen_easyblock_doc_section_rst`` function ( `#3144 <https://github.com/easybuilders/easybuild-framework/pull/3144> `_ ) * only add useful entries for ``$CPATH`` , ``$(LD_)LIBRARY_PATH`` and ``$PATH`` (non-empty directories) ( `#3145 <https://github.com/easybuilders/easybuild-framework/pull/3145> `_ , `#3152 <https://github.com/easybuilders/easybuild-framework/pull/3152> `_ ) * fix ``--list-software=detailed`` when using Python 3 by leveraging ``sort_looseversions`` function from ``py2vs3`` module ( `#3146 <https://github.com/easybuilders/easybuild-framework/pull/3146> `_ ) * ensure subdirectories in software install directory have correct search (exec) permission ( `#3147 <https://github.com/easybuilders/easybuild-framework/pull/3147> `_ ) * take into account that a checksum value may be a tuple of valid checksum in ``EasyBlock.check_checksums`` ( `#3153 <https://github.com/easybuilders/easybuild-framework/pull/3153> `_ ) * other changes: * bump to Lmod 8.2.9 in GitHub CI config ( `#3115 <https://github.com/easybuilders/easybuild-framework/pull/3115> `_ ) * update copyright statements for 2020 ( `#3149 <https://github.com/easybuilders/easybuild-framework/pull/3149> `_ ) * make Hound CI code style checker ignore \"Black would make changes\" produced by flake8-black ( `#3162 <https://github.com/easybuilders/easybuild-framework/pull/3162> `_ ) **easyblocks** * new software-specific easyblock for cryptography (to fix missing ``-pthread`` for all versions) ( `#1874 <https://github.com/easybuilders/easybuild-easyblocks/pull/1874> `_ ) * minor enhancements, including: * update WPS easyblock for v3.6 & newer ( `#1315 <https://github.com/easybuilders/easybuild-easyblocks/pull/1315> `_ ) * update FSL easyblock to support FSL v6.0.2 & newer ( `#1860 <https://github.com/easybuilders/easybuild-easyblocks/pull/1860> `_ ) * add ``setup_cmake_env`` function in CMakeMake easyblock which can be leveraged in other easyblocks, and use it for OpenFOAM ( `#1869 <https://github.com/easybuilders/easybuild-easyblocks/pull/1869> `_ ) * remove obsolete configure options for Python + build with optimizations/LTO enabled for recent Python versions ( `#1876 <https://github.com/easybuilders/easybuild-easyblocks/pull/1876> `_ ) * update WPS easyblock for recent versions: set ``$WRF_DIR`` to point to location of WRF installation ( `#1886 <https://github.com/easybuilders/easybuild-easyblocks/pull/1886> `_ ) * make sure ``$LIBLAPACK_MT`` is set before using it in ESMF easyblock ( `#1887 <https://github.com/easybuilders/easybuild-easyblocks/pull/1887> `_ ) * remove useless ``PATH`` entries + add ``PKG_CONFIG_PATH`` in imkl easyblock ( `#1900 <https://github.com/easybuilders/easybuild-easyblocks/pull/1900> `_ ) * enhance tbb easyblock to support building on POWER ( `#1912 <https://github.com/easybuilders/easybuild-easyblocks/pull/1912> `_ ) * enhance TensorFlow easyblock to pick up on ``--cuda-compute-capabilities`` , and issue a warning if no CUDA compute capabilities are specified ( `#1913 <https://github.com/easybuilders/easybuild-easyblocks/pull/1913> `_ ) * add custom easyconfig parameter ``build_type`` to generic CMakeMake easyblock ( `#1915 <https://github.com/easybuilders/easybuild-easyblocks/pull/1915> `_ , `#1922 <https://github.com/easybuilders/easybuild-easyblocks/pull/1922> `_ ) * various bug fixes, including: * fix for conda packages that rely on particular versions of Python ( `#1836 <https://github.com/easybuilders/easybuild-easyblocks/pull/1836> `_ ) * fix path for intel and netCDF lib directories in NCL easyblock ( `#1862 <https://github.com/easybuilders/easybuild-easyblocks/pull/1862> `_ ) * fix CUDA 10.1 installation on POWER ( `#1871 <https://github.com/easybuilders/easybuild-easyblocks/pull/1871> `_ ) * change Bazel easyblock to prefer using Java dependency rather than included JDK (fix for POWER9) ( `#1875 <https://github.com/easybuilders/easybuild-easyblocks/pull/1875> `_ ) * remove optarch warning in GROMACS for Cray toolchains ( `#1879 <https://github.com/easybuilders/easybuild-easyblocks/pull/1879> `_ ) * also fix ``$WM_COMPILE_OPTION`` in OpenFOAM rc scripts to make debug builds work correctly ( `#1880 <https://github.com/easybuilders/easybuild-easyblocks/pull/1880> `_ ) * limit MPI ranks used for running WRF test cases to max. 4 + include contents of rsl.error.0000 output file in case test failed ( `#1884 <https://github.com/easybuilders/easybuild-easyblocks/pull/1884> `_ ) * update ``$PYTHONPATH`` + add ``python -c 'import mrtrix3'`` as sanity check command for recent MRtrix versions ( `#1889 <https://github.com/easybuilders/easybuild-easyblocks/pull/1889> `_ ) * update sanity check in SAMtools easyblock for version 1.10 ( `#1890 <https://github.com/easybuilders/easybuild-easyblocks/pull/1890> `_ ) * make sure ``$PYTHONNOUSERSITE`` it set when performing sanity check for (bundles of) Python package(s) ( `#1891 <https://github.com/easybuilders/easybuild-easyblocks/pull/1891> `_ ) * fix install dir subdir for WPS v4.0+ that is considered for ``$PATH`` and ``$LD_LIBRARY_PATH`` ( `#1895 <https://github.com/easybuilders/easybuild-easyblocks/pull/1895> `_ ) * impi: don't rebuild libfabric if the source code is not present ( `#1896 <https://github.com/easybuilders/easybuild-easyblocks/pull/1896> `_ ) * also copy component patches to self.cfg in Bundle generic easyblock ( `#1897 <https://github.com/easybuilders/easybuild-easyblocks/pull/1897> `_ ) * skip patch step in Bundle generic easyblock (per-component patches are still applied) ( `#1898 <https://github.com/easybuilders/easybuild-easyblocks/pull/1898> `_ ) * derive easyblock for iccifort only from icc easyblock (not ifort), to avoid adding include subdir to ``$CPATH`` ( `#1899 <https://github.com/easybuilders/easybuild-easyblocks/pull/1899> `_ ) * add ``export LANG=C`` to preinstallopts instead of install_script path in CUDA easyblock ( `#1902 <https://github.com/easybuilders/easybuild-easyblocks/pull/1902> `_ ) * stop setting updating ``$CPATH`` and ``$LIBRARY_PATH`` for GCC and GCCcore, not required ( `#1903 <https://github.com/easybuilders/easybuild-easyblocks/pull/1903> `_ ) * remove ``$LIBRARY_PATH`` entries in iccifort easyblock, already known to icc et al ( `#1904 <https://github.com/easybuilders/easybuild-easyblocks/pull/1904> `_ ) * use major/minor version of Python command being used if ``req_py_majver`` / ``req_py_minver`` are not specified ( `#1907 <https://github.com/easybuilders/easybuild-easyblocks/pull/1907> `_ ) * define ``$EB_PYTHON`` in module for EasyBuild installation, to make sure correct Python version is used at runtime ( `#1908 <https://github.com/easybuilders/easybuild-easyblocks/pull/1908> `_ ) * fix Python easyblock to allow configuring build of Python v3.8 ( ``Setup.dist`` script was renamed to ``Setup`` ) ( `#1909 <https://github.com/easybuilders/easybuild-easyblocks/pull/1909> `_ ) * fix netCDF easyblock for version 4.4.0 ( `#1911 <https://github.com/easybuilders/easybuild-easyblocks/pull/1911> `_ ) * correct comment about when we set ``RUNPARALLEL`` in HDF5 easyblock ( `#1914 <https://github.com/easybuilders/easybuild-easyblocks/pull/1914> `_ ) * do not sanity check on MATLAB compiler, since it requires a separate license ( `#1916 <https://github.com/easybuilders/easybuild-easyblocks/pull/1916> `_ ) * build HDF5 without MPI C++ extension to avoid breaking linkage for C software that requires HDF5 ( `#1918 <https://github.com/easybuilders/easybuild-easyblocks/pull/1918> `_ , `#1919 <https://github.com/easybuilders/easybuild-easyblocks/pull/1919> `_ ) * override ``set_pylibdirs`` method in ``VersionIndependentPythonPackage`` to hard set ``self.pylibdir`` to 'lib' ( `#1924 <https://github.com/easybuilders/easybuild-easyblocks/pull/1924> `_ ) * other changes: * increase timeout for interactive installation command in CUDA easyblock to 1000 sec. ( `#1878 <https://github.com/easybuilders/easybuild-easyblocks/pull/1878> `_ ) * disable running of ``sudo apt-get update`` in GitHub CI config, since it's failing (and we don't really need it) ( `#1882 <https://github.com/easybuilders/easybuild-easyblocks/pull/1882> `_ ) * stop requiring Python dep for SWIG, just configure with ``--without-python`` if Python is not a dependency ( `#1894 <https://github.com/easybuilders/easybuild-easyblocks/pull/1894> `_ ) * update copyright statements for 2020 ( `#1905 <https://github.com/easybuilders/easybuild-easyblocks/pull/1905> `_ ) * make Hound CI code style checker ignore \"Black would make changes\" produced by flake8-black ( `#1923 <https://github.com/easybuilders/easybuild-easyblocks/pull/1923> `_ ) **easyconfigs** * added example easyconfig files for 27 new software packages: * Autoconf-archive ( `#9658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9658> `_ ), breseq ( `#9603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9603> `_ ), CrossMap ( `#9483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9483> `_ ), CSBDeep ( `#9560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9560> `_ ), CNT-ILP ( `#9323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9323> `_ ), cytoolz ( `#9453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9453> `_ ), Faber ( `#9553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9553> `_ ), Fiji ( `#8748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8748> `_ ), GARLI ( `#9404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9404> `_ ), Globus-CLI ( `#9565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9565> `_ ), GtkSourceView ( `#9526 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9526> `_ ), gradunwarp ( `#9648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9648> `_ ), gsettings-desktop-schemas ( `#9529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9529> `_ ), HyPhy ( `#9405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9405> `_ ), horton ( `#7449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7449> `_ ), IGMPlot ( `#9438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9438> `_ ), LEMON ( `#9323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9323> `_ ), Meld ( `#9530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9530> `_ ), mhcflurry ( `#9554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9554> `_ ), NCIPLOT ( `#9419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9419> `_ ), ncl ( `#9632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9632> `_ ), OpenSlide ( `#9499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9499> `_ ), openslide-python ( `#9499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9499> `_ ), pythran ( `#9488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9488> `_ , `#9594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9594> `_ ), Qualimap ( `#9411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9411> `_ ), TinyDB ( `#9555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9555> `_ ), TreeShrink ( `#9381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9381> `_ ) * added additional easyconfigs for various supported software packages, including: * Beast 1.10.4, Boost.Python 1.71.0, Clang 9.0.1, ESMF 8.0.0, FSL 6.0.3, fastp 0.20.0, freeglut 3.2.1, GDAL 3.0.2, GEOS 3.8.0, GROMACS 2019.4, GSL 2.6, hwloc 2.1.0, Jellyfish 2.3.0, Julia 1.3.1, LibTIFF 4.1.0, libxml2 2.9.10, lxml 4.4.2, Mothur 1.43.0, mayavi 4.7.1, molmod 1.4.5, netCDF-C++4 4.3.1, netCDF-Fortran 4.5.2, numactl 2.0.13, OpenFOAM 7, OpenFOAM v1912, OpenMM 7.4.1, OpenMPI 4.0.2, PLUMED 2.5.3, PROJ 6.2.1, plotly.py 4.4.1, pocl 1.4, QuickFF 2.2.4, R 3.6.2 w/ foss/2019b and fosscuda/2019b, ReFrame 2.20, SAMtools 1.10, SUNDIALS 5.1.0, SWIG 4.0.1, Salmon 1.0.0, SuiteSparse 5.6.0, snakemake 5.7.1, TensorFlow 2.1.0 w/ fosscuda/2019b, torchvision 0.4.2, WPS 4.1, WRF 4.1.3 * added easyconfigs for ``intel/2020.00`` toolchain ( `#9575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9575> `_ ) * minor enhancements, including: * add POWER9 support to CUDA 10.1 easyconfigs ( `#9442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9442> `_ ) * build CMake in parallel ( `#9543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9543> `_ ) * use NCCL for GPU ops in Horovod 0.18.2 easyconfig ( `#9562 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9562> `_ ) * update Java/1.8 wrapper to Java/1.8.0_231 (for x86_64) ( `#9585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9585> `_ ) * various bug fixes, including: * fix remote launch of broker and workers for SCOOP ( `#9366 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9366> `_ ) * fix failing RPATH sanity check for NCL 6.6.2 due to missing dependencies (+ add easyconfig using ``foss/2018b`` ) ( `#9388 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9388> `_ ) * add missing 'wheel' extensions to Spark 2.4.0 easyconfig using ``intel/2018b`` toolchain ( `#9424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9424> `_ ) * add missing OS dependencies in Java 1.8 easyconfig used on POWER systems ( `#9454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9454> `_ ) * fix build of recent Bazel versions on Power9 + stick to Java/1.8 as dependency ( `#9455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9455> `_ ) * fix CMake 3.15.3 build on Power (+ enable building in parallel) ( `#9469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9469> `_ ) * fix source URLs in xorg-macros easyconfigs ( `#9477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9477> `_ , `#9578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9578> `_ ) * add missing wcwidth extension to Python 2.7.15 + 2.7.16 easyconfigs & enable 'pip check' in sanity check ( `#9479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9479> `_ ) * remove (wrong) ``GI_TYPELIB_PATH`` and ``XDG_DATA_DIRS`` in various easyconfigs ( `#9528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9528> `_ , `#9577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9577> `_ , `#9615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9615> `_ ) * use xorg-macros as dependency in X11 easyconfigs (rather than installing it as a bundle component) ( `#9546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9546> `_ ) * fix lpsymphony extension for R-bundle-Bioconductor ( `#9548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9548> `_ ) * add correct 'old-versions' source URL to all Mesa easyconfigs ( `#9569 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9569> `_ ) * add missing SHA256 checksums for Armadillo ( `#9572 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9572> `_ ) * also define ``$AUGUSTUS_BIN_PATH`` and ``$AUGUSTUS_SCRIPTS_PATH`` in generated module file for AUGUSTUS ( `#9579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9579> `_ ) * add SSL OS dependencies for GDAL 3.0.0 ( `#9586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9586> `_ ) * add missing jupyter_contrib_core extension for IPython 7.7.0+ + consistently include jupyter_nbextensions_configurator extension ( `#9587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9587> `_ ) * patch libcxx (Clang 8.0.0) on pcc64le for incomplete IBM128 long double in GCC ( `#9590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9590> `_ ) * patch for GCCcore 8.2.0 to fix '__float128 is not supported on this target' on ppc64le ( `#9591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9591> `_ ) * fix broken easyconfigs for cyvcf2 v0.11.5 by adding missing 'monotonic' extension ( `#9601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9601> `_ ) * use absolute path for extraction to allow relocating the build dir for g2log-1.0 ( `#9604 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9604> `_ ) * add alternate SHA256 checksum for kallisto-0.43.1 after re-release under same version without code changes ( `#9611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9611> `_ ) * add additional valid checksum for MASS 7.3-51.4 extension in R 3.6.0 easyconfigs ( `#9621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9621> `_ ) * update ctffind website ( `#9622 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9622> `_ ) * make sure we use easybuild Clang in pocl easyconfigs ( `#9624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9624> `_ ) * make ``postinstallcmds`` independent of current working directory in OpenCV 3.1.0 easyconfigs ( `#9628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9628> `_ ) * update ``source_urls`` to include old releases folder in libsodium easyconfigs ( `#9632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9632> `_ ) * fix source URLs for ant v1.10.5 - v1.10.7 ( `#9633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9633> `_ ) * update URLs to new location of libxc ( `#9635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9635> `_ ) * add alternate SHA256 checksum for rda_1.0.2-2.1 extension in R 3.6.0 ( `#9644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9644> `_ ) * update source URLs in QCA 2.1.0 easyconfigs ( `#9647 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9647> `_ ) * fix Python 3.5.1 easyconfig: bitstring 3.1.3 sources no longer available on PyPI ( `#9649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9649> `_ ) * fix tesseract 4.1.0 dependencies ( `#9650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9650> `_ ) * make ICU 64.2 depend on Python3 instead of Python 2, to avoid picking up system Python 3.x ( `#9652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9652> `_ ) * use ``True`` (boolean value) rather than ``'True'`` (string value) for boolean easyconfig parameters ( `#9657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9657> `_ ) * fix pyfits easyconfig by adding missing d2to1 extension ( `#9687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9687> `_ ) * other changes: * disable running of ``sudo apt-get update`` in GitHub CI config, since it's failing (and we don't really need it) ( `#9492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9492> `_ ) * require that ``sanity_pip_check`` is enabled in new/changed easyconfigs ( `#9516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9516> `_ , `#9576 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9576> `_ ) * update copyright statements for 2020 ( `#9598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9598> `_ ) * allow missing '-Python-*' versionsuffix for existing easyconfig files changed in PRs ( `#9634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9634> `_ ) .. _release_notes_eb410: EasyBuild v4.1.0 (December 4th 2019) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * performance improvements: * skip validation when copying EasyConfig object for extension ( `#3071 <https://github.com/easybuilders/easybuild-framework/pull/3071> `_ ) * correctly specify that ActiveMNS & co are singleton classes when using Python 3 ( `#3073 <https://github.com/easybuilders/easybuild-framework/pull/3073> `_ ) * don't call out to prohibitively expensive ``getRootLoggerName`` in ``getLogger`` , just use 'root' instead ( `#3074 <https://github.com/easybuilders/easybuild-framework/pull/3074> `_ ) * fix inconsistent module path usage that leads to repeated reloading in HMNS ( `#3099 <https://github.com/easybuilders/easybuild-framework/pull/3099> `_ ) * add support for specifying different dependency version based on processor architecture ( `#3047 <https://github.com/easybuilders/easybuild-framework/pull/3047> `_ ) * support use of glob patterns for paths to files with external modules metadata ( `#3075 <https://github.com/easybuilders/easybuild-framework/pull/3075> `_ ) * take into account that external modules may not be visible directly (due to module hierarchy) ( `#3083 <https://github.com/easybuilders/easybuild-framework/pull/3083> `_ ) * add support for including 'extensions' statement in Lua modules with Lmod 8.2.8+ ( `#3085 <https://github.com/easybuilders/easybuild-framework/pull/3085> `_ , `#3107 <https://github.com/easybuilders/easybuild-framework/pull/3107> `_ , `#3110 <https://github.com/easybuilders/easybuild-framework/pull/3110> `_ ) * add support for ``--sync-pr-with-develop`` ( `#3087 <https://github.com/easybuilders/easybuild-framework/pull/3087> `_ ) * add support for ``--new-branch-github`` , ``--new-pr-from-branch`` , ``--sync-branch-with-develop`` , ``--update-branch-github`` ( `#3103 <https://github.com/easybuilders/easybuild-framework/pull/3103> `_ ) * fix typo in docstring for ``new_branch_github`` ( `#3106 <https://github.com/easybuilders/easybuild-framework/pull/3106> `_ ) * various bug fixes, including: * correctly handle ``iccifortcuda`` toolchain with standalone ``iccifort`` in ``det_toolchain_compilers`` ( `#3055 <https://github.com/easybuilders/easybuild-framework/pull/3055> `_ ) * init git repo with ``git.repo.clone()`` instead of ``copy_dir()`` ( `#3062 <https://github.com/easybuilders/easybuild-framework/pull/3062> `_ ) * fix regular expression so depends-on statements are recognized correctly in Tcl module files ( `#3065 <https://github.com/easybuilders/easybuild-framework/pull/3065> `_ ) * update GitPython to latest version that supports Python 2.6 in requirements.txt to fix broken ``test_new_update_pr`` ( `#3066 <https://github.com/easybuilders/easybuild-framework/pull/3066> `_ ) * imply ``--disable-pre-create-installdir`` with ``--inject-checksums`` ( `#3069 <https://github.com/easybuilders/easybuild-framework/pull/3069> `_ ) * handle patches in extensions more like normal patches ( `#3067 <https://github.com/easybuilders/easybuild-framework/pull/3067> `_ ) * take into account that ``platform.linux_distribution`` and ``platform.dist`` was removed in Python 3.8 ( `#3078 <https://github.com/easybuilders/easybuild-framework/pull/3078> `_ ) * always include mandatory easyconfig parameters in dumped easyconfig ( `#3081 <https://github.com/easybuilders/easybuild-framework/pull/3081> `_ ) * hide backup module file when using Lmod 6.x (fixes `#9302 <https://github.com/easybuilders/easybuild-easyconfigs/issues/9302> `_ ) ( `#3089 <https://github.com/easybuilders/easybuild-framework/pull/3089> `_ ) * add better error message when mandatory key is missing from a dictionary easyconfig parameter ( `#3092 <https://github.com/easybuilders/easybuild-framework/pull/3092> `_ ) * also create symlinks for default modules in class module folders ( `#3093 <https://github.com/easybuilders/easybuild-framework/pull/3093> `_ ) * fix semantics of ``--set-default-module`` : only set default for specified easyconfigs, not for the ones that are installed as dependencies via ``--robot`` ( `#3094 <https://github.com/easybuilders/easybuild-framework/pull/3094> `_ ) * fix various issues in extracting comments from original easyconfig file and including them again in dumped easyconfig ( `#3095 <https://github.com/easybuilders/easybuild-framework/pull/3095> `_ ) * don't use ``%(version)s`` template in ``exts_default_options`` in dumped easyconfig ( `#3096 <https://github.com/easybuilders/easybuild-framework/pull/3096> `_ ) * fix generated module statements in case only a single version is listed in ``multi_deps`` ( `#3097 <https://github.com/easybuilders/easybuild-framework/pull/3097> `_ ) * fix broken ``test_show_system_info`` on macOS due to 'Python' binary ( `#3105 <https://github.com/easybuilders/easybuild-framework/pull/3105> `_ ) * take into account that dependency version could be a dict rather than a string value in template_constant_dict ( `#3111 <https://github.com/easybuilders/easybuild-framework/pull/3111> `_ ) * other changes: * deprecate running EasyBuild with Python 2.6 via new ``check_python_version()`` function ( `#3076 <https://github.com/easybuilders/easybuild-framework/pull/3076> `_ ) * deprecate support for using Lmod 6.x ( `#3077 <https://github.com/easybuilders/easybuild-framework/pull/3077> `_ ) * trim set of test configurations in Travis CI ( `#3086 <https://github.com/easybuilders/easybuild-framework/pull/3086> `_ ) * flesh out ``env_vars_external_module`` from ``Toolchain._simulated_load_dependency_module`` ( `#3088 <https://github.com/easybuilders/easybuild-framework/pull/3088> `_ ) **easyblocks** * new software-specific easyblock for cuDNN, to allow setting ``cudnnarch`` ( `#1855 <https://github.com/easybuilders/easybuild-easyblocks/pull/1855> `_ ) * refactored software-specific easyblock for Xmipp, based on Scons ( `#1837 <https://github.com/easybuilders/easybuild-easyblocks/pull/1837> `_ ) * minor enhancements, including: * add ``prebuildopts`` to Bazel build command ( `#1838 <https://github.com/easybuilders/easybuild-easyblocks/pull/1838> `_ ) * add support to Toolchain generic easyblock for defining $EB* environment variables for toolchain components that use an external module ( `#1849 <https://github.com/easybuilders/easybuild-easyblocks/pull/1849> `_ ) * add support for running 'pip check' during sanity check in generic PythonPackage easyblock ( `#1853 <https://github.com/easybuilders/easybuild-easyblocks/pull/1853> `_ ) * various bug fixes, including: * clean up ``/tmp/cuda-installer.log`` in CUDA easyblock, to avoid segfault in cuda-installer ( `#1835 <https://github.com/easybuilders/easybuild-easyblocks/pull/1835> `_ ) * minor fix to name of Gctf binary ( `#1840 <https://github.com/easybuilders/easybuild-easyblocks/pull/1840> `_ ) * move BLAS toolchain existence check earlier in SuperLU easyblock ( `#1842 <https://github.com/easybuilders/easybuild-easyblocks/pull/1842> `_ ) * fixes for TensorFlow easyblocks w.r.t. Bazel build options & ``__init__`` in top-level google-protobuf package dir ( `#1843 <https://github.com/easybuilders/easybuild-easyblocks/pull/1843> `_ ) * fix support for sequential version in MUMPS easyblock ( `#1845 <https://github.com/easybuilders/easybuild-easyblocks/pull/1845> `_ ) * change default value of ``files_to_copy`` to None in MakeCp generic easyblock + code cleanup & use ``change_dir`` , ``copy_dir`` , ``copy_file`` and ``mkdir`` function from ``filetools`` ( `#1848 <https://github.com/easybuilders/easybuild-easyblocks/pull/1848> `_ ) * prepend ``-L$EBROOTZLIB/lib`` to ``LDFLAGS`` in SCOTCH easyblock ( `#1850 <https://github.com/easybuilders/easybuild-easyblocks/pull/1850> `_ ) * improve configuration in netCDF and netcdf4_python easyblocks ( `#1852 <https://github.com/easybuilders/easybuild-easyblocks/pull/1852> `_ ) * fix CUDA header paths for TensorFlow versions < 1.14 ( `#1854 <https://github.com/easybuilders/easybuild-easyblocks/pull/1854> `_ ) * handle incorrect regex better in generic CmdCp easyblock ( `#1861 <https://github.com/easybuilders/easybuild-easyblocks/pull/1861> `_ ) * add missing docstrings in cmakeninja easyblock ( `#1867 <https://github.com/easybuilders/easybuild-easyblocks/pull/1867> `_ ) * other changes: * add GitHub Actions workflow to run easybuild-easyblocks test suite ( `#1844 <https://github.com/easybuilders/easybuild-easyblocks/pull/1844> `_ ) **easyconfigs** * added example easyconfig files for 46 new software packages: * Amara ( `#9340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9340> `_ ), anvio ( `#9387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9387> `_ ), Arriba ( `#9226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9226> `_ , `#9244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9244> `_ ), attr ( `#7824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7824> `_ ), bibtexparser ( `#9284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9284> `_ ), bwa-meth ( `#9217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9217> `_ ), CITE-seq-Count ( `#9237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9237> `_ ), CoordgenLibs ( `#9374 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9374> `_ ), dtcmp ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), fatslim ( `#9193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9193> `_ ), GromacsWrapper ( `#9177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9177> `_ ), GULP ( `#9243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9243> `_ ), hdf5storage ( `#9195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9195> `_ ), ITSTool ( `#7260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7260> `_ ), kim-api ( `#8786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8786> `_ ), kwant ( `#9238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9238> `_ ), libarchive ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), libcircle ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), libxml2-python ( `#7260 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7260> `_ ), lifelines ( `#9215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9215> `_ ), lwgrp ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), maeparser ( `#9374 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9374> `_ ), MaxQuant ( `#9281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9281> `_ ), MethylDackel ( `#9216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9216> `_ ), MoviePy ( `#9205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9205> `_ ), mpifileutils ( `#9052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9052> `_ ), mpiP ( `#9059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9059> `_ ), nanofilt ( `#8502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8502> `_ ), NOVOPlasty ( `#9326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9326> `_ ), openkim-models ( `#8786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8786> `_ ), parallel-fastq-dump ( `#9218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9218> `_ ), pasta ( `#9348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9348> `_ ), pyqstem ( `#9277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9277> `_ ), python-Levenshtein ( `#9237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9237> `_ ), RapidJSON ( `#9373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9373> `_ ), RDFlib ( `#9346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9346> `_ ), RQGIS3 ( `#9125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9125> `_ ), Short-Pair ( `#9376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9376> `_ ), SpliceMap ( `#9375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9375> `_ ), TRIQS-cthyb ( `#9230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9230> `_ ), TRIQS-dft_tools ( `#9230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9230> `_ ), TRIQS-tprf ( `#9230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9230> `_ ), UMI-tools ( `#9237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9237> `_ ), VarDict ( `#7283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7283> `_ ), Xmipp ( `#9257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9257> `_ ), XSD ( `#9347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9347> `_ ) * added additional easyconfigs for various supported software packages, including: * awscli 1.16.290, BLIS 0.6.0, Bazel 1.1.0, Biopython 1.75, Blender 2.81, bokeh 1.4.0, CONCOCT 1.1.0, CUDA 10.2.89, Catch2 2.11.0, CellRanger 3.1.0, CheckM 1.0.18, dask 2.8.0, deepTools 3.3.1, FastANI 1.2, Flye 2.6, GDCM 3.0.4, GTDB-Tk 0.3.2, Glade 3.8.6, Hadoop 2.9.2, h5py 2.10.0, hypothesis 4.44.2, IPython 7.9.0, Kaiju 1.7.2, Kraken 1.1.1, libsodium 1.0.18, MEGAHIT 1.2.8, Mesa 19.2.1, MetaBAT 2.14, matplotlib 3.1.1, metaWRAP 1.2.2,cNCCL 2.4.8, NGS 2.10.0, NiBabel 2.5.1, netCDF 4.7.1, networkx 2.4, numba 0.46.0, OpenCV 3.4.7, OpenCoarrays 2.8.0, OpenEXR 2.4.0, OpenFOAM v1906, OpenImageIO 2.0.12, ParaView 5.6.2, Pillow 6.2.1, PyTorch 1.3.1, PyYAML 5.1.2, Pysam 0.15.3, picard 2.21.1, prokka 1.14.5, protobuf 3.10.0, R-keras 2.2.5.0, Racon 1.4.7, SCOTCH 6.0.9, SRPRISM 3.1.1, Salmon 0.14.2, SciPy-bundle 2019.10, Subread 2.0.0, scikit-image 0.16.2, scikit-learn 0.21.3, TRIQS 2.2.1, TensorFlow 1.15.0, TensorFlow 2.0.0 w/ fosscuda/2019b, Tkinter 3.7.4, ToFu 1.4.1, tbb 2019_U9, Xerces-C++ 3.2.2, Xmipp 3.19.04, yaff 1.6.0 * added easyconfigs for ``intelcuda/2019a`` toolchain ( `#9271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9271> `_ ) * minor enhancements, including: * tweak Java 1.8 wrapper to use different Java version on POWER systems ( `#9081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9081> `_ ) * add jupyter_nbextensions_configurator extension to IPython 7.7.0 easyconfigs ( `#9133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9133> `_ ) * add additional extensions to R 3.6.0 easyconfigs ( `#9184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9184> `_ , `#9275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9275> `_ ) * add additional extensions to R-bundle-Bioconductor 3.9 easyconfig ( `#9185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9185> `_ , `#9349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9349> `_ , `#9410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9410> `_ ) * enhance sanity check in cutadapt 1.18 easyconfigs + consistently use PythonBundle & ``use_pip`` ( `#9219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9219> `_ ) * update cuDNN 7.6.4.38 easyconfigs to support both x86_64 and ppc64le ( `#9331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9331> `_ ) * tweak NCCL 2.4.8 easyconfig to support x86_64 and ppc64le ( `#9336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9336> `_ ) * define ``$SPARK_HOME`` in generated module file for Spark 2.4.0 ( `#9408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9408> `_ ) * add sanity check command for matplotlib 3.x with Python 3 to check import from mpl_toolkits ( `#9413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9413> `_ , `#9414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9414> `_ ) * various bug fixes, including: * explicitly set ``SYSCONFDIR`` configure option in TurboVNC easyconfig ( `#9137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9317> `_ ) * patch pigz Makefile so zlib provided by EasyBuild is picked up ( `#9138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9138> `_ ) * add libjpeg-turbo as dependency to recent LibTIFF easyconfigs, to avoid picking up LibTIFF installed in system ( `#9146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9146> `_ ) * add freetype as dependency to OpenImageIO, to avoid picking up freetyype installed in system ( `#9147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9147> `_ , `#9152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9152> `_ ) * fix definition of ``fosscuda/2019b`` to make sure it works with hierarchical MNS ( `#9178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9178> `_ ) * add missing setuptools_scm extension required to build dateutil extension in Python 3.7.0 easyconfigs ( `#9209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9209> `_ ) * add Python as build dependency for recent Bazel versions ( `#9223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9223> `_ , `#9299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9299> `_ , `#9342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9342> `_ ) * fix homepage & description in Bioconductor easyconfigs ( `#9225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9225> `_ ) * fix checksum in Stacks 2.41 easyconfig after sneaky re-release ( `#9232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9232> `_ ) * apply fixes to ImageJ 1.51k easyconfig ( `#9245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9245> `_ ) * consistently use patch for OpenCV 3.4.7 ( `#9279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9279> `_ ) * use protobuf 3.10.0 as build dep for TensorFlow 2.0.0 w/ fosscuda/2019b + use nodocs variant of git as build dep ( `#9298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9298> `_ ) * add Jasper dependency to Qt5 v.5.13.1 ( `#9313 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9313> `_ ) * fix Python 3.7.2 required OpenSSL version for old OS to the one provided on the same toolchain ( `#9324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9324> `_ ) * add missing extensions required by Sphinx & pytest to easyconfigs for Python 3.7.2 and 3.7.4 ( `#9329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9329> `_ ) * update TensorFlow v1.14.0 + v2.0.0 CUDA patch to handle compiler wrappers like ccache ( `#9333 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9333> `_ ) * patch binutils 2.31.1 and 2.32 to fix compatibility with RHEL8 ( `#9335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9335> `_ ) * add missing extensions in TensorFlow 2.0.0 easyconfigs (+ update to tensorboard/tensorflow-estimator 2.0.1) ( `#9338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9338> `_ ) * fix logic to determine location of scripts dir + ensure right compiler flags are used in KAT easyconfigs ( `#9360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9360> `_ ) * add missing GCCcore-6.3.0_fix-sanitizer_linux.patch in GCCcore 6.4.0 easyconfig ( `#9362 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9362> `_ ) * fix linker errors when linking with libhts.a for MetaBAT 2.12.1 ( `#9379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9379> `_ ) * add egg-info file via patch in VTK v8.2.0, for Pytho 2.7.15, 3.7.2, 3.7.4 ( `#9386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9386> `_ ) * promote binutils to a runtime dependency for Python in GCCcore based builds ( `#9402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9402> `_ ) * fix archive URL typo for ncdf4 ( `#9407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9407> `_ ) * fix problems with mpl_toolkits namespace for matplotlib easyconfigs using Python 2 ( `#9415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9415> `_ , `#9416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9416> `_ , `#9417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9417> `_ ) * other changes: * ignore commented out lines in easyconfig files when checking for http:// URLs ( `#9224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9224> `_ ) * add GitHub Actions workflow to run easybuild-easyconfigs test suite ( `#9231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9231> `_ , `#9255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9255> `_ ) * archive old patches for Xmipp 3.1 ( `#9256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9256> `_ ) * speed up easyconfigs test suite by avoiding re-parsing and re-ordering of easyconfigs ( `#9236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9236> `_ ) * only run easyconfigs test suite with Python 2.7 & 3.6 + Lmod 7 in Travis CI ( `#9297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9297> `_ ) * archive ACML easyconfigs ( `#9367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9365> `_ ) * update CMake build in Eigen 3.3.7 to use more recent toolchain ( `#9398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9398> `_ ) .. _release_notes_eb401: EasyBuild v4.0.1 (October 15th 2019) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add ' ``parallel`` ' to list of config templates ( `#3036 <https://github.com/easybuilders/easybuild-framework/pull/3036> `_ ) * add GitHub Actions workflow to run easybuild-framework test suite ( `#3039 <https://github.com/easybuilders/easybuild-framework/pull/3039> `_ ) * add ' ``retest`` ' as a reason to ``--close-pr`` , to close/re-open PRs to trigger re-test in Travis ( `#3040 <https://github.com/easybuilders/easybuild-framework/pull/3040> `_ ) * define ``$EB_SCRIPT_PATH`` in ' ``eb`` ' wrapper script, and consider it before location of ' ``eb`` ' determined via ``$PATH`` in ``get_paths_for`` function ( `#3046 <https://github.com/easybuilders/easybuild-framework/pull/3046> `_ ) * add support for ``--remove-ghost-install-dirs`` configuration option, and warn about (potential) ghost install dirs by default when ``--force`` / ``--rebuild`` is used ( `#3050 <https://github.com/easybuilders/easybuild-framework/pull/3050> `_ ) * various bug fixes, including: * update bootstrap script to support installing EasyBuild v4.0 ( `#3017 <https://github.com/easybuilders/easybuild-framework/pull/3017> `_ ) * fix broken ``test_download_repo`` due to archiving of easyconfigs ( `#3019 <https://github.com/easybuilders/easybuild-framework/pull/3019> `_ , `#3023 <https://github.com/easybuilders/easybuild-framework/pull/3023> `_ ) * avoid that ``--inject-checksums`` introduces list of patches for extensions as a single long line ( `#3025 <https://github.com/easybuilders/easybuild-framework/pull/3025> `_ , `#3034 <https://github.com/easybuilders/easybuild-framework/pull/3034> `_ ) * enhance regex in ``fix_shebang`` method to fix more Python/Perl shebangs + avoid patching binary files ( `#3029 <https://github.com/easybuilders/easybuild-framework/pull/3029> `_ ) * delete test gist that is created by ``--check-github`` ( `#3031 <https://github.com/easybuilders/easybuild-framework/pull/3031> `_ ) * disable templates when defining easyconfig parameters in ``EasyConfig.set_keys()`` ( `#3037 <https://github.com/easybuilders/easybuild-framework/pull/3037> `_ ) * avoid setting GC3Pie's max_in_flight to ``None`` if ``--job-max-jobs`` is not specified ( `#3038 <https://github.com/easybuilders/easybuild-framework/pull/3038> `_ ) * fix use of ``obtain_file`` method for extensions ( `#3042 <https://github.com/easybuilders/easybuild-framework/pull/3042> `_ ) * error out if some GC3Pie job failed ( `#3044 <https://github.com/easybuilders/easybuild-framework/pull/3044> `_ ) **easyblocks** * one new generic easyblock: ``CMakeNinja`` ( `#1829 <https://github.com/easybuilders/easybuild-easyblocks/pull/1829> `_ ) * new software-specific easyblock for Gctf ( `#1827 <https://github.com/easybuilders/easybuild-easyblocks/pull/1827> `_ ), MotionCor2 ( `#1819 <https://github.com/easybuilders/easybuild-easyblocks/pull/1819> `_ ) * minor enhancements, including: * update OpenFOAM easyblock for changes in version 1906 w.r.t. wamke rules ( `#1772 <https://github.com/easybuilders/easybuild-easyblocks/pull/1772> `_ ) * add ``%(cudaarch)s`` template variable so that it can be used in sources ( `#1797 <https://github.com/easybuilders/easybuild-easyblocks/pull/1797> `_ ) * update Boost easyblock for versions >=1.71.0 ( `#1814 <https://github.com/easybuilders/easybuild-easyblocks/pull/1814> `_ ) * update RepeatMasker easyblock for version 4.0.9 ( `#1815 <https://github.com/easybuilders/easybuild-easyblocks/pull/1815> `_ ) * add ``--verbose`` flag to ' ``pip install`` ' when running EB in debug mode ( `#1822 <https://github.com/easybuilders/easybuild-easyblocks/pull/1822> `_ ) * update TensorFlow easyblock to support TensorFlow 2.0 ( `#1823 <https://github.com/easybuilders/easybuild-easyblocks/pull/1823> `_ ) * add support in TensorFlow easyblock to run a custom test script as smoke test ( `#1824 <https://github.com/easybuilders/easybuild-easyblocks/pull/1824> `_ ) * add support for installing QScintilla on top of PyQt5 ( `#1825 <https://github.com/easybuilders/easybuild-easyblocks/pull/1825> `_ ) * update VEP easyblock to make installation compatible with ``Bio::EnsEMBL::XS`` ( `#1828 <https://github.com/easybuilders/easybuild-easyblocks/pull/1828> `_ ) * various bug fixes, including: * enhance TensorFlow easyblock to support installing TF 1.14.0 with CUDA and MPI support ( `#1811 <https://github.com/easybuilders/easybuild-easyblocks/pull/1811> `_ , `#1816 <https://github.com/easybuilders/easybuild-easyblocks/pull/1816> `_ ) * avoid ``UnicodeDecodeError`` when reading ' ``configure`` ' script and checking for ' ``Generated by GNU Autoconf`` ' in ``ConfigureMake`` ( `#1817 <https://github.com/easybuilders/easybuild-easyblocks/pull/1817> `_ , `#1821 <https://github.com/easybuilders/easybuild-easyblocks/pull/1821> `_ ) * don't require ' ``python`` ' command to install libxml2 without Python bindings ( `#1818 <https://github.com/easybuilders/easybuild-easyblocks/pull/1818> `_ ) * make sure \" ``generic=True`` \" actually turns on generic build in GCC easyblock ( `#1826 <https://github.com/easybuilders/easybuild-easyblocks/pull/1826> `_ ) * fix compatibility of Trilinos easyblock with Python 3 ( `#1831 <https://github.com/easybuilders/easybuild-easyblocks/pull/1831> `_ ) **easyconfigs** * added example easyconfig files for 58 new software packages: * ADOL-C ( `#9098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9098> `_ ), ALFA ( `#9106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9106> `_ ), ASTRID ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), Annif ( `#8536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8536> `_ ), bnpy ( `#8989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8989> `_ ), bpp-core ( `#9064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9064> `_ ), bpp-phyl ( `#9064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9064> `_ ), bpp-seq ( `#9064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9064> `_ ), Clang-Python-bindings ( `#9084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9084> `_ ), CPB ( `#5869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5869> `_ ), Centrifuge ( `#8714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8714> `_ ), Chromaprint ( `#9047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9047> `_ ), Con3F ( `#8755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8755> `_ ), DeepSurv ( `#8096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8096> `_ ), Essentia ( `#9054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9054> `_ ), FastRFS ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), GAT ( `#5871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5871> `_ ), Gaia ( `#9049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9049> `_ ), Gctf ( `#9097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9097> `_ ), GenomeMapper ( `#5872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5872> `_ ), Infomap ( `#9091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9091> `_ ), kpcalg ( `#8740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8740> `_ ), libglvnd ( `#9111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9111> `_ , `#9130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9130> `_ ), libsamplerate ( `#9046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9046> `_ ), libssh ( `#8865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8865> `_ ), libzip ( `#9073 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9073> `_ ), MetaboAnalystR ( `#8773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8773> `_ ), Metaxa2 ( `#8939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8939> `_ ), MotionCor2 ( `#8942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8942> `_ ), NFFT ( `#9085 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9085> `_ ), PhyML ( `#9103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9103> `_ ), PlaScope ( `#8714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8714> `_ ), PyCharm ( `#9100 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9100> `_ ), pbcopper ( `#8928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8928> `_ ), pbmm2 ( `#8929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8929> `_ ), phylokit ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), phylonaut ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), phyx ( `#9090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9090> `_ ), pycma ( `#8834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8834> `_ ), Q6 ( `#9069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9069> `_ ), Qt5Webkit ( `#9120 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9120> `_ ), ROME ( `#9050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9050> `_ , `#9062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9062> `_ ), rioxarray ( `#9007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9007> `_ ), SVDquest ( `#9088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9088> `_ ), savvy ( `#9124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9124> `_ ), sciClone ( `#7806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7806> `_ ), shapAAR ( `#8983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8983> `_ ), shrinkwrap ( `#9124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9124> `_ ), Structure ( `#5866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5866> `_ ), trimAl ( `#9063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9063> `_ ), thurstonianIRT ( `#9080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9080> `_ ), TurboVNC ( `#9110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9110> `_ , `#9111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9111> `_ , `#9128 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9128> `_ ), Tracer ( `#8970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8970> `_ ), TagLib ( `#9048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9048> `_ ), TRIQS ( `#8835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8835> `_ ), THetA ( `#8875 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8875> `_ ), vcfnp ( `#5862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5862> `_ ), WebSocket++ ( `#8842 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8842> `_ ) * added additional easyconfigs for various supported software packages, including: * Armadillo 9.700.2, arpack-ng 3.7.0, BLASR 5.3.3, Bazel 0.26.1 + Bazel 0.29.1, Cufflinks 20190706, DL_POLY_Classic 1.10, FFmpeg 4.2.1, Go 1.13.1, Horovod 0.18.1, IOR 3.2.1, Julia 1.2.0, LLVM 9.0.0, Mesa 19.1.7, Molden 6.1, Mono 6.4.0.198, NCO 4.8.1, , Net-core 3.0.0, Nim 1.0.0, OpenFOAM 2.2.x, PGI 19.7, PLUMED 2.5.2, PMIx 3.1.4, PostgreSQL 11.3, psycopg2 2.8.3, QGIS 3.4.12, QScintilla 2.11.2, Qt5 5.13.1, ReFrame 2.19, Rust 1.37.0, Spack 0.12.1, TAMkin 1.2.6, TensorFlow 1.14.0 w/ fosscuda/2019a, TensorFlow 2.0.0 w/ foss/2019a, UCX 1.6.1, VEP 96.0, xarray 0.13.0 * added easyconfigs for ``fosscuda/2019a`` toolchain ( `#9066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9066> `_ ) * minor enhancements, including: * add EBImage extension to easyconfig for R-bundle-Bioconductor 3.9 ( `#8982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8982> `_ ) * add check for ``http://`` URLs in easyconfig files added/changed in PRs ( `#9012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9012> `_ ) * add bbmle/emdbook/SOAR/rasterVis/tictoc extensions to R 3.6.0 easyconfigs ( `#9037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9037> `_ ) * updated PyQt5 5.12.1 easyconfig to also build sip files + minor readability changes ( `#9071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9071> `_ ) * enabled ``SQLITE_ENABLE_COLUMN_METADATA`` , which is needed for GDAL (and QGIS) ( `#9118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9118> `_ ) * also install include/GL/internal/ for recent Mesa installations ( `#9129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9129> `_ ) * various bug fixes, including: * add ncurses as dependency to lftp ( `#8646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8646> `_ ) * add patch for gettext 0.19.8* to avoid picking up global git config that could break the installation ( `#8957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8957> `_ ) * fix source URLs in GlimmerHMM easyconfigs ( `#8980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8980> `_ ) * add patch for PyTorch 1.2.0 to use version of torchvision that is compatible with PyTorch 1.2.0 ( `#8986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8986> `_ ) * clarify the comment regarding the optarch setting in ITK-5.0.1 ( `#8991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8991> `_ ) * fix homepage & description in easyconfig file for YAPS ( `#8993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8993> `_ ) * add patch for PyTorch 1.2.0 to fix failing softmax test on Intel Sandy Bridge ( `#9010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9010> `_ ) * fix permissions for TRF ( `#9034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9034> `_ ) * ICU needs Python 2.7+ to build, so add that as builddependency ( `#9053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9053> `_ ) * fix urls for Anaconda and Miniconda ( `#9087 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9087> `_ ) * use a cuDNN version that has support for the CUDA version in ``fosscuda/2019a`` (CUDA 10.1) in PyTorch, TensorFlow and Theano easyconfigs ( `#9112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9112> `_ ) * other changes: * make sources in CUDA 10.1.105 use ``%(cudaarch)s`` template value (to use different source on POWER systems) ( `#8136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8136> `_ ) * update ``Java/1.8`` wrapper to ``Java/1.8.0_221`` ( `#9038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9038> `_ ) * allow divergent Java dep version as long as it's indicated by versionsuffix ( `#9041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/9041> `_ ) .. _release_notes_eb400: EasyBuild v4.0.0 (September 20th 2019) -------------------------------------- feature release (incl. backwards-incompatible changes) **framework** * **fixed compatibility with Python 3.5+** ( `#2708 <https://github.com/easybuilders/easybuild-framework/pull/2708> `_ , `#2713 <https://github.com/easybuilders/easybuild-framework/pull/2713> `_ , `#2714 <https://github.com/easybuilders/easybuild-framework/pull/2714> `_ , `#2719 <https://github.com/easybuilders/easybuild-framework/pull/2719> `_ , `#2721 <https://github.com/easybuilders/easybuild-framework/pull/2721> `_ , `#2723 <https://github.com/easybuilders/easybuild-framework/pull/2723> `_ , `#2729 <https://github.com/easybuilders/easybuild-framework/pull/2729> `_ , `#2743 <https://github.com/easybuilders/easybuild-framework/pull/2743> `_ , `#2744 <https://github.com/easybuilders/easybuild-framework/pull/2744> `_ , `#2751 <https://github.com/easybuilders/easybuild-framework/pull/2751> `_ , `#2756 <https://github.com/easybuilders/easybuild-framework/pull/2756> `_ , `#2759 <https://github.com/easybuilders/easybuild-framework/pull/2759> `_ , `#2761 <https://github.com/easybuilders/easybuild-framework/pull/2761> `_ , `#2762 <https://github.com/easybuilders/easybuild-framework/pull/2762> `_ , `#2765 <https://github.com/easybuilders/easybuild-framework/pull/2765> `_ , `#2766 <https://github.com/easybuilders/easybuild-framework/pull/2766> `_ , `#2767 <https://github.com/easybuilders/easybuild-framework/pull/2767> `_ , `#2768 <https://github.com/easybuilders/easybuild-framework/pull/2768> `_ , `#2774 <https://github.com/easybuilders/easybuild-framework/pull/2774> `_ , `#2775 <https://github.com/easybuilders/easybuild-framework/pull/2775> `_ , `#2778 <https://github.com/easybuilders/easybuild-framework/pull/2778> `_ , `#2780 <https://github.com/easybuilders/easybuild-framework/pull/2780> `_ , `#2785 <https://github.com/easybuilders/easybuild-framework/pull/2785> `_ , `#2787 <https://github.com/easybuilders/easybuild-framework/pull/2787> `_ , `#2789 <https://github.com/easybuilders/easybuild-framework/pull/2789> `_ , `#2791 <https://github.com/easybuilders/easybuild-framework/pull/2791> `_ , `#2792 <https://github.com/easybuilders/easybuild-framework/pull/2792> `_ , `#2794 <https://github.com/easybuilders/easybuild-framework/pull/2794> `_ , `#2800 <https://github.com/easybuilders/easybuild-framework/pull/2800> `_ , `#2801 <https://github.com/easybuilders/easybuild-framework/pull/2801> `_ , `#2805 <https://github.com/easybuilders/easybuild-framework/pull/2805> `_ , `#2806 <https://github.com/easybuilders/easybuild-framework/pull/2806> `_ , `#2895 <https://github.com/easybuilders/easybuild-framework/pull/2895> `_ , `#2932 <https://github.com/easybuilders/easybuild-framework/pull/2932> `_ , `#2982 <https://github.com/easybuilders/easybuild-framework/pull/2982> `_ , `#2992 <https://github.com/easybuilders/easybuild-framework/pull/2992> `_ , `#3007 <https://github.com/easybuilders/easybuild-framework/pull/3007> `_ , `#3011 <https://github.com/easybuilders/easybuild-framework/pull/3011> `_ ) * supported Python versions: 2.6, 2.7, 3.5, 3.6, 3.7 * some functionality from the Python standard library should be imported from the new ``easybuild.tools.py2vs3`` package * see :ref: `py2_py3_compatibility` & :ref: `eb4_relocated_functions_classes_constants` * **ingested relevant code from** ``vsc-base`` & ``vsc-install`` ( `#2708 <https://github.com/easybuilders/easybuild-framework/pull/2708> `_ , `#2713 <https://github.com/easybuilders/easybuild-framework/pull/2713> `_ , `#2714 <https://github.com/easybuilders/easybuild-framework/pull/2714> `_ , `#2763 <https://github.com/easybuilders/easybuild-framework/pull/2763> `_ , `#2790 <https://github.com/easybuilders/easybuild-framework/pull/2790> `_ , `#2993 <https://github.com/easybuilders/easybuild-framework/pull/2993> `_ ) * ``vsc-base`` & ``vsc-install`` are no longer required as dependencies * the functionality that was provided by these packages is now (mostly) available from the ``easybuild.base`` package * any import statements from the ' ``vsc`` ' namespace will result in an error * see also :ref: `eb4_changes_ingested_vsc_base` and :ref: `eb4_relocated_functions_classes_constants` * ``setuptools`` **is longer required** (neither for installing or using EasyBuild) ( `#2836 <https://github.com/easybuilders/easybuild-framework/pull/2836> `_ , `#2837 <https://github.com/easybuilders/easybuild-framework/pull/2837> `_ , `#2984 <https://github.com/easybuilders/easybuild-framework/pull/2984> `_ , `#2986 <https://github.com/easybuilders/easybuild-framework/pull/2986> `_ , `#2988 <https://github.com/easybuilders/easybuild-framework/pull/2988> `_ ) * see also :ref: `eb4_no_required_deps` * this required moving some classes and constants, see :ref: `eb4_relocated_functions_classes_constants` * **the** ' ``dummy`` ' **toolchain is deprecated and replaced by the** ' ``system`` ' **toolchain** ( `#2877 <https://github.com/easybuilders/easybuild-framework/pull/2877> `_ , `#3001 <https://github.com/easybuilders/easybuild-framework/pull/3001> `_ ) * if ' ``dummy`` ' is still used as a toolchain in easyconfig files, a warning will be printed * use \" ``toolchain = SYSTEM`` \" instead * for more information, see :ref: `system_toolchain` * **a warning is printed when local variables in easyconfig file don't follow the recommended naming scheme** ( `#2938 <https://github.com/easybuilders/easybuild-framework/pull/2938> `_ , `#2968 <https://github.com/easybuilders/easybuild-framework/pull/2968> `_ ) * see also :ref: `easyconfig_files_local_variables` * **names of software installation directories are independent of module naming scheme by enabling** ``--fixed-installdir-naming-scheme`` **by default** ( `#2999 <https://github.com/easybuilders/easybuild-framework/pull/2999> `_ ) * see :ref: `eb4_changes_fixed_installdir_naming_scheme` for more information * various other small enhancements, including: * use requests instead of urllib2 for 403 errors ( `#2695 <https://github.com/easybuilders/easybuild-framework/pull/2695> `_ ) * use pip requirements file in Travis ( `#2874 <https://github.com/easybuilders/easybuild-framework/pull/2874> `_ ) * add support for ``--fix-deprecated-easyconfigs`` ( `#2881 <https://github.com/easybuilders/easybuild-framework/pull/2881> `_ , 2898, `#2938 <https://github.com/easybuilders/easybuild-framework/pull/2938> `_ ) * add ``-L$EBROOTIMKL/lib/intel64`` to ``$LDFLAGS`` for MKL ( `#2930 <https://github.com/easybuilders/easybuild-framework/pull/2930> `_ ) * handle dict-type checksums in check_checksums_for ( `#2974 <https://github.com/easybuilders/easybuild-framework/pull/2974> `_ ) * allow that ``icc`` & ``ifort`` are not actual dependencies in ``iccifort`` toolchain module ( `#2995 <https://github.com/easybuilders/easybuild-framework/pull/2995> `_ ) * define mapping for ``iccifort`` -> ``intel`` for ``iccifort`` compiler-only toolchain for HMNS ( `#2996 <https://github.com/easybuilders/easybuild-framework/pull/2996> `_ ) * also consider concatenation of compiler module names to determine details of toolchain compiler component ( `#2997 <https://github.com/easybuilders/easybuild-framework/pull/2997> `_ ) * update metadata for Cray-provided external modules ( `#3013 <https://github.com/easybuilders/easybuild-framework/pull/3013> `_ ) * various bug fixes, including: * update the PyPI trove classifiers in setup.py ( `#2875 <https://github.com/easybuilders/easybuild-framework/pull/2875> `_ ) * reverse lists for ``$LDFLAGS`` and ``$CPPFLAGS`` ( `#2931 <https://github.com/easybuilders/easybuild-framework/pull/2931> `_ ) * enhance/fix to_template_str function to do a better job at using template values in dumped easyconfigs ( `#2948 <https://github.com/easybuilders/easybuild-framework/pull/2948> `_ ) * also take into account ``--filter-deps`` when finalizing parsed dependencies to fix problem with dependency filters using version ranges ( `#2983 <https://github.com/easybuilders/easybuild-framework/pull/2983> `_ ) * fix broken ``--from-pr`` tests due to archiving of easyconfigs ( `#2985 <https://github.com/easybuilders/easybuild-framework/pull/2985> `_ ) * fixes required to avoid breaking Cray support ( `#3008 <https://github.com/easybuilders/easybuild-framework/pull/3008> `_ ) * fixes for ``--read-only-installdir`` : avoid crash with ``ModuleRC`` easyblock + also make log file in installdir read-only ( `#3012 <https://github.com/easybuilders/easybuild-framework/pull/3012> `_ ) * other changes: * add check to ensure that ``--robot`` argument specifies an existing directory ( `#2086 <https://github.com/easybuilders/easybuild-framework/pull/2086> `_ ) * remove old scripts that are no longer useful (+ minor fixes to others) ( `#2897 <https://github.com/easybuilders/easybuild-framework/pull/2897> `_ ) * use ' ``command -v`` ' to avoid requiring ' ``which`` ' in ' ``eb`` ' command ( `#2979 <https://github.com/easybuilders/easybuild-framework/pull/2979> `_ ) * add ``modluafooter`` & ``modtclfooter`` at the end of the generated module file ( `#3003 <https://github.com/easybuilders/easybuild-framework/pull/3003> `_ ) * print warning when ' ``eb`` ' command is not found in ``$PATH`` and for empty robot search path ( `#3006 <https://github.com/easybuilders/easybuild-framework/pull/3006> `_ ) **easyblocks** * fixes due to backwards-incompatible changes in easybuild-framework v4.0.0 * use ``is_system_toolchain()`` rather than checking toolchain name against DUMMY_TOOLCHAIN_NAME constant ( `#1690 <https://github.com/easybuilders/easybuild-easyblocks/pull/1690> `_ , `#1728 <https://github.com/easybuilders/easybuild-easyblocks/pull/1728> `_ ) * fix compatibility of various easyblocks with Python 3 ( `#1640 <https://github.com/easybuilders/easybuild-easyblocks/pull/1640> `_ , `#1644 <https://github.com/easybuilders/easybuild-easyblocks/pull/1644> `_ , `#1648 <https://github.com/easybuilders/easybuild-easyblocks/pull/1648> `_ , `#1721 <https://github.com/easybuilders/easybuild-easyblocks/pull/1721> `_ , `#1794 <https://github.com/easybuilders/easybuild-easyblocks/pull/1794> `_ , `#1808 <https://github.com/easybuilders/easybuild-easyblocks/pull/1808> `_ , `#1795 <https://github.com/easybuilders/easybuild-easyblocks/pull/1795> `_ , `#1796 <https://github.com/easybuilders/easybuild-easyblocks/pull/1796> `_ , `#1807 <https://github.com/easybuilders/easybuild-easyblocks/pull/1807> `_ , `#1809 <https://github.com/easybuilders/easybuild-easyblocks/pull/1809> `_ ) * new software-specific easyblocks for ``OpenMPI`` ( `#1789 <https://github.com/easybuilders/easybuild-easyblocks/pull/1789> `_ , `#1801 <https://github.com/easybuilders/easybuild-easyblocks/pull/1801> `_ ), ``iccifort`` ( `#1799 <https://github.com/easybuilders/easybuild-easyblocks/pull/1799> `_ ) and ``numexpr`` ( `#1803 <https://github.com/easybuilders/easybuild-easyblocks/pull/1803> `_ , `#1804 <https://github.com/easybuilders/easybuild-easyblocks/pull/1804> `_ ) * various other enhancements, including: * removed checks for Boussinesq and sonic solvers for OpenFOAM 7, since those have been deprecated ( `#1733 <https://github.com/easybuilders/easybuild-easyblocks/pull/1733> `_ ) * update Paraver easyblock to support recent versions ( `#1790 <https://github.com/easybuilders/easybuild-easyblocks/pull/1790> `_ ) * various bug fixes, including: * update the PyPI trove classifiers ( `#1723 <https://github.com/easybuilders/easybuild-easyblocks/pull/1723> `_ ) * make the plugins build use the correct Tcl library version in VMD easyblock ( `#1786 <https://github.com/easybuilders/easybuild-easyblocks/pull/1786> `_ ) * use ``*_MT libs`` for BLAS/LAPACK only if ``openmp`` is enabled in Trilinos easyblock ( `#1791 <https://github.com/easybuilders/easybuild-easyblocks/pull/1791> `_ ) * filter out empty entries in ``$CPATH`` or ``$C_INCLUDE_PATH`` when building Perl, since that breaks the build ( `#1800 <https://github.com/easybuilders/easybuild-easyblocks/pull/1800> `_ ) * set ``$XDG_CACHE_HOME`` in TensorFlow easyblock to avoid that ``pip`` (ab)uses ``$HOME/.cache`` ( `#1802 <https://github.com/easybuilders/easybuild-easyblocks/pull/1802> `_ ) * don't load modules for dependencies in ``CrayToolchain.prepare_step`` ( `#1805 <https://github.com/easybuilders/easybuild-easyblocks/pull/1805> `_ ) * other changes: * drop requirement for setuptools as runtime dependency ( `#1689 <https://github.com/easybuilders/easybuild-easyblocks/pull/1689> `_ ) * enable ' ``check_ldshared`` ' in generic PythonPackage easyblock by default for recent Python versions ( `#1788 <https://github.com/easybuilders/easybuild-easyblocks/pull/1788> `_ ) * stop trying to use ``setuptools.setup`` in ``setup.py`` , always use ``distutils.core.setup`` instead ( `#1793 <https://github.com/easybuilders/easybuild-easyblocks/pull/1793> `_ ) **easyconfigs** * fixes due to changes in easybuild-framework v4.0.0 * use ``SYSTEM`` toolchain rather than deprecated ``dummy`` toolchain ( `#8369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8369> `_ , `#8711 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8711> `_ , `#8822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8822> `_ ) * fix names of local variables ( `#8682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8682> `_ - `#8688 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8688> `_ , `#8690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8690> `_ , `#8695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8695> `_ - `#8702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8702> `_ , `#8709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8709> `_ , `#8710 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8710> `_ , `#8715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8715> `_ , `#8717 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8717> `_ , `#8718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8718> `_ , `#8720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8720> `_ - `#8732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8732> `_ , `#8822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8822> `_ ) * enable ``--local-var-naming-check=error`` for easyconfigs tests ( `#8784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8784> `_ ) * stick to ' ``dummy`` ' toolchain for now in easyconfig for latest EasyBuild 3.x ( `#8829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8829> `_ ) * fix compatibility with Python 3: also run easyconfigs tests with Python 3.5, 3.6 and 3.7 ( `#7778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7778> `_ , `#7836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7836> `_ , `#8293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8293> `_ ) * added easyconfigs for new common toolchains: ``foss/2019b`` ( `#8567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8567> `_ ), ``intel/2019b`` ( `#8681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8681> `_ ) * ``iccifort`` is now installed as a single entity (no more separate ``icc`` / ``ifort`` installations from ``intel/2019b`` onwards) (see also `#8879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8879> `_ ) * ``versionsuffix`` has been stripped down for toolchain components (GCC/binutils/OpenBLAS versions are no longer included) * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added example easyconfig files for 28 new software packages: * AGFusion ( `#8840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8840> `_ ), Bonmin ( `#8855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8855> `_ ), causalml ( `#8871 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8871> `_ ), ClonalFrameML ( `#6082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6082> `_ ), Control-FREEC ( `#8794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8794> `_ ), corner ( `#8886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8886> `_ ), CVXPY ( `#8662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8662> `_ ), cytosim ( `#8368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8368> `_ ), dill ( `#8885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8885> `_ ), Dsuite ( `#8713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8713> `_ ), GDCHART ( `#8679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8679> `_ ), gifsicle ( `#8664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8664> `_ ), guenomu ( `#8677 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8677> `_ ), JsonCpp ( `#8841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8841> `_ ), libxml++ ( `#8896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8896> `_ ), LOHHLA ( `#7227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7227> `_ ), Longshot ( `#8830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8830> `_ ), MDBM ( `#8850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8850> `_ ), nglview ( `#8860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8860> `_ ), ownCloud ( `#6804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6804> `_ ), ptemcee ( `#8884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8884> `_ ), pubtcrs ( `#7500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7500> `_ ), pyiron ( `#8860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8860> `_ ), qpth ( `#8665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8665> `_ ), QtKeychain ( `#6804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6804> `_ ), rgdal ( `#8826 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8826> `_ ), smallgenomeutilities ( `#8507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8507> `_ ), umis ( `#8812 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8812> `_ ) * added additional easyconfigs for various supported software packages, including: * Blosc 1.17.0, bokeh 1.3.4, cURL 7.66.0, csvkit 1.0.4, dask 2.3.0, Extrae 3.7.1, FSL 6.0.1, GLibmm 2.49.7, git 2.23.0, IPython 7.7.0, numexpr 2.7.0, OSU-Micro-Benchmarks 5.6.2, OpenBLAS 0.3.7, OpenSSL 1.1.1d, ParaView 5.5.2, Paraver 4.8.1, Perl 5.30.0, PnetCDF 1.10.0, Porechop 0.2.4, PyTables 3.5.2, PyTorch 1.2.0, Python 2.7.16 + 3.7.4, parallel 20190622, phonopy 2.2.0, QIIME2 2019.7, Qiskit 0.12.0, REMORA 1.8.3, scikit-image 0.15.0, spglib-python 1.14.1.post0, torchvision 0.3.0, X11 20190717 * various additional minor enhancements, including: * add several extensions to R 3.6.0 easyconfigs ( `#8843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8843> `_ , `#8881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8881> `_ ) * add pRoloc to R-bundle-Bioconductor v3.9 ( `#8882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8882> `_ ) * clean up OpenMPI 3.1. * and 4.* easyconfigs to use custom OpenMPI easyblock ( `#8889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8889> `_ , `#8890 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8890> `_ ) * update numexpr easyconfigs to use custom easyblock for numexpr ( `#8901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8901> `_ ) * switch to ``PythonBundle`` & enable use_pip in old dask easyconfig files ( `#8922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8922> `_ ) * update ``CrayCCE`` , ``CrayGNU`` , ``CrayIntel`` and ``CrayPGI`` toolchains to 19.06 ( `#8944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8944> `_ ) * various bug fixes, including: * make TensorFlow 1.7.0 work for AMD CPUs ( `#6256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6256> `_ ) * make sure that right Python wrapper is used in VTK8 ( `#7296 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7296> `_ ) * update the PyPI trove classifiers ( `#8298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8298> `_ ) * add missing checksum for matplotlib v3.0.3 ( `#8643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8643> `_ ) * add patch to ``plugins/Make-arch`` to use the correct Tcl library version in VMD ( `#8820 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8820> `_ ) * fix issue where ' ``print_qiime_config.py -t`` ' sanity check command fails for QIIME 1.9.1 because of missing subdir in ``$PYTHONPATH`` ( `#8838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8838> `_ ) * update homepage info in likwid ( `#8846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8846> `_ ) * disable threading in ``preprocessCore`` extension included with Bioconductor 3.9 to work around conflict with OpenBLAS's threading ( `#8847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8847> `_ ) * add ``-lrt`` patch to PyTorch 1.1.0 easyconfig ( `#8852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8852> `_ ) * fix incorrect escaping in SIP configure options in PyQt5 easyconfigs ( `#8856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8856> `_ ) * add missing Autotools build dep for fastq-tools ( `#8858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8858> `_ ) * add missing deps for zlib, bzip2, and XZ for angsd ( `#8867 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8867> `_ ) * apply patch to R package uroot in R 3.6.0 ( `#8872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8872> `_ ) * consider archive source URL for all extensions in R-tesseract easyconfig ( `#8897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8897> `_ ) * add pkg-config build dep for tesseract v4.0.0 ( `#8898 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8898> `_ ) * fix ``source_urls`` in byacc easyconfig files ( `#8899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8899> `_ , `#8908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8908> `_ ) * add missing cairo dependency to PRINSEQ easyconfig file ( `#8902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8902> `_ ) * configure OpenMPI 1.10.x with ``--without-ucx`` to avoid problems when ``ucx-devel`` is installed in the OS ( `#8903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8903> `_ ) * add GDAL 3.0.0 for Python 2.7.15 and fix the Python 3.7.2 version ( `#8912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8912> `_ ) * fix homepage & description in scikit-image easyconfigs ( `#8916 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8916> `_ ) * add faulthandler patches to Python 3.7.0 easyconfigs ( `#8832 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8832> `_ ) * other changes: * archive ancient CUDA 5.0.35 easyconfigs with creative way of determining sources ( `#7796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7796> `_ ) * remove ancient easyconfigs from archive ( `#8542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8542> `_ ) * archive easyconfigs using deprecated toolchains ( `#8557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8557> `_ , `#8558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8558> `_ , `#8585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8585> `_ ) * archive ancient versions of GC3Pie/GCC/OpenMPI/ORCA ( `#8586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8586> `_ ) & CPLEX ( `#8765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8765> `_ ) * rename SALMON to SALMON-TDDFT to fix name clash with Salmon ( `#8613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8613> `_ ) * bump AnnotationDb version in bundle for Bioconductor 3.9 ( `#8854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8854> `_ ) * stop trying to use ``setuptools.setup`` in ``setup.py`` , always use ``distutils.core.setup`` instead ( `#8866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8866> `_ , `#8892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8892> `_ , `#8894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8894> `_ ) * archive easyconfigs using ancient ``Cray*`` toolchains ( `#8945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8945> `_ ) .. _release_notes_eb394: EasyBuild v3.9.4 (August 23rd 2019) ----------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for specifying checksum via dict providing a filename-to-checksum mapping ( `#2946 <https://github.com/easybuilders/easybuild-framework/pull/2946> `_ ) * enhance 'completed' message with how much time was needed for the installation ( `#2956 <https://github.com/easybuilders/easybuild-framework/pull/2956> `_ ) * add support for specifying tuple of alternative checksums ( `#2958 <https://github.com/easybuilders/easybuild-framework/pull/2958> `_ ) * support using ' ``system`` ' as alias for ' ``dummy`` ' toolchain + ``SYSTEM`` constant ( `#2960 <https://github.com/easybuilders/easybuild-framework/pull/2960> `_ ) * ensure ' ``docurls`` ' easyconfig parameter value is a list of string values, not a single string value ( `#2963 <https://github.com/easybuilders/easybuild-framework/pull/2963> `_ ) * automatically enable ``--ignore-osdeps`` when using ``--check-contrib`` or ``--check-style`` ( `#2965 <https://github.com/easybuilders/easybuild-framework/pull/2965> `_ ) * various bug fixes, including: * escape ' ``+`` ' in search queries + handle invalid search queries better ( `#2967 <https://github.com/easybuilders/easybuild-framework/pull/2967> `_ ) * also consider extension patches when determining for which easyconfig a given patch file is intended in ``--new-pr`` / ``--update-pr`` ( `#2969 <https://github.com/easybuilders/easybuild-framework/pull/2969> `_ ) * unset ``$CDPATH`` early on if it is defined ( `#2970 <https://github.com/easybuilders/easybuild-framework/pull/2970> `_ ) * create specified temporary log directory if it doesn't exist yet in ``init_logging`` ( `#2972 <https://github.com/easybuilders/easybuild-framework/pull/2972> `_ ) * don't indicate first multi_deps version as default in module help text when ``multi_deps_load_default=False`` ( `#2973 <https://github.com/easybuilders/easybuild-framework/pull/2973> `_ ) * other changes: * deprecate toolchains older than ``gompi/2016a`` and ``foss/2016a`` ( `#2951 <https://github.com/easybuilders/easybuild-framework/pull/2951> `_ ) **easyblocks** * new software-specific easyblock for MSM ( `#1770 <https://github.com/easybuilders/easybuild-easyblocks/pull/1770> `_ , `#1775 <https://github.com/easybuilders/easybuild-easyblocks/pull/1775> `_ , `#1776 <https://github.com/easybuilders/easybuild-easyblocks/pull/1776> `_ ) * minor enhancements, including: * allow specifying the license file directly in MATLAB easyblock ( `#1712 <https://github.com/easybuilders/easybuild-easyblocks/pull/1712> `_ ) * enhance CPLEX easyblock to also build Python bindings ( `#1738 <https://github.com/easybuilders/easybuild-easyblocks/pull/1738> `_ ) * workaround for XCrySDen for Tcl 8.6 ( `#1749 <https://github.com/easybuilders/easybuild-easyblocks/pull/1749> `_ ) * update WIEN2k easyblock to support version 19.1 ( `#1758 <https://github.com/easybuilders/easybuild-easyblocks/pull/1758> `_ ) * resolve custom ``%(cudaarch)s`` template value for CUDA sources ( `#1766 <https://github.com/easybuilders/easybuild-easyblocks/pull/1766> `_ ) * enhance sanity check for Blender to make sure that Cycles render engine is available ( `#1779 <https://github.com/easybuilders/easybuild-easyblocks/pull/1779> `_ ) * various bug fixes, including: * only check for qtwebengine in custom easyblock for Qt(5) if glibc is sufficiently recent ( `#1771 <https://github.com/easybuilders/easybuild-easyblocks/pull/1771> `_ ) * correctly define ``comp.src`` in Bundle easyblock, to fix compatibility with easyblocks that leverage ``self.src`` ( `#1777 <https://github.com/easybuilders/easybuild-easyblocks/pull/1777> `_ ) * fix ``Bundle.check_checksums`` to checksums for extensions are also checked ( `#1778 <https://github.com/easybuilders/easybuild-easyblocks/pull/1778> `_ ) **easyconfigs** * added example easyconfig files for 36 new software packages: * ArrayFire ( `#8461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8461> `_ ), BRAKER ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), bwidget ( `#8477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8477> `_ ), Catch2 ( `#8703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8703> `_ ), core-counter ( `#8749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8749> `_ ), CubeGUI ( `#6328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6328> `_ ), CubeLib ( `#6328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6328> `_ ), CubeWriter ( `#6328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6328> `_ ), dagitty ( `#8606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8606> `_ ), enaBrowserTool ( `#8795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8795> `_ ), GEMMA ( `#8270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8270> `_ ), GeneMark-ET ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), GenomeThreader ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), ieeg-cli ( `#8793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8793> `_ , `#8811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8811> `_ ), Judy ( `#8543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8543> `_ ), Julia ( `#8578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8578> `_ ), libaio ( `#8543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8543> `_ ), libtirpc ( `#8792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8792> `_ ), magick ( `#8545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8545> `_ ), MSM ( `#8556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8556> `_ ), MSPC ( `#8531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8531> `_ ), mygene ( `#8809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8809> `_ ), OpenMolcas ( `#7699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7699> `_ ), PhiPack ( `#8750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8750> `_ ), plc ( `#8796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8796> `_ ), plotly.py ( `#8756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8756> `_ ), pymemcache ( `#8663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8663> `_ ), PySCF ( `#8736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8736> `_ ), qcint ( `#8736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8736> `_ ), Qiskit ( `#7592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7592> `_ ), QuaZIP ( `#8672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8672> `_ ), re2c ( `#8543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8543> `_ ), SeqAn3 ( `#8651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8651> `_ ), snippy ( `#8635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8635> `_ ), spaln ( `#8437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8437> `_ ), V8 ( `#8676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8676> `_ ) * added additional easyconfigs for various supported software packages, including: * ASE 3.18.0, BEDTools 2.28.0, Bowtie 1.2.3, bzip2 1.0.8, CPLEX 12.9, CUDA 10.1 update 2, cyvcf2 0.11.5, EIGENSOFT 7.2.1, GC3Pie 2.5.2, GCC(core) 9.2.0, GPAW 19.8.1, GlobalArrays 5.7, IMB 2019.3, imageio 2.5.0, jemalloc 5.2.0, nodejs 10.15.3, PyTorch 1.1.0, pybedtools 0.8.0, Quandl 3.4.8, R 3.6.0 w/ intel/2019a, R-bundle-Bioconductor 3.9, Salmon 0.14.1, Scalasca 2.5, Score-P 6.0, Stacks 2.41, TensorFlow 1.14.0, ToFu 1.4.0, WIEN2k 19.1, Wannier90 3.0.0, XCrySDen 1.5.60 * minor enhancements, including: * add patch and dependencies to easyconfig for Qt5 5.12.3 to fix Xlib support & enhance the installation ( `#8544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8544> `_ ) * update nodejs to version 10.15.3 and build libnode and libv8 shared libs ( `#8546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8546> `_ ) * add extensions to R 3.6.0 easyconfig: ``MIIVsem`` ( `#8565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8565> `_ ), ``medflex`` ( `#8680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8680> `_ ), ``Rserve`` / ``spls`` ( `#8758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8758> `_ ), ``Boruta`` / ``CovSel`` / ``ctmle`` / ``BayesPen`` ( `#8805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8805> `_ ) * include PyQtWebEngine bindings in easyconfig for PyQt5 5.12.1 using Python 3.7.2 ( `#8572 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8572> `_ ) * switch GLX backend to Gallium in Mesa-19.0.1 ( `#8594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8594> `_ ) * various bug fixes, including: * fix typo in description in GroopM easyconfig file ( `#8346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8346> `_ ) * add missing bugfix patch to easyconfig for OpenMPI 3.1.4 ( `#8566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8566> `_ ) * downgrade AtomPAW to last supported version in ABINIT 8.10.3 ( `#8571 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8571> `_ ) * switch easyconfig for glew 2.1.0 to ``ConfigureMake`` easyblock ( `#8595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8595> `_ ) * fix checksum for source tarball in ``foss/2018b`` easyconfig of NAMD v2.13 ( `#8602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8602> `_ ) * update URL for bzip2 easyconfigs ( `#8614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8614> `_ ) * add patch for M4 1.4.17 to fix installation on top of glibc 2.28 ( `#8666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8666> `_ ) * add patch for Bison 3.0.4 to fix installation on top of glibc 2.28 ( `#8675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8675> `_ ) - avoid needless requirement for matplotlib < 3.0.0 in MultiQC easyconfigs ( `#8691 <https://github.com/easybuilders/easybuild-easyblocks/pull/8691> `_ ) * fix checksum in OpenMPI 1.8.8 easyconfigs ( `#8692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8692> `_ ) * add alternative checksums for ``nlme`` / ``mgcv`` / ``foreign`` / ``boot`` extensions in R 3.5.1 and 3.6.0 easyconfigs ( `#8564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8564> `_ , `#8762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8762> `_ ) * add missing core-counter dependency for worker 1.6.8 ( `#8749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8749> `_ ) * add missing pkg-config build dependency in various easyconfigs for ( `#8763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8763> `_ , `#8775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8775> `_ , `#8777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8777> `_ , `#8776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8776> `_ , `#8764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8764> `_ , `#8787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8787> `_ , `#8816 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8816> `_ ) * add patch to Python 3.7.2 easyconfig to fix faulthandler segfault ( `#8781 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8781> `_ ) * set ``$CPLUS_INCLUDE_PATH`` in easyconfigs for older matplotlib versions ( `#8785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8785> `_ ) * patch out removed glibc 2.28 header from GCC libsanitizer ( `#8789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8789> `_ ) * include ``sysmacros.h`` directly to work around removal from glibc header in numactl easyconfig ( `#8790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8790> `_ ) * adapt gzip's bundled gnulib for glibc 2.28 ( `#8791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8791> `_ ) * add libtirpc and depend on it in easyconfig for libdap 3.20.3 ( `#8792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8792> `_ ) * add missing YAML extension to Perl 5.28.0 easyconfig (required by BioPerl scripts) ( `#8806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8806> `_ ) * other changes: * remove broken easyconfigs for ciftify due to non-trivial missing dependencies ( `#8560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8560> `_ ) .. _release_notes_eb393: EasyBuild v3.9.3 (July 8th 2019) ---------------------- bugfix/update release **framework** * various enhancements, including: * add a URL whatis line to generated module files ( `#2933 <https://github.com/easybuilders/easybuild-framework/pull/2933> `_ ) * various bug fixes, including: * stick to Ubuntu Trusty when testing with Python 2.6 in Travis ( `#2928 <https://github.com/easybuilders/easybuild-framework/pull/2928> `_ ) * honor ``--tmp-logdir`` when determining location of temporary log file ( `#2937 <https://github.com/easybuilders/easybuild-framework/pull/2937> `_ ) **easyblocks** * minor enhancements, including: * also install docs and demos in Rosetta easyblock ( `#1745 <https://github.com/easybuilders/easybuild-easyblocks/pull/1745> `_ ) * update HEALPix easyblock to work with latest version of HEALPix' ``configure.sh`` ( `#1752 <https://github.com/easybuilders/easybuild-easyblocks/pull/1752> `_ ) * make HPCG log pattern more generic, it changed in 3.1 ( `#1753 <https://github.com/easybuilders/easybuild-easyblocks/pull/1753> `_ ) * allow bootstrapping GCC with profile-guided optimizations ( `#1756 <https://github.com/easybuilders/easybuild-easyblocks/pull/1756> `_ ) * only require vsc-base for EasyBuild 2.x and 3.x in EasyBuildMeta easyblock ( `#1757 <https://github.com/easybuilders/easybuild-easyblocks/pull/1757> `_ ) * extend question patterns with ' ``https`` ' URL entry in Modeller easyblock for recent versions ( `#1762 <https://github.com/easybuilders/easybuild-easyblocks/pull/1762> `_ ) * ``modextrapaths`` implemented on easyblock level, ``sanity_check_step`` , ``gcc_target`` added in HEALPix easyblock ( `#1763 <https://github.com/easybuilders/easybuild-easyblocks/pull/1763> `_ ) * update OpenBLAS easyblock to be aware of POWER9 support in OpenBLAS 0.3.6 ( `#1765 <https://github.com/easybuilders/easybuild-easyblocks/pull/1765> `_ ) * various bug fixes, including: * stick to Ubuntu Trusty when testing with Python 2.6 in Travis ( `#1751 <https://github.com/easybuilders/easybuild-easyblocks/pull/1751> `_ ) * fix scripts installation path in SNPhylo easyblock ( `#1759 <https://github.com/easybuilders/easybuild-easyblocks/pull/1759> `_ ) * be more patient when running interactive ``Allwmake.firstInstall`` command for recent OpenFOAM-Extend versions ( `#1761 <https://github.com/easybuilders/easybuild-easyblocks/pull/1761> `_ ) * also add ``--without-go`` configure option for SWIG as we \"disable everything by default\" ( `#1754 <https://github.com/easybuilders/easybuild-easyblocks/pull/1754> `_ ) * don't assume cmake arguments when configure_cmd is set in CMakeMake easyblock ( `#1750 <https://github.com/easybuilders/easybuild-easyblocks/pull/1750> `_ ) **easyconfigs** * added example easyconfig files for 25 new software packages: * Arb ( `#8137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8137> `_ ), AtomPAW ( `#8506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8506> `_ ), ciftify ( `#8457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8457> `_ ), cysignals ( `#8459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8459> `_ ), deal.II ( `#8440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8440> `_ ), FastQTL ( `#8449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8449> `_ ), FLINT ( `#8137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8137> `_ ), gdbgui ( `#8488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8488> `_ ), gearshifft ( `#8482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8482> `_ ), jbigkit ( `#8442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8442> `_ ), lavaan ( `#8539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8539> `_ ), libRmath ( `#8449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8449> `_ ), OR-Tools ( `#8364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8364> `_ , `#8523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8523> `_ ), p4est ( `#8440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8440> `_ ), ppl ( `#8459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8459> `_ ), pplpy ( `#8459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8459> `_ ), PRISMS-PF ( `#8440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8440> `_ ), PyAPS3 ( `#8398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8398> `_ ), pyEGA3 ( `#8418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8418> `_ ), ReFrame ( `#8481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8481> `_ ), S4 ( `#8487 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8487> `_ ), SALMON ( `#8478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8478> `_ ), TM-align ( `#8510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8510> `_ ), UnZip ( `#8474 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8474> `_ ), XTandem ( `#8517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8517> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 8.10.3, CFITSIO 3.47, GDB 8.3, GROMACS 2019.3, HEALPix 3.50, HPCG 3.1, Nilearn 0.5.2, OpenBLAS 0.3.6, Xerces-C++ 3.2.0 * minor enhancements, including: * update easyconfig for CFITSIO 3.45 with https and sanity check ( `#8472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8472> `_ ) * add AtomPAW and Wannier90 support to ABINIT 8.10.2 easyconfig ( `#8506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8506> `_ ) * add ' ``resample`` ' extension to R 3.5.1 + 3.6.0 easyconfigs ( `#8538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8538> `_ ) * various bug fixes, including: * fix source URLs for Mesa 17.{2,3} with fosscuda toolchain ( `#8446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8446> `_ ) * add in Boost dependency to canu-1.8 easyconfigs using ``foss`` toolchain ( `#8470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8470> `_ ) * stick to Ubuntu Trusty when testing with Python 2.6 in Travis ( `#8483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8483> `_ ) * fix incorrect order of extensions for Python-2.7.14 easyconfigs ( ``pycparser`` and ``cffi`` must come before ``cryptography`` ) ( `#8495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8495> `_ ) * suppress installation of ``libbfd`` and ``libopcode`` for GDB ( `#8496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8496> `_ ) * fix KronaTools easyconfigs to make sure symlinks in bin are not broken ( `#8508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8508> `_ ) * make additional configopts in PETSc easyconfigs work after uncommenting ( `#8522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8522> `_ ) * add ``pkg-config`` build dep to easyconfig for pocl 1.2 ( `#8528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8528> `_ ) * download correct source tarball for Net-core 2.1.8 ( `#8530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8530> `_ ) * fix ' ``Permission denied`` ' error when running ' ``cp -a`` ' for ANTs 2.3.1 installation by first removing the ``.git`` subdirectories causing them ( `#8535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8535> `_ ) * fix checksum for boot 1.3-22 extension in R 3.6.0 easyconfig ( `#8537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8537> `_ ) .. _release_notes_eb392: EasyBuild v3.9.2 (June 9th 2019) -------------------------------- bugfix/update release **framework** - various enhancements, including: - enhance (experimental) support for generating Singularity container recipes/images ( `#2884 <https://github.com/easybuilders/easybuild-framework/pull/2884> `_ , `#2900 <https://github.com/easybuilders/easybuild-framework/pull/2900> `_ , `#2902 <https://github.com/easybuilders/easybuild-framework/pull/2902> `_ , `#2903 <https://github.com/easybuilders/easybuild-framework/pull/2903> `_ , `#2907 <https://github.com/easybuilders/easybuild-framework/pull/2907> `_ , `#2909 <https://github.com/easybuilders/easybuild-framework/pull/2909> `_ , `#2910 <https://github.com/easybuilders/easybuild-framework/pull/2910> `_ , `#2913 <https://github.com/easybuilders/easybuild-framework/pull/2913> `_ , `#2915 <https://github.com/easybuilders/easybuild-framework/pull/2915> `_ ) - add support for specifying container configuration via ``--container-config`` ( ``--container-base`` option has been removed) - add support for providing custom template for container recipe via ``--container-template-recipe`` - add support for ' ``sif`` ' Singularity 3.x container image format - add support for specifying non-image based Singularity bootstrap agents - install default set of OS packages in container recipes starting from scratch - configure Lmod and update Lmod spider cache in generated Singularity container recipes - configure EasyBuild via environment variables (to allow overriding configuration settings via options to ' ``eb`` ' command) - also consider ``/tmp/easybuild/sources`` in source path (to allow seeding in sources in container build environment) - updated documentation is available at https://easybuild.readthedocs.io/en/latest/Containers.html - various bug fixes, including: - make sure that easyconfig file for EasyBuild version being bootstrapped is found in robot search path ( `#2899 <https://github.com/easybuilders/easybuild-framework/pull/2899> `_ ) - remove interpreter options when fixing script shebang ( `#2905 <https://github.com/easybuilders/easybuild-framework/pull/2905> `_ , `#2906 <https://github.com/easybuilders/easybuild-framework/pull/2906> `_ ) - fix crash on iterated installation when using Cray toolchains ( `#2914 <https://github.com/easybuilders/easybuild-framework/pull/2914> `_ ) - disable checking of read/exec permissions when checking for availability of ' ``sudo`` ' command ( `#2918 <https://github.com/easybuilders/easybuild-framework/pull/2918> `_ ) - other changes: - stick to vsc-base < 2.9.0 in bootstrap script to avoid requiring ' ``future`` ' dependency ( `#2892 <https://github.com/easybuilders/easybuild-framework/pull/2892> `_ ) **easyblocks** - new software-specific easyblock for ELPA ( `#1621 <https://github.com/easybuilders/easybuild-easyblocks/pull/1621> `_ ) - minor enhancements, including: - allow Boost to build both Python 2 and Python 3 libraries ( `#1718 <https://github.com/easybuilders/easybuild-easyblocks/pull/1718> `_ ) - update CPLEX sanity check: convert tool was removed in CPLEX 12.8 ( `#1737 <https://github.com/easybuilders/easybuild-easyblocks/pull/1737> `_ ) - don't try to patch ``CROSSTOOL`` script for recent Bazel versions (since it's no longer there) ( `#1741 <https://github.com/easybuilders/easybuild-easyblocks/pull/1741> `_ ) - various bug fixes, including: - fix version check on using ' ``-log`` ' option to ' ``Allwmake`` ' in OpenFOAM easyblock ( `#1739 <https://github.com/easybuilders/easybuild-easyblocks/pull/1739> `_ ) - fix GROMACS easyblock for list-type ``configopts`` ( `#1740 <https://github.com/easybuilders/easybuild-easyblocks/pull/1740> `_ ) - fix configure step for GROMACS version < 4.6 ( `#1742 <https://github.com/easybuilders/easybuild-easyblocks/pull/1742> `_ ) **easyconfigs** - added example easyconfig files for 17 new software packages: - adjustText ( `#8354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8354> `_ ), cowsay ( `#8380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8380> `_ ), fxtract ( `#8426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8426> `_ ), google-java-format ( `#8373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8373> `_ ), libtar ( `#8379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8379> `_ ), mkl-service ( `#8390 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8390> `_ ), msprime ( `#8371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8371> `_ ), pygrib ( `#8395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8395> `_ ), pyhdf ( `#8394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8394> `_ ), pyproj ( `#8395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8395> `_ ), PyStan ( `#8410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8410> `_ ), Racon ( `#8358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8358> `_ ), rapidtide ( `#8256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8256> `_ ), SingleM ( `#8428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8428> `_ ), smafa ( `#8420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8420> `_ ), SVDetect ( `#8399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8399> `_ ), Unicycler ( `#8376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8376> `_ ) - added additional easyconfigs for various supported software packages, including: - BLAST+ 2.9.0, Boost.Python 1.70.0, DIAMOND 0.9.24, EMAN2 2.3, ecCodes 2.12.5, GDAL 3.0.0, ImageMagick 7.0.8-46, Libint 2.5.0, matplotlib 2.2.4, NLopt 2.6.1, OrfM 0.7.1, PGI 19.4, PostgreSQL 11.3, R 3.6.0, R-bundle-Bioconductor 3.8, Rust 1.35.0, STAR 2.7.1a - minor enhancements, including: - use CMake rather than configure script for libxc 4.3.4 ( `#8361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8361> `_ , `#8453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8453> `_ ) - add ' ``cobs`` ' extension to R 3.5.1 easyconfigs ( `#8389 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8389> `_ ) - add sanity check command to PSI4 1.2.1 easyconfigs to ensure that ' ``import psi4`` ' works ( `#8393 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8393> `_ ) - include the provided backports patch in QuantumESPRESSO-6.4.1 ( `#8405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8405> `_ ) - add ``Logger::Simple`` , ``Scalar::Util::Numeric`` , ``YAML`` , ``Object::InsideOut`` extensions to Perl 5.28.1 easyconfig ( `#8432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8432> `_ ) - update Java 1.8 to 1.8.0_212 ( `#8443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8443> `_ ) - various bug fixes, including: - add missing build dependency on gettext to ATK/2.28.1 for fosscuda/2018b ( `#8402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8402> `_ ) - add patch to fix OpenBLAS v0.3.1 matrices multiplication issue ( `#8396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8396> `_ ) - make Eigen a build dependency for nanopolish ( `#8448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8448> `_ ) - other changes: - clean up ELPA 2018.11.001 easyconfig to use custom easyblock for ELPA ( `#8360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8360> `_ ) - remove unused checksum for ``ballgown`` extension in Bioconductor 3.7 easyconfigs ( `#8363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8363> `_ ) .. _release_notes_eb391: EasyBuild v3.9.1 (May 20th 2019) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add function to determine whether specified easyblock is generic or not ( `#2838 <https://github.com/easybuilders/easybuild-framework/pull/2838> `_ ) * add support to ``apply_regex_substitutions`` function to skip creation of backup ( `#2844 <https://github.com/easybuilders/easybuild-framework/pull/2844> `_ ) * add support for ``%(pymajver)s`` (& co) ( `#2850 <https://github.com/easybuilders/easybuild-framework/pull/2850> `_ ) * add support for ' ``fix_python_shebang_for`` ' and ' ``fix_perl_shebang_for`` ' easyconfig parameters ( `#2878 <https://github.com/easybuilders/easybuild-framework/pull/2878> `_ ) * add ``multi_deps`` information to generated module, help and whatis sections ( `#2882 <https://github.com/easybuilders/easybuild-framework/pull/2882> `_ ) * add support for ' ``eb --missing`` ' (' ``eb -M`` ') ( `#2883 <https://github.com/easybuilders/easybuild-framework/pull/2883> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Using_the_EasyBuild_command_line.html#getting-an-overview-of-missing-installations-missing-m * various bug fixes, including: * only call ' ``scontrol release`` ' when there's at least one job submitted ( `#2834 <https://github.com/easybuilders/easybuild-framework/pull/2834> `_ ) * fix small bug in ``find_eb_script`` + various minor issues with tests (related to environment in which tests are run) ( `#2835 <https://github.com/easybuilders/easybuild-framework/pull/2835> `_ ) * list build dependencies *before* runtime dependencies, so dependencies listed via ``multi_deps`` are loaded first in toolchain environment ( `#2839 <https://github.com/easybuilders/easybuild-framework/pull/2839> `_ ) * allow setting parallel to ``0`` or ``False`` to disable adding the ``-j`` argument ( `#2842 <https://github.com/easybuilders/easybuild-framework/pull/2842> `_ ) * be more careful when using single quotes for Tcl syntax ( `#2847 <https://github.com/easybuilders/easybuild-framework/pull/2847> `_ ) * append to existing ``.modulerc`` file rather than overwriting it (if ``--force`` is used) ( `#2848 <https://github.com/easybuilders/easybuild-framework/pull/2848> `_ ) * correctly resolve template values used for extensions ( `#2852 <https://github.com/easybuilders/easybuild-framework/pull/2852> `_ ) * update template values after updating iterative easyconfig parameters ( `#2854 <https://github.com/easybuilders/easybuild-framework/pull/2854> `_ ) * add top-level directories of hierarchical module naming scheme to ``$MODULEPATH`` before loading dependencies ( `#2857 <https://github.com/easybuilders/easybuild-framework/pull/2857> `_ ) * inject dependencies specified via ``multi_deps`` before normal build dependencies ( `#2861 <https://github.com/easybuilders/easybuild-framework/pull/2861> `_ ) * include Python version(s) in PR titles auto-generated by ``--new-pr`` ( `#2863 <https://github.com/easybuilders/easybuild-framework/pull/2863> `_ , `#2880 <https://github.com/easybuilders/easybuild-framework/pull/2880> `_ ) * update ``HierarchicalMNS`` for GCCcore toolchain ( `#2870 <https://github.com/easybuilders/easybuild-framework/pull/2870> `_ ) * bump iteration index counter at the correct time ( `#2886 <https://github.com/easybuilders/easybuild-framework/pull/2886> `_ ) * don't specify ``--ntasks-per-node`` when submitting Slurm jobs ( `#2887 <https://github.com/easybuilders/easybuild-framework/pull/2887> `_ ) * fix order of easyconfig parameters in output generated by ' ``eb --avail-easyconfig-params --output-format rst`` ' ( `#2888 <https://github.com/easybuilders/easybuild-framework/pull/2888> `_ ) * other changes: * lower required version in Slurm job backend to 16.05 ( `#2833 <https://github.com/easybuilders/easybuild-framework/pull/2833> `_ ) * add Lmod 8 to test suite ( `#2849 <https://github.com/easybuilders/easybuild-framework/pull/2849> `_ ) * deprecate useless 'skip_lower' named argument in template_constant_dict, always define ``*lower`` templates ( `#2856 <https://github.com/easybuilders/easybuild-framework/pull/2856> `_ ) * fix Python classifiers in ``setup.py`` , should be (only) Python 2.6 & 2.7 ( `#2876 <https://github.com/easybuilders/easybuild-framework/pull/2876> `_ ) **easyblocks** * one new generic easyblock: ``CMakeMakeCp`` ( `#1725 <https://github.com/easybuilders/easybuild-easyblocks/pull/1725> `_ ) * new software-specific easyblock for Blender ( `#1595 <https://github.com/easybuilders/easybuild-easyblocks/pull/1595> `_ ), Lua ( `#1396 <https://github.com/easybuilders/easybuild-easyblocks/pull/1396> `_ ), OpenBLAS ( `#1693 <https://github.com/easybuilders/easybuild-easyblocks/pull/1693> `_ , `#1697 <https://github.com/easybuilders/easybuild-easyblocks/pull/1697> `_ ) * OpenBLAS easyblock also supports installation on POWER systems * minor enhancements, including: * enhance VMD easyblock to also build Surf & Stride + pick up netCDF for VMD >= 1.9.3 ( `#1314 <https://github.com/easybuilders/easybuild-easyblocks/pull/1314> `_ ) * update CGAL easyblock to support CGAL 4.12 & newer ( `#1679 <https://github.com/easybuilders/easybuild-easyblocks/pull/1679> `_ ) * update QuantumESPRESSO easyblock for v6.4.1 ( `#1692 <https://github.com/easybuilders/easybuild-easyblocks/pull/1692> `_ ) * enhance Advisor & VTune easyblocks, since no license is required starting with version 2019 update 3 ( `#1694 <https://github.com/easybuilders/easybuild-easyblocks/pull/1694> `_ , `#1695 <https://github.com/easybuilders/easybuild-easyblocks/pull/1695> `_ ) * handle new multi-deps Python setup with ``$EBPYTHONPREFIXES`` for Tensorflow ( `#1702 <https://github.com/easybuilders/easybuild-easyblocks/pull/1702> `_ ) * make CHARMM easyblock pick up on ``prebuildopts`` and ``runtest`` ( `#1707 <https://github.com/easybuilders/easybuild-easyblocks/pull/1707> `_ ) * change default value for ``'use_pip`` ' to None, so we can discriminate from ' ``use_pip`` ' being set to False explicitly ( `#1709 <https://github.com/easybuilders/easybuild-easyblocks/pull/1709> `_ ) * make PythonPackage aware of ``(pre)testopts`` ( `#1715 <https://github.com/easybuilders/easybuild-easyblocks/pull/1715> `_ ) * enable GPU offloading in Clang if CUDA is included as a dep ( `#1716 <https://github.com/easybuilders/easybuild-easyblocks/pull/1716> `_ ) * add support to Clang easyblock for also building libc++ and RTTI ( `#1717 <https://github.com/easybuilders/easybuild-easyblocks/pull/1717> `_ ) * rebuild internal libfabric for impi 2019.x & more recent ( `#1730 <https://github.com/easybuilders/easybuild-easyblocks/pull/1730> `_ ) * update Q&A patterns in SAS easyblock for version 9.4 + add support for custom license file path ( `#1731 <https://github.com/easybuilders/easybuild-easyblocks/pull/1731> `_ ) * various bug fixes, including: * only install mkl-dnn by default with TensorFlow on x86-64 systems ( `#1666 <https://github.com/easybuilders/easybuild-easyblocks/pull/1666> `_ ) * make sure ``ldconfig`` can be found before using it in CUDA easyblock ( `#1684 <https://github.com/easybuilders/easybuild-easyblocks/pull/1684> `_ ) * use temporary directory for pip cache (rather than ``$HOME/.cache/pip`` ) in ``PythonPackage`` easyblock ( `#1687 <https://github.com/easybuilders/easybuild-easyblocks/pull/1687> `_ ) * allow oversubscription when testing FFTW on top of OpenMPI >= 3.0 ( `#1688 <https://github.com/easybuilders/easybuild-easyblocks/pull/1688> `_ ) * make sure ``$HOME/.cache/pip`` isn't used while installing Tkinter ( `#1691 <https://github.com/easybuilders/easybuild-easyblocks/pull/1691> `_ ) * set default ``exts_filter`` in ``PythonBundle`` , so already installed extensions in a bundle can be skipped ( `#1701 <https://github.com/easybuilders/easybuild-easyblocks/pull/1701> `_ ) * instruct Bazel to not use ``$HOME/.cache/bazel`` in TensorFlow easyblock ( `#1704 <https://github.com/easybuilders/easybuild-easyblocks/pull/1704> `_ ) * also set ``$XDG_CACHE_HOME`` during installation of Python, to ensure that ' ``pip`` ' that comes along with it doesn't touch ``$HOME/.cache/pip`` ( `#1705 <https://github.com/easybuilders/easybuild-easyblocks/pull/1705> `_ ) * use ``-fp-model precise`` if FMA instructions are missing in GROMACS easyblock ( `#1706 <https://github.com/easybuilders/easybuild-easyblocks/pull/1706> `_ ) * make sure Perl install dir follows a standard format ( `#1708 <https://github.com/easybuilders/easybuild-easyblocks/pull/1708> `_ ) * attach ``source_urls`` directly to sources for components in generic ``Bundle`` easyblock ( `#1711 <https://github.com/easybuilders/easybuild-easyblocks/pull/1711> `_ ) * avoid that ``--no-build-isolation`` option is specified multiple times in ``PythonPackage`` easyblock ( `#1713 <https://github.com/easybuilders/easybuild-easyblocks/pull/1713> `_ ) * fix prefix in impi compiler wrappers ( `#1727 <https://github.com/easybuilders/easybuild-easyblocks/pull/1727> `_ ) * only embed zlib in binutils if it is listed a build dependency ( `#1732 <https://github.com/easybuilders/easybuild-easyblocks/pull/1732> `_ ) * other changes: * fix Python classifiers in ``setup.py`` , should be (only) Python 2.6 & 2.7 ( `#1724 <https://github.com/easybuilders/easybuild-easyblocks/pull/1724> `_ ) **easyconfigs** * added easyconfigs for new toolchains: * ``fosscuda/2019a`` ( `#8063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8063> `_ ), ``gimkl/2018b`` ( `#8287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8287> `_ ), ``gomkl/2018b`` ( `#8216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8216> `_ ), ``gomkl/2019a`` ( `#8218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8218> `_ ), intelcuda/2019a ( `#8069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8069> `_ ) * added example easyconfig files for 52 new software packages: * ADDA ( `#8207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8207> `_ ), AMD-LibM ( `#7164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7164> `_ ), AMD-RNG ( `#7165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7165> `_ ), AMD-SecureRNG ( `#7165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7165> `_ ), ARGoS ( `#8039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8039> `_ , `#8104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8104> `_ ), ARWEN ( `#8213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8213> `_ ), Canvas ( `#7716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7716> `_ ), cdsapi ( `#7970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7970> `_ ), charmm ( `#8202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8202> `_ ), emcee ( `#7989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7989> `_ ), FlexiDot ( `#8228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8228> `_ , `#8275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8275> `_ ), FreeImage ( `#8039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8039> `_ ), Hello ( `#7704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7704> `_ ), HLAminer (8094), hypothesis ( `#8307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8307> `_ ), imgaug ( `#8229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8229> `_ ), INTEGRATE ( `#8193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8193> `_ , `#8304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8304> `_ ), INTEGRATE-Neo ( `#8094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8094> `_ ), IRkernel ( `#8050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8050> `_ , `#8099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8099> `_ ), JiTCODE ( `#7148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7148> `_ , `#8327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8327> `_ ), libFLAME ( `#7163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7163> `_ ), libpsml ( `#5859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5859> `_ ), LibSoup ( `#8116 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8116> `_ ), libutempter ( `#6426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6426> `_ ), LS-PrePost ( `#8070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8070> `_ ), LUSCUS ( `#7191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7191> `_ , `#8105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8105> `_ , `#8285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8285> `_ ), memory-profiler ( `#8255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8255> `_ ), metaWRAP ( `#7896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7896> `_ ), Net-core ( `#7716 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7716> `_ ), netMHC ( `#8094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8094> `_ ), Nextflow ( `#8195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8195> `_ ), nvtop ( `#8024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8024> `_ ), openpyxl ( `#8121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8121> `_ ), py-cpuinfo ( `#8245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8245> `_ ), pyFFTW ( `#8198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8198> `_ ), PyQtGraph ( `#7525 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7525> `_ , `#8253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8253> `_ ), R-tesseract ( `#7933 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7933> `_ ), RBFOpt ( `#8178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8178> `_ ), rnaQUAST ( `#8040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8040> `_ ), RStan ( `#7996 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7996> `_ ), scikit-multilearn ( `#8142 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8142> `_ ), simpy ( `#8177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8177> `_ , `#8250 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8250> `_ ), SMARTdenovo ( `#7630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7630> `_ ), socat ( `#8305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8305> `_ ), SymEngine ( `#7148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7148> `_ , `#8327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8327> `_ ), unixODBC ( `#8074 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8074> `_ ), VAtools ( `#7938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7938> `_ ), VirtualGL ( `#8008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8008> `_ ), WebKitGTK+ ( `#8118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8118> `_ , `#8241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8241> `_ ), xmlf90 ( `#5858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5858> `_ ), YAPS ( `#7976 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7976> `_ ), zingeR ( `#7264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7264> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.70.0, cairo 1.16.0, CGAL 4.14, Clang 8.0, cutadapt 2.1, dask 1.1.4, ELPA 2018.11.001, FFmpeg 4.1.3, GCC 9.1.0, GEOS 3.7.2, GLib 2.60.1, gmsh 4.2.2, GROMACS 2019.2, GTK+ 3.24.8, h5py 2.9.0, hwloc 1.11.12, Hypre 2.15.1, Mathematica 12.0.0, matplotlib 3.0.3, Mesa 19.0.1, NBO 7.0, NCL 6.6.2, NCO 4.7.9, NiBabel 2.4.0, numba 0.43.1, OpenMPI 3.1.4, OrthoFinder 2.3.3, PCMSolver 1.2.3, PETSc 3.11.1, PROJ 6.0.0, PyQt5 5.12.1, PyTorch 1.0.1, PyYAML 5.1, Qt5 5.12.3, QuantumESPRESSO 6.4.1, R 3.5.1 (w/ intel/2018b), RNAIndel 1.0.0, Ruby 2.6.3, scikit-learn 0.20.3, SLEPc 3.11.0, sympy 1.4, Tkinter 3.7.2, Vim 8.1.1209, VTK 8.2.0, wrf-python 1.3.1, wxPython 4.0.4, wxWidgets 3.0.4, xarray 0.12.1, zstd 1.4.0 * minor enhancements, including: * enable auto-download of VMD 1.9.3 + add patches for Surf and Stride ( `#7305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7305> `_ ) * add mlegp extension in R 3.5.1 easyconfigs ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ ) * add pkg-config file to bzip2 easyconfigs ( `#8200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8200> `_ ) * allow use of ' ``use_pip = False`` ' in easyconfigs if pip doesn't work ( `#8220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8220> `_ ) * various bug fixes, including: * fix checksums for nlme extensions in R easyconfigs ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ , `#8054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8054> `_ ) * add missing XZ dependency for Pysam > 0.12 ( `#7971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7971> `_ ) * define ``$GRACE_HOME`` in Grace easyconfigs, so that font dir can be located ( `#8048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8048> `_ ) * ``$XDG_DATA_DIRS`` must be set for GTK+ ( `#8089 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8089> `_ ) * add missing FriBidi dependency for Pango 1.43.0 ( `#8103 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8103> `_ ) * add (back) custom ``sanity_check_paths`` in recent Pango easyconfigs ( `#8106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8106> `_ ) * fix missing extensions in cutadapt 1.16 easyconfigs ( `#8130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8130> `_ ) * add missing cURL dependency for recent SAMtools versions ( `#8131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8131> `_ ) * add singledispatch extension to Python 2.7.15 easyconfig using ``GCCcore/8.2.0`` toolchain ( `#8164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8164> `_ ) * add missing X11 dependency for Gdk-Pixbuf 2.38.1 ( `#8222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8222> `_ ) * make sure ``hdf5r`` picks up HDF5 dependency in R 3.5.1 easyconfigs ( `#8223 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8223> `_ ) * enable zstd compression in GRASS 7.6.0 easyconfig ( `#8224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8224> `_ ) * add missing ICU dependency on ICU for Harfbuzz 2.4.0 ( `#8226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8226> `_ ) * disable AVX512 DGEMM kernels in OpenBLAS 0.3.5 ( `#8227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8227> `_ ) * fix homepage/description in OrthoFinder easyconfig ( `#8234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8234> `_ ) * add ``Parallel::ForkManager`` extension to Perl 5.28.x easyconfigs ( `#8247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8247> `_ ) * replace LibUUID dependencies with util-linux ( `#8258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8258> `_ ) * add jemalloc & pkg-config as build deps for Salmon 0.12.0 ( `#8264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8264> `_ ) * fix MAJIQ easyconfig by fixing order of extensions + avoid numpy test hang ( `#8272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8272> `_ ) * fix shebang in GLib Python script + clarify runtime dependency on Python ( `#8277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8277> `_ ) * add pkg-config and expat as (build) dependency for DBus ( `#8283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8283> `_ ) * define ``$GI_TYPELIB_PATH`` in GTK+ and Pango easyconfigs ( `#8246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8246> `_ , `#8286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8286> `_ ) * add pkg-config build dep to PROJ 6.0.0 easyconfig ( `#8309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8309> `_ ) * fix source URLS in recent libcerf easyconfigs ( `#8332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8332> `_ , `#8243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8243> `_ ) * make zlib a real dependency rather than a build dep in recent binutils easyconfigs (>= 2.28) ( `#8340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8340> `_ ) * add fix-ib-query patch to OpenMPI 2.1.x and 3.0.x easyconfigs ( `#8341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8341> `_ ) * set ``$XDG_CACHE_HOME`` to $TMPDIR before ' ``pip install`` ' in Arrow 0.12.0 easyconfigs ( `#8347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8347> `_ ) * other changes: * remove xbitmaps dependency from motif ( `#7530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7530> `_ ) * require custom ``sanity_check_paths`` in easyconfigs touched in PRs when generic easyblock is used ( `#8101 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8101> `_ , `#8123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8123> `_ ) * use CMake built with GCCcore toolchain when installing Eigen 3.3.4+ ( `#8261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8261> `_ ) * fix Python classifiers in ``setup.py`` , should be (only) Python 2.6 & 2.7 ( `#8299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8299> `_ ) * use custom easyblock for OpenBLAS in OpenBLAS 0.3.x easyconfigs ( `#8345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8345> `_ , `#8339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8339> `_ ) .. _release_notes_eb390: EasyBuild v3.9.0 (April 12th 2019) ---------------------------------- feature release **framework** * various enhancements, including: * add ``(pre)testopts`` easyconfig parameters ( `#2793 <https://github.com/easybuilders/easybuild-framework/pull/2793> `_ ) * add support for ``multi_deps`` easyconfig parameter ( `#2741 <https://github.com/easybuilders/easybuild-framework/pull/2741> `_ , `#2810 <https://github.com/easybuilders/easybuild-framework/pull/2810> `_ , `#2811 <https://github.com/easybuilders/easybuild-framework/pull/2811> `_ , `#2812 <https://github.com/easybuilders/easybuild-framework/pull/2812> `_ , `#2813 <https://github.com/easybuilders/easybuild-framework/pull/2813> `_ , `#2825 <https://github.com/easybuilders/easybuild-framework/pull/2825> `_ , `#2826 <https://github.com/easybuilders/easybuild-framework/pull/2826> `_ , `#2827 <https://github.com/easybuilders/easybuild-framework/pull/2827> `_ , `#2828 <https://github.com/easybuilders/easybuild-framework/pull/2828> `_ ) * various bug fixes, including: * fix argument name in ``close_pr`` ( `#2752 <https://github.com/easybuilders/easybuild-framework/pull/2752> `_ ) * fix undefined variable ' ``prefix`` ' in ``Compiler._set_compiler_vars`` ( `#2757 <https://github.com/easybuilders/easybuild-framework/pull/2757> `_ ) * fix test account for GitHub-related tests ( `#2760 <https://github.com/easybuilders/easybuild-framework/pull/2760> `_ ) * make sure read permissions are always set in ``permissions_step`` ( `#2770 <https://github.com/easybuilders/easybuild-framework/pull/2770> `_ ) * make test for ``dep_graph`` function robust against changing order of lines in resulting dot file ( `#2772 <https://github.com/easybuilders/easybuild-framework/pull/2772> `_ ) * fix problem with ``import_available_modules`` when running from easybuild-framework directory ( `#2786 <https://github.com/easybuilders/easybuild-framework/pull/2786> `_ ) * prepend location of test easyblocks to ``$PYTHONPATH`` to ``test_generate_software_list`` , rather than append ( `#2788 <https://github.com/easybuilders/easybuild-framework/pull/2788> `_ ) * use pid in backup name candidate to reduce risk of two processes colliding ( `#2796 <https://github.com/easybuilders/easybuild-framework/pull/2796> `_ ) * automatically enable ``--ignore-osdeps`` when using ``--preview-pr`` ( `#2799 <https://github.com/easybuilders/easybuild-framework/pull/2799> `_ ) * use temporary checkout of repository as robot path for ``--new-pr`` and ``--update-pr`` to determine locations for patch files ( `#2803 <https://github.com/easybuilders/easybuild-framework/pull/2803> `_ ) * avoid relying on order in which keys are processed in ``to_dependency`` ( `#2804 <https://github.com/easybuilders/easybuild-framework/pull/2804> `_ ) * fix yeb format to work with PyYAML 5 ( `#2809 <https://github.com/easybuilders/easybuild-framework/pull/2809> `_ ) * fix typo in error message for use of unknown easyconfig parameter ( `#2817 <https://github.com/easybuilders/easybuild-framework/pull/2817> `_ ) * enhance ``log_file_format`` to fix problem when ``%(name)s`` template value is used for log directory ( `#2818 <https://github.com/easybuilders/easybuild-framework/pull/2818> `_ ) * iterate over subdirectories in order in ``find_egg_dir_for`` of bootstrap script, to ensure oldest vsc-install is picked ( `#2819 <https://github.com/easybuilders/easybuild-framework/pull/2819> `_ ) * replace ``-Wl,--enable-new-dtags`` compiler option with ``-Wl,--disable-new-dtags`` in RPATH wrapper script ( `#2821 <https://github.com/easybuilders/easybuild-framework/pull/2821> `_ ) * updated ``COMPILER_F77`` for PGI >= 19.1 ( `#2823 <https://github.com/easybuilders/easybuild-framework/pull/2823> `_ ) * added ``FFTW_STATIC_LIBS_MT`` to ``FFTW_MAP_CLASS`` , otherwise ``FFTW_STATIC_LIBS_MT`` are incorrectly defined ( `#2822 <https://github.com/easybuilders/easybuild-framework/pull/2822> `_ ) * sort available version list when selecting/generating easyconfig ( `#2732 <https://github.com/easybuilders/easybuild-framework/pull/2732> `_ ) * other changes: * use ``assertEqual`` rather than ``assertEquals`` (which is deprecated) ( `#2746 <https://github.com/easybuilders/easybuild-framework/pull/2746> `_ ) * test with Tmod 4.1.4 (packaged in RHEL8) in Travis CI ( `#2747 <https://github.com/easybuilders/easybuild-framework/pull/2747> `_ ) * replace deps by hidden deps instead of removing them from the lists ( `#2748 <https://github.com/easybuilders/easybuild-framework/pull/2748> `_ ) * ensure non-zero exit code for all test subsuites (+ fix trivial style issues) ( `#2773 <https://github.com/easybuilders/easybuild-framework/pull/2773> `_ ) * silence printed deprecation warnings for easyconfigs/toolchains while running (easyconfigs) test suite ( `#2781 <https://github.com/easybuilders/easybuild-framework/pull/2781> `_ ) * avoid printing of messages/warnings in framework test suite ( `#2782 <https://github.com/easybuilders/easybuild-framework/pull/2782> `_ ) * enable silent mode for ``--new-pr`` and ``--update-pr`` ( `#2802 <https://github.com/easybuilders/easybuild-framework/pull/2802> `_ ) * update Travis config to reflect that PyYAML 5.x is no longer compatible with Python 2.6 ( `#2807 <https://github.com/easybuilders/easybuild-framework/pull/2807> `_ ) **easyblocks** * new software-specific easyblock for TensorRT ( `#1627 <https://github.com/easybuilders/easybuild-easyblocks/pull/1627> `_ ) * minor enhancements, including: * make sure CMake doesn't pick up on system Boost in CMakeMake generic easyblock ( `#1618 <https://github.com/easybuilders/easybuild-easyblocks/pull/1618> `_ ) * modified ``ConfigureMake`` and ``CMakeMake`` generic easyblocks to allow changing ``configure_cmd`` , ``build_cmd`` and ``install_cmd`` to fit various needs ( `#1628 <https://github.com/easybuilders/easybuild-easyblocks/pull/1628> `_ , `#1658 <https://github.com/easybuilders/easybuild-easyblocks/pull/1658> `_ ) * update ANSYS easyblock to deal with changed versioning scheme ( `#1631 <https://github.com/easybuilders/easybuild-easyblocks/pull/1631> `_ ) * add extra path to builddir for SNPhylo >= 20160204 ( `#1632 <https://github.com/easybuilders/easybuild-easyblocks/pull/1632> `_ ) * add better support for TensorRT to TensorFlow ( `#1634 <https://github.com/easybuilders/easybuild-easyblocks/pull/1634> `_ ) * add support for newer versions of wxPython to wxPython easyblock ( `#1635 <https://github.com/easybuilders/easybuild-easyblocks/pull/1635> `_ ) * update OCaml easyblock to support OPAM 2.x ( `#1638 <https://github.com/easybuilders/easybuild-easyblocks/pull/1638> `_ ) * update sanity check in TensorFlow easyblock for TensorFlow 1.13.x ( `#1642 <https://github.com/easybuilders/easybuild-easyblocks/pull/1642> `_ ) * make ``ConfigureMake`` , ``MesonNinja`` and ``SCons`` generic easyblocks aware of pretestopts ( `#1645 <https://github.com/easybuilders/easybuild-easyblocks/pull/1645> `_ ) * add support for installing Python packages with ' ``pip`` ' without using ``--ignore-installed`` ( `#1647 <https://github.com/easybuilders/easybuild-easyblocks/pull/1647> `_ ) * add support to ``CMakeMake`` easyblock to specify compilers using absolute file path ( `#1652 <https://github.com/easybuilders/easybuild-easyblocks/pull/1652> `_ , `#1655 <https://github.com/easybuilders/easybuild-easyblocks/pull/1655> `_ ) * stop checking for deprecated ``pgf77`` in sanity check of PGI easyblock ( `#1653 <https://github.com/easybuilders/easybuild-easyblocks/pull/1653> `_ ) * accommodate version 10.1 in CUDA easyblock ( `#1654 <https://github.com/easybuilders/easybuild-easyblocks/pull/1654> `_ ) * install ``sitecustomize.py`` with Python to support Python package installations for multiple Python versions in a single directory ( `#1657 <https://github.com/easybuilders/easybuild-easyblocks/pull/1657> `_ ) * enhance SAMtools easyblock to also install ``libhts.a`` and include/htslib (when applicable) ( `#1661 <https://github.com/easybuilders/easybuild-easyblocks/pull/1661> `_ ) * tweak ``PythonPackage`` & ``PythonBundle`` to update ``$EBPYTHONPREFIXES`` rather than ``$PYTHONPATH`` for multi-Python installations + make ``sanity_check_step`` aware of multi_deps ( `#1664 <https://github.com/easybuilders/easybuild-easyblocks/pull/1664> `_ , `#1678 <https://github.com/easybuilders/easybuild-easyblocks/pull/1678> `_ ) * replace ``-openmp`` with ``-fopenmp`` when building TINKER with Intel compilers (+ modernize easyblock) ( `#1668 <https://github.com/easybuilders/easybuild-easyblocks/pull/1668> `_ ) * make sure Meson is configured with ``-Dlibdir=lib`` so it doesn't install libraries in ``lib/x86_64-linux-gnu`` on Debian/Ubuntu multiarch systems ( `#1673 <https://github.com/easybuilders/easybuild-easyblocks/pull/1673> `_ ) * allow for external libfabric via ``ofi_libfabric`` parameter in impi easyblock ( `#1676 <https://github.com/easybuilders/easybuild-easyblocks/pull/1676> `_ ) * pass down compiler names and options to Qt5 5.8 & more recent via corresponding ``QMAKE_*`` configuration options ( `#1677 <https://github.com/easybuilders/easybuild-easyblocks/pull/1677> `_ ) * various bug fixes, including: * create symlinks to ``.modulerc`` in symlinked module directories ( `#1636 <https://github.com/easybuilders/easybuild-easyblocks/pull/1636> `_ ) * add missing import in FFTW easyblock ( `#1641 <https://github.com/easybuilders/easybuild-easyblocks/pull/1641> `_ ) * fix finding of Python 3 include subdir + ``libpython*.so`` in OpenBabel easyblock ( `#1633 <https://github.com/easybuilders/easybuild-easyblocks/pull/1633> `_ ) * add ``no_qa`` pattern for interactive installation command for ABAQUS ( `#1637 <https://github.com/easybuilders/easybuild-easyblocks/pull/1637> `_ ) * make serial, smpar and dm+sm builds of WRF work and pass tests ( `#1646 <https://github.com/easybuilders/easybuild-easyblocks/pull/1646> `_ ) * configure CP2K with correct ``DATA_DIR`` value rather than relying on ``$CP2K_DATA_DIR`` environment variable ( `#1650 <https://github.com/easybuilders/easybuild-easyblocks/pull/1650> `_ ) * CP2K fixes: only call configure_LAPACK/ScaLAPACK when imkl is not used, prefer using 2^2 MPI processes for tests ( `#1651 <https://github.com/easybuilders/easybuild-easyblocks/pull/1651> `_ ) * also take into account custom easyconfig parameters from ``CMakeMake`` in BamTools easyblock ( `#1656 <https://github.com/easybuilders/easybuild-easyblocks/pull/1656> `_ ) * make sure Perl scripts are installed in the right location ( `#1660 <https://github.com/easybuilders/easybuild-easyblocks/pull/1660> `_ ) * make sure setenv is used for CUDA_PATH etc. ( `#1663 <https://github.com/easybuilders/easybuild-easyblocks/pull/1663> `_ ) * cleanup ``sanity_check_paths`` in numpy & scipy easyblocks ( `#1665 <https://github.com/easybuilders/easybuild-easyblocks/pull/1665> `_ , `#1667 <https://github.com/easybuilders/easybuild-easyblocks/pull/1667> `_ ) * always set ``self.pylibdir`` in ``PythonPackage.set_pylibdirs()`` , which is important when installing Python packages for multiple Python versions via ``multi_deps`` ( `#1671 <https://github.com/easybuilders/easybuild-easyblocks/pull/1671> `_ ) * fix custom definition of ``load_module`` method in LAPACK module ( `#1675 <https://github.com/easybuilders/easybuild-easyblocks/pull/1675> `_ ) * other changes: * replace ' ``except OSError, err:`` ' pattern with ' ``except OSError as err:`` ' (for compatibility with Python 3.x) ( `#1639 <https://github.com/easybuilders/easybuild-easyblocks/pull/1639> `_ ) * clean up Java easyblock to use ``filetools`` functionality ( `#1649 <https://github.com/easybuilders/easybuild-easyblocks/pull/1649> `_ ) **easyconfigs** * added easyconfigs for new toolchains: ``intel/2019.02`` ( `#7598 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7598> `_ ), ``intel/2019.03`` ( `#7846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7846> `_ ) * added example easyconfig files for 68 new software packages: * ACT ( `#7928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7928> `_ ), aiohttp ( `#7728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7728> `_ ), at-spi2-atk and at-spi2-core ( `#7658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7658> `_ ), Bader ( `#7804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7804> `_ ), barrnap ( `#7738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7738> `_ ), BCEL ( `#7937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7937> `_ ), biscuit ( `#5868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5868> `_ ), bitarray ( `#7772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7772> `_ ), BlobTools ( `#7565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7565> `_ , `#7583 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7583> `_ ), bmtagger ( `#7890 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7890> `_ ), bsddb3 ( `#7642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7642> `_ ), CheckM ( `#7712 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7712> `_ ), Cheetah ( `#7952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7952> `_ ), CONCOCT ( `#7891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7891> `_ ), cyvcf2 ( `#8031 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8031> `_ ), DAS_Tool ( `#7741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7741> `_ ), ExaBayes ( `#7801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7801> `_ ), FastANI ( `#7992 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7992> `_ ), fastp ( `#7693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7693> `_ ), Flask ( `#7734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7734> `_ ), giflib ( `#7663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7663> `_ ), Giza ( `#7843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7843> `_ ), glew ( `#7685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7685> `_ ), gpustat ( `#8025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8025> `_ ), GRASS ( `#7489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7489> `_ ), GTDB-Tk ( `#7995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7995> `_ ), HPCX ( `#7725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7725> `_ ), IntelPython ( `#7920 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7920> `_ ), KNIME ( `#7554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7554> `_ ), KronaTools ( `#7721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7721> `_ ), KyotoCabinet ( `#7955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7955> `_ ), Leptonica ( `#7932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7932> `_ ), libepoxy ( `#7655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7655> `_ ), libpsl ( `#7666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7666> `_ ), MAGMA ( `#7829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7829> `_ ), MATLAB-Engine ( `#7758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7758> `_ ), MaxBin ( `#7767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7767> `_ ), MetaBAT ( `#7746 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7746> `_ , `#7931 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7931> `_ ), MinPath ( `#7763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7763> `_ ), ncdu ( `#7505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7505> `_ ), NGSadmix ( `#7524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7524> `_ ), NIMBLE ( `#7564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7564> `_ ), PCAngsd ( `#7727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7727> `_ ), pizzly ( `#7724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7724> `_ ), Ploticus ( `#7545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7545> `_ ), pocl ( `#7681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7681> `_ ), POT ( `#8011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8011> `_ ), ProjectQ ( `#7576 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7576> `_ ), pullseq ( `#7740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7740> `_ ), pyBigWig ( `#7600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7600> `_ ), Pyke3 ( `#8034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8034> `_ ), PyRETIS ( `#8041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8041> `_ ), RDKit ( `#7973 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7973> `_ ), RNAIndel ( `#8009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8009> `_ ), scikit-optimize ( `#7613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7613> `_ ), SciPy-bundle ( `#7922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7922> `_ ), sep ( `#8032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8032> `_ ), slidingwindow ( `#7909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7909> `_ ), SPLASH ( `#7843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7843> `_ ), SqueezeMeta ( `#7771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7771> `_ ), SRPRISM ( `#7890 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7890> `_ ), taxator-tk ( `#7894 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7894> `_ ), TensorRT ( `#7584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7584> `_ ), tesseract ( `#7932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7932> `_ ), Transrate ( `#5108 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5108> `_ ), VCF-kit ( `#7786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7786> `_ , `#7882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7882> `_ ), VV ( `#7297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7297> `_ ) * added additional easyconfigs for various supported software packages, including: * AFNI 19.0.01, Arrow 0.7.1, BLAST+ 2.8.1, CUDA 10.1.105, GCC(core) 8.3.0, GTK+ 3.22.30, Java (OpenJDK) 11(.0.2), Meson 0.50.0, MultiQC 1.7, Nim 0.19.2, Ninja 1.9.0, netCDF 4.6.2, netCDF-Fortran 4.4.5, PCRE 8.43, Perl 5.28.1, PGI 19.1, Python 3.7.2, RELION 3.0.4, Ruby 2.6.1, SCons 3.0.4, SQLite 3.27.2, SuiteSparse 5.4.0, TINKER 8.6.1, TensorFlow 1.13.1, X11 20190311 * minor enhancements, including: * add various extensions to R 3.5.1 easyconfigs: ``asnipe`` ( `#7572 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7572> `_ ), ``liquidSVM`` ( `#7597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7597> `_ ), ``oddsratio`` / ``mltools`` / ``h2o`` ( `#7744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7744> `_ ), ``mlegp`` ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ ), ``bartMachine`` / ``lqa`` ( `#7865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7865> `_ ), ``PresenceAbsence`` / ``GUTS`` / ``GenSA`` ( `#7905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7905> `_ ), ``parsedate`` ( `#7935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7935> `_ ), ``circular`` ( `#7975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7975> `_ ) * add ``ujson`` extension in recent Python easyconfigs ( `#7517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7517> `_ ) * run various checks on easyconfigs that are touched in pull requests and involve Python packages ( `#7754 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7754> `_ ) * add ``cpanminus`` extension to recent Perl easyconfigs ( `#7866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7866> `_ ) * also install ANTs scripts (and set ``$ANTSPATH`` as required by those scripts) ( `#7940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7940> `_ ) * add missing ``configopts`` in GATE 8.1 easyconfig to enable Davis feature ( `#8000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8000> `_ ) * various bug fixes, including: * add patch for Mesa 18.1.1 to detect MIT-SHM ( `#7536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7536> `_ ) * add proper description to MINC-2.4.03 ( `#7551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7551> `_ ) * add libunwind dependency to recent Mesa easyconfig when building with foss/GCC ( `#7629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7629> `_ ) * add/reorder missing/misplaced extensions in Python 2.7.15 and 3.6.6 easyconfigs ( `#7696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7696> `_ ) * fix Jellyfish dependency in easyconfig for Kraken 1.0 (Jellyfish 1.x is required) ( `#7743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7743> `_ ) * use ``https://`` in most recent XZ easyconfigs ( `#7782 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7782> `_ ) * add patch for OpenMPI 3.1.x to fix ib-query ' ``Invalid argument`` ' error ( `#7789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7789> `_ ) * build OpenBLAS with ``-fno-tree-vectorize`` (asm constraint bugs for <0.3.6) + cleanup & SHA256 checksums ( `#7790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7790> `_ , `#7793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7793> `_ ) * extra patch for TensorFlow 1.12.0 to remove ``-B/usr/bin`` from ``linker_bin_path_flag`` in ``cuda_configure.bzl`` ( `#7800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7800> `_ ) * fix easyconfig for STAR-Fusion 1.5.0 ( `#7802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7802> `_ ) * fix checksums for boot/nlme extensions in R easyconfigs ( `#7814 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7814> `_ , `#8054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8054> `_ ) * add patch for OpenMPI 3.x to fix UCX memory leak ( `#7535 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7535> `_ , `#7824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7824> `_ ) * replace ``ncurses-devel`` OS dependency in CMake easyconfigs using ``dummy`` toolchain with proper ncurses dependency ( `#7834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7834> `_ ) * use ``PythonBundle`` for ``snakemake-5.2.4-foss-2018b-Python-3.6.6.eb`` (+ fix moduleclass) ( `#7842 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7842> `_ ) * use correct ``buildopts`` + add missing zlib dependency in StringTie 1.3.5 easyconfig ( `#7845 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7845> `_ ) * update GStreamer to not enable dw and fix some missing dependencies ( `#7889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7889> `_ ) * add missing XZ dependency to most recent Pysam easyconfigs ( `#7897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7897> `_ ) * expat: add configure option ``--without-docbook`` to avoid docbook2X dependency ( `#7930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7930> `_ ) * fix source URLs for mawk ( `#7960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7960> `_ ) * fix LWM2, OTF2, OPARI2, and Score-P download URLs ( `#7994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7994> `_ ) * use ``https://`` in homepage & source_urls for OpenMPI and hwloc easyconfigs ( `#8013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8013> `_ , `#8014 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8014> `_ , `#8015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8015> `_ and `#8016 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8016> `_ ) * add missing bokeh dependency for dask 1.0.0 (+ add dask-jobqueue) ( `#8029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8029> `_ ) * fix checking of binutils build dep in easyconfig tests ( `#8038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8038> `_ ) * other changes: * avoid use of ``.items()`` in R (bundle) easyconfigs, to fix compatibility with EasyBuild running on top of Python 3 ( `#7791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7791> `_ ) * trim down test configuration: only test with Lmod 6.x with Tcl/Lua on Python 2.6/2.7 ( `#7795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7795> `_ , `#7798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7798> `_ ) * use ``%(pyshortver)s`` template in (old) SIP easyconfigs ( `#7797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7797> `_ ) * add PyTorch to whitelist for not having ' ``use_pip`` ' enabled ( `#7844 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7844> `_ ) * don't use local variable ' ``pylibdir`` ' in list comprehension in PyQt easyconfig, since that doesn't work in Python 3 ( `#7848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7848> `_ ) * use pip instead of setup.py with h5py/2.7.1 and 2017b toolchains ( `#7864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7864> `_ ) * prefer ``https://`` over ``ftp://`` for source_urls in recent GROMACS easyconfigs ( `#7948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7948> `_ ) * rename arrow to Arrow for old easyconfig ( `#8007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/8007> `_ ) .. _release_notes_eb381: EasyBuild v3.8.1 (January 29th 2019) ------------------------------------ bugfix/update release **framework** * various minor enhancements, including: * speed up checking of OS dependencies ( `#2703 <https://github.com/easybuilders/easybuild-framework/pull/2703> `_ ) * add support for ' ``eb --show-system-info`` ' ( `#2722 <https://github.com/easybuilders/easybuild-framework/pull/2722> `_ ) * add support for ' ``%(arch)s`` ' template value in easyconfig files (x86-64, aarch64, ppc64le, ...) ( `#2728 <https://github.com/easybuilders/easybuild-framework/pull/2728> `_ ) * various bug fixes, including: * add timestamp to reprod dir while in tmp space ( `#2705 <https://github.com/easybuilders/easybuild-framework/pull/2705> `_ ) * avoid ' ``+`` ' in directory name for ``g++`` rpath wrapper ( `#2710 <https://github.com/easybuilders/easybuild-framework/pull/2710> `_ ) * pre-install vsc-install < 0.11.4 in bootstrap script to avoid requiring ' ``mock`` ' Python package ( `#2717 <https://github.com/easybuilders/easybuild-framework/pull/2717> `_ ) * fix check in ``--merge-pr`` whether PR is eligible for merging in to only consider the status of the last test report ( `#2720 <https://github.com/easybuilders/easybuild-framework/pull/2720> `_ ) * don't recreate build directory when ' ``buildininstalldir`` ' is enabled for iterative installations ( `#2724 <https://github.com/easybuilders/easybuild-framework/pull/2724> `_ ) * filter (CUDA) ``lib*/stubs`` paths in RPATH wrapper script ( `#2725 <https://github.com/easybuilders/easybuild-framework/pull/2725> `_ ) * other changes: * replace ' ``except IOError, err:`` ' pattern with ' ``except IOError as err:`` ' for compatibility with Python 3.x ( `#2711 <https://github.com/easybuilders/easybuild-framework/pull/2711> `_ ) * make all ``print`` statements compatible with Python 3 ( `#2715 <https://github.com/easybuilders/easybuild-framework/pull/2715> `_ ) * avoid use of ``sys.maxint`` in dependencies_for ( `#2716 <https://github.com/easybuilders/easybuild-framework/pull/2716> `_ ) **easyblocks** * minor enhancements, including: * update Ferret easyblock to handle Ferret 7.3 ( `#1349 <https://github.com/easybuilders/easybuild-easyblocks/pull/1349> `_ ) * add support for defining ``$LDSHARED`` when installing Python packages if Python's value doesn't use toolchain compiler ($CC) ( `#1455 <https://github.com/easybuilders/easybuild-easyblocks/pull/1455> `_ ) * update CP2K easyblock to add support for CP2K 6.1, and fix incorrect LibInt references ( `#1545 <https://github.com/easybuilders/easybuild-easyblocks/pull/1545> `_ ) * make OpenFOAM easyblock handle debug build ( `#1609 <https://github.com/easybuilders/easybuild-easyblocks/pull/1609> `_ ) * handle multiple installation keys for MATLAB ( `#1610 <https://github.com/easybuilders/easybuild-easyblocks/pull/1610> `_ ) * run ' ``make check`` ' in parallel for GROMACS since it involves more compilation ( `#1611 <https://github.com/easybuilders/easybuild-easyblocks/pull/1611> `_ ) * update OpenCV easyblock for recent versions (3.4.x >= 3.4.4 + 4.0.x) ( `#1616 <https://github.com/easybuilders/easybuild-easyblocks/pull/1616> `_ ) * various bug fixes, including: * check current ``start_dir`` value before appending ' ``src`` ' subdirectory in MrBayes easyblock ( `#1582 <https://github.com/easybuilders/easybuild-easyblocks/pull/1582> `_ ) * avoid that (system) Intel compilers are always considered when building SuiteSparse ( `#1612 <https://github.com/easybuilders/easybuild-easyblocks/pull/1612> `_ ) * fix missing import statement in ROOT easyblock ( `#1614 <https://github.com/easybuilders/easybuild-easyblocks/pull/1614> `_ ) * answer SELinux question with ' ``no`` ' in Mathematica easyblock ( `#1617 <https://github.com/easybuilders/easybuild-easyblocks/pull/1617> `_ ) * disable \"build isolation\" feature in pip > 10.x in PythonPackage generic easyblock ( `#1623 <https://github.com/easybuilders/easybuild-easyblocks/pull/1623> `_ ) * other changes * cleanup in Perl and PerlModule easyblocks ( `#1603 <https://github.com/easybuilders/easybuild-easyblocks/pull/1603> `_ ) **easyconfigs** * added easyconfigs for new toolchains ``foss/2019a`` ( `#7371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7371> `_ ), ``intel/2019a`` ( `#7372 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7372> `_ ) and ``iomkl/2019.01`` ( `#7375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7375> `_ ) * see also https://easybuild.readthedocs.io/en/latest/Common-toolchains.html * added example easyconfig files for 43 new software packages: * Assimulo ( `#6740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6740> `_ ), C3D ( `#7059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7059> `_ ), CellMix ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), CESM-deps ( `#6654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6654> `_ , `#6675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6675> `_ , `#6823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6823> `_ ), DSA ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), DeMixT ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), deconf ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), DeconICA ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), double-conversion ( `#7307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7307> `_ ), dxpy ( `#7079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7079> `_ ), EPIC ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), expect ( `#7387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7387> `_ ), Flye ( `#7430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7430> `_ ), FMILibrary ( `#6740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6740> `_ ), FMRIprep ( `#7059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7059> `_ ), FUSE ( `#7078 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7078> `_ ), GDCM ( `#7310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7310> `_ ), HDDM ( `#7396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7396> `_ ), ICA-AROMA ( `#7059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7059> `_ ), IntaRNA ( `#7334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7334> `_ ), imageio ( `#6738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6738> `_ ), KWIML ( `#7308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7308> `_ ), kWIP ( `#7444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7444> `_ ), MagresPython ( `#7395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7395> `_ ), medaka ( `#7426 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7426> `_ ), MINC ( `#7311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7311> `_ ), MuSiC ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ), netMHCIIpan ( `#7377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7377> `_ ), NIfTI ( `#7311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7311> `_ ), OPERA ( `#7408 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7408> `_ ), psrecord ( `#7331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7331> `_ ), pyfits ( `#7273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7273> `_ ), PyFMI ( `#6740 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6740> `_ ), PyGWAS ( `#5852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5852> `_ ), Pylint ( `#6675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6675> `_ ), QDD ( `#7284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7284> `_ ), RERconverge ( `#7289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7289> `_ ), samclip ( `#7226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7226> `_ ), SCIPhI ( `#7419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7419> `_ ), swarm ( `#7453 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7453> `_ ), VXL ( `#7309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7309> `_ ), wrf-python ( `#6736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6736> `_ ), xCell ( `#7422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7422> `_ ) * added additional easyconfigs for various supported software packages, including: * Amber 18, Arrow 0.12.0, Biopython 1.73, Boost 1.69.0, CP2K 6.1, canu 1.8, Ferret 7.3, GATE 8.1.p01, GROMACS 2019, Geant4 10.5, HPL 2.3, libxsmm 1.10, matplotlib 3.0.2, NEURON 7.6.5, Octave 4.4.1, OpenBLAS 0.3.5, OpenCV 3.4.5 + 4.0.1, OpenFOAM v1812, PGI 18.10, PLUMED 2.5.0, ROOT 6.14.06, Theano 1.0.3, TopHat 2.1.2, Yade 2018.02b * minor enhancements, including: * add additional extensions to R 3.5.1 easyconfigs: * statnet ( `#7370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7370> `_ ), NMF, ComICS, dtangle, MCMCpack, shinythemes ( `#7420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7420> `_ ), csSAM ( `#7423 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7423> `_ ), bridgedist ( `#7477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7477> `_ ) * add DeconRNASeq and GSVA extensions to R-bundle-Bioconductor 3.7 easyconfigs ( `#7421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7421> `_ ) * also install header files and CMake module for SeqAn 2.4.0 built with ``foss/2018b`` ( `#7434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7434> `_ ) * add download URL for ``intel/2018a`` components ( `#7436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7436> `_ ) * add missing checksums for protobuf easyconfigs using dummy toolchain ( `#7492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7492> `_ ) * various bug fixes, including: * fix source URL in Doxygen easyconfigs ( `#7324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7324> `_ ) * add fallback source URL for recent pigz versions ( `#7346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7346> `_ ) * promote FriBiDi to runtime dep of Pango rather than only build dep ( `#7369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7369> `_ ) * add ``--without-systemdsystemunitdir`` configure option to recent DBus easyconfigs ( `#7373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7373> `_ ) * fix issue of building M4 1.4.18 with glibc 2.28 ( `#7384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7384> `_ ) * fix broken source URLs in MariaDB easyconfigs ( `#7413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7413> `_ ) * bump up build dependency of flex 2.6.4 from Bison 3.0.4 to 3.0.5 ( `#7414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7414> `_ ) * disable building of OpenColorIO Python bindings since Python is not included as a dependency ( `#7416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7416> `_ ) * add missing build dependencies in old Harfbuzz/Pango easyconfigs (2016a generation) ( `#7433 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7433> `_ ) * fix XML-LibXML linking with Intel compiler and GCCcore Perl ( `#7440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7440> `_ ) * prevent non-critical error from stopping Guile v1.8.8 build ( `#7446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7446> `_ ) * use ``%(arch)s`` template rather than hardcoding ' ``x86_64`` ' in XML-Parser easyconfigs ( `#7450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7450> `_ ) * use uniform configopts for Guile 1.8.8 ( `#7452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7452> `_ ) * fix configopts in PyQt5 easyconfig files to avoid installation of files in Python/Qt5 installation directories ( `#7470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7470> `_ ) * other changes: * fix homepage in easyconfigs for ``foss`` toolchains ( `#7482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7482> `_ ) and ``intel`` toolchains ( `#7483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7483> `_ ) .. _release_notes_eb380: EasyBuild v3.8.0 (December 18th 2018) ------------------------------------- feature release **framework** * various enhancements, including: * support use of version ranges in ``--filter-deps`` ( `#2357 <https://github.com/easybuilders/easybuild-framework/pull/2357> `_ ) * add support for ``--list-prs`` ( `#2400 <https://github.com/easybuilders/easybuild-framework/pull/2400> `_ , `#2668 <https://github.com/easybuilders/easybuild-framework/pull/2668> `_ ) * add support for ``--close-pr`` ( `#2401 <https://github.com/easybuilders/easybuild-framework/pull/2401> `_ ) * allow setting ``optarch`` compiler flags in the easyconfig via ``toolchainopts`` easyconfig parameter ( `#2595 <https://github.com/easybuilders/easybuild-framework/pull/2595> `_ ) * add option to skip pre-creation of install directory: ``--disable-pre-create-installdir`` ( `#2629 <https://github.com/easybuilders/easybuild-framework/pull/2629> `_ , `#2637 <https://github.com/easybuilders/easybuild-framework/pull/2637> `_ ) * flesh out setting up of configuration into dedicated ' ``set_up_configuration`` ' function ( `#2638 <https://github.com/easybuilders/easybuild-framework/pull/2638> `_ ) * clean error when ' ``eb`` ' is cancelled by user ( `#2641 <https://github.com/easybuilders/easybuild-framework/pull/2641> `_ ) * add support for using Slurm as backend for ``--job`` , via ``--job-backend=Slurm`` ( `#2642 <https://github.com/easybuilders/easybuild-framework/pull/2642> `_ , `#2666 <https://github.com/easybuilders/easybuild-framework/pull/2666> `_ ) * save easyblocks along with easyconfig in ' ``reprod`` ' subdirectory of install directory ( `#2653 <https://github.com/easybuilders/easybuild-framework/pull/2653> `_ ) * add support for deprecating easyconfig files & toolchains ( `#2656 <https://github.com/easybuilders/easybuild-framework/pull/2656> `_ ) * changed ``EasyConfig.update`` to be able to specify not to allow duplicate values ( `#2657 <https://github.com/easybuilders/easybuild-framework/pull/2657> `_ ) * move adding of dependencies to prepare step instead of check readiness step ( `#2674 <https://github.com/easybuilders/easybuild-framework/pull/2674> `_ ) * add support for disabling mapping of (sub)toolchains when ``--try-toolchain`` is used, via ``--disable-map-toolchains`` ( `#2682 <https://github.com/easybuilders/easybuild-framework/pull/2682> `_ ) * add ' ``astro`` ' and ' ``quantum`` ' module classes ( `#2693 <https://github.com/easybuilders/easybuild-framework/pull/2693> `_ ) * various bug fixes, including: * make ``--from-pr`` always try to apply PR patch on top of PR target branch ( `#2631 <https://github.com/easybuilders/easybuild-framework/pull/2631> `_ ) * fix bug that could cause to silently overwrite an existing easyconfig when using ``--try-*`` ( `#2635 <https://github.com/easybuilders/easybuild-framework/pull/2635> `_ ) * don't pass down specific environment variables into submitted jobs ( `#2643 <https://github.com/easybuilders/easybuild-framework/pull/2643> `_ ) * update template constants for source URLs to use https ( `#2648 <https://github.com/easybuilders/easybuild-framework/pull/2648> `_ ) * fix lib64 fallback for ' ``lib`` '/' ``lib64`` ' dirs entry in ``sanity_check_paths`` ( `#2649 <https://github.com/easybuilders/easybuild-framework/pull/2649> `_ ) * change PGI F90 Fortran compiler to pgf90 ( `#2650 <https://github.com/easybuilders/easybuild-framework/pull/2650> `_ ) * use ``--set-upstream-to`` in ``install-EasyBuild-develop.sh`` script to deal with deprecated/no longer supported ``--set-upstream`` ( `#2651 <https://github.com/easybuilders/easybuild-framework/pull/2651> `_ ) * fix order of keys in ' ``toolchain`` ' value for dumped easyconfig file (name, version) + run style check on dumped easyconfigs in dump tests ( `#2660 <https://github.com/easybuilders/easybuild-framework/pull/2660> `_ ) * ensure checksums beside sources in dumped easyconfigs ( `#2661 <https://github.com/easybuilders/easybuild-framework/pull/2661> `_ ) * fix problems with easyconfig file saved in ' ``reprod`` ' directory by copying it before running any installation steps ( `#2664 <https://github.com/easybuilders/easybuild-framework/pull/2664> `_ ) * make print functions more robust w.r.t. arguments being passed to format the message to be printed ( `#2670 <https://github.com/easybuilders/easybuild-framework/pull/2670> `_ ) * use ' ``git am`` ' to apply patch for PRs in ``fetch_easyconfigs_from_pr`` ( `#2680 <https://github.com/easybuilders/easybuild-framework/pull/2680> `_ ) * correctly define ``$LIBFFT_MT`` for Intel MKL ( `#2688 <https://github.com/easybuilders/easybuild-framework/pull/2688> `_ ) * don't always require easyconfig files to resolve dependencies ( `#2690 <https://github.com/easybuilders/easybuild-framework/pull/2690> `_ , `#2692 <https://github.com/easybuilders/easybuild-framework/pull/2692> `_ , `#2697 <https://github.com/easybuilders/easybuild-framework/pull/2697> `_ , `#2698 <https://github.com/easybuilders/easybuild-framework/pull/2698> `_ , `#2699 <https://github.com/easybuilders/easybuild-framework/pull/2699> `_ ) * fixes for Travis CI config: * stop testing with Lmod 6.6.3, testing with Lmod 6.5.1 is sufficient ( `#2627 <https://github.com/easybuilders/easybuild-framework/pull/2627> `_ ) * Python 2.6 requires python-daemon 1.x as dep for GC3Pie ( `#2673 <https://github.com/easybuilders/easybuild-framework/pull/2673> `_ ) * stick to idna<2.8 with Python 2.6 in Travis + distable broken test for HgRepository ( `#2678 <https://github.com/easybuilders/easybuild-framework/pull/2678> `_ ) * other changes: * always skip symlinks in ``adjust_permissions`` ( `#2644 <https://github.com/easybuilders/easybuild-framework/pull/2644> `_ ) * flesh out ' ``avail_easyblocks`` ' function from support for ``--list-easyblocks`` ( `#2663 <https://github.com/easybuilders/easybuild-framework/pull/2663> `_ ) * deprecate the ``ictce`` toolchain ( `#2667 <https://github.com/easybuilders/easybuild-framework/pull/2667> `_ ) * deprecate ``goolf`` and ``goolfc`` toolchains ( `#2676 <https://github.com/easybuilders/easybuild-framework/pull/2676> `_ ) * deprecate ``intel`` toolchains older than ``intel/2016a`` (+ ``iccifort`` & ``iimpi`` subtoolchains) ( `#2677 <https://github.com/easybuilders/easybuild-framework/pull/2677> `_ ) * deprecate ancient ``gompi`` toolchain versions ( `#2684 <https://github.com/easybuilders/easybuild-framework/pull/2684> `_ ) * use ' ``tar xzf`` ' (gzip) rather than ' ``tar xZf`` ' (ancient ``compress`` ) to unpack ``*.tar.Z`` source files ( `#2686 <https://github.com/easybuilders/easybuild-framework/pull/2686> `_ ) * flesh out ' ``set_parallel`` ' method to it can be called separately ( `#2687 <https://github.com/easybuilders/easybuild-framework/pull/2687> `_ ) **easyblocks** * new generic easyblocks: * ``PythonBundle`` for installing a bundle of Python packages ( `#1553 <https://github.com/easybuilders/easybuild-easyblocks/pull/1553> `_ ) * ``MesonNinja`` for installing using Meson & Ninja ( `#1561 <https://github.com/easybuilders/easybuild-easyblocks/pull/1561> `_ ) * new software specific easyblock for ``RepeatMasker`` ( `#1600 <https://github.com/easybuilders/easybuild-easyblocks/pull/1600> `_ ) * minor enhancements, including: * add ``-fno-delete-null-pointer-checks`` compiler flag for OpenFOAM versions older than v3.0 ( `#1311 <https://github.com/easybuilders/easybuild-easyblocks/pull/1311> `_ ) * add support for building Tau with OTF included as dependency ( `#1313 <https://github.com/easybuilders/easybuild-easyblocks/pull/1313> `_ ) * add support for Intel MPI version 2019 ( `#1546 <https://github.com/easybuilders/easybuild-easyblocks/pull/1546> `_ ) * also populate the include dir for CP2K ( `#1554 <https://github.com/easybuilders/easybuild-easyblocks/pull/1554> `_ ) * add custom easyconfig parameter in GCC easyblock to control use of gold linker: ``use_gold_linker`` ( `#1555 <https://github.com/easybuilders/easybuild-easyblocks/pull/1555> `_ ) * replace ' ``-`` ' with ' ``_`` ' in default ' ``import`` ' check for Python packages ( `#1560 <https://github.com/easybuilders/easybuild-easyblocks/pull/1560> `_ ) * update WRF and WPS to support version 4 ( `#1563 <https://github.com/easybuilders/easybuild-easyblocks/pull/1563> `_ ) * adapt PSI easyblock for PSI4 > 1.2 ( `#1568 <https://github.com/easybuilders/easybuild-easyblocks/pull/1568> `_ ) * update Siesta easyblock to 4.1-b4 and add custom test_step ( `#1573 <https://github.com/easybuilders/easybuild-easyblocks/pull/1573> `_ ) * enhance Mothur easyblock to support use of Boost and HDF5 as dependencies ( `#1576 <https://github.com/easybuilders/easybuild-easyblocks/pull/1576> `_ ) * enhance sanity check for icc & ifort: also check for ``compilers_and_libraries_*/linux`` subdirectory ( `#1577 <https://github.com/easybuilders/easybuild-easyblocks/pull/1577> `_ ) * update Trinity easyblock for latest version 2.8 ( `#1579 <https://github.com/easybuilders/easybuild-easyblocks/pull/1579> `_ ) * add version check in sanity check step of SCOTCH easyblock (+ code cleanup) ( `#1580 <https://github.com/easybuilders/easybuild-easyblocks/pull/1580> `_ ) * add support in Clang easyblock to skip running of all tests ( `#1584 <https://github.com/easybuilders/easybuild-easyblocks/pull/1584> `_ ) * update WRF easyblock to allow serial HDF5 + pick up on parallel netCDF ( `#1592 <https://github.com/easybuilders/easybuild-easyblocks/pull/1592> `_ ) * avoid hardcoding ' ``PREFIX=<installdir>`` ' in build/install options when using ``SCons`` easyblock ( `#1594 <https://github.com/easybuilders/easybuild-easyblocks/pull/1594> `_ ) * enable TensorFlow to detect any MPI runtime ( `#1597 <https://github.com/easybuilders/easybuild-easyblocks/pull/1597> `_ ) * enhance ``Bundle`` easyblock to allow installation of bundle components with additional easyblocks + build components in parallel ( `#1598 <https://github.com/easybuilders/easybuild-easyblocks/pull/1598> `_ ) * enhance Trilinos easyblock to support building against MKL ( `#1601 <https://github.com/easybuilders/easybuild-easyblocks/pull/1601> `_ ) * various bug fixes, including: * make FDTD_Solutions easyblock do the install by copying files instead of ' ``rpm rebuild`` ' ( `#1307 <https://github.com/easybuilders/easybuild-easyblocks/pull/1307> `_ ) * re-add missing ``VT_(S)LIB_DIR`` env variable to itac module ( `#1309 <https://github.com/easybuilders/easybuild-easyblocks/pull/1309> `_ ) * fix in QuantumESPRESSO easyblock: ifort compiler needs ``-assume byterecl`` ( `#1556 <https://github.com/easybuilders/easybuild-easyblocks/pull/1556> `_ ) * extract targets from buildopts in Quantumespresso easyblock ( `#1558 <https://github.com/easybuilders/easybuild-easyblocks/pull/1558> `_ ) * fixes for TensorFlow easyblock ( `#1559 <https://github.com/easybuilders/easybuild-easyblocks/pull/1559> `_ ) * pass ``$PYTHONPATH`` while building TensorFlow * disable cross-compilation mode if optarch is set * fix sanity check for installing TensorFlow as extension * added a test to disable compiling FFTW with MPI if the toolchain does not support MPI ( `#1562 <https://github.com/easybuilders/easybuild-easyblocks/pull/1562> `_ ) * fix permissions problem with CUDA nvvp tar files + correctly handle numactl symlink in LLVM subdir in PGI easyblock ( `#1569 <https://github.com/easybuilders/easybuild-easyblocks/pull/1569> `_ ) * fix TensorFlow test tempdir problem ( `#1572 <https://github.com/easybuilders/easybuild-easyblocks/pull/1572> `_ ) * tweak VMD easyblock so that ``configopts`` don't contain duplicate values (otherwise it fails to rebuild) ( `#1575 <https://github.com/easybuilders/easybuild-easyblocks/pull/1575> `_ ) * fix running netcdf4-python tests to also support installation as extension ( `#1578 <https://github.com/easybuilders/easybuild-easyblocks/pull/1578> `_ ) * added the openmp flags in the linker flags in MUMPS easyblock ( `#1585 <https://github.com/easybuilders/easybuild-easyblocks/pull/1585> `_ ) * avoid hardcoding ``--with-rdma`` configure option in MVAPICH2 easyblock ( `#1586 <https://github.com/easybuilders/easybuild-easyblocks/pull/1586> `_ ) * fix location of path-to-source argument in configure command of ``CMakeMake`` ( `#1591 <https://github.com/easybuilders/easybuild-easyblocks/pull/1591> `_ ) * fix GROMACS use of MKL for non-Intel compilers (e.g. gomkl toolchain) ( `#1596 <https://github.com/easybuilders/easybuild-easyblocks/pull/1596> `_ ) * other changes * inform Hound CI about Python 2 builtins ( `#1604 <https://github.com/easybuilders/easybuild-easyblocks/pull/1604> `_ ) **easyconfigs** * added easyconfigs for new toolchains: ``intel/2018.04`` ( `#7171 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7171> `_ ), ``intel/2019.00`` ( `#7218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7218> `_ ), ``intel/2019.01`` ( `#7219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7219> `_ ) * added example easyconfig files for 36 new software packages: * 4ti2 ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), ARPACK++ ( `#6750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6750> `_ ), CellRanger ( `#7242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7242> `_ ), CharLS ( `#6762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6762> `_ ) cscope ( `#7057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7057> `_ ), ctags ( `#7057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7057> `_ ), datamash ( `#6693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6693> `_ ), dcm2niix ( `#6762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6762> `_ ), DCMTK ( `#6761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6761> `_ ), deepdiff ( `#7109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7109> `_ ), Drake ( `#7182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7182> `_ ), fast5 ( `#7250 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7250> `_ ), gap ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), Gerris ( `#7211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7211> `_ ), GPAW-setups ( `#6984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6984> `_ ), iCount ( `#7080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7080> `_ ), ipyparallel ( `#6797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6797> `_ ), Kratos ( `#7149 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7149> `_ ), LCov ( `#7160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7160> `_ ), libvdwxc ( `#6984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6984> `_ ), libwebp ( `#7065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7065> `_ ), lrslib ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), MuPeXI ( `#6991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6991> `_ ), netMHCpan ( `#6991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6991> `_ ), Normaliz ( `#7040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7040> `_ ), OpenColorIO ( `#7146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7146> `_ ), OpenJPEG ( `#7216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7216> `_ ), PHLAT ( `#7036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7036> `_ ), poppler ( `#7069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7069> `_ ), RECON ( `#7042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7042> `_ ), RepeatMasker ( `#7281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7281> `_ ), TreeMix ( `#7133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7133> `_ ), unrar ( `#7117 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7117> `_ ), utf8proc ( `#7083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7083> `_ ), VSEARCH ( `#7153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7153> `_ ), XMDS2 ( `#7121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7121> `_ ) * added additional easyconfigs for various supported software packages, including: * CheMPS2 1.8.8, Clang 6.0.1 + 7.0.0, dask 1.0.0, FFmpeg 4.1, GCC(core) 6.5.0 + 7.4.0, GPAW 1.4.0, HMMER 3.2.1, IPython 7.2.0, ITK 4.13.1, Keras 2.2.4, LLVM 7.0.0, Mothur 1.41.0, MultiQC 1.6, NAMD 2.13, OpenBLAS 0.3.4, OpenMPI 3.1.3 + 4.0.0, PSI4 1.2.1, Qt5 5.11.2, QuantumESPRESSO 6.3, Rust 1.30.1, Spark 2.4.0, Spyder 3.3.1, TensorFlow 1.11.0 + 1.12.0 * minor enhancements, including: * install misc tools for angsd ( `#6995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6995> `_ ) * add libXp component to X11 bundle for GCCcore 6.4.0 ( `#7062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7062> `_ ) * also install shared libraries for LZO ( `#7073 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7073> `_ ) * add extensions to R 3.5.1 easyconfigs: ``gllvm`` ( `#7123 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7123> `_ ), ``grpreg`` ( `#7140 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7140> `_ ), ``gamlss`` + ``gamlss.tr`` ( `#7263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7263> `_ ) * install Tk private headers ( `#7155 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7155> `_ ) * add ``File::Next`` extension to Perl 5.28.0 easyconfig ( `#7276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7276> `_ ) * various bug fixes, including: * fix installation of scikit-image 0.13.x by including missing required ``PyWavelets`` extension ( `#7061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7061> `_ ) * add missing dependencies to easyconfig for GC3Pie 2.5.0 ( `#7066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7066> `_ ) * stop setting ignored ' ``full_sanity_check`` ' easyconfig parameter in easyconfigs ( `#7094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7094> `_ ) * add missing checksums in X11/2016* easyconfigs ( `#7095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7095> `_ ) * add missing checksums in X11/2017* easyconfigs ( `#7096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7096> `_ ) * add missing ``cffi`` & ``pycparser`` extensions to recent Python easyconfigs ( `#7105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7105> `_ , `#7118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7118> `_ ) * fix homepage in QuantumESPRESSO easyconfigs ( `#7114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7114> `_ ) * use empty toolchain version in picard easyconfigs to ensure Java dependency is loaded during installation ( `#7116 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7116> `_ ) * fix checksum for ``mgcv`` extension in R 3.5.* easyconfigs ( `#7122 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7122> `_ ) * add missing 'patsy' extension in ARCH easyconfig + switch to using ``PythonBundle`` easyblock ( `#7124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7124> `_ ) * add missing (dummy) sklearn extension in NeuroKit easyconfig ( `#7126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7126> `_ ) * fix order of extensions in recent IPython easyconfigs to make ' ``pip check`` ' pass ( `#7131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7131> `_ ) * fix missing required Python packages in ASE 3.16.2 easyconfigs ( `#7139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7139> `_ ) * fix ``source_urls`` in CP2K easyconfigs (for official releases) ( `#7240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7240> `_ ) * update SCOTCH 6.0.5 easyconfigs in-place to 6.0.6 to fix wrong download URL ( `#7159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7159> `_ ) * add Autotools build dep in patchelf easyconfig ( `#7175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7175> `_ ) * STREAM fixes: use https + versioned source ( `#7193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7193> `_ ) * fix checksum in Molden easyconfig ( `#7251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7251> `_ ) * fix source URL for ADMIXTURE ( `#7258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7258> `_ ) * fix source URLs & versions + build procedure for SKESA ( `#7275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7275> `_ ) * fix checksum for TRF 4.09 ( `#7278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7278> `_ ) * add missing zlib dependency for NSS ( `#7293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7293> `_ ) * add required build deps for QtWebEngine in recent Qt5 easyconfigs ( `#7300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7300> `_ ) * fix ImageMagick source URLs: use ``launchpad.net`` for old versions, switch to GitHub for 7.0.8-* onwards ( `#7301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7301> `_ ) * other changes: * update ``Java/1.8`` wrapper to Java 1.8.0_192 ( `#7097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7097> `_ ) * don't enable ``optarch`` toolchain option in VCFtools easyconfigs, since it's enabled by default ( `#7106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7106> `_ ) * stop using lowopt in libxc 4.2.3 easyconfigs ( `#7115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7115> `_ ) * deprecate easyconfigs for ``ictce`` toolchains + ``intel`` toolchains older than ``intel/2016a`` ( `#7231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7231> `_ ) * deprecate easyconfigs for ``goolf(c)`` + corresponding ``gompi(c)`` subtoolchains ( `#7243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7243> `_ ) .. _release_notes_eb371: EasyBuild v3.7.1 (October 18th 2018) ------------------------------------ bugfix/update release **framework** - various enhancements, including: - generate ``.modulerc.lua`` when Lua syntax and Lmod >= 7.8 is used ( `#2597 <https://github.com/easybuilders/easybuild-framework/pull/2597> `_ ) - allow ``--force`` to use regex if ``--try-toolchain`` can not map intelligently ( `#2605 <https://github.com/easybuilders/easybuild-framework/pull/2605> `_ ) - add support for disabling modules tool version check ( `#2610 <https://github.com/easybuilders/easybuild-framework/pull/2610> `_ ) - add support to ``ModuleGenerator.modulerc`` method to also write ``.modulerc`` file ( `#2611 <https://github.com/easybuilders/easybuild-framework/pull/2611> `_ ) - check whether module file being wrapped exists in same directory as module wrapper when using Lmod 6.x ( `#2611 <https://github.com/easybuilders/easybuild-framework/pull/2611> `_ ) - various bug fixes, including: - stop relying on ' ``easy_install`` ' in bootstrap script, use ' ``python -m easy_install`` ' instead ( `#2590 <https://github.com/easybuilders/easybuild-framework/pull/2590> `_ ) - fix templating of values in ``list_software`` function ( `#2591 <https://github.com/easybuilders/easybuild-framework/pull/2591> `_ ) - fix composing of ``lib64`` fallback paths in sanity check ( `#2602 <https://github.com/easybuilders/easybuild-framework/pull/2602> `_ ) - determine ``file_info`` for all easyconfigs before any actual copying in ``copy_easyconfigs`` function ( `#2604 <https://github.com/easybuilders/easybuild-framework/pull/2604> `_ ) - also check for module wrappers in ``ModulesTool.exist`` method ( `#2606 <https://github.com/easybuilders/easybuild-framework/pull/2606> `_ ) - add trailing newline to module load message if it's not there yet ( `#2613 <https://github.com/easybuilders/easybuild-framework/pull/2613> `_ ) - retain all dependencies when determining dependency tree of a toolchain ( `#2617 <https://github.com/easybuilders/easybuild-framework/pull/2617> `_ ) - protect ``exts_lists`` from templating in ``dump`` method ( `#2619 <https://github.com/easybuilders/easybuild-framework/pull/2619> `_ ) - making CUDA capability detection more robust ( `#2621 <https://github.com/easybuilders/easybuild-framework/pull/2621> `_ ) - other changes: - lower required Lmod version to 6.5.1 ( `#2593 <https://github.com/easybuilders/easybuild-framework/pull/2593> `_ ) **easyblocks** - new software specific easyblocks for fastStructure ( `#1529 <https://github.com/easybuilders/easybuild-easyblocks/pull/1529> `_ ) - minor enhancements, including: - support bypassing use of system type obtained with recent ``config.guess`` in ``ConfigureMake`` ( `#1531 <https://github.com/easybuilders/easybuild-easyblocks/pull/1531> `_ ) - enhance generated module file for FreeSurfer ( `#1543 <https://github.com/easybuilders/easybuild-easyblocks/pull/1543> `_ ) - add option in Qt easyblock to check for QtWebEngine component in sanity check ( `#1544 <https://github.com/easybuilders/easybuild-easyblocks/pull/1544> `_ ) - also install CP2K as a library + code cleanup in CP2K easyblock ( `#1547 <https://github.com/easybuilders/easybuild-easyblocks/pull/1547> `_ ) - various bug fixes, including: - fix checking for downloaded dependencies for stand-alone installations in ``PythonPackage`` generic easyblock ( `#1530 <https://github.com/easybuilders/easybuild-easyblocks/pull/1530> `_ ) - also specify ``--host`` option to configure script based on config.guess result in ``ConfigureMake`` easyblock ( `#1532 <https://github.com/easybuilders/easybuild-easyblocks/pull/1532> `_ ) - use short module name when creating module wrapper in ``ModuleRC`` generic easyblock ( `#1535 <https://github.com/easybuilders/easybuild-easyblocks/pull/1535> `_ ) - use ``DOT_MODULERC`` constant in ``ModuleRC`` easyblock rather than hardcoding ' ``.modulerc`` ' ( `#1533 <https://github.com/easybuilders/easybuild-easyblocks/pull/1533> `_ ) - use ``--no-deps`` when installing .whl in TensorFlow easyblock if extension are being installed, move test run to sanity check ( `#1537 <https://github.com/easybuilders/easybuild-easyblocks/pull/1537> `_ ) - use ``os.getcwd()`` rather than ``self.startdir`` in TensorFlow easyblock to fix installation of TensorFlow as extension in a bundle ( `#1540 <https://github.com/easybuilders/easybuild-easyblocks/pull/1540> `_ ) - add symlink to wrapped module file when creating ``.modulerc`` in temporary location ( `#1539 <https://github.com/easybuilders/easybuild-easyblocks/pull/1539> `_ ) - properly handle Python dependency in Qscintilla easyblock ( `#1499 <https://github.com/easybuilders/easybuild-easyblocks/pull/1499> `_ ) - other changes: - cleanup Tarball easyblock by using ``copy_dir`` function ( `#1541 <https://github.com/easybuilders/easybuild-easyblocks/pull/1541> `_ ) **easyconfigs** - added easyconfigs for new toolchain ``foss/2018.08`` with GCC/8.2.0 ( `#6992 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6992> `_ ) - added example easyconfig files for 26 new software packages: - ARCH ( `#6939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6939> `_ ), fbm ( `#6948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6948> `_ ), GenomeTester4 ( `#6970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6970> `_ ), GlobusConnectPersonal ( `#6974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6974> `_ ), MMseqs2 ( `#6964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6964> `_ ), NAG ( `#5772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5772> `_ ), NAGfor ( `#5772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5772> `_ ), NSPR ( `#7005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7005> `_ ), NSS ( `#7005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7005> `_ ), NeuroKit ( `#6947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6947> `_ ), novoalign ( `#6944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6944> `_ ), OptiType ( `#6924 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6924> `_ ), OrthoFinder ( `#6964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6964> `_ ), pandas-datareader ( `#6938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6938> `_ ), pFUnit ( `#6949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6949> `_ ), PMIx ( `#6930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6930> `_ ), PSolver ( `#6888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6888> `_ ), PyDatastream ( `#6951 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6951> `_ ), PyFR ( `#6846 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6846> `_ ), Pyomo ( `#6910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6910> `_ ), Quandl ( `#6950 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6950> `_ ), RTG-Tools ( `#6862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6862> `_ ), seq2HLA ( `#6969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6969> `_ ), suds ( `#6951 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6951> `_ ), UCX ( `#6931 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6931> `_ ), XMLSec ( `#6929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6929> `_ ) - added additional easyconfigs for various supported software packages, including: - binutils 2.31.1, dask 0.19.4, GCC(core) 8.2.0, OpenBLAS 0.3.3, OpenMPI 3.1.2, Pillow 5.3.0, PyCUDA 2018.1 - minor enhancements, including: - add clustree + plotly extensions (+ deps) for R 3.5.1 ( `#6901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6901> `_ ) - add tclsh symlink to recent Tcl easyconfigs ( `#6915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6915> `_ ) - update GROMACS 2016.3 with NVML patches ( `#6936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6936> `_ ) - use ``make=make`` in build options for ParMGridGen easyconfigs ( `#6952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6952> `_ ) - add ``Data::Dump`` as extension to Perl (dependency for GIMIC) ( `#7004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7004> `_ ) - various bug fixes, including: - inhibit ``-Werror`` in binutils 2.26 as new system GCC has case fallthrough warnings ( `#5793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5793> `_ ) - change fastStructure easyconfig to use custom easyblock ( `#6893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6893> `_ ) - fix toolchain for tbb dependency in ``Bowtie2-2.3.4.2-foss-2018b.eb`` ( `#6927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6927> `_ ) - fix uroot installation in R-3.5.1-foss-2018b ( `#6934 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6934> `_ ) - add missing Python packages in TensorFlow 1.10.x easyconfigs ( `#6940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6940> `_ ) - add missing dep for Szip in 2017b builds of netCDF ( `#6942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6942> `_ ) - fix missing comment from ``OpenBabel-2.4.1-fix-link-path-tests.patch`` ( `#6943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6943> `_ ) - add patch to Python 3.6.1 - 3.6.3 that removes comment in comment ( `#6946 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6946> `_ ) - add missing ``ulimit_unlimited=True`` (see issue `#6484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6484> `_ ) in the newest Python builds ( `#6959 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6959> `_ ) - solve ' ``version UUID_1.0 not found`` ' problem in LibUUID easyconfigs ( `#6962 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6962> `_ ) - eliminate dependency on ancient problematic LibUUID library, replace with util-linux ( `#6963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6963> `_ ) - force building of ``ccmake`` for CMake 3.12.1 + fix deps ( `#6967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6967> `_ ) - fix broken installation for Python 3.6.2 & 3.6.3 with PyNaCl as dep for paramiko extension by explicitly including previous PyNaCl version as extension ( `#6971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6971> `_ ) - fix source URL for ADMIXTURE (no https) + add SHA256 checksum ( `#6982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6982> `_ ) - add missing NSS/DBus dependencies to Qt 5.10.1 easyconfigs built with foss toolchain to ensure that QtWebEngine component gets installed ( `#7005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7005> `_ ) - add ' ``openssl`` ' OS deps in Perl 5.28.0 easyconfig for ``Net::ssleay`` ( `#7008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7008> `_ ) - add missing checksum for ipaddress extension in Python easyconfigs ( `#7021 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7021> `_ and `#7033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7033> `_ ) - add missing extensions to Python 2.7.14 ( `#7022 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7022> `_ and `#7023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7023> `_ ), 3.6.2 ( `#7025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7025> `_ ), 3.6.3 ( `#7027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7027> `_ ) and 3.6.4 ( `#7029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7029> `_ and `#7030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7030> `_ ) - add missing OS dependencies for git ( `#7028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7028> `_ ) - create default configuration for RTG-Tools ( `#7032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7032> `_ ) - also run checks on changed files when target branch for PR is something different than 'develop' ( `#7034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/7034> `_ ) - other changes: - removed dead 'bzip.org' source URL for bzip2 source tarball ( `#6983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6983> `_ ) .. _release_notes_eb370: EasyBuild v3.7.0 (September 25th 2018) -------------------------------------- feature release **framework** - minimal Lmod version requirement bumped to 6.6.3 ( `#2575 <https://github.com/easybuilders/easybuild-framework/pull/2575> `_ ) - various enhancements, including: - add support to bootstrap script to force install specific EasyBuild version ( `#2382 <https://github.com/easybuilders/easybuild-framework/pull/2382> `_ , `#2580 <https://github.com/easybuilders/easybuild-framework/pull/2580> `_ ) - consider potential of multiple subtoolchains when resolving dependencies ( `#2464 <https://github.com/easybuilders/easybuild-framework/pull/2464> `_ , `#2465 <https://github.com/easybuilders/easybuild-framework/pull/2465> `_ , `#2466 <https://github.com/easybuilders/easybuild-framework/pull/2466> `_ , `#2585 <https://github.com/easybuilders/easybuild-framework/pull/2585> `_ ) - fall back to downloading using the ``requests`` Python package (if installed) when ``urllib2`` fails due to SSL error ( `#2538 <https://github.com/easybuilders/easybuild-framework/pull/2538> `_ ) - make ``--try-toolchain`` more aware of subtoolchains ( `#2539 <https://github.com/easybuilders/easybuild-framework/pull/2539> `_ ) - subtoolchain of original toolchains are now mapped to subtoolchains of target toolchain - add support for BLIS and goblf toolchain that uses BLIS for BLAS ( `#2540 <https://github.com/easybuilders/easybuild-framework/pull/2540> `_ ) - allow skipping of sanity check step via ' ``skipsteps`` ' easyconfig parameter ( `#2549 <https://github.com/easybuilders/easybuild-framework/pull/2549> `_ ) - add support for ``--check-contrib`` ( `#2551 <https://github.com/easybuilders/easybuild-framework/pull/2551> `_ ) - equivalent with ``--check-style`` , but also verifies presence of SHA256 checksums (+ more checks in the future) - added support to 'download' sources from git ( `#2555 <https://github.com/easybuilders/easybuild-framework/pull/2555> `_ ) - see https://easybuild.readthedocs.io/en/latest/Writing_easyconfig_files.html#downloading-from-a-git-repository - add ' ``parse`` ' hook to add support for applying site-specific customisations to the 'raw' easyconfig ( `#2562 <https://github.com/easybuilders/easybuild-framework/pull/2562> `_ , `#2566 <https://github.com/easybuilders/easybuild-framework/pull/2566> `_ ) - see https://easybuild.readthedocs.io/en/develop/Hooks.html - lift invalidating of module caches into helper method that can be used by easyblocks ( `#2571 <https://github.com/easybuilders/easybuild-framework/pull/2571> `_ ) - always dump a fully parsed easyconfig to the ' ``reprod`` ' subdir of the installation directory ( `#2574 <https://github.com/easybuilders/easybuild-framework/pull/2574> `_ ) - add ' ``modulerc`` ' method to ``ModuleGenerator`` class ( `#2575 <https://github.com/easybuilders/easybuild-framework/pull/2575> `_ ) - various bug fixes, including: - make GC3Pie stop build process if a dependency failed ( `#2474 <https://github.com/easybuilders/easybuild-framework/pull/2474> `_ ) - filter out patched files in test/ in ``fetch_easyconfigs_from_pr`` ( `#2547 <https://github.com/easybuilders/easybuild-framework/pull/2547> `_ ) - check GC3pie version using the ``pkg_resources`` API rather than using ``__version__`` (which was removed in GC3Pie 2.5.0) ( `#2554 <https://github.com/easybuilders/easybuild-framework/pull/2554> `_ ) - fix enforcing of checksums for extensions ( `#2561 <https://github.com/easybuilders/easybuild-framework/pull/2561> `_ , `#2570 <https://github.com/easybuilders/easybuild-framework/pull/2570> `_ , `#2579 <https://github.com/easybuilders/easybuild-framework/pull/2579> `_ ) - skip running of configuration checks while only a single configuration level is taken into account during ``--show-config`` ( `#2567 <https://github.com/easybuilders/easybuild-framework/pull/2567> `_ ) - fix error statements in modules tool version checks ( `#2576 <https://github.com/easybuilders/easybuild-framework/pull/2576> `_ ) - fix finding of software subdirectory for specified patch file in ``--new-pr`` / ``--update-pr`` ( `#2577 <https://github.com/easybuilders/easybuild-framework/pull/2577> `_ ) - take into account dependency 'wrappers' in check_conflicts ( `#2583 <https://github.com/easybuilders/easybuild-framework/pull/2583> `_ ) - stick to pycparser < 2.19 with Python 2.6 in Travis config ( `#2584 <https://github.com/easybuilders/easybuild-framework/pull/2584> `_ ) - other changes: - use ``namelower`` as default for ' ``github_account`` ' easyconfig parameter ( `#2528 <https://github.com/easybuilders/easybuild-framework/pull/2528> `_ ) - use ``.counts()`` rather than deprecated ``.stats()`` for GC3Pie ( `#2573 <https://github.com/easybuilders/easybuild-framework/pull/2573> `_ ) **easyblocks** - new generic easyblock: ``ModuleRC`` ( `#1503 <https://github.com/easybuilders/easybuild-easyblocks/pull/1503> `_ , `#1518 <https://github.com/easybuilders/easybuild-easyblocks/pull/1518> `_ ) - new software specific easyblocks for BWISE ( `#1497 <https://github.com/easybuilders/easybuild-easyblocks/pull/1497> `_ ) and VEP ( `#1512 <https://github.com/easybuilders/easybuild-easyblocks/pull/1512> `_ ) - minor enhancements, including: - update QuantumESPRESSO easyblock: stop building in installation dir, do not use external FoX dependency, support for recent versions ( `#1312 <https://github.com/easybuilders/easybuild-easyblocks/pull/1312> `_ ) - updates to TensorFlow easyblock: - require cuDNN if CUDA support is enabled, enable mkl-dnn by default, fix problem with internal protobuf problem, add awareness for TensorRT & NCCL ( `#1453 <https://github.com/easybuilders/easybuild-easyblocks/pull/1453> `_ ) - add support for IntelMPI ( `#1507 <https://github.com/easybuilders/easybuild-easyblocks/pull/1507> `_ ) - update WIEN2k easyblock for version 18.1 ( `#1460 <https://github.com/easybuilders/easybuild-easyblocks/pull/1460> `_ ) - add CUDA ' ``stubs`` ' subdirectory to $LIBRARY_PATH ( `#1464 <https://github.com/easybuilders/easybuild-easyblocks/pull/1464> `_ ) - add support for building ScaLAPACK on top of BLIS ( `#1467 <https://github.com/easybuilders/easybuild-easyblocks/pull/1467> `_ ) - handle X11 better and make ' ``static`` ' a build flag in Amber easyblock ( `#1468 <https://github.com/easybuilders/easybuild-easyblocks/pull/1468> `_ ) - update Boost easyblock for Boost 1.67.0 (name change in Python 3.x library files) ( `#1472 <https://github.com/easybuilders/easybuild-easyblocks/pull/1472> `_ ) - add CEI/bin to $PATH for ANSYS 19 & newer ( `#1476 <https://github.com/easybuilders/easybuild-easyblocks/pull/1476> `_ ) - enhance SCons easyblock to enable building in parallel ( `#1477 <https://github.com/easybuilders/easybuild-easyblocks/pull/1477> `_ ) - add awareness for CCOLAMD and CAMD in Trilinos easyblock ( `#1480 <https://github.com/easybuilders/easybuild-easyblocks/pull/1480> `_ ) - add support to apply (binary) patches after main CUDA install ( `#1481 <https://github.com/easybuilders/easybuild-easyblocks/pull/1481> `_ , `#1483 <https://github.com/easybuilders/easybuild-easyblocks/pull/1483> `_ ) - add support for only building Python bindings (+ code cleanup) in Boost easyblock ( `#1484 <https://github.com/easybuilders/easybuild-easyblocks/pull/1484> `_ , `#1495 <https://github.com/easybuilders/easybuild-easyblocks/pull/1495> `_ ) - provide control over subdirectory in which R packages are installed ( `#1485 <https://github.com/easybuilders/easybuild-easyblocks/pull/1485> `_ ) - added regex to fix ``$WM_PROJECT_VERSION`` correctly in OpenFOAM easyblock ( `#1489 <https://github.com/easybuilders/easybuild-easyblocks/pull/1489> `_ ) - improve PGI siterc so it allows ``-pthread`` switch ( `#1494 <https://github.com/easybuilders/easybuild-easyblocks/pull/1494> `_ ) - customise ``check_checksums method`` in Bundle easyblock to fix checking of checksums for components ( `#1496 <https://github.com/easybuilders/easybuild-easyblocks/pull/1496> `_ ) - include a pkgconfig file ' ``hdf5.pc`` ' to HDF5 installations ( `#1504 <https://github.com/easybuilders/easybuild-easyblocks/pull/1504> `_ ) - (download &) use an updated ``config.guess`` script in generic ConfigureMake easyblock ( `#1506 <https://github.com/easybuilders/easybuild-easyblocks/pull/1506> `_ , `#1522 <https://github.com/easybuilders/easybuild-easyblocks/pull/1522> `_ , `#1523 <https://github.com/easybuilders/easybuild-easyblocks/pull/1523> `_ , `#1524 <https://github.com/easybuilders/easybuild-easyblocks/pull/1524> `_ ) - make ``IntelBase`` generic easyblock aware of ``(pre)installopts`` ( `#1509 <https://github.com/easybuilders/easybuild-easyblocks/pull/1509> `_ ) - update Siesta easyblock for v3.2 to 4.1-b3 ( `#1510 <https://github.com/easybuilders/easybuild-easyblocks/pull/1510> `_ ) - take ``(pre)installopts`` into account in RPackage generic easyblock ( `#1513 <https://github.com/easybuilders/easybuild-easyblocks/pull/1513> `_ ) - update DOLFIN easyblock for latest version ( `#2018 <https://github.com/easybuilders/easybuild-easyblocks/pull/2018> `_ .1) ( `#1521 <https://github.com/easybuilders/easybuild-easyblocks/pull/1521> `_ ) - various bug fixes, including: - drop useless definition of ``$NLSPATH`` in ``IntelBase`` + fix ipp library paths ( `#1442 <https://github.com/easybuilders/easybuild-easyblocks/pull/1442> `_ ) - fix order of arguments in log message in ``PythonPackage`` easyblock ( `#1459 <https://github.com/easybuilders/easybuild-easyblocks/pull/1459> `_ ) - run ``ldconfig`` in post-install step of CUDA easyblock to create missing symlinks in 'stubs' subdirectory ( `#1473 <https://github.com/easybuilders/easybuild-easyblocks/pull/1473> `_ ) - take into account that only name/version may be specified for some components in ``Bundle`` easyblock ( `#1474 <https://github.com/easybuilders/easybuild-easyblocks/pull/1474> `_ ) - make SuperLU easyblock consider both ``lib`` and ``lib64`` subdirectories ( `#1479 <https://github.com/easybuilders/easybuild-easyblocks/pull/1479> `_ ) - use short build dir for Trilinos to dance around \" ``Argument list too long`` \" problem + link with ``libmetis.a`` ( `#1486 <https://github.com/easybuilders/easybuild-easyblocks/pull/1486> `_ ) - correct check for Red Hat 6 based OS in TensorFlow easyblock ( `#1487 <https://github.com/easybuilders/easybuild-easyblocks/pull/1487> `_ ) - improve configuration choice in FSL easyblock ( `#1498 <https://github.com/easybuilders/easybuild-easyblocks/pull/1498> `_ ) - don't check for ``mcc`` in MATLAB sanity check as it requires a specific toolbox license ( `#1514 <https://github.com/easybuilders/easybuild-easyblocks/pull/1514> `_ ) - make sure Bazel doesn't write files in $HOME/.cache when building TensorFlow ( `#1519 <https://github.com/easybuilders/easybuild-easyblocks/pull/1519> `_ ) - enable VSX on POWER for FFTW >= 3.3.7 ( `#1520 <https://github.com/easybuilders/easybuild-easyblocks/pull/1520> `_ ) - add ``librt`` as dependency when linking Trilinos with SuiteSparse ( `#1525 <https://github.com/easybuilders/easybuild-easyblocks/pull/1525> `_ ) - other changes: - switch to using CMake install procedure for Eigen 3.3.4 & newer ( `#1482 <https://github.com/easybuilders/easybuild-easyblocks/pull/1482> `_ ) - bump Lmod version used in Travis config to 6.6.3 (now required by framework) ( `#1505 <https://github.com/easybuilders/easybuild-easyblocks/pull/1505> `_ ) **easyconfigs** - added easyconfigs for new toolchains: ``fosscuda/2017b`` ( `#6706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6706> `_ ), ``intelcuda/#2017b`` ( `#6709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6709> `_ ), ``iomkl/2018b`` ( `#6661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6661> `_ ) - added example easyconfig files for 49 new software packages: - alleleCount ( `#6676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6676> `_ ), BCALM ( `#6796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6796> `_ ), BDBag ( `#6672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6672> `_ ), BFC ( `#6647 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6647> `_ ), Bio-DB-HTS ( `#6854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6854> `_ ), bioawk ( `#6865 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6865> `_ ), biomart-perl ( `#6745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6745> `_ ), BLIS ( `#6614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6614> `_ ), Boost.Python ( `#6763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6763> `_ ), BWISE ( `#6802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6802> `_ ), CapnProto ( `#6542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6542> `_ ), CaVEMan ( `#6708 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6708> `_ ), CCL ( `#5802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5802> `_ ), cDNA_Cupcake ( `#6787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6787> `_ ), cget ( `#6780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6780> `_ ), coevol ( `#6589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6589> `_ , `#6642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6642> `_ ), Delly ( `#6735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6735> `_ ), earthengine-api ( `#6556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6556> `_ ), fineRADstructure ( `#6586 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6586> `_ ), GIMIC ( `#6575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6575> `_ ), GitPython ( `#6850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6850> `_ ), HiC-Pro ( `#5873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5873> `_ ), Inelastica ( `#6831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6831> `_ ), JAXFrontCE ( `#6837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6837> `_ ), jq ( `#6632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6632> `_ ), KAT ( `#6808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6808> `_ ), KMC ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), Kraken2 ( `#6569 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6569> `_ ), Lighter ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), Mash ( `#6542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6542> `_ ), MetaPhlAn2 ( `#6600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6600> `_ ), Minimac4 ( `#6781 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6781> `_ ), mordecai ( `#6670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6670> `_ ), NCCL ( `#5802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5802> `_ ), NxTrim ( `#6646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6646> `_ ), parasail ( `#6601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6601> `_ ), PheWAS ( `#6030 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6030> `_ ), Pilon ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), python-parasail ( `#6601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6601> `_ ), SearchGUI ( `#6637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6637> `_ ), shovill ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), SKESA ( `#6553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6553> `_ ), snakemake ( `#6851 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6851> `_ ), strelka ( `#6742 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6742> `_ ), SWIPE ( `#6795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6795> `_ ), ToFu ( `#6322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6322> `_ ), tqdm ( `#6721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6721> `_ ), TRUST ( `#6601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6601> `_ ), VEP ( `#6854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6854> `_ ) - added additional easyconfigs for various supported software packages, including: - Bazel 0.16.0, Boost 1.67.0 + 1.68.0, CUDA 10.0.1, DOLFIN (FEniCS) 2018.1, FSL 5.0.11, GC3Pie 2.5.0, GROMACS 2018.3, HTSlib + SAMtools 1.9, IPython 6.4.0, matplotlib 3.0.0, OpenCoarrays 2.2.0, OpenFOAM 6 & v1806, PyTorch 0.4.1, Python 3.6.6, R 3.5.1, TensorFlow 1.10.1, Trilinos 12.12.1, WIEN2k 18.1 - minor enhancements, including: - add test to enforce SHA256 checksums in touched files in pull requests to develop ( `#5005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5005> `_ ) - add various extensions to recent R easyconfigs ( `#6590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6590> `_ , `#6686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6686> `_ , `#6858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6858> `_ ) - add ``mpmath`` extension to Python 3.6.4 + 3.7.0 easyconfigs ( `#6607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6607> `_ , `#6713 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6713> `_ ) - add Java 1.8 easyconfig that can be updated in-place to more recent JDK 1.8.x ( `#6712 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6712> `_ ) - see also https://easybuild.readthedocs.io/en/latest/Wrapping_dependencies.html - add ``iso_c_binding`` support to arpack-ng 3.6.2 ( `#6718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6718> `_ ) - add ``XML::Parser`` , ``XML::RegExp`` & ``XML::DOM`` extensions to Perl( `#6744 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6744> `_ ) - add ``tabulate`` extension to all Python > 3.6 easyconfigs ( `#6809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6809> `_ ) - enable MPI version of arpack-ng 3.5.0 ( `#6840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6840> `_ ) - add ``wish`` symlink to ``wish8.6`` in recent Tk easyconfigs ( `#6870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6870> `_ ) - add ``libXp`` and ``printproto`` to X11 bundle ( `#6873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6873> `_ ) - various bug fixes, including: - define ' ``_GNU_SOURCE`` ' to ensure that ' ``reallocarray`` ' is defined in flex 2.6.4 easyconfigs, fixes bootstrap crash ( `#5792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5792> `_ , `#6766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6766> `_ ) - added tabix dependency in VCFtools ( `#6584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6584> `_ ) - added zlib dependency to BWA ( `#6591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6591> `_ ), BEDTools ( `#6592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6592> `_ ), VCFtools ( `#6653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6653> `_ ) - add checksums to googletest easyconfigs ( `#6611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6611> `_ ) - fix source URL + add checksum to wkhtmltopdf-0.12.3-Linux-x86_64.eb ( `#6628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6628> `_ , `#6641 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6641> `_ ) - don't use external FoX dependency in QuantumESPRESSO 6.2 ( `#6638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6638> `_ ) - update hwloc easyconfigs with libxml2 and libpciaccess dependencies ( `#6639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6639> `_ ) - fix gettext build dep for Mono-5.10.0.160 ( `#6640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6640> `_ ) - remove no longer existing config option ``--enable-mpi-thread-multiple`` in OpenMPI 3.x easyconfigs ( `#6645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6645> `_ ) - fix homepage in recent HDF5 easyconfigs ( `#6687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6687> `_ ) - add expat dependency to Mesa v18.1.1 ( `#6706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6706> `_ ) - add missing ``--with-trio-flavor=netcdf`` flag to ABINIT 8.x easyconfigs ( `#6711 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6711> `_ ) - remove useless definition of $TORCH_CUDA_ARCH_LIST in PyTorch easyconfig that doesn't use CUDA ( `#6719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6719> `_ ) - fix building GCCcore 6.3.0 on recent OSs by backporting patches from 6.4.0 ( `#6727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6727> `_ ) - fix ``source_urls`` in bzip2 easyconfigs ( `#6728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6728> `_ ) - specify location of dependencies in configure options for libgd (to avoid system libraries being used instead) ( `#6731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6731> `_ ) - also install docs/man pages in recent git easyconfigs (versions 2.1x.y) ( `#6751 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6751> `_ ) - add CMake build dep for Eigen 3.3.4 ( `#6756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6756> `_ , `#6784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6784> `_ ) - add expat dependency to Perl 5.26.0 ( `#6758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6758> `_ ) - add ncurses OS dependency to CMake for Debian distros ( `#6783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6783> `_ ) - fix checksums for pkgmaker, rngtools & RcppProgress extensions in R 3.4.3 easyconfigs ( `#6815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6815> `_ ) - add pkg-config build dependency to GTS ( `#6819 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6819> `_ ) - do not check if hwloc-dump-hwdata utility was installed, since it's only built on x86 systems ( `#6836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6836> `_ ) - patch libxc 3.x and 4.0.x to compile on POWER ( `#6868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6868> `_ ) - consistently add patch for paycheck extension in Python 3.6/3.7 to fix UTF8 issue with README ( `#6892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6892> `_ ) - other changes: - bump Lmod version used in Travis config to 6.6.3 (now required by framework) ( `#6834 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6834> `_ ) .. _release_notes_eb362: EasyBuild v3.6.2 (July 11th 2018) --------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for including environment variable that is resolved at \"module load time\" in user module path ( `#2395 <https://github.com/easybuilders/easybuild-framework/pull/2395> `_ ) * ``{RUNTIME_ENV::EXAMPLE}`` is replaced by value of ``$EXAMPLE`` when module is loaded * also support generating Docker container recipes & image via ``--containerize`` (still experimental) ( `#2479 <https://github.com/easybuilders/easybuild-framework/pull/2479> `_ ) * add support for specifying source URLs directly in ' ``sources`` ' ( `#2520 <https://github.com/easybuilders/easybuild-framework/pull/2520> `_ ) * perform early 'raw' parse of provided easyconfig file to check for syntax error or faulty inputs ( `#2523 <https://github.com/easybuilders/easybuild-framework/pull/2523> `_ ) * add ' ``bitbucket_account`` ' easyconfig parameter and template, and let ``BITBUCKET*`` templates use it ( `#2525 <https://github.com/easybuilders/easybuild-framework/pull/2525> `_ ) * various bug fixes, including: * take into account ``--filter-deps`` when re-loading build dependencies in ``extensions_step`` ( `#2516 <https://github.com/easybuilders/easybuild-framework/pull/2516> `_ ) * fix for offline use of bootstrap script: ignore errors when determining source URLs if source tarballs are provided ( `#2517 <https://github.com/easybuilders/easybuild-framework/pull/2517> `_ ) * fix error message that is raised for incorrect type of value in ``sanity_check_paths`` ( `#2524 <https://github.com/easybuilders/easybuild-framework/pull/2524> `_ ) * other changes: * move flake8 config into ``setup.cfg`` + fix style issues in ``easybuild/tools/options.py`` ( `#2511 <https://github.com/easybuilders/easybuild-framework/pull/2511> `_ ) * make test that verifies that ``BuildOptions`` does not support updating a bit more flexible ( `#2518 <https://github.com/easybuilders/easybuild-framework/pull/2518> `_ ) **easyblocks** * new software-specific easyblock for OpenCV ( `#1444 <https://github.com/easybuilders/easybuild-easyblocks/pull/1444> `_ ) * minor enhancements, including: * use ``$CPATH`` / ``$LD_LIBRARY_PATH`` for CMake's ``find_path`` / ``find_library`` functions in ``CMakeMake`` easyblock ( `#1165 <https://github.com/easybuilders/easybuild-easyblocks/pull/1165> `_ ) * make cdft lib compilation optional for Intel MKL, by detecting MPI availability ( `#1393 <https://github.com/easybuilders/easybuild-easyblocks/pull/1393> `_ ) * add ``use_glibcxx11_abi`` easyconfig parameter in Boost easyblock ( `#1434 <https://github.com/easybuilders/easybuild-easyblocks/pull/1434> `_ ) * enable filtering of paths in ``$CPATH`` and ``$LIBRARY_PATH`` in TensorFlow easyblock ( `#1436 <https://github.com/easybuilders/easybuild-easyblocks/pull/1436> `_ ) * add support for building GROMACS with ``--optarch=GENERIC`` ( `#1440 <https://github.com/easybuilders/easybuild-easyblocks/pull/1440> `_ ) * check current stack limit and set it to ' ``unlimited`` ' if possible in Python easyblock ( `#1441 <https://github.com/easybuilders/easybuild-easyblocks/pull/1441> `_ ) * trivial update for Q&A in SAS easyblock ( `#1448 <https://github.com/easybuilders/easybuild-easyblocks/pull/1448> `_ ) * allow skipping tests when installing Perl extensions, by setting ' ``runtest`` ' to ``False`` ( `#1451 <https://github.com/easybuilders/easybuild-easyblocks/pull/1451> `_ ) * add support for installing Intel products using serial numbers ( `#1452 <https://github.com/easybuilders/easybuild-easyblocks/pull/1452> `_ ) * update version check to FFTW 3.3.8 for tests to pass on POWER (ppc64le) ( `#1454 <https://github.com/easybuilders/easybuild-easyblocks/pull/1454> `_ ) * various bug fixes, including: * build MPFR in GCC stage 1 without LTO if (system) GCC used is too old ( `#1435 <https://github.com/easybuilders/easybuild-easyblocks/pull/1435> `_ ) * make sure xmlpatterns always gets built with Qt ( `#1437 <https://github.com/easybuilders/easybuild-easyblocks/pull/1437> `_ ) * fix symlink check in NWChem easyblock + use ``change_dir`` / ``remove_file`` / ``symlink`` functions ( `#1438 <https://github.com/easybuilders/easybuild-easyblocks/pull/1438> `_ ) * other changes: * move flake8 configuration to ``setup.cfg`` and make HoundCI aware of it ( `#1430 <https://github.com/easybuilders/easybuild-easyblocks/pull/1430> `_ ) **easyconfigs** * added easyconfigs for new toolchains: ``foss/2018b`` ( `#6424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6424> `_ ), ``fosscuda/2018b`` ( `#6555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6555> `_ ) and ``intel/2018b`` ( `#6409 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6409> `_ ) * added example easyconfig files for 28 new software packages: * CUnit ( `#6469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6469> `_ ), eggnog-mapper ( `#6513 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6513> `_ ), FANN ( `#6468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6468> `_ ), FTGL ( `#6421 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6421> `_ ), FreeFem++ ( `#5918 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5918> `_ ), fastStructure ( `#6448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6448> `_ ), fastq-tools ( `#5396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5396> `_ ), fullrmc ( `#6422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6422> `_ ), GDGraph ( `#6529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6529> `_ ), heaptrack ( `#6450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6450> `_ ), libgpuarray ( `#5429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5429> `_ ), lz4 ( `#6449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6449> `_ ), MAJIQ ( `#5983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5983> `_ ), makedepf90 ( `#6504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6504> `_ ), nanopolish ( `#6464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6464> `_ ), opencv_contrib ( `#6441 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6441> `_ ), PRC ( `#6477 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6477> `_ ), Pillow-SIMD ( `#6152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6152> `_ ), Pytorch ( `#6152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6152> `_ ), poretools ( `#6467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6467> `_ ), pystran ( `#6395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6395> `_ ), R-keras ( `#6530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6530> `_ ), Scoary ( `#6521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6521> `_ ), Scrappie ( `#6469 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6469> `_ ), torchvision ( `#6152 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6152> `_ ), WISExome ( `#6524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6524> `_ ), WannierTools ( `#6539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6539> `_ ), zstd ( `#6449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6449> `_ , `#6452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6452> `_ ) * added additional easyconfigs for various supported software packages, including: * GROMACS 2018.2, HDF5 1.10.2, IPython 6.3.1, Kraken 1.0, Mesa 18.1.1, netCDF 4.6.1, NWChem 6.8, OpenBLAS 0.3.1, OpenMPI 3.1.1, Perl 5.28.0, Python 2.7.15, R 3.5.0, X11 20180604 * minor enhancements, including: * add hint on file name differences between downloaded and expected in cuDNN easyconfig ( `#6042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6042> `_ ) * add ' ``gee`` ' extension to R 3.4.4 easyconfigs ( `#6376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6376> `_ ) * enable building of MPI libraries in VTK 8.1.0 easyconfigs ( `#6460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6460> `_ , `#6429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6429> `_ ) * minor changes, including: * rename ' ``Canu`` ' to ' ``canu`` ' for v1.7 ( `#6389 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6389> `_ ) * update existing easyconfigs for OpenCV 3.4.1 to use new custom easyblock for OpenCV ( `#6509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6509> `_ ) * fix software name in ``Bsoft`` easyconfig ( `#6557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6557> `_ ) * various bug fixes, including: * fix SAMtools dependency for ChimPipe, required SAMtools < 1.0 ( `#5930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5930> `_ ) * skip installing of documentation in easyconfig for jemalloc 5.0.1 ( `#6428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6428> `_ ) * stop including GCCcore 6.4.0 as build dep for GCCcore 8.1.0 ( `#6431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6431> `_ ) * no longer needed with updated GCC easyblock * add patch for GCCcore 6.4.0 to fix compilation problems on glibc 2.26 systems ( `#6432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6432> `_ , `#6495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6495> `_ ) * fix checksums for ``pkgmaker`` / ``rngtools`` / ``RWeka`` / ``RcppProgress`` / ``mgcv`` extensions in R 3.4.4 easyconfigs ( `#6446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6446> `_ , `#6502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6502> `_ ) * added necessary compiler flag for Guile 1.8.8 ( `#6457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6457> `_ ) * build hwloc 1.11.10 with ``-fno-tree-vectorize`` to avoid segfaulting lstopo on Intel Skylake ( `#6461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6461> `_ ) * add patch for binutils 2.30 to fix assertion failure ( `#6463 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6463> `_ ) * sync extensions in ``Python-3.6.4-iomkl-2018a.eb`` easyconfig with other Python 3.6.4 easyconfigs using 2018a toolchain ( `#6471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6471> `_ ) * enable checking/setting of unlimited stack limit in Python 3.6.x easyconfigs using an ' ``intel`` ' toolchain ( `#6485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6485> `_ , `#6492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6492> `_ ) * add missing ``libxml2`` dependency for HDF5 1.10.1 ( `#6498 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6498> `_ ) * also copy eggnog-mapper scripts ( `#6522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6522> `_ ) * fix missing dependencies for Perl modules included as extensions for Perl 5.26.1 ( `#6532 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6532> `_ ) and 5.28.0 ( `#6533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6533> `_ ) * fix location of include directory in libffi 3.2.1 easyconfigs ( `#6565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6565> `_ ) * other changes * also check for multiple dependency variants in easyconfigs using GCCcore 7.3.0 & newer ( `#6444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6444> `_ ) .. _release_notes_eb361: EasyBuild v3.6.1 (May 26th 2018) -------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for enabling fallback in sanity check to consider ``lib64`` equivalent for seemingly missing libraries ( `#2477 <https://github.com/easybuilders/easybuild-framework/pull/2477> `_ ) * add ``GITHUB_LOWER_SOURCE`` constant ( `#2491 <https://github.com/easybuilders/easybuild-framework/pull/2491> `_ ) * add ' ``exts_download_dep_fail`` ' as known easyconfig parameter ( `#2493 <https://github.com/easybuilders/easybuild-framework/pull/2493> `_ ) * add support for passing custom messages on failing sanity check for extensions ( `#2494 <https://github.com/easybuilders/easybuild-framework/pull/2494> `_ ) * add definition for ``fosscuda`` toolchain ( `#2507 <https://github.com/easybuilders/easybuild-framework/pull/2507> `_ ) * various bug fixes, including: * make ``--inject-checksums`` always re-order ``source_urls`` / ``sources`` / ``patches`` / ``checksums`` ( `#2487 <https://github.com/easybuilders/easybuild-framework/pull/2487> `_ ) * fix git remote url in ``CONTRIBUTING.md`` ( `#2490 <https://github.com/easybuilders/easybuild-framework/pull/2490> `_ ) * make ``flake8`` happy in ``easyblock.py`` ( `#2492 <https://github.com/easybuilders/easybuild-framework/pull/2492> `_ ) * handle missing permissions for adding labels in ``--new-pr`` ( `#2497 <https://github.com/easybuilders/easybuild-framework/pull/2497> `_ ) * restore tweaked ``$TMPDIR`` value after loading module (for sanity check) ( `#2498 <https://github.com/easybuilders/easybuild-framework/pull/2498> `_ ) * enhance ``get_module_path`` function to auto-detect generic vs software-specific easyblock class names ( `#2502 <https://github.com/easybuilders/easybuild-framework/pull/2502> `_ ) * don't blindly overwrite an existing easyconfig in ``tweak_one`` ( `#2504 <https://github.com/easybuilders/easybuild-framework/pull/2504> `_ ) * take account that ``PlaintextKeyring`` may be provided via ``keyrings.alt`` ( `#2505 <https://github.com/easybuilders/easybuild-framework/pull/2505> `_ ) * prepend location for temporary module file to ``$MODULEPATH`` with high priority + mark it as default in ``load_fake_module`` method ( `#2506 <https://github.com/easybuilders/easybuild-framework/pull/2506> `_ ) **easyblocks** * minor enhancements, including: * add support for detecting auto-downloaded dependencies in ``PythonPackage`` easyblock ( `#1377 <https://github.com/easybuilders/easybuild-easyblocks/pull/1377> `_ ) * disabled by default, can be enabled using \" ``download_dep_fail = True`` \" in easyconfig file * add support to enable integration of pscom in psmpi easyblock ( `#1397 <https://github.com/easybuilders/easybuild-easyblocks/pull/1397> `_ ) * set ``$CMAKE_*_PATH`` when ``CMake`` is loaded in ``PythonPackage`` easyblock ( `#1398 <https://github.com/easybuilders/easybuild-easyblocks/pull/1398> `_ ) * update WIEN2k easyblock for v17 ( `#1405 <https://github.com/easybuilders/easybuild-easyblocks/pull/1405> `_ ) * disable jemalloc support in TensorFlow on CentOS 6 & co (+ minor cleanups) ( `#1412 <https://github.com/easybuilders/easybuild-easyblocks/pull/1412> `_ ) * update Maple easyblock to support recent versions ( `#1414 <https://github.com/easybuilders/easybuild-easyblocks/pull/1414> `_ ) * enable ``nc-config`` usage for netCDF in ESMF >=7.1 ( `#1419 <https://github.com/easybuilders/easybuild-easyblocks/pull/1419> `_ ) * enhance PETSc easyblock for version 3.9 ( `#1421 <https://github.com/easybuilders/easybuild-easyblocks/pull/1421> `_ ) * check output of MATLAB installation command for invalid installation key error ( `#1423 <https://github.com/easybuilders/easybuild-easyblocks/pull/1423> `_ ) * fix suffix for Boost Python library in Boost 1.67.0 & newer ( `#1424 <https://github.com/easybuilders/easybuild-easyblocks/pull/1424> `_ ) * support adding specific paths to ``$PATH`` for generic Binary easyblock via ' ``prepend_to_path`` ' custom easyconfig parameter ( `#1426 <https://github.com/easybuilders/easybuild-easyblocks/pull/1426> `_ ) * minor changes, including: * assume PGI Community edition is used when no license file is specified ( `#1427 <https://github.com/easybuilders/easybuild-easyblocks/pull/1427> `_ ) * various bug fixes, including: * fix imkl sanity check overwriting base libs with interface libs ( `#1392 <https://github.com/easybuilders/easybuild-easyblocks/pull/1392> `_ ) * install Chimera in a subdirectory to avoid its dependencies being added to the environment ( `#1413 <https://github.com/easybuilders/easybuild-easyblocks/pull/1413> `_ ) * add conditional so \" ``--with-x`` \" is only added to configopts if left unspecified in R easyblock ( `#1415 <https://github.com/easybuilders/easybuild-easyblocks/pull/1415> `_ ) * make ``configure`` and ``make`` look for FoX in ``$EBROOTFOX`` in QuantumESPRESSO easyblock ( `#1420 <https://github.com/easybuilders/easybuild-easyblocks/pull/1420> `_ ) * fix path for ``$ICEM_ACN`` in ANSYS easyblock ( `#1422 <https://github.com/easybuilders/easybuild-easyblocks/pull/1422> `_ ) * avoid hardcoding defaults in question patterns in Doris easyblock ( `#1428 <https://github.com/easybuilders/easybuild-easyblocks/pull/1428> `_ ) **easyconfigs** * added easyconfigs for new toolchains ``fosscuda/2018a`` ( `#6363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6363> `_ ) and ``giolfc/2017b`` ( `#5799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5799> `_ ) * added example easyconfig files for 24 new software packages: * BAGEL ( `#6332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6332> `_ ), Bottleneck ( `#6334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6334> `_ ), cisTEM ( `#6370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6370> `_ ), cftime ( `#6337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6337> `_ ), dotNET-Core-Runtime ( `#6345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6345> `_ ), ecCodes ( `#6235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6235> `_ ), feh ( `#6300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6300> `_ ), Graphene ( `#5043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5043> `_ ), gffread ( `#6306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6306> `_ ), HOME ( `#6227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6227> `_ ), HiCExplorer ( `#6342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6342> `_ ), ICU ( `#6371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6371> `_ ), Imlib2 ( `#6300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6300> `_ ), KmerGenie ( `#5929 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5929> `_ ), libgeotiff ( `#6262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6262> `_ ), NetPIPE ( `#6062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6062> `_ ), Pandoc ( `#6247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6247> `_ ), Pisces ( `#6347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6347> `_ ), Proteinortho ( `#6333 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6333> `_ ), pyshp ( `#6364 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6364> `_ ), SIMPLE ( `#6019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6019> `_ ), STIR ( `#6349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6349> `_ ), SimpleElastix ( `#6114 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6114> `_ ), wxWidgets ( `#6370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6370> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.67.0, ESMF 7.1.0r, GATK 4.0.4.0, GCC 8.1.0, GROMACS 2018, OpenBLAS 0.3.0, PETSc 3.9.1, PGI 18.4, TensorFlow 1.8.0, WIEN2k 17.1 * minor enhancements, including: * add ``py_expression_eval`` extension to (recent) Python 2.7.14 & 3.6.4 easyconfigs ( `#6285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6285> `_ ) * add ``README`` for Java with information on downloading source tarball ( `#6294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6294> `_ ) * add several extensions to Perl 5.26.1 easyconfigs, incl ``Dist::Zilla`` & dependencies ( `#6297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6297> `_ ) * also include archive URLs for Bioconductor 3.6 ( `#6311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6311> `_ ) * add ``README.md`` file for installing icc/ifort ( `#6317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6317> `_ ) * various bug fixes, including: * consistently specify ' ``intel-mkl`` ' component in recent Intel MKL easyconfigs ( `#6234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6234> `_ ) * add ``pkg-config`` as build dependency to libdrm ( `#6243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6243> `_ ) * add ``pkg-config`` build dep to most recent libdrm easyconfigs ( `#6244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6244> `_ ) * fix checksum for foreign extension in R 3.4.3 and R 3.4.4 easyconfigs ( `#6245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6245> `_ ) * fix installation of Libint 2.4.2 by building with ``-std=c++11`` ( `#6251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6251> `_ ) * fix source spec for networkx 2.1 extension in scikit-image easyconfig ( `#6254 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6254> `_ ) * avoid that Nipype downloads dependencies for included extensions ( `#6261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6261> `_ , `#6263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6263> `_ ) * consistently include patch for FLTK 1.3.4 ( `#6265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6265> `_ ) * fix Perl shebang in MCL v14.137 scripts ( `#6269 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6269> `_ ) * add patch to build particular source file of matrixStats extension in R 3.4.4 easyconfig with ``-O1`` to work around ICE in Skylake systems ( `#6278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6278> `_ ) * add ``pkg-config`` build dependency to FFmpeg >= 3.3.1 ( `#6291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6291> `_ ) * change back checksum for libdap 3.19.1 ( `#6305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6305> `_ ) * add patch for Automake 1.15 to fix issue with recent Perl versions ( `#6358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6358> `_ ) * fix ``glog`` causing intel error in Intel compilers on Intel Skylake ( `#6360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6360> `_ ) * include ICU as dependency in recent R easyconfigs (v3.4.3 & v3.4.4) ( `#6371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6371> `_ ) * fix checksum for RSEM 1.3.0 after sneaky re-release ( `#6379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6379> `_ ) .. _release_notes_eb360: EasyBuild v3.6.0 (April 26th 2018) ---------------------------------- feature release **framework** * (experimental) support for generating Singularity container recipes & (optionally) images via ' ``sudo singularity`` ' ( `#2332 <https://github.com/easybuilders/easybuild-framework/pull/2332> `_ , `#2480 <https://github.com/easybuilders/easybuild-framework/pull/2480> `_ , `#2481 <https://github.com/easybuilders/easybuild-framework/pull/2481> `_ , `#2482 <https://github.com/easybuilders/easybuild-framework/pull/2482> `_ , `#2483 <https://github.com/easybuilders/easybuild-framework/pull/2483> `_ ) * see documentation at http://easybuild.readthedocs.io/en/latest/Containers.html * include ``-ftree-vectorize`` and ``-fno-math-errno`` in default compiler optimisation flags for GCC ( `#2388 <https://github.com/easybuilders/easybuild-framework/pull/2388> `_ ) * this significantly improves performance of generated binaries when building with a GCC-based toolchain * can be disabled if needed via the ``vectorize`` toolchain option * several enhancements/fixes to GitHub integration support: * loosen commit message requirements for ``--new-pr`` w.r.t. to patches as long as all easyconfigs are new ( `#2438 <https://github.com/easybuilders/easybuild-framework/pull/2438> `_ ) * automatically add ' ``new`` ' and/or ' ``update`` ' labels in ``--new-pr`` ( `#2384 <https://github.com/easybuilders/easybuild-framework/pull/2384> `_ ) * add ``force_in_dry_run=True`` to ``copy_file`` in ``copy_patch_files`` ( `#2442 <https://github.com/easybuilders/easybuild-framework/pull/2442> `_ ) * test for custom commit message when deleting a file instead of when adding a patch ( `#2443 <https://github.com/easybuilders/easybuild-framework/pull/2443> `_ ) * make ``diff_stat`` pattern also match output of older git versions in tests for ``--new`` / ``update-pr`` ( `#2444 <https://github.com/easybuilders/easybuild-framework/pull/2444> `_ ) * remove duplicates from ``--new-pr`` title ( `#2478 <https://github.com/easybuilders/easybuild-framework/pull/2478> `_ ) * add support for \" ``eb --fetch`` \" to only download sources (even without having a modules tool installed) ( `#2457 <https://github.com/easybuilders/easybuild-framework/pull/2457> `_ ) * add definitions for a bunch of new toolchains: * ``golf`` ( `#2458 <https://github.com/easybuilders/easybuild-framework/pull/2458> `_ ), ``gmkl`` ( `#2460 <https://github.com/easybuilders/easybuild-framework/pull/2460> `_ ), ``gomkl`` ( `#2455 <https://github.com/easybuilders/easybuild-framework/pull/2455> `_ ), ``pmkl`` ( `#2460 <https://github.com/easybuilders/easybuild-framework/pull/2460> `_ ) * toolchains including CUDA: ``gmklc`` , ``gomklc`` , ``iimklc`` , ``iompic`` , ``iomklc`` ( `#2461 <https://github.com/easybuilders/easybuild-framework/pull/2461> `_ ) * various minor enhancements, including: * avoid that ' ``--inject-checksums`` ' adds lines longer than 120 characters ( `#2434 <https://github.com/easybuilders/easybuild-framework/pull/2434> `_ ) * enable caching of ``$HOME/.cache/pip`` in Travis config ( `#2435 <https://github.com/easybuilders/easybuild-framework/pull/2435> `_ ) * replace raw strings with bytes literal as iterator sentinels in checksum calculation ( `#2446 <https://github.com/easybuilders/easybuild-framework/pull/2446> `_ ) * new command-line option ' ``--job-max-jobs`` ' to cap nr of submitted build jobs with GC3Pie ( `#2378 <https://github.com/easybuilders/easybuild-framework/pull/2378> `_ ) * add configuration for houndci + flake8 ( `#2451 <https://github.com/easybuilders/easybuild-framework/pull/2451> `_ ) * add ``Accept`` header when downloading file ( `#2437 <https://github.com/easybuilders/easybuild-framework/pull/2437> `_ ) * include running of ' ``eb --check-github`` ' in Travis config ( `#2449 <https://github.com/easybuilders/easybuild-framework/pull/2449> `_ , `#2454 <https://github.com/easybuilders/easybuild-framework/pull/2454> `_ ) * flesh out common code blocks in ``test/framework/options.py`` ( `#2452 <https://github.com/easybuilders/easybuild-framework/pull/2452> `_ ) * support ' ``depends_on`` ' load statements in generated modules via ``--module-depends-on`` and ``module_depends_on`` easyconfig parameter ( `#2391 <https://github.com/easybuilders/easybuild-framework/pull/2391> `_ ) * fix compatibility with Modules v4.1.x ( `#2470 <https://github.com/easybuilders/easybuild-framework/pull/2470> `_ ) * add support to ``run_cmd`` to enable streaming output ( `#2476 <https://github.com/easybuilders/easybuild-framework/pull/2476> `_ ) * various bug fixes, including: * determine whether included easyblocks are generic or not based on class they define ( `#2432 <https://github.com/easybuilders/easybuild-framework/pull/2432> `_ ) * make sure GitHub token is used in test for ``--preview-pr`` ( `#2436 <https://github.com/easybuilders/easybuild-framework/pull/2436> `_ ) * take into account that toolchain components may be hidden when determining toolchain composition ( `#2440 <https://github.com/easybuilders/easybuild-framework/pull/2440> `_ ) * stick to autopep8 1.3.4 when testing with Python 2.6 ( `#2462 <https://github.com/easybuilders/easybuild-framework/pull/2462> `_ ) * strip off ``.lua`` extension when backing up modules to ensure Lmod 6.x doesn't pick up on them ( `#2463 <https://github.com/easybuilders/easybuild-framework/pull/2463> `_ ) * check for ``modulecmd.tcl`` before modulecmd in bootstrap script to discriminate between Modules 4.1.x vs 3.2.10 ( `#2468 <https://github.com/easybuilders/easybuild-framework/pull/2468> `_ ) * fix ``derive_alt_pypi_url`` after PyPI switching to sha256 in package URLs + fix broken test for ``pypi_source_urls`` + fix bootstrap script ( `#2471 <https://github.com/easybuilders/easybuild-framework/pull/2471> `_ ) * make sure that both ' ``get_git_revision`` ' and ' ``this_is_easybuild`` ' return regular strings rather than Unicode strings ( `#2472 <https://github.com/easybuilders/easybuild-framework/pull/2472> `_ ) **easyblocks** * new software-specific easyblock for Nim ( `#1402 <https://github.com/easybuilders/easybuild-easyblocks/pull/1402> `_ ) * minor enhancements, including: * enhance ``RPackage`` easyblock to support installing from unpacked sources ( `#1383 <https://github.com/easybuilders/easybuild-easyblocks/pull/1383> `_ ) * add support to ``PythonPackage`` easyblock to install with ' ``pip install --editable`` ' ( `#1384 <https://github.com/easybuilders/easybuild-easyblocks/pull/1384> `_ ) * add ``$EBROOTIFORT/include`` in ``$CPATH`` for ifort ( `#1385 <https://github.com/easybuilders/easybuild-easyblocks/pull/1385> `_ ) * add houndci + flake8 configuration ( `#1388 <https://github.com/easybuilders/easybuild-easyblocks/pull/1388> `_ ) * add additional location to ``$PATH`` for FLUENT installations ( `#1389 <https://github.com/easybuilders/easybuild-easyblocks/pull/1389> `_ ) * make ``PythonPackage`` generic easyblock aware of ' ``unpack_options`` ' easyconfig parameter ( `#1391 <https://github.com/easybuilders/easybuild-easyblocks/pull/1391> `_ ) * minor updates to ABAQUS easyblock to support latest version ( `#1394 <https://github.com/easybuilders/easybuild-easyblocks/pull/1394> `_ ) * add support for extracting sources in ``Binary`` easyblock ( `#1401 <https://github.com/easybuilders/easybuild-easyblocks/pull/1401> `_ ) * various bug fixes, including: * fix linking to FFTW for Doris: should be ``-lfftw3f`` ( `#1387 <https://github.com/easybuilders/easybuild-easyblocks/pull/1387> `_ ) * fix for installing TensorFlow 1.6.0: use the absolute path for the C compiler when compiling with GPU support ( `#1386 <https://github.com/easybuilders/easybuild-easyblocks/pull/1386> `_ ) * also take ``lib64`` into account for binutils libraries ( `#1399 <https://github.com/easybuilders/easybuild-easyblocks/pull/1399> `_ ) * make sanity check in MPICH easyblock aware of libraries in ``lib64`` subdir ( `#1403 <https://github.com/easybuilders/easybuild-easyblocks/pull/1403> `_ ) * take into account that ``self.debuggerpath`` may not be set in icc easyblock ( `#1408 <https://github.com/easybuilders/easybuild-easyblocks/pull/1408> `_ ) * extend noqa in configure step of Qt easyblock ( `#1409 <https://github.com/easybuilders/easybuild-easyblocks/pull/1409> `_ ) **easyconfig** * added easyconfigs for new toolchain golf/2018a ( `#6080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6080> `_ ) * added example easyconfig files for 39 new software packages: * ARAGORN ( `#6138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6138> `_ , `#6219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6219> `_ ), amask ( `#6105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6105> `_ ), BamBam ( `#5490 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5490> `_ ), Bandage ( `#6053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6053> `_ ), bcgTree ( `#6057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6057> `_ ), biobambam2 ( `#6040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6040> `_ ), CODEX2 ( `#5972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5972> `_ ), coverage ( `#5964 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5964> `_ ), DANPOS2 ( `#5870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5870> `_ ), EasyQC ( `#6175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6175> `_ ), elastix ( `#6074 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6074> `_ ), FRANz ( `#6035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6035> `_ ), Filtlong ( `#6050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6050> `_ ), FriBidi ( `#6181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6181> `_ ), Gblocks ( `#6057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6057> `_ ), Grace ( `#6036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6036> `_ ), LMfit ( `#6119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6119> `_ ), libmaus2 ( `#6040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6040> `_ ), MathGL ( `#6033 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6033> `_ ), MiGEC ( `#6047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6047> `_ ), MiXCR ( `#6045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6045> `_ ), Miniconda3 ( `#6075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6075> `_ ), Multiwfn ( `#5403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5403> `_ ), mosdepth ( `#6169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6169> `_ ), Nim ( `#6167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6167> `_ ), Porechop ( `#6051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6051> `_ ), propy ( `#6091 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6091> `_ ), Roary ( `#6056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6056> `_ ), Rtree ( `#6222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6222> `_ ), SALib ( `#6145 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6145> `_ ), SMRT-Link ( `#6218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6218> `_ ), SimpleITK ( `#6172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6172> `_ ), spectral.methods ( `#6104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6104> `_ ), supernova ( `#6193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6193> `_ ), TEToolkit ( `#5912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5912> `_ ), tbl2asn ( `#6139 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6139> `_ ), udocker ( `#5770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5770> `_ ), vartools ( `#6102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6102> `_ ), XCfun ( `#5975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5975> `_ ) * added new easyconfigs for existing toolchains: * ``gmpich/2017.08`` ( `#6143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6143> `_ ), ``goolfc/2018a`` ( `#6129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6129> `_ ), ``intel/2018.02`` ( `#6077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6077> `_ ), ``iomkl/2018.02`` ( `#6088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6088> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 8.6.3, Anaconda2 5.1.0, Anaconda3 5.1.0, binutils 2.30, dask 0.17.2, FFmpeg 4.0, GCC(core) 7.3.0, GROMACS 2016.5, HTSlib 1.8, LLVM 6.0.0, Mesa 17.3.6, netCDF 4.6.0, Octave 4.2.2, OpenCV 3.4.1, PLUMED 2.4.1, PROJ 5.0.0, PostgreSQL 10.3, Qt5 5.10.1, R 3.4.4, SAMtools 1.8, Spack 0.11.2, TensorFlow 1.7.0, VTK 8.1.0 * minor enhancements, including: * add test to ensure there's only one variant for each dependency in dep graph of easyconfigs using particular toolchains ( `#5970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5970> `_ , `#6023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6023> `_ ) * add extensions required by CODEX2 v20180227 to Bioconductor w/ R 3.4.3 ( `#5972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5972> `_ ) * add config file for https://pre-commit.com/ ( `#5785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5785> `_ ) * add custom sanity check paths for GraphicsMagick consistently ( `#5997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5997> `_ ) * add custom sanity check paths to recent Ghostscript easyconfigs ( `#5998 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5998> `_ ) * add svd, Rssa, JBTools, RUnit, DistributionUtils and gapfill extensions for R 3.4.3 ( `#6099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6099> `_ ) * add additional extensions to Bioconductor 3.6 bundle ( `#6136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6136> `_ ) * add xlrd extension to recent Python 2.x and 3.x easyconfigs ( `#6162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6162> `_ ) * minor changes, including: * use gettext 0.19.8.1 on top of libxml2 2.9.7 as dep for git built with ``foss/2018a`` ( `#5993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5993> `_ ) * bump hwloc dep for OpenMPI 2.1.2 that is part of ``iomkl/2018a`` to v1.11.8 ( `#5994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5994> `_ ) * use non-interactive plotting backend by default for matplotlib 2.1.2 ( `#6024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6024> `_ ) * don't use bare Perl as dependency for git with ``foss/2018a`` , use variant with extensions ( `#6058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6058> `_ ) * various bug fixes, including: * fix ``moduleclass`` & add custom ``sanity_check_paths`` in gettext easyconfigs ( `#5991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5991> `_ ) * drop use of ``--disable-dlopen`` in (recent) OpenMPI easyconfigs due to negative performance impact ( `#6060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6060> `_ ) * add missing XZ dep in Python 3.6.4 easyconfigs built with ``*/2018a`` toolchain ( `#6065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6065> `_ ) * add 10 packages that were previously downloaded in Python 3.6.4 easyconfigs ( `#6081 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6081> `_ ) * add patch for Tensorflow 1.6 & 1.7 to include missing -lrt link flag (needed in CentOS6) ( `#6089 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6089> `_ ) * fix checksums for R extensions that were updated in place in easyconfigs for R versions 3.4.3 & 3.4.4 ( `#6118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6118> `_ ) * include pkg-config as build dep in recent R easyconfigs (required for at least nloptr) ( `#6122 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6122> `_ ) * remove Intel-specific workaround for ' ``undefined symbol: __stack_chk_guard`` ' issue from Python 3.6.4 foss/2018a easyconfig ( `#6130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6130> `_ ) * add configopt ``--without-matlab`` / ``octave`` to all NLopt easyconfigs ( `#6132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6132> `_ ) * also consider ``lib64`` in ``sanity_check_paths`` for Bison 3.0.4 ( `#6170 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6170> `_ ) * don't use libyaml built with dummy as dep for PyYAML ( `#6208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6208> `_ ) * add missing pkg-config build dep in recent GObject-Introspection, GLib & cairo easyconfigs ( `#6216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6216> `_ ) * don't include (ancient version of) ``Time::HiRes`` as Perl extension, since it's a core Perl module ( `#6225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6225> `_ ) * this fixes problems with the installation of BioPerl and proovread * add missing XML-LibXML dependency in recent BioPerl easyconfigs ( `#6226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6226> `_ ) * add ``--without-ada`` configure option in recent ncurses easyconfigs ( `#6228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6228> `_ ) * add patch for snaphu to fix segmentation fault due to use of short integer ( `#6230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/6230> `_ ) .. _release_notes_eb353: EasyBuild v3.5.3 (March 7th 2018) --------------------------------- bugfix/update release **framework** * various enhancements, including: * re-enable testing against environment modules, bump Lmod to 7.7.16 ( `#2425 <https://github.com/easybuilders/easybuild-framework/pull/2425> `_ ) * print which hook is being executed in the command line output ( `#2427 <https://github.com/easybuilders/easybuild-framework/pull/2427> `_ ) * various bug fixes, including: * fix order in result of gen_list_easyblocks and gen_easyblocks_overview_rst ( `#2421 <https://github.com/easybuilders/easybuild-framework/pull/2421> `_ ) * fix target account for branch pushed when using ``--new-pr`` ( `#2426 <https://github.com/easybuilders/easybuild-framework/pull/2426> `_ ) **easyblocks** * minor enhancements, including: * make GROMACS easyblock select build type based on value for ' ``debug`` ' in ' ``toolchainopts`` ' ( `#1374 <https://github.com/easybuilders/easybuild-easyblocks/pull/1374> `_ ) * re-enable testing against environment modules, bump Lmod to 7.7.16 ( `#1376 <https://github.com/easybuilders/easybuild-easyblocks/pull/1376> `_ ) * enhance Gurobi easyblock to support installing Python bindings ( `#1378 <https://github.com/easybuilders/easybuild-easyblocks/pull/1378> `_ ) **easyconfigs** * added example easyconfig files for 2 new software packages: * CNVkit and hmmlearn ( `#5954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5954> `_ ) * added additional easyconfigs for various supported software packages, including: * matplotlib 2.1.2, TensorFlow 1.6.0 * minor enhancements, including: * re-enable testing against environment modules, bump Lmod to 7.7.16 ( `#5944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5944> `_ ) * add cghFLasso extension to R 3.4.3 easyconfigs ( `#5953 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5953> `_ ) * add ' ``Math::CDF`` ' extension to recent Perl modules ( `#5957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5957> `_ ) * various bug fixes, including: * add missing ``--enable-ld-version-script`` configure option for LibTIFF 4.0.9 built with ``GCCcore/6.4.0`` ( `#5945 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5945> `_ ) * hard disable UCX support in recent OpenMPI versions, to dance around bug in OpenMPI configure script ( `#5949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5949> `_ ) .. _release_notes_eb352: EasyBuild v3.5.2 (March 2nd 2018) --------------------------------- bugfix/update release **framework** * various enhancements, including: * add functionality to skip devel module with naming scheme ( `#2374 <https://github.com/easybuilders/easybuild-framework/pull/2374> `_ ) * add pagination support in ``clean_gists.py`` ( `#2379 <https://github.com/easybuilders/easybuild-framework/pull/2379> `_ ) * allow basic compiler modulenames to be specified as keys in ``--optarch`` ( `#2387 <https://github.com/easybuilders/easybuild-framework/pull/2387> `_ ) * initial set of OHPC module meta data for EasyBuild ( `#2392 <https://github.com/easybuilders/easybuild-framework/pull/2392> `_ ) * allow different target account in ``post_comment_in_issue`` ( `#2399 <https://github.com/easybuilders/easybuild-framework/pull/2399> `_ ) * declare support for RPATH linking stable ( `#2409 <https://github.com/easybuilders/easybuild-framework/pull/2409> `_ ) * various bug fixes, including: * update bootstrap script to be compatible with Modules v4 ( `#2390 <https://github.com/easybuilders/easybuild-framework/pull/2390> `_ ) * avoid fatal error when determining glibc version on non-glibc Linux system (e.g. Alphine Linux) ( `#2398 <https://github.com/easybuilders/easybuild-framework/pull/2398> `_ ) * exclude location of RPATH wrappers from ``$PATH`` to avoid fork bomb ( `#2410 <https://github.com/easybuilders/easybuild-framework/pull/2410> `_ ) * fix target account for ``--update-pr`` in case it's different from GitHub account being used to push branch ( `#2419 <https://github.com/easybuilders/easybuild-framework/pull/2419> `_ ) **easyblocks** * new software-specific easyblocks for COMSOL ( `#1317 <https://github.com/easybuilders/easybuild-easyblocks/pull/1317> `_ ), Stata ( `#1241 <https://github.com/easybuilders/easybuild-easyblocks/pull/1241> `_ ) and TensorFlow ( `#1287 <https://github.com/easybuilders/easybuild-easyblocks/pull/1287> `_ , `#1361 <https://github.com/easybuilders/easybuild-easyblocks/pull/1361> `_ ) * enhance GCC easyblock to support building generically (via ' ``generic`` ' easyconfig parameter or ``--optarch=GENERIC`` ) ( `#1336 <https://github.com/easybuilders/easybuild-easyblocks/pull/1336> `_ ) * minor enhancements, including: * make GROMACS easyblock aware of building for KNL via ``--optarch=MIC-AVX512`` ( `#1360 <https://github.com/easybuilders/easybuild-easyblocks/pull/1360> `_ ) * unset ``$PERL_MM_OPT`` and ``$PERL_MB_OPT`` when installing Perl modules to avoid problems ( `#1362 <https://github.com/easybuilders/easybuild-easyblocks/pull/1362> `_ ) * add custom ' ``use_pip_for_deps`` ' easyconfig parameter to ``PythonPackage`` easyblock ( `#1366 <https://github.com/easybuilders/easybuild-easyblocks/pull/1366> `_ ) * add support for ' ``default_component_specs`` ' easyconfig parameter in ``Bundle`` easyblock ( `#1369 <https://github.com/easybuilders/easybuild-easyblocks/pull/1369> `_ ) * various bug fixes, including: * fix logic in icc easyblock w.r.t. location of debugger libraries (libipt library for gdb) ( `#1224 <https://github.com/easybuilders/easybuild-easyblocks/pull/1224> `_ ) * fix Tkinter easyblock to install Tkinter 3.x ( `#1347 <https://github.com/easybuilders/easybuild-easyblocks/pull/1347> `_ ) * let impi modules also update ``$MANPATH`` ( `#1354 <https://github.com/easybuilders/easybuild-easyblocks/pull/1354> `_ ) * enhance Octave extension filter to avoid false positives ( `#1355 <https://github.com/easybuilders/easybuild-easyblocks/pull/1355> `_ ) * make CUDA easyblock aware of ' ``preinstallopts`` ' easyconfig parameter ( `#1367 <https://github.com/easybuilders/easybuild-easyblocks/pull/1367> `_ ) * fix handling of per-component (checksums for) patches in ``Bundle`` easyblock ( `#1369 <https://github.com/easybuilders/easybuild-easyblocks/pull/1369> `_ ) **easyconfigs** * added example easyconfig files for 24 new software packages: * AMPL-MP ( `#5800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5800> `_ ), AmberTools ( `#5632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5632> `_ ), bcolz ( `#5864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5864> `_ ), detonate ( `#5709 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5709> `_ ), dropEst ( `#5734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5734> `_ ), EvidentialGene ( `#5627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5627> `_ ), faceswap ( `#5825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5825> `_ ), fineSTRUCTURE ( `#5663 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5663> `_ ), Gradle ( `#5828 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5828> `_ ), gbs2ploidy ( `#5877 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5877> `_ ), HIPS ( `#5725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5725> `_ ), Ipopt ( `#5800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5800> `_ ), libMemcached ( `#5804 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5804> `_ ), MEGAHIT ( `#5748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5748> `_ ), Mmg ( `#5807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5807> `_ ), methylpy ( `#5874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5874> `_ ), pstoedit ( `#5884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5884> `_ ), python-igraph ( `#5905 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5905> `_ ), RNAcode ( `#5854 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5854> `_ ), Seq-Gen ( `#5695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5695> `_ ), Stata ( `#5102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5102> `_ ), scikit-allel ( `#5864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5864> `_ ), TetGen ( `#5681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5681> `_ ), zarr ( `#5864 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5864> `_ ) * added new easyconfigs for existing toolchains: giolf/2018a ( `#5777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5777> `_ ), goolfc/2017b ( `#5768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5768> `_ ), iomkl/2018a ( `#5878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5878> `_ ) * added additional easyconfigs for various supported software packages, including: * CP2K 5.1, IPython 6.2.1, OpenFOAM v1712, Perl 5.26.1, Python 3.6.4, TensorFlow 1.5.0, X11 20180131 * minor enhancements, including: * add ``feather`` and ``tidyverse`` as extensions for R 3.4.3 ( `#5693 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5693> `_ ) * build recent PLUMED versions with all modules enabled ( `#5696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5696> `_ ) * add MAST/splatter/scDD to Bioconductor 3.6 bundle ( `#5704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5704> `_ ) * add ``dummies`` as extension for R 3.4.3 + ``monocle`` / ``scde`` / ``ROTS`` (+ deps) to Bioconductor 3.6 bundle ( `#5724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5724> `_ ) * include ``io`` and ``statistics`` extensions to Octave 4.2.1 easyconfigs ( `#5798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5798> `_ ) * switch to using TensorFlow as backend for recent versions of Keras ( `#5821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5821> `_ ) * various bug fixes, including: * using the correct binutils in jemalloc 5.0.1 easyconfig using ``GCCcore/6.4.0`` ( `#5659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5659> `_ ) * fix source URLs for MPC ( `#5662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5662> `_ ) * add Tkinter as dependency for ASE & matplotlib using Python 3.6.3 ( `#5658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5658> `_ ) * fix versions for updated extensions in Bioconductor 3.6 bundle ( `#5704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5704> `_ , `#5724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5724> `_ , `#5880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5880> `_ ) * fix missing M4 build dependency in nettle easyconfigs ( `#5722 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5722> `_ ) * fix homepage for OpenFOAM 4.x & 5.x, should be ``openfoam.org`` ( `#5422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5422> `_ , `#5780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5780> `_ ) * add matplotlib, cairo & PyCairo dependencies for graph-tool 2.26 + enhance sanity check ( `#5787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5787> `_ ) * fix hardcoded version in scikit-image easyconfigs ( `#5822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5822> `_ ) * fix pkgconfig moduleclass, ' ``data`` ' doesn't make much sense ( `#5817 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5817> `_ ) * add sanity check in recent matplotlib easyconfigs to ensure that Tkinter is available ( `#5689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5689> `_ , `#5896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5896> `_ ) * correct MPI path when building ABINIT with ' ``foss`` ' toolchain ( `#5760 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5760> `_ ) * patch Hyperopt to make it work with networkx 2.0 ( `#5642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5642> `_ ) * add Tkinter sanity check to ASE easyconfigs ( `#5691 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5691> `_ , `#5909 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5909> `_ ) * include autotools as build dep in git easyconfigs ( `#5718 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5718> `_ ) * fix sanity check paths for Debian OS in JasPer easyconfigs ( `#5897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5897> `_ ) * fix source_urls for recent versions of ABINIT ( `#5908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5908> `_ ) * add patch for recent GDAL easyconfigs using ``intel`` toolchain to fix icc get stuck on compiling ``ceos.c`` ( `#5915 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5915> `_ ) * add explicit zlib dependency in Tkinter 2.x and 3.x ( `#5797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5797> `_ , `#5926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5926> `_ ) * fix source URLs & homepage in Singularity easyconfigs ( `#5927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5927> `_ ) * fix installation of TensorFlow 1.3 via binary wheel after introducing TensorFlow easyblock ( `#5938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5938> `_ ) .. _release_notes_eb351: EasyBuild v3.5.1 (January 16th 2018) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * add definition of ``giolfc`` toolchain ( `#2359 <https://github.com/easybuilders/easybuild-framework/pull/2359> `_ ) * add support for Environment Modules 4 ( `#2365 <https://github.com/easybuilders/easybuild-framework/pull/2365> `_ ) * various bug fixes, including: * install SQLAlchemy < 1.2.0 with Python 2.6 in Travis config ( `#2367 <https://github.com/easybuilders/easybuild-framework/pull/2367> `_ ) * make code in ``easybuild/tools/job/gc3pie.py`` forward-compatible with GC3Pie 2.5 ( `#2373 <https://github.com/easybuilders/easybuild-framework/pull/2373> `_ ) **easyblocks** * minor enhancements, including: * auto-detect default build target for Clang ( `#1115 <https://github.com/easybuilders/easybuild-easyblocks/pull/1115> `_ ) * build GROMACS for target architecture based on ``--optarch`` ( `#1163 <https://github.com/easybuilders/easybuild-easyblocks/pull/1163> `_ ) * ensure correct $PYTHONPATH for recent OpenBabel versions ( `#1219 <https://github.com/easybuilders/easybuild-easyblocks/pull/1219> `_ ) * enhance Amber easyblock with support for OpenBLAS and better Intel MPI support ( `#1305 <https://github.com/easybuilders/easybuild-easyblocks/pull/1305> `_ ) * also support only installing AmberTools through Amber easyblock ( `#1305 <https://github.com/easybuilders/easybuild-easyblocks/pull/1305> `_ ) * also pick locations for CUPTI headers & libraries in CUDA easyblock ( `#1306 <https://github.com/easybuilders/easybuild-easyblocks/pull/1306> `_ ) * update patching out of sanitizer tests for recent Clang versions (>=5.0) ( `#1327 <https://github.com/easybuilders/easybuild-easyblocks/pull/1327> `_ ) * update known questions for Qt5 to support installing recent versions ( `#1328 <https://github.com/easybuilders/easybuild-easyblocks/pull/1328> `_ ) * update BamTools easyblock for v2.5.0 ( `#1332 <https://github.com/easybuilders/easybuild-easyblocks/pull/1332> `_ , `#1337 <https://github.com/easybuilders/easybuild-easyblocks/pull/1337> `_ ) * disable ``libfox`` target if external module found in QuantumESPRESSO easyblock ( `#1333 <https://github.com/easybuilders/easybuild-easyblocks/pull/1333> `_ ) * add support for linking Octave with multi-threaded BLAS/LAPACK library ( `#1340 <https://github.com/easybuilders/easybuild-easyblocks/pull/1340> `_ ) * support ``install_target`` in PythonPackage + deprecate ``use_easy_install`` & ``use_setup_py_develop`` ( `#1341 <https://github.com/easybuilders/easybuild-easyblocks/pull/1341> `_ , `#1342 <https://github.com/easybuilders/easybuild-easyblocks/pull/1342> `_ ) * various bug fixes, including: * make RubyGem easyblock use ``$GEM_*`` environment variables except if as extension of Ruby itself ( `#1247 <https://github.com/easybuilders/easybuild-easyblocks/pull/1247> `_ ) * move initialisation in ``SystemCompiler`` & ``SystemMPI`` easyblocks to the prepare step ( `#1282 <https://github.com/easybuilders/easybuild-easyblocks/pull/1282> `_ ) * enable skipping sanitizer tests by default in Clang easyblock, they can't be relied on ( `#1329 <https://github.com/easybuilders/easybuild-easyblocks/pull/1329> `_ ) * fix quotes when using ``$ORIGIN`` in ``RPATH`` locations for DOLFIN ( `#1338 <https://github.com/easybuilders/easybuild-easyblocks/pull/1338> `_ ) * fix sanity check for shared libraries in Trilinos easyblock ( `#1339 <https://github.com/easybuilders/easybuild-easyblocks/pull/1339> `_ ) **easyconfigs** * added easyconfigs for ``foss/2018a`` and ``intel/2018a`` common toolchains ( `#5577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5577> `_ ), ( `#5578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5578> `_ ) * added example easyconfig files for 26 new software packages: * BeautifulSoup ( `#5601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5601> `_ ), Calendrical ( `#5588 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5588> `_ ), ChimPipe ( `#5560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5560> `_ ), crb-blast ( `#5124 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5124> `_ )), dammit ( `#5125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5125> `_ ), deepTools ( `#5536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5536> `_ ), FastQ_Screen ( `#5404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5404> `_ ), FoX ( `#5496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5496> `_ ), GffCompare ( `#5581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5581> `_ ), GlimmerHMM ( `#5559 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5559> `_ ), LocARNA ( `#5548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5548> `_ ), MapSplice ( `#5566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5566> `_ ), MariaDB-connector-c ( `#5557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5557> `_ ), NextGenMap ( `#5430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5430> `_ ), nd2reader ( `#5545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5545> `_ ), PIMS ( `#5545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5545> `_ ), Pysolar ( `#5585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5585> `_ ), phono3py ( `#5551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5551> `_ ), preseq ( `#5569 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5569> `_ ), proovread ( `#5513 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5513> `_ ), QUAST ( `#5610 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5610> `_ ), RNA-SeQC ( `#5589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5589> `_ ), RNAclust ( `#5607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5607> `_ ), Ragout ( `#5608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5608> `_ ), SOAPfuse ( `#5417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5417> `_ ), TransDecoder ( `#5125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5125> `_ ) * added additional easyconfigs for various supported software packages, including: * BLAST+ 2.7.1, BamTools 2.5.0, Boost 1.66.0, Clang 5.0.0, dask 0.16.0, FFmpeg 3.4.1, GROMACS 2016.4, HDF5 1.8.20, matplotlib 2.1.1, PLUMED 2.4.0, Pillow 5.0.0, Qt5 5.9.3, QuantumESPRESSO 6.2, Ruby 2.5.0, Rust 1.22.1 * minor enhancements, including: * include ``gomms`` in list of extensions for R 3.4.3 ( `#5547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5547> `_ ) * clean up BamTools easyconfigs to rely on updated easyblock + add SHA256 checksums ( `#5575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5575> `_ ) * add ``Time::HiRes`` to recent Perl versions ( `#5616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5616> `_ ) * add ``DNAcopy`` & ``dupRadar`` extensions to bundle for Bioconductor 3.6 ( `#5587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5587> `_ , `#5618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5618> `_ ) * switch to using ``install_target`` rather than now deprecated ``use_easy_install`` and ``use_setup_py_develop`` ( `#5625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5625> `_ ) * various bug fixes, including: * avoid auto-downloading of parcel in gdc-client 1.3.0 easyconfig ( `#5523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5523> `_ ) * fix permissions on ``make_raw_alos.pl`` script in ROI_PAC installation ( `#5546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5546> `_ ) * remove erroneous patch for Intel compiler support in Perl 5.26.0 easyconfig built with ``GCCcore/6.4.0`` ( `#5561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5561> `_ ) * include ``HWxtest`` as extension to fix issue with ``diveRsity`` in R 3.4.3 easyconfig file ( `#5570 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5570> `_ ) * add pkg-config as build dependency for fontconfig, harfbuzz, gnuplot, pango ( `#5580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5580> `_ ) * fix versions of updated extensions in BioConductor bundle ( `#5587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5587> `_ , `#5618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5618> `_ ) * add missing libpng dependency in ROOT 6.10.08 easyconfigs ( `#5595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5595> `_ ) * fix option passed to configure in M4 ( `#5606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5606> `_ ) * rename SIBELia to Sibelia ( `#5603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5603> `_ ) * add patch for binutils 2.26 to fix compatibility with GCC 6.x ( `#5611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5611> `_ ) * fix for dependencies was set twice in OpenMPI 3.0.0 easyconfig ( `#5619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5619> `_ ) * fix download URL in comment of Kent tools easyconfigs ( `#5633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5633> `_ ) * add SHA256 checksums to various easyconfigs ( `#5635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5635> `_ , `#5636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5636> `_ , `#5639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5639> `_ ) * add ``rdma-core-devel`` to OS dependencies for OpenMPI 3.0.0 ( `#5648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5648> `_ ) .. _release_notes_eb350: EasyBuild v3.5.0 (December 15th 2017) ------------------------------------- feature release **framework** * add support for implementing pre- and post-step hooks ( `#2343 <https://github.com/easybuilders/easybuild-framework/pull/2343> `_ ) * documentation available at http://easybuild.readthedocs.io/en/latest/Hooks.html * various enhancements, including: * add support for foss-like toolchain with Spectrum MPI: ``gsolf`` ( `#2329 <https://github.com/easybuilders/easybuild-framework/pull/2329> `_ ) * add support for ``--preview-pr`` ( `#2331 <https://github.com/easybuilders/easybuild-framework/pull/2331> `_ , `#2337 <https://github.com/easybuilders/easybuild-framework/pull/2337> `_ , `#2348 <https://github.com/easybuilders/easybuild-framework/pull/2348> `_ ) * see also http://easybuild.readthedocs.io/en/latest/Integration_with_GitHub.html#previewing-easyconfig-pull-requests-preview-pr * flesh out ``find_extension`` function, hoist dict with extract commands into a constant ( `#2336 <https://github.com/easybuilders/easybuild-framework/pull/2336> `_ ) * add support for using ``self.start_dir`` rather than using ``self.cfg['start_dir']`` ( `#2339 <https://github.com/easybuilders/easybuild-framework/pull/2339> `_ ) * add support for ' ``exts_default_options`` ' easyconfig parameter ( `#2345 <https://github.com/easybuilders/easybuild-framework/pull/2345> `_ , `#2346 <https://github.com/easybuilders/easybuild-framework/pull/2346> `_ ) * allow use of ' ``start_dir`` ' easyconfig parameter in extensions ( `#2353 <https://github.com/easybuilders/easybuild-framework/pull/2353> `_ ) * various bug fixes, including: * fix typo in ' ``giolf`` ' toolchain definition ( `#2327 <https://github.com/easybuilders/easybuild-framework/pull/2327> `_ ) * fix minor issues with ``--inject-checksums`` ( `#2333 <https://github.com/easybuilders/easybuild-framework/pull/2333> `_ ) * fix error message when ' ``gv`` ' Python package is not available ( `#2340 <https://github.com/easybuilders/easybuild-framework/pull/2340> `_ ) * install paramiko version < 2.4.0 for Python 2.6 in Travis config ( `#2344 <https://github.com/easybuilders/easybuild-framework/pull/2344> `_ ) * disable broken log rotation, avoid duplicate logging of output of executed commands under ' ``--debug`` ' ( `#2347 <https://github.com/easybuilders/easybuild-framework/pull/2347> `_ ) * also include $ORIGIN and absolute paths to ' ``lib`` ' and ' ``lib64`` ' subdirectories in RPATH locations ( `#2358 <https://github.com/easybuilders/easybuild-framework/pull/2358> `_ ) * fix repo references in ``install-EasyBuild-develop.sh`` script ( `#2360 <https://github.com/easybuilders/easybuild-framework/pull/2360> `_ ) **easyblocks** * new software-specific easyblock for Bazel ( `#1286 <https://github.com/easybuilders/easybuild-easyblocks/pull/1286> `_ ) and Octave ( `#1304 <https://github.com/easybuilders/easybuild-easyblocks/pull/1304> `_ ) * new generic easyblock for installing Octave packages as extensions ( `#1304 <https://github.com/easybuilders/easybuild-easyblocks/pull/1304> `_ , `#1318 <https://github.com/easybuilders/easybuild-easyblocks/pull/1318> `_ ) * minor enhancements, including: * remove ``foamExec`` & ``wdot`` from sanity checks, add ``blockMesh`` & ``checkMesh`` + enable logging for recent OpenFOAM versions ( `#1205 <https://github.com/easybuilders/easybuild-easyblocks/pull/1205> `_ , `#1272 <https://github.com/easybuilders/easybuild-easyblocks/pull/1272> `_ ) * add exceptions for FFTW/3.3.6 on POWER with GCC 5/6/7 ( `#1274 <https://github.com/easybuilders/easybuild-easyblocks/pull/1274> `_ ) * add support for Spectrum MPI to the ``SystemMPI`` easyblock ( `#1275 <https://github.com/easybuilders/easybuild-easyblocks/pull/1275> `_ ) * allow skipping of steps for ``Bundle`` components + fix issues with templates & formatting of error message ( `#1278 <https://github.com/easybuilders/easybuild-easyblocks/pull/1278> `_ ) * update HPCG easyblock for v3.0 by changing configure syntax ( `#1284 <https://github.com/easybuilders/easybuild-easyblocks/pull/1284> `_ ) * correctly configure for BLAS/LAPACK in R easyblock & check configure output ( `#1292 <https://github.com/easybuilders/easybuild-easyblocks/pull/1292> `_ , `#1300 <https://github.com/easybuilders/easybuild-easyblocks/pull/1300> `_ ) * make R easyblock set configure options for dependencies ( `#1297 <https://github.com/easybuilders/easybuild-easyblocks/pull/1297> `_ , `#1303 <https://github.com/easybuilders/easybuild-easyblocks/pull/1303> `_ ) * allow tuning of build command in ``PythonPackage`` via custom ' ``buildcmd`` ' easyconfig parameter ( `#1299 <https://github.com/easybuilders/easybuild-easyblocks/pull/1299> `_ ) * set default Java encoding to ``UTF8`` when installing Trinity ( `#1302 <https://github.com/easybuilders/easybuild-easyblocks/pull/1302> `_ ) * also define ``$CUDA_ROOT`` in generated module for CUDA ( `#1234 <https://github.com/easybuilders/easybuild-easyblocks/pull/1234> `_ ) * make the ScaLAPACK easyblock capable of building in parallel ( `#1288 <https://github.com/easybuilders/easybuild-easyblocks/pull/1288> `_ , `#1321 <https://github.com/easybuilders/easybuild-easyblocks/pull/1321> `_ , `#1324 <https://github.com/easybuilders/easybuild-easyblocks/pull/1324> `_ ) * various bug fixes, including: * avoid changing ``$CPATH`` , ``$LD_LIBRARY_PATH`` an ``$LIBRARY_PATH`` in generated modules for Intel Advisor, Inspector, and VTune ( `#1229 <https://github.com/easybuilders/easybuild-easyblocks/pull/1229> `_ ) * fix check for Intel MKL in PSI easyblock ( `#1273 <https://github.com/easybuilders/easybuild-easyblocks/pull/1273> `_ ) * fix missing space in fftw easyblock ( `#1277 <https://github.com/easybuilders/easybuild-easyblocks/pull/1277> `_ ) * fix use of FFTW on top of Intel MKL in CP2K easyblock ( `#1281 <https://github.com/easybuilders/easybuild-easyblocks/pull/1281> `_ ) * fix wrong sanity check for Boost when using Python 3.x ( `#1283 <https://github.com/easybuilders/easybuild-easyblocks/pull/1283> `_ ) * pick up per-component checksums in ``Bundle`` generic easyblock ( `#1285 <https://github.com/easybuilders/easybuild-easyblocks/pull/1285> `_ ) * correctly pass down optimization flags in CP2K easyblock ( `#1293 <https://github.com/easybuilders/easybuild-easyblocks/pull/1293> `_ ) **easyconfigs** * added example easyconfig files for 39 new software packages: * AmberMini ( `#5476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5476> `_ ), arrow ( `#5416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5416> `_ ), bat ( `#5416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5416> `_ ), CIRCexplorer ( `#5356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5356> `_ ), CIRCexplorer2 ( `#5470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5470> `_ ), CIRI ( `#5358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5358> `_ ), FALCON ( `#5265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5265> `_ ), FastaIndex ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), find_circ ( `#5348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5348> `_ ), future ( `#5236 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5236> `_ ), GapCloser ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), glibc ( `#5428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5428> `_ ), GRNBoost ( `#5373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5373> `_ ), HDFView ( `#5391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5391> `_ ), Horovod ( `#5239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5239> `_ ), HPDBSCAN ( `#5371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5371> `_ ), Hyperopt ( `#5455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5455> `_ ), IntelClusterChecker ( `#4970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4970> `_ ), ITK ( `#5434 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5434> `_ ), LAST ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), MDTraj ( `#5317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5317> `_ ), Meson ( `#5228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5228> `_ ), mkl-dnn ( `#5319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5319> `_ , `#5362 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5362> `_ ), Ninja ( `#5228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5228> `_ ), OpenKIM-API ( `#5479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5479> `_ ), ParmEd ( `#5476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5476> `_ ), PCRaster ( `#5386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5386> `_ ), piSvM ( `#5308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5308> `_ ), piSvM-JSC ( `#5316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5316> `_ ), PTESFinder ( `#5359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5359> `_ ), pybedtools ( `#5347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5347> `_ ), pymbar ( `#5476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5476> `_ ), pyScaf ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), QIIME2 ( `#5355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5355> `_ ), QTLtools ( `#5361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5361> `_ ), Redundans ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ), Rmath ( `#5361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5361> `_ ), sbt ( `#5373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5373> `_ ), SNAP ( `#5465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5465> `_ ) * added new easyconfigs for existing toolchains: ``intel/2017.09`` ( `#5303 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5303> `_ ), ``intel/2018.00`` ( `#5129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5129> `_ ), ``intel/2018.01`` ( `#5345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5345> `_ ) * added additional easyconfigs for various supported software packages, including: * CGAL 4.11, CMake 3.10.0, Caffe 1.0, FFTW 3.3.7, GATE 8.0, gnuplot 5.2.2, HPCG 3.0, HTSlib 1.6, Keras 2.1.2, LLVM 5.0.0, Mesa 17.2.5, mpi4py 3.0.0, netCDF 4.5.0, OpenFOAM 5.0, ParaView 5.4.1, R 3.4.3, Ruby 2.4.2, Rust 1.21.0, SCons 3.0.1, Szip 2.1.1, Theano 1.0.0, VTK 8.0.1, X11 20171023 * minor enhancements, including: * add SHA256 checksums to Autoconf ( `#5304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5304> `_ ), Automake ( `#5305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5305> `_ ), libtool ( `#5306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5306> `_ ) and M4 ( `#5307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5307> `_ ) easyconfigs * avoid hardcoding extension versions in worker easyconfig, include ' ``perl`` ' as OS dep ( `#5324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5324> `_ ) * enable building ScaLAPACK in parallel with enhanced ScaLAPACK easyblock ( `#5331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5331> `_ ) * include ``RInside`` extension in R 3.4.0 easyconfig ( `#5354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5354> `_ ) * clean up configure options that are now handled by R easyblock ( `#5478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5478> `_ , `#5485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5485> `_ ) * update Octave easyconfigs to use Octave easyblock, add extensions for latest Octave versions ( `#5484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5484> `_ , `#5503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5503> `_ , `#5507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5507> `_ ) * add ``Log4perl`` extension to Perl 5.26.0 easyconfigs ( `#5511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5511> `_ ) * various bug fixes, including: * add missing extensions required by MultiQC & stick to networkx 1.11 ( `#5240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5240> `_ ) * disable ``optarch`` when using Intel compilers and enable tests in all libxc easyconfigs ( `#5256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5256> `_ , `#5257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5257> `_ ) * avoid downloads when installing matplotlib 2.1.0 w/ Python 2.7.14 ( `#5267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5267> `_ ) * fix ``$CPATH`` in recent libffi easyconfigs + enhance sanity check & add checksum ( `#5271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5271> `_ ) * use Github source URL, run ``autogen.sh`` + include Autotools build dep for numactl ( `#5286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5286> `_ , `#5296 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5296> `_ , `#5297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5297> `_ , `#5299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5299> `_ , `#5302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5302> `_ ) * add hwloc to GROMACS dependencies ( `#5295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5295> `_ ) * fix ``source_urls`` (& ``sources`` spec) for GATE ( `#5367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5367> `_ ) * consistently add Autotools build dep in recent netCDF easyconfigs ( `#5394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5394> `_ ) * fix check in test suite for binutils build dep when ``GCCcore`` used as toolchain ( `#5436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5436> `_ ) * libdap 3.19.1 checksum changed ( `#5473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5473> `_ ) * disable new rfkill feature in easyconfig for util-linux 2.31 since it requires a recent kernel ( `#5480 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5480> `_ ) * add missing PROJ dependency in recent GDAL easyconfigs ( `#5481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5481> `_ ) * fix name in TensorFlow easyconfigs (was 'TensorFlow') ( `#5495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5495> `_ ) * fix checksum for Szip 2.1.1 ( `#5517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5517> `_ ) * fix order of extensions for FSLeyes, add missing MarkupSafe (dep for Jinja2) ( `#5520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5520> `_ ) .. _release_notes_eb341: EasyBuild v3.4.1 (October 17th 2017) ------------------------------------ bugfix/update release **framework** * various enhancements, including: * improve trace output for executed commands + drop requirement for ``--experimental`` for ``--trace`` ( `#2306 <https://github.com/easybuilders/easybuild-framework/pull/2306> `_ ) * add ``giolf`` toolchain definition: GCC, IntelMPI, OpenBLAS, (Sca)LAPACK and FFTW ( `#2310 <https://github.com/easybuilders/easybuild-framework/pull/2310> `_ ) * add support for ``--force-download`` and ``--ignore-checksums`` ( `#2313 <https://github.com/easybuilders/easybuild-framework/pull/2313> `_ , `#2314 <https://github.com/easybuilders/easybuild-framework/pull/2314> `_ ) * flesh out ``pypi_source_urls`` from ``derive_alt_pypi_url`` ( `#2319 <https://github.com/easybuilders/easybuild-framework/pull/2319> `_ ) * various bug fixes, including: * also check for use of ``--rebuild`` next to ``--force`` to skip sanity check with ``--module-only`` ( `#2307 <https://github.com/easybuilders/easybuild-framework/pull/2307> `_ ) * ensure ``$TMPDIR`` is set to a short path for OpenMPI v2.x ( `#2311 <https://github.com/easybuilders/easybuild-framework/pull/2311> `_ ) * guard ' ``module load`` ' commands in generated modules under ``--recursive-unload`` to avoid load storms ( `#2316 <https://github.com/easybuilders/easybuild-framework/pull/2316> `_ ) * correctly deal with use of special characters in description & co ( `#2320 <https://github.com/easybuilders/easybuild-framework/pull/2320> `_ ) * fix incorrect ``FFT_INC_DIR`` for Intel MKL ( `#2323 <https://github.com/easybuilders/easybuild-framework/pull/2323> `_ ) **easyblocks** * add generic ' ``SystemMPI`` ' easyblock ( `#1106 <https://github.com/easybuilders/easybuild-easyblocks/pull/1106> `_ , `#1261 <https://github.com/easybuilders/easybuild-easyblocks/pull/1261> `_ , `#1262 <https://github.com/easybuilders/easybuild-easyblocks/pull/1262> `_ ) * add software-specific easyblock for SAS ( `#1263 <https://github.com/easybuilders/easybuild-easyblocks/pull/1263> `_ ) * minor enhancements, including: * run ' ``wcleanAll`` ' or ' ``wcleanPlatform -all`` ' before building OpenFOAM ( `#780 <https://github.com/easybuilders/easybuild-easyblocks/pull/780> `_ , `#1258 <https://github.com/easybuilders/easybuild-easyblocks/pull/1258> `_ ) * enhance generic ' ``SystemCompiler`` ' easyblock ( `#1106 <https://github.com/easybuilders/easybuild-easyblocks/pull/1106> `_ ) * clean up ``--trace`` output for Python & Python packages ( `#1248 <https://github.com/easybuilders/easybuild-easyblocks/pull/1248> `_ ) * update Intel MPI easyblock to support 2018.* versions ( `#1253 <https://github.com/easybuilders/easybuild-easyblocks/pull/1253> `_ ) * add support for Intel MPI and Intel MKL to ScaLAPACK easyblock ( `#1255 <https://github.com/easybuilders/easybuild-easyblocks/pull/1255> `_ ) * enhance GCC easyblock to also put symlinks in place for ``cc`` / ``c++`` / ``f77`` / ``f95`` commands ( `#1256 <https://github.com/easybuilders/easybuild-easyblocks/pull/1256> `_ ) * various bug fixes, including: * allow that ' ``gcc -print-multiarch`` ' fails in icc easyblock ( `#1249 <https://github.com/easybuilders/easybuild-easyblocks/pull/1249> `_ ) * fix prefix subdirectory for older versions of icc (in particular 2011.3.174) ( `#1250 <https://github.com/easybuilders/easybuild-easyblocks/pull/1250> `_ ) * use ``remove_file`` rather than ``os.remove`` in generic ``IntelBase`` easyblock to correctly deal with broken symlinks ( `#1251 <https://github.com/easybuilders/easybuild-easyblocks/pull/1251> `_ ) * fix sanity check for MXNet easyblock + correctly detect unpacked source directory ( `#1257 <https://github.com/easybuilders/easybuild-easyblocks/pull/1257> `_ ) * avoid building CP2K twice due to incorrect attempt at running ' ``make clean`` ' first ( `#1266 <https://github.com/easybuilders/easybuild-easyblocks/pull/1266> `_ ) **easyconfigs** * added easyconfigs for new toolchain ``giolf/2017b`` ( `#5140 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5140> `_ ) * added example easyconfig files for 13 new software packages: * ASAP3 ( `#5200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5200> `_ ), Albacore ( `#5153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5153> `_ ), CatMAP ( `#5225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5225> `_ ), DLCpar ( `#5209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5209> `_ ), FSLeyes ( `#5192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5192> `_ ), IQ-TREE ( `#3695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3695> `_ ), NEST ( `#5515 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5515> `_ ), nanonet ( `#5149 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5149> `_ ), OMA ( `#5211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5211> `_ ), , oxford_asl ( `#5193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5193> `_ ), QEMU ( `#5220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5220> `_ ), REMORA ( `#5159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5159> `_ ), SAS ( `#5208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5208> `_ ), supermagic ( `#5187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5187> `_ ) * added additional easyconfigs for various supported software packages, including: * Anaconda2/3 4.4.0, Blender 2.79, Boost 1.65.1, CMake 3.9.4, FFmpeg 3.3.4, GCC 5.5.0, h5py 2.7.1, Keras 2.0.8, matplotlib 2.1.0, mympingpong 0.8.0, OpenCV 3.3.0, OpenFOAM-Extend 4.0, OpenMPI 2.1.2 + 3.0.0, Pillow 4.3.0, Python 2.7.14 + 3.6.3, SAMtools 1.6, scikit-image 0.13.0, scikit-learn 0.19.0, Tensorflow 1.3.0, vsc-mympirun 4.0.2 * minor enhancements, including: * add ``xkeyboard-config`` component in X11 bundle ( `#5066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5066> `_ ) * clean up use of ``wcleanAll`` in OpenFOAM-Extend easyconfigs, now handled by OpenFOAM easyblock ( `#5131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5131> `_ ) * also install ``run_rcorrector.pl`` with Rcorrector ( `#5135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5135> `_ ) * add SHA256 checksum to PyCUDA easyconfig ( `#5154 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5154> `_ ) * fix/improve description in HDF5 easyconfigs ( `#5182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5182> `_ ) * include heatmap3 extension for R 3.4.0 ( `#5185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5185> `_ ) * add ComplexHeatmap to Bioconductor 3.5 bundle + dep pkgs in R 3.4.0 easyconfig ( `#5195 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5195> `_ ) * various bug fixes, including: * fix source URLs for AUGUSTUS 3.2.3 ( `#5119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5119> `_ ) * fix building Bison 2.5 on systems with recent glibc ( `#5130 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5130> `_ ) * also consider ``rdma-core-devel`` as alternative to ``libibverbs-devel`` OS dependency ( `#5132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5132> `_ ) * consistently use empty toolchain version in icc & ifort easyconfigs to ensure that GCC(core) dep is loaded during installation ( `#5133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5133> `_ , `#5134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5134> `_ ) * add patches for Boost 1.64.0 to fix known issues ( `#5148 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5148> `_ ) * remove PyCUDA easyconfig for ``intel/2017a`` , doesn't work due to incompatibility between GCC 6.3.0 & CUDA 8 ( `#5156 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5156> `_ ) * add missing Perl extensions in easyconfig for Worker 1.6.7 ( `#5157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5157> `_ ) * fix checksums for packages that download from ``github.com/x/y/archive`` ( `#5162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5162> `_ ) * add missing libpng dependency to g2lib-1.4.0 easyconfig using intel-2017a ( `#5196 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5196> `_ ) * fix source_urls for Szip 2.1 & include SHA256 checksum ( `#5206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5206> `_ ) * remove unneeded ``--with-fft-incs`` configure option for ABINIT ( `#5207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5207> `_ ) * disable optarch for libjpeg-turbo 1.5.1 built with ``intel/2017a`` ( `#5214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5214> `_ ) * update ``$R_LIBS`` in plotly easyconfig ( `#5215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5215> `_ ) * include NLopt as a dependency in R easyconfigs that include ``nloptr`` as extension ( `#5217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5217> `_ ) .. _release_notes_eb340: EasyBuild v3.4.0 (September 10th 2017) -------------------------------------- feature release **framework** * various enhancements, including: * add support for backing up modules via ``--backup-modules`` ( `#2134 <https://github.com/easybuilders/easybuild-framework/pull/2134> `_ ) * enabled automatically with ``--module-only`` and ``--skip`` * see also http://easybuild.readthedocs.io/en/latest/Backup_modules.html * add support for ``--search-paths`` to extend list of locations considered by ``--search`` / ``-S`` ( `#2255 <https://github.com/easybuilders/easybuild-framework/pull/2255> `_ ) * include ``userInGroup`` check in Lua modules when installation is group-restricted ( `#2274 <https://github.com/easybuilders/easybuild-framework/pull/2274> `_ ) * add experimental support for ' ``eb --trace`` ' ( `#2285 <https://github.com/easybuilders/easybuild-framework/pull/2285> `_ ) * see also http://easybuild.readthedocs.io/en/latest/Tracing_progress.html * add support for ' ``eb --inject-checksums`` ' ( `#2286 <https://github.com/easybuilders/easybuild-framework/pull/2286> `_ , `#2292 <https://github.com/easybuilders/easybuild-framework/pull/2292> `_ , `#2293 <https://github.com/easybuilders/easybuild-framework/pull/2293> `_ ) * see also http://easybuild.readthedocs.io/en/latest/Writing_easyconfig_files.html#adding-or-replacing-checksums-using-inject-checksums * add support for ``append_paths`` in module generator ( `#2294 <https://github.com/easybuilders/easybuild-framework/pull/2294> `_ ) * various bug fixes, including: * strip provided GitHub token of spaces in ``--install-github-token`` ( `#2270 <https://github.com/easybuilders/easybuild-framework/pull/2270> `_ ) * remove ' ``provides`` ' line from ``setup.py`` ( `#2275 <https://github.com/easybuilders/easybuild-framework/pull/2275> `_ ) * pass down stdin in ' ``import`` ' check for extensions during sanity check ( `#2276 <https://github.com/easybuilders/easybuild-framework/pull/2276> `_ ) * make sure location to 'eb' installed during stage 1 is included in ``$PATH`` during stage 2 of bootstrap procedure ( `#2281 <https://github.com/easybuilders/easybuild-framework/pull/2281> `_ ) * make resolve_path robust against ``None`` path being provided ( `#2282 <https://github.com/easybuilders/easybuild-framework/pull/2282> `_ ) * ensure clean error message on easyconfig file parse failure ( `#2290 <https://github.com/easybuilders/easybuild-framework/pull/2290> `_ ) * fix regex to avoid sucking up additional lines prior to module file path in ``modulefile_path`` ( `#2291 <https://github.com/easybuilders/easybuild-framework/pull/2291> `_ ) * fix error message when ``--use-ccache`` is used but ``ccache`` is not available in ``$PATH`` ( `#2295 <https://github.com/easybuilders/easybuild-framework/pull/2295> `_ ) **easyblocks** * minor enhancements, including: * update Siesta easyblock for versions 4.0.1 and 4.1-b3 ( `#1218 <https://github.com/easybuilders/easybuild-easyblocks/pull/1218> `_ ) * updates GAMESS-US easyblock for version 20170420R1 + move ``ddikick.x`` when ``ddi_comm`` is set to ' ``sockets`` ' ( `#1221 <https://github.com/easybuilders/easybuild-easyblocks/pull/1221> `_ ) * update MRtrix easyblock for 3.0 & beyond + use ``copy`` function ( `#1230 <https://github.com/easybuilders/easybuild-easyblocks/pull/1230> `_ ) * update ROOT easyblock to support recent versions that require using CMake, add sanity check, clean up/enhance ``make_module*`` ( `#1236 <https://github.com/easybuilders/easybuild-easyblocks/pull/1236> `_ ) * enhance icc easyblock to include multipath include dir in ``$CPATH`` ( `#1237 <https://github.com/easybuilders/easybuild-easyblocks/pull/1237> `_ , `#1242 <https://github.com/easybuilders/easybuild-easyblocks/pull/1242> `_ ) * various bug fixes, including: * use ``plumed-patch`` command rather than ' ``plumed patch`` ' in GROMACS easyblock ( `#1212 <https://github.com/easybuilders/easybuild-easyblocks/pull/1212> `_ ) * remove ' ``provides`` ' line from ``setup.py`` ( `#1217 <https://github.com/easybuilders/easybuild-easyblocks/pull/1217> `_ ) * fixed wrong use of ``build_type`` in ``self.cfg`` in WRF easyblock that resulted in an raised exception ( `#1220 <https://github.com/easybuilders/easybuild-easyblocks/pull/1220> `_ ) * added a call to super ``post_install_step`` in CUDA easyblock ( `#1226 <https://github.com/easybuilders/easybuild-easyblocks/pull/1226> `_ ) * fix ``$MCRROOT`` definition in generated module file under ``--module-only`` in MCR easyblock ( `#1228 <https://github.com/easybuilders/easybuild-easyblocks/pull/1228> `_ ) * fix permissions for directories in SuiteSparse ( `#1238 <https://github.com/easybuilders/easybuild-easyblocks/pull/1238> `_ ) * fix function signature for ``fetch_extension_sources`` in OCaml easyblock ( `#1240 <https://github.com/easybuilders/easybuild-easyblocks/pull/1240> `_ ) **easyconfigs** * added easyconfigs for ``foss/2017b`` and ``intel/2017b`` common toolchains ( `#4768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4768> `_ ), ( `#4618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4618> `_ ) * added new easyconfigs for existing toolchains: * ``iomkl/2017b`` ( `#5097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5097> `_ ) * added example easyconfig files for 31 new software packages: * BAMM ( `#4650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4650> `_ ), BamM ( `#4650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4650> `_ ), bcl2fastq2 ( `#4902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4902> `_ ), CGNS ( `#5078 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5078> `_ ), CLAPACK ( `#5096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5096> `_ ), CLISP ( `#4926 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4926> `_ , `#4986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4986> `_ ), cadaver ( `#4873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4873> `_ ), destiny ( `#5009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5009> `_ ), GroopM ( `#4650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4650> `_ ), Lucene-Geo-Gazetteer ( `#5064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5064> `_ ), libffcall ( `#4850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4850> `_ ), libsigsegv ( `#4840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4840> `_ ), MERCKX ( `#5056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5056> `_ ), minimap2 ( `#4991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4991> `_ ), ncompress ( `#4852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4852> `_ ), OpenNLP ( `#5059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5059> `_ , `#5061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5061> `_ ), OpenRefine ( `#5058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5058> `_ ), PHAST ( `#5096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5096> `_ ), PYTHIA ( `#5083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5083> `_ ), ParallelIO ( `#5071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5071> `_ ), PnetCDF ( `#5071 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5071> `_ ), plotly ( `#5010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5010> `_ ), QML ( `#5101 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5101> `_ ), Quorum ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), Rcorrector ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), SCnorm ( `#5008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5008> `_ ), SOAPdenovo-Trans ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), Shannon ( `#5095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5095> `_ ), Tika ( `#5063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5063> `_ ), UNAFold ( `#4997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4997> `_ ), VERSE ( `#4843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4843> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.65.0, binutils 2.29, GAMESS-US 20170420-R1, GCC(core) 7.2.0, gzip 1.8, HDF5 1.8.19, LLVM 4.0.1, MRtrix 3.0_RC2, Perl 5.26.0, ROOT 6.10.04, Spark 2.2.0 * minor enhancements, including: * add checksums to Perl 5.24.1 easyconfigs ( `#4973 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4973> `_ , `#4992 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4992> `_ ) * add additional extensions for R 3.4.0 and Bioconductor 3.5 bundle ( `#5007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5007> `_ , `#5028 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5028> `_ , `#5029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5029> `_ , `#5062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5062> `_ , `#5079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5079> `_ ) * also define ``$INCLUDEPATH`` and ``$LIBRARY_PATH`` in Tesla-Deployment-Kit easyconfig ( `#5018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5018> `_ ) * add check to see whether binutils is included as build dep when GCCcore toolchain is used ( `#5084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5084> `_ ) * various bug fixes, including: * added Rmpi patch file for R built with intel toolchains incl. impi 5.x ( `#4623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4623> `_ ) * use single-line description in ``setup.py`` ( `#4881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4881> `_ ) * fix version and source for Seurat + add extensions required by Seurat in R 3.4.0 easyconfig ( `#4889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4889> `_ ) * add zlib as dependency to util-linux easyconfigs ( `#4900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4900> `_ , `#4998 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4998> `_ ) * use ``modextrapaths`` instead of ``modextravars`` in OpenMM easyconfig ( `#4903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4903> `_ ) * update deprecated PLINK urls ( `#4920 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4920> `_ , `#5006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5006> `_ ) * fix ``moduleclass`` for Cookiecutter ( `#4947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4947> `_ ) * fix order of OpenMPI dependency in ``iomkl/2016.09*`` easyconfigs, must come after icc/ifort ( `#5024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5024> `_ ) * fix typo in comment in util-linux easyconfigs & add SHA256 checksums ( `#5052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5052> `_ ) * remove superfluous ``$CPATH`` update in GLib 2.44.0 easyconfig ( `#5053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5053> `_ ) * update ncurses to not build a separate libtinfo but provide a soft link instead + force linking to ncurses in libreadline ( `#5067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5067> `_ , `#5074 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5074> `_ ) * include Autotools as build dep for netCDF ( `#5077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5077> `_ ) * add missing binutils build dep for texinfo ( `#5099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/5099> `_ ) .. _release_notes_eb331: EasyBuild v3.3.1 (July 12th 2017) --------------------------------- bugfix/update release **framework** * various enhancements, including: * add support for ' ``allow_prepend_abs_path`` ' easyconfig parameter ( `#2254 <https://github.com/easybuilders/easybuild-framework/pull/2254> `_ ) * support for ``--merge-pr`` ( `#2266 <https://github.com/easybuilders/easybuild-framework/pull/2266> `_ ) * various bug fixes, including: * resolve symlinks to location of ' ``eb`` ' in ``get_paths_for`` ( `#2248 <https://github.com/easybuilders/easybuild-framework/pull/2248> `_ ) * fall back to checking location relative to ' ``eb`` ' location in ``find_eb_script`` ( `#2249 <https://github.com/easybuilders/easybuild-framework/pull/2249> `_ ) * respect ``--suffix-modules-path`` value for user-specific module path extensions ( `#2250 <https://github.com/easybuilders/easybuild-framework/pull/2250> `_ ) * update EasyBuild bootstrap script to download ``distribute`` tarball from http://easybuilders.github.io/easybuild/files ( `#2256 <https://github.com/easybuilders/easybuild-framework/pull/2256> `_ ) * fix default target GitHub account/organisation for ``--new-pr`` & co + fix tests that got broken by migration to github.com/easybuilders ( `#2258 <https://github.com/easybuilders/easybuild-framework/pull/2258> `_ ) * fix checking for new easyconfigs in ``copy_easyconfigs`` , pick up specified commit message as PR title if none was provided ( `#2259 <https://github.com/easybuilders/easybuild-framework/pull/2259> `_ ) * get rid of references to ``hpcugent`` after move to github.com/easybuilders ( `#2261 <https://github.com/easybuilders/easybuild-framework/pull/2261> `_ ) * automatically enable ``--ignore-osdeps`` under ``--new-pr`` and ``--update-pr`` ( `#2262 <https://github.com/easybuilders/easybuild-framework/pull/2262> `_ ) **easyblocks** * minor enhancements, including: * enhance HDF5 easyblock: define ``$HDF5_DIR`` & include ``-DMPICH_IGNORE_CXX_SEEK`` in ``$CXXFLAGS`` ( `#1200 <https://github.com/easybuilders/easybuild-easyblocks/pull/1200> `_ ) * consistently pass down (named) arguments in ``prepare_step`` , and check for it in the tests ( `#1202 <https://github.com/easybuilders/easybuild-easyblocks/pull/1202> `_ ) * remove no longer supported ``VersionIndependentPythonPackage`` generic easyblock ( `#1202 <https://github.com/easybuilders/easybuild-easyblocks/pull/1202> `_ ) * update ABAQUS easyblock for recent versions, incl. support for installing hotfixes ( `#1203 <https://github.com/easybuilders/easybuild-easyblocks/pull/1203> `_ ) * get rid of references to ' ``hpcugent`` ' organisation after move to github.com/easybuilders ( `#1206 <https://github.com/easybuilders/easybuild-easyblocks/pull/1206> `_ ) * make Boost easyblock fully aware of ``(pre)configopts`` , ``(pre)buildopts`` and ``(pre)installopts`` ( `#1207 <https://github.com/easybuilders/easybuild-easyblocks/pull/1207> `_ ) * drop check for ' ``ipython`` ' in sanity check of Anaconda easyblock, to also support Miniconda ( `#1210 <https://github.com/easybuilders/easybuild-easyblocks/pull/1210> `_ ) **easyconfigs** * added example easyconfig files for 6 new software packages: * FastME ( `#4811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4811> `_ ), geopy ( `#4821 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4821> `_ ), Miniconda2 ( `#4841 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4841> `_ ), ngmlr ( `#4818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4818> `_ ), OpenCoarrays ( `#4799 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4799> `_ ), Seurat ( `#4832 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4832> `_ ) * added additional easyconfigs for various supported software packages, including: * ABAQUS 2017, GCC(core) 6.4.0, Keras 2.0.5, NCBI-Toolkit 18.0.0, numpy 1.13.0, Tensorflow 1.2.0 * minor enhancements, including: * add ``SVG`` and ``Statistics::Basic`` to recent Perl versions ( `#4796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4796> `_ ) * remove ``buildopts`` from HDF5 easyconfigs, taken care of by updated HDF5 easyblock now ( `#4779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4779> `_ ) * include ``joblib`` as extension in recent Python easyconfigs ( `#4805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4805> `_ ) * changed moduleclass in mpi4py to better reflect what it is and to not confuse HMNS ( `#4807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4807> `_ ) * get rid of references to ' ``hpcugent`` ' organisation after move to github.com/easybuilders ( `#4815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4815> `_ , `#4837 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4837> `_ ) * add ``Rtsne`` as extension to R 3.4.0 ( `#4831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4831> `_ ) * various bug fixes, including: * use ``PYPI_SOURCE`` as source URL in Tensorflow easyconfigs ( `#4786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4786> `_ ) * fix ``homepage`` for skewer ( `#4791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4791> `_ ) * sync/fix ``source_urls`` & ``homepage`` in HDF5 easyconfigs ( `#4800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4800> `_ ) * fix ``ubsan`` error blocking build of GCCcore 6.1.0, 6.2.0, 6.3.0 with system GCC 7.1 ( `#4813 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4813> `_ ) .. _release_notes_eb330: EasyBuild v3.3.0 (June 26th 2017) --------------------------------- feature release **framework** * various enhancements, including: * clean up easyconfigs that are copied for inclusion in pull request ( `#2197 <https://github.com/easybuilders/easybuild-framework/pull/2197> `_ , `#2227 <https://github.com/easybuilders/easybuild-framework/pull/2227> `_ ) * use devel logging where relevant in ``easybuild.tools.toolchain`` ( `#2198 <https://github.com/easybuilders/easybuild-framework/pull/2198> `_ ) * check exit code for executed ``module`` commands ( `#2200 <https://github.com/easybuilders/easybuild-framework/pull/2200> `_ ) * also copy patches to installation directory & easyconfigs archive along with easyconfig file ( `#2202 <https://github.com/easybuilders/easybuild-framework/pull/2202> `_ , `#2241 <https://github.com/easybuilders/easybuild-framework/pull/2241> `_ ) * add support for SHA256 checksums ( `#2215 <https://github.com/easybuilders/easybuild-framework/pull/2215> `_ ) * also auto-detect whether provided checksum is MD5 or SHA256 based on length (if not checksum type is specified) * add support for ``--enforce-checksums`` , to require availability of checksums for sources/patches * see http://easybuild.readthedocs.io/en/latest/Writing_easyconfig_files.html#source-files-patches-and-checksums * add support for renaming sources on download ( `#2223 <https://github.com/easybuilders/easybuild-framework/pull/2223> `_ ) * also involves deprecating use of 2-tuple elements in list of sources, see http://easybuild.readthedocs.io/en/latest/Deprecated-functionality.html#depr-sources-2-element-tuple * add support for ``--detect-loaded-modules`` ( `#2228 <https://github.com/easybuilders/easybuild-framework/pull/2228> `_ ) * give extensions access to ``module_generator`` of parent ( `#2229 <https://github.com/easybuilders/easybuild-framework/pull/2229> `_ ) * pass down additional arguments to ``copy_dir`` down to ``shutil.copytree`` ( `#2230 <https://github.com/easybuilders/easybuild-framework/pull/2230> `_ ) * avoid reloading already loaded modules that extend ``$MODULEPATH`` ( `#2232 <https://github.com/easybuilders/easybuild-framework/pull/2232> `_ ) * various bug fixes, including: * make sure test account & accompanying token is used in tests for ``github.py`` ( `#2220 <https://github.com/easybuilders/easybuild-framework/pull/2220> `_ , `#2224 <https://github.com/easybuilders/easybuild-framework/pull/2224> `_ ) * only use MPD for old versions of Intel MPI (<4.1) in ``mpi_cmd_for`` ( `#2221 <https://github.com/easybuilders/easybuild-framework/pull/2221> `_ ) * escape dots in package filename to ensure correct match in ``derive_alt_pypi_url`` ( `#2225 <https://github.com/easybuilders/easybuild-framework/pull/2225> `_ ) * fix ``GNU_SOURCE`` template by adding missing ``/gnu/`` ( `#2235 <https://github.com/easybuilders/easybuild-framework/pull/2235> `_ ) * catch exception ``shutil.Error`` in ``copy_file`` ( `#2239 <https://github.com/easybuilders/easybuild-framework/pull/2239> `_ ) * report full error and traceback on unhandled exception in test report ( `#2240 <https://github.com/easybuilders/easybuild-framework/pull/2240> `_ ) * fix ``--set-default-module`` flag ( `#2243 <https://github.com/easybuilders/easybuild-framework/pull/2243> `_ ) **easyblocks** * added easyblocks for MXNet ( `#1135 <https://github.com/easybuilders/easybuild-easyblocks/pull/1135> `_ ), Tkinter( `#1184 <https://github.com/easybuilders/easybuild-easyblocks/pull/1184> `_ ) * minor enhancements, including: * enhance sanity check for NCL ( `#1169 <https://github.com/easybuilders/easybuild-easyblocks/pull/1169> `_ , `#1179 <https://github.com/easybuilders/easybuild-easyblocks/pull/1179> `_ ) * enable building of shared FFTW libraries ( `#1180 <https://github.com/easybuilders/easybuild-easyblocks/pull/1180> `_ ) * include update statements for ``$CPATH`` and ``$*LIBRARY_PATH`` in generated module in numpy easyblock ( `#1183 <https://github.com/easybuilders/easybuild-easyblocks/pull/1183> `_ ) * stop using deprecated ' ``copytree`` ' function from ``easybuild.tools.filetools`` ( `#1185 <https://github.com/easybuilders/easybuild-easyblocks/pull/1185> `_ ) * update SAMtools easyblock for v0.1.17 ( `#1189 <https://github.com/easybuilders/easybuild-easyblocks/pull/1189> `_ ) * update MATLAB easyblock for 2016b & 2017a versions (adjust permissions and change dir) ( `#1182 <https://github.com/easybuilders/easybuild-easyblocks/pull/1182> `_ , `#1197 <https://github.com/easybuilders/easybuild-easyblocks/pull/1197> `_ ) * consider ``$EB_*_LICENSE_SERVER(_PORT)`` in MATLAB and ANSYS easyblocks ( `#1195 <https://github.com/easybuilders/easybuild-easyblocks/pull/1195> `_ ) * add ``omp_num_threads`` custom parameter in CP2K easyblock to allow defining ``$OMP_NUM_THREADS`` during testing ( `#1196 <https://github.com/easybuilders/easybuild-easyblocks/pull/1196> `_ ) * various bug fixes, including: * fix Siesta easyblock to enable and verify parallel build ( `#1186 <https://github.com/easybuilders/easybuild-easyblocks/pull/1186> `_ ) * fix bug in alias definition in impi easyblock for ``mpigxx`` , ``mpiicpc`` and ``mpiifort`` ( `#1192 <https://github.com/easybuilders/easybuild-easyblocks/pull/1192> `_ ) **easyconfigs** * enable automatic style checks in easyconfig tests ( `#2506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2506> `_ ) * added example easyconfig files for 28 new software packages: * ada ( `#4594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4594> `_ ), Aspera-CLI ( `#4635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4635> `_ ), AUGUSTUS ( `#4624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4624> `_ ), ada ( `#4594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4594> `_ ), Bio-SamTools ( `#4637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4637> `_ ), Bpipe ( `#4590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4590> `_ ), BUSCO ( `#4624 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4624> `_ ), CNVnator ( `#4649 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4649> `_ ), davix ( `#4755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4755> `_ ), EricScript ( `#4594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4594> `_ ), FUNWAVE-TVD ( `#4743 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4743> `_ ), gmpy2 ( `#4609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4609> `_ ), gSOAP ( `#4755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4755> `_ ), libsndfile ( `#4628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4628> `_ ), lpsolve ( `#4264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4264> `_ ), LUMPY ( `#4682 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4682> `_ ), MaSuRCA ( `#4706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4706> `_ ), modred ( `#4729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4729> `_ ), MXNet ( `#4765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4765> `_ ), NRGLjubljana ( `#4651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4651> `_ ), OrfM ( `#4703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4703> `_ ), Perl4-CoreLibs ( `#4670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4670> `_ ), prodigal ( `#4468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4468> `_ ), pydlpoly ( `#4756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4756> `_ ), SeqAn ( `#4603 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4603> `_ ), sharutils ( `#4745 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4745> `_ ), Spyder ( `#4627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4627> `_ ), Tkinter ( `#4620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4620> `_ ), VariantMetaCaller ( `#4632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4632> `_ ) * added new easyconfigs for existing toolchains: * ``gimkl/2017a`` ( `#4646 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4646> `_ ) * added additional easyconfigs for various supported software packages, including: * ABINIT 8.2.2, BLAST+ 2.6.0, Bowtie2 2.3.2, FFmpeg 3.3.1, NCL 6.4.0, Rust 1.18.0, SAMtools 1.5, VTK 7.1.1 * minor enhancements, including: * use ' ``git diff --name-only`` ' and ``$TRAVIS_COMMIT_RANGE`` in Travis config to get list of changed files ( `#4606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4606> `_ , `#4619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4619> `_ ) * add tuneR, seewave, soundecology, vcfR extensions for R 3.4.0 (+ libsndfile as dep) ( `#4628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4628> `_ , `#4680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4680> `_ , `#4747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4747> `_ ) * also copy ``README`` for GapFiller ( `#4631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4631> `_ ) * enable inclusion of version symbol by using ``--enable-ld-version-script`` configure option for LibTIFF ( `#4639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4639> `_ ) * add SHA256 checksums for libpciaccess to discriminate from old tarballs that required running ``autogen.sh`` ( `#4688 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4688> `_ ) * fix ``NE_GLOBAL_DIR`` path for ne by also specifying ``PREFIX`` in ``buildopts`` ( `#4698 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4698> `_ ) * more (trivial) style fixes ( `#4761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4761> `_ ) * avoid use of ``import`` in ANSYS & MATLAB easyconfigs ( `#4762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4762> `_ ) * set ``$OMP_NUM_THREADS`` during CP2K test step via dedicated easyconfig parameter ( `#4763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4763> `_ ) * avoid use of ' ``import`` ' in BFAST easyconfigs, just strip of ' ``a`` ' from version ( `#4764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4764> `_ ) * add the docopt module to all Python 2017a easyconfigs ( `#4770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4770> `_ ) * stop using deprecated 2-element tuple format in sources, use equivalent dict format instead ( `#4774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4774> `_ ) * various bug fixes, including: * fix typo in statsmodels source url ( ``/sources/`` -> ``/source/`` ) ( `#4612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4612> `_ ) * add location to ``DotLib.pm`` to ``$PERL5LIB`` for SSPACE_Basic ( `#4638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4638> `_ ) * add missing ``/gnu/`` in ftpmirror.gnu.org ``source_urls`` , or use ``GNU_SOURCE`` where possible ( `#4653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4653> `_ ) * consistently use ``--with-harfbuzz=no`` configure option in freetype easyconfigs ( `#4668 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4668> `_ ) * use ``--with-x=yes`` in R easyconfigs that include X11 as a dependency ( `#4701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4701> `_ ) * remove ' ``4.0`` ' in tbb description ( `#4707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4707> `_ ) * add lib sanity check paths for Debian compatibility in nettle ( `#4722 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4722> `_ ) * fix source URLs for HDF5 ( `#4749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4749> `_ ) .. _release_notes_eb321: EasyBuild v3.2.1 (May 12th 2017) -------------------------------- bugfix/update release **framework** * various enhancements, including: * make hardcoded max ratio for failures in ``adjust_permissions`` configurable ( `#2213 <https://github.com/easybuilders/easybuild-framework/pull/2213> `_ ) * allow ``https://`` on direct download in sources ( `#2214 <https://github.com/easybuilders/easybuild-framework/pull/2214> `_ ) * various bug fixes, including: * bump version bootstrap script to sync with latest update ( `#2208 <https://github.com/easybuilders/easybuild-framework/pull/2208> `_ ) * fix crash during module generation when ' ``%`` ' character is used in description ( `#2209 <https://github.com/easybuilders/easybuild-framework/pull/2209> `_ ) **easyblocks** * added easyblock for Siesta ( `#1105 <https://github.com/easybuilders/easybuild-easyblocks/pull/1105> `_ ) * minor enhancements, including: * enhance GROMACS easyblock to build with PLUMED support ( `#1121 <https://github.com/easybuilders/easybuild-easyblocks/pull/1121> `_ ) * enhance NAMD easyblock: add OpenMP support, update for recent NAMD versions (2.12), fix compatibility with Tcl versions other than 8.5 ( `#1173 <https://github.com/easybuilders/easybuild-easyblocks/pull/1173> `_ ) **easyconfigs** * added example easyconfig files for 12 new software packages: * AdapterRemoval ( `#4509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4509> `_ ), blasr_libcpp ( `#4566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4566> `_ ), canu ( `#4473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4473> `_ ), enchant ( `#4567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4567> `_ ), hunspell ( `#4567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4567> `_ ), memkind ( `#4544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4544> `_ ), NLTK ( `#4565 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4565> `_ ), pbbam ( `#4566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4566> `_ ), pbdagcon ( `#4566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4566> `_ ), pyenchant ( `#4567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4567> `_ ), Siesta ( `#4562 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4562> `_ ), xarray ( `#4556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4556> `_ ) * added new easyconfigs for existing toolchains: * goolfc 2017.01 ( `#4577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4577> `_ ) * added additional easyconfigs for various supported software packages, including: * HDF5 1.10.1, NAMD 2.12, OpenFOAM 4.1, pandas 0.20.1, ParaView 5.2.0, R 3.4.0, R-bundle-Bioconductor 3.5, Tensorflow 1.1.0 * minor enhancements, including: * update source URLs in libpciaccess easyconfigs ( `#3960 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3960> `_ ) * enable use of double precision floating point in METIS 5.1.0 ``foss/2016a`` easyconfig ( `#4555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4555> `_ ) .. _release_notes_eb320: EasyBuild v3.2.0 (May 5th 2017) ------------------------------- feature release **framework** * various enhancements, including: * add support for marking installed module file as new default version using ``--set-default-module`` ( `#2110 <https://github.com/easybuilders/easybuild-framework/pull/2110> `_ ) * additional easyconfig parameters for documentation: ``docpaths`` , ``examples`` , ``site_contacts`` , ``upstream_contacts`` , ``usage`` ( `#2113 <https://github.com/easybuilders/easybuild-framework/pull/2113> `_ ) * add support for ``--allow-use-as-root-and-accept-consequences`` ( `#2123 <https://github.com/easybuilders/easybuild-framework/pull/2123> `_ ) * enable extraction of patches from compressed files before applying them ( `#2128 <https://github.com/easybuilders/easybuild-framework/pull/2128> `_ ) * alphabetically sort functions and methods in ``module_generator`` module ( `#2132 <https://github.com/easybuilders/easybuild-framework/pull/2132> `_ ) * introduce function ``ensure_iterable_license_specs`` ( `#2157 <https://github.com/easybuilders/easybuild-framework/pull/2157> `_ ) * bump Travis config to use Lmod 7.4 ( `#2176 <https://github.com/easybuilders/easybuild-framework/pull/2176> `_ ) * implement ``copy_dir`` function in ``filetools`` ( `#2177 <https://github.com/easybuilders/easybuild-framework/pull/2177> `_ ) * clarify error message when no software-specific easyblock was found ( `#2178 <https://github.com/easybuilders/easybuild-framework/pull/2178> `_ ) * make ``log.deprecated`` more verbose by also printing deprecation warnings to stderr ( `#2179 <https://github.com/easybuilders/easybuild-framework/pull/2179> `_ ) * add ``copy`` function to ``filetools`` for easy copying of lists of files/directories ( `#2180 <https://github.com/easybuilders/easybuild-framework/pull/2180> `_ ) * add support for ``--verify-easyconfig-filenames`` ( `#2185 <https://github.com/easybuilders/easybuild-framework/pull/2185> `_ ) * add support for ``--package-tool-options`` ( `#2187 <https://github.com/easybuilders/easybuild-framework/pull/2187> `_ ) * take into account inline trailing comments in ``fetch_parameters_from_easyconfig`` ( `#2192 <https://github.com/easybuilders/easybuild-framework/pull/2192> `_ ) * add support for customising easyconfig parameters on a per-extension basis ( `#2194 <https://github.com/easybuilders/easybuild-framework/pull/2194> `_ ) * perform sanity check after stage 2 of EasyBuild bootstrap script, module file should be in place ( `#2199 <https://github.com/easybuilders/easybuild-framework/pull/2199> `_ ) * change order in which module commands are checked, consider Lmod first ( `#2201 <https://github.com/easybuilders/easybuild-framework/pull/2201> `_ ) * various bug fixes, including: * fix use of compiler-specific ``--optarch`` value in combination with ``--job`` ( `#2183 <https://github.com/easybuilders/easybuild-framework/pull/2183> `_ ) * call ``run_all_steps`` in regtest mode rather than running steps individually ( `#2203 <https://github.com/easybuilders/easybuild-framework/pull/2203> `_ ) **easyblocks** * added easyblocks for Doris ( `#1154 <https://github.com/easybuilders/easybuild-easyblocks/pull/1154> `_ , `#1161 <https://github.com/easybuilders/easybuild-easyblocks/pull/1161> `_ ), VMD ( `#1148 <https://github.com/easybuilders/easybuild-easyblocks/pull/1148> `_ ) and WRF-Fire ( `#1153 <https://github.com/easybuilders/easybuild-easyblocks/pull/1153> `_ , `#1159 <https://github.com/easybuilders/easybuild-easyblocks/pull/1159> `_ ) * minor enhancements, including: * update ``IntelBase`` , PGI and TotalView easyblocks to allow list of license files/servers via ' ``license_file`` ' easyconfig parameter ( `#1129 <https://github.com/easybuilders/easybuild-easyblocks/pull/1129> `_ ) * update Bowtie2 easyblock to set correct build options, copy more files, extend sanity check ( `#1146 <https://github.com/easybuilders/easybuild-easyblocks/pull/1146> `_ ) * added the option to build Boost with multi-threading support ( `#1147 <https://github.com/easybuilders/easybuild-easyblocks/pull/1147> `_ ) * allow libpng as OS dependency for WPS ( `#1150 <https://github.com/easybuilders/easybuild-easyblocks/pull/1150> `_ ) * extend Boost ``TIME_UTC`` patch to Boost versions <= 1.49.0 ( `#1152 <https://github.com/easybuilders/easybuild-easyblocks/pull/1152> `_ ) * enhance Python sanity check to check for Tkinter support if Tk is included as a dependency ( `#1156 <https://github.com/easybuilders/easybuild-easyblocks/pull/1156> `_ , `#1158 <https://github.com/easybuilders/easybuild-easyblocks/pull/1158> `_ ) * add support to install Python extensions without unpacking ( `#1166 <https://github.com/easybuilders/easybuild-easyblocks/pull/1166> `_ ) * enhance TBB easyblock to also support building open source versions ( `#1168 <https://github.com/easybuilders/easybuild-easyblocks/pull/1168> `_ ) * various bug fixes, including: * update FFTW easyblock: ``--enable-avx-128-fma`` depends on the ``fma4`` CPU feature (AMD), not ``fma`` ( `#1142 <https://github.com/easybuilders/easybuild-easyblocks/pull/1142> `_ ) * fix problems when ``usempi`` not defined in toolchain in NAMD easyblock ( `#1162 <https://github.com/easybuilders/easybuild-easyblocks/pull/1162> `_ ) **easyconfigs** * added example easyconfig files for 34 new software packages: * ACTC ( `#4386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4386> `_ ), atomate ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), BreakDancer ( `#4455 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4455> `_ ), bx-python ( `#4486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4486> `_ ), ClusterShell ( `#4432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4432> `_ ), custodian ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), DFTB+ ( `#4398 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4398> `_ ), Doris ( `#4404 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4404> `_ ), ED2 ( `#4402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4402> `_ ), FireWorks ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), GETORB ( `#4414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4414> `_ ), GapFiller ( `#4462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4462> `_ ), IPy ( `#4450 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4450> `_ ), imbalanced-learn ( `#4373 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4373> `_ ), ipyrad ( `#4507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4507> `_ ), libiconv ( `#4499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4499> `_ ), MultiQC ( `#3564 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3564> `_ ), NLopt ( `#1750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1750> `_ ), Node-RED ( `#4542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4542> `_ ), PyCUDA ( `#4523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4523> `_ ), pymatgen-db ( `#4484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4484> `_ ), QuTiP ( `#4371 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4371> `_ ), ROI_PAC ( `#4414 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4414> `_ ), Rascaf ( `#4459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4459> `_ ), RepastHPC ( `#4395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4395> `_ ), rootpy ( `#4242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4242> `_ ), SSPACE_Basic ( `#4461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4461> `_ ), Sambamba ( `#4442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4442> `_ ), Spack ( `#4431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4431> `_ ), SpiceyPy ( `#4406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4406> `_ ), StaMPS ( `#4454 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4454> `_ ), samblaster ( `#4435 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4435> `_ ), VMD ( `#4391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4391> `_ ), WRF-Fire ( `#4403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4403> `_ ) * added additional easyconfigs for various supported software packages, including: * BamTools 2.4.1, Boost 1.64.0, GCC 7.1.0, IPython 5.3.0, LLVM 4.0.0, Mesa 17.0.2, Octave 4.2.1, OpenMPI 2.1.0, PETSc 3.7.5, PGI 17.3, Perl 5.24.1, Python 2.7.13 + 3.6.1 (incl. numpy 1.12.1, scipy 0.19.0), R 3.3.3, SuiteSparse 4.5.5 * various enhancements, including: * sync Bowtie2 easyconfigs, consistently use Bowtie2 easyblock ( `#4380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4380> `_ ) * use ``pl2`` source tarball for FFTW 3.3.6 which already includes patch for ``F03`` interface ( `#4529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4529> `_ ) * various bug fixes, including: * add missing XZ dep in easyconfig for libunwind 1.1 w/ ``GCC/4.9.2`` , sync ``sanity_check_paths`` across libunwind easyconfigs ( `#4369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4369> `_ ) * use ' ``use_fma4`` ' rather than deprecated ' ``use_fma`` ' easyconfig parameter in FFTW easyconfigs using ``intel`` toolchain ( `#4384 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4384> `_ ) * fix ``pkgconfig`` patch for Qhull ( `#4451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4451> `_ ) * also use patch for METIS 5.1.0 to enable use of doubles in easyconfig for ``foss/2016b`` ( `#4467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4467> `_ ) * add dependency NLopt for R extension ``nloptr`` ( `#4481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4481> `_ ) * fix issue with ``configparser`` and ``backports`` namespace blocking inclusion of ``nbconvert`` with IPython ( `#4504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4504> `_ ) * change source_urls of pycrypto to encrypted ``https://pypi.python.org/...`` ( `#4505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4505> `_ ) * fix sources spec for HMMER 3.1b2 + minor style fixes + better sanity check ( `#4531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4531> `_ ) * also build IMB-IO in IMB 4.1 easyconfig using ``foss/2016a`` ( `#4539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4539> `_ ) .. _release_notes_eb312: EasyBuild v3.1.2 (March 20th 2017) ---------------------------------- bugfix/update release **framework** * fix broken packaging support by fixing ``run_cmd`` bug with ``shell=False`` ( `#2153 <https://github.com/easybuilders/easybuild-framework/pull/2153> `_ ) * minor enhancements, including: * implement ``change_dir`` function in ``filetools`` module ( `#2155 <https://github.com/easybuilders/easybuild-framework/pull/2155> `_ ) * use ``checker_state`` in trailing whitespace style check + add dedicated test ( `#2160 <https://github.com/easybuilders/easybuild-framework/pull/2160> `_ , `#2169 <https://github.com/easybuilders/easybuild-framework/pull/2169> `_ ) * consider both ``pycodestyle`` and ``pep8`` Python modules in style checks ( `#2161 <https://github.com/easybuilders/easybuild-framework/pull/2161> `_ ) * make bootstrap script aware various modules-related ``$EASYBUILD_*`` environment variables ( `#2170 <https://github.com/easybuilders/easybuild-framework/pull/2170> `_ ) * various bug fixes, including: * interpret statements that extend ``$MODULEPATH`` in ``modpath_extensions_for`` method ( `#2104 <https://github.com/easybuilders/easybuild-framework/pull/2104> `_ ) * also fixes inclusion of superfluous load statements in modules installed in user HMNS module tree (cfr. `#2172 <https://github.com/easybuilders/easybuild-framework/pull/2172> `_ ) * take into account that ``$PATH`` or ``$PYTHONPATH`` may be empty when running tests ( `#2149 <https://github.com/easybuilders/easybuild-framework/pull/2149> `_ ) * handle duplicates in ``--include-*`` ( `#2151 <https://github.com/easybuilders/easybuild-framework/pull/2151> `_ ) * exclude dependencies of dependencies that extend ``$MODULEPATH`` ( `#2152 <https://github.com/easybuilders/easybuild-framework/pull/2152> `_ ) * add ``ld.bfd`` to RPATH wrappers ( `#2156 <https://github.com/easybuilders/easybuild-framework/pull/2156> `_ ) * fix ``test_vsc_location`` , ``vsc.__file__`` may not be available when ``vsc`` is installed as a namespace package ( `#2159 <https://github.com/easybuilders/easybuild-framework/pull/2159> `_ ) * fix reported problems with scripts & docs tests ( `#2164 <https://github.com/easybuilders/easybuild-framework/pull/2164> `_ ) * fix ``--try-software-version`` using non-greedy matching + lookahead assertion, add test for ``tweak_one`` ( `#2166 <https://github.com/easybuilders/easybuild-framework/pull/2166> `_ ) * avoid creating empty modulefile directories when using ``modaltsoftname`` ( `#2168 <https://github.com/easybuilders/easybuild-framework/pull/2168> `_ ) * fix ``fftw_libs`` for MKL without interface libraries ( `#2171 <https://github.com/easybuilders/easybuild-framework/pull/2171> `_ ) **easyblocks** * add easyblock for QScintilla ( `#1127 <https://github.com/easybuilders/easybuild-easyblocks/pull/1127> `_ ) * minor enhancements, including: * auto-disable quad precision on POWER and ARM in FFTW ( `#1102 <https://github.com/easybuilders/easybuild-easyblocks/pull/1102> `_ , `#1138 <https://github.com/easybuilders/easybuild-easyblocks/pull/1138> `_ ) * allow \"download install\" for PETSc ( `#1114 <https://github.com/easybuilders/easybuild-easyblocks/pull/1114> `_ ) * modify Trinity sanity check for versions 2.3 and above ( `#1133 <https://github.com/easybuilders/easybuild-easyblocks/pull/1133> `_ ) * make unpacking Python extensions optional ( `#1134 <https://github.com/easybuilders/easybuild-easyblocks/pull/1134> `_ ) * update SAMtools easyblock for version 1.4 ( `#1139 <https://github.com/easybuilders/easybuild-easyblocks/pull/1139> `_ ) * various bug fixes, including: * reduce number of environment variables in ``icc`` and ``ifort`` modules ( `#1126 <https://github.com/easybuilders/easybuild-easyblocks/pull/1126> `_ , `#1143 <https://github.com/easybuilders/easybuild-easyblocks/pull/1143> `_ ) * also run tests with Tcl module syntax, Lua is the default in EasyBuild v3.x ( `#1128 <https://github.com/easybuilders/easybuild-easyblocks/pull/1128> `_ ) * rename member variable to avoid conflict with member of base class in PGI ( `#1137 <https://github.com/easybuilders/easybuild-easyblocks/pull/1137> `_ ) * don't set ``$FPATH`` environment variable in multiple easyblocks ( `#1140 <https://github.com/easybuilders/easybuild-easyblocks/pull/1140> `_ ) **easyconfigs** * add patch to FFTW 3.3.6 easyconfigs to fix MPI F03 interface ( `#4334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4334> `_ ) * note that this warrants rebuilding FFTW that is a part of ``foss/2017a`` * added example easyconfig files for 14 new software packages: * DBG2OLC ( `#4281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4281> `_ ), disambiguate ( `#4125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4125> `_ ), fqtrim ( `#4280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4280> `_ ), GFOLD ( `#4293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4293> `_ ), Kaiju ( `#4349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4349> `_ ), LSMS ( `#4335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4335> `_ ), L_RNA_scaffolder ( `#4282 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4282> `_ ), PileOMeth ( `#4289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4289> `_ ), psycopg2 ( `#4319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4319> `_ ), QGIS ( `#4307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4307> `_ , `#4332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4332> `_ ), QJson ( `#4305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4305> `_ ), QScintilla ( `#4306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4306> `_ , `#4313 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4313> `_ ), sketchmap ( `#4360 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4360> `_ ), snaphu ( `#4362 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4362> `_ ) * added additional easyconfigs for various supported software packages, including GROMACS 2016.3, PGI 17.1, SAMtools 1.4 * various enhancements, including: * fix style in several easyconfigs ( `#4267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4267> `_ - `#4271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4271> `_ , `#4274 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4274> `_ , `#4275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4275> `_ , `#4277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4277> `_ , `#4279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4279> `_ , `#4286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4286> `_ - `#4288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4288> `_ , `#4318 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4318> `_ ) * various bug fixes, including: * correctly set ``$PYTHONPATH`` in ROOT easyconfigs ( `#4239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4239> `_ , `#4331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4331> `_ ) * correct libjpeg turbo references in GDAL ( `#4276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4276> `_ ) * make sure that HDF5 provided via EasyBuild is used in BLASR easyconfigs ( `#4278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4278> `_ ) * fix issues with miRDeep2 installation ( `#4291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4291> `_ , `#4301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4301> `_ , `#4316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4316> `_ ) * also run tests with Tcl module syntax, Lua is the default in EasyBuild v3.x ( `#4315 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4315> `_ ) * fix PostgreSQL homepage + minor style fixes ( `#4318 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4318> `_ ) * detect use of ' ``$root`` ', which is not compatible with module files in Lua syntax ( `#4330 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4330> `_ ) * fix ``homepage`` / ``source_urls`` for ViennaRNA ( `#4338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4338> `_ ) * pass down ``$FFLAGS`` via ``FLAGS_OPT`` in SWASH easyconfigs ( `#4341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4341> `_ ) * remove ``include/GL/wglext.h`` from Mesa sanity check ( `#4354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4354> `_ ) * rename ``S.A.G.E.`` to ``SAGE`` , can't have directories with trailing dot in Windows ( `#4368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4368> `_ ) .. _release_notes_eb311: EasyBuild v3.1.1 (March 7th 2017) --------------------------------- bugfix/update release **framework** * minor enhancements, including: * print more useful error message when no compiler-specific ``optarch`` flag is defined ( `#1950 <https://github.com/easybuilders/easybuild-framework/pull/1950> `_ ) * add ``ec`` parameter to ``expand_toolchain_load()`` ( `#2103 <https://github.com/easybuilders/easybuild-framework/pull/2103> `_ ) * clarify unstable/closed PR warning message ( `#2129 <https://github.com/easybuilders/easybuild-framework/pull/2129> `_ ) * various bug fixes, including: * ensure that ``$EBEXTSLIST*`` is also included in generated module under ``--module-only`` ( `#2112 <https://github.com/easybuilders/easybuild-framework/pull/2112> `_ ) * fix formatting issues in generated documentation for ``--list-software`` and ``--avail-easyconfig-licenses`` ( `#2121 <https://github.com/easybuilders/easybuild-framework/pull/2121> `_ ) * fix problem with backticks in description breaking ' ``fpm`` ' packaging command ( `#2124 <https://github.com/easybuilders/easybuild-framework/pull/2124> `_ ) * replace ``--enable-new-dtags`` with ``--disable-new-dtags`` instead of removing it in RPATH wrapper script ( `#2131 <https://github.com/easybuilders/easybuild-framework/pull/2131> `_ ) * only perform ``is_short_modname_for`` sanity check in ``det_short_module_name`` if ``modaltsoftname`` is available ( `#2138 <https://github.com/easybuilders/easybuild-framework/pull/2138> `_ ) * fix logic in ``make_module_dep`` w.r.t. excluding loads for toolchain & toolchain components ( `#2140 <https://github.com/easybuilders/easybuild-framework/pull/2140> `_ ) * skip ``test_check_style`` if ``pep8`` is not available ( `#2142 <https://github.com/easybuilders/easybuild-framework/pull/2142> `_ ) **easyblocks** * minor enhancements, including: * change the sanity check for MCR 2016b since the directory structure has changed ( `#1096 <https://github.com/easybuilders/easybuild-easyblocks/pull/1096> `_ ) * update NWChem easyblock for version 6.6.x and to handle different versions of OpenMPI for older versions ( `#1104 <https://github.com/easybuilders/easybuild-easyblocks/pull/1104> `_ ) * allow per-component ``source_urls`` with templating in ``Bundle`` easyblock ( `#1108 <https://github.com/easybuilders/easybuild-easyblocks/pull/1108> `_ ) * add slib to ``$LD_LIBRARY_PATH`` for itac ( `#1112 <https://github.com/easybuilders/easybuild-easyblocks/pull/1112> `_ ) * consider both ``lib`` and ``lib64`` in CGAL sanity check ( `#1113 <https://github.com/easybuilders/easybuild-easyblocks/pull/1113> `_ ) * add support for installing Intel tools that do not require license at installation time ( `#1117 <https://github.com/easybuilders/easybuild-easyblocks/pull/1117> `_ ) * required for Intel MPI and Intel MKL version 2017.2.174 * remove ``prefix_opt`` as custom easyconfig parameter for Qt easyblock ( `#1120 <https://github.com/easybuilders/easybuild-easyblocks/pull/1120> `_ ) * various bug fixes, including: * use ' ``-prefix <path>`` ' rather than ' ``--prefix=<path>`` ' for ``configure`` in Qt ( `#1109 <https://github.com/easybuilders/easybuild-easyblocks/pull/1109> `_ ) * fix indentation problem in PETSc easyblock ( `#1111 <https://github.com/easybuilders/easybuild-easyblocks/pull/1111> `_ ) **easyconfigs** * added example easyconfig files for 16 new software packages: * Caffe ( `#3667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3667> `_ ), DIAMOND ( `#4107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4107> `_ ), fmt ( `#4131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4131> `_ ), googletest ( `#4132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4132> `_ ), igraph ( `#4172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4172> `_ ), MEGA ( `#4202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4202> `_ ), meRanTK ( `#4175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4175> `_ ), meshio ( `#4178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4178> `_ ), miRDeep2 ( `#4229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4229> `_ , `#4255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4255> `_ ), OOMPA ( `#4211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4211> `_ ), PBSuite ( `#4224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4224> `_ , `#4230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4230> `_ ), randfold ( `#4217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4217> `_ ), skewer ( `#4246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4246> `_ ), Smoldyn ( `#4110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4110> `_ ), SpiecEasi ( `#4215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4215> `_ ), stress ( `#4180 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4180> `_ ) * added additional easyconfigs for various supported software packages, including: * binutils 2.28, Cantera 2.3.0, CGAL 4.9, GMP 6.1.2, IPython 5.2.2, JasPer 2.0.10, NWChem 6.6, matplotlib 2.0.0, PCRE 8.40, Qt5 5.8.0, Vim 8.0, X11 bundle v20170129, VTK 7.1.0, Yade 2017.01a * added new easyconfigs for existing toolchains: * ``iomkl/2017a`` ( `#4216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4216> `_ ), ``intel/2017.02`` ( `#4248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4248> `_ ) * various enhancements, including: * fix style in several easyconfigs ( `#4174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4174> `_ , `#4176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4176> `_ , `#4190 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4190> `_ , `#4233 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4233> `_ ) * add sanity check command to Yade easyconfig to make sure that ' ``import yade`` ' works, include bzip2 as dep ( `#4193 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4193> `_ ) * add ``PDF::API2`` extension to Perl 5.24.0 easyconfigs + sync ``exts_list`` ( `#4221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4221> `_ ) * various bug fixes, including: * add Bison and gettext as build deps for X11 ( `#4111 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4111> `_ ) * clean up dependencies in libdrm ( `#4113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4113> `_ ) * make sure Ghostscript picks up external libraries ( `#4118 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4118> `_ ) * fix ippicv source download and library install for OpenCV v3.1.0 ( `#4126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4126> `_ ) * fix software name for OrthoMCL + modernise OrthoMCL easyconfigs ( `#4134 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4134> `_ , `#4135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4135> `_ ) * get rid of backticks in gettext descriptions, causes problems when packaging with FPM ( `#4146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4146> `_ ) * remove duplicate sources specification in OpenMPI ( `#4150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4150> `_ ) * fix definition of ``buildopts`` / ``installopts`` in Cantera easyconfig ( `#4133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4133> `_ , `#4164 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4164> `_ , `#4177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4177> `_ ) * use ``http://`` rather than ``ftp://`` source URLs in CFITSIO easyconfigs ( `#4167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4167> `_ ) * add patch for XZ 5.2.2 to include ``5.1.2alpha`` symbols required by ' ``rpm`` ' command on CentOS 7.x ( `#4179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4179> `_ ) * add patch for Boost v1.61-1.63 to fix problem with ``make_array`` / ``array_wrapper`` in Boost serialization library ( `#4192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4192> `_ ) * set ``CMAKE_PREFIX_PATH`` to ncurses install directory in CMake easyconfigs ( `#4196 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4196> `_ ) * switch to ``lowopt=True`` for libxc v2.2. * and v3.* ( `#4199 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4199> `_ ) * remove custom ``sanity_check_paths`` , since it's identical to that used by the R easyblock ( `#4200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4200> `_ ) * fix ``version`` (& ``homepage`` ) in ea-utils easyconfigs ( `#4205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4205> `_ ) * remove ``--with-threads`` configure option in OpenMPI-2.* ( `#4213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4213> `_ ) * fix check for Szip library in configure script for netCDF 4.1.3 ( `#4226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4226> `_ ) * fix ``source_urls`` in several easyconfigs, including: * bsoft, cutadapt, EMBOSS, GnuTLS, ImageMagick, LibTIFF, Mercurial, netCDF, netCDF-Fortran, pigz, ROOT and Subversion ( `#4227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4227> `_ ) .. _release_notes_eb310: EasyBuild v3.1.0 (February 3rd 2017) ------------------------------------ feature release **framework** * various enhancements, including: * ARM: GCC optimal/generic architecture compiler flags ( `#1974 <https://github.com/easybuilders/easybuild-framework/pull/1974> `_ ) * add support for ``--check-style`` to check style in easyconfig files ( `#1618 <https://github.com/easybuilders/easybuild-framework/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-framework/pull/2038> `_ ) * add ``HOME`` and ``USER`` from env to available cfg file constants ( `#2063 <https://github.com/easybuilders/easybuild-framework/pull/2063> `_ ) * ``--optarch`` can now be specified on a toolchain basis ( `#2071 <https://github.com/easybuilders/easybuild-framework/pull/2071> `_ ) * implement ``get_cpu_features`` function in systemtools ( `#2074 <https://github.com/easybuilders/easybuild-framework/pull/2074> `_ , `#2078 <https://github.com/easybuilders/easybuild-framework/pull/2078> `_ ) * support use of ``linalg`` without MPI, add ``iimkl`` toolchain definition ( `#2082 <https://github.com/easybuilders/easybuild-framework/pull/2082> `_ ) * spoof HTTP request header with empty agent ( `#2083 <https://github.com/easybuilders/easybuild-framework/pull/2083> `_ ) * exclude dependencies of dependencies that extend $MODULEPATH in make_module_dep ( `#2091 <https://github.com/easybuilders/easybuild-framework/pull/2091> `_ ) * various bug fixes, including: * make ``fetch_github_token`` more robust against ``RuntimeError`` from ``keyring`` ( `#2070 <https://github.com/easybuilders/easybuild-framework/pull/2070> `_ ) * POWER: Fix ``--optarch=GENERIC`` for GCC ( `#2073 <https://github.com/easybuilders/easybuild-framework/pull/2073> `_ ) * fix docstring in toolchain class ( `#2075 <https://github.com/easybuilders/easybuild-framework/pull/2075> `_ ) * skip test cases involving ``.yeb`` if ``PyYAML`` is not installed, silence test in options subsuite ( `#2081 <https://github.com/easybuilders/easybuild-framework/pull/2081> `_ ) * fix traceback with ' ``eb --check-github`` ' if ``GitPython`` is not installed ( `#2085 <https://github.com/easybuilders/easybuild-framework/pull/2085> `_ ) * fix regex for determining list of patched files in GitHub diff ( `#2088 <https://github.com/easybuilders/easybuild-framework/pull/2088> `_ ) * modify robot so that it only appends dependencies of tweaked easyconfigs ( `#2090 <https://github.com/easybuilders/easybuild-framework/pull/2090> `_ ) * escape metacharacters in paths passed to ``re.compile`` in ``dry_run_set_dirs`` ( `#2098 <https://github.com/easybuilders/easybuild-framework/pull/2098> `_ ) * fix broken error message in ``get_toolchain_hierarchy`` + dedicated test case ( `#2099 <https://github.com/easybuilders/easybuild-framework/pull/2099> `_ ) **easyblocks** * new easyblock for FFTW ( `#1083 <https://github.com/easybuilders/easybuild-easyblocks/pull/1083> `_ ) * various enhancements, including: * update sanity check for flex 2.6.3, no more ``libfl_pic.a`` library ( `#1077 <https://github.com/easybuilders/easybuild-easyblocks/pull/1077> `_ ) * cleanup build before proceeding with full Boost ( `#1080 <https://github.com/easybuilders/easybuild-easyblocks/pull/1080> `_ ) * update CP2K easyblock: copy data dir, support version 4.1, support ELPA, fix psmp build with foss toolchain ( `#996 <https://github.com/easybuilders/easybuild-easyblocks/pull/996> `_ , `#1020 <https://github.com/easybuilders/easybuild-easyblocks/pull/1020> `_ , `#1043 <https://github.com/easybuilders/easybuild-easyblocks/pull/1043> `_ , `#1084 <https://github.com/easybuilders/easybuild-easyblocks/pull/1084> `_ ) * add sanity check support for OpenSSL 1.1 ( `#1087 <https://github.com/easybuilders/easybuild-easyblocks/pull/1087> `_ ) * support the latest changes in Inspector 2017 ( `#1047 <https://github.com/easybuilders/easybuild-easyblocks/pull/1047> `_ ) * update NEURON easyblock to support the lack of ``hoc_ed`` in 7.4 ( `#987 <https://github.com/easybuilders/easybuild-easyblocks/pull/987> `_ ) * add support for WPS 3.8 ( `#1079 <https://github.com/easybuilders/easybuild-easyblocks/pull/1079> `_ ) * also consider ``setuptools`` in ``EasyBuildMeta`` easyblock ( `#1093 <https://github.com/easybuilders/easybuild-easyblocks/pull/1093> `_ ) * various bug fixes, including: * (correctly) define ``$ROSETTA3_DB`` in Rosetta easyblock ( `#1092 <https://github.com/easybuilders/easybuild-easyblocks/pull/1092> `_ ) **easyconfigs** * added easyconfigs for ``foss/2017a`` and ``intel/2017a`` common toolchains ( `#3968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3968> `_ , `#3969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3969> `_ ) * added example easyconfig files for 16 new software packages: * ack ( `#3983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3983> `_ ), cclib ( `#4065 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4065> `_ ), ConnectomeWorkbench ( `#3411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3411> `_ ), GroIMP ( `#3994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3994> `_ ), hyperspy ( `#3991 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3991> `_ ), I-TASSER ( `#1216 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1216> `_ ), ImageJ ( `#4023 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4023> `_ , `#4062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4062> `_ ), libconfig ( `#4051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4051> `_ ), libspatialindex ( `#4002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4002> `_ ), mahotas ( `#3990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3990> `_ ), Minia ( `#3949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3949> `_ ), muParser ( `#4007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4007> `_ ), NetLogo ( `#3941 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3941> `_ ), QIIME ( `#3868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3868> `_ ), QwtPolar ( `#4019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4019> `_ ), Tensorflow ( `#4084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4084> `_ , `#4095 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4095> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.62.0 + 1.63.0, CP2K 4.1, GSL 2.3, PLUMED 2.3.0, Qt5 5.7.1, WRF 3.8, WPS 3.8, Yade 2016.06a, zlib 1.2.11 * various enhancements, including: * update FFTW 3.3.5 easyconfigs to use FFTW easyblock & enable running of tests ( `#3985 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3985> `_ ) * add FME extensions (+ deps) in R 3.3.1 easyconfigs ( `#4063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4063> `_ ) * various bug fixes, including: * add libxml2 dependency on HDF5 ( `#3759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3759> `_ ) * remove unnecessary dependency in libmatheval ( `#3988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3988> `_ ) * fix permissions on SWASH binaries ( `#4003 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4003> `_ ) * add conda-forge channel to perl-app-cpanminus ( `#4012 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4012> `_ ) * add missing deps (libpthread-stubs, libpciaccess) to libdrm 2.4.70 ( `#4032 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4032> `_ ) * modloadmsg style fixes in multiple easyconfigs ( `#4035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4035> `_ ) * include X11 as dep for Molden ( `#4082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4082> `_ ) * remove incorrect definition for $ROSETTA3_DB, now (correctly) defined via Rosetta easyblock ( `#4083 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4083> `_ ) * fix source URLs for several easyconfigs, including: * arpack-ng 3.1.3 + 3.1.5 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), ChIP-Seq 1.5-1 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), Ghostscript 9.10, 9.14 + 9.16 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), Git 1.7.12, 1.8.2 + 1.8.3.1 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), HBase 1.0.2 ( `#4043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4043> `_ ), libevent 2.0.22 ( `#4037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4037> `_ ), libsodium 1.0.3 ( `#4046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4046> `_ ), lynx 2.8.7 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), Maven 3.2.2 and 3.3.3 ( `#4039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4039> `_ ), MEME 4.8.0 ( `#4050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4050> `_ ), PCC 20131024 ( `#4044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4044> `_ ), S-Lang 2.3.0 ( `#4045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4045> `_ ), Spark 1.3.0 ( `#4041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4041> `_ ), splitRef 0.0.2 ( `#4040 <https://github.com/easybuilders/easybuild-easyconfigs/pull/4040> `_ ) .. _release_notes_eb302: EasyBuild v3.0.2 (December 22nd 2016) ------------------------------------- bugfix release **framework** * various bug fixes, including: * also skip dependencies of dependencies marked as external module in get_toolchain_hierarchy ( `#2042 <https://github.com/easybuilders/easybuild-framework/pull/2042> `_ ) * disable verbose setvar in modules.py ( `#2044 <https://github.com/easybuilders/easybuild-framework/pull/2044> `_ ) * force copying of easyconfigs in --new-pr/--update-pr, even when combined with -x ( `#2045 <https://github.com/easybuilders/easybuild-framework/pull/2045> `_ ) * fix verification of filename for easyconfigs used to resolve deps ( `#2051 <https://github.com/easybuilders/easybuild-framework/pull/2051> `_ ) * skip RPATH sanity check when toolchain did not use RPATH wrappers ( `#2052 <https://github.com/easybuilders/easybuild-framework/pull/2052> `_ ) * check whether file-like paths are readable before reading them in systemtools module ( `#2065 <https://github.com/easybuilders/easybuild-framework/pull/2065> `_ ) * various small enhancements, including: * add 'rpath' toolchain option to selectively disable use of RPATH wrappers ( `#2047 <https://github.com/easybuilders/easybuild-framework/pull/2047> `_ ) **easyblocks** * various enhancements, including: * enhance DL_POLY_Classic easyblock to support building with Plumed support (REVIEW) ( `#829 <https://github.com/easybuilders/easybuild-easyblocks/pull/829> `_ ) * make the Allinea easyblock search for the templates in the easyconfig paths ( `#1025 <https://github.com/easybuilders/easybuild-easyblocks/pull/1025> `_ ) * make FortranPythonPackage aware of (pre)buildopts ( `#1065 <https://github.com/easybuilders/easybuild-easyblocks/pull/1065> `_ ) * update sanity check for Mono to support recent versions ( `#1069 <https://github.com/easybuilders/easybuild-easyblocks/pull/1069> `_ ) * fix Eigen sanity check for latest version 3.3.1 ( `#1074 <https://github.com/easybuilders/easybuild-easyblocks/pull/1074> `_ ) * various bug fixes, including: * skip RPATH sanity check for binary installations ( `#1056 <https://github.com/easybuilders/easybuild-easyblocks/pull/1056> `_ ) * pass CXXFLAGS and LDFLAGS to Boost bjam ( `#1064 <https://github.com/easybuilders/easybuild-easyblocks/pull/1064> `_ ) * make pip ignore already installed versions of the package being installed ( `#1066 <https://github.com/easybuilders/easybuild-easyblocks/pull/1066> `_ ) * don't pass empty string as custom installopts for numpy in test_step ( `#1067 <https://github.com/easybuilders/easybuild-easyblocks/pull/1067> `_ ) * make the Rosetta EasyBlock work in --module-only mode ( `#1073 <https://github.com/easybuilders/easybuild-easyblocks/pull/1073> `_ ) **easyconfigs** * added example easyconfig files for 13 new software packages: * CryptoMiniSat ( `#3952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3952> `_ ), MATSim ( `#3902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3902> `_ ), Molcas ( `#2084 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2084> `_ ), ne ( `#3376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3376> `_ ), psmc ( `#3910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3910> `_ ), PyCogent ( `#3897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3897> `_ ), PyNAST ( `#3897 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3897> `_ ), RASPA2 ( `#3903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3903> `_ , `#3946 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3946> `_ ), SimPEG ( `#3876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3876> `_ ), SolexaQA++ ( `#3892 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3892> `_ ), taco ( `#3882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3882> `_ ), UCLUST ( `#3896 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3896> `_ ), USPEX ( `#3767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3767> `_ ) * added additional easyconfigs for various supported software packages, including: * Mono 4.6.2.7, PGI 16.10, ROOT 6.08.02 * various enhancements, including: * trivial style fixes ( `#3878 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3878> `_ , `#3893 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3893> `_ , `#3895 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3895> `_ ) * various bug fixes, including: * add X11 develop libs to ncview easyconfig ( `#3881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3881> `_ ) * fix source_urls in pkg-config easyconfigs ( `#3907 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3907> `_ ) * install numpy/scipy as .egg to ensure shadowing of numpy/scipy in parent Python installation ( `#3921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3921> `_ ) * fix broken source URL + homepage for Infernal ( `#3928 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3928> `_ ) * fix test that verifies dumped easyconfig, take into account that dumped dependencies may include hardcoded dependency ( `#3932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3932> `_ ) * include libGLU as dependency in freeglut easyconfigs with recent Mesa ( `#3936 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3936> `_ ) * add patch for FreeSurfer to fix issue with MATLAB 2013 ( `#3954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3954> `_ ) .. _release_notes_eb301: EasyBuild v3.0.1 (November 30th 2016) ------------------------------------- bugfix release **framework** * important changes * always use Intel-specific MPI compiler wrappers ( ``mpiicc`` , ``mpiicpc`` , ``mpiifort`` ) for toolchains using both Intel compilers and Intel MPI ( `#2005 <https://github.com/easybuilders/easybuild-framework/pull/2005> `_ ) * various small enhancements, including: * use ``setvar`` in ``modules.py`` to define environment variables ( `#2011 <https://github.com/easybuilders/easybuild-framework/pull/2011> `_ ) * include output of ``sanity_check_commands`` in the build log ( `#2020 <https://github.com/easybuilders/easybuild-framework/pull/2020> `_ ) * various bug fixes, including: * fix testing of bootstrap script in Travis config ( `#2003 <https://github.com/easybuilders/easybuild-framework/pull/2003> `_ ) * use correct module syntax in bootstrap script if Lmod is not used (i.e. Tcl) ( `#2007 <https://github.com/easybuilders/easybuild-framework/pull/2007> `_ ) * fix packaging issue with non-Python scripts in easybuild/scripts ( `#2015 <https://github.com/easybuilders/easybuild-framework/pull/2015> `_ ) * fixes issue where RPATH wrapper template script ( ``rpath_wrapper_template.sh.in`` ) was not included in the v3.0.0 release * make tests more robust against running headless ( `#2016 <https://github.com/easybuilders/easybuild-framework/pull/2016> `_ ) * avoid rewrapping already wrapped compiler/linker command with RPATH wrapper script ( `#2022 <https://github.com/easybuilders/easybuild-framework/pull/2022> `_ ) * fix ``log.error`` traceback due to ' ``raise EasyBuildError`` ' involving a ' ``%s`` ' in error message ( `#2024 <https://github.com/easybuilders/easybuild-framework/pull/2024> `_ ) * make sure ' ``modules_tool`` ' attribute is also defined for extensions ( `#2026 <https://github.com/easybuilders/easybuild-framework/pull/2026> `_ ) * only dump easyconfig with modified deps due to ``--minimal-toolchains`` to 'reprod' subdir of install dir ( `#2028 <https://github.com/easybuilders/easybuild-framework/pull/2028> `_ ) * avoid appending ' ``-h'`` to sanity check commands specified as a string ( `#2030 <https://github.com/easybuilders/easybuild-framework/pull/2030> `_ ) * fix bug in ``list_software_rst`` : always include version suffix regardless of value ( `#2032 <https://github.com/easybuilders/easybuild-framework/pull/2032> `_ ) **easyblocks** * various enhancements, including: * update SAMtools easyblock for recent versions ( `#1048 <https://github.com/easybuilders/easybuild-easyblocks/pull/1048> `_ ) * various bugfixes, including: * fix QuantumESPRESSO easyblock to handle gipaw correctly ( `#1041 <https://github.com/easybuilders/easybuild-easyblocks/pull/1041> `_ ) * always specify name of serial Fortran compiler to ALADIN, it already knows to use MPI wrapper commands ( `#1050 <https://github.com/easybuilders/easybuild-easyblocks/pull/1050> `_ ) **easyconfigs** * added example easyconfig files for 7 new software packages: * Cookiecutter ( `#3827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3827> `_ ), ETE ( `#3857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3857> `_ ), findhap ( `#3860 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3860> `_ ), graphviz (Python bindings, `#3826 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3826> `_ ), LoFreq ( `#3856 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3856> `_ ), PhyloBayes-MPI ( `#3859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3859> `_ ), XGBoost ( `#3849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3849> `_ ) * added additional easyconfigs for various supported software packages * various enhancements, including: * add ``ipywidgets`` and ``widgetsnbextension`` extensions to IPython 5.1.0 easyconfigs ( `#3818 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3818> `_ , `#3823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3823> `_ ) * run dadi test suite as a sanity check command ( `#3858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3858> `_ ) * various bug fixes, including: * fix incorrect descriptions for ifort ( `#3817 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3817> `_ ) * fix ``modulename`` for Jinja2 and Pygments ( `#3823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3823> `_ ) * fix download URL in BLAST 2.2.26 easyconfig ( `#3861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3861> `_ ) .. _release_notes_eb300: EasyBuild v3.0.0 (November 16th 2016) ------------------------------------- feature release **framework** * backward-incompatible changes: * make robot always consider subtoolchains, even without ``--minimal-toolchains`` (but in reverse order) ( `#1973 <https://github.com/easybuilders/easybuild-framework/pull/1973> `_ ) * clean up behaviour that was deprecated for EasyBuild v3.0 ( `#1978 <https://github.com/easybuilders/easybuild-framework/pull/1978> `_ ) * change *default* config to use ``Lmod`` / ``Lua`` for modules tool/syntax, ``GC3Pie`` as job backend ( `#1985 <https://github.com/easybuilders/easybuild-framework/pull/1985> `_ ) * the minimal required version of Lmod was bumped to 5.8 ( `#1985 <https://github.com/easybuilders/easybuild-framework/pull/1985> `_ ) * major new features: * (experimental) support for RPATH linking via ``--rpath`` ( `#1942 <https://github.com/easybuilders/easybuild-framework/pull/1942> `_ ) * see http://easybuild.readthedocs.org/en/latest/RPATH-support.html * add support for ``--consider-archived-easyconfigs`` ( `#1972 <https://github.com/easybuilders/easybuild-framework/pull/1972> `_ ) * see http://easybuild.readthedocs.org/en/latest/Archived-easyconfigs.html * stabilize ``--new-pr`` and ``--update-pr`` ( `#1979 <https://github.com/easybuilders/easybuild-framework/pull/1979> `_ ) * see http://easybuild.readthedocs.org/en/latest/Integration_with_GitHub.html * various other small enhancements, including: * add support for ' ``devel`` ' log level ( `#1815 <https://github.com/easybuilders/easybuild-framework/pull/1815> `_ ) * make ``remove_file`` aware of ``--extended-dry-run`` + add dedicated unit test ( `#1932 <https://github.com/easybuilders/easybuild-framework/pull/1932> `_ ) * add support for filtering out setting/updating particular environment variables from generated modules ( `#1943 <https://github.com/easybuilders/easybuild-framework/pull/1943> `_ ) * see ``--filter-env-vars`` * clean up output of EasyBuild bootstrap script & add version ( `#1944 <https://github.com/easybuilders/easybuild-framework/pull/1944> `_ ) * improved ARM platform/CPU detection ( `#1953 <https://github.com/easybuilders/easybuild-framework/pull/1953> `_ ) * use ' ``0`` ' as letter dir for funky software names that don't start with a letter, e.g., ``3to2`` ( `#1954 <https://github.com/easybuilders/easybuild-framework/pull/1954> `_ ) * make bootstrap script aware of ``vsc-install`` for offline installation ( `#1955 <https://github.com/easybuilders/easybuild-framework/pull/1955> `_ ) * add support for ``blas_family()`` and ``lapack_family()`` methods in ``Toolchain`` instances ( `#1961 <https://github.com/easybuilders/easybuild-framework/pull/1961> `_ ) * make ``copy_file`` dry-run aware ( `#1963 <https://github.com/easybuilders/easybuild-framework/pull/1963> `_ ) * reorganise test easyconfigs to match structure in easyconfigs repo ( `#1970 <https://github.com/easybuilders/easybuild-framework/pull/1970> `_ ) * add a toolchain compiler option for enforcing IEEE-754 conformance ( `#1975 <https://github.com/easybuilders/easybuild-framework/pull/1975> `_ ) * support for ``intelcuda`` compiler toolchain ( `#1976 <https://github.com/easybuilders/easybuild-framework/pull/1976> `_ ) * check that each glob pattern matches at least one file ``expand_glob_paths`` (important for ``--include-*`` ) ( `#1980 <https://github.com/easybuilders/easybuild-framework/pull/1980> `_ ) * enhance bootstrap to auto-skip stage 0 in case a suitable setuptools is already available ( `#1946 <https://github.com/easybuilders/easybuild-framework/pull/1946> `_ , `#1984 <https://github.com/easybuilders/easybuild-framework/pull/1984> `_ ) * simplify ``GC3Pie`` version check ( `#1987 <https://github.com/easybuilders/easybuild-framework/pull/1987> `_ ) * include suggestion on how to change configuration w.r.t. modules tool/syntax ( `#1989 <https://github.com/easybuilders/easybuild-framework/pull/1989> `_ ) * various bug fixes, including: * fix test for ``find_easybuild_easyconfig`` ( `#1931 <https://github.com/easybuilders/easybuild-framework/pull/1931> `_ ) * remove existing module file under ``--force`` / ``--rebuild`` ( `#1933 <https://github.com/easybuilders/easybuild-framework/pull/1933> `_ ) * fix combining ``--search`` and ``--try-*`` ( `#1937 <https://github.com/easybuilders/easybuild-framework/pull/1937> `_ ) * fix appending to existing ``buildstats`` in ``FileRepository.add_easyconfig`` ( `#1948 <https://github.com/easybuilders/easybuild-framework/pull/1948> `_ ) * fix handling of iterate easyconfig parameters, restore them during cleanup ( `#1949 <https://github.com/easybuilders/easybuild-framework/pull/1949> `_ ) * fix filtering loads for (hidden) build deps from generated module ( `#1959 <https://github.com/easybuilders/easybuild-framework/pull/1959> `_ ) * handle multi-flag compiler options on all types of options ( `#1966 <https://github.com/easybuilders/easybuild-framework/pull/1966> `_ ) * fix ``--list-software`` by making ``letter_dir_for`` function aware of ' ``*`` ' wildcard name ( `#1969 <https://github.com/easybuilders/easybuild-framework/pull/1969> `_ ) * skip dependencies of toolchain marked as external modules when determining module hierarchy ( `#1977 <https://github.com/easybuilders/easybuild-framework/pull/1977> `_ ) * bump page limit in ``fetch_latest_commit_sha`` , spit out more meaningful error if too many branches were encountered ( `#1981 <https://github.com/easybuilders/easybuild-framework/pull/1981> `_ ) * fix CUDA-related issues in ``HierarchicalMNS`` ( `#1986 <https://github.com/easybuilders/easybuild-framework/pull/1986> `_ ) **easyblocks** * backwards incompatible changes: * remove deprecated GenomeAnalysisTK/GATK easyblock ( `#1001 <https://github.com/easybuilders/easybuild-easyblocks/pull/1001> `_ ) * remove deprecated ' ``get_netcdf_module_set_cmds`` ' function from netCDF easyblock ( `#1015 <https://github.com/easybuilders/easybuild-easyblocks/pull/1015> `_ ) * remove deprecated ' ``get_blas_lib`` ' function from LAPACK easyblock ( `#1016 <https://github.com/easybuilders/easybuild-easyblocks/pull/1016> `_ ) * remove ``QLogicMPI`` easyblock ( `#1023 <https://github.com/easybuilders/easybuild-easyblocks/pull/1023> `_ ) * new easyblock for installing Anaconda ( `#950 <https://github.com/easybuilders/easybuild-easyblocks/pull/950> `_ ) * add generic easyblock for Conda installations ( `#950 <https://github.com/easybuilders/easybuild-easyblocks/pull/950> `_ ) * various enhancements, including: * enable use of ``GCCcore`` as toolchain for Clang, fail if no GCC prefix is found ( `#1002 <https://github.com/easybuilders/easybuild-easyblocks/pull/1002> `_ ) * also build Boost MPI library in parallel ( `#1005 <https://github.com/easybuilders/easybuild-easyblocks/pull/1005> `_ , `#1038 <https://github.com/easybuilders/easybuild-easyblocks/pull/1038> `_ ) * enhance g2clib easyblock to allow to install 1.6.0 or higher ( `#1006 <https://github.com/easybuilders/easybuild-easyblocks/pull/1006> `_ ) * update QuantumESPRESSO easyblock to support packaging changes in 6.0 ( `#1007 <https://github.com/easybuilders/easybuild-easyblocks/pull/1007> `_ ) * add support to ``Scons`` generic easyblock to provide argument to specify installation prefix ( `#1008 <https://github.com/easybuilders/easybuild-easyblocks/pull/1008> `_ ) * update ``IntelBase`` and imkl easyblocks to handle the 2017 versions of compilers/imkl ( `#1012 <https://github.com/easybuilders/easybuild-easyblocks/pull/1012> `_ ) * leverage ``toolchain.linalg`` functionality in ScaLAPACK easyblock, use ``copy_file`` ( `#1014 <https://github.com/easybuilders/easybuild-easyblocks/pull/1014> `_ ) * allow netCDF-C++4 to be used with ESMF ( `#1019 <https://github.com/easybuilders/easybuild-easyblocks/pull/1019> `_ ) * update Advisor easyblock to support latest versions ( `#1021 <https://github.com/easybuilders/easybuild-easyblocks/pull/1021> `_ ) * update CBLAS easyblock to build with ``foss`` toolchain ( `#1024 <https://github.com/easybuilders/easybuild-easyblocks/pull/1024> `_ ) * update Gurobi easyblock to use ``copy_file`` ( `#1028 <https://github.com/easybuilders/easybuild-easyblocks/pull/1028> `_ ) * add support for giving ``/lib`` preference over ``/lib64`` & co in GCC installation ( `#1030 <https://github.com/easybuilders/easybuild-easyblocks/pull/1030> `_ , `#1035 <https://github.com/easybuilders/easybuild-easyblocks/pull/1035> `_ ) * enable installation of ``libiberty`` by default for binutils ( `#1030 <https://github.com/easybuilders/easybuild-easyblocks/pull/1030> `_ ) * avoid CMake fiddling with the RPATHs injected by EasyBuild via ``--rpath`` in CMakeMake and METIS easyblocks ( `#1031 <https://github.com/easybuilders/easybuild-easyblocks/pull/1031> `_ , `#1034 <https://github.com/easybuilders/easybuild-easyblocks/pull/1034> `_ ) * simplify scipy sanity check to make it more robust w.r.t. version updates ( `#1037 <https://github.com/easybuilders/easybuild-easyblocks/pull/1037> `_ ) * various bug fixes, including: * make sure ' ``None`` ' doesn't appear in modules generated with ``--module-only`` ( `#998 <https://github.com/easybuilders/easybuild-easyblocks/pull/998> `_ ) * fix ATLAS easyblock for non-x86 systems ( `#1003 <https://github.com/easybuilders/easybuild-easyblocks/pull/1003> `_ ) * fix ' ``usempi`` ' and ' ``with_mpi`` ' usage to allow for a serial build of Amber 16 ( `#1013 <https://github.com/easybuilders/easybuild-easyblocks/pull/1013> `_ ) * add both ``lib/python2.7/site-packages/{,wx-3.0-gtk2}`` to ``$PYTHONPATH`` for wxPython ( `#1018 <https://github.com/easybuilders/easybuild-easyblocks/pull/1018> `_ ) * only hard inject RPATH for ``/usr/lib*`` directories when building binutils with ``dummy`` toolchain ( `#1026 <https://github.com/easybuilders/easybuild-easyblocks/pull/1026> `_ ) * make HDF5 easyblock handle ``--filter-deps`` correctly ( `#1027 <https://github.com/easybuilders/easybuild-easyblocks/pull/1027> `_ ) * update Travis config w.r.t. changes framework config defaults and required Lmod version ( `#1029 <https://github.com/easybuilders/easybuild-easyblocks/pull/1029> `_ ) * be more patient when running Mathematica Q&A installer ( `#1036 <https://github.com/easybuilders/easybuild-easyblocks/pull/1036> `_ ) **easyconfigs** * backwards incompatible changes: * archive easyconfigs using old inactive toolchains * see `#3725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3725> `_ , `#3728 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3728> `_ , `#3729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3729> `_ , `#3730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3730> `_ , `#3731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3731> `_ , `#3732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3732> `_ , `#3733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3733> `_ , `#3735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3735> `_ , `#3736 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3736> `_ , `#3737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3737> `_ , `#3738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3738> `_ * only taken into account by EasyBuild if ``--consider-archived-easyconfigs`` is enabled * no easyconfigs available outside of archive for QLogicMPI + 15 toolchains: * ``ClangGCC`` , ``cgmpich`` , ``cgmpolf`` , ``cgmvapich2`` , ``cgmvolf`` , ``cgompi`` , ``cgoolf`` , ``gmacml`` , ``goalf`` , ``gpsmpi`` , ``gpsolf`` , ``iiqmpi`` , ``intel-para`` , ``ipsmpi`` , ``iqacml`` * fix name in PyTables easyconfigs (was 'pyTables') ( `#3785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3785> `_ ) * added example easyconfig files for 32 new software packages: * 3to2 ( `#3655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3655> `_ ), Anaconda2 ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), Anaconda3 ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), ART ( `#3724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3724> `_ ), atools ( `#3631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3631> `_ ), awscli ( `#3645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3645> `_ ), behave ( `#3751 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3751> `_ ), Blosc ( `#3785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3785> `_ ), bokeh ( `#3790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3790> `_ ), Cantera ( `#3655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3655> `_ ), Cargo ( `#3764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3764> `_ ), dadi v1.7.0, distributed ( `#3786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3786> `_ ), ea-utils ( `#3634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3634> `_ ), Elk ( `#3644 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3644> `_ ), FGSL ( `#3638 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3638> `_ ), gencore_variant_detection ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), help2man ( `#3768 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3768> `_ ), lbzip2 ( `#3791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3791> `_ ), Log-Log4perl ( `#3574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3574> `_ ), Minimac2 ( `#3783 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3783> `_ ), mypy ( `#3694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3694> `_ ), OBITools ( `#3573 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3573> `_ ), perl-app-cpanminus ( `#3337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3337> `_ ), PGDSpider ( `#3625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3625> `_ ), prokka ( `#3755 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3755> `_ ), Reads2snp ( `#3609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3609> `_ ), spglib-python ( `#3620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3620> `_ ), SUNDIALS ( `#3654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3654> `_ , `#3655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3655> `_ ), SelEstim ( `#3626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3626> `_ ), XMLStarlet ( `#3797 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3797> `_ ), x265 ( `#3090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3090> `_ ) * added easyconfigs for new ' ``intelcuda`` ' toolchain ( `#3750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3750> `_ ) * added new easyconfigs for existing toolchains: * ``goolfc/2016.08`` ( `#3796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3796> `_ ), ``goolfc/2016.10`` ( `#3666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3666> `_ , `#3775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3775> `_ ), ``intel/2017.00`` ( `#3543 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3543> `_ ), ``intel/2017.01`` ( `#3757 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3757> `_ ), ``iomkl/2016.09-GCC-4.9.3-2.25`` ( `#3680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3680> `_ ), ``iomkl/2016.09-GCC-5.4.0-2.26`` ( `#3772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3772> `_ ) * added additional easyconfigs for various supported software packages, including: * Advisor 2017 update 1, Amber 16, ATLAS 3.10.2, GROMACS 2016, Octave 4.0.3, OpenFOAM 3.0.1, PyTables 3.3.0, QuantumESPRESSO 6.0, Rust v1.12.1 * various other enhancements, including: * STREAM builds using ~56GiB and ~111GiB ( `#3670 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3670> `_ ) * various bug fixes, including: * fix source spec in VASP easyconfig, ensure static linking with Intel MKL ( `#3381 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3381> `_ ) * fix source URL in GCCcore 6.2.0 easyconfig ( `#3608 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3608> `_ ) * correct STAMP dependency in i-cisTarget, must be 1.3 ( `#3613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3613> `_ ) * consistently specify to use ``-fgnu89-inline`` flag in M4 1.4.17 easyconfigs ( `#3623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3623> `_ ) * fix source URLs for Cython ( `#3636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3636> `_ ) * add Bison as build dep and M4 as runtime dep for flex 2.6.0 ( `#3656 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3656> `_ ) * enable parallel building of flex 2.6.0 ( `#3630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3630> `_ ) * add zlib and bzip2 dependencies to X11 bundle ( `#3662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3662> `_ ) * use ' ``letter_dir_for`` ' function rather than just grabbing 1st letter of software name in easyconfigs tests ( `#3664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3664> `_ ) * add patch to fix typo in GRIT 2.0.5 ( `#3675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3675> `_ ) * fix typo in patch for WRF 3.8.0 ( `#3702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3702> `_ ) * use ``$CC`` , ``$CXX`` rather than ``$I_MPI_CC`` , ``$I_MPI_CXX`` in patch for OpenFOAM 4.0 ( `#3703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3703> `_ ) * patch FLTK to fix ' ``undefined symbol`` ' issue when building Octave ( `#3704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3704> `_ ) * include Pillow as a proper dep for scikit-image rather than as extension, since it has deps itself ( `#3723 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3723> `_ ) * update Travis config w.r.t. changes framework config defaults and required Lmod version ( `#3773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3773> `_ ) * don't limit parallellism to 4 in recent GCC easyconfigs ( `#3776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3776> `_ , `#3777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3777> `_ , `#3778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3778> `_ ) * include M4 as dependency in flex 2.5.39 easyconfigs + fix consistency issues ( `#3782 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3782> `_ ) * consistently apply patch for ncurses 6.0 ( `#3792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3792> `_ ) * eliminate dependency on ``mpi-mic-rt`` in ifort ( `#3793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3793> `_ ) * include Autotools as build dependency in all beagle-lib and MrBayes easyconfigs ( `#3794 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3794> `_ ) * make OpenBLAS use the LAPACK version specified in the easyconfig (v0.2.18 & v0.2.19) ( `#3795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3795> `_ ) * include original download URL for ISL source tarball in GCC easyconfigs ( `#3798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3798> `_ ) * disable installing ``libiberty`` for binutils built with intel toolchain ( `#3802 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3802> `_ ) .. _release_notes_eb290: EasyBuild v2.9.0 (September 23rd 2016) -------------------------------------- feature release **framework** * note: vsc-base 2.5.4 or more recent is now required * various small enhancements, including: * change option ``--color`` choices to auto/always/never ( `#1701 <https://github.com/easybuilders/easybuild-framework/pull/1701> `_ , `#1898 <https://github.com/easybuilders/easybuild-framework/pull/1898> `_ , `#1911 <https://github.com/easybuilders/easybuild-framework/pull/1911> `_ ) * add support for ' ``hidden`` ' easyconfig parameter ( `#1837 <https://github.com/easybuilders/easybuild-framework/pull/1837> `_ ) * add support for using ``ccache`` and ``f90cache`` compiler caching tools ( `#1844 <https://github.com/easybuilders/easybuild-framework/pull/1844> `_ , `#1912 <https://github.com/easybuilders/easybuild-framework/pull/1912> `_ ) * see ``--use-ccache`` and ``--use-f90cache`` * update Cray metadata for 16.06 CrayPE release ( `#1851 <https://github.com/easybuilders/easybuild-framework/pull/1851> `_ ) * also include patch files in ``--new-pr`` and ``--update-pr`` ( `#1852 <https://github.com/easybuilders/easybuild-framework/pull/1852> `_ ) * handle deleted files in ``--new-pr`` ( `#1853 <https://github.com/easybuilders/easybuild-framework/pull/1853> `_ ) * add support for ``--install-latest-eb-release`` ( `#1861 <https://github.com/easybuilders/easybuild-framework/pull/1861> `_ ) * add support for hiding toolchains, see ``--hide-toolchains`` and ' ``hidden`` ' key in ' ``toolchain`` ' spec ( `#1871 <https://github.com/easybuilders/easybuild-framework/pull/1871> `_ ) * add template for GitHub source URL ( `#1872 <https://github.com/easybuilders/easybuild-framework/pull/1872> `_ ) * add support for combining ``--new-pr`` / ``--update-pr`` and ``--robot`` ( `#1881 <https://github.com/easybuilders/easybuild-framework/pull/1881> `_ ) * add support for ``--list-software`` and ``--list-installed-software`` ( `#1883 <https://github.com/easybuilders/easybuild-framework/pull/1883> `_ , `#1910 <https://github.com/easybuilders/easybuild-framework/pull/1910> `_ , `#1917 <https://github.com/easybuilders/easybuild-framework/pull/1917> `_ ) * print message on which extension is being installed, incl. progress counter ( `#1886 <https://github.com/easybuilders/easybuild-framework/pull/1886> `_ , `#1914 <https://github.com/easybuilders/easybuild-framework/pull/1914> `_ ) * add support for ``--github-org`` to specify GitHub organisation rather than GitHub user ( `#1894 <https://github.com/easybuilders/easybuild-framework/pull/1894> `_ ) * add support for running Lmod in debug mode ( `#1895 <https://github.com/easybuilders/easybuild-framework/pull/1895> `_ ) * avoid needless use of deepcopy, speed up support for templating in easyconfigs ( `#1897 <https://github.com/easybuilders/easybuild-framework/pull/1897> `_ ) * convert ``all_dependencies`` to a property in ``EasyConfig`` class ( `#1909 <https://github.com/easybuilders/easybuild-framework/pull/1909> `_ ) * add support for ``--mpi-cmd-template`` ( `#1918 <https://github.com/easybuilders/easybuild-framework/pull/1918> `_ ) * add support for ``--disable-mpi-tests`` ( `#1920 <https://github.com/easybuilders/easybuild-framework/pull/1920> `_ ) * various bug fixes, including: * merge with develop when using ``--from-pr`` ( `#1838 <https://github.com/easybuilders/easybuild-framework/pull/1838> `_ , `#1867 <https://github.com/easybuilders/easybuild-framework/pull/1867> `_ ) * ensure ``--new-pr`` doesn't open empty pull requests ( `#1846 <https://github.com/easybuilders/easybuild-framework/pull/1846> `_ ) * better error handling for outdated ``GitPython`` module in ``--check-github`` ( `#1847 <https://github.com/easybuilders/easybuild-framework/pull/1847> `_ ) * fix formatting for generated easyblocks documentation ( `#1860 <https://github.com/easybuilders/easybuild-framework/pull/1860> `_ ) * make sure the robot ignores filtered dependencies when creating toolchain cache ( `#1862 <https://github.com/easybuilders/easybuild-framework/pull/1862> `_ ) * honor ``--filter-deps`` under ``--minimal-toolchains`` ( `#1863 <https://github.com/easybuilders/easybuild-framework/pull/1863> `_ ) * correct format for ' ``param`` ' and ' ``author`` ' tags in docstrings ( `#1866 <https://github.com/easybuilders/easybuild-framework/pull/1866> `_ ) * ignore failing bootstrap test in Travis config file ( `#1870 <https://github.com/easybuilders/easybuild-framework/pull/1870> `_ ) * make sure all output of executed command is included in generated temporary log file ( `#1873 <https://github.com/easybuilders/easybuild-framework/pull/1873> `_ , `#1874 <https://github.com/easybuilders/easybuild-framework/pull/1874> `_ ) * ensure ``--show_hidden`` is used in the correct location for ' ``avail`` ' with Lmod ( `#1875 <https://github.com/easybuilders/easybuild-framework/pull/1875> `_ ) * make sure ``self.path`` is passed down in copy method of ``EasyConfig`` object ( `#1884 <https://github.com/easybuilders/easybuild-framework/pull/1884> `_ ) * take into account possible multi-line modloadmsg in ``ModuleGeneratorLua`` ( `#1885 <https://github.com/easybuilders/easybuild-framework/pull/1885> `_ ) * fix extracting ``.bz2`` source files ( `#1889 <https://github.com/easybuilders/easybuild-framework/pull/1889> `_ ) * don't resolve path to Lmod command ( `#1892 <https://github.com/easybuilders/easybuild-framework/pull/1892> `_ ) * fix skipping of stage 0 in bootstrap script ( `#1893 <https://github.com/easybuilders/easybuild-framework/pull/1893> `_ ) * fix function signature of ``log.deprecated`` compared to ``fancylogger.deprecated`` ( `#1896 <https://github.com/easybuilders/easybuild-framework/pull/1896> `_ , `#1899 <https://github.com/easybuilders/easybuild-framework/pull/1899> `_ ) * apply patch to Tcl/C environment modules tool for Tcl 8.6 support in Travis config ( `#1901 <https://github.com/easybuilders/easybuild-framework/pull/1901> `_ ) * fix combining ``--extended-dry-run`` with ``--from-pr`` ( `#1902 <https://github.com/easybuilders/easybuild-framework/pull/1902> `_ ) * also template dict keys ( `#1904 <https://github.com/easybuilders/easybuild-framework/pull/1904> `_ ) * don't pass ' ``--try-*`` ' command-line options to EB instance running within job script ( `#1908 <https://github.com/easybuilders/easybuild-framework/pull/1908> `_ ) * add workaround for incorrectly passing command line arguments with ``--job`` ( `#1915 <https://github.com/easybuilders/easybuild-framework/pull/1915> `_ ) * fix issues with ``--module-only`` ( `#1919 <https://github.com/easybuilders/easybuild-framework/pull/1919> `_ , `#1924 <https://github.com/easybuilders/easybuild-framework/pull/1924> `_ , `#1925 <https://github.com/easybuilders/easybuild-framework/pull/1925> `_ ) * correctly deal with specified start_dir * do not remove installation directory when build-in-installdir is enabled * make sure ' ``which`` ' function returns path to a file ( `#1921 <https://github.com/easybuilders/easybuild-framework/pull/1921> `_ ) * fix ``:param:`` , ``:return:`` tags in docstrings & add test for it ( `#1923 <https://github.com/easybuilders/easybuild-framework/pull/1923> `_ ) **easyblocks** * new easyblocks for 6 software packages that require customized support: * cppcheck ( `#983 <https://github.com/easybuilders/easybuild-easyblocks/pull/983> `_ ), HEALPix ( `#982 <https://github.com/easybuilders/easybuild-easyblocks/pull/982> `_ ), IMOD ( `#847 <https://github.com/easybuilders/easybuild-easyblocks/pull/847> `_ ), IronPython ( `#321 <https://github.com/easybuilders/easybuild-easyblocks/pull/321> `_ ), Mono ( `#321 <https://github.com/easybuilders/easybuild-easyblocks/pull/321> `_ ), MyMediaLite ( `#321 <https://github.com/easybuilders/easybuild-easyblocks/pull/321> `_ ) * various enhancements, including: * extend OpenFoam-Extend sanity check for decomp libraries ( `#784 <https://github.com/easybuilders/easybuild-easyblocks/pull/784> `_ ) * enhance Java easyblock to support installing Java 6.x ( `#940 <https://github.com/easybuilders/easybuild-easyblocks/pull/940> `_ ) * make QuantumESPRESSO easyblock aware of multithreaded FFT ( `#954 <https://github.com/easybuilders/easybuild-easyblocks/pull/954> `_ ) * extend PSI easyblock to use PCMSolver and CheMPS2 ( `#967 <https://github.com/easybuilders/easybuild-easyblocks/pull/967> `_ ) * make Boost easyblock add definition for ``$BOOST_ROOT`` to generated module file ( `#976 <https://github.com/easybuilders/easybuild-easyblocks/pull/976> `_ ) * add support to Bundle easyblock to install list of components ( `#980 <https://github.com/easybuilders/easybuild-easyblocks/pull/980> `_ ) * enhance & clean up libxml2 easyblock to also enable installing without Python bindings ( `#984 <https://github.com/easybuilders/easybuild-easyblocks/pull/984> `_ ) * update Libint easyblock for Libint 2.1.x ( `#985 <https://github.com/easybuilders/easybuild-easyblocks/pull/985> `_ ) * update sanity check for OpenFOAM to support OpenFOAM 4.x ( `#986 <https://github.com/easybuilders/easybuild-easyblocks/pull/986> `_ ) * make easyblocks that run MPI tests aware of ' ``mpi_tests`` ' build option ( `#993 <https://github.com/easybuilders/easybuild-easyblocks/pull/993> `_ ) * various bug fixes, including: * fix compatibility of OpenFOAM easyblock with ``--module-only`` ( `#784 <https://github.com/easybuilders/easybuild-easyblocks/pull/784> `_ ) * fix testing of ``--module-only`` compatibility for OpenFOAM and IMOD easyblocks ( `#784 <https://github.com/easybuilders/easybuild-easyblocks/pull/784> `_ ) * add ' ``include/libxml2`` ' to ``$CPATH`` in libxml2 easyblock ( `#981 <https://github.com/easybuilders/easybuild-easyblocks/pull/981> `_ ) * fix compatibility of IntelBase generic easyblock with ``--module-only`` ( `#994 <https://github.com/easybuilders/easybuild-easyblocks/pull/994> `_ ) * make sure correct config script is used for Tcl/Tk deps of R ( `#995 <https://github.com/easybuilders/easybuild-easyblocks/pull/995> `_ ) **easyconfigs** * added example easyconfig files for 88 new software packages: * ADMIXTURE ( `#3359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3359> `_ ), angsd ( `#3593 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3593> `_ ), ASHS ( `#3429 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3429> `_ ), AutoDock ( `#3465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3465> `_ ), AutoGrid ( `#3466 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3466> `_ ), BayeScan ( `#2748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2748> `_ , `#3356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3356> `_ ), BayPass ( `#3451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3451> `_ ), Bazel ( `#3379 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3379> `_ ), Blender ( `#3553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3553> `_ , `#3558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3558> `_ ), bwakit ( `#3567 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3567> `_ ), BXH_XCEDE_TOOLS ( `#3410 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3410> `_ ), CastXML ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ ), CHASE ( `#3304 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3304> `_ ), configparser ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), configurable-http-proxy ( `#3380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3380> `_ ), cppcheck ( `#3508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3508> `_ ), CRPropa ( `#779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/779> `_ ), DicomBrowser ( `#3432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3432> `_ ), DMTCP ( `#3422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3422> `_ ), entrypoints ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), f90cache ( `#3570 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3570> `_ ), fastPHASE ( `#3343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3343> `_ ), fastQValidator ( `#3192 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3192> `_ ), FFindex ( `#1135 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1135> `_ ), FragGeneScan ( `#1198 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1198> `_ ), gdc-client ( `#3399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3399> `_ ), gflags ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), glog ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), GRIT ( `#3561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3561> `_ ), H5hut ( `#3431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3431> `_ ), HAPGEN2 ( `#3344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3344> `_ ), HEALPix ( `#779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/779> `_ ), IMOD ( `#1187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1187> `_ , `#3347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3347> `_ ), IronPython ( `#607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/607> `_ ), jhbuild ( `#3476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3476> `_ ), jupyterhub ( `#3380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3380> `_ ), Keras ( `#3581 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3581> `_ ), khmer ( `#1158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1158> `_ ), LeadIT ( `#3345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3345> `_ , `#3599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3599> `_ ), LevelDB ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), libbitmask ( `#3481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3481> `_ ), libcpuset ( `#3481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3481> `_ ), LMDB ( `#3417 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3417> `_ ), log4cplus ( `#1136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1136> `_ ), MACH ( `#3346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3346> `_ ), Mako ( `#3460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3460> `_ ), Maq ( `#3428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3428> `_ ), MetaGeneAnnotator ( `#3307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3307> `_ ), Metal ( `#3324 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3324> `_ ), Mono ( `#607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/607> `_ ), MyMediaLite ( `#607 <https://github.com/easybuilders/easybuild-easyconfigs/pull/607> `_ ), nco ( `#2575 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2575> `_ ), nose-parameterized ( `#3579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3579> `_ ), OpenEXR ( `#3553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3553> `_ ), OpenImageIO ( `#3553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3553> `_ ), path.py ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), PCRE2 ( `#3325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3325> `_ ), pftoolsV3 ( `#3317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3317> `_ ), PHASE ( `#3385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3385> `_ ), PLAST ( `#3288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3288> `_ ), PLINKSEQ ( `#3402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3402> `_ ), POV-Ray ( `#3551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3551> `_ ), ProbABEL ( `#3108 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3108> `_ ), prompt-toolkit ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), protobuf-python ( `#3563 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3563> `_ ), PSORTb ( `#3317 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3317> `_ ), py ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), pygccxml ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), pyGIMLi ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), pyplusplus ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), PyQt5 ( `#3533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3533> `_ ), Pyro4 ( `#3527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3527> `_ ), pytest ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ , `#3482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3482> `_ ), QCA ( `#3595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3595> `_ ), RDMC ( `#1137 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1137> `_ ), S.A.G.E. ( `#3427 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3427> `_ ), SDL2 ( `#3551 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3551> `_ ), SHORE ( `#3531 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3531> `_ ), SimVascular ( `#3555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3555> `_ ), SortMeRNA ( `#3326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3326> `_ ), SUMACLUST ( `#3316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3316> `_ ), SUMATRA ( `#3316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3316> `_ ), Text-CSV ( `#3323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3323> `_ ), Triangle ( `#3403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3403> `_ ), VEGAS ( `#3457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3457> `_ ), VirSorter ( `#3307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3307> `_ ), wcwidth ( `#3368 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3368> `_ , `#3424 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3424> `_ ), X11 ( `#3340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3340> `_ ) * added new easyconfigs for existing toolchains: * CrayGNU + CrayIntel 2016.06 ( `#3377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3377> `_ ) * foss 2016.07 ( `#3517 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3517> `_ ) + 2016.09 ( `#3523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3523> `_ ) * iomkl 2016.07 ( `#3458 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3458> `_ ) * pomkl 2016.09 ( `#3516 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3516> `_ ) * added additional easyconfigs for various supported software packages, including: * FFTW 3.3.5, GCC 4.9.4 + 6.2.0, GROMACS 5.1.4, IPython 5.1.0, LLVM 3.9.0, Mesa 12.0.1, OpenCV 3.1.0, OpenFOAM 4.0, OpenMPI 2.0.1, ParaView 5.1.2, PGI 16.7, QuantumESPRESSO 5.4.0, Qt5 5.7.0, R-bundle-Bioconductor 3.3, VTK 7.0.0, Yade 2016.06a * various enhancements, including: * adjust PSI4 easyconfigs for updated easyblock ( `#3312 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3312> `_ ) * clean up libxml2 easyconfigs according to updated libxml2 easyblock ( `#3479 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3479> `_ , `#3509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3509> `_ ) * significantly speed up verifying of dumped easyconfig by resorting to 'shallow' parsing ( `#3520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3520> `_ ) * include sanity checks for all MATIO config files ( `#3528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3528> `_ ) * remove ``--with-tcl-config`` / ``--with-tk-config`` from R easyconfig, already done in R easyblock ( `#3580 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3580> `_ ) * various bug fixes, including: * disable testing in all ParaView 4.4.0 easyconfigs, required download is too much of a PITA ( `#3178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3178> `_ ) * add SQLite as dep to GDAL 2.1.0 easyconfigs ( `#3342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3342> `_ ) * add zlib/SQLite/LibTIFF as dep to R 3.3.1 easyconfigs ( `#3342 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3342> `_ ) * add bzip2 as a dependency of freetype ( `#3464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3464> `_ ) * specify correct MPI target in FDS easyconfigs ( `#3488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3488> `_ ) * add tcsh as OS dep in NAMD easyconfigs ( `#3491 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3491> `_ ) * statically link ncurses/libreadline in Lua easyconfig with ' ``dummy`` ' toolchain ( `#3545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3545> `_ ) * add M4 as dep for flex 2.6.x ( `#3542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3542> `_ , `#3550 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3550> `_ ) * add bzip2 and libxcb dependencies to FFmpeg 3.x easyconfigs ( `#3548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3548> `_ ) * make sure & check that Graphviz does not install Tcl bindings in Tcl install prefix ( `#3556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3556> `_ ) * add missing patches for extensions in Python 3.x easyconfigs ( `#3557 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3557> `_ ) * add missing XZ dependency to libxml2 2.9.4 easyconfigs, change gettext dep of XZ to build-only dep ( `#3568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3568> `_ ) * enable running of tests for HPCG ( `#3578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3578> `_ ) * fix ``buildopts`` in tabix easyconfigs ( `#3584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3584> `_ ) .. _release_notes_eb282: EasyBuild v2.8.2 (July 13th 2016) --------------------------------- bugfix release **framework** * various small enhancements, including: * add support for rst output for ``--list-*`` and ``--avail-*`` ( `#1339 <https://github.com/easybuilders/easybuild-framework/pull/1339> `_ ) * add support for ' ``eb --check-conflicts`` ' ( `#1747 <https://github.com/easybuilders/easybuild-framework/pull/1747> `_ , `#1807 <https://github.com/easybuilders/easybuild-framework/pull/1807> `_ , `#1833 <https://github.com/easybuilders/easybuild-framework/pull/1833> `_ ) * ensure nice error message when non-existing path is passed to ``apply_regex_substitutions`` ( `#1788 <https://github.com/easybuilders/easybuild-framework/pull/1788> `_ ) * add check for module output, empty stdout is a sign of trouble with Lmod ( `#1793 <https://github.com/easybuilders/easybuild-framework/pull/1793> `_ ) * add multi-threaded FFT to toolchain ( `#1802 <https://github.com/easybuilders/easybuild-framework/pull/1802> `_ ) * avoid special characters like '[', ']' in path to temporary directory ( `#1808 <https://github.com/easybuilders/easybuild-framework/pull/1808> `_ ) * add support for ``--zip-logs`` ( `#1820 <https://github.com/easybuilders/easybuild-framework/pull/1820> `_ ) * add support for ``--extra-modules`` ( `#1821 <https://github.com/easybuilders/easybuild-framework/pull/1821> `_ ) * add type conversion for 'checksums' and 'patches' parameter in .yeb easyconfigs ( `#1826 <https://github.com/easybuilders/easybuild-framework/pull/1826> `_ , `#1840 <https://github.com/easybuilders/easybuild-framework/pull/1840> `_ ) * add support for filtering tests by name ( `#1828 <https://github.com/easybuilders/easybuild-framework/pull/1828> `_ ) * add support for ``--avail-toolchain-opts`` ( `#1830 <https://github.com/easybuilders/easybuild-framework/pull/1830> `_ , `#1839 <https://github.com/easybuilders/easybuild-framework/pull/1839> `_ ) * use absolute path for robot and easyconfig files ( `#1834 <https://github.com/easybuilders/easybuild-framework/pull/1834> `_ ) * add backup URL for tarballs hosted on SourceForge in ``install_eb_dep.sh`` script ( `#1843 <https://github.com/easybuilders/easybuild-framework/pull/1843> `_ ) * various bug fixes, including: * fix installation of Lua in ``install_eb_dep.sh`` script ( `#1789 <https://github.com/easybuilders/easybuild-framework/pull/1789> `_ ) * fix OpenMP flag for Cray compiler wrappers ( `#1794 <https://github.com/easybuilders/easybuild-framework/pull/1794> `_ ) * only reset ``$MODULEPATH`` before loading a module if environment was reset ( `#1795 <https://github.com/easybuilders/easybuild-framework/pull/1795> `_ ) * include vsc-install as dependency in ``setup.py`` ( `#1805 <https://github.com/easybuilders/easybuild-framework/pull/1805> `_ ) * cache ``$PATH`` & ``$PYTHONPATH`` in test setUp, restore them in tests where ' ``eb`` ' is used ( `#1806 <https://github.com/easybuilders/easybuild-framework/pull/1806> `_ ) * don't reset ``$MODULEPATH`` in stage 2 of bootstrap script, support forced installation during stage 2 ( `#1810 <https://github.com/easybuilders/easybuild-framework/pull/1810> `_ ) * fix issue with templates defined by deps being required while still parsing deps ( `#1812 <https://github.com/easybuilders/easybuild-framework/pull/1812> `_ ) * skip unneeded unuse/use commands on tail of ``$MODULEPATH`` in ``check_module_path`` ( `#1813 <https://github.com/easybuilders/easybuild-framework/pull/1813> `_ ) * fix auto-convert for all ``*dependencies`` params in ``.yeb`` easyconfigs, ensure version is a string ( `#1818 <https://github.com/easybuilders/easybuild-framework/pull/1818> `_ ) * fix ``keyring`` version in Travis config ( `#1819 <https://github.com/easybuilders/easybuild-framework/pull/1819> `_ ) * fix dumping of ``.yeb`` easyconfig files in easyconfigs archive ( `#1822 <https://github.com/easybuilders/easybuild-framework/pull/1822> `_ ) * fix format of supported easyconfig templates in help output ( `#1825 <https://github.com/easybuilders/easybuild-framework/pull/1825> `_ ) * stick to ``pydot`` 1.1.0 for Python 2.6 in Travis config ( `#1827 <https://github.com/easybuilders/easybuild-framework/pull/1827> `_ ) **easyblocks** * new easyblocks for 5 software packages that require customized support: * Amber ( `#958 <https://github.com/easybuilders/easybuild-easyblocks/pull/958> `_ ), Extrae ( `#955 <https://github.com/easybuilders/easybuild-easyblocks/pull/955> `_ ), Gurobi ( `#962 <https://github.com/easybuilders/easybuild-easyblocks/pull/962> `_ ), Paraver ( `#956 <https://github.com/easybuilders/easybuild-easyblocks/pull/956> `_ ), Tau ( `#887 <https://github.com/easybuilders/easybuild-easyblocks/pull/887> `_ ) * various enhancements, including: * add support for building & installing old GROMACS versions ( `#569 <https://github.com/easybuilders/easybuild-easyblocks/pull/569> `_ , `#960 <https://github.com/easybuilders/easybuild-easyblocks/pull/960> `_ ) * add support for building Boost with Cray toolchain ( `#849 <https://github.com/easybuilders/easybuild-easyblocks/pull/849> `_ ) * libxsmm support for CP2K ( `#942 <https://github.com/easybuilders/easybuild-easyblocks/pull/942> `_ ) * pick up specified components for imkl ( `#943 <https://github.com/easybuilders/easybuild-easyblocks/pull/943> `_ ) * add support for building GROMACS with double precision ( `#946 <https://github.com/easybuilders/easybuild-easyblocks/pull/946> `_ , `#960 <https://github.com/easybuilders/easybuild-easyblocks/pull/960> `_ ) * add support for building GROMACS with CUDA support and using dynamic libraries using ``Cray`` toolchains ( `#951 <https://github.com/easybuilders/easybuild-easyblocks/pull/951> `_ , `#960 <https://github.com/easybuilders/easybuild-easyblocks/pull/960> `_ ) * also install vsc-install in ``EasyBuildMeta`` easyblock, if tarball is provided ( `#957 <https://github.com/easybuilders/easybuild-easyblocks/pull/957> `_ ) * enhance PSI easyblock to support PSI4 1.0 ( `#965 <https://github.com/easybuilders/easybuild-easyblocks/pull/965> `_ ) * various bug fixes, including: * also install scripts with MRtrix 0.3.14 ( `#941 <https://github.com/easybuilders/easybuild-easyblocks/pull/941> `_ ) * enhance Qt easyblock to support Qt3 ( `#944 <https://github.com/easybuilders/easybuild-easyblocks/pull/944> `_ ) * create ' ``release`` ' symlink in MRtrix install dir ( `#947 <https://github.com/easybuilders/easybuild-easyblocks/pull/947> `_ ) * fix ``make_installdir`` in Inspector & VTune easyblocks ( `#952 <https://github.com/easybuilders/easybuild-easyblocks/pull/952> `_ ) * make ``Binary`` and ``MakeCp`` easyblocks aware of ' ``keepsymlinks`` ' ( `#959 <https://github.com/easybuilders/easybuild-easyblocks/pull/959> `_ ) * correctly define ``$G4*`` environment variables in Geant4 easyblock ( `#961 <https://github.com/easybuilders/easybuild-easyblocks/pull/961> `_ , `#970 <https://github.com/easybuilders/easybuild-easyblocks/pull/970> `_ ) * prepend tmp install path to ``$PYTHONPATH`` in numpy test step, move to build dir when removing ' ``numpy`` ' subdir ( `#963 <https://github.com/easybuilders/easybuild-easyblocks/pull/963> `_ ) * correct full path to ALADIN config file & patch it to use right Fortran compiler flags ( `#964 <https://github.com/easybuilders/easybuild-easyblocks/pull/964> `_ ) * ensure correct compiler command/flags are used for SAMtools ( `#966 <https://github.com/easybuilders/easybuild-easyblocks/pull/966> `_ ) **easyconfigs** * added example easyconfig files for 54 new software packages: * Amber ( `#3200 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3200> `_ ), Bullet ( `#3175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3175> `_ ), CONTRAlign ( `#690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/690> `_ ), Cluster-Buster ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ ), damageproto ( `#3222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3222> `_ , `#3308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3308> `_ ), DCA++ ( `#3219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3219> `_ ), EIGENSOFT ( `#3147 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3147> `_ , `#3163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3163> `_ ), Extrae ( `#507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/507> `_ ), fdstools ( `#3237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3237> `_ ), ffnet ( `#3273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3273> `_ ), GP2C ( `#3257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3257> `_ ), Gurobi ( `#3239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3239> `_ ), gc ( `#3202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3202> `_ , `#3261 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3261> `_ ), gputools ( `#546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/546> `_ ), IMa2p ( `#3300 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3300> `_ ), IOzone ( `#3253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3253> `_ ), i-cisTarget ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ , `#3194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3194> `_ ), icmake ( `#3243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3243> `_ ), io_lib ( `#3255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3255> `_ ), Kent_tools ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ ), libcmaes ( `#3256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3256> `_ ), libpsortb ( `#3259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3259> `_ ), libxsmm ( `#3099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3099> `_ ), MEGACC ( `#3263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3263> `_ ), MM-align ( `#1428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1428> `_ ), MOSAIK ( `#880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/880> `_ ), MView ( `#1345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1345> `_ ), MySQL-python ( `#3172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3172> `_ , `#3189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3189> `_ ), magma ( `#3219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3219> `_ ), mrFAST ( `#862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/862> `_ ), mrsFAST ( `#862 <https://github.com/easybuilders/easybuild-easyconfigs/pull/862> `_ ), mysqlclient ( `#3172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3172> `_ , `#3232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3232> `_ ), NTL ( `#3183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3183> `_ ), PARI-GP ( `#3257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3257> `_ ), Paraver ( `#508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/508> `_ ), psutil ( `#3171 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3171> `_ , `#3231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3231> `_ ), PSI4 ( `#3293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3293> `_ ), Qwt ( `#3157 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3157> `_ ), RMBlast ( `#3142 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3142> `_ ), STAMP ( `#3191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3191> `_ ), Seqmagick ( `#3264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3264> `_ ), splitRef ( `#946 <https://github.com/easybuilders/easybuild-easyconfigs/pull/946> `_ ), TAU ( `#509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/509> `_ ), TRF ( `#3141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3141> `_ ), TVB ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), TVB-deps ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), tvb-data ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), tvb-framework ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), tvb-library ( `#3053 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3053> `_ , `#3247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3247> `_ , `#3251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3251> `_ ), VampirTrace ( `#509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/509> `_ ), Voro++ ( `#3174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3174> `_ ), wheel ( `#3235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3235> `_ ), wxPropertyGrid ( `#508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/508> `_ ), xonsh ( `#3159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3159> `_ ) * added easyconfigs for update of common toolchains: ``foss/2016b`` ( `#3271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3271> `_ ), ``intel/2016b`` ( `#3270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3270> `_ ) * added new easyconfigs for existing toolchains: ``CrayGNU/2016.03`` & ``CrayGNU/2016.04`` ( `#3291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3291> `_ ), ``foss/2016.06`` ( `#3184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3184> `_ ), ``intel/2016.03-GCC-5.4`` ( `#3185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3185> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.61.0, GCC 5.4.0, GROMACS 3.3.3, HDF5 1.8.17, netCDF 4.4.1, numpy 1.11.0, Perl 5.24.0, PETSc 3.7.2, Python 2.7.12, Python 3.5.2, Qt 3.3.8, R 3.3.1 * various enhancements, including: * use ``check_conflicts`` function in easyconfigs tests ( `#2981 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2981> `_ ) * also include vsc-install in list of sources for recent EasyBuild easyconfigs, to support offline installation ( `#3203 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3203> `_ ) * enable building of ``libmysqld.*`` in MariaDB easyconfigs ( `#3230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3230> `_ ) * add ALDEx2, phyloseq to bundles for Bioconductor 3.2 ( `#3211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3211> `_ , `#3241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3241> `_ ) * add biom, geepack, lubridate, pim to list of R 3.2.3 extensions ( `#3186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3186> `_ , `#3211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3211> `_ , `#3275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3275> `_ ) * various bug fixes, including: * add patch for Boost 1.60.0 to fix bug resulting in ``TypeError`` ( `#3162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3162> `_ ) * add fftw dependency to CP2K 2.6.0 easyconfigs using CrayGNU ( `#3176 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3176> `_ ) * fix location of ``libelf.h`` , only (also) installed as ``include/libelf.h`` is there's no ``/usr/include/libelf.h`` ( `#3201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3201> `_ ) * fix software name for Guile & GnuTLS (was 'guile' & 'gnutls') ( `#3207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3207> `_ ) * added missing space in Geant4 configopts to specify ``-DGEANT4_INSTALL_DATA`` ( `#3209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3209> `_ ) * fix Cython download URL in Python 2.7.11 easyconfigs ( `#3212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3212> `_ ) * add missing build deps for X stack in easyconfigs using ``foss/2016a`` or ``intel/2016a`` ( `#3222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3222> `_ , `#3308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3308> `_ ) * fix overruling of exts_list in Perl 5.22.2 easyconfig ( `#3224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3224> `_ ) * add missing dependency on GMP in R 3.2.3 easyconfigs ( `#3226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3226> `_ ) * don't hard specify toolchain for binutils build dep in likwid easyconfig, since it matches parent toolchain ( `#3240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3240> `_ ) * fix ``homepage`` & ``source_urls`` in HMMER easyconfigs ( `#3246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3246> `_ ) * stick to ``pydot`` 1.1.0 for Python 2.6 in Travis config ( `#3282 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3282> `_ ) * add ``python-dev(el)`` to OS deps in GC3Pie easyconfigs ( `#3310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3310> `_ ) .. _release_notes_eb281: EasyBuild v2.8.1 (May 30th 2016) -------------------------------- bugfix release **framework** * various bug fixes, including: * fix error message on missing module command in bootstrap script ( `#1772 <https://github.com/easybuilders/easybuild-framework/pull/1772> `_ ) * expand ' ``~`` ' in paths specified to ``--include-*`` ( `#1774 <https://github.com/easybuilders/easybuild-framework/pull/1774> `_ ) * break after deleting cache entry to avoid attempt to delete cache entry again ( `#1776 <https://github.com/easybuilders/easybuild-framework/pull/1776> `_ ) * avoid changing ``$MODULEPATH`` when prepending with symlink of path already at head of ``$MODULEPATH`` ( `#1777 <https://github.com/easybuilders/easybuild-framework/pull/1777> `_ ) * filter out duplicates in ``find_flexlm_license`` ( `#1779 <https://github.com/easybuilders/easybuild-framework/pull/1779> `_ ) * stick with GitPython < 2.0 with Py2.6 in Travis configuration ( `#1781 <https://github.com/easybuilders/easybuild-framework/pull/1781> `_ ) * don't use ``LooseVersion`` to define ``version_major`` / ``version_minor`` ( `#1783 <https://github.com/easybuilders/easybuild-framework/pull/1783> `_ ) **easyblocks** * various enhancements, including: * update MRtrix easyblock for version 0.3.14 ( `#932 <https://github.com/easybuilders/easybuild-easyblocks/pull/932> `_ ) * update Inspector easyblock for recent versions ( `#934 <https://github.com/easybuilders/easybuild-easyblocks/pull/934> `_ ) * update VTune easyblock for recent versions ( `#935 <https://github.com/easybuilders/easybuild-easyblocks/pull/935> `_ ) * add debug message to IntelBase easyblock w.r.t. switching to 'exist_lic' ( `#936 <https://github.com/easybuilders/easybuild-easyblocks/pull/936> `_ ) **easyconfigs** * added example easyconfig files for 13 new software packages: * drFAST ( `#906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/906> `_ ), git-lfs ( `#2478 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2478> `_ ), grabix ( `#3127 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3127> `_ ), JWM ( `#3007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3007> `_ ), libcroco ( `#3007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3007> `_ ), librsvg ( `#3007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3007> `_ ), MaCH ( `#3136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3136> `_ ), mayavi ( `#3106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3106> `_ ), OpenMM ( `#2762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2762> `_ ), Pysam ( `#3080 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3080> `_ ), SeqPrep ( `#3097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3097> `_ ), vt ( `#3128 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3128> `_ ), wkhtmltopdf ( `#3098 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3098> `_ ) * added new easyconfigs for existing toolchains: ``intel/2016.03-GCC-4.9`` ( `#3088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3088> `_ ) * added additional easyconfigs for various supported software packages, including: * Boost 1.61.0, ESMF 7.0.0, Inspector 2016 update 3, IPython 4.2, netCDF-C++4 4.3.0, netCDF-Fortran 4.4.4, Perl 5.22.2, VTune 2016 update 3 * various bug fixes, including: * apply libreadline patch to fix bug triggering segmentation fault ( `#3086 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3086> `_ ) .. _release_notes_eb280: EasyBuild v2.8.0 (May 18th 2016) -------------------------------- feature + bugfix release **framework** * significant speedup improvements of EasyBuild itself, thanks to: * stop creating ``ModulesTool`` instances over and over again ( `#1735 <https://github.com/easybuilders/easybuild-framework/pull/1735> `_ ) * cache result of ' ``module avail`` ' calls ( `#1742 <https://github.com/easybuilders/easybuild-framework/pull/1742> `_ ) * add support for using PGI as toolchain compiler ( `#1342 <https://github.com/easybuilders/easybuild-framework/pull/1342> `_ , `#1664 <https://github.com/easybuilders/easybuild-framework/pull/1664> `_ , `#1759 <https://github.com/easybuilders/easybuild-framework/pull/1759> `_ , `#1761 <https://github.com/easybuilders/easybuild-framework/pull/1761> `_ , `#1764 <https://github.com/easybuilders/easybuild-framework/pull/1764> `_ ) * incl. new toolchain definitions ``pompi`` and ``pomkl`` ( `#1724 <https://github.com/easybuilders/easybuild-framework/pull/1724> `_ ) * add test configuration for Travis ( `#1733 <https://github.com/easybuilders/easybuild-framework/pull/1733> `_ , `#1737 <https://github.com/easybuilders/easybuild-framework/pull/1737> `_ , `#1743 <https://github.com/easybuilders/easybuild-framework/pull/1743> `_ , `#1767 <https://github.com/easybuilders/easybuild-framework/pull/1767> `_ ) * various other enhancements, including: * add ``get_total_memory()`` function in ``systemtools`` module ( `#1623 <https://github.com/easybuilders/easybuild-framework/pull/1623> `_ ) * ignore ``__init__.py`` files in ``--include-*`` ( `#1704 <https://github.com/easybuilders/easybuild-framework/pull/1704> `_ ) * use ``-fopenmp`` rather than ``-openmp`` for Intel compilers, since ``-openmp`` is deprecated ( `#1718 <https://github.com/easybuilders/easybuild-framework/pull/1718> `_ ) * add modules to metadata for Cray modules ( `#1721 <https://github.com/easybuilders/easybuild-framework/pull/1721> `_ ) * make sure user write permissions are set after failed removal attempt of installation directory ( `#1722 <https://github.com/easybuilders/easybuild-framework/pull/1722> `_ ) * escape special characters in software name in ``find_related_easyconfigs`` ( `#1726 <https://github.com/easybuilders/easybuild-framework/pull/1726> `_ ) * add support for ``CrayPGI`` compiler toolchain ( `#1729 <https://github.com/easybuilders/easybuild-framework/pull/1729> `_ ) * ensure read permission to all installed files for everybody (unless other options specify otherwise) ( `#1731 <https://github.com/easybuilders/easybuild-framework/pull/1731> `_ ) * also consider ``$LMOD_CMD`` in bootstrap script ( `#1736 <https://github.com/easybuilders/easybuild-framework/pull/1736> `_ ) * translate PyPI download URL to alternate URL with a hash ( `#1749 <https://github.com/easybuilders/easybuild-framework/pull/1749> `_ ) * make ``get_software_libdir`` compatible with ``-x`` ( `#1750 <https://github.com/easybuilders/easybuild-framework/pull/1750> `_ ) * set ``$LMOD_REDIRECT`` to ' ``no`` ' when initialising Lmod ( `#1755 <https://github.com/easybuilders/easybuild-framework/pull/1755> `_ ) * add test for broken modules tool setup affecting ' ``module use`` ' ( `#1758 <https://github.com/easybuilders/easybuild-framework/pull/1758> `_ ) * various bug fixes, including: * isolate ' ``options`` ' tests from easyblocks other than the ones included in the tests ( `#1699 <https://github.com/easybuilders/easybuild-framework/pull/1699> `_ ) * don't run ' ``module purge`` ' in tests, since EasyBuild may be made available through a module ( `#1702 <https://github.com/easybuilders/easybuild-framework/pull/1702> `_ ) * avoid rehandling ``--include-*`` options over and over again during ``--show-config`` ( `#1705 <https://github.com/easybuilders/easybuild-framework/pull/1705> `_ ) * remove useless ``test_cwd`` ( `#1706 <https://github.com/easybuilders/easybuild-framework/pull/1706> `_ ) * fix bootstrap script: make sure setuptools installed in stage0 is still available at end of stage1 ( `#1727 <https://github.com/easybuilders/easybuild-framework/pull/1727> `_ ) * forcibly create target branch in ``--update-pr`` ( `#1728 <https://github.com/easybuilders/easybuild-framework/pull/1728> `_ ) * remove check whether ' ``easybuild`` ' is being imported from dir that contains ``easybuild/__init__.py`` ( `#1730 <https://github.com/easybuilders/easybuild-framework/pull/1730> `_ ) * (re)install vsc-base during stage1 using ``--always-copy`` in bootstrap script, if needed ( `#1732 <https://github.com/easybuilders/easybuild-framework/pull/1732> `_ ) * use ``os.path.realpath`` in ``test_wrong_modulepath`` to avoid symlinked path breaking the test ( `#1740 <https://github.com/easybuilders/easybuild-framework/pull/1740> `_ ) * unset ``$PYTHONPATH`` in before tested bootstrapped EasyBuild module ( `#1743 <https://github.com/easybuilders/easybuild-framework/pull/1743> `_ ) * take into account that paths in modulepath may be symlinks in ``test_module_caches`` ( `#1745 <https://github.com/easybuilders/easybuild-framework/pull/1745> `_ ) * change to install dir rather than buildpath in sanity check of extension, latter may not exist ( `#1746 <https://github.com/easybuilders/easybuild-framework/pull/1746> `_ , `#1748 <https://github.com/easybuilders/easybuild-framework/pull/1748> `_ ) * only load modules using short module names ( `#1754 <https://github.com/easybuilders/easybuild-framework/pull/1754> `_ ) * (re)load modules for build deps in extensions_step ( `#1762 <https://github.com/easybuilders/easybuild-framework/pull/1762> `_ ) * fix ``modpath_extensions_for method`` : take into account modules in Lua syntax ( `#1766 <https://github.com/easybuilders/easybuild-framework/pull/1766> `_ ) * fix broken link to VSC website in license headers ( `#1768 <https://github.com/easybuilders/easybuild-framework/pull/1768> `_ ) **easyblocks** * add test configuration for Travis ( `#895 <https://github.com/easybuilders/easybuild-easyblocks/pull/895> `_ , `#897 <https://github.com/easybuilders/easybuild-easyblocks/pull/897> `_ , `#900 <https://github.com/easybuilders/easybuild-easyblocks/pull/900> `_ , `#926 <https://github.com/easybuilders/easybuild-easyblocks/pull/926> `_ ) * new easyblocks for 4 software packages that require customized support: * binutils ( `#907 <https://github.com/easybuilders/easybuild-easyblocks/pull/907> `_ ), libQGLViewer ( `#890 <https://github.com/easybuilders/easybuild-easyblocks/pull/890> `_ ), SuperLU ( `#860 <https://github.com/easybuilders/easybuild-easyblocks/pull/860> `_ ), wxPython ( `#883 <https://github.com/easybuilders/easybuild-easyblocks/pull/883> `_ ) * various other enhancements, including: * update SuiteSparse easyblock for version >= 4.5 ( `#863 <https://github.com/easybuilders/easybuild-easyblocks/pull/863> `_ ) * enhance imkl easyblock to install on top of PGI ( `#866 <https://github.com/easybuilders/easybuild-easyblocks/pull/866> `_ , `#916 <https://github.com/easybuilders/easybuild-easyblocks/pull/916> `_ ) * enable runtime logging of install cmd in ``IntelBase`` ( `#874 <https://github.com/easybuilders/easybuild-easyblocks/pull/874> `_ ) * enhance Qt easyblock to support installing with ``dummy`` toolchain ( `#881 <https://github.com/easybuilders/easybuild-easyblocks/pull/881> `_ ) * delete libnuma symbolic links in PGI installation directory ( `#888 <https://github.com/easybuilders/easybuild-easyblocks/pull/888> `_ ) * enhance PDT easyblock to support installing with ``dummy`` toolchain ( `#894 <https://github.com/easybuilders/easybuild-easyblocks/pull/894> `_ ) * add support for building Clang with OpenMP support ( `#898 <https://github.com/easybuilders/easybuild-easyblocks/pull/898> `_ ) * update Score-P easyblock for additional compilers, MPI libraries & dependencies ( `#889 <https://github.com/easybuilders/easybuild-easyblocks/pull/889> `_ ) * drop deprecated ' ``testrb`` ' from sanity check in Ruby easyblock ( `#901 <https://github.com/easybuilders/easybuild-easyblocks/pull/901> `_ ) * enhance WRF easyblock to support versions >= 3.7 ( `#902 <https://github.com/easybuilders/easybuild-easyblocks/pull/902> `_ ) * update QuantumESPRESSO easyblock for version 5.3.0 ( `#904 <https://github.com/easybuilders/easybuild-easyblocks/pull/904> `_ ) * add support in PythonPackage easyblock to use ' ``setup.py develop`` ' ( `#905 <https://github.com/easybuilders/easybuild-easyblocks/pull/905> `_ ) * update Qt easyblock for Qt 5.6.0 ( `#908 <https://github.com/easybuilders/easybuild-easyblocks/pull/908> `_ ) * extend bzip2 easyblock to also build dynamic libraries ( `#910 <https://github.com/easybuilders/easybuild-easyblocks/pull/910> `_ ) * make threading an explicit option rather than relying on MPI library in SCOTCH easyblock ( `#914 <https://github.com/easybuilders/easybuild-easyblocks/pull/914> `_ ) * update PGI easyblock to install siterc file so PGI picks up ``$LIBRARY_PATH`` ( `#919 <https://github.com/easybuilders/easybuild-easyblocks/pull/919> `_ ) * enhance sanity check paths for compiler commands in PGI easyblock ( `#919 <https://github.com/easybuilders/easybuild-easyblocks/pull/919> `_ ) * also filter out ``-ldl`` from $LIBBLAS & co for Intel MKL in numpy easyblock ( `#920 <https://github.com/easybuilders/easybuild-easyblocks/pull/920> `_ ) * define ``$MIC_LD_LIBRARY_PATH`` for impi ( `#925 <https://github.com/easybuilders/easybuild-easyblocks/pull/925> `_ ) * various bug fixes, including: * don't hardcode Python version in ``test_make_module_pythonpackage`` ( `#876 <https://github.com/easybuilders/easybuild-easyblocks/pull/876> `_ ) * make PythonPackage easyblock compatible with ``--module-only`` ( `#884 <https://github.com/easybuilders/easybuild-easyblocks/pull/884> `_ , `#906 <https://github.com/easybuilders/easybuild-easyblocks/pull/906> `_ ) * remove check whether ' ``easybuild`` ' is being imported from dir that contains ``easybuild/__init__.py`` ( `#891 <https://github.com/easybuilders/easybuild-easyblocks/pull/891> `_ ) * fix passing compiler configure option in PDT easyblock ( `#894 <https://github.com/easybuilders/easybuild-easyblocks/pull/894> `_ ) * fix bug in Score-P easyblock w.r.t. ``--with-libbfd`` ( `#889 <https://github.com/easybuilders/easybuild-easyblocks/pull/889> `_ ) * fix extension filter for Ruby ( `#901 <https://github.com/easybuilders/easybuild-easyblocks/pull/901> `_ ) * fix ``ACTIVATION_TYPES`` list in IntelBase + minor style change ( `#913 <https://github.com/easybuilders/easybuild-easyblocks/pull/913> `_ ) * correctly define ``$MIC_LD_LIBRARY_PATH`` in imkl 11.3.x and newer ( `#915 <https://github.com/easybuilders/easybuild-easyblocks/pull/915> `_ ) * fix broken link to VSC website in license headers ( `#927 <https://github.com/easybuilders/easybuild-easyblocks/pull/927> `_ ) **easyconfigs** * added example easyconfig files for 69 new software packages: * ALPS ( `#2888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2888> `_ ), annovar ( `#3010 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3010> `_ ), BayeScEnv ( `#2765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2765> `_ ), BayesAss ( `#2870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2870> `_ ), BerkeleyGW ( `#2925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2925> `_ ), Blitz++ ( `#2784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2784> `_ , `#3004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3004> `_ ), bam-readcount ( `#2850 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2850> `_ ), Commet ( `#2938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2938> `_ ), CrossTalkZ ( `#2939 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2939> `_ ), cuDNN ( `#2882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2882> `_ ), DBus ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), DFT-D3 ( `#2107 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2107> `_ ), DIAL ( `#3056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3056> `_ ), dask ( `#2885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2885> `_ ), dbus-glib ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), FFLAS-FFPACK ( `#2793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2793> `_ ), FLAC ( `#2824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2824> `_ ), FLANN ( `#3015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3015> `_ , `#3029 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3029> `_ ), FLEUR ( `#3043 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3043> `_ ), GConf ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), GROMOS++ ( `#1297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1297> `_ ), GST-plugins-base ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), GStreamer ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), GTOOL ( `#2805 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2805> `_ ), Givaro ( `#2793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2793> `_ ), gdist ( `#2935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2935> `_ ), gromosXX ( `#1297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1297> `_ ), HISAT2 ( `#2809 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2809> `_ ), i-PI ( `#2940 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2940> `_ ), Kraken ( `#3037 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3037> `_ , `#3041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3041> `_ ), LAME ( `#2823 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2823> `_ ), LASTZ ( `#3002 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3002> `_ ), LinBox ( `#2793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2793> `_ ), Loki ( `#2839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2839> `_ ), libQGLViewer ( `#2923 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2923> `_ , `#3008 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3008> `_ ), libXxf86vm ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), MDSplus ( `#2787 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2787> `_ , `#2838 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2838> `_ , `#3027 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3027> `_ ), MRIcron ( `#2831 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2831> `_ ), Mawk ( `#2732 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2732> `_ ), minieigen ( `#2839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2839> `_ ), mpmath ( `#3058 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3058> `_ ), NBO ( `#3047 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3047> `_ , 3048), NGS ( `#2803 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2803> `_ ), NGS-Python ( `#2810 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2810> `_ ), ncbi-vdb ( `#2808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2808> `_ ), OptiX ( `#2795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2795> `_ ), PCL ( `#3024 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3024> `_ ), PEAR ( `#2731 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2731> `_ ), PLplot ( `#2990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2990> `_ ), Postgres-XL ( `#2891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2891> `_ ), PyGTS ( `#2969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2969> `_ ), RSeQC ( `#2788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2788> `_ ), Rust ( `#2920 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2920> `_ , `#2943 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2943> `_ ), rainbow ( `#2730 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2730> `_ ), SHAPEIT ( `#2806 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2806> `_ ), SIONlib ( `#2908 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2908> `_ ), Saxon-HE ( `#2773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2773> `_ ), Singularity ( `#2901 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2901> `_ ), SoX ( `#2825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2825> `_ ), Subread ( `#2790 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2790> `_ ), SuperLU ( `#2665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2665> `_ ), travis ( `#2953 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2953> `_ ), VASP ( `#2950 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2950> `_ ), Wannier90 ( `#2906 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2906> `_ , `#3042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3042> `_ ), wget ( `#3041 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3041> `_ ), wxPython ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), xf86vidmodeproto ( `#2855 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2855> `_ ), Yade ( `#2839 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2839> `_ ), Yambo ( `#2932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2932> `_ ) * add test configuration for Travis ( `#2942 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2942> `_ , `#2944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2944> `_ , `#2954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2954> `_ , `#3061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3061> `_ ) * added easyconfigs for new PGI-based toolchains * ``pomkl/2016.03`` ( `#2899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2899> `_ , `#2900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2900> `_ , `#3046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3046> `_ ), ``pomkl/2016.04`` ( `#3044 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3044> `_ ), ``CrayPGI/2016.04`` ( `#2927 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2927> `_ ) * added new easyconfigs for existing toolchains: * ``foss/2016.04`` ( `#3013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3013> `_ ), ``intel/2016.02-GCC-5.3`` ( `#2523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2523> `_ ), ``intel/2016.03-GCC-5.3`` ( `#3009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3009> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * incl. CGAL 4.8, Clang 3.8.0, icc/ifort 2016.2.181 & 2016.3.210, imkl 11.3.2.181 & 11.3.3.210, impi 5.1.3.181, LLVM 3.8.0, OpenCV 2.4.12, pandas 0.18.0, Qt 5.6.0, Scalasca 2.3, Score-P 2.0.1, SuiteSparse 4.5.2, WRF 3.8 * various other enhancements, including: * enhance ORCA easyconfig for compatibility with SLURM ( `#1819 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1819> `_ ) * enable ``-fPIC`` in GraphicsMagick easyconfig, required by Octave ( `#2764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2764> `_ ) * clean up binutils easyconfigs to use binutils easyblock ( `#3006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3006> `_ ) * add ``include/GraphicsMagick`` to ``$CPATH`` in GraphicsMagick easyconfigs ( `#3034 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3034> `_ ) * update SuiteSparse easyconfigs according to updated SuiteSparse easyblock ( `#3050 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3050> `_ ) * various bug fixes, including: * fix Perl extensions download urls ( `#2738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2738> `_ ) * add Autoconf as build dep for ``GCCcore`` ( `#2772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2772> `_ ) * fix versions of extensions in Bioconductor 3.2 bundles ( `#2769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2769> `_ ) * fix (build) deps for ``intel/2016a`` easyconfigs of cairo, libXext, libXrender ( `#2785 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2785> `_ , `#2874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2874> `_ ) * use ' ``env`` ' wherever preconfig/build/installopts is used to set environmental variables ( `#2807 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2807> `_ , `#2811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2811> `_ , `#2812 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2812> `_ ) * add zlib as explicit dep in Tk easyconfigs ( `#2815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2815> `_ ) * consistently specify to use ``-fgnu89-inline`` flag in M4 1.4.17 easyconfigs ( `#2774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2774> `_ , `#2779 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2779> `_ , `#2816 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2816> `_ ) * fix homepage and description in Pygments easyconfigs ( `#2822 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2822> `_ ) * include pkg-config as build dependencies for libXau, libXdmcp, libxcb ( `#2827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2827> `_ ) * consistently use ``XORG_*_SOURCE`` constants ( `#2829 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2829> `_ , `#2830 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2830> `_ , `#2848 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2848> `_ ) * update source URLs in ScientificPython easyconfig files ( `#2847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2847> `_ ) * add checksums in SuiteSparse easyconfigs ( `#2849 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2849> `_ ) * fix build deps for GObject-Introspection ( `#2852 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2852> `_ ) * correctly specify Perl location in git easyconfig ( `#2866 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2866> `_ ) * fix bitstring 3.1.3 download URL in Python easyconfigs, source tarball on PyPI disappeared ( `#2880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2880> `_ ) * fix Perl dependency in worker easyconfigs, it requires non-standard Perl modules ( `#2884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2884> `_ ) * add XZ as dependency in Python 3.5.1 easyconfigs, required for lzma ( `#2887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2887> `_ ) * fix download URL for packmol ( `#2902 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2902> `_ ) * drop ``usempi`` toolchain in numexpr easyconfigs, not needed ( `#2937 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2937> `_ ) * fix use of ``resolve_dependencies`` in tests according to changes in framework ( `#2952 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2952> `_ ) * add dependency extensions for MarkupSafe and jsonscheme in IPython 3.2.3 easyconfigs ( `#2967 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2967> `_ ) * add patch for matplotlib 1.5.1 to fix Tcl/Tk library paths being used ( `#2971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2971> `_ ) * add xproto build dependency for makedepend v1.0.5 ( `#2982 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2982> `_ ) * disable parallel build for Doxygen ( `#2986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2986> `_ ) * fix source URLs for ``FreezeThaw`` and ``Tie::Function`` extensions for Perl v5.22.1 ( `#2988 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2988> `_ ) * add ``sed`` command in worker easyconfig files to fix module_path in conf/worker.conf ( `#2997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2997> `_ , `#3000 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3000> `_ ) * drop toolchainopts from Eigen easyconfigs, since it is headers-only ( `#3025 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3025> `_ ) * clean up dummy bzip2 easyconfig, define buildopts rather than defining ``$CC`` and ``$CFLAGS`` via ``os.environ`` ( `#3036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3036> `_ ) * use ``%(pyshortver)s`` template rather than hardcoding 2.7 in VTK easyconfigs ( `#3052 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3052> `_ ) * correct install location of OpenCV Python bindings ( `#3054 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3054> `_ ) * include XZ as dependency for libunwind ( `#3055 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3055> `_ ) * add patch to fix broken OpenSSL tests due to expired certificates ( `#3057 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3057> `_ ) * fix broken link to VSC website in license headers ( `#3062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/3062> `_ ) .. _release_notes_eb270: EasyBuild v2.7.0 (March 20th 2016) ---------------------------------- feature + bugfix release **framework** * stabilize Cray support * enable ' ``dynamic`` ' toolchain option by default for ``Cray*`` toolchains ( `#1581 <https://github.com/easybuilders/easybuild-framework/pull/1581> `_ ) * remove FFTW from the Cray toolchains definition ( `#1585 <https://github.com/easybuilders/easybuild-framework/pull/1585> `_ ) * add external modules metadata for Cray systems ( `#1638 <https://github.com/easybuilders/easybuild-framework/pull/1638> `_ ) * fix independency of Cray toolchains w.r.t. toolchain build environment ( `#1641 <https://github.com/easybuilders/easybuild-framework/pull/1641> `_ , `#1647 <https://github.com/easybuilders/easybuild-framework/pull/1647> `_ ) * remove requirement to use ``--experimental`` for Cray toolchains ( `#1663 <https://github.com/easybuilders/easybuild-framework/pull/1663> `_ ) * enable Python optimization mode in ' ``eb`` ' ( `#1357 <https://github.com/easybuilders/easybuild-framework/pull/1357> `_ ) * improved GitHub integration * improve error handling on git commands + better logging for ``--new-pr`` / ``--update-pr`` ( `#1590 <https://github.com/easybuilders/easybuild-framework/pull/1590> `_ ) * use ``git`` rather than ``https`` in ``--new-pr`` / ``--update-pr`` ( `#1602 <https://github.com/easybuilders/easybuild-framework/pull/1602> `_ ) * add ``-u`` as shorthand for ``--upload-test-report`` ( `#1605 <https://github.com/easybuilders/easybuild-framework/pull/1605> `_ ) * fix ``--from-pr`` for PRs that include renamed/deleted files ( `#1615 <https://github.com/easybuilders/easybuild-framework/pull/1615> `_ ) * add support for ``--install-github-token`` and ``--check-github`` ( `#1616 <https://github.com/easybuilders/easybuild-framework/pull/1616> `_ ) * fix ``fetch_easyconfigs_from_pr`` w.r.t. duplicate files in PRs ( `#1628 <https://github.com/easybuilders/easybuild-framework/pull/1628> `_ ) * various other enhancements, including: * add support for ``--search-filename`` and ``--terse`` ( `#1577 <https://github.com/easybuilders/easybuild-framework/pull/1577> `_ ) * support complete bash completion ( `#1580 <https://github.com/easybuilders/easybuild-framework/pull/1580> `_ ) * add support for ``%(*ver)s`` and ``%(*shortver)s`` templates ( `#1595 <https://github.com/easybuilders/easybuild-framework/pull/1595> `_ , `#1604 <https://github.com/easybuilders/easybuild-framework/pull/1604> `_ ) * incl. ``%(javaver)s`` , ``%(javashortver)s`` , ``%(perlver)s`` , ``%(perlshortver)s`` , ``%(pyver)s`` , ``%(pyshortver)s`` , ``%(rver)s`` , ``%(rshortver)s`` * define ``HOME`` constant that can be used in easyconfig files ( `#1607 <https://github.com/easybuilders/easybuild-framework/pull/1607> `_ ) * implement support for generating ' ``swap`` ' statements in module files ( `#1609 <https://github.com/easybuilders/easybuild-framework/pull/1609> `_ ) * add support for ``--show-config`` ( `#1611 <https://github.com/easybuilders/easybuild-framework/pull/1611> `_ , `#1620 <https://github.com/easybuilders/easybuild-framework/pull/1620> `_ ) * simplified support for ``--minimal-toolchains`` ( `#1614 <https://github.com/easybuilders/easybuild-framework/pull/1614> `_ , `#1619 <https://github.com/easybuilders/easybuild-framework/pull/1619> `_ , `#1622 <https://github.com/easybuilders/easybuild-framework/pull/1622> `_ , `#1625 <https://github.com/easybuilders/easybuild-framework/pull/1625> `_ , `#1646 <https://github.com/easybuilders/easybuild-framework/pull/1646> `_ ) * add support for ``--dump-env-script`` ( `#1624 <https://github.com/easybuilders/easybuild-framework/pull/1624> `_ ) * enhance ModulesTool.exist to also recognize partial module names ( `#1630 <https://github.com/easybuilders/easybuild-framework/pull/1630> `_ ) * improve error message for toolchain definition errors ( `#1631 <https://github.com/easybuilders/easybuild-framework/pull/1631> `_ ) * make default is_short_modname_for check less strict to support versionless external modules as deps ( `#1632 <https://github.com/easybuilders/easybuild-framework/pull/1632> `_ ) * mention hostname in comment made by ``--upload-test-report`` ( `#1635 <https://github.com/easybuilders/easybuild-framework/pull/1635> `_ ) * support providing additional relative path for prefix in external module metadata ( `#1637 <https://github.com/easybuilders/easybuild-framework/pull/1637> `_ ) * add ``ThematicModuleNamingScheme`` ( `#1645 <https://github.com/easybuilders/easybuild-framework/pull/1645> `_ ) * enhance logging format: remove logger name, mention location instead ( `#1649 <https://github.com/easybuilders/easybuild-framework/pull/1649> `_ , `#1654 <https://github.com/easybuilders/easybuild-framework/pull/1654> `_ ) * update kernel versions for SLES12 ( `#1659 <https://github.com/easybuilders/easybuild-framework/pull/1659> `_ ) * raise ``EasyBuildError`` rather than ``ImportError`` in ``only_if_module_is_available`` decorator ( `#1662 <https://github.com/easybuilders/easybuild-framework/pull/1662> `_ ) * various bug fixes, including: * fix Lmod spider output in generated modules ( `#1583 <https://github.com/easybuilders/easybuild-framework/pull/1583> `_ ) * correctly define ' ``easybuild`` ' namespaces ( `#1593 <https://github.com/easybuilders/easybuild-framework/pull/1593> `_ , `#1666 <https://github.com/easybuilders/easybuild-framework/pull/1666> `_ , `#1680 <https://github.com/easybuilders/easybuild-framework/pull/1680> `_ ) * this change requires that the ``setuptools`` Python package is available (at runtime) * using custom easyblocks by adding them in the Python search path ( ``$PYTHONPATH`` ) may require adjustments, i.e. also using ``pkg_resources.declare_namespace`` in the ``__init__.py`` files; *we highly recommend to use* ``--include-easyblocks`` *instead* , see http://easybuild.readthedocs.org/en/latest/Including_additional_Python_modules.html * note: this has the side-effect of not being able anymore to reliably use ' ``eb`` ' in the parent directory of the easybuild-framework repository ( `#1667 <https://github.com/easybuilders/easybuild-framework/pull/1667> `_ ) * fix template for ``savannah.gnu.org`` source URL ( `#1601 <https://github.com/easybuilders/easybuild-framework/pull/1601> `_ ) * stop running ' ``module purge`` ', only restore environment ( `#1608 <https://github.com/easybuilders/easybuild-framework/pull/1608> `_ ) * fix license headers: Hercules foundation is now FWO ( `#1629 <https://github.com/easybuilders/easybuild-framework/pull/1629> `_ ) * avoid that ``fancylogger`` tries to import ``mpi4py`` to determine MPI rank ( `#1648 <https://github.com/easybuilders/easybuild-framework/pull/1648> `_ ) * fix error in tests when ' ``file`` ' backend is not available in Python keyring ( `#1650 <https://github.com/easybuilders/easybuild-framework/pull/1650> `_ ) * update develop install script ( `#1651 <https://github.com/easybuilders/easybuild-framework/pull/1651> `_ ) * handle allowed system deps during ``prepare_step`` rather than during parsing of easyconfig ( `#1652 <https://github.com/easybuilders/easybuild-framework/pull/1652> `_ ) * add function to find FlexLM licenses: ``find_flexlm_license`` ( `#1633 <https://github.com/easybuilders/easybuild-framework/pull/1633> `_ , `#1653 <https://github.com/easybuilders/easybuild-framework/pull/1653> `_ ) * fix availability check for external modules with partial module name ( `#1634 <https://github.com/easybuilders/easybuild-framework/pull/1634> `_ , `#1643 <https://github.com/easybuilders/easybuild-framework/pull/1643> `_ ) * fix bootstrap script to ensure ``setuptools`` is also installed ( `#1655 <https://github.com/easybuilders/easybuild-framework/pull/1655> `_ ) * fix issue in bootstrap script with ``vsc-base`` being picked up from the OS ( `#1656 <https://github.com/easybuilders/easybuild-framework/pull/1656> `_ ) * fix bootstrap script for environment where ' ``python`` ' is Python 3.x ( `#1660 <https://github.com/easybuilders/easybuild-framework/pull/1660> `_ ) * remove ``--experimental`` for tests related to ``--package`` ( `#1665 <https://github.com/easybuilders/easybuild-framework/pull/1665> `_ ) * ensure path to setuptools is included in ``$PYTHONPATH`` being used to test scripts ( `#1671 <https://github.com/easybuilders/easybuild-framework/pull/1671> `_ ) * sanitize environment before initializing easyblocks ( `#1676 <https://github.com/easybuilders/easybuild-framework/pull/1676> `_ ) * remove ``reload`` statements in ``include.py`` , since they are not required and break ``--include-toolchains`` ( `#1679 <https://github.com/easybuilders/easybuild-framework/pull/1679> `_ ) **easyblocks** * new easyblocks for 6 software packages that require customized support: * ADF ( `#826 <https://github.com/easybuilders/easybuild-easyblocks/pull/826> `_ ), MPICH ( `#844 <https://github.com/easybuilders/easybuild-easyblocks/pull/844> `_ , `#852 <https://github.com/easybuilders/easybuild-easyblocks/pull/852> `_ , `#868 <https://github.com/easybuilders/easybuild-easyblocks/pull/868> `_ ), mutil ( `#859 <https://github.com/easybuilders/easybuild-easyblocks/pull/859> `_ ), pplacer ( `#835 <https://github.com/easybuilders/easybuild-easyblocks/pull/835> `_ ), psmpi ( `#852 <https://github.com/easybuilders/easybuild-easyblocks/pull/852> `_ ), SNPhylo ( `#865 <https://github.com/easybuilders/easybuild-easyblocks/pull/865> `_ ) * various other enhancements, including: * implement support for ' ``use_pip`` ' in PythonPackage easyblock ( `#719 <https://github.com/easybuilders/easybuild-easyblocks/pull/719> `_ , `#831 <https://github.com/easybuilders/easybuild-easyblocks/pull/831> `_ ) * add support in CUDA easyblock to install wrappers for host compilers ( `#758 <https://github.com/easybuilders/easybuild-easyblocks/pull/758> `_ ) * update sanity check for picard version 1.124 and above ( `#796 <https://github.com/easybuilders/easybuild-easyblocks/pull/796> `_ ) * use ' ``module swap`` ' for all components in ``CrayToolchain`` ( `#823 <https://github.com/easybuilders/easybuild-easyblocks/pull/823> `_ ) * update PSI4 easyblock to cope with changed name of PSI4 data dir ( `#824 <https://github.com/easybuilders/easybuild-easyblocks/pull/824> `_ ) * use ``find_flexlm_license`` function and avoid defining ``$CPATH`` in PGI easyblock ( `#837 <https://github.com/easybuilders/easybuild-easyblocks/pull/837> `_ ) * use ``find_flexlm_license`` function in ``IntelBase`` generic easyblock ( `#839 <https://github.com/easybuilders/easybuild-easyblocks/pull/839> `_ ) * add unit test to check module file generated by ``PythonPackage`` easyblock ( `#841 <https://github.com/easybuilders/easybuild-easyblocks/pull/841> `_ ) * rework MVAPICH2 easyblock on top of new MPICH easyblock ( `#844 <https://github.com/easybuilders/easybuild-easyblocks/pull/844> `_ ) * add CUDA support in CP2K easyblock ( `#850 <https://github.com/easybuilders/easybuild-easyblocks/pull/850> `_ ) * also define ``$LD`` in ``buildopts`` for GATE ( `#855 <https://github.com/easybuilders/easybuild-easyblocks/pull/855> `_ ) * use ``find_flexlm_license`` function in TotalView easyblock ( `#839 <https://github.com/easybuilders/easybuild-easyblocks/pull/839> `_ ) * enhance ``MakeCp`` easyblock to also support renaming of files while copying them ( `#859 <https://github.com/easybuilders/easybuild-easyblocks/pull/859> `_ ) * hunt for usable ' ``python`` ' command in ``PythonPackage`` easyblock when system Python is used ( `#861 <https://github.com/easybuilders/easybuild-easyblocks/pull/861> `_ ) * add sanity check in ``easybuild/__init__.py`` w.r.t. current working dir ( `#869 <https://github.com/easybuilders/easybuild-easyblocks/pull/869> `_ ) * change suffix of original file to ``.easybuild`` when using ``fileinput`` in impi easyblock ( `#870 <https://github.com/easybuilders/easybuild-easyblocks/pull/870> `_ ) * various bug fixes, including: * make sure Python unicode settings match that of the system Python ( `#817 <https://github.com/easybuilders/easybuild-easyblocks/pull/817> `_ ) * remove FFTW related statements in HPL easyblock, since HPL doesn't require FFTW at all ( `#822 <https://github.com/easybuilders/easybuild-easyblocks/pull/822> `_ ) * use ``pkg_resources.declare_namespace`` rather than ``pkgutil.extend_path`` to declare ' ``easybuild`` ' namespaces ( `#827 <https://github.com/easybuilders/easybuild-easyblocks/pull/827> `_ ) * fix license headers: Hercules foundation is now FWO ( `#836 <https://github.com/easybuilders/easybuild-easyblocks/pull/836> `_ ) * fix check for non-empty lib dirs in ``PythonPackage`` easyblock ( `#840 <https://github.com/easybuilders/easybuild-easyblocks/pull/840> `_ ) * consider all Python lib dirs in sanity check for libxml2 ( `#842 <https://github.com/easybuilders/easybuild-easyblocks/pull/842> `_ ) * correctly handle deprecated configure options ( ``--with-hwloc`` / ``--enable-mpe`` ) in MVAPICH2 easyblock ( `#853 <https://github.com/easybuilders/easybuild-easyblocks/pull/853> `_ ) * use correct configure option for checkpoint/restart in MVAPICH2 easyblock ( `#854 <https://github.com/easybuilders/easybuild-easyblocks/pull/854> `_ ) * ensure list of Python lib dirs always has a ' ``lib/...`` ' entry ( `#858 <https://github.com/easybuilders/easybuild-easyblocks/pull/858> `_ ) * check whether ``rpm`` / ``rpmrebuild`` commands are available using ' ``which`` ', rather than checking for OS deps ( `#864 <https://github.com/easybuilders/easybuild-easyblocks/pull/864> `_ ) * fix ``test_step`` in UFC easyblock ( `#872 <https://github.com/easybuilders/easybuild-easyblocks/pull/872> `_ ) **easyconfigs** * added example easyconfig files for 63 new software packages: * ATSAS ( `#616 <https://github.com/easybuilders/easybuild-easyconfigs/pull/616> `_ , `#2587 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2587> `_ ), astropy ( `#2724 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2724> `_ , `#2727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2727> `_ ), attr ( `#2706 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2706> `_ ), BamUtil ( `#2654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2654> `_ ), BBMap ( `#2322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2322> `_ ), BH ( `#2508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2508> `_ ), CheMPS2 ( `#2445 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2445> `_ ), CosmoloPy ( `#2723 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2723> `_ , `#2727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2727> `_ ), csvkit ( `#2639 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2639> `_ ), Firefox ( `#2648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2648> `_ ), FreeXL ( `#2422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2422> `_ ), GL2PS ( `#2667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2667> `_ ), Glade ( `#2631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2631> `_ ), htop ( `#2538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2538> `_ ), IGV ( `#2019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2019> `_ ), IGVTools ( `#2019 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2019> `_ ), ImageMagick ( `#2438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2438> `_ ), jModelTest ( `#2529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2529> `_ ), KEALib ( `#2420 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2420> `_ ), libcerf ( `#2656 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2656> `_ ), libgcrypt ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), libglade ( `#2631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2631> `_ ), libgpg-error ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), libspatialite ( `#2431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2431> `_ ), LittleCMS ( `#2438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2438> `_ ), MAST ( `#2542 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2542> `_ ), MLC ( `#2577 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2577> `_ ), MPJ-Express ( `#2529 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2529> `_ ), mutil ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), neon ( `#758 <https://github.com/easybuilders/easybuild-easyconfigs/pull/758> `_ ), NextClip ( `#2544 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2544> `_ ), npstat ( `#2686 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2686> `_ , `#2703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2703> `_ ), Octopus ( `#2643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2643> `_ ), QuickFF ( `#2721 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2721> `_ ), p4vasp ( `#2328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2328> `_ ), PCMSolver ( `#2445 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2445> `_ ), PFFT ( `#2643 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2643> `_ ), PHYLIP ( `#2694 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2694> `_ ), pkgconfig ( `#2475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2475> `_ , `#2476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2476> `_ ), Platypus ( `#2618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2618> `_ ), pplacer ( `#1056 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1056> `_ ), PRINSEQ ( `#2437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2437> `_ , `#2444 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2444> `_ , `#2585 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2585> `_ ), PyFFmpeg ( `#2501 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2501> `_ , `#2519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2519> `_ ), PyGObject ( `#2443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2443> `_ ), PyGTK ( `#2443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2443> `_ ), PyOpenGL ( `#2628 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2628> `_ ), pyringe ( `#2533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2533> `_ ), qrupdate ( `#2675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2675> `_ ), rgeos ( `#2635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2635> `_ ), rpmrebuild ( `#2402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2402> `_ ), shift ( `#2201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2201> `_ ), SNAPE-pooled ( `#2688 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2688> `_ ), SNPhylo ( `#2701 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2701> `_ ), sratoolkit ( `#2715 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2715> `_ ), STAR-Fusion ( `#2463 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2463> `_ ), statsmodels ( `#2719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2719> `_ ), StringTie ( `#2527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2527> `_ ), synchronicity ( `#2508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2508> `_ ), testpath ( `#2461 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2461> `_ ), USEARCH ( `#2537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2537> `_ ), VarScan ( `#2464 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2464> `_ ), vsc-install ( `#2165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2165> `_ ), Whoosh ( `#2725 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2725> `_ ), xprop ( `#2645 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2645> `_ ) * added new easyconfigs for existing toolchains: * ``intel/2016.02-GCC-4.9`` ( `#2620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2620> `_ ), ``gmpolf/2016a`` & ``gmvolf/2016a`` ( `#2589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2589> `_ ) * stable Cray-specific easyconfigs * delete deprecated Cray toolchains and easyconfig files ( `#2400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2400> `_ ) * don't hardcode ``PrgEnv`` version, remove ``craype`` and ``fftw`` components in Cray toolchains ( `#2554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2554> `_ ) * remove ``-XC`` versionsuffix for stable definitions for ``Cray*`` toolchains ( `#2714 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2714> `_ ) * support for various software packages with ``CrayGNU`` and ``CrayIntel`` toolchains: CP2K, GROMACS, WRF * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including BWA 0.7.13, CMake 3.4.3, GATE 7.2, GROMACS 5.1.2, Mesa 11.1.2, netCDF 4.4.0, Perl 5.22.1, Python 3.5.1, R 3.2.3, R-bundle-Bioconductor 3.2, scipy 0.17.0, SuiteSparse 4.5.1 * various other enhancements, including: * copy ``contrib`` dir in Velvet easyconfigs so scripts are also available ( `#2456 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2456> `_ ) * redefine matplotlib 1.5.1 easyconfig as a bundle, also include ``cycler`` extension (dep for matplotlib) ( `#2470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2470> `_ ) * add bitstring extension to Python 2.7.11 easyconfigs ( `#2471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2471> `_ ) * enable building of MetaVelvet in Velvet 1.2.10 easyconfigs ( `#2473 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2473> `_ ) * add custom sanity check for libjpeg-turbo ( `#2480 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2480> `_ ) * add Velvet easyconfigs that include BioPerl dependency, so VelvetOptimizer can use it ( `#2495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2495> `_ , `#2729 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2729> `_ , `#2733 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2733> `_ ) * add source URL in RAxML 7.2.6 easyconfigs ( `#2536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2536> `_ ) * update MPICH easyconfigs to use new MPICH easyblock ( `#2589 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2589> `_ ) * free libX11 & co from unneeded Python dependency/versionsuffix ( `#2549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2549> `_ , `#2563 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2563> `_ , `#2605 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2605> `_ , `#2664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2664> `_ ) * add ' ``--enable-utf --enable-unicode-properties`` ' configure options in PCRE easyconfigs ( `#2561 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2561> `_ ) * required for latest R versions * add HCsnip, metagenomeSeq in Bioconductor 3.1 bundles ( `#2553 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2553> `_ , `#2578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2578> `_ ) * add additional extensions in R 3.2.x easyconfigs that are required for extra Bioconductor extensions ( `#2547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2547> `_ , `#2556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2556> `_ ) * update psmpi easyconfig files to use the new psmpi easyblock ( `#2619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2619> `_ ) * add easyconfig for Python 2.7.11 on top of X11-enabled Tk ( `#2614 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2614> `_ , `#2621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2621> `_ ) * add virtualenv as extension in Python 2.7.11 easyconfigs ( `#2660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2660> `_ ) * various bug fixes, including: * fix software name for GTK+ (was 'gtk+'), PyCairo (was 'pycairo') and Gdk-Pixbuf (was 'gdk-pixbuf') ( `#2468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2468> `_ ) * don't hardcode ``CC`` / ``CXX`` in OpenMPI easyconfigs ( `#2472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2472> `_ ) * remove Google Code source URL for mpi4py ( `#2474 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2474> `_ ) * rename ffmpeg to FFmpeg ( `#2425 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2425> `_ , `#2481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2481> `_ ) * use available easyblock for flex ( `#2486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2486> `_ ) * fix determining list of easyconfigs in unit test suite, don't assume locations are correct ( `#2530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2530> `_ ) * fix specifying DB dependency in DB_File easyconfigs ( `#2539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2539> `_ ) * remove hard-coded ``-xSSE4.2`` for numpy/scipy with Intel compilers ( `#2546 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2546> `_ ) * fix license headers: Hercules foundation is now FWO ( `#2550 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2550> `_ ) * add ``--with-zlib`` configure argument in libxml easyconfigs ( `#2555 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2555> `_ ) * don't hardcode ``optarch=True`` in xextproto/xtrans easyconfigs ( `#2601 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2601> `_ ) * change toolchain version to '' in easyconfigs that use ``dummy`` toolchain and include dependencies ( `#2612 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2612> `_ ) * GLib doesn't require libxml2 with Python bindings ( `#2632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2632> `_ ) * add patch file to imkl 10.2.6.038 32-bit easyconfig to fix installer not being able to deal with ' ``--`` ' in build path ( `#2634 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2634> `_ ) * add missing 'pkgconfig' dependency for h5py ( `#2476 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2476> `_ , `#2650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2650> `_ ) * correct software name in FastQC easyconfigs (was 'fastqc'), use ' ``dummy`` ' toolchain for all FastQC version ( `#2657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2657> `_ , `#2666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2666> `_ ) * add missing libxml2 dependencies in GLib easyconfigs ( `#2658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2658> `_ ) * fix Xerces-C++ download location ( `#2668 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2668> `_ ) * enable ``XML::Bare`` extension in all Perl easyconfigs ( `#2672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2672> `_ ) * update dead link for SuiteSparse ( `#2679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2679> `_ ) * remove custom ``exts_filter`` in easyconfigs used ``PythonPackage`` easyblock ( `#2683 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2683> `_ , `#2685 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2685> `_ ) * add M4 as build dep for binutils & flex ( `#2681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2681> `_ ) * add missing dependencies in Python 3.5.x easyconfigs: SQLite, Tk, GMP ( `#2704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2704> `_ ) * fix (OS) deps, add checksums, remove parameter definition with default values in MVAPICH2 easyconfigs ( `#2707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2707> `_ ) * style cleanup in various easyconfigs ( `#2378 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2378> `_ , `#2387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2387> `_ , `#2395 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2395> `_ , `#2396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2396> `_ , `#2488 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2488> `_ - `#2493 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2493> `_ , `#2496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2496> `_ - `#2500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2500> `_ , `#2502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2502> `_ - `#2504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2504> `_ , `#2602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2602> `_ ) * working towards automated style review of pull requests .. _release_notes_eb260: EasyBuild v2.6.0 (January 26th 2016) ------------------------------------ feature + bugfix release **framework** * add (experimental) support for opening/updating (easyconfigs) pull requests ( ``--new-pr`` , ``--update-pr`` ) ( `#1528 <https://github.com/easybuilders/easybuild-framework/pull/1528> `_ ) * sanitize environment before each installation by undefining ``$PYTHON*`` ( `#1569 <https://github.com/easybuilders/easybuild-framework/pull/1569> `_ , `#1572 <https://github.com/easybuilders/easybuild-framework/pull/1572> `_ ) * various other enhancements, including: * allow user-local modules with hierarchical naming schemes ( ``--subdir-user-modules`` ) ( `#1472 <https://github.com/easybuilders/easybuild-framework/pull/1472> `_ ) * enhance ``--extended-dry-run`` output to include paths for requirements in ``make_module_req`` ( `#1520 <https://github.com/easybuilders/easybuild-framework/pull/1520> `_ ) * rewrite read_file to use ' ``with`` ' ( `#1534 <https://github.com/easybuilders/easybuild-framework/pull/1534> `_ ) * add support for ``eb --last-log`` ( `#1541 <https://github.com/easybuilders/easybuild-framework/pull/1541> `_ ) * support using fixed install dir scheme ( ``--fixed-installdir-naming-scheme`` ) ( `#1546 <https://github.com/easybuilders/easybuild-framework/pull/1546> `_ ) * add edge attributes for build dependencies in ``--dep-graph`` output ( `#1548 <https://github.com/easybuilders/easybuild-framework/pull/1548> `_ ) * check whether dependencies marked as external module are hidden ( `#1552 <https://github.com/easybuilders/easybuild-framework/pull/1552> `_ ) * implement support for ``--modules-header`` ( `#1558 <https://github.com/easybuilders/easybuild-framework/pull/1558> `_ ) * add support to specify ' ``else`` ' body for conditional statements in modules ( `#1559 <https://github.com/easybuilders/easybuild-framework/pull/1559> `_ ) * add extra test for ``--include-easyblocks`` for generic easyblocks ( `#1562 <https://github.com/easybuilders/easybuild-framework/pull/1562> `_ ) * allow user to define the default compiler optimization level ( ``--default-opt-level`` ) ( `#1565 <https://github.com/easybuilders/easybuild-framework/pull/1565> `_ ) * make ``toolchain.get_variable`` more robust w.r.t. dummy toolchain ( `#1566 <https://github.com/easybuilders/easybuild-framework/pull/1566> `_ ) * various bug fixes, including: * fix missing ' ``yaml`` ' module check in tests ( `#1525 <https://github.com/easybuilders/easybuild-framework/pull/1525> `_ ) * fix 'develop' install script ( `#1529 <https://github.com/easybuilders/easybuild-framework/pull/1529> `_ ) * correctly quote FPM option values in packagin support ( `#1530 <https://github.com/easybuilders/easybuild-framework/pull/1530> `_ ) * correctly handle ' ``.`` ' in software name w.r.t. ``$EB*`` environment variables ( `#1538 <https://github.com/easybuilders/easybuild-framework/pull/1538> `_ ) * exclude logs and test reports from packages ( `#1544 <https://github.com/easybuilders/easybuild-framework/pull/1544> `_ ) * also pass down ``--job-cores`` for ``pbs_python`` job backend ( `#1547 <https://github.com/easybuilders/easybuild-framework/pull/1547> `_ ) * skip dependencies marked as external modules when packaging ( `#1550 <https://github.com/easybuilders/easybuild-framework/pull/1550> `_ ) * fix syntax for ``set_alias`` statement in Lua syntax ( `#1554 <https://github.com/easybuilders/easybuild-framework/pull/1554> `_ ) * handle the case of all 'offline' nodes correctly for ``--job`` ( `#1560 <https://github.com/easybuilders/easybuild-framework/pull/1560> `_ ) * fix ``test_modules_tool_stateless`` unit test for stateless ModulesTool with Lmod as modules tool ( `#1570 <https://github.com/easybuilders/easybuild-framework/pull/1570> `_ ) **easyblocks** * add generic easyblock for Cray toolchains ( `#766 <https://github.com/easybuilders/easybuild-easyblocks/pull/766> `_ ) * new easyblocks for 2 software packages that require customized support: * EggLib ( `#811 <https://github.com/easybuilders/easybuild-easyblocks/pull/811> `_ ), PGI ( `#658 <https://github.com/easybuilders/easybuild-easyblocks/pull/658> `_ ) * various other enhancements, including: * update BamTools easyblock for versions 2.3.x and newer: some shared libraries are now static) ( `#785 <https://github.com/easybuilders/easybuild-easyblocks/pull/785> `_ ) * don't hardcode ``.so`` , use ``get_shared_lib_ext`` instead ( `#789 <https://github.com/easybuilders/easybuild-easyblocks/pull/789> `_ , `#790 <https://github.com/easybuilders/easybuild-easyblocks/pull/790> `_ , `#791 <https://github.com/easybuilders/easybuild-easyblocks/pull/791> `_ , `#793 <https://github.com/easybuilders/easybuild-easyblocks/pull/793> `_ , `#794 <https://github.com/easybuilders/easybuild-easyblocks/pull/794> `_ , `#803 <https://github.com/easybuilders/easybuild-easyblocks/pull/803> `_ , `#815 <https://github.com/easybuilders/easybuild-easyblocks/pull/815> `_ ) * enhance CPLEX easyblock by adding more subdirs to ``$PATH`` , define ``$LD_LIBRARY`` and ``$CPLEXDIR`` ( `#797 <https://github.com/easybuilders/easybuild-easyblocks/pull/797> `_ ) * make sanity check for netcdf4-python work with both egg and non-egg installs ( `#799 <https://github.com/easybuilders/easybuild-easyblocks/pull/799> `_ ) * update sanity check in PETSc/SLEPc easyblocks for v3.6.x ( `#800 <https://github.com/easybuilders/easybuild-easyblocks/pull/800> `_ ) * update Trinity easyblock for 2.x versions ( `#802 <https://github.com/easybuilders/easybuild-easyblocks/pull/802> `_ ) * update DOLFIN easyblock for v1.6.0 ( `#804 <https://github.com/easybuilders/easybuild-easyblocks/pull/804> `_ ) * check for ``libkokkoscore.a`` rather than ``libkokkos.a`` for Trilinos 12.x ( `#805 <https://github.com/easybuilders/easybuild-easyblocks/pull/805> `_ ) * add an option to skip the sanitizer tests of Clang ( `#806 <https://github.com/easybuilders/easybuild-easyblocks/pull/806> `_ ) * update Molpro easyblock to support binary installs and 2015 version ( `#807 <https://github.com/easybuilders/easybuild-easyblocks/pull/807> `_ ) * make ``ConfigureMake`` more robust w.r.t. custom easyconfig parameters ( `#810 <https://github.com/easybuilders/easybuild-easyblocks/pull/810> `_ ) * various bug fixes, including: * add back support for Eigen 2.x in Eigen easyblock ( `#798 <https://github.com/easybuilders/easybuild-easyblocks/pull/798> `_ ) * fix for vsc-base being picked up from OS in EasyBuildMeta easyblock ( `#813 <https://github.com/easybuilders/easybuild-easyblocks/pull/813> `_ ) * remove ``setuptools.pth`` if it includes absolute paths after installing EasyBuild ( `#813 <https://github.com/easybuilders/easybuild-easyblocks/pull/813> `_ ) **easyconfigs** * add easyconfigs for ``foss/2016a`` and ``intel/2016`` common toolchains ( `#2310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2310> `_ , `#2311 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2311> `_ , `#2339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2339> `_ , `#2363 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2363> `_ ) * incl. easyconfigs for Boost, CMake, Python, Perl using these toolchains * added example easyconfig files for 21 new software packages: * BLASR ( `#922 <https://github.com/easybuilders/easybuild-easyconfigs/pull/922> `_ ), BioKanga ( `#2247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2247> `_ ), BoltzTraP ( `#2365 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2365> `_ ), basemap ( `#2221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2221> `_ ), CppUnit ( `#2271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2271> `_ ), EggLib ( `#2335 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2335> `_ ), FLASH ( `#2281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2281> `_ ), GLM ( `#2288 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2288> `_ ), hub ( `#2249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2249> `_ ), MACS2 ( `#1983 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1983> `_ ), MotEvo ( `#843 <https://github.com/easybuilders/easybuild-easyconfigs/pull/843> `_ ), numba ( `#2243 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2243> `_ ), PGI ( `#1833 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1833> `_ , `#2367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2367> `_ ), PLY ( `#2305 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2305> `_ ), PaStiX ( `#2319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2319> `_ , `#2326 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2326> `_ ), patchelf ( `#2327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2327> `_ ), pip ( `#2284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2284> `_ ), RSEM ( `#2316 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2316> `_ ), RcppArmadillo ( `#2289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2289> `_ ), SCDE ( `#2289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2289> `_ ), slepc4py ( `#2318 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2318> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including BamTools 2.4.0, Boost 1.60.0, Clang 3.7.1, DOLFIN/FFC/FIAT/Instant/UFL 1.6.0, GATE 7.0, GCC 5.3.0, LLVM 3.7.1, pandas 0.17.1, PETSc 3.6.3, SAMtools 1.3, scipy 0.16.1, SLEPc 3.6.2, Trilinos 12.4.2, Trinity 2.1.1, VTK 6.3.0 * various other enhancements, including: * added new ``Cray*`` toolchain versions with pinned dependency versions ( `#2222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2222> `_ ) * don't hardcode ``.so`` , use ``SHLIB_EXT`` constant instead ( `#2245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2245> `_ ) * add custom sanity check in GEOS easyconfigs ( `#2285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2285> `_ ) * various bug fixes, including: * add Autotools (M4) as a build dependency in GMP v6.x easyconfigs ( `#2096 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2096> `_ ) * remove argparse from list of extensions in Python 3.2+ easyconfigs, since it became part of stdlib ( `#2323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2323> `_ ) * various style fixes, including: * get rid of tabs ( `#2302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2302> `_ ) * remove trailing whitespace ( `#2341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2341> `_ ) .. _release_notes_eb250: EasyBuild v2.5.0 (December 17th 2015) ------------------------------------- feature + bugfix release **framework** * add support for IBM XL compilers on Power7 and PowerPC (BlueGene) ( `#1470 <https://github.com/easybuilders/easybuild-framework/pull/1470> `_ ) * add support for generic compilation using ``--optarch=GENERIC`` ( `#1471 <https://github.com/easybuilders/easybuild-framework/pull/1471> `_ ) * see also :ref: `controlling_compiler_optimization_flags` * update experimental support for ``.yeb`` easyconfigs ( `#1515 <https://github.com/easybuilders/easybuild-framework/pull/1515> `_ ) * support clean way to specify toolchain + dependencies in ``.yeb`` easyconfigs * various other enhancements, including: * add support for ' ``whatis`` ' easyconfig parameter ( `#1271 <https://github.com/easybuilders/easybuild-framework/pull/1271> `_ ) * add support for SLES 12 and kernel 3.12.x ( `#1412 <https://github.com/easybuilders/easybuild-framework/pull/1412> `_ ) * add GCCcore toolchain definition ( `#1451 <https://github.com/easybuilders/easybuild-framework/pull/1451> `_ ) * use ' ``diff --git`` ' lines to determine patched files in pull request with ``--from-pr`` ( `#1460 <https://github.com/easybuilders/easybuild-framework/pull/1460> `_ ) * add proper option parser to bootstrap script ( `#1468 <https://github.com/easybuilders/easybuild-framework/pull/1468> `_ ) * add ``get_gcc_version()`` function in systemtools module ( `#1496 <https://github.com/easybuilders/easybuild-framework/pull/1496> `_ ) * don't load fake module in sanity_check_step during a dry run ( `#1499 <https://github.com/easybuilders/easybuild-framework/pull/1499> `_ ) * allow string values to be passed in ``make_module_req`` by hoisting them into a list ( `#1502 <https://github.com/easybuilders/easybuild-framework/pull/1502> `_ ) * add support for listing build dependencies as hidden dependencies ( `#1503 <https://github.com/easybuilders/easybuild-framework/pull/1503> `_ ) * also consider ``lib32/pkgconfig`` and ``lib64/pkgconfig`` for ``$PKG_CONFIG_PATH`` ( `#1505 <https://github.com/easybuilders/easybuild-framework/pull/1505> `_ ) * add support to ``make_module_dep`` to specify module to unload before loading a dependency module ( `#1506 <https://github.com/easybuilders/easybuild-framework/pull/1506> `_ ) * add support to ``make_module_extra`` to specify alternative root/version for ``$EBROOT`` / ``$EBVERSION`` ( `#1508 <https://github.com/easybuilders/easybuild-framework/pull/1508> `_ ) * packaging support is no longer considered experimental ( `#1510 <https://github.com/easybuilders/easybuild-framework/pull/1510> `_ ) * various bug fixes, including: * also consider ``lib64`` in sanity check performed during EasyBuild bootstrap ( `#1464 <https://github.com/easybuilders/easybuild-framework/pull/1464> `_ ) * also add description/homepage to packages created with FPM ( `#1469 <https://github.com/easybuilders/easybuild-framework/pull/1469> `_ ) * fix develop setup script to install EasyBuild-develop module in subdirectory ( `#1480 <https://github.com/easybuilders/easybuild-framework/pull/1480> `_ ) * don't create a whole set of temporary ' ``minimal-easyconfigs`` ' subdirs with ``--minimal-toolchains`` ( `#1484 <https://github.com/easybuilders/easybuild-framework/pull/1484> `_ ) * only keep polling if exit code is ``None`` in ``run_cmd_qa`` , to correctly deal with negative exit codes ( `#1486 <https://github.com/easybuilders/easybuild-framework/pull/1486> `_ ) * fix bootstrap script for missing sys_platform by using newer distribute 0.6.49 in stage 0 ( `#1490 <https://github.com/easybuilders/easybuild-framework/pull/1490> `_ ) * make sure that extra custom easyconfig parameters are known for extensions ( `#1498 <https://github.com/easybuilders/easybuild-framework/pull/1498> `_ ) * add missing import for ``EasyBuildError`` in ``easybuild/toolchains/linalg/libsci.py`` ( `#1512 <https://github.com/easybuilders/easybuild-framework/pull/1512> `_ ) * isolate tests from possible system-wide configuration files ( `#1513 <https://github.com/easybuilders/easybuild-framework/pull/1513> `_ ) * only use ``glob`` in ``make_module_req`` on non-empty strings ( `#1519 <https://github.com/easybuilders/easybuild-framework/pull/1519> `_ ) * this fixes the problem where ``$CUDA_HOME`` and ``$CUDA_PATH`` are not defined in module files for CUDA **easyblocks** * update easyblocks for Intel tools to support 2016 versions ( `#691 <https://github.com/easybuilders/easybuild-easyblocks/pull/691> `_ , `#745 <https://github.com/easybuilders/easybuild-easyblocks/pull/745> `_ , `#756 <https://github.com/easybuilders/easybuild-easyblocks/pull/756> `_ , `#777 <https://github.com/easybuilders/easybuild-easyblocks/pull/777> `_ ) * IntelBase easyblock has been enhanced to support specifying which components to install * new easyblocks for 3 software packages that require customized support: * Intel Advisor ( `#767 <https://github.com/easybuilders/easybuild-easyblocks/pull/767> `_ ), DIRAC ( `#778 <https://github.com/easybuilders/easybuild-easyblocks/pull/778> `_ ), MRtrix ( `#772 <https://github.com/easybuilders/easybuild-easyblocks/pull/772> `_ ) * various other enhancements, including: * update numpy and SuiteSparse easyblock to use scikit-umfpack ( `#718 <https://github.com/easybuilders/easybuild-easyblocks/pull/718> `_ ) * add an option to allow removal of the ``-Dusethreads`` flag in Perl easyblock ( `#724 <https://github.com/easybuilders/easybuild-easyblocks/pull/724> `_ ) * update Doxygen easyblock for 1.10.x (CMake) ( `#734 <https://github.com/easybuilders/easybuild-easyblocks/pull/734> `_ ) * update sanity check in Qt easyblock for Qt 5.x ( `#740 <https://github.com/easybuilders/easybuild-easyblocks/pull/740> `_ ) * add support for multilib build of GCC on PowerPC ( `#741 <https://github.com/easybuilders/easybuild-easyblocks/pull/741> `_ ) * add support to OpenFOAM and SCOTCH easyblocks to support 64-bit integers, via 'i8' toolchain option ( `#744 <https://github.com/easybuilders/easybuild-easyblocks/pull/744> `_ ) * fix sanity check to support numpy 1.10 (dropped _dotblas.so) ( `#757 <https://github.com/easybuilders/easybuild-easyblocks/pull/757> `_ , `#761 <https://github.com/easybuilders/easybuild-easyblocks/pull/761> `_ , `#762 <https://github.com/easybuilders/easybuild-easyblocks/pull/762> `_ ) * update IPP easyblock for v9.x ( `#759 <https://github.com/easybuilders/easybuild-easyblocks/pull/759> `_ ) * cleaner output for PythonPackage under dry run, make numpy easyblock dry-run aware ( `#760 <https://github.com/easybuilders/easybuild-easyblocks/pull/760> `_ , `#671 <https://github.com/easybuilders/easybuild-easyblocks/pull/671> `_ ) * add support for using netCDF-Fortran as dependency in ALADIN easyblock ( `#764 <https://github.com/easybuilders/easybuild-easyblocks/pull/764> `_ ) * add support for tbb 4.4.x in tbb easyblock ( `#769 <https://github.com/easybuilders/easybuild-easyblocks/pull/769> `_ ) * add support for specifying altroot/altversion in Bundle easyblock ( `#773 <https://github.com/easybuilders/easybuild-easyblocks/pull/773> `_ ) * update OpenFOAM easyblock for OpenFOAM-Extend 3.2 + use apply_regex_substitutions ( `#770 <https://github.com/easybuilders/easybuild-easyblocks/pull/770> `_ ) * various bug fixes, including: * fix module path extension of system compiler in HMNS setup ( `#742 <https://github.com/easybuilders/easybuild-easyblocks/pull/742> `_ ) * only restore ``$PYTHONPATH`` if it was defined in EasyBuildMeta easyblock ( `#743 <https://github.com/easybuilders/easybuild-easyblocks/pull/743> `_ ) * make sure ``$PYTHONPATH`` is defined correctly in module file for Python packages created with ``--module-only`` ( `#748 <https://github.com/easybuilders/easybuild-easyblocks/pull/748> `_ ) * fix WRF easyblock to produce correct module under ``--module-only --force`` ( `#746 <https://github.com/easybuilders/easybuild-easyblocks/pull/746> `_ , `#752 <https://github.com/easybuilders/easybuild-easyblocks/pull/752> `_ ) * don't hardcode ' ``openPBS`` ' in GATE easyblock, use value for ``default_platform`` easyconfig parameter ( `#753 <https://github.com/easybuilders/easybuild-easyblocks/pull/753> `_ ) * avoid adding lib subdirs to ``$*LIBRARY_PATH`` if no libraries are there in ``PythonPackage`` easyblock ( `#755 <https://github.com/easybuilders/easybuild-easyblocks/pull/755> `_ ) * fix installing Python bindings for libxml2 to correct installation prefix ( `#765 <https://github.com/easybuilders/easybuild-easyblocks/pull/765> `_ ) **easyconfigs** * add GCCcore easyconfig that can be used as base for all compilers (without getting in the way) ( `#2214 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2214> `_ ) * along with easyconfig for ``GCC/4.9.3-2.25`` : bundle of GCCcore 4.9.3 and binutils 2.25 * intended to replace the GNU toolchain * added example easyconfig files for 39 new software packages: * DIRAC ( `#2212 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2212> `_ ), GeoIP ( `#2172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2172> `_ , `#2185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2185> `_ ), GeoIP-C ( `#2172 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2172> `_ , `#2185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2185> `_ ), graph-tool ( `#1591 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1591> `_ ), gtkglext ( `#2217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2217> `_ ), Intel Advisor ( `#2210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2210> `_ ), InterProScan ( `#2225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2225> `_ , `#2227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2227> `_ , `#2234 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2234> `_ ), intltool ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), kallisto ( `#2173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2173> `_ ), LibUUID ( `#1930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1930> `_ ), LuaJIT ( `#2153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2153> `_ ), libXcursor ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), libXrandr ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), libXtst ( `#2143 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2143> `_ ), libdap ( `#1930 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1930> `_ ), libtasn1 ( `#2208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2208> `_ ), libxkbcommon ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), MRtrix ( `#2217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2217> `_ , `#2218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2218> `_ ), MultiNest ( `#2166 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2166> `_ , `#2168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2168> `_ ), Nipype ( `#2150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2150> `_ ), PPfold ( `#2183 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2183> `_ , `#2187 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2187> `_ ), p11-kit ( `#2208 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2208> `_ ), pangox-compat ( `#2217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2217> `_ ), Qt5 ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), randrproto ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), rhdf5 ( `#2175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2175> `_ ), Stampy ( `#2180 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2180> `_ , `#2182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2182> `_ ), scikit-umfpack ( `#2061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2061> `_ ), scp (Python pkg) ( `#2196 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2196> `_ ), sleuth ( `#2175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2175> `_ ), traits ( `#2150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2150> `_ ), vincent ( `#2169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2169> `_ , `#2185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2185> `_ ), XKeyboardConfig ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-image ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-keysyms ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-renderutil ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), xcb-util-wm ( `#2136 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2136> `_ ), zlibbioc ( `#2175 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2175> `_ ) * added new easyconfigs for existing toolchains: ``intel/2015.08`` ( `#2194 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2194> `_ ), ``intel/2016.00`` ( `#2209 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2209> `_ ), ``intel/2016.01`` ( `#2219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2219> `_ ), ``iomkl/2015.03`` ( `#2155 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2155> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including CMake 3.4.1, HDF5 1.8.16, netCDF 4.3.3.1, netCDF-Fortran 4.4.2, numpy 1.10.1, Octave 4.0.0, OpenFOAM 3.0.0, OpenFOAM-Extend 3.2, Python 2.7.11 * various other enhancements, including: * add tidyr to R 3.2.1 easyconfigs ( `#2174 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2174> `_ ) * enable C++ support in MIGRATE-N ( `#2178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2178> `_ ) * also installed shared libraries for AMD and UMFPACK in SuiteSparse ( `#2061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2061> `_ ) * fix software name for ParaView (was: Paraview) ( `#2132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2132> `_ ) * enable building of shared libraries for binutils ( `#2133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2133> `_ ) * harden binutils built with dummy toolchain by linking to system libraries via ``RPATH`` ( `#2228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2228> `_ ) * enhance easyconfig unit tests to check that each easyconfig file is in the right subdirectory ( `#2232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2232> `_ ) * various bug fixes, including: * fix ALADIN patch file to not use relative paths, and adjust list of ALADIN sources accordingly (( `#2207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2207> `_ ), ( `#2213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2213> `_ )) * rename patch files for OpenFOAM to be in line with other patches ( `#2226 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2226> `_ ) * fix typo in bzip2 source URLs ( `#2204 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2204> `_ ) * force linking of ncurses in libreadline ( `#2206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2206> `_ ) * enable ``-fPIC`` in all zlib 1.2.8 easyconfigs ( `#2220 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2220> `_ ) * move Net-LibIDN/SRA-Toolkit/bbftpPRO/o2scl easyconfigs to right location ( `#2232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2232> `_ ) * restrict parallel build in OpenFOAM-Extend easyconfigs via ' ``maxparallel`` ', not ' ``parallel`` ' ( `#2233 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2233> `_ ) .. _release_notes_eb240: EasyBuild v2.4.0 (November 10th 2015) ------------------------------------- feature + bugfix release **framework** * add support for ``--extended-dry-run`` / ``-x`` ( `#1388 <https://github.com/easybuilders/easybuild-framework/pull/1388> `_ , `#1450 <https://github.com/easybuilders/easybuild-framework/pull/1450> `_ , `#1453 <https://github.com/easybuilders/easybuild-framework/pull/1453> `_ , `#1455 <https://github.com/easybuilders/easybuild-framework/pull/1455> `_ ) * detailed documentation is available at :ref: `extended_dry_run` * fix checking of sanity check paths w.r.t. discriminating between files and directories ( `#1436 <https://github.com/easybuilders/easybuild-framework/pull/1436> `_ ) * this impacts several easyconfig files where ``sanity_check_paths`` was not 100% correct * make ' ``eb`` ' script aware of Python v3.x, fall back to using ``python2`` if required ( `#1411 <https://github.com/easybuilders/easybuild-framework/pull/1411> `_ ) * add experimental support for parsing .yeb easyconfig files in YAML syntax ( `#1447 <https://github.com/easybuilders/easybuild-framework/pull/1447> `_ , `#1448 <https://github.com/easybuilders/easybuild-framework/pull/1448> `_ , `#1449 <https://github.com/easybuilders/easybuild-framework/pull/1449> `_ ) * see also :ref: `easyconfig_yeb_format` * add experimental support for resolving dependencies with minimal toolchains ( `#1306 <https://github.com/easybuilders/easybuild-framework/pull/1306> `_ ) * see also :ref: `minimal_toolchains` * various other enhancements, including: * refactor ``extract_cmd`` function to get rid of if/elif/else spaghetti blob ( `#1382 <https://github.com/easybuilders/easybuild-framework/pull/1382> `_ ) * add support for ``--review-pr`` ( `#1383 <https://github.com/easybuilders/easybuild-framework/pull/1383> `_ ) * add ``apply_regex_substitutions`` function to perform runtime patching from easyblocks ( `#1388 <https://github.com/easybuilders/easybuild-framework/pull/1388> `_ , `#1458 <https://github.com/easybuilders/easybuild-framework/pull/1458> `_ ) * add support for specifying alternate name to be part of generated module name ( `#1389 <https://github.com/easybuilders/easybuild-framework/pull/1389> `_ ) * via ' ``modaltsoftname`` ' easyconfig parameter * support overriding # used cores via ``--parallel`` ( `#1393 <https://github.com/easybuilders/easybuild-framework/pull/1393> `_ ) * also define ``$FC`` and ``$FCFLAGS`` in build environment ( `#1394 <https://github.com/easybuilders/easybuild-framework/pull/1394> `_ ) * add support extracting for ``.tar.Z`` files ( `#1396 <https://github.com/easybuilders/easybuild-framework/pull/1396> `_ ) * include easybuild/scripts in installation ( `#1397 <https://github.com/easybuilders/easybuild-framework/pull/1397> `_ ) * ignore hidden directories in find_base_dir ( `#1413 <https://github.com/easybuilders/easybuild-framework/pull/1413> `_ , `#1415 <https://github.com/easybuilders/easybuild-framework/pull/1415> `_ ) * add ``only_if_module_is_available`` decorator function to guard functionality that uses optional dependencies ( `#1416 <https://github.com/easybuilders/easybuild-framework/pull/1416> `_ ) * give easyblocks the possibility to choose ``maxhits`` for ``run_cmd_qa`` ( `#1417 <https://github.com/easybuilders/easybuild-framework/pull/1417> `_ ) * use class name (string) rather than License instances as values for software license constants ( `#1418 <https://github.com/easybuilders/easybuild-framework/pull/1418> `_ ) * support controlling recursive unloading of dependencies via ' ``recursive_module_unload`` ' easyconfig parameter ( `#1425 <https://github.com/easybuilders/easybuild-framework/pull/1425> `_ ) * implement basic support for type checking of easyconfig parameters ( `#1427 <https://github.com/easybuilders/easybuild-framework/pull/1427> `_ ) * support auto-converting to expected value type for easyconfig parameters (enabled by default) ( `#1428 <https://github.com/easybuilders/easybuild-framework/pull/1428> `_ , `#1437 <https://github.com/easybuilders/easybuild-framework/pull/1437> `_ ) * add support for ``--rebuild`` command line option, alternative for ``--force`` which doesn't imply ``--ignore-osdeps`` ( `#1435 <https://github.com/easybuilders/easybuild-framework/pull/1435> `_ ) * add support for Mercurial easyconfig repository ( `#979 <https://github.com/easybuilders/easybuild-framework/pull/979> `_ , `#1446 <https://github.com/easybuilders/easybuild-framework/pull/1446> `_ ) * add dedicated class for psmpi toolchain MPI component, and use it in gpsmpi and ipsmpi toolchains ( `#1454 <https://github.com/easybuilders/easybuild-framework/pull/1454> `_ ) * various bug fixes, including: * fix extracting of comments from an easyconfig file that includes 'tail' comments ( `#1381 <https://github.com/easybuilders/easybuild-framework/pull/1381> `_ ) * fix dev version to follow PEP-440, as required by recent setuptools versions ( `#1403 <https://github.com/easybuilders/easybuild-framework/pull/1403> `_ ) * required to avoid that setuptools transforms the version itself * see also https://www.python.org/dev/peps/pep-0440/#developmental-releases * allow ``get_cpu_speed`` to return ``None`` if CPU freq could not be determined ( `#1421 <https://github.com/easybuilders/easybuild-framework/pull/1421> `_ ) * relax ``sanity_check_paths`` in EasyBuild bootstrap script to deal with possible zipped .egg ( `#1422 <https://github.com/easybuilders/easybuild-framework/pull/1422> `_ ) * use empty list as default value for src/patches in Extension class ( `#1434 <https://github.com/easybuilders/easybuild-framework/pull/1434> `_ ) * skip symlinked files in ``adjust_permissions`` function ( `#1439 <https://github.com/easybuilders/easybuild-framework/pull/1439> `_ ) * fix HierarchicalMNS to always use full version number ( `#1440 <https://github.com/easybuilders/easybuild-framework/pull/1440> `_ ) **easyblocks** * 3 new generic easyblocks: OCamlPackage ( `#467 <https://github.com/easybuilders/easybuild-easyblocks/pull/467> `_ ), SCons ( `#689 <https://github.com/easybuilders/easybuild-easyblocks/pull/689> `_ , `#700 <https://github.com/easybuilders/easybuild-easyblocks/pull/700> `_ ), Waf ( `#722 <https://github.com/easybuilders/easybuild-easyblocks/pull/722> `_ ) * new easyblocks for 2 software packages that require customized support: * OCaml ( `#467 <https://github.com/easybuilders/easybuild-easyblocks/pull/467> `_ ), Samcef ( `#678 <https://github.com/easybuilders/easybuild-easyblocks/pull/678> `_ ) * various other enhancements, including: * add support for installing OpenFOAM with external METIS, CGAL and Paraview ( `#497 <https://github.com/easybuilders/easybuild-easyblocks/pull/497> `_ ) * update netCDF easyblock updated for netCDF v4.3.3.1 ( `#674 <https://github.com/easybuilders/easybuild-easyblocks/pull/674> `_ ) * update Rosetta easyblock for recent Rosetta versions ( `#677 <https://github.com/easybuilders/easybuild-easyblocks/pull/677> `_ ) * make unpacked source dir detection in easyblock for VSC-tools a little bit more flexible ( `#679 <https://github.com/easybuilders/easybuild-easyblocks/pull/679> `_ ) * add support for building with Plumed support enabled in CP2K easyblock ( `#681 <https://github.com/easybuilders/easybuild-easyblocks/pull/681> `_ ) * update Go easyblock for Go v1.5 ( `#683 <https://github.com/easybuilders/easybuild-easyblocks/pull/683> `_ ) * use ``apply_regex_substitutions`` function in WRF easyblock ( `#685 <https://github.com/easybuilders/easybuild-easyblocks/pull/685> `_ ) * update MUMPS easyblock for 5.x ( `#686 <https://github.com/easybuilders/easybuild-easyblocks/pull/686> `_ ) * implement runtime patching of ``$WM_*`` and compiler variables for OpenFOAM ( `#688 <https://github.com/easybuilders/easybuild-easyblocks/pull/688> `_ ) * specify sequential compiler to use in compiler command that gets injected in OpenFOAM easyblock ( `#692 <https://github.com/easybuilders/easybuild-easyblocks/pull/692> `_ ) * make ``PythonPackage`` and WRF easyblocks dry-run aware ( `#696 <https://github.com/easybuilders/easybuild-easyblocks/pull/696> `_ ) * see also :ref: `extended_dry_run_guidelines_easyblocks` * add support in ``PythonPackage`` for installing with ``easy_install`` + installing zipped eggs ( `#698 <https://github.com/easybuilders/easybuild-easyblocks/pull/698> `_ , `#711 <https://github.com/easybuilders/easybuild-easyblocks/pull/711> `_ , `#715 <https://github.com/easybuilders/easybuild-easyblocks/pull/715> `_ ) * update Bowtie easyblock for recent Bowtie versions ( `#707 <https://github.com/easybuilders/easybuild-easyblocks/pull/707> `_ ) * update CUDA easyblock for CUDA 7.x( `#708 <https://github.com/easybuilders/easybuild-easyblocks/pull/708> `_ ) * also consider ``config/make.sys.in`` for want in QuantumESRESSO easyblock ( `#714 <https://github.com/easybuilders/easybuild-easyblocks/pull/714> `_ ) * define ``$NWCHEM_LONG_PATH`` if needed in NWChem easyblock ( `#720 <https://github.com/easybuilders/easybuild-easyblocks/pull/720> `_ ) * remove custom post-install step in PDT easyblock ( `#723 <https://github.com/easybuilders/easybuild-easyblocks/pull/723> `_ ) * no longer needed now that ``adjust_permissions`` functions ignores symlinks * use ``$LIBS`` in HPL easyblock ( `#727 <https://github.com/easybuilders/easybuild-easyblocks/pull/727> `_ , `#736 <https://github.com/easybuilders/easybuild-easyblocks/pull/736> `_ ) * various bug fixes, including: * also define ``$MCRROOT`` for MCR in module ( `#687 <https://github.com/easybuilders/easybuild-easyblocks/pull/687> `_ ) * add missing ' ``super`` ' call in ``configure_step`` of easyblock for python-meep ( `#694 <https://github.com/easybuilders/easybuild-easyblocks/pull/694> `_ ) * only prepend existing non-empty paths to ``$PYTHONPATH`` in ``PythonPackage`` easyblock ( `#697 <https://github.com/easybuilders/easybuild-easyblocks/pull/697> `_ ) * fix extra_options definition in ``CMakePythonPackage`` easyblock ( `#698 <https://github.com/easybuilders/easybuild-easyblocks/pull/698> `_ ) * fix dev version to follow PEP-440, as required by recent setuptools versions ( `#702 <https://github.com/easybuilders/easybuild-easyblocks/pull/702> `_ , `#703 <https://github.com/easybuilders/easybuild-easyblocks/pull/703> `_ , `#704 <https://github.com/easybuilders/easybuild-easyblocks/pull/704> `_ ) * required to avoid that setuptools transforms the version itself * see also https://www.python.org/dev/peps/pep-0440/#developmental-releases * consider both ``lib`` and ``lib64`` in sanity check paths for flex ( `#705 <https://github.com/easybuilders/easybuild-easyblocks/pull/705> `_ ) * also copy signature file and don't copy CMake files in Eigen easyblock ( `#709 <https://github.com/easybuilders/easybuild-easyblocks/pull/709> `_ ) * fix directory names in ``make_module_req_guess`` of ANSYS easyblock ( `#713 <https://github.com/easybuilders/easybuild-easyblocks/pull/713> `_ ) * fix imports for ``set_tmpdir`` in easyblock unit tests after function was moved in EasyBuild framework ( `#726 <https://github.com/easybuilders/easybuild-easyblocks/pull/726> `_ ) * use ``--with-tcltk*`` configure options for Python to point to ensure Tcl/Tk deps are picked up ( `#729 <https://github.com/easybuilders/easybuild-easyblocks/pull/729> `_ ) * fix order of subdirs for QuantumESPRESSO binaries ( `#730 <https://github.com/easybuilders/easybuild-easyblocks/pull/730> `_ ) * correctly handle having both ``$FC`` / ``$FCFLAGS`` and ``$F90`` / ``$F90FLAGS`` defined when building MVAPICH2 ( `#732 <https://github.com/easybuilders/easybuild-easyblocks/pull/732> `_ ) * fix OpenSSL sanity check paths: lib/engines is a directory ( `#731 <https://github.com/easybuilders/easybuild-easyblocks/pull/731> `_ , `#733 <https://github.com/easybuilders/easybuild-easyblocks/pull/733> `_ ) * fix sanity check paths for netcdf-python ( `#735 <https://github.com/easybuilders/easybuild-easyblocks/pull/735> `_ ) **easyconfigs** * added example easyconfig files for 45 new software packages: * animation ( `#2007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2007> `_ ), ANSYS CFD ( `#1969 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1969> `_ ), ANTLR ( `#1191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1191> `_ , `#1980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1980> `_ ), APR ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), APR-util ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), Aspera Connect ( `#2005 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2005> `_ ), ChIP-Seq ( `#2119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2119> `_ ), deap ( `#2082 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2082> `_ ), DISCOVARdenovo ( `#1932 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1932> `_ ), FastQC ( `#1984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1984> `_ ), fontsproto ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), GraphicsMagick ( `#2007 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2007> `_ ), HBase ( `#1990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1990> `_ ), ISIS ( `#1972 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1972> `_ ), libedit ( `#293 <https://github.com/easybuilders/easybuild-easyconfigs/pull/293> `_ ), libfontenc ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), libGLU ( `#1627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1627> `_ ), libXdamage ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), libXfont ( `#1618 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1618> `_ , `#2038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2038> `_ ), LLVM ( `#1620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1620> `_ , `#1989 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1989> `_ , `#2031 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2031> `_ ), MIGRATE-N ( `#1944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1944> `_ ), MIRA ( `#1938 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1938> `_ ), mympingpong ( `#2049 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2049> `_ ), MySQLdb ( `#2011 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2011> `_ ), NCO ( `#1191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1191> `_ , `#1980 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1980> `_ ), NIPY ( `#2064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2064> `_ ), Nilearn ( `#2064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2064> `_ ), NiBabel ( `#2064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2064> `_ ), PBZIP2 ( `#1038 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1038> `_ ), PIL ( `#2062 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2062> `_ ), PhyloCSF ( `#2018 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2018> `_ ), pycairo ( `#2085 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2085> `_ ), pydicom ( `#2063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2063> `_ ), Salmon ( `#2051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2051> `_ ), Samcef ( `#1941 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1941> `_ ), scikit-image ( `#1974 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1974> `_ , `#2006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2006> `_ ), Serf ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), SSAHA2 ( `#1039 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1039> `_ ), Subversion ( `#1970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1970> `_ ), SWASH ( `#2059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2059> `_ ), time ( `#1954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1954> `_ ), Trim_Galore ( `#1984 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1984> `_ ), Trimmomatic ( `#1987 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1987> `_ ), WEKA ( `#1986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1986> `_ ), x264 ( `#2017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2017> `_ ) * added new easyconfigs for existing toolchains: ``gimkl/2.11.5`` ( `#2093 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2093> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Clang + LLVM 3.7.0, CMake 3.3.2, CUDA 7.5.18, hanythingondemand v3.0.1, Mesa 11.0.2, mpi4py v2.0.0, ncurses 6.0, OpenFOAM 2.4.0, Paraview 4.4.0, Python 3.5.0, QuantumESPRESSO v5.2.1 * various other enhancements, including: * enable ' ``pic`` ' toolchain option in libxml2 easyconfigs ( `#1993 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1993> `_ ) * extend list of R libraries included in R v3.2.1 easyconfigs ( `#2042 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2042> `_ , `#2046 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2046> `_ , `#2067 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2067> `_ , `#2072 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2072> `_ ) * add Rsubread in Bioconductor easyconfigs ( `#1971 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1971> `_ ) * various bug fixes, including: * fix software name for ``BEEF`` (was ' ``libbeef`` ') ( `#1679 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1679> `_ ) * add patch to install ``qhull.pc`` (pkgconfig) file with Qhull ( `#1975 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1975> `_ ) * don't enable experimental nouveau API in libdrm easyconfigs ( `#1994 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1994> `_ ) * fix dev version to follow PEP-440, as required by recent setuptools versions ( `#1997 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1997> `_ ) * required to avoid that setuptools transforms the version itself * see also https://www.python.org/dev/peps/pep-0440/#developmental-releases * correct homepage in Cufflinks easyconfigs ( `#2060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2060> `_ ) * fix imports for ``set_tmpdir`` in easyblock unit tests after function was moved in EasyBuild framework ( `#2097 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2097> `_ ) * add patch for Tk 8.6.4 to fix problem with ``tk.tcl`` not being found ( `#2102 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2102> `_ ) * don't use ``%(version)s`` template in toolchain version, causes problems with HierarchicalMNS ( `#2104 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2104> `_ ) * fix sanity check paths in several easyconfig ( `#2109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2109> `_ , `#2120 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2120> `_ , `#2121 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2121> `_ , `#2125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/2125> `_ ) * required because of bug fix in ``sanity_check_step`` implementation * CVXOPT, h5py, LIBSVM, libunistring, MDP, monty, PhyloCSF, Pyke, pandas, pycosat, pyhull, pymatgen, python-dateutils, Seaborn, Theano, XML-LibXML, XML-Simple .. _release_notes_eb230: EasyBuild v2.3.0 (September 2nd 2015) ------------------------------------- feature + bugfix release **framework** * requires vsc-base v2.2.4 or more recent ( `#1343 <https://github.com/easybuilders/easybuild-framework/pull/1343> `_ ) * required for ``mk_rst_table`` function in ``vsc.utils.docs`` * various other enhancements, including: * add support for generating documentation for (generic) easyblocks in ``.rst`` format ( `#1317 <https://github.com/easybuilders/easybuild-framework/pull/1317> `_ ) * preserve comments in easyconfig file in ``EasyConfig.dump()`` method ( `#1327 <https://github.com/easybuilders/easybuild-framework/pull/1327> `_ ) * add ``--cleanup-tmpdir`` option ( `#1365 <https://github.com/easybuilders/easybuild-framework/pull/1365> `_ ) * enables to preserve the used temporary directory via ``--disable-cleanup-tmpdir`` * enhance ``EasyConfig.dump()`` to reformat dumped easyconfig according to style guidelines ( `#1345 <https://github.com/easybuilders/easybuild-framework/pull/1345> `_ ) * add support for extracting ``.iso`` files using 7z (p7zip) ( `#1375 <https://github.com/easybuilders/easybuild-framework/pull/1375> `_ ) * various bug fixes, including: * correctly deal with special characters in template strings in ``EasyConfig.dump()`` method ( `#1323 <https://github.com/easybuilders/easybuild-framework/pull/1323> `_ ) * rework ``easybuild.tools.module_generator`` module to avoid keeping state w.r.t. fake modules ( `#1348 <https://github.com/easybuilders/easybuild-framework/pull/1348> `_ ) * fix dumping of hidden deps ( `#1354 <https://github.com/easybuilders/easybuild-framework/pull/1354> `_ ) * fix use of ``--job`` with hidden dependencies: include ``--hidden`` in submitted job script when needed ( `#1356 <https://github.com/easybuilders/easybuild-framework/pull/1356> `_ ) * fix ``ActiveMNS.det_full_module_name()`` for external modules ( `#1360 <https://github.com/easybuilders/easybuild-framework/pull/1360> `_ ) * fix ``EasyConfig.all_dependencies`` definition, fix tracking of job dependencies ( `#1359 <https://github.com/easybuilders/easybuild-framework/pull/1359> `_ , `#1361 <https://github.com/easybuilders/easybuild-framework/pull/1361> `_ ) * fix ``ModulesTool.exist()`` for hidden Lua module files ( `#1364 <https://github.com/easybuilders/easybuild-framework/pull/1364> `_ ) * only call ``EasyBlock.sanity_check_step`` for non-extensions ( `#1366 <https://github.com/easybuilders/easybuild-framework/pull/1366> `_ ) * this results in significant speedup when installing easyconfigs with lots of extensions, but also results in checking the default sanity check paths if none were defined for extensions installed as a module * fix using module naming schemes that were included via ``--include-module-naming-schemes`` ( `#1370 <https://github.com/easybuilders/easybuild-framework/pull/1370> `_ ) **easyblocks** * new easyblocks for 2 software packages that require customized support: * MCR ( `#623 <https://github.com/easybuilders/easybuild-easyblocks/pull/623> `_ ), Molpro ( `#665 <https://github.com/easybuilders/easybuild-easyblocks/pull/665> `_ ) * various other enhancements, including: * enhance BWA easyblock to also install man pages ( `#650 <https://github.com/easybuilders/easybuild-easyblocks/pull/650> `_ ) * enhance tbb easyblock to consider lib dirs in order and also define ``$CPATH`` , ``$LIBRARY_PATH`` , ``$TBBROOT`` ( `#653 <https://github.com/easybuilders/easybuild-easyblocks/pull/653> `_ , `#654 <https://github.com/easybuilders/easybuild-easyblocks/pull/654> `_ ) * call ``PythonPackage.configure_step`` in ``ConfigureMakePythonPackage.configure_step`` ( `#668 <https://github.com/easybuilders/easybuild-easyblocks/pull/668> `_ ) * add ' ``foldx3b6`` ' as possible binary name in FoldX easyblock ( `#671 <https://github.com/easybuilders/easybuild-easyblocks/pull/671> `_ ) * enhance/cleanup MATLAB easyblock ( `#672 <https://github.com/easybuilders/easybuild-easyblocks/pull/672> `_ ) * move preparing of ' ``intel`` ' subdir in ``$HOME`` to ``configure_step`` in ``IntelBase`` easyblock ( `#673 <https://github.com/easybuilders/easybuild-easyblocks/pull/673> `_ ) * various bug fixes, including: * add missing super call in ``post_install_step`` of imkl easyblock ( `#648 <https://github.com/easybuilders/easybuild-framework/pull/648> `_ , `#660 <https://github.com/easybuilders/easybuild-framework/pull/660> `_ ) * fix regex used to correct ``I_MPI_ROOT`` in impi ``mpivars.sh`` scripts ( `#662 <https://github.com/easybuilders/easybuild-easyblocks/pull/662> `_ ) * fix regex used to patch ``.mk`` file in configure step of SuiteSparse easyblock ( `#666 <https://github.com/easybuilders/easybuild-easyblocks/pull/666> `_ ) * correctly specify installation prefix via ``$GEM_HOME`` in ``RubyGem`` easyblock ( `#667 <https://github.com/easybuilders/easybuild-easyblocks/pull/667> `_ ) * add custom sanity check in scipy easyblock ( `#669 <https://github.com/easybuilders/easybuild-easyblocks/pull/669> `_ ) * specify to always use the bfd linker for OpenFOAM, to stay away from using ``ld.gold`` ( `#670 <https://github.com/easybuilders/easybuild-easyblocks/pull/670> `_ ) **easyconfigs** * added example easyconfig files for 19 new software packages: * ATK ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), Atkmm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), cairomm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), GLibmm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), GlobalArrays ( `#1868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1868> `_ ), gdk-pixbuf ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), gtk+ ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), Gtkmm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), libbeef ( `#1827 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1827> `_ ), libsigc++ ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), libsodium ( `#1876 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1876> `_ ), MACS ( `#1869 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1869> `_ ), MCR ( `#1677 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1677> `_ ), Molpro ( `#1880 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1880> `_ ), NFFT ( `#1921 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1921> `_ ), p7zip ( `#1931 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1931> `_ ), Pangomm ( `#1780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1780> `_ ), pygraphviz ( `#1861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1861> `_ ), pycosat ( `#1859 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1859> `_ ) * added new easyconfigs for existing toolchains: GNU/4.9.3-2.25 ( `#1836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1836> `_ ), foss/2015b ( `#1695 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1695> `_ ), intel/2015b ( `#1696 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1696> `_ ) * add easyconfigs using this toolchain for BLAST+ 2.2.31, Boost 1.58.0, CP2K 2.6.1, OpenFOAM 2.3.1, Perl 5.20.2 + 5.22.0 (bare), Python 2.7.10, R 3.2.1 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Boost 1.59.0, CP2K 2.6.1, GCC 5.2.0 * various other enhancements, including: * enhance texinfo easyconfig w.r.t. ``texmf`` , only use it as a build dependency ( `#1840 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1840> `_ ) * enable building of ``ld.gold`` in binutils 2.25 ( `#1885 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1885> `_ ) * various bug fixes, including: * fix enabling MPI support for h5py 2.5.0 ( `#1825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1825> `_ ) * fix versions of Bioconductor packages + add a couple extra ( `#1828 <https://github.com/easybuilders/easybuild-framework/pull/1828> `_ , `#1852 <https://github.com/easybuilders/easybuild-framework/pull/1852> `_ , `#1895 <https://github.com/easybuilders/easybuild-framework/pull/1895> `_ , `#1917 <https://github.com/easybuilders/easybuild-framework/pull/1917> `_ ) * put dummy values in place for ``builddir`` / ``installdir`` templates in easyconfigs unit tests ( `#1835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1835> `_ ) * fix easyconfigs unit tests w.r.t. changes made in framework ( `#1853 <https://github.com/easybuilders/easybuild-framework/pull/1853> `_ , `#1870 <https://github.com/easybuilders/easybuild-framework/pull/1870> `_ , `#1874 <https://github.com/easybuilders/easybuild-framework/pull/1874> `_ , `#1875 <https://github.com/easybuilders/easybuild-framework/pull/1875> `_ ) * add GMP as missing dep in Python 2.7.10 easyconfigs, required for pycrypto extension ( `#1858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1858> `_ ) * specify installation prefix for SIP ( `#1888 <https://github.com/easybuilders/easybuild-framework/pull/1888> `_ , `#1892 <https://github.com/easybuilders/easybuild-framework/pull/1892> `_ ) * add custom sanity check paths in various easyconfigs ( `#1889 <https://github.com/easybuilders/easybuild-framework/pull/1889> `_ , `#1894 <https://github.com/easybuilders/easybuild-framework/pull/1894> `_ , `#1897 <https://github.com/easybuilders/easybuild-framework/pull/1897> `_ - `#1909 <https://github.com/easybuilders/easybuild-framework/pull/1909> `_ ) * required because of fix in EasyBuild framework, causing default sanity check paths to be considered for extensions that are installed as a module * affected easyconfigs include: AnalyzeFMRI, Biggus, bibtexparser, DB_File, DBD-Pg, DBD-SQLite, DBD-mysql, evmix, fmri, FPM, GraphViz, gsl, GSSAPI, MDP, mpi4py, ncdf, ncdf4, netifaces, NetLibIDN, networkx, ordereddict, Parallel-ForkManager, paycheck, PyQuante, Pyke, PyQt, r2py, rjags, runjags, scikit-learn, SOBAcl, vsc-processcontrol, vsc-mympirun-scoop, XML, XML-Dumper, XML-Parser, XML-Twig, YAML-Syck * don't enable ' ``static`` ' toolchain option in SuiteSparse 4.4.3 easyconfig ( `#1911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1911> `_ ) * add --exclude unpack options for OpenFOAM 2.3.1 to avoid cyclic symlink causing problems when unpacking ( `#1925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1925> `_ ) .. _release_notes_eb220: EasyBuild v2.2.0 (July 15th 2015) --------------------------------- feature + bugfix release **framework** * add support for using GC3Pie as a backend for ``--job`` ( `#1008 <https://github.com/easybuilders/easybuild-framework/pull/1008> `_ ) * see also :ref: `submitting_jobs` * add support for ``--include-*`` configuration options to include additional easyblocks, toolchains, etc. ( `#1301 <https://github.com/easybuilders/easybuild-framework/pull/1301> `_ ) * see :ref: `including_additional_python_modules` * add (experimental) support for packaging installed software using FPM ( `#1224 <https://github.com/easybuilders/easybuild-framework/pull/1224> `_ ) * see :ref: `packaging_support` * various other enhancements, including: * use https for PyPI URL templates ( `#1286 <https://github.com/easybuilders/easybuild-framework/pull/1286> `_ ) * add GNU toolchain definition ( `#1287 <https://github.com/easybuilders/easybuild-framework/pull/1287> `_ ) * make bootstrap script more robust ( `#1289 <https://github.com/easybuilders/easybuild-framework/pull/1289> `_ , `#1325 <https://github.com/easybuilders/easybuild-framework/pull/1325> `_ ): * exclude 'easyblocks' pkg from ``sys.path`` to avoid that ``setup.py`` for easybuild-easyblocks picks up wrong version * undefine ``$EASYBUILD_BOOTSTRAP*`` environment variables, since they do not correspond with known config options * improve error reporting/robustness in ``fix_broken_easyconfigs.py`` script ( `#1290 <https://github.com/easybuilders/easybuild-framework/pull/1290> `_ ) * reset keep toolchain component class 'constants' every time ( `#1294 <https://github.com/easybuilders/easybuild-framework/pull/1294> `_ ) * make ``--strict`` also a build option ( `#1295 <https://github.com/easybuilders/easybuild-framework/pull/1295> `_ ) * fix purging of loaded modules in unit tests' setup method ( `#1297 <https://github.com/easybuilders/easybuild-framework/pull/1297> `_ ) * promote ``MigrateFromEBToHMNS`` to a 'production' MNS ( `#1302 <https://github.com/easybuilders/easybuild-framework/pull/1302> `_ ) * add support for ``--read-only-installdir`` and ``--group-writable-installdir`` configuration options ( `#1304 <https://github.com/easybuilders/easybuild-framework/pull/1304> `_ ) * add support for *not* expanding relative paths in ``prepend_paths`` ( `#1310 <https://github.com/easybuilders/easybuild-framework/pull/1310> `_ ) * enhance ``EasyConfig.dump()`` method to use easyconfig templates where possible ( `#1314 <https://github.com/easybuilders/easybuild-framework/pull/1314> `_ ), `#1319 <https://github.com/easybuilders/easybuild-framework/pull/1319> `_ ), `#1320 <https://github.com/easybuilders/easybuild-framework/pull/1320> `_ ), `#1321 <https://github.com/easybuilders/easybuild-framework/pull/1321> `_ ) * various bug fixes, including: * fix issue with cleaning up (no) logfile if ``--logtostdout`` / ``-l`` is used ( `#1298 <https://github.com/easybuilders/easybuild-framework/pull/1298> `_ ) * stop making ``ModulesTool`` class a singleton since it causes problems when multilple toolchains are in play ( `#1299 <https://github.com/easybuilders/easybuild-framework/pull/1299> `_ ) * don't modify values of 'paths' list passed as argument to prepend_paths in ``ModuleGenerator`` ( `#1300 <https://github.com/easybuilders/easybuild-framework/pull/1300> `_ ) * fix issue with ``EasyConfig.dump()`` + cleanup ( `#1308 <https://github.com/easybuilders/easybuild-framework/pull/1308> `_ ), `#1311 <https://github.com/easybuilders/easybuild-framework/pull/1311> `_ ) * re-enable (and fix) accidentally disabled test ( `#1316 <https://github.com/easybuilders/easybuild-framework/pull/1316> `_ ) **easyblocks** * modified easybuild.easyblocks package declaration to support giving preference to custom easyblocks ( `#617 <https://github.com/easybuilders/easybuild-easyblocks/pull/617> `_ ) * 2 new generic easyblocks: RubyGem ( `#565 <https://github.com/easybuilders/easybuild-easyblocks/pull/565> `_ ), SystemCompiler ( `#633 <https://github.com/easybuilders/easybuild-easyblocks/pull/633> `_ ) * new easyblocks for 5 software packages that require customized support: * NEMO ( `#564 <https://github.com/easybuilders/easybuild-easyblocks/pull/564> `_ ), pbdMPI ( `#612 <https://github.com/easybuilders/easybuild-framework/pull/612> `_ ), `#620 <https://github.com/easybuilders/easybuild-framework/pull/620> `_ ), pbdSLAP ( `#620 <https://github.com/easybuilders/easybuild-easyblocks/pull/620> `_ ), PDT ( `#624 <https://github.com/easybuilders/easybuild-easyblocks/pull/624> `_ ), Ruby ( `#565 <https://github.com/easybuilders/easybuild-easyblocks/pull/565> `_ ) * various other enhancements, including: * update CUDA easyblock for v6.x ( `#476 <https://github.com/easybuilders/easybuild-easyblocks/pull/476> `_ ) * make METIS easyblock take into account configopts ( `#494 <https://github.com/easybuilders/easybuild-easyblocks/pull/494> `_ ) * enable building of EOMIP and EOMEA for NWChem versions 6.5 and up ( `#508 <https://github.com/easybuilders/easybuild-easyblocks/pull/508> `_ ) * make out-of-source build with CMake truly out-of-source ( `#615 <https://github.com/easybuilders/easybuild-easyblocks/pull/615> `_ ) * add support in Bundle easyblock to run full sanity check ( `#627 <https://github.com/easybuilders/easybuild-easyblocks/pull/627> `_ ) * also take platform-specific Python lib dirs into account in PythonPackage easyblock ( `#628 <https://github.com/easybuilders/easybuild-easyblocks/pull/628> `_ ) * fix mpivars scripts in Intel MPI installation for versions where the installation is moved ( `#629 <https://github.com/easybuilders/easybuild-easyblocks/pull/629> `_ ) * don't restrict ``det_pylibdir`` function to only EasyBuild-provided Python ( `#631 <https://github.com/easybuilders/easybuild-framework/pull/631> `_ ), `#641 <https://github.com/easybuilders/easybuild-framework/pull/641> `_ ) * support snappy and other optional native libs in Hadoop easyblock ( `#632 <https://github.com/easybuilders/easybuild-framework/pull/632> `_ ), `#638 <https://github.com/easybuilders/easybuild-framework/pull/638> `_ ), `#640 <https://github.com/easybuilders/easybuild-framework/pull/640> `_ ), `#642 <https://github.com/easybuilders/easybuild-framework/pull/642> `_ ) * various bug fixes, including: * fix Xmipp easyblock, use provided ``install.sh`` script ( `#630 <https://github.com/easybuilders/easybuild-easyblocks/pull/630> `_ ) * update Clang easyblock to disable tests that may fail when unlimited stack size is used ( `#622 <https://github.com/easybuilders/easybuild-easyblocks/pull/622> `_ ) * fix setting of ``$INTEL_LICENSE_FILE`` for port@server values ( `#635 <https://github.com/easybuilders/easybuild-easyblocks/pull/635> `_ ) **easyconfigs** * added example easyconfig files for **62** new software packages: * ADF ( `#899 <https://github.com/easybuilders/easybuild-easyconfigs/pull/899> `_ ), AutoDock_Vina ( `#808 <https://github.com/easybuilders/easybuild-easyconfigs/pull/808> `_ ), bibtexparser ( `#1726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1726> `_ ), Biggus ( `#1770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1770> `_ ), Bismark ( `#990 <https://github.com/easybuilders/easybuild-easyconfigs/pull/990> `_ ), blasr ( `#1662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1662> `_ ), BSMAP ( `#1171 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1171> `_ ), Check ( `#811 <https://github.com/easybuilders/easybuild-easyconfigs/pull/811> `_ ), Circuitscape ( `#1222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1222> `_ ), CONTRAfold ( `#689 <https://github.com/easybuilders/easybuild-easyconfigs/pull/689> `_ ), cramtools ( `#1741 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1741> `_ ), DBD-Pg ( `#1066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1066> `_ ), DendroPy ( `#995 <https://github.com/easybuilders/easybuild-easyconfigs/pull/995> `_ ), EMAN2 ( `#1737 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1737> `_ ), ETSF_IO ( `#727 <https://github.com/easybuilders/easybuild-easyconfigs/pull/727> `_ ), eudev ( `#1578 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1578> `_ ), fastqc ( `#1636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1636> `_ ), FDS ( `#814 <https://github.com/easybuilders/easybuild-framework/pull/814> `_ ), `#1617 <https://github.com/easybuilders/easybuild-framework/pull/1617> `_ ), `#1625 <https://github.com/easybuilders/easybuild-framework/pull/1625> `_ ), FPM ( `#1440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1440> `_ ), frealign ( `#1619 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1619> `_ ), g2log ( `#1035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1035> `_ ), GC3Pie ( `#1692 <https://github.com/easybuilders/easybuild-framework/pull/1692> `_ ), `#1756 <https://github.com/easybuilders/easybuild-framework/pull/1756> `_ ), `#1768 <https://github.com/easybuilders/easybuild-framework/pull/1768> `_ ), GenotypeHarmonizer ( `#1672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1672> `_ ), gensim ( `#1762 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1762> `_ ), GraphViz ( `#1658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1658> `_ ), hisat ( `#1674 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1674> `_ ), IDBA-UD ( `#1045 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1045> `_ ), IMa2 ( `#828 <https://github.com/easybuilders/easybuild-easyconfigs/pull/828> `_ ), IMPUTE2 ( `#824 <https://github.com/easybuilders/easybuild-easyconfigs/pull/824> `_ ), JUBE ( `#1396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1396> `_ ), LAMARC ( `#760 <https://github.com/easybuilders/easybuild-easyconfigs/pull/760> `_ ), libXScrnSaver ( `#1653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1653> `_ ), MATIO ( `#1004 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1004> `_ ), MuTect ( `#1483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1483> `_ ), ncdf ( `#617 <https://github.com/easybuilders/easybuild-easyconfigs/pull/617> `_ ), NEMO ( `#1640 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1640> `_ ), ngspice ( `#1116 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1116> `_ ), ordereddict ( `#1774 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1774> `_ ), OSU Micro-Benchmarks ( `#1777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1777> `_ ), Parallel-ForkManager ( `#847 <https://github.com/easybuilders/easybuild-easyconfigs/pull/847> `_ ), pBWA ( `#1009 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1009> `_ ), PeakSeq ( `#1412 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1412> `_ ), Pillow ( `#1702 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1702> `_ ), Pindel ( `#1126 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1126> `_ ), PLUMED ( `#1596 <https://github.com/easybuilders/easybuild-framework/pull/1596> `_ ), `#1665 <https://github.com/easybuilders/easybuild-framework/pull/1665> `_ ), PostgreSQL ( `#1066 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1066> `_ ), PROJ ( `#1006 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1006> `_ ), PyAMG ( `#1222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1222> `_ ), Pyke ( `#1776 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1776> `_ ), rpy2 ( `#1775 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1775> `_ ), Sailfish ( `#1035 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1035> `_ ), SCANMS ( `#1386 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1386> `_ ), Seaborn ( `#1763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1763> `_ ), snpEff ( `#1680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1680> `_ ), SOBAcl ( `#1658 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1658> `_ ), SPIDER ( `#1624 <https://github.com/easybuilders/easybuild-framework/pull/1624> `_ ), `#1723 <https://github.com/easybuilders/easybuild-framework/pull/1723> `_ ), STAR ( `#1043 <https://github.com/easybuilders/easybuild-framework/pull/1043> `_ ), `#1676 <https://github.com/easybuilders/easybuild-framework/pull/1676> `_ ), system GCC ( `#1778 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1778> `_ ), tabix ( `#1059 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1059> `_ ), tecplot360ex ( `#1100 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1100> `_ ), Vampir ( `#512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/512> `_ ), VampirServer ( `#512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/512> `_ ), verifyBamID ( `#1675 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1675> `_ ) * added easyconfigs for 4 new software bundles: * R-bundle-Bioconductor ( `#1573 <https://github.com/easybuilders/easybuild-framework/pull/1573> `_ ), `#1795 <https://github.com/easybuilders/easybuild-framework/pull/1795> `_ ), R-bundle-devtools ( `#1621 <https://github.com/easybuilders/easybuild-framework/pull/1621> `_ ), `#1759 <https://github.com/easybuilders/easybuild-framework/pull/1759> `_ ), R-bundle-extra ( `#1387 <https://github.com/easybuilders/easybuild-framework/pull/1387> `_ ), `#1759 <https://github.com/easybuilders/easybuild-framework/pull/1759> `_ ), R-bundle-pbd ( `#1659 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1659> `_ ) * added easyconfigs for new GNU toolchain ( `#1346 <https://github.com/easybuilders/easybuild-framework/pull/1346> `_ ), `#1669 <https://github.com/easybuilders/easybuild-framework/pull/1669> `_ ) * added new easyconfigs for existing toolchains: goolf/1.5.16, intel/2014.06 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including BLAST 2.2.31+, Clang 3.6.1, CUDA 6.x, GCC 4.9.3, GROMACS 5.0.5, HDF5 1.8.15 + 1.8.15-patch1, Python 2.7.10, R 3.2.0 + 3.2.1, WRF 3.6.1 * various other enhancements, including: * update all ncurses easyconfigs to enable ncursesw and use ConfigureMake easyblock ( `#1337 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1337> `_ ) * update PDT easyconfigs to use PDT easyblock ( `#1687 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1687> `_ ) * add custom ``sanity_check_paths`` in libxml2 easyconfigs ( `#1690 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1690> `_ ) * enhance unit tests to also cover EasyConfig.dump() method on all easyconfigs ( `#1761 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1761> `_ ) * include snappy as dependency in Hadoop easyconfigs ( `#1758 <https://github.com/easybuilders/easybuild-framework/pull/1758> `_ ), `#1773 <https://github.com/easybuilders/easybuild-framework/pull/1773> `_ ) * enable SSL support in CMake v3.2.3 easyconfigs ( `#1784 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1784> `_ ) * add additional extensions in R easyconfigs ( `#1637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1637> `_ ) * various bug fixes, including: * add patch file required for correct CUDA-aware OpenMPI v1.7.3 build ( `#631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/631> `_ ) * fix issue with OpenMPI dependency in ECore easyconfigs ( `#777 <https://github.com/easybuilders/easybuild-easyconfigs/pull/777> `_ ) * don't run the Bloom tests for Jellyfish, they can randomly fail ( `#1016 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1016> `_ ) * fix source URLs in BioPerl easyconfigs ( `#1075 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1075> `_ ) * patch out svnversion command in Python 2.5.6 to fix build on recent systems ( `#1576 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1576> `_ ) * consistently use https for PyPI URLs in homepage/source_urls ( `#1616 <https://github.com/easybuilders/easybuild-framework/pull/1616> `_ ), `#1722 <https://github.com/easybuilders/easybuild-framework/pull/1722> `_ ) * include Tcl and Tk as dependencies in R easyconfig ( `#1623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1623> `_ ) * add patch for installing paycheck as Py3 extension ( `#1629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1629> `_ ) * add Perl dependency in git 2.x easyconfigs ( `#1631 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1631> `_ ) * fix easyconfig for GMP 6.0.0, don't use 6.0.0a sources ( `#1635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1635> `_ ) * fix source_urls in QuantumESPRESSO 5.0.2 easyconfigs ( `#1652 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1652> `_ ) * include Tk as dependency in Python 2.7.9 easyconfigs ( `#1654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1654> `_ ) * include tk-devel is list of OS deps for Python 2.7.9 Cray easyconfigs, make sure ' ``import Tkinter`` ' works ( `#1655 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1655> `_ ) * drop gpfs versionsuffix and stop using no longer existing ``--enable-gpfs`` configopt for recent HDF5 versions ( `#1657 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1657> `_ ) * include missing libxml2 dep in GLib easyconfigs ( `#1666 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1666> `_ ) * fix source URLs in Qt easyconfigs ( `#1673 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1673> `_ ) * fix source URLs for argparse Python extension ( `#1697 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1697> `_ ) * fix source URLs for deap Python extension ( `#1699 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1699> `_ ) * fix easyconfigs unit tests after making ModulesTool a non-singleton class ( `#1708 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1708> `_ ) * fix names for Xmipp easyconfigs and patches ( `#1719 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1719> `_ ) * add patch for Qt 4.8.6 to fix build issue on RHEL6 with intel/2015a ( `#1734 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1734> `_ ) * add M4 as build dep for GCC 5.1.0 ( `#1735 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1735> `_ ) * fix Bioconductor extension versions in R 3.1.3 easyconfigs ( `#1748 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1748> `_ ) * remove custom exts_filter definition from Python 3.4.3 easyconfig ( `#1765 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1765> `_ ) * fix source_urls in netCDF easyconfigs ( `#1766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1766> `_ ) * fix source_urls in netCDF-C++ and netCDF-Fortran easyconfigs ( `#1767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1767> `_ ) .. _release_notes_eb211: EasyBuild v2.1.1 (May 18th 2015) -------------------------------- bugfix release **framework** * fix issue with missing load statements when ``--module-only`` is used, don't skip ready/prepare steps ( `#1276 <https://github.com/easybuilders/easybuild-framework/pull/1276> `_ ) * enhance ``--search`` : only consider actual filename (not entire path), use regex syntax ( `#1281 <https://github.com/easybuilders/easybuild-framework/pull/1281> `_ ) * various other bug fixes, including: * fix ``generate_software_list.py`` script w.r.t. dependencies marked as external modules ( `#1273 <https://github.com/easybuilders/easybuild-framework/pull/1273> `_ ) * only use ``$LMOD_CMD`` value if ``lmod`` binary can't be found in $PATH ( `#1275 <https://github.com/easybuilders/easybuild-framework/pull/1275> `_ ) * fix location of ``module_only`` build option w.r.t. default value ( `#1277 <https://github.com/easybuilders/easybuild-framework/pull/1277> `_ ) * fix combined use of ``--hide-deps`` and ``hiddendependencies`` ( `#1280 <https://github.com/easybuilders/easybuild-framework/pull/1280> `_ ) * remove log handlers that were added during tests, to ensure effective cleanup of log files ( `#1282 <https://github.com/easybuilders/easybuild-framework/pull/1282> `_ ) * this makes the unit test suite run ~3x faster! * define ``$CRAYPE_LINK_TYPE`` if ' ``dynamic`` ' toolchain option is enabled for Cray compiler wrappers ( `#1283 <https://github.com/easybuilders/easybuild-framework/pull/1283> `_ ) **easyblocks** * fix compatibility of easyblocks with ``--module-only`` + dedicated unit test module ( `#610 <https://github.com/easybuilders/easybuild-easyblocks/pull/610> `_ ) * minor enhancements, including: * update GROMACS easyblock for version 5 ( `#513 <https://github.com/easybuilders/easybuild-easyblocks/pull/513> `_ ) * various other bug fixes, including: * only check compiler being used if FFTW interfaces are being built in Intel MKL easyblock ( `#606 <https://github.com/easybuilders/easybuild-easyblocks/pull/606> `_ ) **easyconfigs** * added example easyconfig files for **3** new software packages: * networkx ( `#1592 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1592> `_ ), Platanus ( `#1597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1597> `_ ), SaguaroGW ( `#1600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1600> `_ ) * added new easyconfigs for existing toolchains: ``ictce/7.3.5`` , ``CrayCCE/5.2.40`` , ``CrayGNU/5.2.40`` , ``CrayIntel/5.2.40`` * added easyconfigs using ``CrayGNU/5.2.25`` and ``CrayGNU/5.2.40`` toolchains ( `#1610 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1610> `_ , `#1611 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1611> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Boost 1.58.0, GROMACS 5.0.4, Python 3.4.3 * various bug fixes, including: * enable usempi in GROMACS easyconfig using CrayGNU toolchain (as required by GROMACS easyblock) ( `#1590 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1590> `_ ) * use system-provided tcsh when building WRF on Cray systems, to avoid hanging build ( `#1595 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1595> `_ ) * only use ' ``dynamic`` ' toolchain option, not ' ``shared`` ', in easyconfigs using Cray toolchain ( `#1609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1609> `_ ) .. _release_notes_v2.1.0: EasyBuild v2.1.0 (April 30th 2015) ---------------------------------- feature + bugfix release **framework** * requires vsc-base v2.2.0 or more recent * added support for LoggedException ( `vsc-base#160 <https://github.com/hpcugent/vsc-base/pull/160> `_ , `vsc-base#163 <https://github.com/hpcugent/vsc-base/pull/163> `_ , `vsc-base#165 <https://github.com/hpcugent/vsc-base/pull/165> `_ , `vsc-base#167 <https://github.com/hpcugent/vsc-base/pull/167> `_ ) * added support for add_flex action in GeneralOption ( `vsc-base#162 <https://github.com/hpcugent/vsc-base/pull/162> `_ ) * added support to GeneralOption to act on unknown configuration environment variables ( `vsc-base#162 <https://github.com/hpcugent/vsc-base/pull/162> `_ ) * add support for only (re)generating module files: ``--module-only`` ( `#1018 <https://github.com/easybuilders/easybuild-framework/pull/1018> `_ ) * module naming scheme API is enhanced to include det_install_subdir method * see :ref: `module_only` * add support for generating module files in Lua syntax (note: requires Lmod as modules tool) ( `#1060 <https://github.com/easybuilders/easybuild-framework/pull/1060> `_ , `#1255 <https://github.com/easybuilders/easybuild-framework/pull/1255> `_ , `#1256 <https://github.com/easybuilders/easybuild-framework/pull/1256> `_ , `#1270 <https://github.com/easybuilders/easybuild-framework/pull/1270> `_ ) * see ``--module-syntax`` configuration option and :ref: `module_syntax` * deprecate ``log.error`` method in favor of raising ``EasyBuildError`` exception ( `#1218 <https://github.com/easybuilders/easybuild-framework/pull/1218> `_ ) * see :ref: `depr_error_reporting` * add support for using external modules as dependencies, and to provide metadata for external modules ( `#1230 <https://github.com/easybuilders/easybuild-framework/pull/1230> `_ , `#1265 <https://github.com/easybuilders/easybuild-framework/pull/1265> `_ , `#1267 <https://github.com/easybuilders/easybuild-framework/pull/1267> `_ ) * see :ref: `using_external_modules` * add experimental support for Cray toolchains on top of PrgEnv modules: ``CrayGNU`` , ``CrayIntel`` , ``CrayCCE`` ( `#1234 <https://github.com/easybuilders/easybuild-framework/pull/1234> `_ , `#1268 <https://github.com/easybuilders/easybuild-framework/pull/1268> `_ ) * see https://github.com/easybuilders/easybuild/wiki/EasyBuild-on-Cray * various other enhancements, including: * clear list of checksums when using ``--try-software-version`` ( `#1169 <https://github.com/easybuilders/easybuild-framework/pull/1169> `_ ) * sort the results of searching for files (e.g., ``--search`` output) ( `#1214 <https://github.com/easybuilders/easybuild-framework/pull/1214> `_ ) * enhance test w.r.t. use of templates in cfgfile ( `#1217 <https://github.com/easybuilders/easybuild-framework/pull/1217> `_ ) * define ' ``%(DEFAULT_REPOSITORYPATH)s`` ' template for cfgfiles (see ``eb --avail-cfgfile-constants`` ) ( `#1220 <https://github.com/easybuilders/easybuild-framework/pull/1220> `_ ) * also reset ``$LD_PRELOAD`` when running module commands, in case module defined ``$LD_PRELOAD`` ( `#1222 <https://github.com/easybuilders/easybuild-framework/pull/1222> `_ ) * move location of ' ``module use`` ' statements in generated module file ( *after* ' ``module load`` ' statements) ( `#1232 <https://github.com/easybuilders/easybuild-framework/pull/1232> `_ ) * add support for ``--show-default-configfiles`` ( `#1240 <https://github.com/easybuilders/easybuild-framework/pull/1240> `_ ) * see :ref: `default_configuration_files` * report error on missing configuration files, rather than ignoring them ( `#1240 <https://github.com/easybuilders/easybuild-framework/pull/1240> `_ ) * clean up commit message used in easyconfig git repository ( `#1248 <https://github.com/easybuilders/easybuild-framework/pull/1248> `_ ) * add ``--hide-deps`` configuration option to specify names of software that must be installed as hidden modules ( `#1250 <https://github.com/easybuilders/easybuild-framework/pull/1250> `_ ) * see :ref: `hide_deps` * add support for appending/prepending to ``--robot-paths`` to avoid overwriting default robot search path ( `#1252 <https://github.com/easybuilders/easybuild-framework/pull/1252> `_ ) * see :ref: `robot_search_path_prepend_append` * enable detection of use of unknown ``$EASYBUILD`` -prefixed environment variables ( `#1253 <https://github.com/easybuilders/easybuild-framework/pull/1253> `_ ) * see :ref: `configuration_env_vars` * add ``--installpath-modules`` and ``--installpath-software`` configuration options ( `#1258 <https://github.com/easybuilders/easybuild-framework/pull/1258> `_ ) * see :ref: `installpath` * use dedicated subdirectory in temporary directory for each test to ensure better cleanup ( `#1260 <https://github.com/easybuilders/easybuild-framework/pull/1260> `_ ) * get rid of ``$PROFILEREAD`` hack when running commands, not needed anymore ( `#1264 <https://github.com/easybuilders/easybuild-framework/pull/1264> `_ ) * various bug fixes, including: * make bootstrap script robust against having ``vsc-base`` already available in Python search path ( `#1212 <https://github.com/easybuilders/easybuild-framework/pull/1212> `_ , `#1215 <https://github.com/easybuilders/easybuild-framework/pull/1215> `_ ) * set default value for unpack_options easyconfig parameter to ``''`` , so ``self.cfg.update`` works on it ( `#1229 <https://github.com/easybuilders/easybuild-framework/pull/1229> `_ ) * also copy rotated log files ( `#1238 <https://github.com/easybuilders/easybuild-framework/pull/1238> `_ ) * fix parsing of ``--download-timeout`` value ( `#1242 <https://github.com/easybuilders/easybuild-framework/pull/1242> `_ ) * make ``test_XDG_CONFIG_env_vars`` unit test robust against existing user config file in default location ( `#1259 <https://github.com/easybuilders/easybuild-framework/pull/1259> `_ ) * fix minor robustness issues w.r.t. ``$XDG_CONFIG*`` and ``$PYTHONPATH`` in unit tests ( `#1262 <https://github.com/easybuilders/easybuild-framework/pull/1262> `_ ) * fix issue with handling empty toolchain variables ( `#1263 <https://github.com/easybuilders/easybuild-framework/pull/1263> `_ ) **easyblocks** * replace ' ``log.error`` ' with ' ``raise EasyBuildError`` ' in all easyblocks ( `#588 <https://github.com/easybuilders/easybuild-easyblocks/pull/588> `_ ) * one new generic easyblock: ``ConfigureMakePythonPackage`` ( `#540 <https://github.com/easybuilders/easybuild-easyblocks/pull/540> `_ ) * new easyblocks for 2 software packages that require customized support: * TINKER ( `#578 <https://github.com/easybuilders/easybuild-easyblocks/pull/578> `_ ), Xmipp ( `#581 <https://github.com/easybuilders/easybuild-easyblocks/pull/581> `_ ) * various other enhancements, including: * enhance WIEN2k easyblock for recent versions + cleanup ( `#486 <https://github.com/easybuilders/easybuild-easyblocks/pull/486> `_ ) * define ``$PYTHONNOUSERSITE`` in PythonPackage easyblock so user-installed packages are not picked up ( `#577 <https://github.com/easybuilders/easybuild-easyblocks/pull/577> `_ ) * add support in CP2K easyblock for building on top of MPICH/MPICH2 ( `#579 <https://github.com/easybuilders/easybuild-easyblocks/pull/579> `_ ) * enhance Hadoop easyblock to support parallel builds ( `#580 <https://github.com/easybuilders/easybuild-easyblocks/pull/580> `_ ) * drop ``-noroot`` for recent FLUENT versions, honor ``installopts`` , enable ``-debug`` ( `#582 <https://github.com/easybuilders/easybuild-easyblocks/pull/582> `_ ) * include ``prebuildopts`` in build command for Python packages ( `#585 <https://github.com/easybuilders/easybuild-easyblocks/pull/585> `_ ) * also install ``rosetta_tools`` subdirectory for Rosetta ( `#586 <https://github.com/easybuilders/easybuild-easyblocks/pull/586> `_ ) * update SLEPc easyblock for v3.5 + style cleanup ( `#593 <https://github.com/easybuilders/easybuild-easyblocks/pull/593> `_ ) * minor fix in HPL easyblock w.r.t. checking defined environment variables ( `#595 <https://github.com/easybuilders/easybuild-easyblocks/pull/595> `_ ) * tweak CP2K easyblock w.r.t. LAPACK/FFTW support ( `#596 <https://github.com/easybuilders/easybuild-easyblocks/pull/596> `_ ) * minor update to GCC easyblock to support GCC v5.x ( `#598 <https://github.com/easybuilders/easybuild-easyblocks/pull/598> `_ ) * update sanity check in R easyblock for version 3.2.0 ( `#602 <https://github.com/easybuilders/easybuild-easyblocks/pull/602> `_ ) * various bug fixes, including: * fix Score-P easyblock for compiler-only toolchains, include Qt as optional dependency ( `#552 <https://github.com/easybuilders/easybuild-easyblocks/pull/552> `_ ) * fix definition of ``$MKLROOT`` , should be set to ' ``mkl`` ' subdir of install dir ( `#576 <https://github.com/easybuilders/easybuild-easyblocks/pull/576> `_ ) * add ``-libmpichf90`` to list of MPI libraries in NWChem easyblock ( `#584 <https://github.com/easybuilders/easybuild-easyblocks/pull/584> `_ ) * stop using ' ``$root`` ' to make easyblocks compatible with module files in Lua syntax ( `#590 <https://github.com/easybuilders/easybuild-easyblocks/pull/590> `_ ) * also set ``$PYTHONPATH`` before installing Python package in temporary directory in ``test_step`` ( `#591 <https://github.com/easybuilders/easybuild-easyblocks/pull/591> `_ ) * unset ``buildopts`` / ``installopts`` before installing Python extensions in Python easyblock ( `#597 <https://github.com/easybuilders/easybuild-easyblocks/pull/597> `_ ) * allow not including vsc-base sources when installing EasyBuild (gets installed with easybuild-framework) ( `#600 <https://github.com/easybuilders/easybuild-easyblocks/pull/600> `_ ) * use ``self.initial_environ`` rather than ``self.orig_environ`` in EasyBuildMeta easyblock ( `#600 <https://github.com/easybuilders/easybuild-easyblocks/pull/600> `_ ) * make GCC easyblock compatible with ``--module-only`` by setting default value for ``self.platform_lib`` in constructor ( `#603 <https://github.com/easybuilders/easybuild-easyblocks/pull/603> `_ ) **easyconfigs** * added example easyconfig files for **27** new software packages: * AFNI ( `#1322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1322> `_ , `#1521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1521> `_ ), BCFtools ( `#1492 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1492> `_ ), getdp ( `#1518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1518> `_ ), gmsh ( `#1518 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1518> `_ ), gtest ( `#1244 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1244> `_ ), hanythingondemand ( `#1530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1530> `_ ), mawk ( `#1369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1369> `_ ), Minimac ( `#815 <https://github.com/easybuilders/easybuild-easyconfigs/pull/815> `_ ), Minimac3 ( `#1502 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1502> `_ ), monty ( `#1548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1548> `_ ), Octave ( `#1563 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1563> `_ ), pbs_python ( `#1530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1530> `_ ), pigz ( `#1036 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1036> `_ ), Pygments ( `#1536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1536> `_ ), pyhull ( `#1539 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1539> `_ ), pymatgen ( `#1549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1549> `_ ), PyQt ( `#1322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1322> `_ , `#1521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1521> `_ ), Ray ( `#1494 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1494> `_ ), requests ( `#1536 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1536> `_ ), seqtk ( `#1524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1524> `_ ), SIP ( `#1322 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1322> `_ , `#1521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1521> `_ ), S-Lang ( `#1369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1369> `_ ), Spark ( `#1554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1554> `_ ), spglib ( `#1549 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1549> `_ ), TINKER ( `#1465 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1465> `_ ), tmux ( `#1369 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1369> `_ ), Xmipp ( `#1489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1489> `_ ) * added easyconfigs for new (Cray-specific) toolchains ( `#1538 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1538> `_ ): ``CrayGNU`` , ``CrayIntel`` , ``CrayCCE`` * initially supported software (using CrayGNU toolchains): CP2K, GROMACS, HPL, Python + numpy/scipy, WRF ( `#1558 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1558> `_ ) * see also https://github.com/easybuilders/easybuild/wiki/EasyBuild-on-Cray * added new easyconfigs for existing toolchains: ``goolf/1.5.16`` , ``intel/2014.06`` * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including GCC v5.1.0, OpenFOAM v2.3.1, R v3.1.3 and v3.2.0, PETSc/SLEPc v3.5.3, WIEN2k v14.1 * various other enhancements, including: * include pbr dependency for lockfile Python extension in Python v2.7.9 easyconfigs + mock/pytz/pandas ( `#1462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1462> `_ , `#1540 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1540> `_ ) * include SQLite as dependency in Python v2.7.9 easyconfigs ( `#1468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1468> `_ ) * set ``$LD_PRELOAD`` for Hoard and jemalloc ( `#1470 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1470> `_ ) * fix homepage in SCOTCH easyconfigs ( `#1485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1485> `_ ) * adding missing six/ecdsa dependencies for dateutil/paramiko Python packages in Python easyconfigs ( `#1504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1504> `_ , `#1505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1505> `_ , `#1506 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1506> `_ , `#1507 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1507> `_ , `#1508 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1508> `_ , `#1509 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1509> `_ , `#1510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1510> `_ ) * enable ``pic`` toolchain option in expat easyconfigs ( `#1562 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1562> `_ ) * extend list of source URLs for Bioconductor packages in R easyconfigs to include 'release' source URLs ( `#1568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1568> `_ ) * various bug fixes, including: * adding missing zlib dependency in all Tcl easyconfig files ( `#1344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1344> `_ ) * fix homepage in FLUENT easyconfigs ( `#1472 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1472> `_ ) * use ``--with-verbs`` rather than deprecated ``--with-openib`` in OpenMPI configure options ( `#1511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1511> `_ ) * stop relying on ``OS_NAME`` constant to specify OS dependencies in OpenMPI easyconfigs ( `#1512 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1512> `_ ) * replace use of ' ``$root`` ' with ' ``%(installdir)s`` ' to ensure compatibility with module files in Lua syntax ( `#1532 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1532> `_ ) * stop relying on ' ``$MKLROOT`` ' in ROOT easyconfigs ( `#1537 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1537> `_ ) * use proper Bundle easyblock for biodeps/PRACE ( `#1566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1566> `_ ) * make source_urls in Cube and Scalasca easyconfigs compatible with --try-software-version ( `#1574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1574> `_ ) * add patch for Cube to fix configure script w.r.t. Qt dependency, add --without-java-reader configure option ( `#1574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1574> `_ ) .. _release_notes_v2.0.0: EasyBuild v2.0.0 (March 6th 2015) --------------------------------- feature + bugfix release **framework** * requires vsc-base v2.0.3 or more recent * avoid deprecation warnings w.r.t. use of ``message`` attribute ( `vsc-base#155 <https://github.com/hpcugent/vsc-base/pull/155> `_ ) * fix typo in log message rendering ``--ignoreconfigfiles`` unusable ( `vsc-base#158 <https://github.com/hpcugent/vsc-base/pull/158> `_ ) * removed functionality that was deprecated for EasyBuild version 2.0 ( `#1143 <https://github.com/easybuilders/easybuild-framework/pull//1143> `_ ) * see :ref: `removed_functionality` * the fix_broken_easyconfigs.py script can be used to update easyconfig files suffering from this ( `#1151 <https://github.com/easybuilders/easybuild-framework/pull//1151> `_ , `#1206 <https://github.com/easybuilders/easybuild-framework/pull//1206> `_ , `#1207 <https://github.com/easybuilders/easybuild-framework/pull//1207> `_ ) * for more information about this script, see :ref: `fix_broken_easyconfigs_script` * stop including a crippled copy of vsc-base, include vsc-base as a proper dependency instead ( `#1160 <https://github.com/easybuilders/easybuild-framework/pull//1160> `_ , `#1194 <https://github.com/easybuilders/easybuild-framework/pull//1194> `_ ) * vsc-base is automatically installed as a dependency for easybuild-framework, if a Python installation tool is used * see :ref: `required_python_packages` * various other enhancements, including: * add support for Linux/POWER systems ( `#1044 <https://github.com/easybuilders/easybuild-framework/pull//1044> `_ ) * major cleanup in ``tools/systemtools.py`` + significantly enhanced tests ( `#1044 <https://github.com/easybuilders/easybuild-framework/pull//1044> `_ ) * add support for ' ``eb -a rst`` ', list available easyconfig parameters in ReST format ( `#1131 <https://github.com/easybuilders/easybuild-framework/pull//1131> `_ ) * add support for specifying one or more easyconfigs in combination with ``--from-pr`` ( `#1132 <https://github.com/easybuilders/easybuild-framework/pull//1132> `_ ) * see :ref: `from_pr_specifying_easyconfigs` * define ``__contains__`` in EasyConfig class ( `#1155 <https://github.com/easybuilders/easybuild-framework/pull//1155> `_ ) * restore support for downloading over a proxy ( `#1158 <https://github.com/easybuilders/easybuild-framework/pull//1158> `_ ) * i.e., use ``urllib2`` rather than ``urllib`` * this involved sacrificing the download progress report (which was only visible in the log file) * let ``mpi_family`` return ``None`` if MPI is not supported by a toolchain ( `#1164 <https://github.com/easybuilders/easybuild-framework/pull//1164> `_ ) * include support for specifying system-level configuration files for EasyBuild via ``$XDG_CONFIG_DIRS`` ( `#1166 <https://github.com/easybuilders/easybuild-framework/pull//1166> `_ ) * see :ref: `default_configuration_files` * make unit tests more robust ( `#1167 <https://github.com/easybuilders/easybuild-framework/pull//1167> `_ , `#1196 <https://github.com/easybuilders/easybuild-framework/pull//1196> `_ ) * see :ref: `unit_tests` * add hierarchical module naming scheme categorizing modules by ``moduleclass`` ( `#1176 <https://github.com/easybuilders/easybuild-framework/pull//1176> `_ ) * enhance bootstrap script to allow bootstrapping using supplied tarballs ( `#1184 <https://github.com/easybuilders/easybuild-framework/pull//1184> `_ ) * see :ref: `bootstrap_advanced_options` * disable updating of Lmod user cache by default, add configuration option ``--update-modules-tool-cache`` ( `#1185 <https://github.com/easybuilders/easybuild-framework/pull//1185> `_ ) * for now, only the Lmod user cache can be updated using ``--update-modules-tool-cache`` * use available ``which()`` function, rather than running ' ``which`` ' via ``run_cmd`` ( `#1192 <https://github.com/easybuilders/easybuild-framework/pull//1192> `_ ) * fix ``install-EasyBuild-develop.sh`` script w.r.t. vsc-base dependency ( `#1193 <https://github.com/easybuilders/easybuild-framework/pull//1193> `_ ) * also consider robot search path when looking for specified easyconfigs ( `#1201 <https://github.com/easybuilders/easybuild-framework/pull//1201> `_ ) * see :ref: `specifying_easyconfigs` * various bug fixes, including: * stop triggering deprecated/no longer support functionality in unit tests ( `#1126 <https://github.com/easybuilders/easybuild-framework/pull//1126> `_ ) * fix ``from_pr`` test by including dummy easyblocks for HPL and ScaLAPACK ( `#1133 <https://github.com/easybuilders/easybuild-framework/pull//1133> `_ ) * escape use of ' ``%`` ' in string with command line options with ``--job`` ( `#1135 <https://github.com/easybuilders/easybuild-framework/pull//1135> `_ ) * fix handling specified patch level 0 (+ enhance tests for fetch_patches method) ( `#1139 <https://github.com/easybuilders/easybuild-framework/pull//1139> `_ ) * fix formatting issues in generated easyconfig file obtained via ``--try-X`` ( `#1144 <https://github.com/easybuilders/easybuild-framework/pull//1144> `_ ) * use ``log.error`` in ``tools/toolchain/toolchain.py`` where applicable ( `#1145 <https://github.com/easybuilders/easybuild-framework/pull//1145> `_ ) * stop hardcoding ``/tmp`` in ``mpi_cmd_for`` function ( `#1146 <https://github.com/easybuilders/easybuild-framework/pull//1146> `_ , `#1200 <https://github.com/easybuilders/easybuild-framework/pull//1200> `_ ) * correctly determine variable name for ``$EBEXTLIST`` when generating module file ( `#1156 <https://github.com/easybuilders/easybuild-framework/pull//1156> `_ ) * do not ignore exit code of failing postinstall commands ( `#1157 <https://github.com/easybuilders/easybuild-framework/pull//1157> `_ ) * fix rare case in which used easyconfig and copied easyconfig are the same ( `#1159 <https://github.com/easybuilders/easybuild-framework/pull//1159> `_ ) * always filter hidden deps from list of dependencies ( `#1161 <https://github.com/easybuilders/easybuild-framework/pull//1161> `_ ) * fix implementation of ``path_matches`` function in ``tools/filetools.py`` ( `#1163 <https://github.com/easybuilders/easybuild-framework/pull//1163> `_ ) * make sure plain text keyring is used by unit tests ( `#1165 <https://github.com/easybuilders/easybuild-framework/pull//1165> `_ ) * suppress creation of module symlinks for ``HierarchicalMNS`` ( `#1173 <https://github.com/easybuilders/easybuild-framework/pull//1173> `_ ) * sort all lists obtained via ``glob.glob`` , since they are in arbitrary order ( `#1187 <https://github.com/easybuilders/easybuild-framework/pull//1187> `_ ) * stop modifying ``$MODULEPATH`` directly in ``setUp`` / ``tearDown`` of toolchain tests ( `#1191 <https://github.com/easybuilders/easybuild-framework/pull//1191> `_ ) **easyblocks** * one new generic easyblock for installing a bundle of modules: ``Bundle`` ( `#550 <https://github.com/easybuilders/easybuild-easyblocks/pull/550> `_ ) * and let the ``Toolchain`` generic easyblock derive from ``Bundle`` * new easyblocks for 2 software packages that require customized support: * GAMESS-US ( `#470 <https://github.com/easybuilders/easybuild-easyblocks/pull/470> `_ , `#544 <https://github.com/easybuilders/easybuild-easyblocks/pull/544> `_ , `#558 <https://github.com/easybuilders/easybuild-easyblocks/pull/558> `_ ), Hadoop ( `#563 <https://github.com/easybuilders/easybuild-easyblocks/pull/563> `_ ) * various other enhancements, including: * move support for ``staged_install`` from CPLEX easyblock to generic ``Binary`` easyblock ( `#502 <https://github.com/easybuilders/easybuild-easyblocks/pull/502> `_ ) * fix sanity check in picard easyblock for v1.119 that doesn't include ``sam.jar`` ( `#522 <https://github.com/easybuilders/easybuild-easyblocks/pull/522> `_ ) * log warning message when unlinking jellyfish symlink fails in Trinity easyblock ( `#534 <https://github.com/easybuilders/easybuild-easyblocks/pull/534> `_ ) * revamp ``EB_libint2`` easyblock into ``EB_Libint`` that works for both Libint v1x and v2.x ( `#536 <https://github.com/easybuilders/easybuild-easyblocks/pull/536> `_ ) * update CP2K easyblock for recent versions (no more ' ``fes`` ') ( `#537 <https://github.com/easybuilders/easybuild-easyblocks/pull/537> `_ ) * update SuiteSparse easyblock for recent versions ( `#541 <https://github.com/easybuilders/easybuild-easyblocks/pull/541> `_ ) * fix easyblock unit tests after dropping support for deprecated behaviour in framework ( `#543 <https://github.com/easybuilders/easybuild-easyblocks/pull/543> `_ ) * rework PSI easyblock to support future releases ( `#545 <https://github.com/easybuilders/easybuild-easyblocks/pull/545> `_ ) * enable always generating a 'verbose' Makefile in the generic CMakeMake easyblock ( `#546 <https://github.com/easybuilders/easybuild-easyblocks/pull/546> `_ ) * remove functionality in (generic) easyblocks that was deprecated for EasyBuild v2.0 ( `#547 <https://github.com/easybuilders/easybuild-easyblocks/pull/547> `_ ) * enhance generic RPackage easyblock to support installing extensions in a separate prefix ( `#551 <https://github.com/easybuilders/easybuild-easyblocks/pull/551> `_ ) * deprecate GenomeAnalysisTK easyblock, since it's basically equivalent to Tarball ( `#557 <https://github.com/easybuilders/easybuild-easyblocks/pull/557> `_ ) * update SAMtools easyblock for v1.2 ( `#562 <https://github.com/easybuilders/easybuild-easyblocks/pull/562> `_ ) * take ``preconfigopts`` easyconfig parameter into account in ROOT easyblock ( `#566 <https://github.com/easybuilders/easybuild-easyblocks/pull/566> `_ ) * update easyblock for installing EasyBuild * to support bootstrapping with provided source tarballs ( `#559 <https://github.com/easybuilders/easybuild-easyblocks/pull/559> `_ ) * to also cover vsc-base dependency, and verify ``easy-install.pth`` ( `#567 <https://github.com/easybuilders/easybuild-easyblocks/pull/567> `_ ) * update disabling sanitizer tests for Clang 3.6 ( `#570 <https://github.com/easybuilders/easybuild-easyblocks/pull/570> `_ ) * various bug fixes, including: * fix handling of LTO in GCC easyblock ( `#535 <https://github.com/easybuilders/easybuild-easyblocks/pull/535> `_ ) * relocate FDTD RPM to fix installation on SL6 ( `#538 <https://github.com/easybuilders/easybuild-easyblocks/pull/538> `_ ) **easyconfigs** * added example easyconfig files for **29** new software packages: * bsoft ( `#1353 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1353> `_ ), Coot ( `#1400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1400> `_ ), Cuby ( `#1258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1258> `_ ), DSRC ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), Exonerate ( `#568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/568> `_ ), fastqz ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), FSA ( `#568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/568> `_ ), fqzcomp ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), GAMESS-US ( `#1153 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1153> `_ , `#1406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1406> `_ ), Grep ( `#1308 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1308> `_ ), Hadoop ( `#1418 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1418> `_ ), Hoard ( `#1415 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1415> `_ ), IMB ( `#1284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1284> `_ ), ISL ( `#1389 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1389> `_ ), jemalloc ( `#1416 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1416> `_ ), libdwarf ( `#1283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1283> `_ ), libelf ( `#1283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1283> `_ ), MPC ( `#1310 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1310> `_ ), multitail ( `#1327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1327> `_ ), Pmw ( `#1403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1403> `_ ), Quip ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), rCUDA ( `#720 <https://github.com/easybuilders/easybuild-easyconfigs/pull/720> `_ ), SCALCE ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ), SMALT ( `#568 <https://github.com/easybuilders/easybuild-easyconfigs/pull/568> `_ ), STREAM ( `#1332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1332> `_ ), worker ( `#1307 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1307> `_ ), Xerces-C++ ( `#1370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1370> `_ ), XQilla ( `#1370 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1370> `_ ), ZPAQ ( `#1242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1242> `_ ) * added easyconfigs for new (common) toolchains * ``foss/2015a`` ( `#1239 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1239> `_ ), ``gompi/1.5.16`` ( `#1380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1380> `_ ), ``gmvolf/1.7.20`` ( `#1397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1397> `_ ), ``goolf/1.7.20`` ( `#1294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1294> `_ ), intel/2015a ( `#1238 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1238> `_ ), ``intel/2015.02`` ( `#1393 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1393> `_ ), ``iomkl/2015.01`` ( `#1325 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1325> `_ ), ``iomkl/2015.02`` ( `#1401 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1401> `_ ) * added new software bundle: ``Autotools`` ( `#1385 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1385> `_ ) * various other enhancements, including: * don't define ``$LDSHARED`` in zlib easyconfigs ( `#1350 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1350> `_ ) * this fixes the long-standing \" ``no version information available`` \" issue with zlib * see also `framework#108 <https://github.com/easybuilders/easybuild-framework/issues/108> `_ * add unit test to check that all ``extra_options`` keys are defined in ``EasyConfig`` instance ( `#1378 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1378> `_ ) * add source MD5 checksums in all GCC easyconfigs ( `#1391 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1391> `_ ) * speeding up the unit tests by avoiding rereading of same easyconfig file ( `#1432 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1432> `_ ) * fix conflict detection in unit tests by considering build deps separately from runtime deps ( `#1447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1447> `_ ) * fix toolchain for Bison build dep in ``MVAPICH2-1.9-iccifort-2011.13.367.eb`` easyconfig ( `#1448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1448> `_ ) * use ``Bundle`` generic easyblock for HPCBIOS bundles and fix ``moduleclass`` ( `#1451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1451> `_ ) * various bug fixes, including: * revert version of Libint dependency to 1.1.4 in CP2K v2.5.1 easyconfig ( `#1144 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1144> `_ ) * added Java dependencies to EMBOSS easyconfigs ( `#1167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1167> `_ ) * don't list ' ``lto`` ' as a language in GCC easyconfigs ( `#1286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1286> `_ ) * related to the fixes in the GCC easyblock, see `easyblocks#535 <https://github.com/easybuilders/easybuild-easyblocks/pull/535> `_ * rename libint2 easyconfigs as Libint v2 easyconfigs ( `#1287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1287> `_ ) * fix mpi4py ``source_urls`` in Python easyconfigs ( `#1306 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1306> `_ ) * consistently use CLooG 0.18.0 for GCC 4.8 series ( `#1392 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1392> `_ ) * rename GenomeAnalysisTk easyconfigs to GATK ( `#1399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1399> `_ ) * include ``openssl-devel`` SLES11 OS dependency in cURL/MySQL/Python easyconfigs ( `#1422 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1422> `_ ) * add missing Perl dependency in parallel easyconfigs ( `#1430 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1430> `_ ) * correct name in BLAST+ easyconfigs ( `#1443 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1443> `_ ) * fix name for sparsehash easyconfigs ( `#1452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1452> `_ ) EasyBuild v1.16.2 (March 6th 2015) ---------------------------------- bugfix release **framework** `(no changes compared to v1.16.1, simple version bump to stay in sync with easybuild-easyblocks)` **easyblocks** * make ``EB_EasyBuildMeta`` easyblock aware of vsc-base to make upgrading to EasyBuild v2.0.0 possible ( `#573 <https://github.com/easybuilders/easybuild-easyblocks/pull/573> `_ ) **easyconfigs** `(no changes compared to v1.16.1, simple version bump to stay in sync with easybuild-easyblocks)` EasyBuild v1.16.1 (December 19th 2014) -------------------------------------- bugfix release **framework** * fix functionality that is broken with ``--deprecated=2.0`` or with ``$EASYBUILD_DEPRECATED=2.0`` * don't include easyconfig parameters for ``ConfigureMake`` in ``eb -a`` , since fallback is deprecated ( `#1123 <https://github.com/easybuilders/easybuild-framework/pull/1123> `_ ) * correctly check software_license value type ( `#1124 <https://github.com/easybuilders/easybuild-framework/pull/1124> `_ ) * fix ``generate_software_list.py`` script w.r.t. deprecated fallback to ``ConfigureMake`` ( `#1127 <https://github.com/easybuilders/easybuild-framework/pull/1127> `_ ) * other bug fixes * fix logging issues in tests, sync with vsc-base v2.0.0 ( `#1120 <https://github.com/easybuilders/easybuild-framework/pull/1120> `_ ) **easyblocks** * fix EasyBuild versions for which ``$EASYBUILD_DEPRECATED=1.0`` is set in EasyBuild sanity check ( `#531 <https://github.com/easybuilders/easybuild-easyblocks/pull/531> `_ ) **easyconfigs** * set default easyblock to ConfigureMake in TEMPLATE.eb ( `#1277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1277> `_ ) EasyBuild v1.16.0 (December 18th 2014) -------------------------------------- feature + bugfix release **framework** * deprecate automagic fallback to ``ConfigureMake`` easyblock ( `#1113 <https://github.com/easybuilders/easybuild-framework/pull/1113> `_ ) * easyconfigs should specify ``easyblock = 'ConfigureMake'`` instead of relying on the fallback mechanism * **note: automagic fallback to** ``ConfigureMake`` **easyblock will be removed in EasyBuild v2.0** * see also `Automagic fallback to ConfigureMake <http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#configuremake-fallback> `_ * stop triggering deprecated functionality, to enable use of ``--deprecated=2.0`` ( `#1107 <https://github.com/easybuilders/easybuild-framework/pull/1107> `_ , `#1115 <https://github.com/easybuilders/easybuild-framework/pull/1115> `_ , `#1119 <https://github.com/easybuilders/easybuild-framework/pull/1119> `_ ) * see `Deprecated functionality <http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#configuremake-fallback> `_ for more information * various other enhancements, including: * add script to clean up gists created via ``--upload-test-report`` ( `#958 <https://github.com/easybuilders/easybuild-framework/pull/958> `_ ) * also use ``-xHost`` when using Intel compilers on AMD systems (as opposed to ``-msse3`` ) ( `#960 <https://github.com/easybuilders/easybuild-framework/pull/960> `_ ) * add Python version check in ``eb`` command ( `#1046 <https://github.com/easybuilders/easybuild-framework/pull/1046> `_ ) * take ``versionprefix`` into account in ``HierarchicalMNS`` module naming scheme ( `#1058 <https://github.com/easybuilders/easybuild-framework/pull/1058> `_ ) * clean up and refactor ``main.py`` , move functionality to other modules ( `#1059 <https://github.com/easybuilders/easybuild-framework/pull/1059> `_ , `#1064 <https://github.com/easybuilders/easybuild-framework/pull/1064> `_ , `#1075 <https://github.com/easybuilders/easybuild-framework/pull/1075> `_ , `#1087 <https://github.com/easybuilders/easybuild-framework/pull/1087> `_ ) * add check in ``download_file`` function for HTTP return code + show download progress report ( `#1066 <https://github.com/easybuilders/easybuild-framework/pull/1066> `_ , `#1090 <https://github.com/easybuilders/easybuild-framework/pull/1090> `_ ) * include info log message with name and location of used easyblock ( `#1069 <https://github.com/easybuilders/easybuild-framework/pull/1069> `_ ) * add toolchains definitions for ``gpsmpi`` , ``gpsolf`` , ``impich`` , ``intel-para`` , ``ipsmpi`` toolchains ( `#1072 <https://github.com/easybuilders/easybuild-framework/pull/1072> `_ , `#1073 <https://github.com/easybuilders/easybuild-framework/pull/1073> `_ ) * support for Parastation MPI based toolchains * enforce that ``hiddendependencies`` is a subset of ``dependencies`` ( `#1078 <https://github.com/easybuilders/easybuild-framework/pull/1078> `_ ) * this is done to avoid that site-specific policies w.r.t. hidden modules slip into contributed easyconfigs * enable use of ``--show_hidden`` for ``avail`` subcommand with recent Lmod versions ( `#1081 <https://github.com/easybuilders/easybuild-framework/pull/1081> `_ ) * add ``--robot-paths`` configure option ( `#1080 <https://github.com/easybuilders/easybuild-framework/pull/1080> `_ , `#1093 <https://github.com/easybuilders/easybuild-framework/pull/1093> `_ , `#1095 <https://github.com/easybuilders/easybuild-framework/pull/1095> `_ , `#1114 <https://github.com/easybuilders/easybuild-framework/pull/1114> `_ ) * support use of ``%(DEFAULT_ROBOT_PATHS)s`` template in EasyBuild configuration files ( `#1100 <https://github.com/easybuilders/easybuild-framework/pull/1100> `_ ) * see also `Controlling the robot search path <http://easybuild.readthedocs.org/en/latest/Using_the_EasyBuild_command_line.html#controlling-the-robot-search-path> `_ * use ``-xHost`` rather than ``-xHOST`` , to match Intel documentation ( `#1084 <https://github.com/easybuilders/easybuild-framework/pull/1084> `_ ) * update and cleanup ``README`` file ( `#1085 <https://github.com/easybuilders/easybuild-framework/pull/1085> `_ ) * deprecate ``self.moduleGenerator`` in favor of ``self.module_generator`` in ``EasyBlock`` ( `#1088 <https://github.com/easybuilders/easybuild-framework/pull/1088> `_ ) * also support ``MPICH`` MPI family in ``mpi_cmd_for`` function ( `#1098 <https://github.com/easybuilders/easybuild-framework/pull/1098> `_ ) * update documentation references to point to http://easybuild.readthedocs.org ( `#1102 <https://github.com/easybuilders/easybuild-framework/pull/1102> `_ ) * check for OS dependencies with *both* ``rpm`` and ``dpkg`` (if available) ( `#1111 <https://github.com/easybuilders/easybuild-framework/pull/1111> `_ ) * various bug fixes, including: * fix picking required software version specified by ``--software-version`` and clean up ``tweak.py`` ( `#1062 <https://github.com/easybuilders/easybuild-framework/pull/1062> `_ , `#1063 <https://github.com/easybuilders/easybuild-framework/pull/1063> `_ ) * escape ``$`` characters in module load message specified via ``modloadmsg`` easyconfig parameter) ( `#1068 <https://github.com/easybuilders/easybuild-framework/pull/1068> `_ ) * take available hidden modules into account in dependency resolution ( `#1065 <https://github.com/easybuilders/easybuild-framework/pull/1065> `_ ) * fix hard crash when using patch files with an empty list of sources ( `#1070 <https://github.com/easybuilders/easybuild-framework/pull/1070> `_ ) * fix Intel MKL BLACS library being used for MPICH/MPICH2-based toolchains ( `#1072 <https://github.com/easybuilders/easybuild-framework/pull/1072> `_ ) * fix regular expression in ``fetch_parameter_from_easyconfig_file`` function ( `#1096 <https://github.com/easybuilders/easybuild-framework/pull/1096> `_ ) * don't hardcode queue names when submitting a job ( `#1106 <https://github.com/easybuilders/easybuild-framework/pull/1106> `_ ) * fix affiliation/mail address for Fotis in headers ( `#1105 <https://github.com/easybuilders/easybuild-framework/pull/1105> `_ ) * filter out ``/dev/null`` entries in patch file in ``det_patched_files`` function ( `#1108 <https://github.com/easybuilders/easybuild-framework/pull/1108> `_ ) * fix ``gmpolf`` toolchain definition, to have ``gmpich`` as MPI components (instead of ``gmpich2`` ) ( `#1101 <https://github.com/easybuilders/easybuild-framework/pull/1101> `_ ) * 'MPICH' refers to MPICH v3.x, while MPICH2 refers to MPICH(2) v2.x (MPICH v1.x is ancient/obsolete) * **note** : this requires to reinstall the ``gmpolf`` module, using the updated easyconfig from `easybuild-easyconfigs#1217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1217> `_ **easyblocks** * new easyblocks for **2** software packages that requires customized support: * Chimera ( `#524 <https://github.com/easybuilders/easybuild-easyblocks/pull/524> `_ ), GATE ( `#518 <https://github.com/easybuilders/easybuild-easyblocks/pull/518> `_ ) * fix use of deprecated functionality, enhance unit tests to check for it ( `#523 <https://github.com/easybuilders/easybuild-easyblocks/pull/523> `_ ) * various other enhancements, including: * update PETSc easyblock for recent versions (v3.5) ( `#446 <https://github.com/easybuilders/easybuild-easyblocks/pull/446> `_ ) * only include major/minor version numbers for FLUENT subdir ( `#480 <https://github.com/easybuilders/easybuild-easyblocks/pull/480> `_ ) * factor out 'move after install' code from impi easyblock to ``IntelBase`` , use it for itac ( `#487 <https://github.com/easybuilders/easybuild-easyblocks/pull/487> `_ ) * support custom easyconfig parameters in ``EB_impi`` easyblock to correct behavior of MPI wrapper commands ( `#493 <https://github.com/easybuilders/easybuild-easyblocks/pull/493> `_ ) * consider both ``lib`` and ``lib64`` in sanity check for GROMACS ( `#501 <https://github.com/easybuilders/easybuild-easyblocks/pull/501> `_ ) * take ``preinstallopts`` and ``installopts`` into account in ``Binary`` easyblock ( `#503 <https://github.com/easybuilders/easybuild-easyblocks/pull/503> `_ ) * add sanity check command ``abaqus information=all`` for ABAQUS ( `#504 <https://github.com/easybuilders/easybuild-easyblocks/pull/504> `_ ) * update and clean up ``README`` , refer to http://easybuild.readthedocs.org documentation ( `#505 <https://github.com/easybuilders/easybuild-easyblocks/pull/505> `_ , `#516 <https://github.com/easybuilders/easybuild-easyblocks/pull/516> `_ ) * rename deprecated ``self.moduleGenerator`` to ``self.module_generator`` ( `#506 <https://github.com/easybuilders/easybuild-easyblocks/pull/506> `_ ) * see also `easybuild-framework#1088 <https://github.com/easybuilders/easybuild-easyblocks/pull/1088> `_ * check whether specified ``type`` value is a known value ( ``psmp`` or ``popt`` ) in CP2K easyblock ( `#509 <https://github.com/easybuilders/easybuild-easyblocks/pull/509> `_ ) * add support to ``SAMtools`` easyblock for installing recent versions (v1.x) ( `#512 <https://github.com/easybuilders/easybuild-easyblocks/pull/512> `_ ) * fix version check + sanity check in Geant4 easyblock + style fixes ( `#517 <https://github.com/easybuilders/easybuild-easyblocks/pull/517> `_ ) * added ``$root/modlib`` to ``$PYTHONPATH`` guesses in Modeller easyblock ( `#525 <https://github.com/easybuilders/easybuild-easyblocks/pull/525> `_ ) * mark ``license`` custom easyconfig parameter as deprecated in ``IntelBase`` ( `#527 <https://github.com/easybuilders/easybuild-easyblocks/pull/527> `_ ) * various bug fixes, including: * fix Libxc version check in CP2K easyblock ( `#478 <https://github.com/easybuilders/easybuild-easyblocks/pull/478> `_ ) * correctly specify ``mkl_libs`` when building *numpy* with GCC and imkl ( `#485 <https://github.com/easybuilders/easybuild-easyblocks/pull/485> `_ ) * extend noqa for OpenFOAM-Extend in build_step ( `#488 <https://github.com/easybuilders/easybuild-easyblocks/pull/488> `_ , `#520 <https://github.com/easybuilders/easybuild-easyblocks/pull/520> `_ ) * correctly set ``$LD_LIBRARY_PATH`` , ``$LIBRARY_PATH`` and ``$PKG_CONFIG_PATH`` for ``R`` ( `#495 <https://github.com/easybuilders/easybuild-easyblocks/pull/495> `_ ) * fix default value for ``files_to_copy`` in ``MakeCp`` easyblock ( `#500 <https://github.com/easybuilders/easybuild-easyblocks/pull/500> `_ ) * treat ``MPICH`` MPI family as MPICH v3.x instead of MPICH v1.x ( `#519 <https://github.com/easybuilders/easybuild-easyblocks/pull/519> `_ ) * see also `easybuild-framework#1112 <https://github.com/easybuilders/easybuild-easyblocks/pull/1112> `_ * fix affiliation/mail address for Fotis in headers ( `#521 <https://github.com/easybuilders/easybuild-easyblocks/pull/521> `_ ) * clean up in ``extra_options`` methods, avoid casting return value to ``dict`` or returning via parent ( `#528 <https://github.com/easybuilders/easybuild-easyblocks/pull/528> `_ ) **easyconfigs** * added example easyconfig files for **39** new software packages: * ANTs ( `#1232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1232> `_ ), BEOPS ( `#1264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1264> `_ ), Chhimera ( `#1255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1255> `_ ), ctffind ( `#1249 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1249> `_ ), DBD-SQLite ( `#1064 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1064> `_ ), DBD-mysql ( `#1063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1063> `_ ), DIALIGN-TX ( `#668 <https://github.com/easybuilders/easybuild-easyconfigs/pull/668> `_ ), ffmpeg ( `#1088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1088> `_ ), GObject-Introspection ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), GTS ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), Graphviz ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), GraphViz2 ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), grace ( `#1131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1131> `_ ), HarfBuzz ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), HTSlib ( `#1161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1161> `_ ), GSSAPI ( `#1048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1048> `_ ), Kerberos_V5 ( `#1048 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1048> `_ ), libevent ( `#1063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1063> `_ ), libXdmcp ( `#1129 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1129> `_ ), libXft ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), libXinerama ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), libXrender ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), Maven ( `#1094 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1094> `_ ), MySQL ( `#1063 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1063> `_ ), Net-LibIDN ( `#1060 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1060> `_ ), OpenCV ( `#1088 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1088> `_ ), OpenMD ( `#1105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1105> `_ ), Qhull ( `#1105 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1105> `_ ), Pango ( `#1079 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1079> `_ ), psmpi ( `#1245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1245> `_ , `#1246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1246> `_ ), RELION ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), renderproto ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), rjags ( `#1125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1125> `_ ), runjags ( `#1125 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1125> `_ ), SPRNG ( `#1138 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1138> `_ , `#1141 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1141> `_ ), xineramaproto ( `#1017 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1017> `_ ), XML-Dumper ( `#1061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1061> `_ ), XML-Parser ( `#1061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1061> `_ ), XML-Twig ( `#1061 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1061> `_ ) * added easyconfigs for new toolchains * ``intel/2014.10`` & ``intel/2014.11`` ( `#1219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1219> `_ ), ``intel-para/2014.12`` ( `#1246 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1246> `_ ), ``gpsolf/2014.12`` ( `#1245 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1245> `_ ), ``iompi/6.6.4`` ( `#1215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1215> `_ ) * include ``easyblock = 'ConfigureMake'`` in relevant easyconfigs to deal with deprecation of automagic fallback to ``ConfigureMake`` ( `#1248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1248> `_ ) * see also `easybuild-framework#1113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1113> `_ and `Automagic fallback to ConfigureMake <http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#configuremake-fallback> `_ * clean up use of deprecated functionality in existing easyconfigs ( `#1252 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1252> `_ , `#1259 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1259> `_ ) * stop using deprecated ``makeopts`` , ``premakeopts`` and ``shared_lib_ext`` * check for use of deprecated functionality in easyconfigs unit tests * see also http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html#easyconfig-parameters * various other enhancements, including: * also build ``fftw3_threads`` libraries, and enhance sanity checks ( `#1013 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1013> `_ ) * add unit test to verify specified ``sanity_check_paths`` ( `#1119 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1119> `_ ) * update and clean up ``README`` , refer to http://easybuild.readthedocs.org documentation ( `#1184 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1184> `_ , `#1224 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1224> `_ ) * various bug fixes, including: * fix unit tests w.r.t. changes in framework ( `#1146 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1146> `_ ) * remove unnecessary build dependencies for OpenMPI ( `#1168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1168> `_ ) * remove duplicate line in OpenMPI easyconfigs ( `#1207 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1207> `_ ) * fix affiliation/mail address for Fotis in headers ( `#1237 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1237> `_ ) * fix permissions of easyconfig files for consistency ( `#1210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1210> `_ ) * disable symbol lookup feature in cairo to fix build on SL6 ( `#1241 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1241> `_ ) * fix easyconfig ``gmpolf`` toolchain w.r.t. MPICH software name ( `#1217 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1217> `_ ) * see also `easybuild-framework#1112 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1112> `_ * fix ``source_urls`` for WRF and WPS ( `#1225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1225> `_ ) * fix and clean up GATE easyconfigs ( `#1228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1228> `_ ) * fix broken CLHEP builds by including ``-gcc`` in ``$CXXFLAGS`` ( `#1254 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1254> `_ ) * add patch to fix broken test in Go ( `#1257 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1257> `_ ) * fix name of GMAP easyconfigs, should be GMAP-GSNAP ( `#1268 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1268> `_ ) * fix easyconfig filenames, enhance unit test to check easyconfig filenames ( `#1271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1271> `_ ) EasyBuild v1.15.2 (October 7th 2014) ------------------------------------ bugfix release **framework** * fix ``$MODULEPATH`` extensions for Clang/CUDA, to make ``goolfc`` / ``cgoolf`` compatible with ``HierarchicalMNS`` ( `#1050 <https://github.com/easybuilders/easybuild-framework/pull/1050> `_ ) * include ``versionsuffix`` in module subdirectory with ``HierarchicalMNS`` ( `#1050 <https://github.com/easybuilders/easybuild-framework/pull/1050> `_ , `#1055 <https://github.com/easybuilders/easybuild-framework/pull/1055> `_ ) * fix unit tests which were broken with bash patched for ShellShock bug ( `#1051 <https://github.com/easybuilders/easybuild-framework/pull/1051> `_ ) * add definition of gimpi toolchain, required to make gimkl toolchain compatible with ``HierarchicalMNS`` ( `#1052 <https://github.com/easybuilders/easybuild-framework/pull/1052> `_ ) * don't override ``COMPILER_MODULE_NAME`` obtained from ``ClangGCC`` in Clang-based toolchains ( `#1053 <https://github.com/easybuilders/easybuild-framework/pull/1053> `_ ) * fix wrong code in ``path_to_top_of_module_tree`` function ( `#1054 <https://github.com/easybuilders/easybuild-framework/pull/1054> `_ ) * because of this, load statements for compilers were potentially included in higher-level modules under ``HierarchicalMNS`` **easyblocks** * only disable sanitizer tests for recent Clang versions ( `#481 <https://github.com/easybuilders/easybuild-easyblocks/pull/481> `_ , `#482 <https://github.com/easybuilders/easybuild-easyblocks/pull/482> `_ ) * pass down installopts to CUDA install command ( `#483 <https://github.com/easybuilders/easybuild-easyblocks/pull/483> `_ ) **easyconfigs** * disable parallel build for slalib ( `#968 <https://github.com/easybuilders/easybuild-easyconfigs/pull/968> `_ ) * fix compatibility of goolfc with HierarchicalMNS by using GCC toolchain for installing CUDA ( `#1106 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1106> `_ , `#1115 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1115> `_ ) * fix zlib OS dependency spec for Debian in Boost easyconfigs ( `#1109 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1109> `_ ) * fix compatibility of gimkl with HierarchicalMNS by using gimpi subtoolchain ( `#1110 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1110> `_ ) * make both GCC and Clang first-class members in Clang-based toolchains to fix compatibility with HierarchicalMNS ( `#1113 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1113> `_ ) EasyBuild v1.15.1 (September 23rd 2014) --------------------------------------- bugfix release **framework** * take into account that multiple modules may be extending ``$MODULEPATH`` with the same path, when determining path to top of module tree (see `#1047 <https://github.com/easybuilders/easybuild-framework/pull/1047> `_ ) * this bug caused a load statement for either ``icc`` or ``ifort`` to be included in higher-level modules installed with an Intel-based compiler toolchain, under the ``HierarchicalMNS`` module naming scheme * make ``HierarchicalMNS`` module naming scheme compatible with ``cgoolf`` and ``goolfc`` toolchain ( `#1049 <https://github.com/easybuilders/easybuild-framework/pull/1049> `_ ) * add definition of ``iompi`` (sub)toolchain to make ``iomkl`` toolchain compatible with ``HierarchicalMNS`` ( `#1049 <https://github.com/easybuilders/easybuild-framework/pull/1049> `_ ) **easyblocks** `(no changes compared to v1.15.0, simple version bump to stay in sync with easybuild-framework)` **easyconfigs** * minor bug fixes, including: * use SHLIB_EXT in GMP/MPFR easyconfigs ( `#1090 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1090> `_ ) * fix TopHat homepage and source_urls since page moved ( `#1092 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1092> `_ ) * make iomkl toolchain compatible with HierarchicalMNS ( `#1099 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1099> `_ ) EasyBuild v1.15.0 (September 12th 2014) --------------------------------------- feature + bugfix release **framework** * various other enhancements, including: * fetch extension sources in fetch_step to enhance ``--stop=fetch`` ( `#978 <https://github.com/easybuilders/easybuild-framework/pull/978> `_ ) * add ``iimpi`` toolchain definition ( `#993 <https://github.com/easybuilders/easybuild-framework/pull/993> `_ ) * prepend robot path with download location of files when ``--from-pr`` is used ( `#995 <https://github.com/easybuilders/easybuild-framework/pull/995> `_ ) * add support for excluding module path extensions from generated modules ( `#1003 <https://github.com/easybuilders/easybuild-framework/pull/1003> `_ ) * see ``include_modpath_extensions`` easyconfig parameter * add support for installing hidden modules and using them as dependencies ( `#1009 <https://github.com/easybuilders/easybuild-framework/pull/1009> `_ , `#1021 <https://github.com/easybuilders/easybuild-framework/pull/1021> `_ , `#1023 <https://github.com/easybuilders/easybuild-framework/pull/1023> `_ ) * see ``--hidden`` and ``hiddendependencies`` easyconfig parameter * stop relying on ``conflict`` statement in module files to determine software name of toolchain components ( `#1017 <https://github.com/easybuilders/easybuild-framework/pull/1017> `_ , `#1037 <https://github.com/easybuilders/easybuild-framework/pull/1037> `_ ) * instead, the ``is_short_modname_for`` method defined by the module naming scheme implementation is queried * improve error message generated for a missing easyconfig file ( `#1019 <https://github.com/easybuilders/easybuild-framework/pull/1019> `_ ) * include path where tweaked easyconfigs are placed in robot path ( `#1032 <https://github.com/easybuilders/easybuild-framework/pull/1032> `_ ) * indicate forced builds in ``--dry-run`` output ( `#1034 <https://github.com/easybuilders/easybuild-framework/pull/1034> `_ ) * fix interaction between ``--force`` and ``--try-toolchain --robot`` ( `#1035 <https://github.com/easybuilders/easybuild-framework/pull/1035> `_ ) * add ``--software`` option, disable recursion for ``--try-software(-X)`` ( `#1036 <https://github.com/easybuilders/easybuild-framework/pull/1036> `_ ) * various bug fixes, including: * fix ``HierarchicalMNS`` crashing when MPI library is installed with a dummy toolchain ( `#986 <https://github.com/easybuilders/easybuild-framework/pull/986> `_ ) * fix list of FFTW wrapper libraries for Intel MKL ( `#987 <https://github.com/easybuilders/easybuild-framework/pull/987> `_ ) * fix stability of unit tests ( `#988 <https://github.com/easybuilders/easybuild-framework/pull/988> `_ , `#1027 <https://github.com/easybuilders/easybuild-framework/pull/1027> `_ , `#1033 <https://github.com/easybuilders/easybuild-framework/pull/1033> `_ ) * make sure ``$SCALAPACK_INC_DIR`` (and ``$SCALAPACK_LIB_DIR`` ) are defined when using ``imkl`` ( `#990 <https://github.com/easybuilders/easybuild-framework/pull/990> `_ ) * fix error message on missing FFTW wrapper libs ( `#992 <https://github.com/easybuilders/easybuild-framework/pull/992> `_ ) * fix duplicate toolchain elements in ``--list-toolchains`` output ( `#993 <https://github.com/easybuilders/easybuild-framework/pull/993> `_ ) * filter out load statements that extend the ``$MODULEPATH`` to make the module being installed available ( `#1016 <https://github.com/easybuilders/easybuild-framework/pull/1016> `_ ) * fix conflict specification included in module files ( `#1017 <https://github.com/easybuilders/easybuild-framework/pull/1017> `_ ) * avoid ``--from-pr`` crashing hard unless ``--robot`` is used ( `#1022 <https://github.com/easybuilders/easybuild-framework/pull/1022> `_ ) * properly quote GCC version string in archived easyconfig ( `#1028 <https://github.com/easybuilders/easybuild-framework/pull/1028> `_ ) * fix issue with ``--repositorypath`` not honoring ``--prefix`` ( `#1031 <https://github.com/easybuilders/easybuild-framework/pull/1031> `_ ) * sync with latest vsc-base version to fix log order ( `#1039 <https://github.com/easybuilders/easybuild-framework/pull/1039> `_ ) * increase # commits per page for ``--from-pr`` ( `#1040 <https://github.com/easybuilders/easybuild-framework/pull/1040> `_ ) **easyblocks** * added support for **2** new software packages that requires customized support: * Modeller ( `#392 <https://github.com/easybuilders/easybuild-easyblocks/pull/392> `_ ), NAMD ( `#397 <https://github.com/easybuilders/easybuild-easyblocks/pull/397> `_ ) * various enhancements, including: * fix locale used for running Perl unit tests ( `#425 <https://github.com/easybuilders/easybuild-easyblocks/pull/425> `_ ) * fix Rmpi easyblock to correctly configure for Intel MPI ( `#435 <https://github.com/easybuilders/easybuild-easyblocks/pull/435> `_ ) * add support in generic Rpackage easyblock for handling patches ( `#435 <https://github.com/easybuilders/easybuild-easyblocks/pull/435> `_ ) * enhance OpenFOAM easyblock: fix building MPI build of Pstream and (pt)scotchDecomp + overall cleanup ( `#436 <https://github.com/easybuilders/easybuild-easyblocks/pull/436> `_ ) * enhance NWChem easyblock for version 6.3, clean up running of test cases ( `#441 <https://github.com/easybuilders/easybuild-easyblocks/pull/441> `_ ) * enhance noqa for interactive configuration of Qt build procedure ( `#447 <https://github.com/easybuilders/easybuild-easyblocks/pull/447> `_ ) * add custom sanity check for R in easyblock ( `#449 <https://github.com/easybuilders/easybuild-easyblocks/pull/449> `_ ) * make perlmodule take into account ``(pre){config,build,install}opts`` ( `#450 <https://github.com/easybuilders/easybuild-easyblocks/pull/450> `_ ) * add support for specifying an activation key after installing Mathematica ( `#452 <https://github.com/easybuilders/easybuild-easyblocks/pull/452> `_ ) * consider both ``lib`` and ``lib64`` directories in netCDF sanity check ( `#453 <https://github.com/easybuilders/easybuild-easyblocks/pull/453> `_ ) * fix sanity check for ANSYS for v15.0.x ( `#458 <https://github.com/easybuilders/easybuild-easyblocks/pull/458> `_ ) * fix Trilinos easyblock for recent version ( `#462 <https://github.com/easybuilders/easybuild-easyblocks/pull/462> `_ ) * enhance impi easyblock to handle install subdir for impi v5.0.1 and future version ( `#465 <https://github.com/easybuilders/easybuild-easyblocks/pull/465> `_ , `#472 <https://github.com/easybuilders/easybuild-easyblocks/pull/472> `_ ) * include $CFLAGS in linker flags for HPL ( `#466 <https://github.com/easybuilders/easybuild-easyblocks/pull/466> `_ ) * update sanity test checks for GROMACS 5.x ( `#471 <https://github.com/easybuilders/easybuild-easyblocks/pull/471> `_ ) * various bug fixes: * fix building of FFTW wrappers for Intel MKL v11.1.x + cleanup of imkl easyblock ( `#445 <https://github.com/easybuilders/easybuild-easyblocks/pull/445> `_ ) **easyconfigs** * added example easyconfig files for **13** new software packages: * Circos ( `#780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/780> `_ ), DB_File ( `#913 <https://github.com/easybuilders/easybuild-easyconfigs/pull/913> `_ ), Emacs ( `#970 <https://github.com/easybuilders/easybuild-easyconfigs/pull/970> `_ ), evmix ( `#1077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1077> `_ ), GD ( `#780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/780> `_ ), gsl ( `#1077 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1077> `_ ), IOR ( `#949 <https://github.com/easybuilders/easybuild-easyconfigs/pull/949> `_ ), JAGS ( `#1076 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1076> `_ ), libgd ( `#780 <https://github.com/easybuilders/easybuild-easyconfigs/pull/780> `_ ), MethPipe ( `#1070 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1070> `_ ), Modeller ( `#825 <https://github.com/easybuilders/easybuild-easyconfigs/pull/825> `_ ), NAMD ( `#835 <https://github.com/easybuilders/easybuild-easyconfigs/pull/835> `_ ), netCDF-C++4 ( `#1015 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1015> `_ ) * added easyconfigs for new toolchains ( `#986 <https://github.com/easybuilders/easybuild-easyconfigs/pull/986> `_ , `#1051 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1051> `_ ): * gimkl/1.5.9, ictce/7.1.2 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * including Python 2.7.8/3.4.1, Perl 5.20.0, R 3.1.1, NWChem 6.3, OpenFOAM-Extend 3.1, GCC 4.9.1, Clang 3.4.2, ... * various enhancements, including: * make existing ictce/intel toolchains compatible with HierarchicalMNS ( `#1069 <https://github.com/easybuilders/easybuild-easyconfigs/pull/1069> `_ ) * this involves installing impi with an iccifort toolchain, and imkl with an iimpi toolchain * various bug fixes, including: * download link for Perl modules changed to use cpan.metapan.org * fix missing MPI-based OpenFOAM libraries ( ``Pstream`` , ``(pt)scotchDecomp`` ), make sure provided SCOTCH is used ( `#957 <https://github.com/easybuilders/easybuild-easyconfigs/pull/957> `_ ) EasyBuild v1.14.0 (July 9th 2014) --------------------------------- feature + bugfix release **framework** * important changes * required Lmod version bumped to v5.6.3 ( `#944 <https://github.com/easybuilders/easybuild-framework/pull/944> `_ ) * required due to enhancements and bug fixes in Lmod, e.g. making ``--terse avail`` significantly faster, and correctly handling a ``prepend-path`` statement that includes multiple directories at once * required Tcl/C environment modules version set to 3.2.10 ( * hard requirement due to fixed ``modulecmd`` segmentation fault bug, that only tends manifests itself when making a large amount of changes in the environment (e.g. ``module load <toolchain>`` ) * renamed ``EasyBuildModuleNamingScheme`` to ``EasyBuildMNS`` * enhanced custom module naming schemes functionality to support hierarchical module naming schemes ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ , `#971 <https://github.com/easybuilders/easybuild-framework/pull/971> `_ , `#975 <https://github.com/easybuilders/easybuild-framework/pull/975> `_ ) * extended API for custom module naming schemes to allow tweaking different aspects of module naming * see ``easybuild/tools/module_naming_scheme/mns.py`` for abstract ``ModuleNamingScheme`` class * an example hierarchical module naming scheme is included, see ``HierarchicalMNS`` * split up full module names into a module subdirectory part, which becomes part of ``$MODULEPATH`` ), and a 'short' module name (is exposed to end-users) * example: ``GCC/4.7.2`` in ``Core`` subdir, ``OpenMPI/1.6.5`` in ``Compiler/GCC/4.7.2`` subdir * make ``ModuleNamingScheme`` class a singleton, move it into ``easybuild.tools.module_naming_scheme.mns`` module * implement ``ActiveMNS`` wrapper class for querying active module naming scheme * implement toolchain inspection functions that can be used in a custom module naming scheme * ``det_toolchain_compilers`` , ``det_toolchain_mpi`` in ``easybuild.tools.module_naming_scheme.toolchain`` * significant code cleanup & enhanced unit tests * enhance & clean up ``tools/modules.py`` ( `#944 <https://github.com/easybuilders/easybuild-framework/pull/944> `_ , `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ , `#963 <https://github.com/easybuilders/easybuild-framework/pull/963> `_ , `#964 <https://github.com/easybuilders/easybuild-framework/pull/964> `_ , `#969 <https://github.com/easybuilders/easybuild-framework/pull/969> `_ ) * make ``ModulesTool`` a singleton to avoid repeating module commands over & over again needlessly * use ``module use`` , ``module unuse`` rather than fiddling with ``$MODULEPATH`` directly * improve debug logging (include full stdout/stderr output of module commands) * remove deprecated functionality ( ``add_module`` , ``remove_module`` , indirect module load) * various other enhancements, including: * added toolchain definitions for 'common' toolchains: ``intel`` and ``foss`` ( `#956 <https://github.com/easybuilders/easybuild-framework/pull/956> `_ ) * implement caching for easyconfig files, parsed easyconfigs and toolchains ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * enable ``--ignore-osdeps`` implicitly when ``-D`` , ``--dry-run`` or ``--dep-graph`` are used ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * flesh out ``use_group`` and ``det_parallelism`` function, include them in ``easybuild.tools.systemtools`` ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * make symlinking of module files part of module naming scheme API ( `#973 <https://github.com/easybuilders/easybuild-framework/pull/973> `_ ) * list of symlinks paths can be controlled using ``det_module_symlink_paths()`` method * added support for new configuration options: * tweaking compiler flags triggered by ``optarch`` toolchain options using ``--optarch`` ( `#949 <https://github.com/easybuilders/easybuild-framework/pull/949> `_ ) * filtering out dependencies from easyconfig files using ``--filter-deps`` ( `#957 <https://github.com/easybuilders/easybuild-framework/pull/957> `_ ) * filtering environment included in test reports with ``--test-report-env-filter`` ( `#959 <https://github.com/easybuilders/easybuild-framework/pull/959> `_ ) e.g. ``--test-report-env-filter='^SSH|USER|HOSTNAME|UID|.*COOKIE.*'`` * made suffix used for module files install path configurable, using ``--suffix-modules-path`` ( `#973 <https://github.com/easybuilders/easybuild-framework/pull/973> `_ ) * added support for additional easyconfig parameters: * define aliases in module files ( ``modaliases`` ) ( `#952 <https://github.com/easybuilders/easybuild-framework/pull/952> `_ ) * add print message on module load ( ``modloadmsg`` ) and Tcl footer ( ``modtclfooter`` ) in module files ( `#954 <https://github.com/easybuilders/easybuild-framework/pull/954> `_ , `#974 <https://github.com/easybuilders/easybuild-framework/pull/974> `_ ) * various bug fixes, including: * don't try to tweak generated easyconfigs when using ``--try-X`` ( `#942 <https://github.com/easybuilders/easybuild-framework/pull/942> `_ ) * currently create symlinks to module files modules/all under a custom module naming scheme ( `#953 <https://github.com/easybuilders/easybuild-framework/pull/953> `_ ) * restore traceback error reporting on hard crashes ( `#965 <https://github.com/easybuilders/easybuild-framework/pull/965> `_ ) **easyblocks** * added **one** new `generic` easyblock: CmdCp (`#395 <https://github.com/easybuilders/easybuild-easyblocks/pull/395> `_ ) * added support for **2** new software packages that requires customized support: * ANSYS ( `#398 <https://github.com/easybuilders/easybuild-easyblocks/pull/398> `_ ), HPCG ( `#408 <https://github.com/easybuilders/easybuild-easyblocks/pull/408> `_ ) * various enhancements, including: * updated ABAQUS easyblock so that it works for version 13.2 ( `#406 <https://github.com/easybuilders/easybuild-easyblocks/pull/406> `_ ) * enhance BLAT easyblock by using ``super`` 's ``build_step`` and ``prebuildopts`` / ``buildopts`` ( `#423 <https://github.com/easybuilders/easybuild-easyblocks/pull/423> `_ ) * enhance Mothur easyblock to guess correct start dir for recent versions ( `#424 <https://github.com/easybuilders/easybuild-easyblocks/pull/424> `_ ) * replace use of deprecated (pre)makeopts with ( ``pre`` ) ``buildopts`` in all easyblocks ( `#427 <https://github.com/easybuilders/easybuild-easyblocks/pull/427> `_ ) * fix poor mans version of toolchain compiler detection in imkl easyblock ( `#429 <https://github.com/easybuilders/easybuild-easyblocks/pull/429> `_ ) * various bug fixes: * only check for ``idb`` for older versions of icc ( `#426 <https://github.com/easybuilders/easybuild-easyblocks/pull/426> `_ ) * fix issues with installing RPMS when ``rpmrebuild`` is required ( `#433 <https://github.com/easybuilders/easybuild-easyblocks/pull/433> `_ ) * correctly disable parallel build for ATLAS ( `#434 <https://github.com/easybuilders/easybuild-easyblocks/pull/434> `_ ) * fix sanity check for Intel MPI v5.x (only provides bin64) ( `#432 <https://github.com/easybuilders/easybuild-easyblocks/pull/432> `_ ) * add ``$MIC_LD_LIBRARY_PATH`` for MKL v11.x ( `#437 <https://github.com/easybuilders/easybuild-easyblocks/pull/437> `_ ) **easyconfigs** * added example easyconfig files for **17** new software packages: * ANSYS ( `#836 <https://github.com/easybuilders/easybuild-easyconfigs/pull/836> `_ ), Beast ( `#912 <https://github.com/easybuilders/easybuild-easyconfigs/pull/912> `_ ), ELPH ( `#910 <https://github.com/easybuilders/easybuild-easyconfigs/pull/910> `_ , `#911 <https://github.com/easybuilders/easybuild-easyconfigs/pull/911> `_ ), FastTree ( `#900 <https://github.com/easybuilders/easybuild-easyconfigs/pull/900> `_ , `#947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/947> `_ ), GEM-library ( `#858 <https://github.com/easybuilders/easybuild-easyconfigs/pull/858> `_ ), HPCG ( `#853 <https://github.com/easybuilders/easybuild-easyconfigs/pull/853> `_ ), mdtest ( `#925 <https://github.com/easybuilders/easybuild-easyconfigs/pull/925> `_ ), ncview ( `#648 <https://github.com/easybuilders/easybuild-easyconfigs/pull/648> `_ ), PRANK ( `#917 <https://github.com/easybuilders/easybuild-easyconfigs/pull/917> `_ ), RDP-Classifier ( `#903 <https://github.com/easybuilders/easybuild-easyconfigs/pull/903> `_ ), SDPA ( `#955 <https://github.com/easybuilders/easybuild-easyconfigs/pull/955> `_ ), SIBELia ( `#886 <https://github.com/easybuilders/easybuild-easyconfigs/pull/886> `_ ), SOAPaligner ( `#857 <https://github.com/easybuilders/easybuild-easyconfigs/pull/857> `_ ), SPAdes ( `#884 <https://github.com/easybuilders/easybuild-easyconfigs/pull/884> `_ ), stemming ( `#891 <https://github.com/easybuilders/easybuild-easyconfigs/pull/891> `_ ), WHAM ( `#872 <https://github.com/easybuilders/easybuild-easyconfigs/pull/872> `_ ), YAXT ( `#656 <https://github.com/easybuilders/easybuild-easyconfigs/pull/656> `_ ) * added easyconfigs for new toolchains ( `#935 <https://github.com/easybuilders/easybuild-easyconfigs/pull/935> `_ , `#944 <https://github.com/easybuilders/easybuild-easyconfigs/pull/944> `_ , `#948 <https://github.com/easybuilders/easybuild-easyconfigs/pull/948> `_ ): * foss/2014b, ictce/6.3.5, intel/2014b * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * various enhancements, including: * replace use of deprecated ``(pre)makeopts`` with ``(pre)buildopts`` in all easyblocks ( `#954 <https://github.com/easybuilders/easybuild-easyconfigs/pull/954> `_ ) * disable running embossupdate on installation of EMBOSS ( `#963 <https://github.com/easybuilders/easybuild-easyconfigs/pull/963> `_ ) * various bug fixes, including: * really enable OpenMP support in FastTree easyconfigs ( `#947 <https://github.com/easybuilders/easybuild-easyconfigs/pull/947> `_ ) * fix easyconfigs unit tests after changes in framework ( `#958 <https://github.com/easybuilders/easybuild-easyconfigs/pull/958> `_ ) EasyBuild v1.13.0 (May 29th 2014) --------------------------------- feature + bugfix release **framework** * make ``--try-X`` command line options work recursively (i.e. collaborate with ``--robot`` ) ( `#922 <https://github.com/easybuilders/easybuild-framework/pull/922> `_ ) * EasyBuild will first build a full dependency graph of the specified easyconfigs, and then apply the ``--try`` specifications * the elements of the dependency graph for the used toolchain and its dependencies are left untouched * this makes ``eb foo-1.0-goolf-1.4.10.eb --try-toolchain=ictce,5.5.0 --robot`` also work when ``foo`` has dependencies * caveat: the specified easyconfig files must all use the same toolchain (version) * add support for testing easyconfig pull requests from EasyBuild command line ( `#920 <https://github.com/easybuilders/easybuild-framework/pull/920> `_ , `#924 <https://github.com/easybuilders/easybuild-framework/pull/924> `_ , `#925 <https://github.com/easybuilders/easybuild-framework/pull/925> `_ , `#932 <https://github.com/easybuilders/easybuild-framework/pull/932> `_ , `#933 <https://github.com/easybuilders/easybuild-framework/pull/933> `_ , `#938 <https://github.com/easybuilders/easybuild-framework/pull/938> `_ ) * add ``--from-pr`` command line option for downloading easyconfig files from pull requests * add ``--upload-test-report`` command line option for uploading a detailed test report to GitHub as a gist * this requires specifying a GitHub username for which a GitHub token is available, using ``--github-user`` * with ``--dump-test-report`` , the test report can simply be dumped to file rather than being uploaded to GitHub * see also https://github.com/easybuilders/easybuild/wiki/Review-process-for-contributions#testing-result * the ``makeopts`` and ``premakeopts`` easyconfig parameter are deprecated, and replaced by ``buildopts`` and ``prebuildopts`` ( `#918 <https://github.com/easybuilders/easybuild-framework/pull/918> `_ ) * both ``makeopts`` and ``premakeopts`` will still be honored in future EasyBuild v1.x versions, but should no longer be used * various other enhancements, including: * add ``--disable-cleanup-builddir`` command line option, to keep the build dir after a (successful) build ( `#853 <https://github.com/easybuilders/easybuild-framework/pull/853> `_ ) * the build dir is still cleaned up by default for successful builds, i.e. ``--cleanup-builddir`` is the default * also consider lib32 in paths checked for ``$LD_LIBRARY_PATH`` and ``$LIBRARY_PATH`` ( `#912 <https://github.com/easybuilders/easybuild-framework/pull/912> `_ ) * reorganize support for file/git/svn repositories into ``repository`` package, making it extensible ( `#913 <https://github.com/easybuilders/easybuild-framework/pull/913> `_ ) * add support for ``postinstallcmds`` easyconfig parameter, to specify commands that need to be run after the install step ( `#918 <https://github.com/easybuilders/easybuild-framework/pull/918> `_ ) * make ``VERSION=`` part in version of C environment modules tool optional, which is required for older versions ( `#930 <https://github.com/easybuilders/easybuild-framework/pull/930> `_ ) * various bug fixes, including: * fix small issues in bootstrap script: correctly determine EasyBuild version and make sure modules path exists ( `#915 <https://github.com/easybuilders/easybuild-framework/pull/915> `_ ) * fix github unit tests ( `#916 <https://github.com/easybuilders/easybuild-framework/pull/916> `_ ) * disable useless debug logging for unit tests ( `#919 <https://github.com/easybuilders/easybuild-framework/pull/919> `_ ) * fix unit test for ``--skip`` ( `#929 <https://github.com/easybuilders/easybuild-framework/pull/929> `_ ) * make sure ``start_dir`` can be set based on location of unpacked first source file ( `#931 <https://github.com/easybuilders/easybuild-framework/pull/931> `_ ) * the ``vsc`` package shipped with easybuild-framework is synced with vsc-base v1.9.1 ( `#935 <https://github.com/easybuilders/easybuild-framework/pull/935> `_ ) * fancylogger (used for logging in EasyBuild) is now robust against strings containing UTF8 characters * the ``deprecated`` logging function now does a non-strict version check (rather than an erroneous strict check) * the ``easybuild.tools.agithub`` module is removed, ``vsc.utils.rest`` now provides the required functionality * fix support for unpacking gzipped source files, don't unpack ``.gz`` files in-place in the source directory ( `#936 <https://github.com/easybuilders/easybuild-framework/pull/936> `_ ) **easyblocks** * added support for **1** new software package that requires customized support: * Go ( `#417 <https://github.com/easybuilders/easybuild-easyblocks/pull/417> `_ ) * various enhancements, including: * enhance OpenFOAM easyblock so OpenFOAM-Extend fork can be built too + style fixes ( `#253 <https://github.com/easybuilders/easybuild-easyblocks/pull/253> `_ , `#416 <https://github.com/easybuilders/easybuild-easyblocks/pull/416> `_ ) * enhance CPLEX easyblock by adding support for staged installation ( `#372 <https://github.com/easybuilders/easybuild-easyblocks/pull/372> `_ ) * include support for ``configure_cmd_prefix`` easyconfig parameter in ConfigureMake generic easyblock ( `#393 <https://github.com/easybuilders/easybuild-easyblocks/pull/393> `_ ) * enhance GCC easyblock for building v4.9.0 and versions prior to v4.5 ( `#396 <https://github.com/easybuilders/easybuild-easyblocks/pull/396> `_ , `#400 <https://github.com/easybuilders/easybuild-easyblocks/pull/400> `_ ) * enhance easyblocks for Intel ipp and itac to support recent versions ( `#399 <https://github.com/easybuilders/easybuild-easyblocks/pull/399> `_ ) * enhance Clang easyblock: install static analyzer ( `#402 <https://github.com/easybuilders/easybuild-easyblocks/pull/402> `_ ), be more robust against changing source dir names ( `#413 <https://github.com/easybuilders/easybuild-easyblocks/pull/413> `_ ) * enhance FoldX easyblock, update list of potential FoldX binaries to support recent versions ( `#407 <https://github.com/easybuilders/easybuild-easyblocks/pull/407> `_ ) * add runtime patching in Boost easyblock to fix build issue with old Boost versions and recent glibc (> 2.15) ( `#412 <https://github.com/easybuilders/easybuild-easyblocks/pull/412> `_ ) * enhance ``MakeCp`` generic easyblock: use location of 1st unpacked source as fallback base dir for ``files_to_copy`` ( `#415 <https://github.com/easybuilders/easybuild-easyblocks/pull/415> `_ ) * various bug fixes: * fix installing Mathematica when X forwarding is enabled (make sure ``$DISPLAY`` is unset) ( `#391 <https://github.com/easybuilders/easybuild-easyblocks/pull/391> `_ ) * fix permissions of installed files in SAMtools easyblock, ensure read/execute for group/other ( `#409 <https://github.com/easybuilders/easybuild-easyblocks/pull/409> `_ ) * fix implementation of ``det_pylibdir`` function in PythonPackage generic easyblock ( `#419 <https://github.com/easybuilders/easybuild-easyblocks/pull/419> `_ , `#420 <https://github.com/easybuilders/easybuild-easyblocks/pull/420> `_ ) * determine Python lib dir via ``distutils`` Python, which works cross-OS (as opposed to hardcoding ``lib`` ) **easyconfigs** * added example easyconfig files for **32** new software packages: * APBS ( `#742 <https://github.com/easybuilders/easybuild-easyconfigs/pull/742> `_ ), BayesTraits ( `#770 <https://github.com/easybuilders/easybuild-easyconfigs/pull/770> `_ ), bc ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), BitSeq ( `#791 <https://github.com/easybuilders/easybuild-easyconfigs/pull/791> `_ ), CEM ( `#789 <https://github.com/easybuilders/easybuild-easyconfigs/pull/789> `_ ), CVS ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), eXpress ( `#786 <https://github.com/easybuilders/easybuild-easyconfigs/pull/786> `_ ), file ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), GEMSTAT ( `#861 <https://github.com/easybuilders/easybuild-easyconfigs/pull/861> `_ ), GMAP ( `#594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/594> `_ ), Go ( `#887 <https://github.com/easybuilders/easybuild-easyconfigs/pull/887> `_ ), iscp ( `#602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/602> `_ ), IsoInfer ( `#773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/773> `_ ), Jellyfish ( `#868 <https://github.com/easybuilders/easybuild-easyconfigs/pull/868> `_ ), less ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ), libcircle ( `#883 <https://github.com/easybuilders/easybuild-easyconfigs/pull/883> `_ ), mcpp ( `#602 <https://github.com/easybuilders/easybuild-easyconfigs/pull/602> `_ ), MMSEQ ( `#795 <https://github.com/easybuilders/easybuild-easyconfigs/pull/795> `_ ), MUSTANG ( `#800 <https://github.com/easybuilders/easybuild-easyconfigs/pull/800> `_ ), OpenFOAM-Extend ( `#437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/437> `_ ), popt ( `#759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/759> `_ ), pscom ( `#759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/759> `_ ), psmpi2 ( `#759 <https://github.com/easybuilders/easybuild-easyconfigs/pull/759> `_ ), QuadProg++ ( `#773 <https://github.com/easybuilders/easybuild-easyconfigs/pull/773> `_ ), rSeq ( `#771 <https://github.com/easybuilders/easybuild-easyconfigs/pull/771> `_ ), RSEQtools ( `#870 <https://github.com/easybuilders/easybuild-easyconfigs/pull/870> `_ ), Ruby ( `#873 <https://github.com/easybuilders/easybuild-easyconfigs/pull/873> `_ ), segemehl ( `#792 <https://github.com/easybuilders/easybuild-easyconfigs/pull/792> `_ ), SOAPec ( `#879 <https://github.com/easybuilders/easybuild-easyconfigs/pull/879> `_ ), SOAPdenovo2 ( `#874 <https://github.com/easybuilders/easybuild-easyconfigs/pull/874> `_ ), SRA-Toolkit ( `#793 <https://github.com/easybuilders/easybuild-easyconfigs/pull/793> `_ ), texinfo ( `#888 <https://github.com/easybuilders/easybuild-easyconfigs/pull/888> `_ ) * added easyconfig for new toolchain goolfc/1.4.10 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * e.g., older versions of Boost (1.47.0), GCC (4.1-4.4), & recent versions of Clang, GCC, Lmod, etc. * various enhancements, including: * add OpenSSL dependency for cURL, to enable HTTPS support ( `#881 <https://github.com/easybuilders/easybuild-easyconfigs/pull/881> `_ ) * also install esl-X binaries for HMMER ( `#889 <https://github.com/easybuilders/easybuild-easyconfigs/pull/889> `_ ) * various bug fixes, including: * properly pass down compiler flags for ParMGridGen ( `#437 <https://github.com/easybuilders/easybuild-easyconfigs/pull/437> `_ ) * specify proper make options for PLINK, fixing the build on SL6 ( `#594 <https://github.com/easybuilders/easybuild-easyconfigs/pull/594> `_ , `#772 <https://github.com/easybuilders/easybuild-easyconfigs/pull/772> `_ ) * fix netloc version (0.5 rather than 0.5beta) ( `#707 <https://github.com/easybuilders/easybuild-easyconfigs/pull/707> `_ ) * remove Windows-style line ending in netCDF patch file ( `#796 <https://github.com/easybuilders/easybuild-easyconfigs/pull/796> `_ ) * bump version of OpenSSL dep for BOINC ( `#882 <https://github.com/easybuilders/easybuild-easyconfigs/pull/882> `_ ) EasyBuild v1.12.1 (April 25th 2014) ----------------------------------- bugfix release **framework** * return to original directory after executing a command in a subdir ( `#908 <https://github.com/easybuilders/easybuild-framework/pull/908> `_ ) * fix bootstrap with Lmod, fix issue with module function check and Lmod ( `#911 <https://github.com/easybuilders/easybuild-framework/pull/911> `_ ) **easyblocks** `(no changes compared to v1.12.0, simple version bump to stay in sync with easybuild-framework)` **easyconfigs** `(no changes compared to v1.12.0, simple version bump to stay in sync with easybuild-framework)` EasyBuild v1.12.0 (April 4th 2014) ---------------------------------- feature + bugfix release **framework** * various enhancements, including: * completed support for custom module naming schemes ( `#879 <https://github.com/easybuilders/easybuild-framework/pull/879> `_ , `#904 <https://github.com/easybuilders/easybuild-framework/pull/904> `_ ) * a fully parsed easyconfig file is now passed to the ``det_full_module_name`` function * this does require that an easyconfig file matching the dependency specification is available * added more features to better support using a shared install target with multiple users ( `#902 <https://github.com/easybuilders/easybuild-framework/pull/902> `_ , `#903 <https://github.com/easybuilders/easybuild-framework/pull/903> `_ , `#904 <https://github.com/easybuilders/easybuild-framework/pull/904> `_ ) * further development on support for new easyconfig format (v2.0) ( `#844 <https://github.com/easybuilders/easybuild-framework/pull/844> `_ , `#848 <https://github.com/easybuilders/easybuild-framework/pull/848> `_ ) * not considered stable yet, so still requires using ``--experimental`` * enhanced bootstrap script to also support Lmod and ``modulecmd.tcl`` module tools ( `#869 <https://github.com/easybuilders/easybuild-framework/pull/869> `_ ) * added support to ``run_cmd_qa`` function to supply a list of answers ( `#887 <https://github.com/easybuilders/easybuild-framework/pull/887> `_ ) * detect mismatch between definition of ``module`` function and selected modules tool ( `#871 <https://github.com/easybuilders/easybuild-framework/pull/871> `_ ) * allowing mismatch now requires ``--allow-modules-tool-mismatch`` ; an empty ``module`` function is simply ignored * provide lib64 fallback option for directories in default sanity check paths ( `#896 <https://github.com/easybuilders/easybuild-framework/pull/896> `_ ) * add support for adding JAR files to ``$CLASSPATH`` ( `#898 <https://github.com/easybuilders/easybuild-framework/pull/898> `_ ) * enhanced and cleaned up unit tests ( `#877 <https://github.com/easybuilders/easybuild-framework/pull/877> `_ , `#880 <https://github.com/easybuilders/easybuild-framework/pull/880> `_ , `#884 <https://github.com/easybuilders/easybuild-framework/pull/884> `_ , `#899 <https://github.com/easybuilders/easybuild-framework/pull/899> `_ , `#901 <https://github.com/easybuilders/easybuild-framework/pull/901> `_ ) * code cleanup and refactoring * get rid of global variable for configuration settings in ``config.py`` , use singleton instead ( `#874 <https://github.com/easybuilders/easybuild-framework/pull/874> `_ , `#888 <https://github.com/easybuilders/easybuild-framework/pull/888> `_ , `#890 <https://github.com/easybuilders/easybuild-framework/pull/890> `_ , `#892 <https://github.com/easybuilders/easybuild-framework/pull/892> `_ ) * track build options via singleton in ``config.py`` rather than passing them around all over ( `#886 <https://github.com/easybuilders/easybuild-framework/pull/886> `_ , `#889 <https://github.com/easybuilders/easybuild-framework/pull/889> `_ ) * avoid parsing easyconfig files multiple times by passing a parsed easyconfig to the easyblock ( `#891 <https://github.com/easybuilders/easybuild-framework/pull/891> `_ ) * deprecate list of tuples return type of ``extra_options`` static method ( `#893 <https://github.com/easybuilders/easybuild-framework/pull/893> `_ , `#894 <https://github.com/easybuilders/easybuild-framework/pull/894> `_ ) * move OS dependency check to ``systemtools.py`` module ( `#895 <https://github.com/easybuilders/easybuild-framework/pull/895> `_ ) * bug fixes, including: * fix linking with ``-lcudart`` if CUDA is part of the toolchain, should also include ``-lrt`` ( `#882 <https://github.com/easybuilders/easybuild-framework/pull/882> `_ ) **easyblocks** * various enhancements, including: * also run ``Perl Build build`` for Perl modules (usually not required, but sometimes it is) ( `#380 <https://github.com/easybuilders/easybuild-easyblocks/pull/380> `_ ) * added glob support in generic makecp block ( `#367 <https://github.com/easybuilders/easybuild-easyblocks/pull/367> `_ , `#384 <https://github.com/easybuilders/easybuild-easyblocks/pull/384> `_ ) * enhance sanity check in GCC easyblock such that it also passes/works on OpenSuSE ( `#365 <https://github.com/easybuilders/easybuild-easyblocks/pull/365> `_ ) * add multilib support in GCC easyblock ( `#379 <https://github.com/easybuilders/easybuild-easyblocks/pull/379> `_ ) * various bug fixes: * Clang: disable sanitizer tests when vmem limit is set ( `#366 <https://github.com/easybuilders/easybuild-easyblocks/pull/366> `_ ) * make sure all libraries are installed for recent Intel MKL versions ( `#375 <https://github.com/easybuilders/easybuild-easyblocks/pull/375> `_ ) * fix appending Intel MPI include directories to ``$CPATH`` ( `#371 <https://github.com/easybuilders/easybuild-easyblocks/pull/371> `_ ) * statically link readline/ncurses libraries in Python and NWChem easyblocks ( `#370 <https://github.com/easybuilders/easybuild-easyblocks/pull/370> `_ , `#383 <https://github.com/easybuilders/easybuild-easyblocks/pull/383> `_ , `#385 <https://github.com/easybuilders/easybuild-easyblocks/pull/385> `_ ) * fix easyblock unit tests after changes in framework ( `#376 <https://github.com/easybuilders/easybuild-easyblocks/pull/376> `_ , `#377 <https://github.com/easybuilders/easybuild-easyblocks/pull/377> `_ , `#378 <https://github.com/easybuilders/easybuild-easyblocks/pull/378> `_ ) **easyconfigs** * added example easyconfig files for **6** new software packages: * CLooG ( `#653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/653> `_ ), ELPA ( `#738 <https://github.com/easybuilders/easybuild-easyconfigs/pull/738> `_ ), LIBSVM ( `#788 <https://github.com/easybuilders/easybuild-easyconfigs/pull/788> `_ ), netaddr ( `#753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/753> `_ ), netifcas ( `#753 <https://github.com/easybuilders/easybuild-easyconfigs/pull/753> `_ ), slalib-c ( `#750 <https://github.com/easybuilders/easybuild-easyconfigs/pull/750> `_ ) * added easyconfigs for new toolchains: * ClangGCC/1.3.0 ( `#653 <https://github.com/easybuilders/easybuild-easyconfigs/pull/653> `_ ), goolf/1.4.10-no-OFED ( `#749 <https://github.com/easybuilders/easybuild-easyconfigs/pull/749> `_ ), goolf/1.5.14(-no-OFED) ( `#764 <https://github.com/easybuilders/easybuild-easyconfigs/pull/764> `_ , `#767 <https://github.com/easybuilders/easybuild-easyconfigs/pull/767> `_ ), ictce/6.2.5 ( `#726 <https://github.com/easybuilders/easybuild-easyconfigs/pull/726> `_ ), iomkl ( `#747 <https://github.com/easybuilders/easybuild-easyconfigs/pull/747> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * various enhancements, including: * tweak BOINC easyconfig to make use of ``glob`` support available for ``files_to_copy`` ( `#781 <https://github.com/easybuilders/easybuild-easyconfigs/pull/781> `_ ) * enable ``-fPIC`` for libreadline, so it can be linked into shared libs (e.g. ``libpython2.x.so`` ) ( `#798 <https://github.com/easybuilders/easybuild-easyconfigs/pull/798> `_ ) * various bug fixes, including: * fix Qt source_urls ( `#756 <https://github.com/easybuilders/easybuild-easyconfigs/pull/756> `_ ) * enable ``-fPIC`` in ncurses 5.9 ictce/5.2.0 easyconfig, just like in the others ( `#801 <https://github.com/easybuilders/easybuild-easyconfigs/pull/801> `_ ) * fix unit tests after changes to framework ( `#763 <https://github.com/easybuilders/easybuild-easyconfigs/pull/763> `_ , `#766 <https://github.com/easybuilders/easybuild-easyconfigs/pull/766> `_ , `#769 <https://github.com/easybuilders/easybuild-easyconfigs/pull/769> `_ ) EasyBuild v1.11.1 (February 28th 2014) -------------------------------------- bugfix release **framework** * various bug fixes, including: * fix hard crash when ``$LMOD_CMD`` specified full path to lmod binary, but ``spider`` binary is not in ``$PATH`` ( `#861 <https://github.com/easybuilders/easybuild-framework/pull/861> `_ , `#873 <https://github.com/easybuilders/easybuild-framework/pull/873> `_ ) * fix bug in initialisation of repositories, causing problems when a repository subdirectory is specified ( `#852 <https://github.com/easybuilders/easybuild-framework/pull/852> `_ ) * avoid long wait when dependency resolution fails if ``--robot`` is not specified ( `#875 <https://github.com/easybuilders/easybuild-framework/pull/875> `_ ) **easyblocks** `(no changes compared to v1.11.0, simple version bump to stay in sync with easybuild-framework)` **easyconfigs** `(no changes compared to v1.11.0, simple version bump to stay in sync with easybuild-framework)` EasyBuild v1.11.0 (February 16th 2014) -------------------------------------- feature + bugfix release **framework** * various enhancements, including: * add checksum support for extensions ( `#807 <https://github.com/easybuilders/easybuild-framework/pull/807> `_ ) * make checksum functionality more memory efficient by reading in blocks ( `#836 <https://github.com/easybuilders/easybuild-framework/pull/836> `_ ) * rewrite of dependency solving for speed and better reporting of missing dependencies ( `#806 <https://github.com/easybuilders/easybuild-framework/pull/806> `_ , `#818 <https://github.com/easybuilders/easybuild-framework/pull/818> `_ ) * refactoring of ``main.py`` ( `#815 <https://github.com/easybuilders/easybuild-framework/pull/815> `_ , `#828 <https://github.com/easybuilders/easybuild-framework/pull/828> `_ ) * function/method signatures to pass down build options * move functions from main.py into easybuild.framework.X or easybuild.tools * provide better build statistics ( `#824 <https://github.com/easybuilders/easybuild-framework/pull/824> `_ ) * add --experimental, ``--deprecated`` and ``--oldstyleconfig`` command line options ( `#838 <https://github.com/easybuilders/easybuild-framework/pull/838> `_ ) * with ``--experimental`` , new but incomplete (or partially broken) features are enabled * with ``--deprecated`` , removed of deprecated functionality can be tested (anything deprecated will fail hard) * with ``--disable-oldstyleconfig`` , support for the old style configuration is disabled * define ``$LIBRARY_PATH`` in generated module files ( `#832 <https://github.com/easybuilders/easybuild-framework/pull/832> `_ ) * more constants for source URLs (e.g. for downloads from bitbucket) ( `#831 <https://github.com/easybuilders/easybuild-framework/pull/831> `_ ) * prefer ``$XDG_CONFIG_HOME`` and ``~/.config/easybuild`` over ``~/.easybuild`` for configuration files ( `#820 <https://github.com/easybuilders/easybuild-framework/pull/820> `_ ) * add support for specifying footers to be appended to generated module files ( `#808 <https://github.com/easybuilders/easybuild-framework/pull/808> `_ ) * see ``--modules-footer`` command line option * track version of modules tool + cleanup of ``modules.py`` ( `#839 <https://github.com/easybuilders/easybuild-framework/pull/839> `_ ) * move actual ``run_cmd`` and ``run_cmd_qa`` implementations from ``tools.filetools`` into ``tools.run`` ( `#842 <https://github.com/easybuilders/easybuild-framework/pull/842> `_ , `#843 <https://github.com/easybuilders/easybuild-framework/pull/843> `_ ) * add support for generating modules that support recursive unloading ( `#830 <https://github.com/easybuilders/easybuild-framework/pull/830> `_ ) * see ``--recursive-module-unload`` command line option * add flexibility support for specifying OS dependencies ( `#846 <https://github.com/easybuilders/easybuild-framework/pull/846> `_ ) * alternatives can be specified, e.g. ( ``openssl-devel`` , ``libssl-dev`` ) * initial (incomplete) support for easyconfig files in new format (v2.0) ( `#810 <https://github.com/easybuilders/easybuild-framework/pull/810> `_ , `#826 <https://github.com/easybuilders/easybuild-framework/pull/826> `_ , `#827 <https://github.com/easybuilders/easybuild-framework/pull/827> `_ , `#841 <https://github.com/easybuilders/easybuild-framework/pull/841> `_ ) * requires ``--experimental`` to be able to experiment with format v2 easyconfig files * various bug fixes, including: * fix problems with use of new-style configuration file ( `#821 <https://github.com/easybuilders/easybuild-framework/pull/821> `_ ) * fix removal of old build directories, unless ``cleanupoldbuild`` easyconfig parameter is set ( `#809 <https://github.com/easybuilders/easybuild-framework/pull/809> `_ ) * fix support for different types of repository path specifications ( `#814 <https://github.com/easybuilders/easybuild-framework/pull/814> `_ ) * fix unit tests sensitive to ``$MODULEPATH`` and available easyblocks ( `#845 <https://github.com/easybuilders/easybuild-framework/pull/845> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``VSCPythonPackage`` (`#348 <https://github.com/easybuilders/easybuild-easyblocks/pull/348> `_ ) * added support for **1** new software package that requires customized support: * netcdf4-python ( `#347 <https://github.com/easybuilders/easybuild-easyblocks/pull/347> `_ ) * various enhancements, including: * add support for installing recent tbb versions ( `#341 <https://github.com/easybuilders/easybuild-easyblocks/pull/341> `_ ) * use ``makeopts`` in the build step of the generic ``PythonPackage`` easyblock ( `#352 <https://github.com/easybuilders/easybuild-easyblocks/pull/352> `_ ) * define the ``$CMAKE_INCLUDE_PATH`` and ``$CMAKE_LIBRARY_PATH`` in the generic ``CMakeMake`` easyblock ( `#351 <https://github.com/easybuilders/easybuild-easyblocks/pull/351> `_ , `#360 <https://github.com/easybuilders/easybuild-easyblocks/pull/360> `_ ) * update Clang easyblock to support v3.4 ( `#346 <https://github.com/easybuilders/easybuild-easyblocks/pull/346> `_ ) * make sure Python is built with SSL support, adjust Python easyblock to pick up OpenSSL dep ( `#359 <https://github.com/easybuilders/easybuild-easyblocks/pull/359> `_ ) * note: providing OpenSSL via an OS package is still recommended, such that security updates are picked up * add support for recent netCDF versions ( `#347 <https://github.com/easybuilders/easybuild-easyblocks/pull/347> `_ ) * update SuiteSparse easyblock for new versions, and clean it up a bit ( `#350 <https://github.com/easybuilders/easybuild-easyblocks/pull/350> `_ ) * various bug fixes: * fix name of ``VersionIndependentPythonPackage`` easyblock, deprecate ``VersionIndependendPythonPackage`` easyblock ( `#348 <https://github.com/easybuilders/easybuild-easyblocks/pull/348> `_ ) * fix detection of machine architecture in FSL easyblock ( `#353 <https://github.com/easybuilders/easybuild-easyblocks/pull/353> `_ ) * fix bug in NWChem easyblock w.r.t. creating local dummy ``.nwchem`` file ( `#360 <https://github.com/easybuilders/easybuild-easyblocks/pull/360> `_ ) * make sure ``$LIBRARY_PATH`` is set for Intel compilers and Intel MPI, fix 64-bit specific paths ( `#360 <https://github.com/easybuilders/easybuild-easyblocks/pull/360> `_ ) **easyconfigs** * added example easyconfig files for **30** new software packages: * argtable ( `#669 <https://github.com/easybuilders/easybuild-easyconfigs/pull/669> `_ ), Clustal-Omega ( `#669 <https://github.com/easybuilders/easybuild-easyconfigs/pull/669> `_ ), Coreutils ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), GMT ( `#560 <https://github.com/easybuilders/easybuild-easyconfigs/pull/560> `_ ), gperftools ( `#596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/596> `_ ), grep ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), h4toh5 ( `#597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/597> `_ ), libunwind ( `#596 <https://github.com/easybuilders/easybuild-easyconfigs/pull/596> `_ ), Lmod ( `#600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/600> `_ , `#692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/692> `_ ), Lua ( `#600 <https://github.com/easybuilders/easybuild-easyconfigs/pull/600> `_ , `#692 <https://github.com/easybuilders/easybuild-easyconfigs/pull/692> `_ ), MAFFT ( `#654 <https://github.com/easybuilders/easybuild-easyconfigs/pull/654> `_ ), Molekel ( `#597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/597> `_ ), NEdit ( `#597 <https://github.com/easybuilders/easybuild-easyconfigs/pull/597> `_ ), netcdf4-python ( `#660 <https://github.com/easybuilders/easybuild-easyconfigs/pull/660> `_ ), nodejs ( `#678 <https://github.com/easybuilders/easybuild-easyconfigs/pull/678> `_ ), OCaml ( `#704 <https://github.com/easybuilders/easybuild-easyconfigs/pull/704> `_ ), patch ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), PhyML ( `#664 <https://github.com/easybuilders/easybuild-easyconfigs/pull/664> `_ ), PRACE Common Production Environment ( `#599 <https://github.com/easybuilders/easybuild-easyconfigs/pull/599> `_ ), protobuf ( `#680 <https://github.com/easybuilders/easybuild-easyconfigs/pull/680> `_ ), python-dateutil ( `#438 <https://github.com/easybuilders/easybuild-easyconfigs/pull/438> `_ ), sed ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ), sickle ( `#651 <https://github.com/easybuilders/easybuild-easyconfigs/pull/651> `_ ), Tesla-Deployment-Kit ( `#489 <https://github.com/easybuilders/easybuild-easyconfigs/pull/489> `_ ), TREE-PUZZLE ( `#662 <https://github.com/easybuilders/easybuild-easyconfigs/pull/662> `_ ), VCFtools ( `#626 <https://github.com/easybuilders/easybuild-easyconfigs/pull/626> `_ ), Vim ( `#665 <https://github.com/easybuilders/easybuild-easyconfigs/pull/665> `_ ), vsc-mympirun-scoop ( `#661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/661> `_ ), vsc-processcontrol ( `#661 <https://github.com/easybuilders/easybuild-easyconfigs/pull/661> `_ ), XZ ( `#582 <https://github.com/easybuilders/easybuild-easyconfigs/pull/582> `_ ) * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * OpenSSL with ictce toolchain ( `#703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/703> `_ ) * various enhancements, including: * using more constants and templates ( `#613 <https://github.com/easybuilders/easybuild-easyconfigs/pull/613> `_ , `#615 <https://github.com/easybuilders/easybuild-easyconfigs/pull/615> `_ ) * specify OS dependency for SSL support, with OpenSSL dependency as fallback ( `#703 <https://github.com/easybuilders/easybuild-easyconfigs/pull/703> `_ ) * various bug fixes, including: * fix unit tests after (internal) framework API changes ( `#667 <https://github.com/easybuilders/easybuild-easyconfigs/pull/667> `_ , `#672 <https://github.com/easybuilders/easybuild-easyconfigs/pull/672> `_ ) * fix homepage in vsc-mympirun easyconfig file ( `#681 <https://github.com/easybuilders/easybuild-easyconfigs/pull/681> `_ ) * align OpenMPI easyconfigs ( `#650 <https://github.com/easybuilders/easybuild-easyconfigs/pull/650> `_ ) * add additional source URL in Qt easyconfigs ( `#676 <https://github.com/easybuilders/easybuild-easyconfigs/pull/676> `_ ) * specify correct $PATH specification and define ``$CHPL_HOME`` for Chapel ( `#683 <https://github.com/easybuilders/easybuild-easyconfigs/pull/683> `_ ) EasyBuild v1.10.0 (December 24th 2013) -------------------------------------- feature + bugfix release **framework** * various enhancements, including: * set unique default temporary directory, add ``--tmpdir`` command line option ( `#695 <https://github.com/easybuilders/easybuild-framework/pull/695> `_ ) * add support for computing and verifying source/patch file checksums ( `#774 <https://github.com/easybuilders/easybuild-framework/pull/774> `_ , `#777 <https://github.com/easybuilders/easybuild-framework/pull/777> `_ , `#779 <https://github.com/easybuilders/easybuild-framework/pull/779> `_ , `#801 <https://github.com/easybuilders/easybuild-framework/pull/801> `_ , `#802 <https://github.com/easybuilders/easybuild-framework/pull/802> `_ ) * cfr. ``checksums`` easyconfig parameter * add support for `eb --confighelp`, which prints out an example configuration file (`#775 <https://github.com/easybuilders/easybuild-framework/pull/775> `_ ) * add initial support for ``eb`` tab completion in bash shells ( `#775 <https://github.com/easybuilders/easybuild-framework/pull/775> `_ , `#797 <https://github.com/easybuilders/easybuild-framework/pull/797> `_ , `#798 <https://github.com/easybuilders/easybuild-framework/pull/798> `_ ) * see also https://github.com/easybuilders/easybuild/wiki/Setting-up-tab-completion-for-bash * note: may be quite slow for now * enhancements for using Lmod as modules tool ( `#780 <https://github.com/easybuilders/easybuild-framework/pull/780> `_ , `#795 <https://github.com/easybuilders/easybuild-framework/pull/795> `_ , `#796 <https://github.com/easybuilders/easybuild-framework/pull/796> `_ ): * ignore Lmod spider cache by setting ``$LMOD_IGNORE_CACHE`` (requires Lmod 5.2) * bump required Lmod version to v5.2 * get rid of slow workaround for detecting module directories (only required for older Lmod versions) * fix version parsing for Lmod release candidates (rc) * improve integration with `lmod spider` by adding ``Description: `` prefix to ``module-whatis`` field of module * add ``--dry-short-short`` / ``-D`` and ``--search-short`` / ``-S`` command line options ( `#781 <https://github.com/easybuilders/easybuild-framework/pull/781> `_ ) * add toolchain definition for 'gompic', intended for using with CUDA-aware OpenMPI ( `#783 <https://github.com/easybuilders/easybuild-framework/pull/783> `_ ) * add support for specifying multiple robot paths ( `#786 <https://github.com/easybuilders/easybuild-framework/pull/786> `_ ) * add various source URL constants, add support for ``%(nameletter)s`` and ``%(nameletterlower)s`` templates ( `#793 <https://github.com/easybuilders/easybuild-framework/pull/793> `_ ) * add ``buildininstalldir`` easyconfig parameter ( `#794 <https://github.com/easybuilders/easybuild-framework/pull/794> `_ ) * add ``--ignore-osdeps`` command line option ( `#799 <https://github.com/easybuilders/easybuild-framework/pull/799> `_ , `#802 <https://github.com/easybuilders/easybuild-framework/pull/802> `_ ) * various bug fixes, including: * enable ``-mt_mpi`` compiler flag if both ``usempi`` and ``openmp`` toolchain options are enabled ( `#771 <https://github.com/easybuilders/easybuild-framework/pull/771> `_ ) * only use ``libmkl_solver*`` libraries for Intel MKL versions prior to 10.3 ( `#776 <https://github.com/easybuilders/easybuild-framework/pull/776> `_ ) * fix toolchain support for recent Intel tools ( `#785 <https://github.com/easybuilders/easybuild-framework/pull/785> `_ ) * code style fixes in ``main.py`` to adhere more to PEP8 ( `#789 <https://github.com/easybuilders/easybuild-framework/pull/789> `_ ) * make sure ``easyblock`` easyconfig parameter is listed in ``eb -a`` ( `#791 <https://github.com/easybuilders/easybuild-framework/pull/791> `_ ) * fix error that may pop up when using ``skipsteps=source`` ( `#792 <https://github.com/easybuilders/easybuild-framework/pull/792> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``VersionIndependendPythonPackage`` (`#329 <https://github.com/easybuilders/easybuild-easyblocks/pull/329> `_ , `#334 <https://github.com/easybuilders/easybuild-easyblocks/pull/334> `_ ) * added support for **2** new software packages that require customized support: * Charmm ( `#318 <https://github.com/easybuilders/easybuild-easyblocks/pull/318> `_ ), GROMACS ( `#335 <https://github.com/easybuilders/easybuild-easyblocks/pull/335> `_ , `#339 <https://github.com/easybuilders/easybuild-easyblocks/pull/339> `_ ) * various enhancements, including: * fix support for recent SAMtools version (>= 0.1.19) ( `#320 <https://github.com/easybuilders/easybuild-easyblocks/pull/320> `_ ) * fix support for recent Intel tools (icc, ifort, imkl, impi) ( `#325 <https://github.com/easybuilders/easybuild-easyblocks/pull/325> `_ , `#327 <https://github.com/easybuilders/easybuild-easyblocks/pull/327> `_ , `#338 <https://github.com/easybuilders/easybuild-easyblocks/pull/338> `_ ) * enhance generic easyblock for installing RPMs ( `#332 <https://github.com/easybuilders/easybuild-easyblocks/pull/332> `_ ) * pick up ``preinstallopts`` in generic ``PythonPackage`` easyblock ( `#334 <https://github.com/easybuilders/easybuild-easyblocks/pull/334> `_ ) * enhance CP2K easyblock (libxc support, new versions) + style cleanup ( `#336 <https://github.com/easybuilders/easybuild-easyblocks/pull/336> `_ ) * various bug fixes: * use unwanted env var functionality to unset ``$MKLROOT`` rather than failing with an error ( `#273 <https://github.com/easybuilders/easybuild-easyblocks/pull/273> `_ ) * always include ``-w`` flag for preprocessor to suppress warnings that may break QuantumESPRESSO configure ( `#317 <https://github.com/easybuilders/easybuild-easyblocks/pull/317> `_ ) * link with multithreaded LAPACK libs for ESMF ( `#319 <https://github.com/easybuilders/easybuild-easyblocks/pull/319> `_ ) * extend ``noqanda`` list of patterns in CUDA easyblock ( `#328 <https://github.com/easybuilders/easybuild-easyblocks/pull/328> `_ , `#337 <https://github.com/easybuilders/easybuild-easyblocks/pull/337> `_ ) * add ``import _ctypes`` to Python sanity check commands to capture a common build issue ( `#329 <https://github.com/easybuilders/easybuild-easyblocks/pull/329> `_ ) * bug fixes in generic ``IntelBase`` easyblock ( `#331 <https://github.com/easybuilders/easybuild-easyblocks/pull/331> `_ , `#333 <https://github.com/easybuilders/easybuild-easyblocks/pull/333> `_ , `#335 <https://github.com/easybuilders/easybuild-easyblocks/pull/335> `_ ) * remove broken symlink ``$HOME/intel`` if present * fix use of gettempdir to obtain a common (user-specific) tmp dir to symlink ``$HOME/intel`` to * fix build of recent scipy versions with GCC-based toolchain ( `#334 <https://github.com/easybuilders/easybuild-easyblocks/pull/334> `_ ) * fix use of gettempdir to obtain common (user-specific) tmp dir for ``$HOME/.nwchemrc`` symlink ( `#340 <https://github.com/easybuilders/easybuild-easyblocks/pull/340> `_ , `#342 <https://github.com/easybuilders/easybuild-easyblocks/pull/342> `_ ) * extend ``noqanda`` list in Qt easyblock ( `#342 <https://github.com/easybuilders/easybuild-easyblocks/pull/342> `_ ) **easyconfigs** * added example easyconfig files for **18** new software packages: * BEDTools ( `#579 <https://github.com/easybuilders/easybuild-easyconfigs/pull/579> `_ , `#632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/632> `_ , `#635 <https://github.com/easybuilders/easybuild-easyconfigs/pull/635> `_ ), CAP3 ( `#548 <https://github.com/easybuilders/easybuild-easyconfigs/pull/548> `_ ), CHARMM ( `#584 <https://github.com/easybuilders/easybuild-easyconfigs/pull/584> `_ ), cutadapt ( `#620 <https://github.com/easybuilders/easybuild-easyconfigs/pull/620> `_ ), ErlangOTP ( `#556 <https://github.com/easybuilders/easybuild-easyconfigs/pull/556> `_ , `#630 <https://github.com/easybuilders/easybuild-easyconfigs/pull/630> `_ ), Ghostscript ( `#547 <https://github.com/easybuilders/easybuild-easyconfigs/pull/547> `_ , `#632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/632> `_ ), HTSeq ( `#554 <https://github.com/easybuilders/easybuild-easyconfigs/pull/554> `_ , `#632 <https://github.com/easybuilders/easybuild-easyconfigs/pull/632> `_ ), Jansson ( `#545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/545> `_ ), libjpeg-turbo ( `#574 <https://github.com/easybuilders/easybuild-easyconfigs/pull/574> `_ ), Molden ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ), netloc ( `#545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/545> `_ ), o2scl ( `#633 <https://github.com/easybuilders/easybuild-easyconfigs/pull/633> `_ ), packmol ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ), PP ( `#405 <https://github.com/easybuilders/easybuild-easyconfigs/pull/405> `_ ), qtop ( `#500 <https://github.com/easybuilders/easybuild-easyconfigs/pull/500> `_ ), TAMkin ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ), vsc-base ( `#621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/621> `_ ), vsc-mympirun ( `#621 <https://github.com/easybuilders/easybuild-easyconfigs/pull/621> `_ ) * added easyconfigs for new toolchains ( `#545 <https://github.com/easybuilders/easybuild-easyconfigs/pull/545> `_ , `#609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/609> `_ , `#629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/629> `_ ): * gcccuda/2.6.10, gompic/2.6.10, goolfc/2.6.10, ictce/6.0.5, ictce/6.1.5 * added additional easyconfigs for various supported software packages: version updates, different toolchains, ... * new versions of icc, ifort, imkl, impi ( `#609 <https://github.com/easybuilders/easybuild-easyconfigs/pull/609> `_ , `#629 <https://github.com/easybuilders/easybuild-easyconfigs/pull/629> `_ ) * large collection of ictce/5.3.0 easyconfigs ( `#627 <https://github.com/easybuilders/easybuild-easyconfigs/pull/627> `_ ) * various enhancements, including: * extended list of Python packages as extensions to Python ( `#625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/625> `_ ) * add MPI-enabled version of GROMACS + easyconfigs using ictce ( `#606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/606> `_ , `#636 <https://github.com/easybuilders/easybuild-easyconfigs/pull/636> `_ ) * clean up templating of ``source_urls`` ( `#637 <https://github.com/easybuilders/easybuild-easyconfigs/pull/637> `_ ) * various bug fixes, including: * provide alternative download URL for Mesa ( `#532 <https://github.com/easybuilders/easybuild-easyconfigs/pull/532> `_ ) * add Python versionsuffix in OpenBabel filenames ( `#566 <https://github.com/easybuilders/easybuild-easyconfigs/pull/566> `_ ) * apply no-gets patch in all M4 v1.4.16 easyconfigs ( `#623 <https://github.com/easybuilders/easybuild-easyconfigs/pull/623> `_ ) * fix patching of Python w.r.t. ``libffi`` / ``_ctypes`` issues ( `#625 <https://github.com/easybuilders/easybuild-easyconfigs/pull/625> `_ , `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * bug fixes in GROMACS easyconfigs ( `#606 <https://github.com/easybuilders/easybuild-easyconfigs/pull/606> `_ ) * change versionsuffix for non-MPI GROMACS easyconfigs to ``-mt`` * stop using 'CMakeMake' easyblock for GROMACS now that there's a dedicated GROMACS easyblock, which correctly specifies building against external BLAS/LAPACK libraries * fix Qt dependency for CGAL ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * fix libctl, libmatheval, Meep, PSI build issues caused by full paths in ``guile-config`` / ``python-config`` shebang ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * make sure HDF easyconfigs specify dedicated ``include/hdf`` include dir ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) * this is required to avoid build issues with NCL, because HDF ships it's own ``netcdf.h`` * this also triggered removal of patch files for NCL that rewrote ``include/hdf`` to ``include`` * fix WPS v3.5.1 patch file after upstream source tarball was changed, supply checksum for verification ( `#642 <https://github.com/easybuilders/easybuild-easyconfigs/pull/642> `_ ) EasyBuild v1.9.0 (November 17th 2013) ------------------------------------- feature + bugfix release **framework** * add support for Tcl environment modules ( ``modulecmd.tcl`` ) ( `#728 <https://github.com/easybuilders/easybuild-framework/pull/728> `_ , `#729 <https://github.com/easybuilders/easybuild-framework/pull/729> `_ , `#739 <https://github.com/easybuilders/easybuild-framework/pull/739> `_ ) * special care was taken to make sure also the DEISA variant of ``modulecmd.tcl`` can be used * code refactoring to prepare for supporting two formats for easyconfig files ( `#693 <https://github.com/easybuilders/easybuild-framework/pull/693> `_ , `#750 <https://github.com/easybuilders/easybuild-framework/pull/750> `_ ) * this prepares the codebase for supporting easyconfig format v2.0 * some initial work on adding support for the new easyconfig format is included, but it's by no means complete yet * the current easyconfig format (now dubbed v1.0) is still the default and only supported format, for now * for more details, see https://github.com/easybuilders/easybuild/wiki/Easyconfig-format-two * various other enhancements, including: * include a full version of vsc-base (see the ``vsc`` subdirectory) ( `#740 <https://github.com/easybuilders/easybuild-framework/pull/740> `_ ) * this is a first step towards switching to using vsc-base as a proper dependency * implement get_avail_core_count function in systemtools module that takes cpusets and co into account ( `#700 <https://github.com/easybuilders/easybuild-framework/pull/700> `_ ) * the ``get_core_count`` function is now deprecated * add ``impmkl`` toolchain definition ( `#736 <https://github.com/easybuilders/easybuild-framework/pull/736> `_ ) * make regtest more robust: put holds on jobs without dependencies, release holds once all jobs are submitted ( `#751 <https://github.com/easybuilders/easybuild-framework/pull/751> `_ ) * add support for specifying multiple alternatives for sanity check paths ( `#753 <https://github.com/easybuilders/easybuild-framework/pull/753> `_ ) * add ``get_software_libdir`` function to modules.py (along with unit tests) ( `#758 <https://github.com/easybuilders/easybuild-framework/pull/758> `_ ) * add support for more file extensions and constants w.r.t. sources ( `#738 <https://github.com/easybuilders/easybuild-framework/pull/738> `_ , `#760 <https://github.com/easybuilders/easybuild-framework/pull/760> `_ , `#761 <https://github.com/easybuilders/easybuild-framework/pull/761> `_ ) * add MPICH2 support in ``mpi_cmd_for`` function ( `#761 <https://github.com/easybuilders/easybuild-framework/pull/761> `_ ) * various bug fixes, including: * fix checking of OS dependencies on Debian/Ubuntu that have ``rpm`` command available ( `#732 <https://github.com/easybuilders/easybuild-framework/pull/732> `_ ) * make unit tests more robust w.r.t. non-writeable ``/tmp`` and loaded modules prior to starting unit tests ( `#752 <https://github.com/easybuilders/easybuild-framework/pull/752> `_ , `#756 <https://github.com/easybuilders/easybuild-framework/pull/756> `_ ) * also call ``EasyBlock`` 's sanity check in ``ExtensionEasyblock`` if paths/commands are specified in easyconfig ( `#757 <https://github.com/easybuilders/easybuild-framework/pull/757> `_ ) * set compiler family for dummy compiler, add definition of toolchain constant for dummy ( `#759 <https://github.com/easybuilders/easybuild-framework/pull/759> `_ ) * other * add build status badges for master/develop branches to ``README`` ( `#742 <https://github.com/easybuilders/easybuild-framework/pull/742> `_ ) * add scripts for installing EasyBuild develop version or setting up git development environment ( `#730 <https://github.com/easybuilders/easybuild-framework/pull/730> `_ , `#755 <https://github.com/easybuilders/easybuild-framework/pull/755> `_ ) **easyblocks** * added support for **8** new software packages that require customized support: * Allinea DDT/MAP ( `#279 <https://github.com/easybuilders/easybuild-easyblocks/pull/279> `_ ), ARB ( `#291 <https://github.com/easybuilders/easybuild-easyblocks/pull/291> `_ ), GenomeAnalysisTK ( `#278 <https://github.com/easybuilders/easybuild-easyblocks/pull/278> `_ ), OpenBabel ( `#305 <https://github.com/easybuilders/easybuild-easyblocks/pull/305> `_ , `#309 <https://github.com/easybuilders/easybuild-easyblocks/pull/309> `_ ), picard ( `#278 <https://github.com/easybuilders/easybuild-easyblocks/pull/278> `_ ), PyQuante ( `#297 <https://github.com/easybuilders/easybuild-easyblocks/pull/297> `_ ), Scalasca v1.x ( `#304 <https://github.com/easybuilders/easybuild-easyblocks/pull/304> `_ ), Score-P ( `#304 <https://github.com/easybuilders/easybuild-easyblocks/pull/304> `_ ) * the Score-P easyblock is also used for Cube 4.x, LWM2, OTF2, and Scalasca v2.x * various enhancements, including: * add support building ScaLAPACK on top of MPICH2, required for gmpolf toolchain ( `#274 <https://github.com/easybuilders/easybuild-easyblocks/pull/274> `_ ) * add support to ConfigureMake easyblock to customize configure ``--prefix`` option ( `#287 <https://github.com/easybuilders/easybuild-easyblocks/pull/287> `_ ) * add support for specifying install command in Binary easyblock ( `#288 <https://github.com/easybuilders/easybuild-easyblocks/pull/288> `_ ) * enhance CMakeMake easyblock to specify srcdir via easyconfig parameter, and to perform out-of-source builds ( `#303 <https://github.com/easybuilders/easybuild-easyblocks/pull/303> `_ ) * various bug fixes: * use correct configure flag for Szip in HDF5 easyblocks, should be ``--with-szlib`` ( `#286 <https://github.com/easybuilders/easybuild-easyblocks/pull/286> `_ , `#301 <https://github.com/easybuilders/easybuild-easyblocks/pull/301> `_ ) * add support for serial HDF5 builds ( `#290 <https://github.com/easybuilders/easybuild-easyblocks/pull/290> `_ , `#301 <https://github.com/easybuilders/easybuild-easyblocks/pull/301> `_ ) * enhance robustness of Qt easyblock w.r.t. interactive configure ( `#295 <https://github.com/easybuilders/easybuild-easyblocks/pull/295> `_ , `#302 <https://github.com/easybuilders/easybuild-easyblocks/pull/302> `_ ) * enhance support for picking up license specification via environment variables ( `#298 <https://github.com/easybuilders/easybuild-easyblocks/pull/298> `_ , `#307 <https://github.com/easybuilders/easybuild-easyblocks/pull/307> `_ ) * extend list of values for ``$CPATH`` in libint2 easyblock ( `#300 <https://github.com/easybuilders/easybuild-easyblocks/pull/300> `_ ) * fix ``extra_options`` ``super`` call in Clang easyblock ( `#306 <https://github.com/easybuilders/easybuild-easyblocks/pull/306> `_ ) * add support in Boost easyblock to specify toolset in easyconfig file ( `#308 <https://github.com/easybuilders/easybuild-easyblocks/pull/308> `_ ) * other: * add build status badges for master/develop branches to README ( `#289 <https://github.com/easybuilders/easybuild-easyblocks/pull/289> `_ ) **easyconfigs** * added example easyconfig files for **58** new software packages: * Allinea ( `#468 <https://github.com/easybuilders/easybuild-easyconfigs/pull/468> `_ ), ARB + dependencies ( `#396 <https://github.com/easybuilders/easybuild-easyconfigs/pull/396> `_ , `#493 <https://github.com/easybuilders/easybuild-easyconfigs/pull/493> `_ , `#495 <https://github.com/easybuilders/easybuild-easyconfigs/pull/495> `_ ), arpack-ng ( `#451 <https://github.com/easybuilders/easybuild-easyconfigs/pull/451> `_ , `#481 <https://github.com/easybuilders/easybuild-easyconfigs/pull/481> `_ ), CDO ( `#484 <https://github.com/easybuilders/easybuild-easyconfigs/pull/484> `_ , `#521 <https://github.com/easybuilders/easybuild-easyconfigs/pull/521> `_ ), Cube ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), ed ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), FLTK ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), GenomeAnalysisTK ( `#467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/467> `_ ), GIMPS ( `#527 <https://github.com/easybuilders/easybuild-easyconfigs/pull/527> `_ ), GTI ( `#511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/511> `_ ), IPython ( `#485 <https://github.com/easybuilders/easybuild-easyconfigs/pull/485> `_ , `#519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/519> `_ ), LWM2 ( `#510 <https://github.com/easybuilders/easybuild-easyconfigs/pull/510> `_ ), MPICH2 ( `#460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/460> `_ ), MUST ( `#511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/511> `_ ), ncdf ( `#496 <https://github.com/easybuilders/easybuild-easyconfigs/pull/496> `_ , `#522 <https://github.com/easybuilders/easybuild-easyconfigs/pull/522> `_ ), OPARI2 ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), OpenBabel ( `#504 <https://github.com/easybuilders/easybuild-easyconfigs/pull/504> `_ , `#524 <https://github.com/easybuilders/easybuild-easyconfigs/pull/524> `_ ), OTF ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), OTF2 ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), PandaSEQ ( `#475 <https://github.com/easybuilders/easybuild-easyconfigs/pull/475> `_ ), ParaView ( `#498 <https://github.com/easybuilders/easybuild-easyconfigs/pull/498> `_ , `#514 <https://github.com/easybuilders/easybuild-easyconfigs/pull/514> `_ ), ParFlow ( `#483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/483> `_ , `#520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/520> `_ ), PCC ( `#486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/486> `_ , `#528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/528> `_ ), PDT ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), picard ( `#467 <https://github.com/easybuilders/easybuild-easyconfigs/pull/467> `_ ), PnMPI ( `#511 <https://github.com/easybuilders/easybuild-easyconfigs/pull/511> `_ ), PyQuante ( `#499 <https://github.com/easybuilders/easybuild-easyconfigs/pull/499> `_ , `#523 <https://github.com/easybuilders/easybuild-easyconfigs/pull/523> `_ ), pysqlite ( `#519 <https://github.com/easybuilders/easybuild-easyconfigs/pull/519> `_ ), Scalasca ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), Score-P ( `#505 <https://github.com/easybuilders/easybuild-easyconfigs/pull/505> `_ ), SDCC ( `#486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/486> `_ , `#528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/528> `_ ), Silo ( `#483 <https://github.com/easybuilders/easybuild-easyconfigs/pull/483> `_ , `#520 <https://github.com/easybuilders/easybuild-easyconfigs/pull/520> `_ ), Stride ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), SURF ( `#503 <https://github.com/easybuilders/easybuild-easyconfigs/pull/503> `_ ), TCC ( `#486 <https://github.com/easybuilders/easybuild-easyconfigs/pull/486> `_ , `#528 <https://github.com/easybuilders/easybuild-easyconfigs/pull/528> `_ ) * ARB dependencies (23): fixesproto, imake, inputproto, kbproto, libICE, libSM, libX11, libXau, libXaw, libXext, libXfixes, libXi, libXmu, libXp, libXpm, libXt, lynx, motif, printproto, Sablotron, xbitmaps, xextproto, xtrans * added easyconfigs for new gmpich2/1.4.8, gmpolf/1.4.8 and goolf/1.6.10 toolchains ( `#460 <https://github.com/easybuilders/easybuild-easyconfigs/pull/460> `_ , `#525 <https://github.com/easybuilders/easybuild-easyconfigs/pull/525> `_ , `#530 <https://github.com/easybuilders/easybuild-easyconfigs/pull/530> `_ ) * added additional easyconfigs for various software packages (list too long to include here) * version updates, different toolchains, ... * various bug fixes, including: * enable building of shared libraries for MPICH ( `#482 <https://github.com/easybuilders/easybuild-easyconfigs/pull/482> `_ ) * fix HDF configure option for Szip, should be ``--with-szlib`` ( `#533 <https://github.com/easybuilders/easybuild-easyconfigs/pull/533> `_ ) * for HDF5, this issue is fixed in the HDF5 easyblock * other * add build status badges for master/develop branches to README ( `#490 <https://github.com/easybuilders/easybuild-easyconfigs/pull/490> `_ ) EasyBuild v1.8.2 (October 18th 2013) ------------------------------------ bugfix release **framework** * fix regular expression used for obtaining list of modules from ``module avail`` ( `#724 <https://github.com/easybuilders/easybuild-framework/pull/724> `_ ) * modules marked as default were being hidden from EasyBuild, causing problems when they are used as dependency **easyblocks** * fix installing of EasyBuild with a loaded EasyBuild module ( `#280 <https://github.com/easybuilders/easybuild-easyblocks/pull/280> `_ ) * this is important to make upgrading to the latest EasyBuild version possible with a bootstrapped EasyBuild **easyconfigs** * port thread pool patch to PSI 4.0b4 and include it to avoid hanging tests ( `#471 <https://github.com/easybuilders/easybuild-easyconfigs/pull/471> `_ ) EasyBuild v1.8.1 (October 14th 2013) ------------------------------------ bugfix release * various bug fixes, including: * fix bugs in regtest procedure ( `#713 <https://github.com/easybuilders/easybuild-framework/pull/713> `_ ) * force 2nd and 3rd attempt of build in case 1st attempt failed * fix copying of install log to install directory ( `#716 <https://github.com/easybuilders/easybuild-framework/pull/716> `_ ) * only create first source path if multiple paths are specified ( `#718 <https://github.com/easybuilders/easybuild-framework/pull/718> `_ ) * detect failed PBS job submission by checking obtained job ID for ``None`` value ( `#713 <https://github.com/easybuilders/easybuild-framework/pull/713> `_ , `#717 <https://github.com/easybuilders/easybuild-framework/pull/717> `_ , `#719 <https://github.com/easybuilders/easybuild-framework/pull/719> `_ , `#720 <https://github.com/easybuilders/easybuild-framework/pull/720> `_ ) **easyblocks** * various bug fixes: * fix problems in PSI easyblock causing build to fail ( `#270 <https://github.com/easybuilders/easybuild-easyblocks/pull/270> `_ ) * fix issues with running NWChem test cases, fail early in case broken symlink is present ( `#275 <https://github.com/easybuilders/easybuild-easyblocks/pull/275> `_ ) **easyconfigs** * added additional easyconfigs for various software packages ( `#457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/457> `_ ): * Boost, bzip2, libreadline, ncurses, PSI, Python, zlib * various bug fixes, including: * fix faulty easyconfig file names for HPCBIOS_Math, MUSCLE, XML-LibXML and YAML-Syck ( `#459 <https://github.com/easybuilders/easybuild-easyconfigs/pull/459> `_ , `#462 <https://github.com/easybuilders/easybuild-easyconfigs/pull/462> `_ ) * stop (re)specifying default maximum ratio for failed tests in NWChem easyconfig ( `#457 <https://github.com/easybuilders/easybuild-easyconfigs/pull/457> `_ ) EasyBuild v1.8.0 (October 4th 2013) ----------------------------------- feature + bugfix release **framework** * add support for using alternative module naming schemes ( `#679 <https://github.com/easybuilders/easybuild-framework/pull/679> `_ , `#696 <https://github.com/easybuilders/easybuild-framework/pull/696> `_ , `#705 <https://github.com/easybuilders/easybuild-framework/pull/705> `_ , `#706 <https://github.com/easybuilders/easybuild-framework/pull/706> `_ , `#707 <https://github.com/easybuilders/easybuild-framework/pull/707> `_ ) * see https://github.com/easybuilders/easybuild/wiki/Using-a-custom-module-naming-scheme for documentation * module naming scheme classes that derive from the 'abstract' ``ModuleNamingScheme`` class can be provided to EasyBuild * the Python module providing the class must be available in the ``easybuild.tools.module_naming_scheme`` namespace * a function named ``det_full_module_name`` must be implemented, that determines the module name in the form of an string based on the supplied dictionary(-like) argument * the active module naming scheme is determined by EasyBuild configuration option ``--module-naming-scheme`` * for now, only the ``name`` / ``version`` / ``versionsuffix`` / ``toolchain`` easyconfig parameters are guaranteed to be provided * consistently providing all easyconfig parameters (i.e., also for dependencies) requires more work (see `#687 <https://github.com/easybuilders/easybuild-framework/pull/687> `_ ) * implementing this involved a number of intrusive changes: * the API of the modules.py module needed to be changed, breaking backward compatibility * the function for which the signatures were modified are considered to be internal to the framework, so this should have very minor impact w.r.t. easyblocks not included with EasyBuild * affected functions include: ``available`` , ``exists`` , ``show`` , ``modulefile_path`` , ``dependencies_for`` * the format for specifying dependencies was extended, to allow for specifying a custom toolchain * this allows to fix inaccurate dependency specifications, for example: ``('OpenMPI', '1.6.4-GCC-4.7.2')\" to \"('OpenMPI', '1.6.4', '', ('GCC', '4.7.2'))`` * see also `easyconfigs#431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/431> `_ * the recommended version for Lmod was bumped to v5.1.5 * using earlier 5.x version still works, but may be very slow when 'available' is used, due to bugs and a missing feature in Lmod versions prior to v5.1.5 on which we rely * various other enhancements, including: * only (try to) change group id if it is different from what is wanted ( `#685 <https://github.com/easybuilders/easybuild-framework/pull/685> `_ ) * added toy build unit test ( `#688 <https://github.com/easybuilders/easybuild-framework/pull/688> `_ ) * support for specifying a list of source paths in EasyBuild configuration ( `#690 <https://github.com/easybuilders/easybuild-framework/pull/690> `_ , `#702 <https://github.com/easybuilders/easybuild-framework/pull/702> `_ ) * add function to determine CPU clock speed in ``systemtools.py`` ( `#694 <https://github.com/easybuilders/easybuild-framework/pull/694> `_ , `#699 <https://github.com/easybuilders/easybuild-framework/pull/699> `_ ) * various bug fixes, including: * avoid importing toolchain modules over and over again to make toolchain constants available in toolchain module ( `#679 <https://github.com/easybuilders/easybuild-framework/pull/679>` ) * only change the group id if current gid is different from what we want in ``adjust_permissions`` function ( `#685 <https://github.com/easybuilders/easybuild-framework/pull/685>` ) * restore original environment after running 'module purge' ( `#698 <https://github.com/easybuilders/easybuild-framework/pull/698>` ) * important sidenote: this results in resetting the entire environment, and has impact on the sanity check step; * any environment variables that are set before the EasyBlock.sanity_check_step method fires, are no longer there when the sanity check commands are run (cfr. `easyblocks#268 <https://github.com/easybuilders/easybuild-easyblocks/pull/268> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``BinariesTarball`` (`#255 <https://github.com/easybuilders/easybuild-easyblocks/pull/255> `_ ) * added support for **5** new software packages that require customized support: * DB ( `#226 <https://github.com/easybuilders/easybuild-easyblocks/pull/226> `_ ), FDTD Solutions ( `#239 <https://github.com/easybuilders/easybuild-easyblocks/pull/239> `_ ), FoldX ( `#256 <https://github.com/easybuilders/easybuild-easyblocks/pull/256> `_ ), Mathematica ( `#240 <https://github.com/easybuilders/easybuild-easyblocks/pull/240> `_ ), MUMPS ( `#262 <https://github.com/easybuilders/easybuild-easyblocks/pull/262> `_ ) * various enhancements, including: * support optionally running configure in generic ``MakeCp`` easyblock ( `#252 <https://github.com/easybuilders/easybuild-easyblocks/pull/252> `_ ) * enhanced Clang easyblock to support building Clang 3.3 ( `#248 <https://github.com/easybuilders/easybuild-easyblocks/pull/248> `_ ) * add support for ``$INTEL_LICENSE_FILE`` specifying multiple paths ( `#251 <https://github.com/easybuilders/easybuild-easyblocks/pull/251> `_ ) * enhanced ATLAS easyblock to support building ATLAS 3.10.1 ( `#258 <https://github.com/easybuilders/easybuild-easyblocks/pull/258> `_ ) * various bug fixes: * add zlib lib dir in link path dirs for WPS ( `#249 <https://github.com/easybuilders/easybuild-easyblocks/pull/249> `_ ) * stop using deprecated ``add_module`` function in imkl easyblock ( `#250 <https://github.com/easybuilders/easybuild-easyblocks/pull/250> `_ ) * fixed PSI easyblock w.r.t. support for building plugins ( `#254 <https://github.com/easybuilders/easybuild-easyblocks/pull/254> `_ , `#269 <https://github.com/easybuilders/easybuild-easyblocks/pull/269> `_ ) * move OS check for Clang to ``check_readiness_step`` , to allow a build job to be submitted from SL5 ( `#263 <https://github.com/easybuilders/easybuild-easyblocks/pull/263> `_ , `#264 <https://github.com/easybuilders/easybuild-easyblocks/pull/264> `_ ) * enable verbose build for DOLFIN, to allow for proper debugging if the build fails ( `#265 <https://github.com/easybuilders/easybuild-easyblocks/pull/265> `_ ) * make sure ``$LDFLAGS`` and ``$INSTANT_*_DIR`` env vars are set for DOLFIN sanity check commands ( `#268 <https://github.com/easybuilders/easybuild-easyblocks/pull/268> `_ ) * this is required after resetting the environment after running module purge (see framework release notes) * don't try to load module in LAPACK test-only build ( `#264 <https://github.com/easybuilders/easybuild-easyblocks/pull/264> `_ , `#266 <https://github.com/easybuilders/easybuild-easyblocks/pull/266> `_ ) **easyconfigs** * added example easyconfig files for **9** new software packages: * BOINC ( `#436 <https://github.com/easybuilders/easybuild-easyconfigs/pull/436> `_ ), DB ( `#343 <https://github.com/easybuilders/easybuild-easyconfigs/pull/343> `_ , `#449 <https://github.com/easybuilders/easybuild-easyconfigs/pull/449> `_ ), fastahack ( `#374 <https://github.com/easybuilders/easybuild-easyconfigs/pull/374> `_ ), FDTD Solutions ( `#387 <https://github.com/easybuilders/easybuild-easyconfigs/pull/387> `_ ), FoldX ( `#440 <https://github.com/easybuilders/easybuild-easyconfigs/pull/440> `_ , `#442 <https://github.com/easybuilders/easybuild-easyconfigs/pull/442> `_ ), Mathematica ( `#394 <https://github.com/easybuilders/easybuild-easyconfigs/pull/394> `_ ), Mesquite ( `#447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/447> `_ ), MUMPS ( `#447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/447> `_ ), ParMGridGen ( `#447 <https://github.com/easybuilders/easybuild-easyconfigs/pull/447> `_ ) * added additional easyconfigs for goalf, gompi, ClangGCC, cgmvapich2, cgmvolf toolchains ( `#350 <https://github.com/easybuilders/easybuild-easyconfigs/pull/350> `_ , `#441 <https://github.com/easybuilders/easybuild-easyconfigs/pull/441> `_ ) * added additional easyconfigs for various software packages: * ATLAS, Bison, bzip2, Clang, CMake, cURL, EasyBuild, expat, FFTW, GDB, gettext, git, HPL, LAPACK, libreadline, M4, METIS, MVAPICH2, Mercurial, ncurses, OpenBLAS, OpenMPI, ParMETIS, Python, ScaLAPACK, SCOTCH, Valgrind, zlib * various 'bug' fixes, including: * fix source URL for lockfile in Python easyconfigs ( `#428 <https://github.com/easybuilders/easybuild-easyconfigs/pull/428> `_ ) * correct dependency specifications w.r.t. versionsuffix and toolchain ( `#431 <https://github.com/easybuilders/easybuild-easyconfigs/pull/431> `_ ) * this is required to support building the affected easyconfigs with a custom module naming scheme * correct PSI patch file to avoid errors w.r.t. memcpy not being in scope ( `#446 <https://github.com/easybuilders/easybuild-easyconfigs/pull/446> `_ ) * fix gettext build with adding ``--without-emacs`` configure options, add gettext as dependency for a2ps ( `#448 <https://github.com/easybuilders/easybuild-easyconfigs/pull/448> `_ ) * exclude EMACS support in a2ps because of build failures ( `#452 <https://github.com/easybuilders/easybuild-easyconfigs/pull/452> `_ ) EasyBuild v1.7.0 (September 2nd 2013) ------------------------------------- feature + bugfix release **framework** * various enhancements, including: * also search for patch files in directory where easyconfig file is located ( `#667 <https://github.com/easybuilders/easybuild-framework/pull/667> `_ ) * reduce false positives in reporting of possible errors messages ( `#669 <https://github.com/easybuilders/easybuild-framework/pull/669> `_ ) * make module update ``$ACLOCAL`` if a share/aclocal subdir is found ( `#670 <https://github.com/easybuilders/easybuild-framework/pull/670> `_ ) * add ``unwanted_env_vars`` easyconfig parameter to list environment variables to unset during install procedure ( `#673 <https://github.com/easybuilders/easybuild-framework/pull/673> `_ ) * add support for updating list easyconfig values (next to string values) ( `#676 <https://github.com/easybuilders/easybuild-framework/pull/676> `_ ) * add ``--dry-run`` command line option which prints installation overview for specified easyconfig files ( `#677 <https://github.com/easybuilders/easybuild-framework/pull/677> `_ ) * various bug fixes, including: * ensure that all extensions are listed in ``$EBEXTSLISTX`` set by module, also when using ``--skip`` ( `#671 <https://github.com/easybuilders/easybuild-framework/pull/671> `_ ) * report reason for failed sanity check for extensions ( `#672 <https://github.com/easybuilders/easybuild-framework/pull/672> `_ , `#678 <https://github.com/easybuilders/easybuild-framework/pull/678> `_ ) * fix ``--list-toolchains`` command line option ( `#675 <https://github.com/easybuilders/easybuild-framework/pull/675> `_ ) **easyblocks** * added support for **3** new software packages that require customized support: * Libint2 ( `#236 <https://github.com/easybuilders/easybuild-easyblocks/pull/236> `_ ), Qt ( `#210 <https://github.com/easybuilders/easybuild-easyblocks/pull/210> `_ ), Rosetta ( `#218 <https://github.com/easybuilders/easybuild-easyblocks/pull/218> `_ ) * various enhancements, including: * allow building OpenFOAM without 3rd party tools ( `#230 <https://github.com/easybuilders/easybuild-easyblocks/pull/230> `_ ) * also add sitelib path to ``$PERL5LIB`` , refactor code to add generic ``get_site_suffix`` function ( `#232 <https://github.com/easybuilders/easybuild-easyblocks/pull/232> `_ , `#233 <https://github.com/easybuilders/easybuild-easyblocks/pull/233> `_ ) * support building imkl FFT wrappers using MVAPICH2 MPI library ( `#234 <https://github.com/easybuilders/easybuild-easyblocks/pull/234> `_ ) * remove libnpp from CUDA sanity check to support installing CUDA v5.5 ( `#238 <https://github.com/easybuilders/easybuild-easyblocks/pull/238> `_ ) * pick up ``$INTEL_LICENSE_FILE`` for Intel tools, if it is set ( `#243 <https://github.com/easybuilders/easybuild-easyblocks/pull/243> `_ ) * note: gets preference over ``license_file`` easyconfig parameter * various bug fixes: * call WRF build script with ' ``tcsh <script>`` to ensure that tcsh available in ``$PATH`` is used ( `#231 <https://github.com/easybuilders/easybuild-easyblocks/pull/231> `_ ) * make sure some environment variables that may disrupt the GCC install procedure are unset ( `#237 <https://github.com/easybuilders/easybuild-easyblocks/pull/237> `_ ) * e.g., ``$CPATH`` , ``$C_INCLUDE_PATH`` , ``$CPLUS_INCLUDE_PATH`` , ``$OBJC_INCLUDE_PATH`` , ``$LIBRARY_PATH`` * code cleanup in GEANT4 easyblock: use ``self.version`` (instead of ``self.get_installversion()`` ) ( `#242 <https://github.com/easybuilders/easybuild-easyblocks/pull/242> `_ ) * enhance list of ``noqanda`` patterns for CUDA, to get less failing installations ( `#244 <https://github.com/easybuilders/easybuild-easyblocks/pull/244> `_ ) **easyconfigs** * added example easyconfig files for **15** new software packages: * Glib ( `#294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/294> `_ , `#400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/400> `_ ), GLPK ( `#400 <https://github.com/easybuilders/easybuild-easyconfigs/pull/400> `_ ), horton ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), libint2 ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), molmod ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), Rosetta ( `#336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/336> `_ ), SCons ( `#336 <https://github.com/easybuilders/easybuild-easyconfigs/pull/336> `_ ), Stacks ( `#367 <https://github.com/easybuilders/easybuild-easyconfigs/pull/367> `_ , `#377 <https://github.com/easybuilders/easybuild-easyconfigs/pull/377> `_ ), sympy ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), Qt ( `#294 <https://github.com/easybuilders/easybuild-easyconfigs/pull/294> `_ ), XML-LibXML ( `#397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/397> `_ ), XML-Simple ( `#397 <https://github.com/easybuilders/easybuild-easyconfigs/pull/397> `_ ), yaff ( `#413 <https://github.com/easybuilders/easybuild-easyconfigs/pull/413> `_ ), YAML-Syck ( `#380 <https://github.com/easybuilders/easybuild-easyconfigs/pull/380> `_ ), zsh ( `#376 <https://github.com/easybuilders/easybuild-easyconfigs/pull/376> `_ ) * added additional easyconfigs for various software packages: * BLAST, BamTools, BioPerl, Bison, Boost, bzip2, CMake, Cython, CUDA, FFTW, FIAT, GCC, GMP, gettext, git, h5py, HDF5, libffi, libreadline, libxc, matplotlib, METIS, ncurses, Oases, Python, RAxML, ScientificPython, Szip, tcsh, imkl, MVAPICH2, TotalView, VTune, WRF, zlib * added toolchain easyconfig files for HPCBIOS policies ( `#402 <https://github.com/easybuilders/easybuild-easyconfigs/pull/402> `_ , `#407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/407> `_ ) * HPCBIOS_BioInfo, HPCBIOS_Debuggers, HPCBIOS_LifeSciences, HPCBIOS_Math, HPCBIOS_Profilers * various enhancements, including: * added more XML Perl modules to non-bare Perl easyconfigs ( `#375 <https://github.com/easybuilders/easybuild-easyconfigs/pull/375> `_ ) * various 'bug' fixes, including: * fix website/description in scipy easyconfigs ( `#399 <https://github.com/easybuilders/easybuild-easyconfigs/pull/399> `_ ) * specify OpenMPI libibverbs-dev(el) OS dependency in an OS-dependent way ( `#403 <https://github.com/easybuilders/easybuild-easyconfigs/pull/403> `_ ) * add patch file for M4 to fix building on systems with recent glibc (>=2.16) ( `#406 <https://github.com/easybuilders/easybuild-easyconfigs/pull/406> `_ ) * align moduleclass in R easyconfigs ( `#411 <https://github.com/easybuilders/easybuild-easyconfigs/pull/411> `_ ) * fixed filename of Biopython/CD-HIT easyconfig files ( `#407 <https://github.com/easybuilders/easybuild-easyconfigs/pull/407> `_ ) * disable parallel building of otcl ( `#419 <https://github.com/easybuilders/easybuild-easyconfigs/pull/419> `_ ) EasyBuild v1.6.0 (July 11th 2013) --------------------------------- feature + bugfix release **framework** * added support for using Lmod as module tool ( `#645 <https://github.com/easybuilders/easybuild-framework/pull/645> `_ ) * various other enhancements, including: * allow prepending to/appending to/overwriting list easyconfig parameters using ``--try-amend-X`` ( `#658 <https://github.com/easybuilders/easybuild-framework/pull/658> `_ , `#664 <https://github.com/easybuilders/easybuild-framework/pull/664> `_ ) * various bug fixes, including: * add salt to temporary log file name ( `#656 <https://github.com/easybuilders/easybuild-framework/pull/656> `_ , `#665 <https://github.com/easybuilders/easybuild-framework/pull/665> `_ ) * fix determining CPU architecture on Raspberry Pi (ARM) systems ( `#655 <https://github.com/easybuilders/easybuild-framework/pull/655> `_ , `#662 <https://github.com/easybuilders/easybuild-framework/pull/662> `_ ) * fix support for determining base path of tarballs containing a single file ( `#660 <https://github.com/easybuilders/easybuild-framework/pull/660> `_ ) **easyblocks** * added support for **2** new software packages that require customized support: * BamTools ( `#224 <https://github.com/easybuilders/easybuild-easyblocks/pull/224> `_ ), BLAT ( `#214 <https://github.com/easybuilders/easybuild-easyblocks/pull/214> `_ ) * various enhancements, including: * update impi easyblock to allow installing impi v4.1.1, which features a slight change in build procedure ( `#217 <https://github.com/easybuilders/easybuild-easyblocks/pull/217> `_ ) * enhance ``PackedBinary`` easyblock to copy both files and directories ( `#212 <https://github.com/easybuilders/easybuild-easyblocks/pull/212> `_ ) * added get ``sitearch_suffix`` to Perl search path and use it in ``PerlModule`` easyblock ( `#209 <https://github.com/easybuilders/easybuild-easyblocks/pull/209> `_ ) * various bug fixes: * make sure EasyBuild configuration is initialized when running unit tests ( `#220 <https://github.com/easybuilders/easybuild-easyblocks/pull/220> `_ ) * make Boost easyblock pick up configopts easyconfig parameter ( `#221 <https://github.com/easybuilders/easybuild-easyblocks/pull/221> `_ ) * add ``-DMPICH_IGNORE_CXX_SEEK`` compiler flag for Mothur when MPI support is enabled ( `#222 <https://github.com/easybuilders/easybuild-easyblocks/pull/222> `_ ) * fix Boost sanity check, only check for ``libboost_python.so`` if Python module is loaded ( `#223 <https://github.com/easybuilders/easybuild-easyblocks/pull/223> `_ ) * enhance Trinity support w.r.t. jellyfish ( `#225 <https://github.com/easybuilders/easybuild-easyblocks/pull/225> `_ , `#227 <https://github.com/easybuilders/easybuild-easyblocks/pull/227> `_ ) * fix checking for ``beagle-lib`` dep (deprecate checking for BEAGLE) for MrBayes ( `#228 <https://github.com/easybuilders/easybuild-easyblocks/pull/228> `_ ) **easyconfigs** * added example easyconfig files for **26** new software packages: * ALLPATHS-LG ( `#359 <https://github.com/easybuilders/easybuild-easyconfigs/pull/359> `_ ), AutoMake ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), BamTools ( `#319 <https://github.com/easybuilders/easybuild-easyconfigs/pull/319> `_ , `#338 <https://github.com/easybuilders/easybuild-easyconfigs/pull/338> `_ ), BLAT ( `#340 <https://github.com/easybuilders/easybuild-easyconfigs/pull/340> `_ ), Biopython ( `#356 <https://github.com/easybuilders/easybuild-easyconfigs/pull/356> `_ ), cairo ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), CCfits ( `#327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/327> `_ ), CD-HIT ( `#344 <https://github.com/easybuilders/easybuild-easyconfigs/pull/344> `_ ), CFITSIO ( `#327 <https://github.com/easybuilders/easybuild-easyconfigs/pull/327> `_ ), Diffutils ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), FASTA ( `#358 <https://github.com/easybuilders/easybuild-easyconfigs/pull/358> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), findutils ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), fontconfig ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), gawk ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), gettext ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), GLIMMER ( `#357 <https://github.com/easybuilders/easybuild-easyconfigs/pull/357> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), libidn ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), LibTIFF ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), libungif ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), make ( `#355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/355> `_ ), MUSCLE ( `#339 <https://github.com/easybuilders/easybuild-easyconfigs/pull/339> `_ ), Oases ( `#354 <https://github.com/easybuilders/easybuild-easyconfigs/pull/354> `_ ), pixman ( `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ), PLINK ( `#352 <https://github.com/easybuilders/easybuild-easyconfigs/pull/352> `_ ), RCS ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ), SQLite ( `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ ) * added additional easyconfigs for various software packages: * ant, Bash, Bison, bzip2, cURL, expat, GCC, EasyBuild, freetype, FFTW, GDB, git, HMMER, JUnit, libreadline, libpng, libtool, libxml2, libxslt, M4, makedepend, Mothur, MVAPICH2, Mercurial, ncurses, OpenBLAS, Python, ScaLAPACK, Tcl, tcsh, TopHat, Trinity, Valgrind, Velvet, VTune, zlib (see `#169 <https://github.com/easybuilders/easybuild-easyconfigs/pull/169> `_ , `#297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/297> `_ , `#298 <https://github.com/easybuilders/easybuild-easyconfigs/pull/298> `_ , `#301 <https://github.com/easybuilders/easybuild-easyconfigs/pull/301> `_ , `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ , `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ , `#331 <https://github.com/easybuilders/easybuild-easyconfigs/pull/331> `_ , `#332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/332> `_ , `#341 <https://github.com/easybuilders/easybuild-easyconfigs/pull/341> `_ , `#347 <https://github.com/easybuilders/easybuild-easyconfigs/pull/347> `_ , `#349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/349> `_ , `#351 <https://github.com/easybuilders/easybuild-easyconfigs/pull/351> `_ , `#355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/355> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ) * various enhancements, including: * added easyconfigs for ``ictce/5.4.0`` , ``ictce/5.5.0`` and ``gmvolf/1.7.12`` toolchain modules ( `#297 <https://github.com/easybuilders/easybuild-easyconfigs/pull/297> `_ , `#332 <https://github.com/easybuilders/easybuild-easyconfigs/pull/332> `_ , `#349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/349> `_ ) * added a template sanity_check_paths as 'MUST' in TEMPLATE.eb ( `#329 <https://github.com/easybuilders/easybuild-easyconfigs/pull/329> `_ ) * introduced biodeps 'toolchain' to ease keeping common dependencies for bio* software in sync ( `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ ) * added collection of easyconfigs for ictce/5.3.0 ( `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ , `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ ) * bam2fastq, bbFTP, BLAST, Boost, DL_POLY Classic, EMBOSS, FFTW, libharu, libxml2, libxslt, libyaml, lxml, Mercurial, Mothur, mpi4py, ncurses, ns, orthomcl, otcl, PAML, Perl, PyYAML, pandas, problog, scikit-learn, TiCCutils, TiMBL, TinySVM, TopHat, tclcl, YamCha * added missing dependencies for various software packages ( `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ , `#328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/328> `_ , `#348 <https://github.com/easybuilders/easybuild-easyconfigs/pull/348> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ) * style fixes in various easyconfigs ( `#309 <https://github.com/easybuilders/easybuild-easyconfigs/pull/309> `_ , `#323 <https://github.com/easybuilders/easybuild-easyconfigs/pull/323> `_ , `#345 <https://github.com/easybuilders/easybuild-easyconfigs/pull/345> `_ , `#349 <https://github.com/easybuilders/easybuild-easyconfigs/pull/349> `_ , `#355 <https://github.com/easybuilders/easybuild-easyconfigs/pull/355> `_ , `#361 <https://github.com/easybuilders/easybuild-easyconfigs/pull/361> `_ ) * various 'bug' fixes, including: * added ``pic`` toolchain option for Perl goolf easyconfig ( `#299 <https://github.com/easybuilders/easybuild-easyconfigs/pull/299> `_ ) * fixed source URLs for R (use correct template ``%(version_major)s`` ) ( `#302 <https://github.com/easybuilders/easybuild-easyconfigs/pull/302> `_ ) * synced libreadline easyconfigs w.r.t. ncurses dependency ( `#303 <https://github.com/easybuilders/easybuild-easyconfigs/pull/303> `_ ) * make sure EasyBuild configuration is initialized when running unit tests ( `#334 <https://github.com/easybuilders/easybuild-easyconfigs/pull/334> `_ ) * specify ``lowopt`` (-O1) optimization level for OpenIFS, to avoid floating-point related issues ( `#328 <https://github.com/easybuilders/easybuild-easyconfigs/pull/328> `_ ) * fix naming of 'beagle-lib' (used to be 'BEAGLE'), to avoid name clashes with other software package(s) ( `#346 <https://github.com/easybuilders/easybuild-easyconfigs/pull/346> `_ ) EasyBuild v1.5.0 (June 1st 2013) -------------------------------- feature + bugfix release **framework** * various enhancements, including: * define ``SHLIB_EXT`` constant for shared library extension ( ``.so`` , ``.dylib`` ), deprecate ``shared_lib_ext`` global var ( `#630 <https://github.com/easybuilders/easybuild-framework/pull/630> `_ ) * enhance support for sanity checking extensions ( `#632 <https://github.com/easybuilders/easybuild-framework/pull/632> `_ , `#649 <https://github.com/easybuilders/easybuild-framework/pull/649> `_ ) * add support for ``modextrapaths`` easyconfig parameter ( `#634 <https://github.com/easybuilders/easybuild-framework/pull/634> `_ , `#637 <https://github.com/easybuilders/easybuild-framework/pull/637> `_ ) * allow ``source_urls`` to be templated for extensions ( `#639 <https://github.com/easybuilders/easybuild-framework/pull/639> `_ , `#646 <https://github.com/easybuilders/easybuild-framework/pull/646> `_ , `#647 <https://github.com/easybuilders/easybuild-framework/pull/647> `_ ) * set ``OMPI_*`` environment variables for OpenMPI ( `#640 <https://github.com/easybuilders/easybuild-framework/pull/640> `_ ) * make BLACS optional as toolchain element, depending on ScaLAPACK version ( `#638 <https://github.com/easybuilders/easybuild-framework/pull/638> `_ ) * various bug fixes, including: * fixed ``--list-toolchains`` , avoid listing toolchains multiple times ( `#628 <https://github.com/easybuilders/easybuild-framework/pull/628> `_ ) * fix templating dictionary after parsing easyconfig file ( `#633 <https://github.com/easybuilders/easybuild-framework/pull/633> `_ ) * fix support for ACML as compiler toolchain element ( `#632 <https://github.com/easybuilders/easybuild-framework/pull/632> `_ ) * make unit tests clean up after themselves more thoroughly ( `#641 <https://github.com/easybuilders/easybuild-framework/pull/641> `_ , `#642 <https://github.com/easybuilders/easybuild-framework/pull/642> `_ , `#643 <https://github.com/easybuilders/easybuild-framework/pull/643> `_ ) **easyblocks** * added **one** new `generic` easyblock: ``MakeCp`` (`#208 <https://github.com/easybuilders/easybuild-easyblocks/pull/208> `_ ) * added support for **5** new software packages that require customized support: * CBLAS ( `#192 <https://github.com/easybuilders/easybuild-easyblocks/pull/192> `_ ), FreeSurfer ( `#194 <https://github.com/easybuilders/easybuild-easyblocks/pull/194> `_ ), Mothur ( `#206 <https://github.com/easybuilders/easybuild-easyblocks/pull/206> `_ ), OpenIFS ( `#200 <https://github.com/easybuilders/easybuild-easyblocks/pull/200> `_ ), PSI ( `#191 <https://github.com/easybuilders/easybuild-easyblocks/pull/191> `_ ) * various enhancements, including: * add support for building ScaLAPACK 2.x on top of QLogic MPI ( `#195 <https://github.com/easybuilders/easybuild-easyblocks/pull/195> `_ ) * support newer BWA versions ( `#199 <https://github.com/easybuilders/easybuild-easyblocks/pull/199> `_ ) * explicitly list license server type in ABAQUS install options, required for correct installation of v6.12 ( `#198 <https://github.com/easybuilders/easybuild-easyblocks/pull/198> `_ ) * update SCOTCH and OpenFOAM easyblock for recent versions ( `#201 <https://github.com/easybuilders/easybuild-easyblocks/pull/201> `_ ) * various bug fixes: * fix numpy easyblock to get an optimal build (w.r.t. ``numpy.dot`` performance) ( `#192 <https://github.com/easybuilders/easybuild-easyblocks/pull/192> `_ ) * correct build procedure for MUMmer to yield a complete installation ( `#196 <https://github.com/easybuilders/easybuild-easyblocks/pull/196> `_ , `#197 <https://github.com/easybuilders/easybuild-easyblocks/pull/197> `_ ) * make unit tests clean up after themselves more thoroughly ( `#203 <https://github.com/easybuilders/easybuild-easyblocks/pull/203> `_ , `#204 <https://github.com/easybuilders/easybuild-easyblocks/pull/204> `_ ) * fix getting Perl version for extensions ( `#205 <https://github.com/easybuilders/easybuild-easyblocks/pull/205> `_ ) **easyconfigs** * added example easyconfig files for **23** new software packages: * bam2fastq ( `#287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/287> `_ ), CBLAS ( `#263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/263> `_ ), EMBOSS ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ , `#290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/290> `_ ), FCM ( `#272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/272> `_ ), FRC_align ( `#273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/273> `_ ), freeglut ( `#271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/271> `_ ), FreeSurfer ( `#271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/271> `_ ), FSL ( `#271 <https://github.com/easybuilders/easybuild-easyconfigs/pull/271> `_ ), GATK ( `#287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/287> `_ ), libharu ( `#290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/290> `_ ), libxslt ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), MariaDB ( `#292 <https://github.com/easybuilders/easybuild-easyconfigs/pull/292> `_ ), Mothur ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ) mpi4py ( `#276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/276> `_ ), OpenIFS ( `#272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/272> `_ ), orthomcl ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), PAML ( `#287 <https://github.com/easybuilders/easybuild-easyconfigs/pull/287> `_ ), pandas ( `#262 <https://github.com/easybuilders/easybuild-easyconfigs/pull/262> `_ ), phonopy ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), problog ( `#277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/277> `_ ), PSI ( `#258 <https://github.com/easybuilders/easybuild-easyconfigs/pull/258> `_ ), PyYAML ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), RAxML ( `#277 <https://github.com/easybuilders/easybuild-easyconfigs/pull/277> `_ ) * added additional example easyconfig files for: * ABINIT ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), ACML ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), BLAST ( `#275 <https://github.com/easybuilders/easybuild-easyconfigs/pull/275> `_ ), Boost ( `#273 <https://github.com/easybuilders/easybuild-easyconfigs/pull/273> `_ ), BWA ( `#270 <https://github.com/easybuilders/easybuild-easyconfigs/pull/270> `_ ), bzip2 ( `#263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/263> `_ ), Chapel ( `#240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/240> `_ ), CMake ( `#290 <https://github.com/easybuilders/easybuild-easyconfigs/pull/290> `_ ), FFTW2 ( `#247 <https://github.com/easybuilders/easybuild-easyconfigs/pull/247> `_ , `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), flex ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), freetype ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), grib_api ( `#272 <https://github.com/easybuilders/easybuild-easyconfigs/pull/272> `_ ), gzip ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), Java ( `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ), libpng ( `#240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/240> `_ , `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ), libreadline ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), libxml2 ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), libxml ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), matplotlib ( `#235 <https://github.com/easybuilders/easybuild-easyconfigs/pull/235> `_ ), MCL ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), MUMmer ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), ncurses ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), numpy ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), OpenFOAM ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), Perl ( `#265 <https://github.com/easybuilders/easybuild-easyconfigs/pull/265> `_ ), Python ( `#276 <https://github.com/easybuilders/easybuild-easyconfigs/pull/276> `_ , `#263 <https://github.com/easybuilders/easybuild-easyconfigs/pull/263> `_ ), R ( `#240 <https://github.com/easybuilders/easybuild-easyconfigs/pull/240> `_ , `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ), SCOTCH ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), ScaLAPACK ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ), TopHat ( `#289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/289> `_ ), Valgrind ( `#255 <https://github.com/easybuilders/easybuild-easyconfigs/pull/255> `_ ), zlib ( `#267 <https://github.com/easybuilders/easybuild-easyconfigs/pull/267> `_ ) * various enhancements, including: * enhance unit test suite, include testing for module conflicts ( `#256 <https://github.com/easybuilders/easybuild-easyconfigs/pull/256> `_ ) and presence of patch files ( `#264 <https://github.com/easybuilders/easybuild-easyconfigs/pull/264> `_ ) * use provided constants and templates in easyconfig files where appropriate ( `#248 <https://github.com/easybuilders/easybuild-easyconfigs/pull/248> `_ , `#266 <https://github.com/easybuilders/easybuild-easyconfigs/pull/266> `_ , `#281 <https://github.com/easybuilders/easybuild-easyconfigs/pull/281> `_ ) * various 'bug' fixes, including: * get rid of hardcoded license_file paths for VTune, Inspector ( `#253 <https://github.com/easybuilders/easybuild-easyconfigs/pull/253> `_ ) * assign proper moduleclass where they were missing ( `#278 <https://github.com/easybuilders/easybuild-easyconfigs/pull/278> `_ ) * fix naming for LZO ( `#280 <https://github.com/easybuilders/easybuild-easyconfigs/pull/280> `_ ) * make unit tests clean up after themselves more thoroughly ( `#283 <https://github.com/easybuilders/easybuild-easyconfigs/pull/283> `_ , `#284 <https://github.com/easybuilders/easybuild-easyconfigs/pull/284> `_ , `#285 <https://github.com/easybuilders/easybuild-easyconfigs/pull/285> `_ , `#286 <https://github.com/easybuilders/easybuild-easyconfigs/pull/286> `_ ) * fix TopHat dependencies ( `#289 <https://github.com/easybuilders/easybuild-easyconfigs/pull/289> `_ ) * fix source URLs for XML ( `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ) * fix versions for all listed R extensions ( `#279 <https://github.com/easybuilders/easybuild-easyconfigs/pull/279> `_ ) * fix CUDA easyconfig file for use on Debian Squeeze ( `#291 <https://github.com/easybuilders/easybuild-easyconfigs/pull/291> `_ ) * correct easyconfig filename and module name mismatches (bbcp, DL_POLY Classic, ...) ( `#295 <https://github.com/easybuilders/easybuild-easyconfigs/pull/295> `_ ) EasyBuild v1.4.0 (May 2nd 2013) ------------------------------- feature + bugfix release **framework** * the unit tests for easybuild-framework were moved to test/framework, to make things consistent with easybuild-easyblocks and easybuild-easyconfigs ( `#611 <https://github.com/easybuilders/easybuild-framework/pull/611> `_ , `#613 <https://github.com/easybuilders/easybuild-framework/pull/613> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ ) * running the framework unit tests should now be using ``python -m test.framework.suite`` * various other enhancements, including: * extend unit test suite ( `#593 <https://github.com/easybuilders/easybuild-framework/pull/593> `_ , `#599 <https://github.com/easybuilders/easybuild-framework/pull/599> `_ , `#603 <https://github.com/easybuilders/easybuild-framework/pull/603> `_ , `#618 <https://github.com/easybuilders/easybuild-framework/pull/618> `_ , `#620 <https://github.com/easybuilders/easybuild-framework/pull/620> `_ , `#622 <https://github.com/easybuilders/easybuild-framework/pull/622> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ , ...) * extended list of constants and templates that can be used in easyconfig files ( `#566 <https://github.com/easybuilders/easybuild-framework/pull/566> `_ ) * add support for additional compiler toolchains * CUDA-enabled toolchain: ``goolfc`` ( `#603 <https://github.com/easybuilders/easybuild-framework/pull/603> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ ) * Clang(+GCC)-based toolchains: ``cgoolf`` , ``cgmpolf`` , ``cgmvolf`` ( `#593 <https://github.com/easybuilders/easybuild-framework/pull/593> `_ , `#598 <https://github.com/easybuilders/easybuild-framework/pull/598> `_ , `#600 <https://github.com/easybuilders/easybuild-framework/pull/600> `_ ) * gmvolf (GCC+MVAPICH2+...) ( `#585 <https://github.com/easybuilders/easybuild-framework/pull/585> `_ ) * properly decode easyblock to module name using ``decode_*`` functions ( `#618 <https://github.com/easybuilders/easybuild-framework/pull/618> `_ ) * various bug fixes, including: * fixed default value for ``--stop`` ( `#601 <https://github.com/easybuilders/easybuild-framework/pull/601> `_ ) * remove useless ``sleep()`` calls in ``run_cmd`` , ``run_cmd_qa`` ( `#599 <https://github.com/easybuilders/easybuild-framework/pull/599> `_ ) * determine module path based on class name, not software name ( `#606 <https://github.com/easybuilders/easybuild-framework/pull/606> `_ ) * remove unwanted characters in build dirs ( `#591 <https://github.com/easybuilders/easybuild-framework/pull/591> `_ , `#607 <https://github.com/easybuilders/easybuild-framework/pull/607> `_ ) * ignore some error codes spit out by modulecmd that are actually warnings ( `#609 <https://github.com/easybuilders/easybuild-framework/pull/609> `_ ) * fix ``agithub.py`` w.r.t. changes in GitHub API (user-agent string is now obligatory for non-authenticated connections) ( `#617 <https://github.com/easybuilders/easybuild-framework/pull/617> `_ ) * fix typo breaking the ``adjust_cmd`` decorator on SuSE ( `#615 <https://github.com/easybuilders/easybuild-framework/pull/615> `_ ) * fix prepending paths with absolute paths in module file ( `#621 <https://github.com/easybuilders/easybuild-framework/pull/621> `_ ) * clean up open file handles properly ( `#620 <https://github.com/easybuilders/easybuild-framework/pull/620> `_ , `#624 <https://github.com/easybuilders/easybuild-framework/pull/624> `_ ) * fix ``--search`` help and implementation ( `#622 <https://github.com/easybuilders/easybuild-framework/pull/622> `_ ) **easyblocks** * added a unit test suite for easyblocks ( `#175 <https://github.com/easybuilders/easybuild-easyblocks/pull/175> `_ , `#177 <https://github.com/easybuilders/easybuild-easyblocks/pull/177> `_ , `#178 <https://github.com/easybuilders/easybuild-easyblocks/pull/178> `_ ) * every easyblock is parsed and instantiated as a sanity check * added **one** new `generic` easyblock: ``PerlModule`` (`#183 <https://github.com/easybuilders/easybuild-easyblocks/pull/183> `_ ) * added support for **8** new software packages that require customized support: * ABAQUS ( `#179 <https://github.com/easybuilders/easybuild-easyblocks/pull/179> `_ ), Bowtie ( `#174 <https://github.com/easybuilders/easybuild-easyblocks/pull/174> `_ , `#185 <https://github.com/easybuilders/easybuild-easyblocks/pull/185> `_ , `#186 <https://github.com/easybuilders/easybuild-easyblocks/pull/186> `_ ), Clang ( `#151 <https://github.com/easybuilders/easybuild-easyblocks/pull/151> `_ ), DL_POLY Classic ( `#118 <https://github.com/easybuilders/easybuild-easyblocks/pull/118> `_ ), ESMF ( `#171 <https://github.com/easybuilders/easybuild-easyblocks/pull/171> `_ ), Perl ( `#183 <https://github.com/easybuilders/easybuild-easyblocks/pull/183> `_ ), Intel VTune and Intel Inspector ( `#180 <https://github.com/easybuilders/easybuild-easyblocks/pull/180> `_ ) * the ``CMakeMake.configure_step`` parameter ``builddir`` was renamed to ``srcdir`` , because the name ``builddir`` is incorrect ( `#151 <https://github.com/easybuilders/easybuild-easyblocks/pull/151> `_ ) * ``builddir`` will remain supported for legacy purposes up until v2.0 * various enhancements, including: * reverted back to hardcoding Python library path, since it's hardcoded by setuptools too ( `#184 <https://github.com/easybuilders/easybuild-easyblocks/pull/184> `_ ) * added MPICH support in ScaLAPACK easyblock ( `#172 <https://github.com/easybuilders/easybuild-easyblocks/pull/172> `_ ) * enhanced NCL easyblock: add support UDUNITS and ESMF dependencies ( `#171 <https://github.com/easybuilders/easybuild-easyblocks/pull/171> `_ ) * enhanced MATLAB easyblock: avoid hardcoding Java options, make sure ``$DISPLAY`` is unset, extend list of sanity check paths ( `#181 <https://github.com/easybuilders/easybuild-easyblocks/pull/181> `_ ) * enhanced TotalView easyblock: add support for license file ( `#146 <https://github.com/easybuilders/easybuild-easyblocks/pull/146> `_ ) **easyconfigs** * added a unit test suite for easyconfigs ( `#228 <https://github.com/easybuilders/easybuild-easyconfigs/pull/228> `_ , `#230 <https://github.com/easybuilders/easybuild-easyconfigs/pull/230> `_ ) * added example easyconfig files for **20** new software packages: * ABAQUS ( `#231 <https://github.com/easybuilders/easybuild-easyconfigs/pull/231> `_ ), BioPerl ( `#242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/242> `_ ), Bowtie ( `#227 <https://github.com/easybuilders/easybuild-easyconfigs/pull/227> `_ ), Clang ( `#177 <https://github.com/easybuilders/easybuild-easyconfigs/pull/177> `_ ), CRF++ ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), DL_POLY Classic ( `#132 <https://github.com/easybuilders/easybuild-easyconfigs/pull/132> `_ ), ESMF, GROMACS ( `#165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/165> `_ ), HH-suite ( `#219 <https://github.com/easybuilders/easybuild-easyconfigs/pull/219> `_ ), Inspector ( `#232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/232> `_ ), likwid ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), Perl ( `#242 <https://github.com/easybuilders/easybuild-easyconfigs/pull/242> `_ ), scikit ( `#133 <https://github.com/easybuilders/easybuild-easyconfigs/pull/133> `_ ), TiCCutils ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), TiMBL ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), TinySVM ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ), UDUNITS ( `#167 <https://github.com/easybuilders/easybuild-easyconfigs/pull/167> `_ ), VTune ( `#232 <https://github.com/easybuilders/easybuild-easyconfigs/pull/232> `_ ), YamCha ( `#131 <https://github.com/easybuilders/easybuild-easyconfigs/pull/131> `_ ) * add example easyconfigs for new compiler toolchains (use ``eb --list-toolchains`` for a full list of supported toolchains): * the newly added toolchains only differ in compilers/MPI library, and all feature OpenBLAS, LAPACK, ScaLAPACK and FFTW * `goolfc`: GCC, CUDA (co-compiler), OpenMPI (`#191 <https://github.com/easybuilders/easybuild-easyconfigs/pull/191> `_ ) * a goolfc easyconfig for GROMACS is included as proof-of-concept ( `#165 <https://github.com/easybuilders/easybuild-easyconfigs/pull/165> `_ ) * `cgmpolf`: Clang (C/C++ compilers), GCC (Fortran compilers), MPICH (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `cgmvolf`: Clang, GCC, MVAPICH2 (`#218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/218> `_ ) * `cgoolf`: Clang, GCC, OpenMPI (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `gmvolf`: GCC, MVAPICH (`#202 <https://github.com/easybuilders/easybuild-easyconfigs/pull/202> `_ , `#222 <https://github.com/easybuilders/easybuild-easyconfigs/pull/222> `_ ) * ported already available easyconfigs to new compiler toolchains: * `ictce-5.3.0`: 193 easyconfigs (`#229 <https://github.com/easybuilders/easybuild-easyconfigs/pull/229> `_ ) * `cgmpolf`: 11 easyconfigs (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `cgmvolf`: 11 easyconfigs (`#218 <https://github.com/easybuilders/easybuild-easyconfigs/pull/218> `_ ) * `cgoolf`: 12 easyconfigs (`#213 <https://github.com/easybuilders/easybuild-easyconfigs/pull/213> `_ ) * `gmvolf`: 10 easyconfigs (`#215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/215> `_ ) * added additional example easyconfig files for: * CMake ( `#163 <https://github.com/easybuilders/easybuild-easyconfigs/pull/163> `_ ), git ( `#210 <https://github.com/easybuilders/easybuild-easyconfigs/pull/210> `_ ), Java ( `#206 <https://github.com/easybuilders/easybuild-easyconfigs/pull/206> `_ ), `#221 <https://github.com/easybuilders/easybuild-easyconfigs/pull/221> `_ , Mercurial ( `#201 <https://github.com/easybuilders/easybuild-easyconfigs/pull/201> `_ , `#215 <https://github.com/easybuilders/easybuild-easyconfigs/pull/215> `_ ), ncurses ( `#225 <https://github.com/easybuilders/easybuild-easyconfigs/pull/225> `_ ), TotalView ( `#160 <https://github.com/easybuilders/easybuild-easyconfigs/pull/160> `_ ) * various enhancements, including: * added ESMF and UDUNITS dependencies to NCL easyconfigs ( `#211 <https://github.com/easybuilders/easybuild-easyconfigs/pull/211> `_ ) * changed value of source_urls in R easyconfigs, to be generic enough for version 3.0 and possibly beyond ( `#251 <https://github.com/easybuilders/easybuild-easyconfigs/pull/251> `_ ) * various 'bug' fixes, including: * add ``--enable-mpirun-prefix-by-default`` configure option for all OpenMPI easyconfigs ( `#205 <https://github.com/easybuilders/easybuild-easyconfigs/pull/205> `_ ) EasyBuild v1.3.0 (April 1st 2013) --------------------------------- feature + bugfix release **framework** * added script to bootstrap EasyBuild with EasyBuild, see https://github.com/easybuilders/easybuild/wiki/Bootstrapping-EasyBuild ( `#531 <https://github.com/easybuilders/easybuild-framework/pull/531> `_ ) * reorganize framework/easyconfig.py module into framework/easyconfig package with modules ( `#574 <https://github.com/easybuilders/easybuild-framework/pull/574> `_ , `#580 <https://github.com/easybuilders/easybuild-framework/pull/580> `_ ) * support EasyBuild configuration via command line, environment variables and configuration files ( `#529 <https://github.com/easybuilders/easybuild-framework/pull/529> `_ , `#552 <https://github.com/easybuilders/easybuild-framework/pull/552> `_ , `#556 <https://github.com/easybuilders/easybuild-framework/pull/556> `_ , `#558 <https://github.com/easybuilders/easybuild-framework/pull/558> `_ , `#559 <https://github.com/easybuilders/easybuild-framework/pull/559> `_ ) * various other enhancements, including: * extended set of unit tests for eb command line options and EasyBuild configuration ( `#517 <https://github.com/easybuilders/easybuild-framework/pull/517> `_ , `#556 <https://github.com/easybuilders/easybuild-framework/pull/556> `_ , `#559 <https://github.com/easybuilders/easybuild-framework/pull/559> `_ , `#571 <https://github.com/easybuilders/easybuild-framework/pull/571> `_ ) * made ``--search`` also useful when easybuild-easyconfigs package is not installed ( `#524 <https://github.com/easybuilders/easybuild-framework/pull/524> `_ ) * extended set of default module classes ( `#525 <https://github.com/easybuilders/easybuild-framework/pull/525> `_ ) * add support for license easyconfig parameter (which will be mandatory in v2.x) ( `#526 <https://github.com/easybuilders/easybuild-framework/pull/526> `_ , `#569 <https://github.com/easybuilders/easybuild-framework/pull/569> `_ ) * added ``setup.cfg`` for ``setup.py`` to allow creating RPMs ( `#528 <https://github.com/easybuilders/easybuild-framework/pull/528> `_ ) * added support for obtaining system information, see ``get_os_*`` functions in ``easybuild/tools/systemtools.py`` ( `#543 <https://github.com/easybuilders/easybuild-framework/pull/543> `_ , `#546 <https://github.com/easybuilders/easybuild-framework/pull/546> `_ , `#547 <https://github.com/easybuilders/easybuild-framework/pull/547> `_ ) * added support for iterated builds that require cycling over multiple sets of configure/build/install options, e.g. FFTW ( `#549 <https://github.com/easybuilders/easybuild-framework/pull/549> `_ ) * added support for OpenBLAS as toolchain lib for linear algebra ( `#537 <https://github.com/easybuilders/easybuild-framework/pull/537> `_ , `#565 <https://github.com/easybuilders/easybuild-framework/pull/565> `_ ) * added support for tweaking prefix and separator for library toolchain variables ( ``LIB*`` ) ( `#572 <https://github.com/easybuilders/easybuild-framework/pull/572> `_ , `#576 <https://github.com/easybuilders/easybuild-framework/pull/576> `_ ) * skip already built modules in regression testing mode, to ease regression testing ( `#582 <https://github.com/easybuilders/easybuild-framework/pull/582> `_ ) * various bug fixes, including: * added ``zip_safe`` flag to ``setup.py`` , to silence multitude of warnings ( `#521 <https://github.com/easybuilders/easybuild-framework/pull/521> `_ ) * only define ``LIBFFT`` for Intel MKL if FFTW interface libraries are available ( `#518 <https://github.com/easybuilders/easybuild-framework/pull/518> `_ , `#567 <https://github.com/easybuilders/easybuild-framework/pull/567> `_ , `#579 <https://github.com/easybuilders/easybuild-framework/pull/579> `_ ) * set POSIX group early in build process, make EasyBuild aware of consistent chmod/chown failures ( `#527 <https://github.com/easybuilders/easybuild-framework/pull/527> `_ ) * properly order the name/version keys for the toolchain easyconfig parameter when using ``--try-toolchain`` ( `#563 <https://github.com/easybuilders/easybuild-framework/pull/563> `_ ) * take the ``skipsteps`` easyconfig parameter into account in regression testing mode as well ( `#583 <https://github.com/easybuilders/easybuild-framework/pull/583> `_ ) **easyblocks** * added support for **2** new software packages that require customized support: * CUDA ( `#145 <https://github.com/easybuilders/easybuild-easyblocks/pull/145> `_ ), Ferret ( `#160 <https://github.com/easybuilders/easybuild-easyblocks/pull/160> `_ , `#163 <https://github.com/easybuilders/easybuild-easyblocks/pull/163> `_ ) * remove ``license`` easyconfig parameter from ``IntelBase`` , since it clashes with generic ``license`` parameter ( `#153 <https://github.com/easybuilders/easybuild-easyblocks/pull/153> `_ , `#158 <https://github.com/easybuilders/easybuild-easyblocks/pull/158> `_ ) * ``license_file`` should be used instead (see `framework#569 <https://github.com/easybuilders/easybuild-easyblocks/pull/569/files> `_ ) * using ``license`` instead of ``license_file`` will be supported until v2.x for legacy purposes * various enhancements, including: * stop hardcoding Python site-packages library dir, obtain it via ``distutils.sysconfig`` instead ( `#141 <https://github.com/easybuilders/easybuild-easyblocks/pull/141> `_ , `#156 <https://github.com/easybuilders/easybuild-easyblocks/pull/156> `_ , `#159 <https://github.com/easybuilders/easybuild-easyblocks/pull/159> `_ , `#161 <https://github.com/easybuilders/easybuild-easyblocks/pull/161> `_ ) * stop hardcoding list of libraries for BLAS libs, ask toolchain modules or use ``$LIBBLAS`` instead ( `#150 <https://github.com/easybuilders/easybuild-easyblocks/pull/150> `_ , `#155 <https://github.com/easybuilders/easybuild-easyblocks/pull/155> `_ ) * enhanced CP2K easyblock, following Intel guidelines for ``ictce`` builds ( `#138 <https://github.com/easybuilders/easybuild-easyblocks/pull/138> `_ ) * added ``setup.cfg`` for ``setup.py`` to allow creating RPMs ( `#140 <https://github.com/easybuilders/easybuild-easyblocks/pull/140> `_ ) * clean up specifying BLAS/LAPACK libs for building numpy, check whether requires patch is being used for IMKL builds ( `#155 <https://github.com/easybuilders/easybuild-easyblocks/pull/155> `_ , `#161 <https://github.com/easybuilders/easybuild-easyblocks/pull/161> `_ ) * various bug fixes, including: * added ``zip_safe`` flag to ``setup.py`` , to silence multitude of warnings ( `#135 <https://github.com/easybuilders/easybuild-easyblocks/pull/135> `_ ) * install EasyBuild packages in reversed order to avoid funky setuptools issues ( `#139 <https://github.com/easybuilders/easybuild-easyblocks/pull/139> `_ ) * fixed a typo in the ScaLAPACK easyblock, and set CCFLAGS and FCFLAGS for v2.x ( `#149 <https://github.com/easybuilders/easybuild-easyblocks/pull/149> `_ , `#162 <https://github.com/easybuilders/easybuild-easyblocks/pull/162> `_ ) * fix sanity check for python-meep ( `#159 <https://github.com/easybuilders/easybuild-easyblocks/pull/159> `_ ) * exclude Python tests from DOLFIN sanity check, since they hang sometimes ( `#161 <https://github.com/easybuilders/easybuild-easyblocks/pull/161> `_ ) * add support in ALADIN easyblock for answering question on location of ``libgrib_api.a`` ( `#165 <https://github.com/easybuilders/easybuild-easyblocks/pull/165> `_ ) **easyconfigs** * added example easyconfig files for **13** new software packages: * Bash, CUDA, ccache, Ferret, gzip, libxc, ns, numactl, OpenBLAS, otcl, Tar, tclcl, tcsh * several of these easyconfig files were contributed by attendees of the EasyBuild hackathon in Cyprus! * added example easyconfigs for goolf toolchain ( `#158 <https://github.com/easybuilders/easybuild-easyconfigs/pull/158> `_ ) * added example easyconfigs for builds with goolf toolchain, i.e. for all goalf easyconfigs ( `#189 <https://github.com/easybuilders/easybuild-easyconfigs/pull/189> `_ ) * for several software packages, a patch file was needed to get them to build with GCC 4.7: * AMOS, BEAGLE, Cufflinks, DOLFIN, GATE, ns, Pasha, Trilinos, Trinity * for PETSc, a patch file was required to make it build with a toolchain that doesn't include BLACS * added additional example easyconfig files for: * gompi, hwloc, LAPACK, MVAPICH2, OpenMPI, ScaLAPACK * various enhancements, including: * define a proper module class in `all` easyconfigs, cfr. default module classes defined in framework (`#150 <https://github.com/easybuilders/easybuild-easyconfigs/pull/150> `_ , `#159 <https://github.com/easybuilders/easybuild-easyconfigs/pull/159> `_ , `#161 <https://github.com/easybuilders/easybuild-easyconfigs/pull/161> `_ , `#162 <https://github.com/easybuilders/easybuild-easyconfigs/pull/162> `_ , `#179 <https://github.com/easybuilders/easybuild-easyconfigs/pull/179> `_ , `#181 <https://github.com/easybuilders/easybuild-easyconfigs/pull/181> `_ ) * extend FFTW easyconfig to 'fat' builds that include single, double, long double and quad precision libraries in the same module * quad precision is disabled for Intel compiler based builds (it requires GCC v4.6+) * the imkl easyconfigs used for the ictce 3.2.2.u3 toolchain now also enable FFTW interfaces * various 'bug' fixes, including: * fix filename for Mercurial and ROOT easyconfig files * fix homepage/description for Hypre * fix enabling OpenMP support in OpenMPI: use ``--enable-openmp`` , not ``--with-openmp`` * use correct configure flag for enabling OpenMPI threading support in v1.6 ( `#186 <https://github.com/easybuilders/easybuild-easyconfigs/pull/186> `_ ) * ``--enable-mpi-thread-multiple`` instead of ``--enable-mpi-threads`` * explicitly add ``--without-openib --without-udapl`` configure options in OpenMPI easyconfig using versionsuffix ``-no-OFED`` ( `#168 <https://github.com/easybuilders/easybuild-easyconfigs/pull/168> `_ ) * this avoids that OpenMPI auto-detects that it can enable Infiniband (OpenIB) support, which doesn't fit the -no-OFED versionsuffix * Note: this makes goalf-1.1.0-no-OFED effectively not suitable to produce software builds that are IB-capable! * remove explicit ``--with-udapl`` from OpenMPI easyconfigs, does more harm than good ( `#178 <https://github.com/easybuilders/easybuild-easyconfigs/pull/178> `_ ) * remove libibvers, libibmad, libibumad as explicit dependencies for OpenMPI/MVAPICH2 ( `#173 <https://github.com/easybuilders/easybuild-easyconfigs/pull/173> `_ , `#182 <https://github.com/easybuilders/easybuild-easyconfigs/pull/182> `_ ) * leave it up to the OS to provide these, since the required version is too much tied to the version of IB drivers * use ``license_file`` in Intel tools easyconfigs, as opposed to the new generic ``license`` parameter with a different meaning ( `#180 <https://github.com/easybuilders/easybuild-easyconfigs/pull/180> `_ ) * modify patch for impi to avoid installation problems due to hardcoded path in /tmp ( `#185 <https://github.com/easybuilders/easybuild-easyconfigs/pull/185> `_ ) * now uses ``$USER-$RANDOM`` subdir to avoid clashes between different users on the same system * the patch file for numpy was extended to also supporting ATLAS and other BLAS libraries spread across multiple directories * the extension for ATLAS is required because we now no longer rely on the automatic numpy mechanism to find the ATLAS libs * fixed dependencies: * libibumad as dependency for libibmad * ncurses as dependency for libreadline * ncurses and zlib as dependency for SAMtools (+ enhanced patch) * remove explicit FFTW dependency for Meep, ... since toolchain already provided FFTW EasyBuild v1.2.0 (February 28th 2013) ------------------------------------- feature + bugfix release **framework** * new backend module for option parsing: generaloption * support for using constants and string templates in easyconfig files * currently disabled for ``exts_filter`` and ``exts_list`` easyconfig parameters, for backward compatibility * various other enhancements, including: * support for iqacml and iiqmpi toolchains (Intel compilers + QLogic MPI based) * clearer errors messages when sanity check failed * unit tests for (about half of) the ``eb`` command line options * support for specifying build/install steps to skip in easyconfig file ( ``skipsteps`` ) * support for allowing certain dependencies to be resolved by the system instead of modules ( ``allow_system_deps`` ) * cache ppn value required by regtest, clean up temporary files let behind by ``--regtest`` / ``--job`` * make sure MPD is used as process manager for Intel MPI (required for impi v4.1 and later) * rename template names ``name`` and ``version`` used in exts_filter to ``ext_name`` , ``ext_version`` * ``name`` and ``version`` are still supported for legacy reasons * cleaned up module docstrings w.r.t. list of authors * various bug fixes, including: * print correct (lowercase) toolchain names with ``--list-toolchains`` * correct easyconfig parameter name ``license_server_port`` * fix string quoting in develop modules * ensure ``modulecmd`` is run with original ``$LD_LIBRARY_PATH`` value * to avoid breaking ``modulecmd`` , see https://bugzilla.redhat.com/show_bug.cgi?id=719785 * remove use of hardcoded files/dirs in unit tests * fix various inconsistencies w.r.t. paths considered with ``--robot`` * various cleanup and fixes w.r.t. logging * use correct logger instance in main script * stop passing logger instances around * make module logging variables private * get rid of ``ModuleGenerator`` deconstructor, clean up via ``EasyBlock.clean_up_fake_module`` * fix disabling of ``optarch`` toolchain option (and extend unit tests to check on this) **easyblocks** * added **one** new `generic` easyblock: ``Rpm`` * added support for **6** new software packages that require customized support: * EasyBuild, EPD (Enthought Python Distribution), freetype, MATLAB, QLogic MPI (RPM), TotalView * support for installing EasyBuild with EasyBuild enables bootstrapping an EasyBuild installation! * various enhancements, including: * corrections in WRF/WPS to also enable building with iqacml toolchain * use ``mpi_cmd_for`` instead of hardcoding test commands, using correct Fortran compilers (F90) * fix NCL easyblock to also support v6.1.x * use correct Fortran compiler (F90), set correct lib/include paths for dependencies (netCDF-Fortran, GDAL) * cleanup sweep of license headers and authors list in easyblock module docstrings * use new ``ext_name`` template name in ``exts_filter`` in Python and R easyblocks * various bug fixes, including: * general code cleanup * don't set ``sanityCheckOK`` in ``Toolchain`` easyblock * get rid of using ``os.putenv`` * NEURON easyblock: don't hardcode number of processes used in test cases * make sure ``easybuild.easyblocks.generic`` namespace is extendable **easyconfigs** * added example easyconfig files for **41** new software packages: * a2ps, AnalyzeFMRI, aria, bbcp, bbFTP, bbftpPRO, binutils, Bonnie++, ccache, cflow, cgdb, Corkscrew, EasyBuild, Elinks, EPD, FLUENT, fmri, GDB, GDAL, gnuplot, gnutls, gperf, Iperf, lftp, libyaml, lzo, MATLAB, mc, nano, NASM, nettle, numexpr, parallel, pyTables, QLogic MPI, Stow, TotalView, Valgrind, VTK, Yasm, zsync * added example easyconfigs for iqacml and iiqmpi toolchains * added additional example easyconfig files for: * ABINIT, ABySS, ACML, BFAST, Bison, BLACS, Cython, cURL, Doxygen, FFTW, flex, g2clib, g2lib, GHC, h5py, HDF, HDF5, HMMER, JasPer, icc, ictce, ifort, imkl, impi, libpng, libreadline, M4, matplotlib, MCL, MEME, mpiBLAST, NCL, ncurses, netCDF, netCDF-Fortran, NWChem, R, ScaLAPACK, Tcl, Tk, WPS, WRF, zlib * various enhancements, including: * fix version of xtable R library in list of extensions for R, to avoid installation failures * various 'bug' fixes, including: * fix toolchain and file names for ABINIT easyconfigs * fix sanity check paths for cURL * don't disable ``optarch`` for WRF, it's not needed (only disable heavy optimizations is required) * fix homepage/description for ALADIN EasyBuild v1.1.0 (January 27th 2013) ------------------------------------ feature + bugfix release **framework** * improvements w.r.t. support for software extensions (tested on Python and R, see easyblocks package) * cleaned up support for building/installing extensions * define ``ExtensionEasyblock`` class that implements support for installing extensions as stand-alone module as well * return to build dir before building/installing each extension * define ``EBEXTSLIST<NAME>`` environment variable in module if ``exts_list`` was defined * make sure sanity check for extensions results in an error if it fails * various enhancements, including: * log both framework and easyblocks versions * add support for ``gimkl`` , ``gmacml`` , ``iccifort`` , ``iomkl`` and ``ismkl`` toolchains * define ``*_SEQ compiler`` variables for sequential compilers * add ``--list-toolchains`` command line option for listing supported toolchains * add support for customizing software and modules install path suffixes * support both setuptools and distutils installation methods for finding installed easyconfigs * also consider robot path in list of paths searched for patch files * allow skipping of default extension sanity check (by setting ``modulename`` to False in options) * various bug fixes, including: * typos in toolchain Python modules w.r.t. ``imkl`` support, handling of ``i8`` / ``optarch`` / ``unroll`` options * purge before loading 'fake' module, unload 'fake' module before removing it, use original ``$MODULEPATH`` * restore environment after unloading fake module, set variables that were incorrectly unset, i.e., that were defined before as well * unset ``$TMPDIR`` for builds submitted as jobs (required by ``IntelBase`` easyblock) * correctly track easyconfig parse error * always run all jobs in regtest, also if dependency jobs failed * cosmetic adjustments to default EasyBuild configuration file to avoid confusion between e.g. ``build_dir`` and ``build_path`` (only latter matters) * fix SuSe hack, only prefix command with sourcing of ``/etc/profile.d/modules.sh`` if it is there * leave build directory before it is removed during cleanup step * load generated module file before running test cases **easyblocks** * added **3** new `generic` easyblocks: ``CMakePythonPackage`` , ``JAR`` , ``RPackage`` * added support for **23** new software packages that require customized support: * ACML, ALADIN, ant, Bioconductor (R packages), Chapel, Cufflinks, ESPResSo, FLUENT, Geant4, GHC, Java, NEURON, NWChem, PyZMQ, QuantumESPRESSO, R, Rmpi, ROOT, Rserve, SCOOP, Trinity, VSC-tools, XML * various enhancements, including: * clean up of ``python.py`` easyblock: * merge ``EB_DefaultPythonPackage`` and ``PythonPackage`` easyblocks into generic `easyblock` ``PythonPackage`` , which derives from ``ExtensionEasyblock`` * move ``EB_FortranPythonPackage`` into dedicated `generic` ``FortranPythonPackage`` easyblock module * split off support for building/installing ``nose`` , ``numpy`` , ``scipy`` into dedicated ``EB_*`` easyblock modules, which allows them to be built as stand-alone modules as well * clean up testing of Python packages ( ``PythonPackage`` easyblock) * make sure there is no ``site.cfg`` in home dir when building Python packages, because e.g. ``scipy`` will pick it up * added support for building Intel MKL wrappers with OpenMPI toolchain * cleaning up of fake module that was loaded for running tests * move calls to functions that rely on environment up in the chain of steps (mostly for cleanup reasons) * use better module name for UFC sanity check, minor change to sanity check paths for UFC * various bug fixes, including: * only call ``make ptcheck`` for ATLAS when multi-threading support is enabled * use a symbolic link for $HOME/intel instead of a randomly suffixed subdirectory in home and patching of Intel install scripts * latter does not work anymore with recent versions of Intel tools (2013.x) **easyconfigs** * added example easyconfig files for **48** new software packages: * ABINIT, ABySS, ACML, ALADIN, ant, BFAST, BLAST, Chapel, CLHEP, Cufflinks, ESPRresSo, GATE, GHC, Geant4, Greenlet, google-sparsehash, grib_api, HMMER, Java, JUnit, libibmad, libibumad, libibverbs, MCL, MDP, MEME, mpiBLAST, NCBI Toolkit, NEURON, NWChem, numpy, MDP, Oger, OpenPGM, paycheck, PyZMQ, QuantumESPRESSO, R, ROOT, SCOOP, scipy, Tophat, Trinity, util-linux, VSC-tools, wiki2beamer, XML, ZeroMQ * added example easyconfigs for gmacml, gmvapich2, iccifort, ictce, iomkl toolchains * added additional example easyconfig files for: * ATLAS, BLACS, Boost, Bowtie2, bzip2, CP2K, Doxygen, FFTW, GCC, HDF5, hwloc, icc, ifort, imkl, impi, JasPer, Libint, libreadline, libsmm, libxml, ncurses, netCDF, M4, Meep, MVAPICH2, OpenMPI, Python, ScaLAPACK, Szip, zlib * various enhancements, including: * major style cleanup of all example easyconfig file (PEP008 compliance) * added setuptools to list of Python extensions * get rid of ``parallel`` versionsuffix for HDF5, as its meaningless (MPI-enabled build is always parallel) * various 'bug' fixes, i.e. added missing dependencies or replaced OS dependencies with proper dependencies EasyBuild v1.0.2 (December 8th 2012) ------------------------------------ bugfix release **framework** * properly catch failing sanity check commands * fix bug in toolchain support which cause linking environment variables set by toolchain to include too many libraries * elements in toolchain variables were being passed by reference instead of by value * fix selecting a compiler toolchain for a specified software package ( ``--software-name`` ) if only a template is a viable option * fix passing command line parameters with ``--job`` * fix list of valid stops ( ``-s`` / ``--stop`` ) * fix minor issues in help messages ( ``-h`` / ``--help`` ) **easyblocks** * fix typos in WIEN2k easyblock (missing commas after list elements) **easyconfigs** * fixed source URL for ligtextutils (toolchain refactoring error) EasyBuild v1.0.1 (November 24th 2012) ------------------------------------- bugfix release **framework** * fix support for installing with ``distutils`` (broken import in ``setup.py`` ) * fix support for ACML as a toolchain element ( ``toolchains/linalg/acml.py`` ) * add name to aggregated regtest XML so that is parsed correctly by Jenkins * reorder code in ``main.py`` so that regtest also works with incomplete easyconfig paths * add bash script for running regression test and sending a trigger to Jenkins to pull in the XML with results * get rid of assumption that loaded modules should have name like ``foo/bar`` , make it more flexible * retry failed builds in regtest twice to ignore fluke errors * report leaf nodes in dependency graph when regtest is submitted * this is required for setting job dependencies in the regtest script for the Jenkins trigger job * implement and use rmtree2 as more (NFS) robust replacement for ``shutil.rmtree`` * bump max hit count for ``run_cmd_qa`` from 20 to 50, to make false positives of unasnwered questions less likely **easyblocks** * fix support for installing with ``distutils`` (broken import in ``setup.py`` ) * only build GMP/CLooG/PPL libraries during GCC build in parallel, don't install in parallel * ``make -j N install`` doesn't work consistently for GMP * fix GCC build on OS X * location of libraries is slightly different ( ``lib`` vs ``lib64`` dir) * add support to ``ConfigureMake`` easyblock for pre-passing tar options to configure * see ``tar_config_opts`` easyconfig parameter * workaround for issue with pax hanging ``configure`` with an interactive prompt * enhance Q&A for WRF and WIEN2k by adding entries to ``qa`` dict and ``no_qa`` list * use ``rmtree2`` from ``tools/filetools.py`` as more (NFS) robust replacement for ``shutil.rmtree`` **easyconfigs** * remove patch file for OpenMPI to resolve issue with pax hanging configure * ``tar_config_opts`` should be enabled as needed * disable parallel build for PAPI, seems to be causing problems EasyBuild v1.0 (November 13th 2012) ----------------------------------- * split up EasyBuild across three repositories: framework, easyblocks and easyconfigs * packaged EasyBuild, different parts can now be installed easily using ``easy_install`` **framework** * various changes to both internal and external API: * renamed main script to main.py (from ``build.py`` ) * file and directory organisation * module, class, function and function argument renaming and reorganisation * split up ``Application`` into ``EasyBlock`` and ``ConfigureMake`` (see easybuild-easyblocks for the latter) * created ``EasyConfig`` class for handling easyconfig files * renaming of EasyBuild configuration parameters (non-camelCase) * renaming of various easyconfig parameters (non-camelCase) * rename ``SOFTROOT`` and ``SOFTVERSION`` environment variables set in generated module files to ``EBROOT`` and ``EBVERSION`` * use 'extension' as generic terminology for Python packages, R libraries, Perl modules, ... * added support for building software packages in parallel via PBS jobs * added unit testing framework and initial set of unit tests for basic functionality * and run them in Jenkins continuous integration service, see https://jenkins1.ugent.be/view/EasyBuild/ * implement single-command regression test (e.g. to test building all supported software) * eb ``--regtest`` --robot * switch to new style Python classes * replaced ``toolkit`` module with ``toolchain`` package (total rewrite), providing modular support for toolchains * adjust default EasyBuild configuration to only use ``$HOME/.local/easybuild`` by default * added support for running EasyBuild without supplying an easyconfig file * make EasyBuild search for a matching easyconfig file * support automatic rewriting of an existing partially-matching easyconfig file (use this with care!) * support for automatically generating an easyconfig file according to given specifications (best effort!) * add support for looking for easyconfig file in Python search path if it can't be found on specified (relative) path (that way, easyconfig files available in the easybuild-easyconfigs package can be used easily) * various other enhancements and bug fixes, e.g.: * extended sanity check capabilities * cleaned up logging * creating of devel module which allows to mimic environment that was used by EasyBuild to build the software * support for creating dependency graphs for a set of easyconfig files * grouped options in help output and categorised available easyconfig parameters * more consistent code style **easyblocks** * implement class name encoding scheme, see wiki https://github.com/easybuilders/easybuild/wiki/Encode-class-names * (non-generic) easyblock class names are now prefixed with ``EB_`` and non-alphanumeric characters are escaped * split off generic easyblocks into separate package ``easyblocks.generic`` * added custom support for **39** software packages: * Armadillo, BiSearch, Boost, Bowtie2, BWA, bzip2, CGAL, CPLEX, DOLFIN, Eigen, flex, FSL, Hypre, libxml2, MetaVelvet, METIS, MTL4, MUMmer, ncurses, OpenFOAM, OpenSSL, ParMETIS, Pasha, PETSc, Primer3, python-meep, SAMtools, SCOTCH, SHRiMP, SLEPc, SOAPdenovo, SuiteSparse, SWIG, Tornado, Trilinos, UFC, Velvet, WIEN2k, XCrySDen * various enhancements and bug fixes to existing easyblocks **easyconfigs** * added example easyconfig files for **106** new software packages: * AMOS, Armadillo, ASE, Autoconf, BiSearch, Boost, Bowtie2, BWA, byacc, bzip2, CGAL, ClustalW2, CMake, CPLEX, cURL, CVXOPT, Cython, Docutils, DOLFIN, ECore, Eigen, expat, FASTX-Toolkit, FFC, FIAT, freetype, FSL, GEOS, git, glproto, GMP, gmvapich2, gompi, GPAW, GSL, guile, h5py, h5utils, Harminv, hwloc, Hypre, Infernal, Instant, Jinja2, libctl, libdrm, libffi, libgtextutils, libmatheval, libpciaccess, libpthread-stubs, libreadline, libtool, libunistring, libxcb, libxml2, makedepend, matplotlib, Meep, Mercurial, Mesa, MetaVelvet, METIS, MPFR, MTL4, MUMmer, ncurses, OpenFOAM, OpenSSL, ORCA, PAPI, ParMETIS, Pasha, PCRE, PETSc, petsc4py, pkg-config, Primer3, python-meep, RNAz, SAMtools, ScientificPython, SCOTCH, setuptools, Shapely, SHRiMP, SLEPc, SOAPdenovo, Sphinx, SuiteSparse, SWIG, Tcl, Theano, Tk, Tornado, Trilinos, UFC, UFL, Velvet, ViennaRNA, Viper, WIEN2k, xcb-proto, XCrySDen, xorg-macros, xproto * added additional example easyconfig files (versions, builds) for several software packages * Bison, BLACS, Doxygen, flex, GCC, HDF5, icc, ifort, libpng, M4, MVAPICH2, OpenMPI, Szip, tbb, zlib * replaced GCC/OpenMPI based easyconfig files with equivalents using the `gompi` toolchain * ATLAS, BLACS, FFTW, LAPACK, ScaLAPACK * enhanced Python example easyconfig files (more dependencies required for features, e.g. libreadline, bzip2, zlib, ...) * corrected file name of easyconfig files to adher to standard as followed by EasyBuild robot dependency resolver * style cleanup in existing easyconfig files EasyBuild v0.8 (June 29th 2012) ------------------------------- * added support for building/installing 17 additional software packages: * BEAGLE, Doxygen, g2clib, g2lib, HDF, HDF5, JasPer, libpng, Maple, MrBayes, NCL, netCDF, netCDF-Fortran, Szip, WPS, WRF, zlib * the build procedure for WRF and WPS includes running the tests available for these packages * various bug fixes and enhancements: * made support for interactive installers ( ``run_cmd_qa`` ) more robust * fixed Python git package check * implemented toolkit functions for determine compiler family, MPI type, MPI run command, ... EasyBuild v0.7 (June 18th 2012) ------------------------------- * fixed BLACS build * diagnostic tools to determine ``INTERFACE`` and ``TRANSCOMM`` values are now used * added support for building Bison, CP2K, flex * with regression test enabled for CP2K as part of build process * note: BLACS built with EasyBuild prior to v0.7 needs to be rebuilt for CP2K to work correctly * added ``--enable-mpi-threads`` to OpenMPI example easyconfigs * required for correct CP2K psmp build * adjusted libsmm example easyconfig for lower build time * to make the full regression test finish in a reasonable amount of time * added script to make porting of easyblocks from old to new EasyBuild codebase easier * takes care of refactoring, checks for PyLint warnings/errors, ... * fixed several small bugs * prefixed EasyBuild messages with ``==`` * full regression test passed (58 easyconfigs tested) EasyBuild v0.6 (May 11th 2012) ------------------------------ * added support for Intel compiler toolkit (ictce) * which included the Intel compilers, Intel Math Kernel Library (imkl) and Intel MPI library (impi) * added support for building Python with nose/numpy/scipy packages * added simple regression test * this version is able to build all supplied example easyconfigs EasyBuild v0.5 (April 6th 2012) ------------------------------- * first public release of EasyBuild * after a thorough cleanup of the EasyBuild framework of the in-house version * supports building HPL with goalf compiler toolkit * the goalf toolkit consists of the GCC compilers, and the OpenMPI, ATLAS, LAPACK, FFTW and ScaLAPACK libraries * also support build and installation of MVAPICH2","title":"EasyBuild release notes"},{"location":"removed-functionality/","text":"Removed functionality \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Removed-functionality.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Removed-functionality.rst in easybuilders/easybuild repo target: docs/removed-functionality.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _removed_functionality: Removed functionality ===================== Some of the functionality that was available in previous EasyBuild versions is now *removed* , after it was deprecated first in an earlier EasyBuild version (see :ref: `deprecation_policy` ). .. _overview_removed_40: Overview of removed functionality since EasyBuild v4.0 ------------------------------------------------------- In EasyBuild v4.0, some intrusive changes were made that break backward compatibility with earlier versions. .. note :: In addition, please take into account the additional changes in EasyBuild v4.0, which are documented :ref: `here <eb4_changes_overview>` . For authors of easyconfig files: * :ref: `depr_fftw_use_fma4` * :ref: `depr_sources_2_element_tuple` * :ref: `depr_pythonpackage_use_easy_install_setup_py_develop` For developers of easyblocks: * :ref: `depr_copytree_function` * :ref: `depr_adjust_permissions_skip_symlinks` For EasyBuild framework developers: * :ref: `depr_get_easyblock_class_default_fallback` * :ref: `depr_toolchain_add_dependencies` .. _depr_fftw_use_fma4: ``use_fma`` custom easyconfig parameter for FFTW ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.2.0 (May 5th 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``use_fma4`` **easyconfig parameter instead** The ``use_fma`` easyconfig parameter is no longer supported, and was replaced by the equivalent easyconfig parameter ``use_fma4`` . ``use_fma`` was introduced in EasyBuild v3.1.0 allow configuring FFTW with ``--enable-avx-128-fma`` . Since it is only supported on systems with AMD processors that have the ``FMA4`` feature, it was replaced by the more fittingly named ``use_fma4`` parameter in EasyBuild v3.2.0. .. _depr_sources_2_element_tuple: Specifying source files as 2-element tuples to provide a custom extraction command ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.3.0 (June 22nd 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``extract_cmd`` **key in Python dictionary format instead** Specyfing a custom extraction command for a particular source file by using a 2-element tuple in ``sources`` is no longer supported. Instead, a Python dictionary containing the ``filename`` and ``extract_cmd`` keys should be used instead, see :ref: `common_easyconfig_param_sources_alt` . So, this: .. code :: python # source file is actually a gzipped tarball (filename should be .tar.gz) # DEPRECATED FORMAT, don't use this anymore! sources = [( 'example.gz' , \"tar xfvz %s \" )] should be replaced with: .. code :: python sources = [{ 'filename' : 'example- %(version)s .gz' , 'extract_cmd' : \"tar xfvz %s \" , # source file is actually a gzipped tarball (filename should be .tar.gz) }] .. _depr_pythonpackage_use_easy_install_setup_py_develop: ``use_easy_install`` and ``use_setup_py_develop`` custom easyconfig parameters for ``PythonPackage`` easyblock ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.5.1 (Jan 17th 2018) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``install_target`` **easyconfig parameter instead** The custom easyconfig parameters ``use_easy_install`` and ``use_setup_py_develop`` for the ``PythonPackage`` easyblock are no longer supported. They are obsolete since the ``install_target`` custom easyconfig parameter was added in https://github.com/easybuilders/easybuild-easyblocks/pull/1341. Rather than using ``use_easy_install = True`` , you should now use ``install_target = 'easy_install'`` instead. Rather than using ``use_setup_py_develop = True`` , you should now use ``install_target = 'develop'`` instead. .. _depr_copytree_function: ``copytree`` function ~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.2.0 (May 5th 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``copy_dir`` **instead** The ``copytree`` function, which was a copy of the ``shutil.copytree`` function (introduced when Python 2.4 was still supported) is no longer supported. It has been replaced by the superior ``copy_dir`` function in the ``easybuild.tools.filetools`` module. ``copy_dir`` graciously handles any exceptions that occur, and is aware of the EasyBuild *dry run* mode. .. _depr_adjust_permissions_skip_symlinks: ``skip_symlinks`` named argument for ``adjust_permissions`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 (Nov 2018) * *removed in:* EasyBuild v4.0 * *alternatives* : *(none required)* The ``skip_symlinks`` argument for the ``adjust_permissions`` function is no longer supported since ``adjust_permissions`` has been changed to *always* skip symbolic links (this was already the default behaviour); see also https://github.com/easybuilders/easybuild-framework/pull/2644 . .. _depr_get_easyblock_class_default_fallback: ``default_fallback`` named argument for ``get_easyblock_class`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.2.0 (May 5th 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``error_on_missing_easyblock`` **named parameter instead** The ``get_easyblock_class`` implementation was cleaned up to remove the support for falling back to the generic ``ConfigureMake`` easyblock in EasyBuild v3.2.0 (see https://github.com/easybuilders/easybuild-framework/pull/2178), following the disabling of the :ref: `depr_ConfigureMake_fallback_eb1` in EasyBuild v2.0. The ``default_fallback`` named argument for ``get_easyblock_class`` was replaced by ``error_on_missing_easyblock`` , to retain support for ignoring a missing matching easyblock rather than raising an error. .. _depr_toolchain_add_dependencies: ``add_dependencies`` method in ``Toolchain`` class ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 * *removed in:* EasyBuild v4.0 * *alternatives* : **pass list of dependencies to** ``deps`` **named argument of** ``prepare`` **method instead** The ``add_dependencies`` method in the ``Toolchain`` class is no longer supported, to provide more flexibility in the EasyBuild framework w.r.t. handling of dependencies (see https://github.com/easybuilders/easybuild-framework/pull/2674). Instead, the list of dependencies should be passed to the ``Toolchain.prepare`` method, via the ``deps`` named argument. .. _overview_removed_30: Overview of removed functionality since EasyBuild v3.0 ------------------------------------------------------- In EasyBuild v3.0, some intrusive changes were made that break backward compatibility with earlier versions. For EasyBuild users & authors of easyconfig files: * :ref: `archived_easyconfigs` For developers of easyblocks: * :ref: `depr_error_reporting` * :ref: `depr_lapack_get_blas_lib` * :ref: `depr_get_netcdf_module_set_cmds` For EasyBuild framework developers: * :ref: `depr_error_reporting` .. _depr_error_reporting: ``error`` and ``exception`` log methods no longer raise an exception ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v2.1.0 (April'15) * *removed in:* EasyBuild v3.0 * *alternative(s)* : **use** ``raise EasyBuildError(...)`` **instead** The ``error()`` and ``exception()`` log methods defined by EasyBuild (in the ``easybuild.tools.build_log`` module) did not match the semantics of the `standard Python log methods <https://docs.python.org/2/library/logging.html#logging.Logger.error> `_, in the sense that they used to also raise an exception next to logging messages. This caused problems when 3rd party libraries (e.g., `gc3pie <https://pypi.python.org/pypi/gc3pie> `_ ) were being used by EasyBuild, since they may be using these log methods without expecting an exception being raised. The custom definitions for the ``error()`` and ``exception()`` log methods was removed in EasyBuild v3.0. Hence, these log methods should no longer be used to report errors since they will not raise an exception anymore once. Note that this applies both to the EasyBuild framework and to (custom) easyblocks. To report errors, an ``EasyBuildError`` should be raised instead. For example: .. code :: # make sure config.sh script is there if not os.path.exists(os.path.join(self.builddir, 'config.sh')): raise EasyBuildError(\"config.sh script is missing in %s\", self.builddir) .. _depr_lapack_get_blas_lib: ``get_blas_lib`` function provided by ``LAPACK`` easyblock has been removed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v1.3.0 (April'13); see https://github.com/easybuilders/easybuild-easyblocks/pull/150 * *removed in:* EasyBuild v3.0 * *alternative(s)* : **leverage modules from** ``easybuild.toolchain.linalg`` The ``get_blas_lib`` function provided by the ``LAPACK`` easyblock was removed, mainly because it included a hardcoded list of BLAS libraries. It was replaced by 'inlining' similar code into the easyblocks that rely on it (e.g. ScaLAPACK, cfr. https://github.com/easybuilders/easybuild-easyblocks/pull/1014), which only refers to the BLAS libraries that are relevant in that context. .. _depr_get_netcdf_module_set_cmds: ``get_netcdf_module_set_cmds`` function provided by ``netCDF`` easyblock was removed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v2.1.0 (April'15); see https://github.com/easybuilders/easybuild-easyblocks/pull/590 * *removed in:* EasyBuild v3.0 * *alternative(s)* : **rely on** ``set_netcdf_env_vars`` **and use** ``self.module_generator.set_environment`` The ``get_netcdf_module_set_cmds`` function provided by the ``netCDF`` easyblock was removed, because it returned ``setenv`` statements to be included in module files that are only compatible with module files in Tcl syntax; i.e. it did not take into account the ``--module-syntax`` configuration option. The use of ``get_netcdf_module_set_cmds`` should be replaced by using ``set_netcdf_env_vars`` to define the ``NETCDF*`` environment variables, in combination with ``self.module_generator.set_environment`` to obtain ``setenv`` statements that are compatible with the module syntax ( ``Tcl`` or ``Lua`` ) being used. See for example the changes made to the ``WRF`` and ``WPS`` easyblocks in https://github.com/easybuilders/easybuild-easyblocks/commit/7a05cbd823769e343b951002b4735dc7632e19c0. .. _overview_removed_20: Overview of removed functionality since EasyBuild v2.0 ------------------------------------------------------- In EasyBuild v2.0, some intrusive changes were made that break backward compatibility with earlier versions. For EasyBuild users: * :ref: `depr_python_version_compatibility` * :ref: `depr_easybuild_configuration_eb1` * :ref: `depr_softroot_version_env_vars_eb1` For authors of easyconfig files: * :ref: `depr_ConfigureMake_fallback_eb1` * :ref: `depr_easyconfig_parameters_eb1` * :ref: `depr_mrbayes_beagle_eb1` For developers of easyblocks: * :ref: `depr_easyblocks_API_eb1` * :ref: `depr_renamed_relocated_functions_eb1` * :ref: `depr_changes_generic_easyblocks_eb1` For EasyBuild framework developers: * :ref: `depr_easybuild_tools_modules_eb1` .. note :: A script ``fix-broken-easyconfigs.py`` is provided to fix easyconfig files that were broken by the backward-incompatible changes documented at :ref: `depr_ConfigureMake_fallback_eb1` and :ref: `depr_easyconfig_parameters_eb1` . See :ref: `fix_broken_easyconfigs_script` for more information. .. _depr_python_version_compatibility: Python version compatibility ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **Compatibility with Python 2.6 is removed.** * *deprecated since:* EasyBuild v4.1.0 (Nov'19) * *removed in:* EasyBuild v4.4.0 * *alternative(s)* : **upgrade to Python v2.7.x or v3.5+** Support for running EasyBuild on top of Python 2.6 was removed in EasyBuild version 4.4.0. You should upgrade to a newer version of Python (see also :ref: `py2_py3_compatibility` ). **Compatibility with Python 2.4 is removed.** * *deprecated since:* EasyBuild v1.14.0 (July'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : **upgrade to Python v2.6.x or v2.7.x** Ever since EasyBuild v1.0, the codebase has been Python 2.4 compatible. One reason for this is that EasyBuild was being used on a daily basis on Scientific Linux 5, in which the Python 2.4.x is the system default. Starting with EasyBuild v2.0 support for Python 2.4 is removed, and only ensure compatibility with Python 2.6.x or a more recent Python 2.x. This will enable us to gradually also make the codebase compatible with Python 3.x, which is difficult to do without removing support for Python 2.4. .. _depr_easybuild_configuration_eb1: EasyBuild configuration ~~~~~~~~~~~~~~~~~~~~~~~ **Old-style EasyBuild configuration is removed.** * *deprecated since:* EasyBuild v1.3.0 (Apr'13) * *removed in* : EasyBuild v2.0 * *alternatives:* **new-style configuration** (see :ref: `configuring_easybuild` ) Early versions of EasyBuild v1.x provided support for configuring EasyBuild via a *Python module* that was automagically executed when available. Since EasyBuild v1.3 a safer and more consistent way of configuring EasyBuild is supported, which aligns the EasyBuild command line options, ``$EASYBUILD_X`` environment variables and key-value style configuration files. More information about the new(er) and recommended configuration style is available :ref: `here <configuring_easybuild>` . For detailed information with respect to porting from the old to the new configuration style, see :ref: `configuring_easybuild_legacy` . Location of default configuration file ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ **The default configuration file location** ``$HOME/.easybuild/config.cfg`` **is no longer considered.** * *deprecated since:* EasyBuild v1.11.0 (Feb'14) * *removed in* : EasyBuild v2.0 * *alternatives:* ``$XDG_CONFIG_HOME/easybuild/config.cfg`` (equivalent to ``$HOME/.config/easybuild/config.cfg`` ) The default path for the new-style configuration path is ``$XDG_CONFIG_HOME/easybuild/config.cfg`` (or ``$HOME/.config/easybuild/config.cfg`` if ``$XDG_CONFIG_HOME`` is not set), see :ref: `list_of_configuration_files` . The previous default path ``$HOME/.easybuild/config.cfg`` that was in place since EasyBuild v1.3.0 is no longer considered. .. _depr_ConfigureMake_fallback_eb1: Automagic fallback to ``ConfigureMake`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **The automagic fallback to the** ``ConfigureMake`` **easyblock is removed.** * *deprecated since:* EasyBuild v1.16.0 (Dec'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : specify ``easyblock = 'ConfigureMake'`` in easyconfig file If the ``easyblock`` easyconfig was not specified, EasyBuild tries to find a matching easyblock based on the software name. In EasyBuild v1.x, the generic ``ConfigureMake`` easyblock was used if no matching easyblock could be found. This behavior is now removed; instead, easyconfigs that require using the ``ConfigureMake`` easyblock *must* include the following :: easyblock = 'ConfigureMake' .. _depr_easyconfig_parameters_eb1: Easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~ Some easyconfig parameters are removed. .. note :: A script is available to fix easyconfig files that are broken because they still rely on this functionality, see :ref: `fix_broken_easyconfigs_script` . .. _depr_premakeopts_makeopts_eb1: Options for build command ^^^^^^^^^^^^^^^^^^^^^^^^^ **The** ``premakeopts`` **and** ``makeopts`` **easyconfig parameters are removed.** * *deprecated since:* EasyBuild v1.13.0 (May'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``prebuildopts`` / ``buildopts`` instead For consistency in terminology, the ``premakeopts`` and ``makeopts`` generic easyconfig parameters are removed, in favor of their alternative parameters, ``prebuildopts`` and ``buildopts`` , resp. (see also :ref: `configure_build_install_command_options` ) .. note :: Since EasyBuild v1.13.0, ``buildopts`` is automatically defined with the value of ``makeopts`` , unless ``buildopts`` was specified by itself. When both values are specified, ``buildopts`` takes precedence of ``makeopts`` (analogous for ``prebuildopts`` / ``premakeopts`` ). .. _depr_shared_lib_ext_eb1: Shared library extension ^^^^^^^^^^^^^^^^^^^^^^^^ **The** ``shared_lib_ext`` **'constant' in easyconfigs is no longer defined.** * *deprecated since:* EasyBuild v1.5.0 (June'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``SHLIB_EXT`` instead The ``shared_lib_ext`` \"magic\" variable representing the extension for shared libraries ( ``.so`` on Linux, ``.dylib`` on OS X) is no longer defined; the easyconfig constant ``SHLIB_EXT`` should be using instead. .. _depr_license_eb1: Software license ^^^^^^^^^^^^^^^^ **The** ``license`` **easyconfig parameter is removed.** * *deprecated since:* EasyBuild v1.11.0 (Feb'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``license_file`` or ``software_license`` instead The ``license`` easyconfig parameter, which was specific to the ``IntelBase`` generic easyblock and thus relevant for Intel tools, is removed. The generic ``license_file`` easyconfig parameter should be used instead, to specify the location of the license file (or server). This change was made to avoid confusion with the ``software_license`` generic easyconfig parameter, which can be used to specify the license under which the software was released (e.g., GPLv2, BSD, etc.). Here, the specified value *must* be a known license type (see ``eb --avail-easyconfig-licenses`` ). .. note :: The `software_license` easyconfig parameter will become **mandatory** at some point. .. _depr_mrbayes_beagle_eb1: ``BEAGLE`` dependency in ``MrBayes`` easyblock replaced by ``beagle-lib`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **The** ``MrBayes`` **easyblock no longer considers** ``BEAGLE`` **as a valid dependency.** * *deprecated since:* EasyBuild v1.6.0 (Jul'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``beagle-lib`` instead Due to a misnomer in the easyconfig files for ``beagle-lib`` (formerly named ``BEAGLE`` ), the custom easyblock for ``MrBayes`` now no longer considers ``BEAGLE`` as a dependency. The library required by ``MrBayes`` must now be provided as a dependency named ``beagle-lib`` . EasyBuild API changes ~~~~~~~~~~~~~~~~~~~~~ Some changes in the EasyBuild API were made, which potentiallty affects easyblocks and the EasyBuild framework itself. .. _depr_easyblocks_API_eb1: Easyblocks API (``EasyBlock`` class from ``easybuild.framework.easyblock``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The API for easyblocks was modified slightly, to correct for a couple of historic mistakes. Return type of ``extra_options`` method +++++++++++++++++++++++++++++++++++++++ **The list-of-tuples return type of the** ``extra_options`` **method must now be a** ``dict`` **instead.** * *deprecated since:* EasyBuild v1.12.0 (Apr'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : ensure/assume ``dict`` return type The return type of the ``extra_options`` static method in the ``EasyBlock`` class has been changed to a *dictionary* ( ``dict`` ), rather than a list of key-value tuples. Custom easyconfig parameters should be added via a *dict* -typed value to the ``extra_options`` function of parent easyblock. For example (taken from the generic easyblock ``Binary`` ) :: @staticmethod def extra_options(extra_vars=None): \"\"\"Extra easyconfig parameters specific to Binary easyblock.\"\"\" extra_vars = EasyBlock.extra_options(extra_vars) extra_vars.update({ 'install_cmd': [None, \"Install command to be used.\", CUSTOM], }) return extra_vars Extension filter template +++++++++++++++++++++++++ **The** ``name`` **and** ``version`` **templates in** ``exts_filter`` **are removed.** * *deprecated since:* EasyBuild v1.2.0 (Feb'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``ext_name`` and ``ext_version`` instead Only the ``ext_name`` , ``ext_version`` and ``src`` template strings can be used in the ``exts_filter`` extension filter easyconfig parameter; the ``name`` and ``version`` template strings are removed. For example (default extension filter for Python packages) :: exts_filter = (\"python -c 'import %(ext_name)s'\", \"\") Module path of default class for extensions +++++++++++++++++++++++++++++++++++++++++++ **Specifying the module path in** ``exts_defaultclass`` **is no longer possible.** * *deprecated since:* EasyBuild v0.5 (Apr'12) * *removed in:* EasyBuild v2.0 * *alternative(s)* : *(none required, module path is derived from specified class name)* Explicitly specifying the module path for the default class to use for extensions (via ``exts_defaultclass`` ) is no longer possible. Only the class name should be specified, the corresponding module path is derived from it. Module path for easyblocks ++++++++++++++++++++++++++ **Deriving the module path for easyblocks from the software name is removed.** * *deprecated since:* EasyBuild v1.4.0 (May'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use easyblock class name according to encoding scheme (e.g., ``EB_Foo`` ) Determining the *location* of Python modules representing easyblocks based on the software name ( ``name`` ) is removed. EasyBuild *must* be able to determine the easyblock module path solely based on the name of the easyblock Python class. Easyblocks with a class name that is already honoring the encoding scheme implemented by the ``encode_class_name`` function will not be affected. .. _depr_easybuild_tools_modules_eb1: ``easybuild.tools.modules`` Python module ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ **The API of the** ``easybuild.tools.modules`` **module has been updated, certain aspects of the old API are removed.** * *deprecated since:* EasyBuild v1.8.0 (Oct'13) & v1.15.0 (Sept'15) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use equivalents available in new API (see below) The API of the ``easybuild.tools.modules`` Python module has been changed extensively when implementing support for alternative module naming schemes: * the ``modules`` class variable and the ``add_module`` / ``remove_module`` methods are removed; modules should be (un)loaded using the ``load`` and ``unload`` methods instead * the ``mod_paths`` and ``modulePath`` named arguments for the ``run_module`` method are removed; the class instance should be created with a specific list of module paths instead * the ``Modules`` class to obtain a class instance representing a modules tool interface is removed; the ``modules_tool`` function should be used instead Additionally, the ``exists`` method which only takes a single module name is removed; it is replaced by the ``exist`` method, which takes a list of module names *(since EasyBuild v1.15.0 (Sept'15))* . **Easyblocks should not be using** ``easybuild.tools.modules`` **directly, and hence should be unaffected.** .. _depr_softroot_version_env_vars_eb1: ``$SOFTX`` environment variables in generated module files ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ``$SOFTX`` **environment variables set by module files generated with EasyBuild v0.x will no longer be taken into account.** * *deprecated since:* EasyBuild v1.3.0 (Apr'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : reinstall (ancient) module files which are only defining the ``$SOFTX`` environment variables The ``get_software_root`` and ``get_software_version`` functions will only take ``$EBROOTFOO`` and ``$EBVERSIONFOO`` environment variables into account, as opposed to also considering the ``$SOFTROOTFOO`` and ``$SOFTVERSIONFOO`` environment variables (which were set in modules generated by EasyBuild v0.x). Likewise, adhering to the ``$SOFTDEVELFOO`` environment variables is removed. *This is only relevant to early adopters who are still using module files generated by EasyBuild v0.x.* .. _depr_renamed_relocated_functions_eb1: Renamed/relocated functions ^^^^^^^^^^^^^^^^^^^^^^^^^^^ **Some functions/methods have been renamed or relocated, their equivalents under a previous location/name are removed.** * *deprecated since:* *(depends on function/method, see below)* * *removed in:* EasyBuild v2.0 * *alternative(s)* : use new location/name A number of functions and methods that are part of the EasyBuild framework API have been renamed, mainly for consistency reasons. * the ``moduleGenerator`` handle to the ``ModuleGenerator`` object instance has been renamed to ``module_generator`` ; hence, easyblock should be using ``self.module_generator`` rather than ``self.moduleGenerator`` *(since EasyBuild v1.16.0 (Dec'14))* * ``source_paths()`` (in ``easybuild.tools.config`` ) replaces the removed ``source_path()`` *(since EasyBuild v1.8.0 (Oct'13))* * ``get_avail_core_count()`` (in ``easybuild.tools.systemtools`` ) replaces the removed ``get_core_count()`` *(since EasyBuild v1.9.0 (Nov'13))* * ``get_os_type()`` (in ``easybuild.tools.systemtools`` ) replaces the removed ``get_kernel_name`` *(since EasyBuild v1.3.0 (Apr'13))* * the ``det_full_ec_version`` function available from ``easybuild.tools.module_generator`` replaces the removed ``det_installversion`` function that was available from ``easybuild.framework.easyconfig.*`` *(since EasyBuild v1.8.0 (Oct'13))* Some functions have moved to a different location: * the ``read_environment`` function is now provided by the ``easybuild.tools.environment`` module, rather than by ``easybuild.tools.config`` or ``easybuild.tools.utilities`` *(since EasyBuild v1.7.0 (Sept'13))* * the ``modify_env`` function is now provided by the ``easybuild.tools.environment`` module, rather than by ``easybuild.tools.filetools`` *(since EasyBuild v1.7.0 (Sep'13))* * the ``run_cmd`` , ``run_cmd_qa`` and ``parse_log_for_error`` functions are now provided by the ``easybuild.tools.run`` module, rather than by ``easybuild.tools.filetools`` *(since EasyBuild v1.11.0 (Feb'14))* The ``get_log`` function provided by the ``easybuild.tools.build_log`` module has been removed entirely, no alternatives are provided (since none are needed). *(since EasyBuild v1.3.0 (Apr'13))* .. _depr_changes_generic_easyblocks_eb1: Changes in (generic) easyblocks ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ``srcdir`` replaces ``builddir`` as named argument in ``CMakeMake.configure_step`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ **The named argument** ``builddir`` **in the** ``configure_step`` **method of the generic** ``CMakeMake`` **easyblock was replaced by ** ``srcdir`` ** .** * *deprecated since:* EasyBuild v1.4.0 (May'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : equivalent ``srcdir`` named argument Since the ``builddir`` named argument in the ``configure_step`` method of the generic ``CMakeMake`` easyblock was a misnomer (it specifies the location of the *source* directory that should be provided to ``cmake`` ), it was replaced with an equivalent named argument ``srcdir`` . ``VersionIndependentPythonPackage`` replaces ``VersionIndependendPythonPackage`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ **The generic easyblock** ``VersionIndependendPythonPackage`` **was replaced with the equivalent generic easyblock** ``VersionIndependentPythonPackage`` **.** * *deprecated since:* EasyBuild v1.11.0 (Feb'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : ``VersionIndependentPythonPackage`` Because of to a typo in the name, the ``VersionIndependendPythonPackage`` generic easyblock was replaced by the equivalent ``VersionIndependentPythonPackage`` generic easyblock. ``get_sitearch_suffix`` function in ``Perl`` easyblock is removed +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ **The** ``get_sitearch_suffix`` **function in the** ``Perl`` **easyblock was replaced in favor of the more generic** ``get_site_suffix`` **function.** * *deprecated since:* EasyBuild v1.7.0 (Sept'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : ``get_site_suffix('sitearch')`` The ``get_sitearch_suffix`` function provided by the ``Perl`` easyblock, which can be (and is) imported in/used by other easyblocks, has been replaced by the more generic ``get_site_suffix`` function. To obtain the same functionality as was provided by ``get_sitearch_suffix`` , use ``get_site_suffix('sitearch')`` instead.","title":"Removed functionality"},{"location":"removed-functionality/#removed-functionality","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Removed-functionality.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Removed-functionality.rst in easybuilders/easybuild repo target: docs/removed-functionality.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _removed_functionality: Removed functionality ===================== Some of the functionality that was available in previous EasyBuild versions is now *removed* , after it was deprecated first in an earlier EasyBuild version (see :ref: `deprecation_policy` ). .. _overview_removed_40: Overview of removed functionality since EasyBuild v4.0 ------------------------------------------------------- In EasyBuild v4.0, some intrusive changes were made that break backward compatibility with earlier versions. .. note :: In addition, please take into account the additional changes in EasyBuild v4.0, which are documented :ref: `here <eb4_changes_overview>` . For authors of easyconfig files: * :ref: `depr_fftw_use_fma4` * :ref: `depr_sources_2_element_tuple` * :ref: `depr_pythonpackage_use_easy_install_setup_py_develop` For developers of easyblocks: * :ref: `depr_copytree_function` * :ref: `depr_adjust_permissions_skip_symlinks` For EasyBuild framework developers: * :ref: `depr_get_easyblock_class_default_fallback` * :ref: `depr_toolchain_add_dependencies` .. _depr_fftw_use_fma4: ``use_fma`` custom easyconfig parameter for FFTW ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.2.0 (May 5th 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``use_fma4`` **easyconfig parameter instead** The ``use_fma`` easyconfig parameter is no longer supported, and was replaced by the equivalent easyconfig parameter ``use_fma4`` . ``use_fma`` was introduced in EasyBuild v3.1.0 allow configuring FFTW with ``--enable-avx-128-fma`` . Since it is only supported on systems with AMD processors that have the ``FMA4`` feature, it was replaced by the more fittingly named ``use_fma4`` parameter in EasyBuild v3.2.0. .. _depr_sources_2_element_tuple: Specifying source files as 2-element tuples to provide a custom extraction command ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.3.0 (June 22nd 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``extract_cmd`` **key in Python dictionary format instead** Specyfing a custom extraction command for a particular source file by using a 2-element tuple in ``sources`` is no longer supported. Instead, a Python dictionary containing the ``filename`` and ``extract_cmd`` keys should be used instead, see :ref: `common_easyconfig_param_sources_alt` . So, this: .. code :: python # source file is actually a gzipped tarball (filename should be .tar.gz) # DEPRECATED FORMAT, don't use this anymore! sources = [( 'example.gz' , \"tar xfvz %s \" )] should be replaced with: .. code :: python sources = [{ 'filename' : 'example- %(version)s .gz' , 'extract_cmd' : \"tar xfvz %s \" , # source file is actually a gzipped tarball (filename should be .tar.gz) }] .. _depr_pythonpackage_use_easy_install_setup_py_develop: ``use_easy_install`` and ``use_setup_py_develop`` custom easyconfig parameters for ``PythonPackage`` easyblock ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.5.1 (Jan 17th 2018) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``install_target`` **easyconfig parameter instead** The custom easyconfig parameters ``use_easy_install`` and ``use_setup_py_develop`` for the ``PythonPackage`` easyblock are no longer supported. They are obsolete since the ``install_target`` custom easyconfig parameter was added in https://github.com/easybuilders/easybuild-easyblocks/pull/1341. Rather than using ``use_easy_install = True`` , you should now use ``install_target = 'easy_install'`` instead. Rather than using ``use_setup_py_develop = True`` , you should now use ``install_target = 'develop'`` instead. .. _depr_copytree_function: ``copytree`` function ~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.2.0 (May 5th 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``copy_dir`` **instead** The ``copytree`` function, which was a copy of the ``shutil.copytree`` function (introduced when Python 2.4 was still supported) is no longer supported. It has been replaced by the superior ``copy_dir`` function in the ``easybuild.tools.filetools`` module. ``copy_dir`` graciously handles any exceptions that occur, and is aware of the EasyBuild *dry run* mode. .. _depr_adjust_permissions_skip_symlinks: ``skip_symlinks`` named argument for ``adjust_permissions`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 (Nov 2018) * *removed in:* EasyBuild v4.0 * *alternatives* : *(none required)* The ``skip_symlinks`` argument for the ``adjust_permissions`` function is no longer supported since ``adjust_permissions`` has been changed to *always* skip symbolic links (this was already the default behaviour); see also https://github.com/easybuilders/easybuild-framework/pull/2644 . .. _depr_get_easyblock_class_default_fallback: ``default_fallback`` named argument for ``get_easyblock_class`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.2.0 (May 5th 2017) * *removed in:* EasyBuild v4.0 * *alternatives* : **use** ``error_on_missing_easyblock`` **named parameter instead** The ``get_easyblock_class`` implementation was cleaned up to remove the support for falling back to the generic ``ConfigureMake`` easyblock in EasyBuild v3.2.0 (see https://github.com/easybuilders/easybuild-framework/pull/2178), following the disabling of the :ref: `depr_ConfigureMake_fallback_eb1` in EasyBuild v2.0. The ``default_fallback`` named argument for ``get_easyblock_class`` was replaced by ``error_on_missing_easyblock`` , to retain support for ignoring a missing matching easyblock rather than raising an error. .. _depr_toolchain_add_dependencies: ``add_dependencies`` method in ``Toolchain`` class ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v3.8.0 * *removed in:* EasyBuild v4.0 * *alternatives* : **pass list of dependencies to** ``deps`` **named argument of** ``prepare`` **method instead** The ``add_dependencies`` method in the ``Toolchain`` class is no longer supported, to provide more flexibility in the EasyBuild framework w.r.t. handling of dependencies (see https://github.com/easybuilders/easybuild-framework/pull/2674). Instead, the list of dependencies should be passed to the ``Toolchain.prepare`` method, via the ``deps`` named argument. .. _overview_removed_30: Overview of removed functionality since EasyBuild v3.0 ------------------------------------------------------- In EasyBuild v3.0, some intrusive changes were made that break backward compatibility with earlier versions. For EasyBuild users & authors of easyconfig files: * :ref: `archived_easyconfigs` For developers of easyblocks: * :ref: `depr_error_reporting` * :ref: `depr_lapack_get_blas_lib` * :ref: `depr_get_netcdf_module_set_cmds` For EasyBuild framework developers: * :ref: `depr_error_reporting` .. _depr_error_reporting: ``error`` and ``exception`` log methods no longer raise an exception ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v2.1.0 (April'15) * *removed in:* EasyBuild v3.0 * *alternative(s)* : **use** ``raise EasyBuildError(...)`` **instead** The ``error()`` and ``exception()`` log methods defined by EasyBuild (in the ``easybuild.tools.build_log`` module) did not match the semantics of the `standard Python log methods <https://docs.python.org/2/library/logging.html#logging.Logger.error> `_, in the sense that they used to also raise an exception next to logging messages. This caused problems when 3rd party libraries (e.g., `gc3pie <https://pypi.python.org/pypi/gc3pie> `_ ) were being used by EasyBuild, since they may be using these log methods without expecting an exception being raised. The custom definitions for the ``error()`` and ``exception()`` log methods was removed in EasyBuild v3.0. Hence, these log methods should no longer be used to report errors since they will not raise an exception anymore once. Note that this applies both to the EasyBuild framework and to (custom) easyblocks. To report errors, an ``EasyBuildError`` should be raised instead. For example: .. code :: # make sure config.sh script is there if not os.path.exists(os.path.join(self.builddir, 'config.sh')): raise EasyBuildError(\"config.sh script is missing in %s\", self.builddir) .. _depr_lapack_get_blas_lib: ``get_blas_lib`` function provided by ``LAPACK`` easyblock has been removed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v1.3.0 (April'13); see https://github.com/easybuilders/easybuild-easyblocks/pull/150 * *removed in:* EasyBuild v3.0 * *alternative(s)* : **leverage modules from** ``easybuild.toolchain.linalg`` The ``get_blas_lib`` function provided by the ``LAPACK`` easyblock was removed, mainly because it included a hardcoded list of BLAS libraries. It was replaced by 'inlining' similar code into the easyblocks that rely on it (e.g. ScaLAPACK, cfr. https://github.com/easybuilders/easybuild-easyblocks/pull/1014), which only refers to the BLAS libraries that are relevant in that context. .. _depr_get_netcdf_module_set_cmds: ``get_netcdf_module_set_cmds`` function provided by ``netCDF`` easyblock was removed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *deprecated since:* EasyBuild v2.1.0 (April'15); see https://github.com/easybuilders/easybuild-easyblocks/pull/590 * *removed in:* EasyBuild v3.0 * *alternative(s)* : **rely on** ``set_netcdf_env_vars`` **and use** ``self.module_generator.set_environment`` The ``get_netcdf_module_set_cmds`` function provided by the ``netCDF`` easyblock was removed, because it returned ``setenv`` statements to be included in module files that are only compatible with module files in Tcl syntax; i.e. it did not take into account the ``--module-syntax`` configuration option. The use of ``get_netcdf_module_set_cmds`` should be replaced by using ``set_netcdf_env_vars`` to define the ``NETCDF*`` environment variables, in combination with ``self.module_generator.set_environment`` to obtain ``setenv`` statements that are compatible with the module syntax ( ``Tcl`` or ``Lua`` ) being used. See for example the changes made to the ``WRF`` and ``WPS`` easyblocks in https://github.com/easybuilders/easybuild-easyblocks/commit/7a05cbd823769e343b951002b4735dc7632e19c0. .. _overview_removed_20: Overview of removed functionality since EasyBuild v2.0 ------------------------------------------------------- In EasyBuild v2.0, some intrusive changes were made that break backward compatibility with earlier versions. For EasyBuild users: * :ref: `depr_python_version_compatibility` * :ref: `depr_easybuild_configuration_eb1` * :ref: `depr_softroot_version_env_vars_eb1` For authors of easyconfig files: * :ref: `depr_ConfigureMake_fallback_eb1` * :ref: `depr_easyconfig_parameters_eb1` * :ref: `depr_mrbayes_beagle_eb1` For developers of easyblocks: * :ref: `depr_easyblocks_API_eb1` * :ref: `depr_renamed_relocated_functions_eb1` * :ref: `depr_changes_generic_easyblocks_eb1` For EasyBuild framework developers: * :ref: `depr_easybuild_tools_modules_eb1` .. note :: A script ``fix-broken-easyconfigs.py`` is provided to fix easyconfig files that were broken by the backward-incompatible changes documented at :ref: `depr_ConfigureMake_fallback_eb1` and :ref: `depr_easyconfig_parameters_eb1` . See :ref: `fix_broken_easyconfigs_script` for more information. .. _depr_python_version_compatibility: Python version compatibility ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **Compatibility with Python 2.6 is removed.** * *deprecated since:* EasyBuild v4.1.0 (Nov'19) * *removed in:* EasyBuild v4.4.0 * *alternative(s)* : **upgrade to Python v2.7.x or v3.5+** Support for running EasyBuild on top of Python 2.6 was removed in EasyBuild version 4.4.0. You should upgrade to a newer version of Python (see also :ref: `py2_py3_compatibility` ). **Compatibility with Python 2.4 is removed.** * *deprecated since:* EasyBuild v1.14.0 (July'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : **upgrade to Python v2.6.x or v2.7.x** Ever since EasyBuild v1.0, the codebase has been Python 2.4 compatible. One reason for this is that EasyBuild was being used on a daily basis on Scientific Linux 5, in which the Python 2.4.x is the system default. Starting with EasyBuild v2.0 support for Python 2.4 is removed, and only ensure compatibility with Python 2.6.x or a more recent Python 2.x. This will enable us to gradually also make the codebase compatible with Python 3.x, which is difficult to do without removing support for Python 2.4. .. _depr_easybuild_configuration_eb1: EasyBuild configuration ~~~~~~~~~~~~~~~~~~~~~~~ **Old-style EasyBuild configuration is removed.** * *deprecated since:* EasyBuild v1.3.0 (Apr'13) * *removed in* : EasyBuild v2.0 * *alternatives:* **new-style configuration** (see :ref: `configuring_easybuild` ) Early versions of EasyBuild v1.x provided support for configuring EasyBuild via a *Python module* that was automagically executed when available. Since EasyBuild v1.3 a safer and more consistent way of configuring EasyBuild is supported, which aligns the EasyBuild command line options, ``$EASYBUILD_X`` environment variables and key-value style configuration files. More information about the new(er) and recommended configuration style is available :ref: `here <configuring_easybuild>` . For detailed information with respect to porting from the old to the new configuration style, see :ref: `configuring_easybuild_legacy` . Location of default configuration file ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ **The default configuration file location** ``$HOME/.easybuild/config.cfg`` **is no longer considered.** * *deprecated since:* EasyBuild v1.11.0 (Feb'14) * *removed in* : EasyBuild v2.0 * *alternatives:* ``$XDG_CONFIG_HOME/easybuild/config.cfg`` (equivalent to ``$HOME/.config/easybuild/config.cfg`` ) The default path for the new-style configuration path is ``$XDG_CONFIG_HOME/easybuild/config.cfg`` (or ``$HOME/.config/easybuild/config.cfg`` if ``$XDG_CONFIG_HOME`` is not set), see :ref: `list_of_configuration_files` . The previous default path ``$HOME/.easybuild/config.cfg`` that was in place since EasyBuild v1.3.0 is no longer considered. .. _depr_ConfigureMake_fallback_eb1: Automagic fallback to ``ConfigureMake`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **The automagic fallback to the** ``ConfigureMake`` **easyblock is removed.** * *deprecated since:* EasyBuild v1.16.0 (Dec'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : specify ``easyblock = 'ConfigureMake'`` in easyconfig file If the ``easyblock`` easyconfig was not specified, EasyBuild tries to find a matching easyblock based on the software name. In EasyBuild v1.x, the generic ``ConfigureMake`` easyblock was used if no matching easyblock could be found. This behavior is now removed; instead, easyconfigs that require using the ``ConfigureMake`` easyblock *must* include the following :: easyblock = 'ConfigureMake' .. _depr_easyconfig_parameters_eb1: Easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~ Some easyconfig parameters are removed. .. note :: A script is available to fix easyconfig files that are broken because they still rely on this functionality, see :ref: `fix_broken_easyconfigs_script` . .. _depr_premakeopts_makeopts_eb1: Options for build command ^^^^^^^^^^^^^^^^^^^^^^^^^ **The** ``premakeopts`` **and** ``makeopts`` **easyconfig parameters are removed.** * *deprecated since:* EasyBuild v1.13.0 (May'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``prebuildopts`` / ``buildopts`` instead For consistency in terminology, the ``premakeopts`` and ``makeopts`` generic easyconfig parameters are removed, in favor of their alternative parameters, ``prebuildopts`` and ``buildopts`` , resp. (see also :ref: `configure_build_install_command_options` ) .. note :: Since EasyBuild v1.13.0, ``buildopts`` is automatically defined with the value of ``makeopts`` , unless ``buildopts`` was specified by itself. When both values are specified, ``buildopts`` takes precedence of ``makeopts`` (analogous for ``prebuildopts`` / ``premakeopts`` ). .. _depr_shared_lib_ext_eb1: Shared library extension ^^^^^^^^^^^^^^^^^^^^^^^^ **The** ``shared_lib_ext`` **'constant' in easyconfigs is no longer defined.** * *deprecated since:* EasyBuild v1.5.0 (June'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``SHLIB_EXT`` instead The ``shared_lib_ext`` \"magic\" variable representing the extension for shared libraries ( ``.so`` on Linux, ``.dylib`` on OS X) is no longer defined; the easyconfig constant ``SHLIB_EXT`` should be using instead. .. _depr_license_eb1: Software license ^^^^^^^^^^^^^^^^ **The** ``license`` **easyconfig parameter is removed.** * *deprecated since:* EasyBuild v1.11.0 (Feb'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``license_file`` or ``software_license`` instead The ``license`` easyconfig parameter, which was specific to the ``IntelBase`` generic easyblock and thus relevant for Intel tools, is removed. The generic ``license_file`` easyconfig parameter should be used instead, to specify the location of the license file (or server). This change was made to avoid confusion with the ``software_license`` generic easyconfig parameter, which can be used to specify the license under which the software was released (e.g., GPLv2, BSD, etc.). Here, the specified value *must* be a known license type (see ``eb --avail-easyconfig-licenses`` ). .. note :: The `software_license` easyconfig parameter will become **mandatory** at some point. .. _depr_mrbayes_beagle_eb1: ``BEAGLE`` dependency in ``MrBayes`` easyblock replaced by ``beagle-lib`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **The** ``MrBayes`` **easyblock no longer considers** ``BEAGLE`` **as a valid dependency.** * *deprecated since:* EasyBuild v1.6.0 (Jul'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``beagle-lib`` instead Due to a misnomer in the easyconfig files for ``beagle-lib`` (formerly named ``BEAGLE`` ), the custom easyblock for ``MrBayes`` now no longer considers ``BEAGLE`` as a dependency. The library required by ``MrBayes`` must now be provided as a dependency named ``beagle-lib`` . EasyBuild API changes ~~~~~~~~~~~~~~~~~~~~~ Some changes in the EasyBuild API were made, which potentiallty affects easyblocks and the EasyBuild framework itself. .. _depr_easyblocks_API_eb1: Easyblocks API (``EasyBlock`` class from ``easybuild.framework.easyblock``) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The API for easyblocks was modified slightly, to correct for a couple of historic mistakes. Return type of ``extra_options`` method +++++++++++++++++++++++++++++++++++++++ **The list-of-tuples return type of the** ``extra_options`` **method must now be a** ``dict`` **instead.** * *deprecated since:* EasyBuild v1.12.0 (Apr'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : ensure/assume ``dict`` return type The return type of the ``extra_options`` static method in the ``EasyBlock`` class has been changed to a *dictionary* ( ``dict`` ), rather than a list of key-value tuples. Custom easyconfig parameters should be added via a *dict* -typed value to the ``extra_options`` function of parent easyblock. For example (taken from the generic easyblock ``Binary`` ) :: @staticmethod def extra_options(extra_vars=None): \"\"\"Extra easyconfig parameters specific to Binary easyblock.\"\"\" extra_vars = EasyBlock.extra_options(extra_vars) extra_vars.update({ 'install_cmd': [None, \"Install command to be used.\", CUSTOM], }) return extra_vars Extension filter template +++++++++++++++++++++++++ **The** ``name`` **and** ``version`` **templates in** ``exts_filter`` **are removed.** * *deprecated since:* EasyBuild v1.2.0 (Feb'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use ``ext_name`` and ``ext_version`` instead Only the ``ext_name`` , ``ext_version`` and ``src`` template strings can be used in the ``exts_filter`` extension filter easyconfig parameter; the ``name`` and ``version`` template strings are removed. For example (default extension filter for Python packages) :: exts_filter = (\"python -c 'import %(ext_name)s'\", \"\") Module path of default class for extensions +++++++++++++++++++++++++++++++++++++++++++ **Specifying the module path in** ``exts_defaultclass`` **is no longer possible.** * *deprecated since:* EasyBuild v0.5 (Apr'12) * *removed in:* EasyBuild v2.0 * *alternative(s)* : *(none required, module path is derived from specified class name)* Explicitly specifying the module path for the default class to use for extensions (via ``exts_defaultclass`` ) is no longer possible. Only the class name should be specified, the corresponding module path is derived from it. Module path for easyblocks ++++++++++++++++++++++++++ **Deriving the module path for easyblocks from the software name is removed.** * *deprecated since:* EasyBuild v1.4.0 (May'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use easyblock class name according to encoding scheme (e.g., ``EB_Foo`` ) Determining the *location* of Python modules representing easyblocks based on the software name ( ``name`` ) is removed. EasyBuild *must* be able to determine the easyblock module path solely based on the name of the easyblock Python class. Easyblocks with a class name that is already honoring the encoding scheme implemented by the ``encode_class_name`` function will not be affected. .. _depr_easybuild_tools_modules_eb1: ``easybuild.tools.modules`` Python module ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ **The API of the** ``easybuild.tools.modules`` **module has been updated, certain aspects of the old API are removed.** * *deprecated since:* EasyBuild v1.8.0 (Oct'13) & v1.15.0 (Sept'15) * *removed in:* EasyBuild v2.0 * *alternative(s)* : use equivalents available in new API (see below) The API of the ``easybuild.tools.modules`` Python module has been changed extensively when implementing support for alternative module naming schemes: * the ``modules`` class variable and the ``add_module`` / ``remove_module`` methods are removed; modules should be (un)loaded using the ``load`` and ``unload`` methods instead * the ``mod_paths`` and ``modulePath`` named arguments for the ``run_module`` method are removed; the class instance should be created with a specific list of module paths instead * the ``Modules`` class to obtain a class instance representing a modules tool interface is removed; the ``modules_tool`` function should be used instead Additionally, the ``exists`` method which only takes a single module name is removed; it is replaced by the ``exist`` method, which takes a list of module names *(since EasyBuild v1.15.0 (Sept'15))* . **Easyblocks should not be using** ``easybuild.tools.modules`` **directly, and hence should be unaffected.** .. _depr_softroot_version_env_vars_eb1: ``$SOFTX`` environment variables in generated module files ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ``$SOFTX`` **environment variables set by module files generated with EasyBuild v0.x will no longer be taken into account.** * *deprecated since:* EasyBuild v1.3.0 (Apr'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : reinstall (ancient) module files which are only defining the ``$SOFTX`` environment variables The ``get_software_root`` and ``get_software_version`` functions will only take ``$EBROOTFOO`` and ``$EBVERSIONFOO`` environment variables into account, as opposed to also considering the ``$SOFTROOTFOO`` and ``$SOFTVERSIONFOO`` environment variables (which were set in modules generated by EasyBuild v0.x). Likewise, adhering to the ``$SOFTDEVELFOO`` environment variables is removed. *This is only relevant to early adopters who are still using module files generated by EasyBuild v0.x.* .. _depr_renamed_relocated_functions_eb1: Renamed/relocated functions ^^^^^^^^^^^^^^^^^^^^^^^^^^^ **Some functions/methods have been renamed or relocated, their equivalents under a previous location/name are removed.** * *deprecated since:* *(depends on function/method, see below)* * *removed in:* EasyBuild v2.0 * *alternative(s)* : use new location/name A number of functions and methods that are part of the EasyBuild framework API have been renamed, mainly for consistency reasons. * the ``moduleGenerator`` handle to the ``ModuleGenerator`` object instance has been renamed to ``module_generator`` ; hence, easyblock should be using ``self.module_generator`` rather than ``self.moduleGenerator`` *(since EasyBuild v1.16.0 (Dec'14))* * ``source_paths()`` (in ``easybuild.tools.config`` ) replaces the removed ``source_path()`` *(since EasyBuild v1.8.0 (Oct'13))* * ``get_avail_core_count()`` (in ``easybuild.tools.systemtools`` ) replaces the removed ``get_core_count()`` *(since EasyBuild v1.9.0 (Nov'13))* * ``get_os_type()`` (in ``easybuild.tools.systemtools`` ) replaces the removed ``get_kernel_name`` *(since EasyBuild v1.3.0 (Apr'13))* * the ``det_full_ec_version`` function available from ``easybuild.tools.module_generator`` replaces the removed ``det_installversion`` function that was available from ``easybuild.framework.easyconfig.*`` *(since EasyBuild v1.8.0 (Oct'13))* Some functions have moved to a different location: * the ``read_environment`` function is now provided by the ``easybuild.tools.environment`` module, rather than by ``easybuild.tools.config`` or ``easybuild.tools.utilities`` *(since EasyBuild v1.7.0 (Sept'13))* * the ``modify_env`` function is now provided by the ``easybuild.tools.environment`` module, rather than by ``easybuild.tools.filetools`` *(since EasyBuild v1.7.0 (Sep'13))* * the ``run_cmd`` , ``run_cmd_qa`` and ``parse_log_for_error`` functions are now provided by the ``easybuild.tools.run`` module, rather than by ``easybuild.tools.filetools`` *(since EasyBuild v1.11.0 (Feb'14))* The ``get_log`` function provided by the ``easybuild.tools.build_log`` module has been removed entirely, no alternatives are provided (since none are needed). *(since EasyBuild v1.3.0 (Apr'13))* .. _depr_changes_generic_easyblocks_eb1: Changes in (generic) easyblocks ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ``srcdir`` replaces ``builddir`` as named argument in ``CMakeMake.configure_step`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ **The named argument** ``builddir`` **in the** ``configure_step`` **method of the generic** ``CMakeMake`` **easyblock was replaced by ** ``srcdir`` ** .** * *deprecated since:* EasyBuild v1.4.0 (May'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : equivalent ``srcdir`` named argument Since the ``builddir`` named argument in the ``configure_step`` method of the generic ``CMakeMake`` easyblock was a misnomer (it specifies the location of the *source* directory that should be provided to ``cmake`` ), it was replaced with an equivalent named argument ``srcdir`` . ``VersionIndependentPythonPackage`` replaces ``VersionIndependendPythonPackage`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ **The generic easyblock** ``VersionIndependendPythonPackage`` **was replaced with the equivalent generic easyblock** ``VersionIndependentPythonPackage`` **.** * *deprecated since:* EasyBuild v1.11.0 (Feb'14) * *removed in:* EasyBuild v2.0 * *alternative(s)* : ``VersionIndependentPythonPackage`` Because of to a typo in the name, the ``VersionIndependendPythonPackage`` generic easyblock was replaced by the equivalent ``VersionIndependentPythonPackage`` generic easyblock. ``get_sitearch_suffix`` function in ``Perl`` easyblock is removed +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ **The** ``get_sitearch_suffix`` **function in the** ``Perl`` **easyblock was replaced in favor of the more generic** ``get_site_suffix`` **function.** * *deprecated since:* EasyBuild v1.7.0 (Sept'13) * *removed in:* EasyBuild v2.0 * *alternative(s)* : ``get_site_suffix('sitearch')`` The ``get_sitearch_suffix`` function provided by the ``Perl`` easyblock, which can be (and is) imported in/used by other easyblocks, has been replaced by the more generic ``get_site_suffix`` function. To obtain the same functionality as was provided by ``get_sitearch_suffix`` , use ``get_site_suffix('sitearch')`` instead.","title":"Removed functionality"},{"location":"rpath-support/","text":"Support for RPATH \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/RPATH-support.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/RPATH-support.rst in easybuilders/easybuild repo target: docs/rpath-support.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _rpath_support: Support for RPATH ================= Since EasyBuild v3.5.2, (stable) support is available for using RPATH. .. contents :: :depth: 3 :backlinks: none .. _rpath_support_what: What is RPATH? -------------- RPATH is a mechanism to include a list of directories in a binary where required shared libraries may be available. These locations are considered by the dynamic loader ( ``ld*.so`` ) to locate the libraries that are required by a particular binary. Hence, instructing the dynamic linker ( ``ld`` ) to include RPATH entries in a binary is an alternative to specifying library locations through ``$LD_LIBRARY_PATH`` . For more information on RPATH, see https://linux.die.net/man/8/ld-linux .. _rpath_support_why: Why RPATH? ---------- Using RPATH can be interesting for a number of reasons: * it can help to avoid a (too) large environment, since: * ``$LD_LIBRARY_PATH`` does not need to be set anymore for all dependencies providing libraries * it leads to fewer runtime dependencies (and hence fewer modules need to be loaded) * binaries can be used without problems w.r.t. resolving required libraries in other environments * it may result in better startup performance, since ``$LD_LIBRARY_PATH`` does not have to be iterated over A minor downside is that it becomes less trivial to move installations of dependencies to a different location (which is something that you should not do without good reason anyway). .. _rpath_support_enable: Enabling RPATH linking ---------------------- To instruct EasyBuild to enable RPATH linking, use the ``--rpath`` configuration option. .. _rpath_support_implementation: Implementation -------------- When EasyBuild is configured to use RPATH, wrapper scripts are put in place for the dynamic linker commands ( ``ld`` , ``ld.gold`` ), as well as for every compiler command that is part of the toolchain being used. This is done during the ``prepare`` step. The wrapper scripts will analyze and rewrite the list of arguments supplied to the command they are wrapping as needed, i.e.: * inject an ``-rpath`` argument for every ``-L`` argument that specifies a library directory (with some exceptions, see also :ref: `rpath_support_filtered_paths` ) * filter out arguments that affect RPATH (e.g., ``--enable-new-dtags`` ) * ensure that the library subdirectories ( ``lib`` , ``/lib64`` ) of the installation directory also have an RPATH entry * include additional arguments related to RPATH (e.g. ``--disable-new-dtags`` ) As such, ``ps`` may show something like :: \\_ /bin/bash /tmp/eb-M3393U/tmpRVJqwr/rpath_wrappers/gcc -O2 example.c -L/example -lexample | \\_ /example/software/GCCcore/4.9.3/bin/gcc -Wl,-rpath=$ORIGIN/../lib -Wl,-rpath=$ORIGIN/../lib64 -Wl,--disable-new-dtags -Wl,-rpath=/example -O2 example.c -L/example -lexample Here, ``/tmp/eb-M3393U/tmpRVJqwr/rpath_wrappers/gcc`` is the wrapper script for ``gcc`` , which tweaks the list of command line arguments for ``gcc`` before calling out to the real ``gcc`` command (i.e., ``/example/software/GCCcore/4.9.3/bin/gcc`` in this example). .. _rpath_support_impl_logs: RPATH wrapper script log files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When EasyBuild is used in debug mode ( ``--debug`` ), the RPATH wrapper script will generate log files in the temporary directory used by EasyBuild, for debugging purposes :: $ ls -l /tmp/eb-_hoff5/rpath_wrapper*log | sed 's/vsc40023/example/g' -rw-rw-r-- 1 example example 739692 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_gcc.log -rw-rw-r-- 1 example example 27814 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_g++.log -rw-rw-r-- 1 example example 1589626 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_ld.gold.log -rw-rw-r-- 1 example example 8870 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_ld.log These log files include details on every captured compiler/linker command, i.e. the original list of arguments, the tweaked list of arguments that includes the injected ``-rpath`` arguments, etc., and may be helpful to debug the RPATH support. .. _rpath_support_impl_overhead: Overhead of RPATH wrapper scripts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Wrapping each compiler and linker command being executed comes at a cost, especially since the wrapper (shell) script calls out to a Python script ( ``rpath_args.py`` ) to do the heavy lifting. Some early benchmarking has shown that this overhead is quite limited however, with observed slowdowns of the build and installation procedure of 10-15%. .. _rpath_support_filtered_paths: Filtering RPATH entries via ``--rpath-filter`` ---------------------------------------------- To avoid that the wrapper scripts inject RPATH entries for particular locations, EasyBuild can be configured with an RPATH filter via ``--rpath-filter`` . The specified value should be a comma-separated list of (Python) regular expressions for paths. Only paths that *match* either of the specified patterns will be filtered out. For example, to filter out locations in either ``/opt/lib`` or ``/apps/lib`` , use :: eb --rpath-filter='/opt/lib.*,/apps/lib.*' By default, no RPATH entries will be injected for system locations that start with either ``/lib`` (incl. ``/lib64`` ) or ``/usr`` (which is equivalent with ``--rpath-filter='/lib.*,/usr.*'`` ). .. note :: If you are specifying ``--rpath--filter`` , the default filter is *overwritten* , so if you want to retain the filtering for system locations you should also include ``/lib.*`` and ``/usr.*`` . For example, to also filter out paths starting with ``/example`` :: eb --rpath-filter='/lib.*,/usr.*,/example.*' .. _rpath_support_LD_LIBRARY_PATH: Relation to ``$LD_LIBRARY_PATH`` -------------------------------- As mentioned above ( :ref: `rpath_support_why` ), using RPATH avoids the need to update ``$LD_LIBRARY_PATH`` for every dependency. However, there is a chicken-or-egg situation: even though a particular dependency itself can be built and installed using RPATH, it does not mean that software packages that require it *have* to built with RPATH... Hence, EasyBuild does not automatically exclude ``$LD_LIBRARY_PATH`` update statements from the generated module files. You need to configure EasyBuild to do so, using the ``---filter-env-vars`` configuration option. For example :: eb --rpath --filter-env-vars=LD_LIBRARY_PATH example.eb To consistently configure EasyBuild to both use RPATH and not include ``$LD_LIBRARY_PATH`` update statements in generated module files, you can use either environment variables or a configuration file; see :ref: `configuring_easybuild` .","title":"Support for RPATH"},{"location":"rpath-support/#support-for-rpath","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/RPATH-support.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/RPATH-support.rst in easybuilders/easybuild repo target: docs/rpath-support.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _rpath_support: Support for RPATH ================= Since EasyBuild v3.5.2, (stable) support is available for using RPATH. .. contents :: :depth: 3 :backlinks: none .. _rpath_support_what: What is RPATH? -------------- RPATH is a mechanism to include a list of directories in a binary where required shared libraries may be available. These locations are considered by the dynamic loader ( ``ld*.so`` ) to locate the libraries that are required by a particular binary. Hence, instructing the dynamic linker ( ``ld`` ) to include RPATH entries in a binary is an alternative to specifying library locations through ``$LD_LIBRARY_PATH`` . For more information on RPATH, see https://linux.die.net/man/8/ld-linux .. _rpath_support_why: Why RPATH? ---------- Using RPATH can be interesting for a number of reasons: * it can help to avoid a (too) large environment, since: * ``$LD_LIBRARY_PATH`` does not need to be set anymore for all dependencies providing libraries * it leads to fewer runtime dependencies (and hence fewer modules need to be loaded) * binaries can be used without problems w.r.t. resolving required libraries in other environments * it may result in better startup performance, since ``$LD_LIBRARY_PATH`` does not have to be iterated over A minor downside is that it becomes less trivial to move installations of dependencies to a different location (which is something that you should not do without good reason anyway). .. _rpath_support_enable: Enabling RPATH linking ---------------------- To instruct EasyBuild to enable RPATH linking, use the ``--rpath`` configuration option. .. _rpath_support_implementation: Implementation -------------- When EasyBuild is configured to use RPATH, wrapper scripts are put in place for the dynamic linker commands ( ``ld`` , ``ld.gold`` ), as well as for every compiler command that is part of the toolchain being used. This is done during the ``prepare`` step. The wrapper scripts will analyze and rewrite the list of arguments supplied to the command they are wrapping as needed, i.e.: * inject an ``-rpath`` argument for every ``-L`` argument that specifies a library directory (with some exceptions, see also :ref: `rpath_support_filtered_paths` ) * filter out arguments that affect RPATH (e.g., ``--enable-new-dtags`` ) * ensure that the library subdirectories ( ``lib`` , ``/lib64`` ) of the installation directory also have an RPATH entry * include additional arguments related to RPATH (e.g. ``--disable-new-dtags`` ) As such, ``ps`` may show something like :: \\_ /bin/bash /tmp/eb-M3393U/tmpRVJqwr/rpath_wrappers/gcc -O2 example.c -L/example -lexample | \\_ /example/software/GCCcore/4.9.3/bin/gcc -Wl,-rpath=$ORIGIN/../lib -Wl,-rpath=$ORIGIN/../lib64 -Wl,--disable-new-dtags -Wl,-rpath=/example -O2 example.c -L/example -lexample Here, ``/tmp/eb-M3393U/tmpRVJqwr/rpath_wrappers/gcc`` is the wrapper script for ``gcc`` , which tweaks the list of command line arguments for ``gcc`` before calling out to the real ``gcc`` command (i.e., ``/example/software/GCCcore/4.9.3/bin/gcc`` in this example). .. _rpath_support_impl_logs: RPATH wrapper script log files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When EasyBuild is used in debug mode ( ``--debug`` ), the RPATH wrapper script will generate log files in the temporary directory used by EasyBuild, for debugging purposes :: $ ls -l /tmp/eb-_hoff5/rpath_wrapper*log | sed 's/vsc40023/example/g' -rw-rw-r-- 1 example example 739692 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_gcc.log -rw-rw-r-- 1 example example 27814 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_g++.log -rw-rw-r-- 1 example example 1589626 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_ld.gold.log -rw-rw-r-- 1 example example 8870 Nov 16 15:50 /tmp/eb-_hoff5/rpath_wrapper_ld.log These log files include details on every captured compiler/linker command, i.e. the original list of arguments, the tweaked list of arguments that includes the injected ``-rpath`` arguments, etc., and may be helpful to debug the RPATH support. .. _rpath_support_impl_overhead: Overhead of RPATH wrapper scripts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Wrapping each compiler and linker command being executed comes at a cost, especially since the wrapper (shell) script calls out to a Python script ( ``rpath_args.py`` ) to do the heavy lifting. Some early benchmarking has shown that this overhead is quite limited however, with observed slowdowns of the build and installation procedure of 10-15%. .. _rpath_support_filtered_paths: Filtering RPATH entries via ``--rpath-filter`` ---------------------------------------------- To avoid that the wrapper scripts inject RPATH entries for particular locations, EasyBuild can be configured with an RPATH filter via ``--rpath-filter`` . The specified value should be a comma-separated list of (Python) regular expressions for paths. Only paths that *match* either of the specified patterns will be filtered out. For example, to filter out locations in either ``/opt/lib`` or ``/apps/lib`` , use :: eb --rpath-filter='/opt/lib.*,/apps/lib.*' By default, no RPATH entries will be injected for system locations that start with either ``/lib`` (incl. ``/lib64`` ) or ``/usr`` (which is equivalent with ``--rpath-filter='/lib.*,/usr.*'`` ). .. note :: If you are specifying ``--rpath--filter`` , the default filter is *overwritten* , so if you want to retain the filtering for system locations you should also include ``/lib.*`` and ``/usr.*`` . For example, to also filter out paths starting with ``/example`` :: eb --rpath-filter='/lib.*,/usr.*,/example.*' .. _rpath_support_LD_LIBRARY_PATH: Relation to ``$LD_LIBRARY_PATH`` -------------------------------- As mentioned above ( :ref: `rpath_support_why` ), using RPATH avoids the need to update ``$LD_LIBRARY_PATH`` for every dependency. However, there is a chicken-or-egg situation: even though a particular dependency itself can be built and installed using RPATH, it does not mean that software packages that require it *have* to built with RPATH... Hence, EasyBuild does not automatically exclude ``$LD_LIBRARY_PATH`` update statements from the generated module files. You need to configure EasyBuild to do so, using the ``---filter-env-vars`` configuration option. For example :: eb --rpath --filter-env-vars=LD_LIBRARY_PATH example.eb To consistently configure EasyBuild to both use RPATH and not include ``$LD_LIBRARY_PATH`` update statements in generated module files, you can use either environment variables or a configuration file; see :ref: `configuring_easybuild` .","title":"Support for RPATH"},{"location":"submitting-jobs/","text":"Submitting jobs using --job \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Submitting_jobs.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Submitting_jobs.rst in easybuilders/easybuild repo target: docs/submitting-jobs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _submitting_jobs: Submitting jobs using ``--job`` =============================== Topics: * :ref: `submitting_jobs_quick_intro` * :ref: `submitting_jobs_configuration` * :ref: `submitting_jobs_usage` * :ref: `submitting_jobs_examples` .. _submitting_jobs_quick_intro: Quick introduction to ``--job`` ------------------------------- Using the ``--job`` command line option, you can instruct EasyBuild to submit jobs for the installations that should be performed, rather than performing the installations locally on the system you are on. If dependency resolution is enabled using ``--robot`` (see also :ref: `use_robot` ), EasyBuild will submit separate jobs and set dependencies between them to ensure they are run in the order dictated by the software dependency graph(s). .. _submitting_jobs_configuration: Configuring ``--job`` --------------------- Selecting the job backend (``--job-backend``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The job backend to be used can be specified using the ``--job-backend`` EasyBuild configuration option. Since EasyBuild 3.8.0, three backends are supported: * ``GC3Pie`` *(default)* (supported since EasyBuild 2.2.0) * ``GC3Pie`` version 2.5.0 (or more recent) required (https://gc3pie.readthedocs.org) * works with different resource managers and job schedulers, including TORQUE/PBS, Slurm, etc. * **note** : requires that a GC3Pie configuration file is provided, see :ref: `submitting_jobs_cfg_job_backend_config` * ``PbsPython`` * ``pbs_python`` version 4.1.0 (or more recent) required (see https://oss.trac.surfsara.nl/pbs_python) * **note** : requires TORQUE resource manager (see http://www.adaptivecomputing.com/products/open-source/torque/) * ``Slurm`` (supported since EasyBuild 3.8.0) * requires Slurm version 17.0 (or more recent), see https://slurm.schedmd.com/ .. _submitting_jobs_cfg_job_backend_config: Configuring the job backend (``--job-backend-config``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To configure the job backend, the path to a configuration file must be specified via ``--job-backend-config`` . * for ``PbsPython`` backend: *(irrelevant, no configuration file required)* * for ``GC3Pie`` backend: see https://gc3pie.readthedocs.org/en/latest/users/configuration.html * example configuration files are available at :ref: `submitting_jobs_examples_gc3pie_cfg` * for ``Slurm`` backend: *(irrelevant, no configuration file required)* .. _submitting_jobs_cfg_job_cores: Number of requested cores per job (``--job-cores``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The number of cores that should be requested for each job that is submitted can be specified using ``--job-cores`` (default: *not specified* ). The mechanism for determining the number of cores to request in case ``--job-cores`` was *not* specified depends on which job backend is being used: * if the ``PbsPython`` job backend is used, the (most common) number of available cores per workernode in the target resource is determined; this usually results in jobs requesting full workernodes (at least in terms of cores) by default * if the ``GC3Pie`` or ``Slurm`` job backend is used, the requested number of cores is left unspecified, which results in falling back to the default mechanism used by GC3Pie/Slurm to pick a number of cores; most likely, this results in single-core jobs to be submitted by default .. _submitting_jobs_job_dependency_type: Job dependency type (``-job-deps-type``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The type of dependency that is set by EasyBuild when submitting a job that depends on one or more other jobs can be specified via the ``--job-deps-type`` configuration setting: * with ``--job-deps-type=abort_on_error`` , job dependencies will be set such that a job that depends on other jobs will be *aborted* if one of those jobs completes with an error * for both ``PbsPython`` and ``Slurm`` , this is equivalent with setting job dependencies using ``afterok`` * with ``--job-deps-type=always_run`` , job dependencies will be set such that a job that depends on other jobs are *always run* , regardless of whether or not those jobs completed successfully * for both ``PbsPython`` and ``Slurm`` , this is equivalent with setting job dependencies using ``afterany`` The default value for ``-job-deps-type`` depends on the job backend being used (see :ref: `submitting_jobs_cfg_job_backend_config` ): * for the ``GC3Pie`` and ``Slurm`` backends, ``--job-deps-type=abort_on_error`` is the default; * for the ``PbsPython`` backend, ``--job-deps-type=always_run`` is the default (because of historical reasons, and for the sake of backward compatibility) .. _submitting_jobs_cfg_job_max_walltime: Maximum walltime of jobs (``--job-max-walltime``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ An integer value specifying the maximum walltime for jobs (in hours) can be specified via ``--job-max-walltime`` (default: 24). For easyconfigs for which a reference required walltime is available via the ``build_stats`` parameter in a matching easyconfig file from the easyconfig repository (see :ref: `easyconfigs_repo` ), EasyBuild will set the walltime of the corresponding job to twice that value (unless the resulting value is higher than the maximum walltime for jobs). If no such reference walltime is available, the maximum walltime is used. .. _submitting_jobs_cfg_job_output_dir: Job output directory (``--job-output-dir``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The directory where job log files should be placed can be specified via ``--job-output-dir`` (default: current directory). .. _submitting_jobs_cfg_job_polling_interval: Job polling interval (``--job-polling-interval``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The frequency with which the status of submitted jobs should be checked can be specified via ``--job-polling-interval`` , using a floating-point value representing the number of seconds between two checks (default: 30 seconds). .. note :: This setting is currently only relevant to GC3Pie; see also :ref: `submitting_jobs_usage_gc3pie` . .. _submitting_jobs_cfg_job_target_resource: Target resource for job backend (``--job-target-resource``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The target resource that should be used by the job backend can be specified using ``--job-target-resource`` . * for ``PbsPython`` backend: hostname of TORQUE PBS server to submit jobs to (default: ``$PBS_DEFAULT`` ) * for ``GC3Pie`` backend: name of resource to submit jobs to (default: none, which implies weighted round-robin submission across all available resources) * for ``Slurm`` backend: *(not used)* .. _submitting_jobs_usage: Usage of ``--job`` ------------------ To make EasyBuild submit jobs to the job backend rather than performing the installations directly, the ``--job`` command line option can be used. This following assumes that the required configuration settings w.r.t. the job backend to use are in place, see :ref: `submitting_jobs_configuration` . .. _submitting_jobs_usage_pbs_python: Submitting jobs to a ``PbsPython`` or ``Slurm`` backend ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When using the ``PbsPython`` or ``Slurm`` backend, EasyBuild will submit separate jobs for each installation to be performed, and then exit reporting a list of submitted jobs. To ensure that the installations are performed in the order dictated by the software dependency graph, dependencies between installations are specified via *job dependencies* (see also :ref: `submitting_jobs_job_dependency_type` ). See also :ref: `submitting_jobs_examples_pbs_python_backend` . .. note :: Submitted jobs will be put on hold until all jobs have been submitted. This is required to ensure that the dependencies between jobs can be specified correctly; if a job would run to completion before other jobs that depend on it were submitted, the submission process may fail. .. _submitting_jobs_usage_gc3pie: Submitting jobs to a ``GC3Pie`` backend ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When using the ``GC3Pie`` backend, EasyBuild will create separate tasks for each installation to be performed and supply them to GC3Pie, which will then take over and pass the installations through as jobs to the available resource(s) (see also :ref: `submitting_jobs_cfg_job_backend_config` ). To ensure that the installations are performed in the order dictated by the software dependency graph, dependencies between installations are specified to GC3Pie as inter-task dependencies. GC3Pie will then gradually feed the installations to its available resources as their dependencies have been satisfied. Any log messages produced by GC3Pie are included in the EasyBuild log file, and are tagged with ``gc3pie`` . See also :ref: `submitting_jobs_examples_gc3pie_backend` . .. note :: The ``eb`` process will not exit until the full set of tasks that GC3Pie was provided with has been processed. An overall progress report will be printed regularly (see also :ref: `submitting_jobs_cfg_job_polling_interval` ). As such, it is advised to run the ``eb`` process in a screen/tmux session when using the GC3Pie backend for ``--job`` . .. _submitting_jobs_examples: Examples -------- .. _submitting_jobs_examples_gc3pie_cfg: Example configurations for GC3Pie job backend ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When using GC3Pie as a job backend, a configuration file must be provided via ``--job-backend-config`` . This section includes a couple of examples of GC3Pie configuration files (see also https://gc3pie.readthedocs.org/en/latest/users/configuration.html). Example GC3Pie configuration for local system ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ .. code :: ini [resource/localhost] enabled = yes type = shellcmd frontend = localhost transport = local max_memory_per_core = 10GiB max_walltime = 100 hours # max # jobs ~= max_cores / max_cores_per_job max_cores_per_job = 1 max_cores = 4 architecture = x86_64 auth = none override = no resourcedir = /tmp/gc3pie Example GC3Pie configuration for TORQUE/PBS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ .. code :: ini [resource/pbs] enabled = yes type = pbs # use settings below when running GC3Pie on the cluster front-end node frontend = localhost transport = local auth = none max_walltime = 2 days # max # jobs ~= max_cores / max_cores_per_job max_cores_per_job = 16 max_cores = 1024 max_memory_per_core = 2 GiB architecture = x86_64 # to add non-std options or use TORQUE/PBS tools located outside of # the default PATH, use the following: #qsub = /usr/local/bin/qsub -q my-special-queue Example GC3Pie configuration for SLURM ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ .. code :: ini [resource/slurm] enabled = yes type = slurm # use settings below when running GC3Pie on the cluster front-end node frontend = localhost transport = local auth = none max_walltime = 2 days # max # jobs ~= max_cores / max_cores_per_job max_cores_per_job = 16 max_cores = 1024 max_memory_per_core = 2 GiB architecture = x86_64 # to add non-std options or use SLURM tools located outside of # the default PATH, use the following: #sbatch = /usr/bin/sbatch --mail-type=ALL .. _submitting_jobs_examples_gc3pie_backend: Example: submitting installations to SLURM via GC3Pie ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When submitting jobs to the ``GC3Pie`` job backend, the ``eb`` process will not exit until all tasks have been completed. A job overview will be printed every N seconds (see :ref: `submitting_jobs_cfg_job_polling_interval` ). Jobs are only submitted to the resource manager (SLURM, in this case) when all task dependencies have been resolved. .. code :: $ export EASYBUILD_JOB_BACKEND=GC3Pie $ export EASYBUILD_JOB_BACKEND_CONFIG=$PWD/gc3pie.cfg $ eb GCC-4.6.0.eb OpenMPI-1.8.4-GCC-4.9.2.eb --robot --job --job-cores=16 --job-max-walltime=10 == temporary log file in case of crash /tmp/eb-ivAiwD/easybuild-PCgmCB.log == resolving dependencies ... == GC3Pie job overview: 2 submitted (total: 9) == GC3Pie job overview: 2 running (total: 9) == GC3Pie job overview: 2 running (total: 9) ... == GC3Pie job overview: 4 terminated, 4 ok, 1 submitted (total: 9) == GC3Pie job overview: 4 terminated, 4 ok, 1 running (total: 9) ... == GC3Pie job overview: 8 terminated, 8 ok, 1 running (total: 9) == GC3Pie job overview: 9 terminated, 9 ok (total: 9) == GC3Pie job overview: 9 terminated, 9 ok (total: 9) == Done processing jobs == GC3Pie job overview: 9 terminated, 9 ok (total: 9) == Submitted parallel build jobs, exiting now == temporary log file(s) /tmp/eb-ivAiwD/easybuild-PCgmCB.log* have been removed. == temporary directory /tmp/eb-ivAiwD has been removed. Checking which jobs have been submitted to SLURM at regular intervals reveals that indeed only tasks for which all dependencies have been processed are actually submitted as jobs :: $ squeue -u $USER JOBID USER ACCOUNT NAME REASON START_TIME END_TIME TIME_LEFT NODES CPUS PRIORITY 6161545 easybuild example GCC-4.9.2 None 2015-07-01T1 2015-07-01T2 9:58:55 1 16 1242 6161546 easybuild example GCC-4.6.0 None 2015-07-01T1 2015-07-01T2 9:58:55 1 16 1242 $ squeue -u $USER JOBID USER ACCOUNT NAME REASON START_TIME END_TIME TIME_LEFT NODES CPUS PRIORITY 6174527 easybuild example Automake-1.15- Resources N/A N/A 10:00:00 1 16 1120 $ squeue -u $USER JOBID USER ACCOUNT NAME REASON START_TIME END_TIME TIME_LEFT NODES CPUS PRIORITY 6174533 easybuild example OpenMPI-1.8.4- None 2015-07-03T0 2015-07-03T1 9:55:59 1 16 1119 .. _submitting_jobs_examples_pbs_python_backend: Example: submitting installations to TORQUE via pbs_python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``PbsPython`` job backend, ``eb`` submits jobs directly to TORQUE for processing, and exits as soon as all jobs have been submitted :: $ eb GCC-4.6.0.eb OpenMPI-1.8.4-GCC-4.9.2.eb --robot --job == temporary log file in case of crash /tmp/eb-OMNQAV/easybuild-9fTuJA.log == resolving dependencies ... == List of submitted jobs (9): GCC-4.6.0 (GCC/4.6.0): 508023.example.pbs; GCC-4.9.2 (GCC/4.9.2): 508024.example.pbs; libtool-2.4.2-GCC-4.9.2 (libtool/2.4.2-GCC-4.9.2): 508025.example.pbs; M4-1.4.17-GCC-4.9.2 (M4/1.4.17-GCC-4.9.2): 50 8026.example.pbs; Autoconf-2.69-GCC-4.9.2 (Autoconf/2.69-GCC-4.9.2): 508027.example.pbs; Automake-1.15-GCC-4.9.2 (Au tomake/1.15-GCC-4.9.2): 508028.example.pbs; numactl-2.0.10-GCC-4.9.2 (numactl/2.0.10-GCC-4.9.2): 508029.example.pbs; hwloc-1.10.0-GCC-4.9.2 (hwloc/1.10.0-GCC-4.9.2): 508030.example.pbs; OpenMPI-1.8.4-GCC-4.9.2 (OpenMPI/1.8.4-GCC-4.9. 2): 508031.example.pbs == Submitted parallel build jobs, exiting now == temporary log file(s) /tmp/eb-OMNQAV/easybuild-9fTuJA.log* have been removed. == temporary directory /tmp/eb-OMNQAV has been removed. $ qstat -a example.pbs: Req'd Req'd Elap Job ID Username Queue Jobname SessID NDS TSK Memory Time S Time ------------------- ----------- -------- ---------------- ------ ----- ------ ------ --------- - --------- 508023.example.pbs easybuild batch GCC-4.6.0 -- 1 16 -- 24:00:00 R 00:02:16 508024.example.pbs easybuild batch GCC-4.9.2 -- 1 16 -- 24:00:00 Q -- 508025.example.pbs easybuild batch libtool-2.4.2-GC -- 1 16 -- 24:00:00 H -- 508026.example.pbs easybuild batch M4-1.4.17-GCC-4. -- 1 16 -- 24:00:00 H -- 508027.example.pbs easybuild batch Autoconf-2.69-GC -- 1 16 -- 24:00:00 H -- 508028.example.pbs easybuild batch Automake-1.15-GC -- 1 16 -- 24:00:00 H -- 508029.example.pbs easybuild batch numactl-2.0.10-G -- 1 16 -- 24:00:00 H -- 508030.example.pbs easybuild batch hwloc-1.10.0-GCC -- 1 16 -- 24:00:00 H -- 508031.example.pbs easybuild batch OpenMPI-1.8.4-GC -- 1 16 -- 24:00:00 H -- Holds are put in place to ensure that the jobs run in the order dictated by the dependency graph(s). These holds are released by the TORQUE server as soon as they jobs on which they depend have completed:: $ qstat -a example.pbs: Req'd Req'd Elap Job ID Username Queue Jobname SessID NDS TSK Memory Time S Time ------------------- ----------- -------- ---------------- ------ ----- ------ ------ --------- - --------- 508025.example.pbs easybuild batch libtool-2.4.2-GC -- 1 16 -- 24:00:00 Q -- 508026.example.pbs easybuild batch M4-1.4.17-GCC-4. -- 1 16 -- 24:00:00 Q -- 508027.example.pbs easybuild batch Autoconf-2.69-GC -- 1 16 -- 24:00:00 H -- 508028.example.pbs easybuild batch Automake-1.15-GC -- 1 16 -- 24:00:00 H -- 508029.example.pbs easybuild batch numactl-2.0.10-G -- 1 16 -- 24:00:00 H -- 508030.example.pbs easybuild batch hwloc-1.10.0-GCC -- 1 16 -- 24:00:00 H -- 508031.example.pbs easybuild batch OpenMPI-1.8.4-GC -- 1 16 -- 24:00:00 H -- ... $ qstat -a example.pbs: Req'd Req'd Elap Job ID Username Queue Jobname SessID NDS TSK Memory Time S Time ------------------- ----------- -------- ---------------- ------ ----- ------ ------ --------- - --------- 508031.example.pbs easybuild batch OpenMPI-1.8.4-GC -- 1 16 -- 24:00:00 R 00:03:46","title":"Submitting jobs using `--job`"},{"location":"submitting-jobs/#submitting-jobs-using-job","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Submitting_jobs.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Submitting_jobs.rst in easybuilders/easybuild repo target: docs/submitting-jobs.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _submitting_jobs: Submitting jobs using ``--job`` =============================== Topics: * :ref: `submitting_jobs_quick_intro` * :ref: `submitting_jobs_configuration` * :ref: `submitting_jobs_usage` * :ref: `submitting_jobs_examples` .. _submitting_jobs_quick_intro: Quick introduction to ``--job`` ------------------------------- Using the ``--job`` command line option, you can instruct EasyBuild to submit jobs for the installations that should be performed, rather than performing the installations locally on the system you are on. If dependency resolution is enabled using ``--robot`` (see also :ref: `use_robot` ), EasyBuild will submit separate jobs and set dependencies between them to ensure they are run in the order dictated by the software dependency graph(s). .. _submitting_jobs_configuration: Configuring ``--job`` --------------------- Selecting the job backend (``--job-backend``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The job backend to be used can be specified using the ``--job-backend`` EasyBuild configuration option. Since EasyBuild 3.8.0, three backends are supported: * ``GC3Pie`` *(default)* (supported since EasyBuild 2.2.0) * ``GC3Pie`` version 2.5.0 (or more recent) required (https://gc3pie.readthedocs.org) * works with different resource managers and job schedulers, including TORQUE/PBS, Slurm, etc. * **note** : requires that a GC3Pie configuration file is provided, see :ref: `submitting_jobs_cfg_job_backend_config` * ``PbsPython`` * ``pbs_python`` version 4.1.0 (or more recent) required (see https://oss.trac.surfsara.nl/pbs_python) * **note** : requires TORQUE resource manager (see http://www.adaptivecomputing.com/products/open-source/torque/) * ``Slurm`` (supported since EasyBuild 3.8.0) * requires Slurm version 17.0 (or more recent), see https://slurm.schedmd.com/ .. _submitting_jobs_cfg_job_backend_config: Configuring the job backend (``--job-backend-config``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To configure the job backend, the path to a configuration file must be specified via ``--job-backend-config`` . * for ``PbsPython`` backend: *(irrelevant, no configuration file required)* * for ``GC3Pie`` backend: see https://gc3pie.readthedocs.org/en/latest/users/configuration.html * example configuration files are available at :ref: `submitting_jobs_examples_gc3pie_cfg` * for ``Slurm`` backend: *(irrelevant, no configuration file required)* .. _submitting_jobs_cfg_job_cores: Number of requested cores per job (``--job-cores``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The number of cores that should be requested for each job that is submitted can be specified using ``--job-cores`` (default: *not specified* ). The mechanism for determining the number of cores to request in case ``--job-cores`` was *not* specified depends on which job backend is being used: * if the ``PbsPython`` job backend is used, the (most common) number of available cores per workernode in the target resource is determined; this usually results in jobs requesting full workernodes (at least in terms of cores) by default * if the ``GC3Pie`` or ``Slurm`` job backend is used, the requested number of cores is left unspecified, which results in falling back to the default mechanism used by GC3Pie/Slurm to pick a number of cores; most likely, this results in single-core jobs to be submitted by default .. _submitting_jobs_job_dependency_type: Job dependency type (``-job-deps-type``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The type of dependency that is set by EasyBuild when submitting a job that depends on one or more other jobs can be specified via the ``--job-deps-type`` configuration setting: * with ``--job-deps-type=abort_on_error`` , job dependencies will be set such that a job that depends on other jobs will be *aborted* if one of those jobs completes with an error * for both ``PbsPython`` and ``Slurm`` , this is equivalent with setting job dependencies using ``afterok`` * with ``--job-deps-type=always_run`` , job dependencies will be set such that a job that depends on other jobs are *always run* , regardless of whether or not those jobs completed successfully * for both ``PbsPython`` and ``Slurm`` , this is equivalent with setting job dependencies using ``afterany`` The default value for ``-job-deps-type`` depends on the job backend being used (see :ref: `submitting_jobs_cfg_job_backend_config` ): * for the ``GC3Pie`` and ``Slurm`` backends, ``--job-deps-type=abort_on_error`` is the default; * for the ``PbsPython`` backend, ``--job-deps-type=always_run`` is the default (because of historical reasons, and for the sake of backward compatibility) .. _submitting_jobs_cfg_job_max_walltime: Maximum walltime of jobs (``--job-max-walltime``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ An integer value specifying the maximum walltime for jobs (in hours) can be specified via ``--job-max-walltime`` (default: 24). For easyconfigs for which a reference required walltime is available via the ``build_stats`` parameter in a matching easyconfig file from the easyconfig repository (see :ref: `easyconfigs_repo` ), EasyBuild will set the walltime of the corresponding job to twice that value (unless the resulting value is higher than the maximum walltime for jobs). If no such reference walltime is available, the maximum walltime is used. .. _submitting_jobs_cfg_job_output_dir: Job output directory (``--job-output-dir``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The directory where job log files should be placed can be specified via ``--job-output-dir`` (default: current directory). .. _submitting_jobs_cfg_job_polling_interval: Job polling interval (``--job-polling-interval``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The frequency with which the status of submitted jobs should be checked can be specified via ``--job-polling-interval`` , using a floating-point value representing the number of seconds between two checks (default: 30 seconds). .. note :: This setting is currently only relevant to GC3Pie; see also :ref: `submitting_jobs_usage_gc3pie` . .. _submitting_jobs_cfg_job_target_resource: Target resource for job backend (``--job-target-resource``) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The target resource that should be used by the job backend can be specified using ``--job-target-resource`` . * for ``PbsPython`` backend: hostname of TORQUE PBS server to submit jobs to (default: ``$PBS_DEFAULT`` ) * for ``GC3Pie`` backend: name of resource to submit jobs to (default: none, which implies weighted round-robin submission across all available resources) * for ``Slurm`` backend: *(not used)* .. _submitting_jobs_usage: Usage of ``--job`` ------------------ To make EasyBuild submit jobs to the job backend rather than performing the installations directly, the ``--job`` command line option can be used. This following assumes that the required configuration settings w.r.t. the job backend to use are in place, see :ref: `submitting_jobs_configuration` . .. _submitting_jobs_usage_pbs_python: Submitting jobs to a ``PbsPython`` or ``Slurm`` backend ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When using the ``PbsPython`` or ``Slurm`` backend, EasyBuild will submit separate jobs for each installation to be performed, and then exit reporting a list of submitted jobs. To ensure that the installations are performed in the order dictated by the software dependency graph, dependencies between installations are specified via *job dependencies* (see also :ref: `submitting_jobs_job_dependency_type` ). See also :ref: `submitting_jobs_examples_pbs_python_backend` . .. note :: Submitted jobs will be put on hold until all jobs have been submitted. This is required to ensure that the dependencies between jobs can be specified correctly; if a job would run to completion before other jobs that depend on it were submitted, the submission process may fail. .. _submitting_jobs_usage_gc3pie: Submitting jobs to a ``GC3Pie`` backend ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When using the ``GC3Pie`` backend, EasyBuild will create separate tasks for each installation to be performed and supply them to GC3Pie, which will then take over and pass the installations through as jobs to the available resource(s) (see also :ref: `submitting_jobs_cfg_job_backend_config` ). To ensure that the installations are performed in the order dictated by the software dependency graph, dependencies between installations are specified to GC3Pie as inter-task dependencies. GC3Pie will then gradually feed the installations to its available resources as their dependencies have been satisfied. Any log messages produced by GC3Pie are included in the EasyBuild log file, and are tagged with ``gc3pie`` . See also :ref: `submitting_jobs_examples_gc3pie_backend` . .. note :: The ``eb`` process will not exit until the full set of tasks that GC3Pie was provided with has been processed. An overall progress report will be printed regularly (see also :ref: `submitting_jobs_cfg_job_polling_interval` ). As such, it is advised to run the ``eb`` process in a screen/tmux session when using the GC3Pie backend for ``--job`` . .. _submitting_jobs_examples: Examples -------- .. _submitting_jobs_examples_gc3pie_cfg: Example configurations for GC3Pie job backend ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When using GC3Pie as a job backend, a configuration file must be provided via ``--job-backend-config`` . This section includes a couple of examples of GC3Pie configuration files (see also https://gc3pie.readthedocs.org/en/latest/users/configuration.html). Example GC3Pie configuration for local system ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ .. code :: ini [resource/localhost] enabled = yes type = shellcmd frontend = localhost transport = local max_memory_per_core = 10GiB max_walltime = 100 hours # max # jobs ~= max_cores / max_cores_per_job max_cores_per_job = 1 max_cores = 4 architecture = x86_64 auth = none override = no resourcedir = /tmp/gc3pie Example GC3Pie configuration for TORQUE/PBS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ .. code :: ini [resource/pbs] enabled = yes type = pbs # use settings below when running GC3Pie on the cluster front-end node frontend = localhost transport = local auth = none max_walltime = 2 days # max # jobs ~= max_cores / max_cores_per_job max_cores_per_job = 16 max_cores = 1024 max_memory_per_core = 2 GiB architecture = x86_64 # to add non-std options or use TORQUE/PBS tools located outside of # the default PATH, use the following: #qsub = /usr/local/bin/qsub -q my-special-queue Example GC3Pie configuration for SLURM ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ .. code :: ini [resource/slurm] enabled = yes type = slurm # use settings below when running GC3Pie on the cluster front-end node frontend = localhost transport = local auth = none max_walltime = 2 days # max # jobs ~= max_cores / max_cores_per_job max_cores_per_job = 16 max_cores = 1024 max_memory_per_core = 2 GiB architecture = x86_64 # to add non-std options or use SLURM tools located outside of # the default PATH, use the following: #sbatch = /usr/bin/sbatch --mail-type=ALL .. _submitting_jobs_examples_gc3pie_backend: Example: submitting installations to SLURM via GC3Pie ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When submitting jobs to the ``GC3Pie`` job backend, the ``eb`` process will not exit until all tasks have been completed. A job overview will be printed every N seconds (see :ref: `submitting_jobs_cfg_job_polling_interval` ). Jobs are only submitted to the resource manager (SLURM, in this case) when all task dependencies have been resolved. .. code :: $ export EASYBUILD_JOB_BACKEND=GC3Pie $ export EASYBUILD_JOB_BACKEND_CONFIG=$PWD/gc3pie.cfg $ eb GCC-4.6.0.eb OpenMPI-1.8.4-GCC-4.9.2.eb --robot --job --job-cores=16 --job-max-walltime=10 == temporary log file in case of crash /tmp/eb-ivAiwD/easybuild-PCgmCB.log == resolving dependencies ... == GC3Pie job overview: 2 submitted (total: 9) == GC3Pie job overview: 2 running (total: 9) == GC3Pie job overview: 2 running (total: 9) ... == GC3Pie job overview: 4 terminated, 4 ok, 1 submitted (total: 9) == GC3Pie job overview: 4 terminated, 4 ok, 1 running (total: 9) ... == GC3Pie job overview: 8 terminated, 8 ok, 1 running (total: 9) == GC3Pie job overview: 9 terminated, 9 ok (total: 9) == GC3Pie job overview: 9 terminated, 9 ok (total: 9) == Done processing jobs == GC3Pie job overview: 9 terminated, 9 ok (total: 9) == Submitted parallel build jobs, exiting now == temporary log file(s) /tmp/eb-ivAiwD/easybuild-PCgmCB.log* have been removed. == temporary directory /tmp/eb-ivAiwD has been removed. Checking which jobs have been submitted to SLURM at regular intervals reveals that indeed only tasks for which all dependencies have been processed are actually submitted as jobs :: $ squeue -u $USER JOBID USER ACCOUNT NAME REASON START_TIME END_TIME TIME_LEFT NODES CPUS PRIORITY 6161545 easybuild example GCC-4.9.2 None 2015-07-01T1 2015-07-01T2 9:58:55 1 16 1242 6161546 easybuild example GCC-4.6.0 None 2015-07-01T1 2015-07-01T2 9:58:55 1 16 1242 $ squeue -u $USER JOBID USER ACCOUNT NAME REASON START_TIME END_TIME TIME_LEFT NODES CPUS PRIORITY 6174527 easybuild example Automake-1.15- Resources N/A N/A 10:00:00 1 16 1120 $ squeue -u $USER JOBID USER ACCOUNT NAME REASON START_TIME END_TIME TIME_LEFT NODES CPUS PRIORITY 6174533 easybuild example OpenMPI-1.8.4- None 2015-07-03T0 2015-07-03T1 9:55:59 1 16 1119 .. _submitting_jobs_examples_pbs_python_backend: Example: submitting installations to TORQUE via pbs_python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the ``PbsPython`` job backend, ``eb`` submits jobs directly to TORQUE for processing, and exits as soon as all jobs have been submitted :: $ eb GCC-4.6.0.eb OpenMPI-1.8.4-GCC-4.9.2.eb --robot --job == temporary log file in case of crash /tmp/eb-OMNQAV/easybuild-9fTuJA.log == resolving dependencies ... == List of submitted jobs (9): GCC-4.6.0 (GCC/4.6.0): 508023.example.pbs; GCC-4.9.2 (GCC/4.9.2): 508024.example.pbs; libtool-2.4.2-GCC-4.9.2 (libtool/2.4.2-GCC-4.9.2): 508025.example.pbs; M4-1.4.17-GCC-4.9.2 (M4/1.4.17-GCC-4.9.2): 50 8026.example.pbs; Autoconf-2.69-GCC-4.9.2 (Autoconf/2.69-GCC-4.9.2): 508027.example.pbs; Automake-1.15-GCC-4.9.2 (Au tomake/1.15-GCC-4.9.2): 508028.example.pbs; numactl-2.0.10-GCC-4.9.2 (numactl/2.0.10-GCC-4.9.2): 508029.example.pbs; hwloc-1.10.0-GCC-4.9.2 (hwloc/1.10.0-GCC-4.9.2): 508030.example.pbs; OpenMPI-1.8.4-GCC-4.9.2 (OpenMPI/1.8.4-GCC-4.9. 2): 508031.example.pbs == Submitted parallel build jobs, exiting now == temporary log file(s) /tmp/eb-OMNQAV/easybuild-9fTuJA.log* have been removed. == temporary directory /tmp/eb-OMNQAV has been removed. $ qstat -a example.pbs: Req'd Req'd Elap Job ID Username Queue Jobname SessID NDS TSK Memory Time S Time ------------------- ----------- -------- ---------------- ------ ----- ------ ------ --------- - --------- 508023.example.pbs easybuild batch GCC-4.6.0 -- 1 16 -- 24:00:00 R 00:02:16 508024.example.pbs easybuild batch GCC-4.9.2 -- 1 16 -- 24:00:00 Q -- 508025.example.pbs easybuild batch libtool-2.4.2-GC -- 1 16 -- 24:00:00 H -- 508026.example.pbs easybuild batch M4-1.4.17-GCC-4. -- 1 16 -- 24:00:00 H -- 508027.example.pbs easybuild batch Autoconf-2.69-GC -- 1 16 -- 24:00:00 H -- 508028.example.pbs easybuild batch Automake-1.15-GC -- 1 16 -- 24:00:00 H -- 508029.example.pbs easybuild batch numactl-2.0.10-G -- 1 16 -- 24:00:00 H -- 508030.example.pbs easybuild batch hwloc-1.10.0-GCC -- 1 16 -- 24:00:00 H -- 508031.example.pbs easybuild batch OpenMPI-1.8.4-GC -- 1 16 -- 24:00:00 H -- Holds are put in place to ensure that the jobs run in the order dictated by the dependency graph(s). These holds are released by the TORQUE server as soon as they jobs on which they depend have completed:: $ qstat -a example.pbs: Req'd Req'd Elap Job ID Username Queue Jobname SessID NDS TSK Memory Time S Time ------------------- ----------- -------- ---------------- ------ ----- ------ ------ --------- - --------- 508025.example.pbs easybuild batch libtool-2.4.2-GC -- 1 16 -- 24:00:00 Q -- 508026.example.pbs easybuild batch M4-1.4.17-GCC-4. -- 1 16 -- 24:00:00 Q -- 508027.example.pbs easybuild batch Autoconf-2.69-GC -- 1 16 -- 24:00:00 H -- 508028.example.pbs easybuild batch Automake-1.15-GC -- 1 16 -- 24:00:00 H -- 508029.example.pbs easybuild batch numactl-2.0.10-G -- 1 16 -- 24:00:00 H -- 508030.example.pbs easybuild batch hwloc-1.10.0-GCC -- 1 16 -- 24:00:00 H -- 508031.example.pbs easybuild batch OpenMPI-1.8.4-GC -- 1 16 -- 24:00:00 H -- ... $ qstat -a example.pbs: Req'd Req'd Elap Job ID Username Queue Jobname SessID NDS TSK Memory Time S Time ------------------- ----------- -------- ---------------- ------ ----- ------ ------ --------- - --------- 508031.example.pbs easybuild batch OpenMPI-1.8.4-GC -- 1 16 -- 24:00:00 R 00:03:46","title":"Submitting jobs using --job"},{"location":"system-toolchain/","text":"System toolchain \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/System_toolchain.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/System_toolchain.rst in easybuilders/easybuild repo target: docs/system-toolchain.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _system_toolchain: System toolchain ================ In EasyBuild v4.0, the infamous ``dummy`` toolchain has been deprecated, and replaced with the ``system`` toolchain. This page provides more information about this change, and how to deal with the transition. .. note :: To ease the transition from ``dummy`` to ``system`` , EasyBuild v3.9.4 already supports using the ``system`` toolchain as an alias for the ``dummy`` toolchain. .. contents :: :depth: 1 :backlinks: none :local: .. _system_toolchain_semantics: Use case for the ``system`` toolchain ------------------------------------- The :ref: `system_toolchain` is intended for the same use case as the ``dummy`` toolchain was: it should (only) be used for software installations where the compiler & libraries provided by the operating system are assumed to be sufficient. This includes installing binary software (for which no compiler is used at all), installations that boil down to only unpacking a source tarball, and building and installing a (base) toolchain compiler like GCC(core). For all intents and purposes, the ``system`` **toolchain can be considered as a drop-in replacement for the (deprecated) ** ``dummy`` ** toolchain** (see also :ref: `system_toolchain_impact_deprecated_dummy` ). .. _system_toolchain_usage: Using the ``system`` compiler ----------------------------- To use the ``system`` toolchain in an easyconfig file, simply use ``'system'`` as toolchain name: .. code :: python toolchain = { 'name' : 'system' , 'version' : '' } .. note :: The toolchain version you specify is totally irrelevant when using the ``system`` compiler, it could be ``'system'`` , ``''`` or any other (string) value. EasyBuild does not interpret the version of the ``system`` toolchain in any way (as opposed to the ``dummy`` toolchain in EasyBuild versions prior to version 4.0, see :ref: `system_toolchain_motivation_deprecating_dummy_version_and_deps` ). .. _system_toolchain_SYSTEM_constant: ``SYSTEM`` constant ------------------- For convenience, a ``SYSTEM`` constant is available to easily specify the use of the ``system`` toolchain (and to make it stand out against using a regular toolchain): .. code :: python toolchain = SYSTEM *We strongly recommend using the* ``SYSTEM`` *constant to specify the use of the* ``system`` *toolchain.* .. _system_toolchain_impact_deprecated_dummy: Impact of deprecating ``dummy`` toolchain ----------------------------------------- The only impact of deprecating the ``dummy`` toolchain is that a warning will be printed whenever an easyconfig file that still uses the ``dummy`` toolchain is parsed :: WARNING: Deprecated functionality, will no longer work in v5.0: Use of 'dummy' toolchain is deprecated, use 'system' toolchain instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information Other than this warning, **there is no impact on the EasyBuild functionality whatsoever** . Use of the ``dummy`` toolchain has been deprecated, but is still supported in EasyBuild v4.x; it is simply an alias for the ``system`` toolchain which replaces it. Hence, software installations for easyconfig files that are still using the ``dummy`` toolchain will proceed as before, and the contents of the easyconfig files will be interpreted exactly as before, with one exception: the (build) dependencies specified in the easyconfig files will *always* be loaded in the build environment, *regardless* of the toolchain version (see also :ref: `system_toolchain_motivation_deprecating_dummy_version_and_deps` ). Since the ``dummy`` toolchain has been deprecated, so has the ``--add-dummy-to-minimal-toolchains`` configuration option. It has been replaced with the ``--add-system-to-minimal-toolchains`` configuration option (see also :ref: `minimal_toolchains_system` ). .. _system_toolchain_updating_dummy: Updating easyconfig files that use the ``dummy`` toolchain -------------------------------------------------------- To update easyconfig files that still use the ``dummy`` toolchain, you should simply change the definition of the ``toolchain`` parameter to use ``'system'`` as a toolchain name (see also :ref: `system_toolchain_usage` ). We recommend using the ``SYSTEM`` constant for this, see :ref: `system_toolchain_SYSTEM_constant` . To automatically update easyconfig files still using the ``dummy`` toolchain, you can also use ``eb --fix-deprecated-easyconfigs`` . Do take into account that this option could also result in additional changes being made to the easyconfig files, see :ref: `easyconfig_files_local_variables_fix_deprecated_easyconfigs` . .. _system_toolchain_motivation_deprecating_dummy: Motivation for deprecating the ``dummy`` toolchain -------------------------------------------------- Deprecating the ``dummy`` toolchain was done for a number of reasons: * :ref: `system_toolchain_motivation_deprecating_dummy_name` * :ref: `system_toolchain_motivation_deprecating_dummy_version_and_deps` .. _system_toolchain_motivation_deprecating_dummy_name: ``dummy`` toolchain name ~~~~~~~~~~~~~~~~~~~~~~~~ The ``dummy`` name may be rather confusing, especially if you are new to EasyBuild. Just based on the name, it is unclear how the ``dummy`` toolchain is different from a regular toolchain. Hopefully, the name of the ``system`` toolchain does speak more for itself: when using it, you are relying on the compiler & libraries provided by the operating system (as opposed to compilers & libraries that are a part of a regular toolchain). .. _system_toolchain_motivation_deprecating_dummy_version_and_deps: Impact of version of ``dummy`` toolchain w.r.t. dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The *version* that was being used for a ``dummy`` toolchain was interpreted by EasyBuild in a rather surprising way. If ``'dummy'`` was specified as a toolchain version, then the (build) dependencies that were specified in the easyconfig file were *not* loaded in the build environment. ``module load`` statements for the (non-build) dependencies *were* included in the generated module file, however... Using any version other than ``'dummy'`` resulted in the usual behaviour of loading the dependencies in the build environment. Why this mechanism was in place has been lost to the sands of time... This often led to outright confusing installation problems, and hence it was the main motivator for deprecating the ``dummy`` toolchain. Rather than just changing the semantics of the ``dummy`` toolchain, we saw this as an opportunity to also fix the name.","title":"System toolchain"},{"location":"system-toolchain/#system-toolchain","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/System_toolchain.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/System_toolchain.rst in easybuilders/easybuild repo target: docs/system-toolchain.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _system_toolchain: System toolchain ================ In EasyBuild v4.0, the infamous ``dummy`` toolchain has been deprecated, and replaced with the ``system`` toolchain. This page provides more information about this change, and how to deal with the transition. .. note :: To ease the transition from ``dummy`` to ``system`` , EasyBuild v3.9.4 already supports using the ``system`` toolchain as an alias for the ``dummy`` toolchain. .. contents :: :depth: 1 :backlinks: none :local: .. _system_toolchain_semantics: Use case for the ``system`` toolchain ------------------------------------- The :ref: `system_toolchain` is intended for the same use case as the ``dummy`` toolchain was: it should (only) be used for software installations where the compiler & libraries provided by the operating system are assumed to be sufficient. This includes installing binary software (for which no compiler is used at all), installations that boil down to only unpacking a source tarball, and building and installing a (base) toolchain compiler like GCC(core). For all intents and purposes, the ``system`` **toolchain can be considered as a drop-in replacement for the (deprecated) ** ``dummy`` ** toolchain** (see also :ref: `system_toolchain_impact_deprecated_dummy` ). .. _system_toolchain_usage: Using the ``system`` compiler ----------------------------- To use the ``system`` toolchain in an easyconfig file, simply use ``'system'`` as toolchain name: .. code :: python toolchain = { 'name' : 'system' , 'version' : '' } .. note :: The toolchain version you specify is totally irrelevant when using the ``system`` compiler, it could be ``'system'`` , ``''`` or any other (string) value. EasyBuild does not interpret the version of the ``system`` toolchain in any way (as opposed to the ``dummy`` toolchain in EasyBuild versions prior to version 4.0, see :ref: `system_toolchain_motivation_deprecating_dummy_version_and_deps` ). .. _system_toolchain_SYSTEM_constant: ``SYSTEM`` constant ------------------- For convenience, a ``SYSTEM`` constant is available to easily specify the use of the ``system`` toolchain (and to make it stand out against using a regular toolchain): .. code :: python toolchain = SYSTEM *We strongly recommend using the* ``SYSTEM`` *constant to specify the use of the* ``system`` *toolchain.* .. _system_toolchain_impact_deprecated_dummy: Impact of deprecating ``dummy`` toolchain ----------------------------------------- The only impact of deprecating the ``dummy`` toolchain is that a warning will be printed whenever an easyconfig file that still uses the ``dummy`` toolchain is parsed :: WARNING: Deprecated functionality, will no longer work in v5.0: Use of 'dummy' toolchain is deprecated, use 'system' toolchain instead; see http://easybuild.readthedocs.org/en/latest/Deprecated-functionality.html for more information Other than this warning, **there is no impact on the EasyBuild functionality whatsoever** . Use of the ``dummy`` toolchain has been deprecated, but is still supported in EasyBuild v4.x; it is simply an alias for the ``system`` toolchain which replaces it. Hence, software installations for easyconfig files that are still using the ``dummy`` toolchain will proceed as before, and the contents of the easyconfig files will be interpreted exactly as before, with one exception: the (build) dependencies specified in the easyconfig files will *always* be loaded in the build environment, *regardless* of the toolchain version (see also :ref: `system_toolchain_motivation_deprecating_dummy_version_and_deps` ). Since the ``dummy`` toolchain has been deprecated, so has the ``--add-dummy-to-minimal-toolchains`` configuration option. It has been replaced with the ``--add-system-to-minimal-toolchains`` configuration option (see also :ref: `minimal_toolchains_system` ). .. _system_toolchain_updating_dummy: Updating easyconfig files that use the ``dummy`` toolchain -------------------------------------------------------- To update easyconfig files that still use the ``dummy`` toolchain, you should simply change the definition of the ``toolchain`` parameter to use ``'system'`` as a toolchain name (see also :ref: `system_toolchain_usage` ). We recommend using the ``SYSTEM`` constant for this, see :ref: `system_toolchain_SYSTEM_constant` . To automatically update easyconfig files still using the ``dummy`` toolchain, you can also use ``eb --fix-deprecated-easyconfigs`` . Do take into account that this option could also result in additional changes being made to the easyconfig files, see :ref: `easyconfig_files_local_variables_fix_deprecated_easyconfigs` . .. _system_toolchain_motivation_deprecating_dummy: Motivation for deprecating the ``dummy`` toolchain -------------------------------------------------- Deprecating the ``dummy`` toolchain was done for a number of reasons: * :ref: `system_toolchain_motivation_deprecating_dummy_name` * :ref: `system_toolchain_motivation_deprecating_dummy_version_and_deps` .. _system_toolchain_motivation_deprecating_dummy_name: ``dummy`` toolchain name ~~~~~~~~~~~~~~~~~~~~~~~~ The ``dummy`` name may be rather confusing, especially if you are new to EasyBuild. Just based on the name, it is unclear how the ``dummy`` toolchain is different from a regular toolchain. Hopefully, the name of the ``system`` toolchain does speak more for itself: when using it, you are relying on the compiler & libraries provided by the operating system (as opposed to compilers & libraries that are a part of a regular toolchain). .. _system_toolchain_motivation_deprecating_dummy_version_and_deps: Impact of version of ``dummy`` toolchain w.r.t. dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The *version* that was being used for a ``dummy`` toolchain was interpreted by EasyBuild in a rather surprising way. If ``'dummy'`` was specified as a toolchain version, then the (build) dependencies that were specified in the easyconfig file were *not* loaded in the build environment. ``module load`` statements for the (non-build) dependencies *were* included in the generated module file, however... Using any version other than ``'dummy'`` resulted in the usual behaviour of loading the dependencies in the build environment. Why this mechanism was in place has been lost to the sands of time... This often led to outright confusing installation problems, and hence it was the main motivator for deprecating the ``dummy`` toolchain. Rather than just changing the semantics of the ``dummy`` toolchain, we saw this as an opportunity to also fix the name.","title":"System toolchain"},{"location":"terminology/","text":"EasyBuild terminology \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Concepts_and_Terminology.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Concepts_and_Terminology.rst in easybuilders/easybuild repo target: docs/terminology.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _concepts_and_terminology: Concepts and terminology ======================== EasyBuild consists of a collection of Python modules and packages that interact with each other, dynamically picking up additional Python modules as needed for building and installing a (stack of) software package(s) specified via simple specification files. Or, in EasyBuild terminology: **the EasyBuild framework leverages easyblocks to automatically build and install software using particular compiler toolchains, as specified by one or multiple easyconfig files**. .. contents :: :depth: 3 :backlinks: none .. _framework: EasyBuild framework ------------------- The EasyBuild **framework** embodies the core of the tool, providing functionality commonly needed when installing scientific software on HPC systems. For example, it deals with downloading, unpacking and patching of sources, loading module files for dependencies, setting up the build environment, autonomously running (interactive) shell commands, creating module files that match the specification files, etc. Included in the framework is an `abstract` implementation of a software build and install procedure, which is split up into different `steps` : * unpacking sources * configuration * build * installation * module generation * etc. Most of these steps, i.e., the ones which are generally more-or-less analogous across different software packages, have appropriate (default) implementations. The only exceptions are the configuration, build and installation steps that are purposely left unimplemented (since there is no common procedure for them). Each of the steps can be tweaked and steered via different parameters known to the framework, for which values are either obtained from the provided specification files or set to reasonable default values. See :ref: `easyconfig_files` . .. XXX - UPDATE BY VERSION FIXME In EasyBuild version |version| the framework source code consists of about 19000 lines of code, organized across about 125 Python modules in roughly a dozen Python package directories, next to almost 7000 lines of code for tests. This provides some notion of the size of the EasyBuild framework and the amount of supporting functionality it has to offer. .. _Easyblocks: Easyblocks ---------- The implementation of a particular software build and install procedure is done in a Python module, which is aptly referred to as an **easyblock** . Each easyblock ties in with the framework API by defining (or extending/replacing) one or more of the step functions that are part of the abstract procedure used by the EasyBuild framework. Easyblocks typically heavily rely on the supporting functionality provided by the framework, for example for (autonomously) executing (interactive) shell commands and obtaining the command's output and exit code. A distinction is made between **software-specific** and **generic** easyblocks. Software-specific easyblocks implement a build and install procedure which is entirely custom to one particular software package (e.g., WRF), while generic easyblocks implement a procedure using standard tools (e.g., CMake). Since easyblocks are implemented in an object-oriented scheme, the step methods implemented by a particular easyblock can be reused in others via inheritance, enabling code reuse across build procedure implementations. For each software package being built, the EasyBuild framework will determine which easyblock should be used, based on the name of the software package or the value of the ``easyblock`` specification parameter (see :ref: `writing_easyconfigs_easyblock_spec` ). Since EasyBuild v2.0, an easyblock *must* be specified in case no matching easyblock is found based on the software name (cfr. :ref: `depr_ConfigureMake_fallback_eb1` ). .. XXX - UPDATE BY VERSION FIXME EasyBuild version 2.4.0 includes 154 software-specific easyblocks and 28 generic easyblocks (see also :ref: `basic_usage_easyblocks` ), providing support for automatically installing a wide range of software packages. Examples range from fairly easy-to-build programs like gzip, other basic tools like compilers, various MPI stacks and commonly used libraries, primarily for x86_64 architecture systems, to large scientific software packages that are notorious for their involved and tedious install procedures, such as: `CP2K` , `NWChem` , `OpenFOAM` , `QuantumESPRESSO` , `WRF` . .. _toolchains: Toolchains ---------- EasyBuild employs so-called **compiler toolchains** or, simply `toolchains` for short, which are a major concept in handling the build and installation processes. A typical toolchain consists of one or more compilers, usually put together with some libraries for specific functionality, e.g., for using an MPI stack for distributed computing, or which provide optimized routines for commonly used math operations, e.g., the well-known BLAS/LAPACK APIs for linear algebra routines. For each software package being built, the toolchain to be used must be specified in some way. The EasyBuild framework prepares the `build environment` for the different toolchain components, by loading their respective modules and defining environment variables to specify compiler commands (e.g., via ``$F90`` ), compiler and linker options (e.g., via ``$CFLAGS`` and ``$LDFLAGS`` ), the list of library names to supply to the linker (via ``$LIBS`` ), etc. This enables making easyblocks largely `toolchain-agnostic` since they can simply rely on these environment variables; that is, unless they need to be aware of, for example, the particular compiler being used to determine the build configuration options. Recent releases of EasyBuild include out-of-the-box toolchain support for: - various compilers, including GCC, Intel, Clang, CUDA - common MPI libraries, such as Intel MPI, MPICH, MVAPICH2, OpenMPI - various numerical libraries, including ATLAS, Intel MKL, OpenBLAS, ScalaPACK, FFTW Please see the :ref: `common_toolchains` page for details about the two most common toolchains, one for \"free and open source software\" ( ``foss`` ) based on GCC and one based on the Intel compilers ( ``intel`` ). .. _system_toolchain: ``system`` toolchain ~~~~~~~~~~~~~~~~~~~ The ``system`` toolchain is a special case. It is an *empty* toolchain, i.e. a toolchain without any components, and corresponds to using the readily available compilers and libraries (e.g., the ones provided by the operating system, or by modules which were loaded before issuing the ``eb`` command). When the ``system`` toolchain is used, a corresponding ``system`` module file is not required/loaded and no build environment is being defined. .. _dummy_toolchain: ``dummy`` toolchain *(DEPRECATED)* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The ``dummy`` toolchain has been deprecated in EasyBuild v4.0, and replaced by the :ref: `system_toolchain` . Common toolchains ~~~~~~~~~~~~~~~~~ For more information on the concept of *common toolchains* , see :ref: `common_toolchains` . .. _easyconfig_files: Easyconfig files ---------------- The specification files that are supplied to EasyBuild are referred to as **easyconfig files** (or simply `easyconfigs` ), which are basically plain text files containing (mostly) key-value assignments for build parameters supported by the framework, also referred to as **easyconfig parameters** (see :doc: `Writing_easyconfig_files` for more information). Note that easyconfig files only provide the bits of information required to determine the corresponding module name; the module name itself is computed by EasyBuild framework by querying the module naming scheme being used. The complete list of supported easyconfig parameters can be easily obtained via the EasyBuild command line using ``eb -a`` (see also :ref: `avail_easyconfig_params` ). As such, each easyconfig file provides a complete specification of which particular software package should be installed, and which settings should be used for building it. After completing an installation, EasyBuild copies the used easyconfig file to the install directory, as a template, and also supports maintaining an easyconfig archive which is updated on every successful installation. Therefore, reproducing installations becomes trivial. .. _extensions: Extensions ---------- Some software packages support installing additional add-ons alongside the 'main' software, either in the same installation prefix, or in a separate location. In EasyBuild, we use the neutral term ' **extensions** ' to refer these add-ons. Well-known examples include: * Perl modules (http://www.cpan.org/modules/) * Python packages (https://pypi.python.org/pypi) * R libraries (http://cran.r-project.org/web/packages/) * Ruby gems (http://guides.rubygems.org/what-is-a-gem/)","title":"Terminology"},{"location":"terminology/#easybuild-terminology","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Concepts_and_Terminology.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Concepts_and_Terminology.rst in easybuilders/easybuild repo target: docs/terminology.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _concepts_and_terminology: Concepts and terminology ======================== EasyBuild consists of a collection of Python modules and packages that interact with each other, dynamically picking up additional Python modules as needed for building and installing a (stack of) software package(s) specified via simple specification files. Or, in EasyBuild terminology: **the EasyBuild framework leverages easyblocks to automatically build and install software using particular compiler toolchains, as specified by one or multiple easyconfig files**. .. contents :: :depth: 3 :backlinks: none .. _framework: EasyBuild framework ------------------- The EasyBuild **framework** embodies the core of the tool, providing functionality commonly needed when installing scientific software on HPC systems. For example, it deals with downloading, unpacking and patching of sources, loading module files for dependencies, setting up the build environment, autonomously running (interactive) shell commands, creating module files that match the specification files, etc. Included in the framework is an `abstract` implementation of a software build and install procedure, which is split up into different `steps` : * unpacking sources * configuration * build * installation * module generation * etc. Most of these steps, i.e., the ones which are generally more-or-less analogous across different software packages, have appropriate (default) implementations. The only exceptions are the configuration, build and installation steps that are purposely left unimplemented (since there is no common procedure for them). Each of the steps can be tweaked and steered via different parameters known to the framework, for which values are either obtained from the provided specification files or set to reasonable default values. See :ref: `easyconfig_files` . .. XXX - UPDATE BY VERSION FIXME In EasyBuild version |version| the framework source code consists of about 19000 lines of code, organized across about 125 Python modules in roughly a dozen Python package directories, next to almost 7000 lines of code for tests. This provides some notion of the size of the EasyBuild framework and the amount of supporting functionality it has to offer. .. _Easyblocks: Easyblocks ---------- The implementation of a particular software build and install procedure is done in a Python module, which is aptly referred to as an **easyblock** . Each easyblock ties in with the framework API by defining (or extending/replacing) one or more of the step functions that are part of the abstract procedure used by the EasyBuild framework. Easyblocks typically heavily rely on the supporting functionality provided by the framework, for example for (autonomously) executing (interactive) shell commands and obtaining the command's output and exit code. A distinction is made between **software-specific** and **generic** easyblocks. Software-specific easyblocks implement a build and install procedure which is entirely custom to one particular software package (e.g., WRF), while generic easyblocks implement a procedure using standard tools (e.g., CMake). Since easyblocks are implemented in an object-oriented scheme, the step methods implemented by a particular easyblock can be reused in others via inheritance, enabling code reuse across build procedure implementations. For each software package being built, the EasyBuild framework will determine which easyblock should be used, based on the name of the software package or the value of the ``easyblock`` specification parameter (see :ref: `writing_easyconfigs_easyblock_spec` ). Since EasyBuild v2.0, an easyblock *must* be specified in case no matching easyblock is found based on the software name (cfr. :ref: `depr_ConfigureMake_fallback_eb1` ). .. XXX - UPDATE BY VERSION FIXME EasyBuild version 2.4.0 includes 154 software-specific easyblocks and 28 generic easyblocks (see also :ref: `basic_usage_easyblocks` ), providing support for automatically installing a wide range of software packages. Examples range from fairly easy-to-build programs like gzip, other basic tools like compilers, various MPI stacks and commonly used libraries, primarily for x86_64 architecture systems, to large scientific software packages that are notorious for their involved and tedious install procedures, such as: `CP2K` , `NWChem` , `OpenFOAM` , `QuantumESPRESSO` , `WRF` . .. _toolchains: Toolchains ---------- EasyBuild employs so-called **compiler toolchains** or, simply `toolchains` for short, which are a major concept in handling the build and installation processes. A typical toolchain consists of one or more compilers, usually put together with some libraries for specific functionality, e.g., for using an MPI stack for distributed computing, or which provide optimized routines for commonly used math operations, e.g., the well-known BLAS/LAPACK APIs for linear algebra routines. For each software package being built, the toolchain to be used must be specified in some way. The EasyBuild framework prepares the `build environment` for the different toolchain components, by loading their respective modules and defining environment variables to specify compiler commands (e.g., via ``$F90`` ), compiler and linker options (e.g., via ``$CFLAGS`` and ``$LDFLAGS`` ), the list of library names to supply to the linker (via ``$LIBS`` ), etc. This enables making easyblocks largely `toolchain-agnostic` since they can simply rely on these environment variables; that is, unless they need to be aware of, for example, the particular compiler being used to determine the build configuration options. Recent releases of EasyBuild include out-of-the-box toolchain support for: - various compilers, including GCC, Intel, Clang, CUDA - common MPI libraries, such as Intel MPI, MPICH, MVAPICH2, OpenMPI - various numerical libraries, including ATLAS, Intel MKL, OpenBLAS, ScalaPACK, FFTW Please see the :ref: `common_toolchains` page for details about the two most common toolchains, one for \"free and open source software\" ( ``foss`` ) based on GCC and one based on the Intel compilers ( ``intel`` ). .. _system_toolchain: ``system`` toolchain ~~~~~~~~~~~~~~~~~~~ The ``system`` toolchain is a special case. It is an *empty* toolchain, i.e. a toolchain without any components, and corresponds to using the readily available compilers and libraries (e.g., the ones provided by the operating system, or by modules which were loaded before issuing the ``eb`` command). When the ``system`` toolchain is used, a corresponding ``system`` module file is not required/loaded and no build environment is being defined. .. _dummy_toolchain: ``dummy`` toolchain *(DEPRECATED)* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The ``dummy`` toolchain has been deprecated in EasyBuild v4.0, and replaced by the :ref: `system_toolchain` . Common toolchains ~~~~~~~~~~~~~~~~~ For more information on the concept of *common toolchains* , see :ref: `common_toolchains` . .. _easyconfig_files: Easyconfig files ---------------- The specification files that are supplied to EasyBuild are referred to as **easyconfig files** (or simply `easyconfigs` ), which are basically plain text files containing (mostly) key-value assignments for build parameters supported by the framework, also referred to as **easyconfig parameters** (see :doc: `Writing_easyconfig_files` for more information). Note that easyconfig files only provide the bits of information required to determine the corresponding module name; the module name itself is computed by EasyBuild framework by querying the module naming scheme being used. The complete list of supported easyconfig parameters can be easily obtained via the EasyBuild command line using ``eb -a`` (see also :ref: `avail_easyconfig_params` ). As such, each easyconfig file provides a complete specification of which particular software package should be installed, and which settings should be used for building it. After completing an installation, EasyBuild copies the used easyconfig file to the install directory, as a template, and also supports maintaining an easyconfig archive which is updated on every successful installation. Therefore, reproducing installations becomes trivial. .. _extensions: Extensions ---------- Some software packages support installing additional add-ons alongside the 'main' software, either in the same installation prefix, or in a separate location. In EasyBuild, we use the neutral term ' **extensions** ' to refer these add-ons. Well-known examples include: * Perl modules (http://www.cpan.org/modules/) * Python packages (https://pypi.python.org/pypi) * R libraries (http://cran.r-project.org/web/packages/) * Ruby gems (http://guides.rubygems.org/what-is-a-gem/)","title":"EasyBuild terminology"},{"location":"tracing-progress/","text":"Tracing progress \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Tracing_progress.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Tracing_progress.rst in easybuilders/easybuild repo target: docs/tracing-progress.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _trace: Tracing progress ================ To trace the progress of EasyBuild while it is installing software, you can use ``eb --trace`` . .. note :: Tracing support was added as an experimental feature in EasyBuild v3.4.0, and thus required using ``--experimental`` . Since EasyBuild v3.4.1, ``--trace`` is considered stable and no longer requires the use of ``--experimental`` . .. contents :: :depth: 3 :backlinks: none .. _trace_output: Trace output ------------ When ``eb --trace`` is used, EasyBuild will print additional output on top of the standard output, which only mentions which step of the installation procedure is being executed (without any further details). This output includes: * location of build and install directories * list of sources and patches * modules being loaded * executed commands * results of the sanity check * location of generated module file For each (non-trivial) executed command, the location to a temporary log file will be provided so the output of that command can be monitored while it is running. In addition, the start time of the command is printed, to allow determining how long the command has been running. .. _trace_example: Example ------- .. code :: $ eb HDF5-1.10.1-intel-2017a.eb -df --trace --experimental == temporary log file in case of crash /tmp/eb-ieEeg3/easybuild-Ouw3jV.log == processing EasyBuild easyconfig /home/example/HDF5/HDF5-1.10.1-intel-2017a.eb == building and installing HDF5/1.10.1-intel-2017a... >> installation prefix: /prefix/software/HDF5/1.10.1-intel-2017a == fetching files... >> sources: >> /prefix/sources/h/HDF5/hdf5-1.10.1.tar.gz [SHA256: 048a9d149fb99aaa1680a712963f5a78e9c43b588d0e79d55e06760ec377c172] == creating build dir, resetting environment... >> build dir: /tmp/HDF5/1.10.1/intel-2017a == unpacking... >> running command 'tar xzf /prefix/sources/h/HDF5/hdf5-1.10.1.tar.gz' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-P9kf6c.log) [started at: 2017-09-06 08:28:42] == patching... == preparing... >> loading toolchain module: intel/2017a >> (no build dependencies specified) >> loading modules for (runtime) dependencies: >> * zlib/1.2.11-GCCcore-6.3.0 >> * Szip/2.1-intel-2017a >> defining build environment for intel/2017a toolchain == configuring... >> running command './configure --prefix=/prefix/software/HDF5/1.10.1-intel-2017a --with-szlib=/prefix/software/Szip/2.1-intel-2017a --with-zlib=/prefix/software/zlib/1.2.11-GCCcore-6.3.0 --with-pic --with-pthread --enable-shared --enable-cxx --enable-fortran FC=\"mpiifort\" --enable-unsupported --enable-parallel' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-dPat3D.log) [started at: 2017-09-06 08:28:44] == building... >> running command 'make -j 24 CXXFLAGS=\"$CXXFLAGS -DMPICH_IGNORE_CXX_SEEK\" FC=\"mpiifort\"' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-25vKdK.log) [started at: 2017-09-06 08:31:01] == testing... == installing... >> running command 'make install' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-BepE8P.log) [started at: 2017-09-06 08:34:09] == taking care of extensions... == postprocessing... == sanity checking... >> file 'bin/h52gif' found: OK >> file 'bin/h5c++' found: OK >> file 'bin/h5copy' found: OK >> file 'bin/h5debug' found: OK >> file 'bin/h5diff' found: OK >> file 'bin/h5dump' found: OK >> file 'bin/h5import' found: OK >> file 'bin/h5jam' found: OK >> file 'bin/h5ls' found: OK >> file 'bin/h5mkgrp' found: OK >> file 'bin/h5perf_serial' found: OK >> file 'bin/h5redeploy' found: OK >> file 'bin/h5repack' found: OK >> file 'bin/h5repart' found: OK >> file 'bin/h5stat' found: OK >> file 'bin/h5unjam' found: OK >> file 'bin/gif2h5' found: OK >> file 'bin/h5perf' found: OK >> file 'bin/h5pcc' found: OK >> file 'bin/h5pfc' found: OK >> file 'bin/ph5diff' found: OK >> file 'lib/libhdf5.so' found: OK >> file 'lib/libhdf5_cpp.so' found: OK >> file 'lib/libhdf5_fortran.so' found: OK >> file 'lib/libhdf5_hl_cpp.so' found: OK >> file 'lib/libhdf5_hl.so' found: OK >> file 'lib/libhdf5hl_fortran.so' found: OK >> (non-empty) directory 'include' found: OK == cleaning up... == creating module... >> generating module file @ /prefix/modules/all/HDF5/1.10.1-intel-2017a.lua == permissions... == packaging... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file(s) /prefix/software/HDF5/1.10.1-intel-2017a/easybuild/easybuild-HDF5-1.10.1-20170906.083425.log == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-ieEeg3/easybuild-Ouw3jV.log* have been removed. == Temporary directory /tmp/eb-ieEeg3 has been removed.","title":"Tracing progress"},{"location":"tracing-progress/#tracing-progress","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Tracing_progress.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Tracing_progress.rst in easybuilders/easybuild repo target: docs/tracing-progress.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _trace: Tracing progress ================ To trace the progress of EasyBuild while it is installing software, you can use ``eb --trace`` . .. note :: Tracing support was added as an experimental feature in EasyBuild v3.4.0, and thus required using ``--experimental`` . Since EasyBuild v3.4.1, ``--trace`` is considered stable and no longer requires the use of ``--experimental`` . .. contents :: :depth: 3 :backlinks: none .. _trace_output: Trace output ------------ When ``eb --trace`` is used, EasyBuild will print additional output on top of the standard output, which only mentions which step of the installation procedure is being executed (without any further details). This output includes: * location of build and install directories * list of sources and patches * modules being loaded * executed commands * results of the sanity check * location of generated module file For each (non-trivial) executed command, the location to a temporary log file will be provided so the output of that command can be monitored while it is running. In addition, the start time of the command is printed, to allow determining how long the command has been running. .. _trace_example: Example ------- .. code :: $ eb HDF5-1.10.1-intel-2017a.eb -df --trace --experimental == temporary log file in case of crash /tmp/eb-ieEeg3/easybuild-Ouw3jV.log == processing EasyBuild easyconfig /home/example/HDF5/HDF5-1.10.1-intel-2017a.eb == building and installing HDF5/1.10.1-intel-2017a... >> installation prefix: /prefix/software/HDF5/1.10.1-intel-2017a == fetching files... >> sources: >> /prefix/sources/h/HDF5/hdf5-1.10.1.tar.gz [SHA256: 048a9d149fb99aaa1680a712963f5a78e9c43b588d0e79d55e06760ec377c172] == creating build dir, resetting environment... >> build dir: /tmp/HDF5/1.10.1/intel-2017a == unpacking... >> running command 'tar xzf /prefix/sources/h/HDF5/hdf5-1.10.1.tar.gz' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-P9kf6c.log) [started at: 2017-09-06 08:28:42] == patching... == preparing... >> loading toolchain module: intel/2017a >> (no build dependencies specified) >> loading modules for (runtime) dependencies: >> * zlib/1.2.11-GCCcore-6.3.0 >> * Szip/2.1-intel-2017a >> defining build environment for intel/2017a toolchain == configuring... >> running command './configure --prefix=/prefix/software/HDF5/1.10.1-intel-2017a --with-szlib=/prefix/software/Szip/2.1-intel-2017a --with-zlib=/prefix/software/zlib/1.2.11-GCCcore-6.3.0 --with-pic --with-pthread --enable-shared --enable-cxx --enable-fortran FC=\"mpiifort\" --enable-unsupported --enable-parallel' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-dPat3D.log) [started at: 2017-09-06 08:28:44] == building... >> running command 'make -j 24 CXXFLAGS=\"$CXXFLAGS -DMPICH_IGNORE_CXX_SEEK\" FC=\"mpiifort\"' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-25vKdK.log) [started at: 2017-09-06 08:31:01] == testing... == installing... >> running command 'make install' (output in /tmp/eb-ieEeg3/easybuild-run_cmd-BepE8P.log) [started at: 2017-09-06 08:34:09] == taking care of extensions... == postprocessing... == sanity checking... >> file 'bin/h52gif' found: OK >> file 'bin/h5c++' found: OK >> file 'bin/h5copy' found: OK >> file 'bin/h5debug' found: OK >> file 'bin/h5diff' found: OK >> file 'bin/h5dump' found: OK >> file 'bin/h5import' found: OK >> file 'bin/h5jam' found: OK >> file 'bin/h5ls' found: OK >> file 'bin/h5mkgrp' found: OK >> file 'bin/h5perf_serial' found: OK >> file 'bin/h5redeploy' found: OK >> file 'bin/h5repack' found: OK >> file 'bin/h5repart' found: OK >> file 'bin/h5stat' found: OK >> file 'bin/h5unjam' found: OK >> file 'bin/gif2h5' found: OK >> file 'bin/h5perf' found: OK >> file 'bin/h5pcc' found: OK >> file 'bin/h5pfc' found: OK >> file 'bin/ph5diff' found: OK >> file 'lib/libhdf5.so' found: OK >> file 'lib/libhdf5_cpp.so' found: OK >> file 'lib/libhdf5_fortran.so' found: OK >> file 'lib/libhdf5_hl_cpp.so' found: OK >> file 'lib/libhdf5_hl.so' found: OK >> file 'lib/libhdf5hl_fortran.so' found: OK >> (non-empty) directory 'include' found: OK == cleaning up... == creating module... >> generating module file @ /prefix/modules/all/HDF5/1.10.1-intel-2017a.lua == permissions... == packaging... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file(s) /prefix/software/HDF5/1.10.1-intel-2017a/easybuild/easybuild-HDF5-1.10.1-20170906.083425.log == Build succeeded for 1 out of 1 == Temporary log file(s) /tmp/eb-ieEeg3/easybuild-Ouw3jV.log* have been removed. == Temporary directory /tmp/eb-ieEeg3 has been removed.","title":"Tracing progress"},{"location":"typical-workflow-example-with-wrf/","text":"Typical workflow example: building and installing WRF \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Typical_workflow_example_with_WRF.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Typical_workflow_example_with_WRF.rst in easybuilders/easybuild repo target: docs/typical-workflow-example-with-wrf.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _typical_workflow: Typical workflow example: building and installing WRF ===================================================== This section shows an example case of building `Weather Research and Forecasting (WRF) <http://www.wrf-model.org> `_ scientific software application, which is a notoriously complex software application to build and install. With EasyBuild however, WRF can be installed quite easily and here is how. First, you search which easyconfigs are available for WRF, using ``--search`` (see :ref: `searching_for_easyconfigs` ) and you select one based on the software version, toolchain, etc. Using the selected easyconfig file, you can get an overview of the planned installations using ``--dry-run`` (see :ref: `get_an_overview` ). Finally, building and installing WRF is done by specifying the matching easyconfig file in the eb command line, and using ``--robot`` (see :ref: `use_robot` ) to enable dependency resolution. That way WRF and all of its dependencies are installed with `a single command` ! Searching for available easyconfigs files ----------------------------------------- Searching for build specification for a particular software package can be done using the ``--search`` / ``-S`` command line options (see :ref: `searching_for_easyconfigs` ); for example, to get a list of available easyconfig files for WRF :: $ eb -S WRF CFGS1=/home/example/.local/easybuild/software/EasyBuild/4.1.1/easybuild/easyconfigs * $CFGS1/w/WPS/WPS-4.0.1_find-wrfdir.patch * $CFGS1/w/WPS/WPS-4.0.2_find-wrfdir.patch [ . . . ] * $CFGS1/w/WRF/WRF-4.0.1-intel-2018b-dmpar.eb * $CFGS1/w/WRF/WRF-4.0.2-foss-2018b-dmpar.eb [ . . . ] Note: 16 matching archived easyconfig(s) found, use --consider-archived-easyconfigs to see them Various easyconfig files are found: for different versions of WRF (e.g., v4.0.1 and v4.0.2), for different (versions of) compiler toolchains (e.g., foss 2018b, intel 2018b), etc. For the remainder of this example, we will use the available ``WRF-4.0.2-foss-2018b-dmpar.eb`` easyconfig file to specify to EasyBuild to build and install WRF v4.0.2 using version 2018b of the ``foss`` toolchain, which is one of the :ref: `common_toolchains` . The ``foss`` toolchain stands for ``GCC, OpenMPI, OpenBLAS/LAPACK, ScaLAPACK, and FFTW`` . See :ref: `toolchains_table` for a list of all available toolchains. Getting an overview of planned installations -------------------------------------------- To get an overview of the software that EasyBuild is going to build and install we can use the ``--dry-run`` / ``-D`` (see :ref: `get_an_overview` ) command line option. This will show a list of easyconfig files that will be used, together with the module files that will be installed, as well as their current availability ( ``[x]`` marks available modules). Note that EasyBuild will take care of all of the dependencies of WRF as well, and can even install the compiler toolchain as well if the corresponding modules are not available yet :: $ eb WRF-4.0.2-foss-2018b-dmpar.eb -Dr == temporary log file in case of crash /tmp/eb-eEnBF5/easybuild-pvrvNP.log Dry run: printing build status of easyconfigs and dependencies CFGS=/home/example/.local/easybuild/software/EasyBuild/4.1.1/easybuild/easyconfigs * [x] $CFGS/m/M4/M4-1.4.18.eb (module: M4/1.4.18) * [x] $CFGS/z/zlib/zlib-1.2.11.eb (module: zlib/1.2.11) * [x] $CFGS/h/help2man/help2man-1.47.4.eb (module: help2man/1.47.4) * [x] $CFGS/m/M4/M4-1.4.17.eb (module: M4/1.4.17) * [x] $CFGS/b/Bison/Bison-3.0.4.eb (module: Bison/3.0.4) * [x] $CFGS/f/flex/flex-2.6.4.eb (module: flex/2.6.4) * [x] $CFGS/b/binutils/binutils-2.30.eb (module: binutils/2.30) * [x] $CFGS/g/GCCcore/GCCcore-7.3.0.eb (module: GCCcore/7.3.0) * [x] $CFGS/h/help2man/help2man-1.47.4-GCCcore-7.3.0.eb (module: help2man/1.47.4-GCCcore-7.3.0) * [x] $CFGS/m/M4/M4-1.4.18-GCCcore-7.3.0.eb (module: M4/1.4.18-GCCcore-7.3.0) * [x] $CFGS/z/zlib/zlib-1.2.11-GCCcore-7.3.0.eb (module: zlib/1.2.11-GCCcore-7.3.0) * [x] $CFGS/b/Bison/Bison-3.0.4-GCCcore-7.3.0.eb (module: Bison/3.0.4-GCCcore-7.3.0) * [x] $CFGS/b/Bison/Bison-3.0.5-GCCcore-7.3.0.eb (module: Bison/3.0.5-GCCcore-7.3.0) * [x] $CFGS/f/flex/flex-2.6.4-GCCcore-7.3.0.eb (module: flex/2.6.4-GCCcore-7.3.0) * [x] $CFGS/b/binutils/binutils-2.30-GCCcore-7.3.0.eb (module: binutils/2.30-GCCcore-7.3.0) * [ ] $CFGS/n/ncurses/ncurses-6.1-GCCcore-7.3.0.eb (module: ncurses/6.1-GCCcore-7.3.0) * [ ] $CFGS/c/CMake/CMake-3.11.4-GCCcore-7.3.0.eb (module: CMake/3.11.4-GCCcore-7.3.0) * [x] $CFGS/a/Autoconf/Autoconf-2.69-GCCcore-7.3.0.eb (module: Autoconf/2.69-GCCcore-7.3.0) * [x] $CFGS/a/Automake/Automake-1.16.1-GCCcore-7.3.0.eb (module: Automake/1.16.1-GCCcore-7.3.0) * [x] $CFGS/g/GCC/GCC-7.3.0-2.30.eb (module: GCC/7.3.0-2.30) * [ ] $CFGS/p/pkg-config/pkg-config-0.29.2-GCCcore-7.3.0.eb (module: pkg-config/0.29.2-GCCcore-7.3.0) * [ ] $CFGS/c/cURL/cURL-7.60.0-GCCcore-7.3.0.eb (module: cURL/7.60.0-GCCcore-7.3.0) * [x] $CFGS/l/libtool/libtool-2.4.6-GCCcore-7.3.0.eb (module: libtool/2.4.6-GCCcore-7.3.0) * [ ] $CFGS/s/Szip/Szip-2.1.1-GCCcore-7.3.0.eb (module: Szip/2.1.1-GCCcore-7.3.0) * [x] $CFGS/o/OpenBLAS/OpenBLAS-0.3.1-GCC-7.3.0-2.30.eb (module: OpenBLAS/0.3.1-GCC-7.3.0-2.30) * [ ] $CFGS/t/tcsh/tcsh-6.20.00-GCCcore-7.3.0.eb (module: tcsh/6.20.00-GCCcore-7.3.0) * [ ] $CFGS/j/JasPer/JasPer-2.0.14-GCCcore-7.3.0.eb (module: JasPer/2.0.14-GCCcore-7.3.0) * [x] $CFGS/a/Autotools/Autotools-20180311-GCCcore-7.3.0.eb (module: Autotools/20180311-GCCcore-7.3.0) * [ ] $CFGS/d/Doxygen/Doxygen-1.8.14-GCCcore-7.3.0.eb (module: Doxygen/1.8.14-GCCcore-7.3.0) * [x] $CFGS/n/numactl/numactl-2.0.11-GCCcore-7.3.0.eb (module: numactl/2.0.11-GCCcore-7.3.0) * [x] $CFGS/x/xorg-macros/xorg-macros-1.19.2-GCCcore-7.3.0.eb (module: xorg-macros/1.19.2-GCCcore-7.3.0) * [x] $CFGS/l/libpciaccess/libpciaccess-0.14-GCCcore-7.3.0.eb (module: libpciaccess/0.14-GCCcore-7.3.0) * [x] $CFGS/n/ncurses/ncurses-6.0.eb (module: ncurses/6.0) * [x] $CFGS/g/gettext/gettext-0.19.8.1.eb (module: gettext/0.19.8.1) * [x] $CFGS/x/XZ/XZ-5.2.4-GCCcore-7.3.0.eb (module: XZ/5.2.4-GCCcore-7.3.0) * [x] $CFGS/l/libxml2/libxml2-2.9.8-GCCcore-7.3.0.eb (module: libxml2/2.9.8-GCCcore-7.3.0) * [x] $CFGS/h/hwloc/hwloc-1.11.10-GCCcore-7.3.0.eb (module: hwloc/1.11.10-GCCcore-7.3.0) * [x] $CFGS/o/OpenMPI/OpenMPI-3.1.1-GCC-7.3.0-2.30.eb (module: OpenMPI/3.1.1-GCC-7.3.0-2.30) * [x] $CFGS/g/gompi/gompi-2018b.eb (module: gompi/2018b) * [x] $CFGS/f/FFTW/FFTW-3.3.8-gompi-2018b.eb (module: FFTW/3.3.8-gompi-2018b) * [x] $CFGS/s/ScaLAPACK/ScaLAPACK-2.0.2-gompi-2018b-OpenBLAS-0.3.1.eb (module: ScaLAPACK/2.0.2-gompi-2018b-OpenBLAS-0.3.1) * [x] $CFGS/f/foss/foss-2018b.eb (module: foss/2018b) * [ ] $CFGS/h/HDF5/HDF5-1.10.2-foss-2018b.eb (module: HDF5/1.10.2-foss-2018b) * [ ] $CFGS/n/netCDF/netCDF-4.6.1-foss-2018b.eb (module: netCDF/4.6.1-foss-2018b) * [ ] $CFGS/n/netCDF-Fortran/netCDF-Fortran-4.4.4-foss-2018b.eb (module: netCDF-Fortran/4.4.4-foss-2018b) * [ ] $CFGS/w/WRF/WRF-4.0.2-foss-2018b-dmpar.eb (module: WRF/4.0.2-foss-2018b-dmpar) == Temporary log file(s) /tmp/eb-eEnBF5/easybuild-pvrvNP.log* have been removed. == Temporary directory /tmp/eb-eEnBF5 has been removed. Installing a software stack --------------------------- To make EasyBuild build and install WRF, including all of its dependencies, a **single command** is sufficient. By using the ``--robot`` / ``-r`` (see :ref: `use_robot` ) command line option, we enable dependency resolution such that the entire software stack is handled :: $ eb WRF-4.0.2-foss-2018b-dmpar.eb --robot == temporary log file in case of crash /tmp/eb-LfQa8b/easybuild-TBXLTy.log == resolving dependencies ... == processing EasyBuild easyconfig /home/example/.local/easybuild/software/EasyBuild/4.1.1/easybuild/easyconfigs/n/ncurses/ncurses-6.1-GCCcore-7.3.0.eb == building and installing ncurses/6.1-GCCcore-7.3.0... [...] == building and installing tcsh/6.20.00-GCCcore-7.3.0... [...] == building and installing CMake/3.11.4-GCCcore-7.3.0... [...] == building and installing JasPer/2.0.14-GCCcore-7.3.0... [...] == building and installing pkg-config/0.29.2-GCCcore-7.3.0... [...] == building and installing Doxygen/1.8.14-GCCcore-7.3.0... [...] == building and installing cURL/7.60.0-GCCcore-7.3.0... [...] == building and installing Szip/2.1.1-GCCcore-7.3.0... [...] == building and installing HDF5/1.10.2-foss-2018b... [...] == building and installing netCDF/4.6.1-foss-2018b... [...] == building and installing netCDF-Fortran/4.4.4-foss-2018b... [...] == building and installing WRF/4.0.2-foss-2018b-dmpar... [...] == Build succeeded for 12 out of 12 == Temporary log file(s) /tmp/eb-LfQa8b/easybuild-TBXLTy.log* have been removed. == Temporary directory /tmp/eb-LfQa8b has been removed. Once the installation has succeeded, modules will be available for WRF and all of its dependencies :: $ module load WRF $ module list $ module list Currently Loaded Modules: 1) EasyBuild/4.1.1 13) gompi/2018b 2) GCCcore/7.3.0 14) FFTW/3.3.8-gompi-2018b 3) zlib/1.2.11-GCCcore-7.3.0 15) ScaLAPACK/2.0.2-gompi-2018b-OpenBLAS-0.3.1 4) binutils/2.30-GCCcore-7.3.0 16) foss/2018b 5) GCC/7.3.0-2.30 17) JasPer/2.0.14-GCCcore-7.3.0 6) numactl/2.0.11-GCCcore-7.3.0 18) Szip/2.1.1-GCCcore-7.3.0 7) XZ/5.2.4-GCCcore-7.3.0 19) HDF5/1.10.2-foss-2018b 8) libxml2/2.9.8-GCCcore-7.3.0 20) cURL/7.60.0-GCCcore-7.3.0 9) libpciaccess/0.14-GCCcore-7.3.0 21) netCDF/4.6.1-foss-2018b 10) hwloc/1.11.10-GCCcore-7.3.0 22) netCDF-Fortran/4.4.4-foss-2018b 11) OpenMPI/3.1.1-GCC-7.3.0-2.30 23) WRF/4.0.2-foss-2018b-dmpar 12) OpenBLAS/0.3.1-GCC-7.3.0-2.30 For more information, see the other topics discussed in the documentation (see :ref: `contents` ).","title":"Typical workflow example: building and installing WRF"},{"location":"typical-workflow-example-with-wrf/#typical-workflow-example-building-and-installing-wrf","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Typical_workflow_example_with_WRF.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Typical_workflow_example_with_WRF.rst in easybuilders/easybuild repo target: docs/typical-workflow-example-with-wrf.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _typical_workflow: Typical workflow example: building and installing WRF ===================================================== This section shows an example case of building `Weather Research and Forecasting (WRF) <http://www.wrf-model.org> `_ scientific software application, which is a notoriously complex software application to build and install. With EasyBuild however, WRF can be installed quite easily and here is how. First, you search which easyconfigs are available for WRF, using ``--search`` (see :ref: `searching_for_easyconfigs` ) and you select one based on the software version, toolchain, etc. Using the selected easyconfig file, you can get an overview of the planned installations using ``--dry-run`` (see :ref: `get_an_overview` ). Finally, building and installing WRF is done by specifying the matching easyconfig file in the eb command line, and using ``--robot`` (see :ref: `use_robot` ) to enable dependency resolution. That way WRF and all of its dependencies are installed with `a single command` ! Searching for available easyconfigs files ----------------------------------------- Searching for build specification for a particular software package can be done using the ``--search`` / ``-S`` command line options (see :ref: `searching_for_easyconfigs` ); for example, to get a list of available easyconfig files for WRF :: $ eb -S WRF CFGS1=/home/example/.local/easybuild/software/EasyBuild/4.1.1/easybuild/easyconfigs * $CFGS1/w/WPS/WPS-4.0.1_find-wrfdir.patch * $CFGS1/w/WPS/WPS-4.0.2_find-wrfdir.patch [ . . . ] * $CFGS1/w/WRF/WRF-4.0.1-intel-2018b-dmpar.eb * $CFGS1/w/WRF/WRF-4.0.2-foss-2018b-dmpar.eb [ . . . ] Note: 16 matching archived easyconfig(s) found, use --consider-archived-easyconfigs to see them Various easyconfig files are found: for different versions of WRF (e.g., v4.0.1 and v4.0.2), for different (versions of) compiler toolchains (e.g., foss 2018b, intel 2018b), etc. For the remainder of this example, we will use the available ``WRF-4.0.2-foss-2018b-dmpar.eb`` easyconfig file to specify to EasyBuild to build and install WRF v4.0.2 using version 2018b of the ``foss`` toolchain, which is one of the :ref: `common_toolchains` . The ``foss`` toolchain stands for ``GCC, OpenMPI, OpenBLAS/LAPACK, ScaLAPACK, and FFTW`` . See :ref: `toolchains_table` for a list of all available toolchains. Getting an overview of planned installations -------------------------------------------- To get an overview of the software that EasyBuild is going to build and install we can use the ``--dry-run`` / ``-D`` (see :ref: `get_an_overview` ) command line option. This will show a list of easyconfig files that will be used, together with the module files that will be installed, as well as their current availability ( ``[x]`` marks available modules). Note that EasyBuild will take care of all of the dependencies of WRF as well, and can even install the compiler toolchain as well if the corresponding modules are not available yet :: $ eb WRF-4.0.2-foss-2018b-dmpar.eb -Dr == temporary log file in case of crash /tmp/eb-eEnBF5/easybuild-pvrvNP.log Dry run: printing build status of easyconfigs and dependencies CFGS=/home/example/.local/easybuild/software/EasyBuild/4.1.1/easybuild/easyconfigs * [x] $CFGS/m/M4/M4-1.4.18.eb (module: M4/1.4.18) * [x] $CFGS/z/zlib/zlib-1.2.11.eb (module: zlib/1.2.11) * [x] $CFGS/h/help2man/help2man-1.47.4.eb (module: help2man/1.47.4) * [x] $CFGS/m/M4/M4-1.4.17.eb (module: M4/1.4.17) * [x] $CFGS/b/Bison/Bison-3.0.4.eb (module: Bison/3.0.4) * [x] $CFGS/f/flex/flex-2.6.4.eb (module: flex/2.6.4) * [x] $CFGS/b/binutils/binutils-2.30.eb (module: binutils/2.30) * [x] $CFGS/g/GCCcore/GCCcore-7.3.0.eb (module: GCCcore/7.3.0) * [x] $CFGS/h/help2man/help2man-1.47.4-GCCcore-7.3.0.eb (module: help2man/1.47.4-GCCcore-7.3.0) * [x] $CFGS/m/M4/M4-1.4.18-GCCcore-7.3.0.eb (module: M4/1.4.18-GCCcore-7.3.0) * [x] $CFGS/z/zlib/zlib-1.2.11-GCCcore-7.3.0.eb (module: zlib/1.2.11-GCCcore-7.3.0) * [x] $CFGS/b/Bison/Bison-3.0.4-GCCcore-7.3.0.eb (module: Bison/3.0.4-GCCcore-7.3.0) * [x] $CFGS/b/Bison/Bison-3.0.5-GCCcore-7.3.0.eb (module: Bison/3.0.5-GCCcore-7.3.0) * [x] $CFGS/f/flex/flex-2.6.4-GCCcore-7.3.0.eb (module: flex/2.6.4-GCCcore-7.3.0) * [x] $CFGS/b/binutils/binutils-2.30-GCCcore-7.3.0.eb (module: binutils/2.30-GCCcore-7.3.0) * [ ] $CFGS/n/ncurses/ncurses-6.1-GCCcore-7.3.0.eb (module: ncurses/6.1-GCCcore-7.3.0) * [ ] $CFGS/c/CMake/CMake-3.11.4-GCCcore-7.3.0.eb (module: CMake/3.11.4-GCCcore-7.3.0) * [x] $CFGS/a/Autoconf/Autoconf-2.69-GCCcore-7.3.0.eb (module: Autoconf/2.69-GCCcore-7.3.0) * [x] $CFGS/a/Automake/Automake-1.16.1-GCCcore-7.3.0.eb (module: Automake/1.16.1-GCCcore-7.3.0) * [x] $CFGS/g/GCC/GCC-7.3.0-2.30.eb (module: GCC/7.3.0-2.30) * [ ] $CFGS/p/pkg-config/pkg-config-0.29.2-GCCcore-7.3.0.eb (module: pkg-config/0.29.2-GCCcore-7.3.0) * [ ] $CFGS/c/cURL/cURL-7.60.0-GCCcore-7.3.0.eb (module: cURL/7.60.0-GCCcore-7.3.0) * [x] $CFGS/l/libtool/libtool-2.4.6-GCCcore-7.3.0.eb (module: libtool/2.4.6-GCCcore-7.3.0) * [ ] $CFGS/s/Szip/Szip-2.1.1-GCCcore-7.3.0.eb (module: Szip/2.1.1-GCCcore-7.3.0) * [x] $CFGS/o/OpenBLAS/OpenBLAS-0.3.1-GCC-7.3.0-2.30.eb (module: OpenBLAS/0.3.1-GCC-7.3.0-2.30) * [ ] $CFGS/t/tcsh/tcsh-6.20.00-GCCcore-7.3.0.eb (module: tcsh/6.20.00-GCCcore-7.3.0) * [ ] $CFGS/j/JasPer/JasPer-2.0.14-GCCcore-7.3.0.eb (module: JasPer/2.0.14-GCCcore-7.3.0) * [x] $CFGS/a/Autotools/Autotools-20180311-GCCcore-7.3.0.eb (module: Autotools/20180311-GCCcore-7.3.0) * [ ] $CFGS/d/Doxygen/Doxygen-1.8.14-GCCcore-7.3.0.eb (module: Doxygen/1.8.14-GCCcore-7.3.0) * [x] $CFGS/n/numactl/numactl-2.0.11-GCCcore-7.3.0.eb (module: numactl/2.0.11-GCCcore-7.3.0) * [x] $CFGS/x/xorg-macros/xorg-macros-1.19.2-GCCcore-7.3.0.eb (module: xorg-macros/1.19.2-GCCcore-7.3.0) * [x] $CFGS/l/libpciaccess/libpciaccess-0.14-GCCcore-7.3.0.eb (module: libpciaccess/0.14-GCCcore-7.3.0) * [x] $CFGS/n/ncurses/ncurses-6.0.eb (module: ncurses/6.0) * [x] $CFGS/g/gettext/gettext-0.19.8.1.eb (module: gettext/0.19.8.1) * [x] $CFGS/x/XZ/XZ-5.2.4-GCCcore-7.3.0.eb (module: XZ/5.2.4-GCCcore-7.3.0) * [x] $CFGS/l/libxml2/libxml2-2.9.8-GCCcore-7.3.0.eb (module: libxml2/2.9.8-GCCcore-7.3.0) * [x] $CFGS/h/hwloc/hwloc-1.11.10-GCCcore-7.3.0.eb (module: hwloc/1.11.10-GCCcore-7.3.0) * [x] $CFGS/o/OpenMPI/OpenMPI-3.1.1-GCC-7.3.0-2.30.eb (module: OpenMPI/3.1.1-GCC-7.3.0-2.30) * [x] $CFGS/g/gompi/gompi-2018b.eb (module: gompi/2018b) * [x] $CFGS/f/FFTW/FFTW-3.3.8-gompi-2018b.eb (module: FFTW/3.3.8-gompi-2018b) * [x] $CFGS/s/ScaLAPACK/ScaLAPACK-2.0.2-gompi-2018b-OpenBLAS-0.3.1.eb (module: ScaLAPACK/2.0.2-gompi-2018b-OpenBLAS-0.3.1) * [x] $CFGS/f/foss/foss-2018b.eb (module: foss/2018b) * [ ] $CFGS/h/HDF5/HDF5-1.10.2-foss-2018b.eb (module: HDF5/1.10.2-foss-2018b) * [ ] $CFGS/n/netCDF/netCDF-4.6.1-foss-2018b.eb (module: netCDF/4.6.1-foss-2018b) * [ ] $CFGS/n/netCDF-Fortran/netCDF-Fortran-4.4.4-foss-2018b.eb (module: netCDF-Fortran/4.4.4-foss-2018b) * [ ] $CFGS/w/WRF/WRF-4.0.2-foss-2018b-dmpar.eb (module: WRF/4.0.2-foss-2018b-dmpar) == Temporary log file(s) /tmp/eb-eEnBF5/easybuild-pvrvNP.log* have been removed. == Temporary directory /tmp/eb-eEnBF5 has been removed. Installing a software stack --------------------------- To make EasyBuild build and install WRF, including all of its dependencies, a **single command** is sufficient. By using the ``--robot`` / ``-r`` (see :ref: `use_robot` ) command line option, we enable dependency resolution such that the entire software stack is handled :: $ eb WRF-4.0.2-foss-2018b-dmpar.eb --robot == temporary log file in case of crash /tmp/eb-LfQa8b/easybuild-TBXLTy.log == resolving dependencies ... == processing EasyBuild easyconfig /home/example/.local/easybuild/software/EasyBuild/4.1.1/easybuild/easyconfigs/n/ncurses/ncurses-6.1-GCCcore-7.3.0.eb == building and installing ncurses/6.1-GCCcore-7.3.0... [...] == building and installing tcsh/6.20.00-GCCcore-7.3.0... [...] == building and installing CMake/3.11.4-GCCcore-7.3.0... [...] == building and installing JasPer/2.0.14-GCCcore-7.3.0... [...] == building and installing pkg-config/0.29.2-GCCcore-7.3.0... [...] == building and installing Doxygen/1.8.14-GCCcore-7.3.0... [...] == building and installing cURL/7.60.0-GCCcore-7.3.0... [...] == building and installing Szip/2.1.1-GCCcore-7.3.0... [...] == building and installing HDF5/1.10.2-foss-2018b... [...] == building and installing netCDF/4.6.1-foss-2018b... [...] == building and installing netCDF-Fortran/4.4.4-foss-2018b... [...] == building and installing WRF/4.0.2-foss-2018b-dmpar... [...] == Build succeeded for 12 out of 12 == Temporary log file(s) /tmp/eb-LfQa8b/easybuild-TBXLTy.log* have been removed. == Temporary directory /tmp/eb-LfQa8b has been removed. Once the installation has succeeded, modules will be available for WRF and all of its dependencies :: $ module load WRF $ module list $ module list Currently Loaded Modules: 1) EasyBuild/4.1.1 13) gompi/2018b 2) GCCcore/7.3.0 14) FFTW/3.3.8-gompi-2018b 3) zlib/1.2.11-GCCcore-7.3.0 15) ScaLAPACK/2.0.2-gompi-2018b-OpenBLAS-0.3.1 4) binutils/2.30-GCCcore-7.3.0 16) foss/2018b 5) GCC/7.3.0-2.30 17) JasPer/2.0.14-GCCcore-7.3.0 6) numactl/2.0.11-GCCcore-7.3.0 18) Szip/2.1.1-GCCcore-7.3.0 7) XZ/5.2.4-GCCcore-7.3.0 19) HDF5/1.10.2-foss-2018b 8) libxml2/2.9.8-GCCcore-7.3.0 20) cURL/7.60.0-GCCcore-7.3.0 9) libpciaccess/0.14-GCCcore-7.3.0 21) netCDF/4.6.1-foss-2018b 10) hwloc/1.11.10-GCCcore-7.3.0 22) netCDF-Fortran/4.4.4-foss-2018b 11) OpenMPI/3.1.1-GCC-7.3.0-2.30 23) WRF/4.0.2-foss-2018b-dmpar 12) OpenBLAS/0.3.1-GCC-7.3.0-2.30 For more information, see the other topics discussed in the documentation (see :ref: `contents` ).","title":"Typical workflow example: building and installing WRF"},{"location":"unit-tests/","text":"Unit tests \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Unit-tests.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Unit-tests.rst in easybuilders/easybuild repo target: docs/unit-tests.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _unit_tests: Unit tests ========== Since EasyBuild v1.0, an extensive suite of unit tests has been implemented. The unit tests have become an indispensable factor in keeping EasyBuild stable and backward-compatible during development. We refer to the available tests as unit tests, even though they may not be *unit* tests in the strict sense of the word. Some tests are actually end-to-end tests or integration tests, see also http://en.wikipedia.org/wiki/Software_testing#Testing_levels. Following the test-driven development paradigm, additional unit tests are implemented when new features are added or when bugs are uncovered (and fixed). .. _unit_tests_what: What the unit tests are *not* ----------------------------- Each of the EasyBuild unit tests aim to test a specific characteristic of EasyBuild, e.g., a configuration option, a particular function or method in the EasyBuild framework, some specific feature, how EasyBuild handles a particular type of input, etc. The unit tests do *not* test the build and installation process of particular supported software packages (other than a handful of toy ones included in the tests themselves), let alone test the software installations obtained using EasyBuild themselves. Each stable EasyBuild release is subjected to a (time- and resource-consuming) *regression test* , however, which is out of scope here. .. _unit_tests_suites: Available unit test suites -------------------------- Three different unit test suites are available for EasyBuild, each of which tied to one of the EasyBuild code repositories on GitHub: *EasyBuild framework* , *easyblocks* , *easyconfigs* . .. _unit_tests_framework: EasyBuild framework unit tests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The unit test suite for the EasyBuild framework is by far the most extensive one, in terms of code size, coverage and the amount of effort that is put into it. These tests probe the functionality provided by the EasyBuild framework, ranging from standard operation (building and installing software, and generating module files) to specific configuration options, selected functional aspects, optional features and edge cases. At the time of writing (EasyBuild v2.0), more than 250 tests were implemented, organised in 28 subgroups. Running the full EasyBuild framework unit test suite takes about 15-40 minutes, depending on your system resources and testing configuration (see for example https://jenkins1.ugent.be/view/EasyBuild/). .. _unit_tests_easyblocks: easyblocks unit tests ~~~~~~~~~~~~~~~~~~~~~ The easyblocks unit test suite consists of a coupe of light-weight tests that are run per easyblock: * initialising the easyblock, to check for Python syntax errors and faulty imports * checking for the use of deprecated (or no longer supported) functionality Running the full easyblocks unit test suite takes less than one minute. .. _unit_tests_easyconfigs: easyconfigs unit tests ~~~~~~~~~~~~~~~~~~~~~~ The easyconfigs unit test suite consists a couple of tests for each of the available easyconfig files, followed by two large-scale overall tests. For each of the available easyconfig files, the following aspects are tested: * parsing the easyconfig file, to make sure no syntax errors are present * verifying that the filename matches the contents of the easyconfig file (software name/version, version suffix and toolchain name/version) * creating an ``EasyBlock`` instance using the parsed easyconfig, to check whether mandatory easyconfig parameters are defined * ensuring that all required patch files are available (right next to the easyconfig file) * making sure that the specified sanity check paths adhere to the requirements, i.e. only (and both) the ``files`` / ``dirs`` keys are listed, with the value for either one being non-empty * checking for the use of deprecated (or no longer supported) functionality * verifying whether ``eb --check-style`` on the easyconfig file passes * ensuring SHA256 checksums are included in new or changed easyconfig files If these tests pass for each and every available easyconfig file, two additional overall tests are run, i.e.: * ensuring that an easyconfig file is available for each specified dependency * checking whether any version conflicts occur in the dependency graph for each easyconfig file Running the full easyconfigs unit test suite should only take a couple of minutes. .. _unit_tests_applications: Applications ------------ The unit test suites are automatically triggered by `Jenkins <https://jenkins1.ugent.be> `_ for: * each pull request (update), see https://jenkins1.ugent.be/view/pull-request-builder/ * each (set of) change(s) that is merged in (usually via a pull request) The status of the different unit test suites is tracked separately for the ``main`` and ``develop`` branches of the EasyBuild code repositories: * ``main`` (stable, latest EasyBuild release): https://jenkins1.ugent.be/view/EasyBuild/ * ``develop`` (development, potentially unstable): https://jenkins1.ugent.be/view/EasyBuild%20(develop)/ We strictly adher to the policy of only merging pull requests for which the corresponding (latest) run of the *full* unit test suite passes successfully. .. _unit_tests_usage: Usage ----- Using the unit tests is deliberately kept very simple. .. _unit_tests_config: Configuration ~~~~~~~~~~~~~ Since EasyBuild v2.0, the unit test suites are fully isolated from any (system- or user-level) EasyBuild configuration which is in place in the environment where the tests are being run. The easyblocks and easyconfigs unit test suite are oblivious to any defined configuration options. For the EasyBuild framework unit tests, all configuration files and ``EASYBUILD_`` -prefixed environment variables are ignored (see also :ref: `configuration_types:` ). To enable running the EasyBuild framework unit test suite under a specific configuration that differs from the default, environment variables can be defined for each of the configuration options supported by EasyBuild. Before starting a set of EasyBuild framework tests, all defined environment variables for which the name is prefixed by ``TEST_EASYBUILD_`` will be injected into the test environment as environment variables prefixed with ``EASYBUILD_`` instead. Thus, to set a particular configuration option ``--foo`` , you should define the environment variable ``$TEST_EASYBUILD_FOO`` . .. _unit_tests_modules_tool: Modules tool to use for running tests ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ One particular configuration option worth mentioning explicitly is the modules tool that is to be used by the EasyBuild framework, which is by default the traditional Tcl/C environment modules, referred to as ``EnvironmentModulesC`` in EasyBuild configuration terms (see ``eb --help`` and ``eb --avail-modules-tools`` ). To run the EasyBuild framework unit tests with a particular modules tool, simply define the ``$TEST_EASYBUILD_MODULES_TOOL`` environment variable with the corresponding value. For example :: export TEST_EASYBUILD_MODULES_TOOL=Lmod Just like for EasyBuild itself, the EasyBuild framework unit test suite expects that the modules tool binary/script ( ``modulecmd`` , ``modulecmd.tcl`` or ``lmod`` ) is available via ``$PATH`` , see :ref: `required_modules_tool` . .. _unit_tests_github_token: Installing a GitHub token for the unit tests ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Some of the EasyBuild framework unit tests require that a GitHub token is in place for the ``easybuild_test`` user, in a non-encrypted keyring (so it can be obtained without having to provide a password). This can be done as follows (copy-paste the GitHub token at the ``Password:`` prompt) :: $ python >>> import getpass, keyring >>> keyring.set_keyring(keyring.backends.file.PlaintextKeyring()) >>> keyring.set_password('github_token', 'easybuild_test', getpass.getpass()) Password: >>> exit() More details about obtaining and installing a GitHub token in your keyring are available at https://github.com/easybuilders/easybuild/wiki/Review-process-for-contributions#setting-things-up. .. _unit_tests_running: Running ~~~~~~~ To run a full unit test suite, simply run the respective ``suite`` Python module. * EasyBuild framework: ``python -m test.framework.suite`` * easyblocks: ``python -m test.easyblocks.suite`` * easyconfigs: ``python -m test.easyconfigs.suite`` For the EasyBuild framework unit tests, each of the test subgroups can be run separately via a dedicated Python module other than ``suite`` , to focus on testing a particular aspect. See https://github.com/easybuilders/easybuild-framework/tree/main/test/framework for an overview of the available Python modules corresponding to subgroups of tests (note: ``__init__.py`` and ``utilities.py`` are *not* such modules). For example, to run the full EasyBuild framework unit test suite using Lmod as a modules tool :: $ export TEST_EASYBUILD_MODULES_TOOL=Lmod $ python -m test.framework.suite To only run the subgroup of tests for ``filetools`` :: $ python -m test.framework.filetools Since EasyBuild v2.8.2, tests can be *filtered* by name. Simply add the string to filter with to the test command. For example, to run only the tests containing the word ``load`` in the subgroup ``modules`` , run :: $ python -m test.framework.modules load Filtered ModulesTest tests using 'load', retained 2/19 tests: test_load, test_load_in_hierarchy .. ---------------------------------------------------------------------- Ran 2 tests in 2.688s OK This works with as many filter words as you want to use. For example, to run every test method in ``modules`` containing the words ``load`` or ``bash`` : :: $ python -m test.framework.modules load bash .. _unit_tests_results: Results ~~~~~~~ The test results will be printed as the unit test suite progresses, potentially producing a lot of information for failing tests to help determine the cause of the failure. It may thus be useful to capture the output for later inspection, for example :: python -m test.framework.suite 2>&1 | tee eb_test.log .. note :: Some tests will be skipped deliberately, because of missing optional dependencies or other provisions, for example a GitHub token. The output of the unit tests will clearly indicate which tests were skipped. .. _unit_tests_examples: Examples ^^^^^^^^ A successful run of the EasyBuild framework test suite, without skipped tests :: $ python -m test.framework.suite Running tests... ---------------------------------------------------------------------- .......................................................................................................................................................................................................................................................... ---------------------------------------------------------------------- Ran 250 tests in 1404.897s OK A run with a couple of deliberately skipped tests and a single failed test (denoted by ``F`` ), along with the corresponding traceback :: $ python -m test.framework.suite Running tests... ---------------------------------------------------------------------- ................Skipping test_from_pr, no GitHub token available? .Skipping test_from_pr, no GitHub token available? ......F..............(skipping GitRepository test) ..(skipping SvnRepository test) ..................................................................................................................Skipping test_fetch_easyconfigs_from_pr, no GitHub token available? .Skipping test_read, no GitHub token available? .Skipping test_read_api, no GitHub token available? .Skipping test_walk, no GitHub token available? ............................................................................................. ====================================================================== FAIL: Test listing easyblock hierarchy. ---------------------------------------------------------------------- Traceback (most recent call last): File \"/tmp/example/easybuild-framework/test/framework/options.py\", line 544, in test_list_easyblocks self.assertTrue(re.search(pat, outtxt), \"Pattern '%s' is found in output of --list-easyblocks: %s\" % (pat, outtxt)) AssertionError: Pattern 'EasyBlock\\n' is found in output of --list-easyblocks: ---------------------------------------------------------------------- Ran 250 tests in 2641.200s FAILED (failures=1) ERROR: Not all tests were successful. Log available at /tmp/example/easybuild-dy2ZTx/easybuild-tests-l0doQ2.log","title":"Unit tests"},{"location":"unit-tests/#unit-tests","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Unit-tests.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Unit-tests.rst in easybuilders/easybuild repo target: docs/unit-tests.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _unit_tests: Unit tests ========== Since EasyBuild v1.0, an extensive suite of unit tests has been implemented. The unit tests have become an indispensable factor in keeping EasyBuild stable and backward-compatible during development. We refer to the available tests as unit tests, even though they may not be *unit* tests in the strict sense of the word. Some tests are actually end-to-end tests or integration tests, see also http://en.wikipedia.org/wiki/Software_testing#Testing_levels. Following the test-driven development paradigm, additional unit tests are implemented when new features are added or when bugs are uncovered (and fixed). .. _unit_tests_what: What the unit tests are *not* ----------------------------- Each of the EasyBuild unit tests aim to test a specific characteristic of EasyBuild, e.g., a configuration option, a particular function or method in the EasyBuild framework, some specific feature, how EasyBuild handles a particular type of input, etc. The unit tests do *not* test the build and installation process of particular supported software packages (other than a handful of toy ones included in the tests themselves), let alone test the software installations obtained using EasyBuild themselves. Each stable EasyBuild release is subjected to a (time- and resource-consuming) *regression test* , however, which is out of scope here. .. _unit_tests_suites: Available unit test suites -------------------------- Three different unit test suites are available for EasyBuild, each of which tied to one of the EasyBuild code repositories on GitHub: *EasyBuild framework* , *easyblocks* , *easyconfigs* . .. _unit_tests_framework: EasyBuild framework unit tests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The unit test suite for the EasyBuild framework is by far the most extensive one, in terms of code size, coverage and the amount of effort that is put into it. These tests probe the functionality provided by the EasyBuild framework, ranging from standard operation (building and installing software, and generating module files) to specific configuration options, selected functional aspects, optional features and edge cases. At the time of writing (EasyBuild v2.0), more than 250 tests were implemented, organised in 28 subgroups. Running the full EasyBuild framework unit test suite takes about 15-40 minutes, depending on your system resources and testing configuration (see for example https://jenkins1.ugent.be/view/EasyBuild/). .. _unit_tests_easyblocks: easyblocks unit tests ~~~~~~~~~~~~~~~~~~~~~ The easyblocks unit test suite consists of a coupe of light-weight tests that are run per easyblock: * initialising the easyblock, to check for Python syntax errors and faulty imports * checking for the use of deprecated (or no longer supported) functionality Running the full easyblocks unit test suite takes less than one minute. .. _unit_tests_easyconfigs: easyconfigs unit tests ~~~~~~~~~~~~~~~~~~~~~~ The easyconfigs unit test suite consists a couple of tests for each of the available easyconfig files, followed by two large-scale overall tests. For each of the available easyconfig files, the following aspects are tested: * parsing the easyconfig file, to make sure no syntax errors are present * verifying that the filename matches the contents of the easyconfig file (software name/version, version suffix and toolchain name/version) * creating an ``EasyBlock`` instance using the parsed easyconfig, to check whether mandatory easyconfig parameters are defined * ensuring that all required patch files are available (right next to the easyconfig file) * making sure that the specified sanity check paths adhere to the requirements, i.e. only (and both) the ``files`` / ``dirs`` keys are listed, with the value for either one being non-empty * checking for the use of deprecated (or no longer supported) functionality * verifying whether ``eb --check-style`` on the easyconfig file passes * ensuring SHA256 checksums are included in new or changed easyconfig files If these tests pass for each and every available easyconfig file, two additional overall tests are run, i.e.: * ensuring that an easyconfig file is available for each specified dependency * checking whether any version conflicts occur in the dependency graph for each easyconfig file Running the full easyconfigs unit test suite should only take a couple of minutes. .. _unit_tests_applications: Applications ------------ The unit test suites are automatically triggered by `Jenkins <https://jenkins1.ugent.be> `_ for: * each pull request (update), see https://jenkins1.ugent.be/view/pull-request-builder/ * each (set of) change(s) that is merged in (usually via a pull request) The status of the different unit test suites is tracked separately for the ``main`` and ``develop`` branches of the EasyBuild code repositories: * ``main`` (stable, latest EasyBuild release): https://jenkins1.ugent.be/view/EasyBuild/ * ``develop`` (development, potentially unstable): https://jenkins1.ugent.be/view/EasyBuild%20(develop)/ We strictly adher to the policy of only merging pull requests for which the corresponding (latest) run of the *full* unit test suite passes successfully. .. _unit_tests_usage: Usage ----- Using the unit tests is deliberately kept very simple. .. _unit_tests_config: Configuration ~~~~~~~~~~~~~ Since EasyBuild v2.0, the unit test suites are fully isolated from any (system- or user-level) EasyBuild configuration which is in place in the environment where the tests are being run. The easyblocks and easyconfigs unit test suite are oblivious to any defined configuration options. For the EasyBuild framework unit tests, all configuration files and ``EASYBUILD_`` -prefixed environment variables are ignored (see also :ref: `configuration_types:` ). To enable running the EasyBuild framework unit test suite under a specific configuration that differs from the default, environment variables can be defined for each of the configuration options supported by EasyBuild. Before starting a set of EasyBuild framework tests, all defined environment variables for which the name is prefixed by ``TEST_EASYBUILD_`` will be injected into the test environment as environment variables prefixed with ``EASYBUILD_`` instead. Thus, to set a particular configuration option ``--foo`` , you should define the environment variable ``$TEST_EASYBUILD_FOO`` . .. _unit_tests_modules_tool: Modules tool to use for running tests ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ One particular configuration option worth mentioning explicitly is the modules tool that is to be used by the EasyBuild framework, which is by default the traditional Tcl/C environment modules, referred to as ``EnvironmentModulesC`` in EasyBuild configuration terms (see ``eb --help`` and ``eb --avail-modules-tools`` ). To run the EasyBuild framework unit tests with a particular modules tool, simply define the ``$TEST_EASYBUILD_MODULES_TOOL`` environment variable with the corresponding value. For example :: export TEST_EASYBUILD_MODULES_TOOL=Lmod Just like for EasyBuild itself, the EasyBuild framework unit test suite expects that the modules tool binary/script ( ``modulecmd`` , ``modulecmd.tcl`` or ``lmod`` ) is available via ``$PATH`` , see :ref: `required_modules_tool` . .. _unit_tests_github_token: Installing a GitHub token for the unit tests ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Some of the EasyBuild framework unit tests require that a GitHub token is in place for the ``easybuild_test`` user, in a non-encrypted keyring (so it can be obtained without having to provide a password). This can be done as follows (copy-paste the GitHub token at the ``Password:`` prompt) :: $ python >>> import getpass, keyring >>> keyring.set_keyring(keyring.backends.file.PlaintextKeyring()) >>> keyring.set_password('github_token', 'easybuild_test', getpass.getpass()) Password: >>> exit() More details about obtaining and installing a GitHub token in your keyring are available at https://github.com/easybuilders/easybuild/wiki/Review-process-for-contributions#setting-things-up. .. _unit_tests_running: Running ~~~~~~~ To run a full unit test suite, simply run the respective ``suite`` Python module. * EasyBuild framework: ``python -m test.framework.suite`` * easyblocks: ``python -m test.easyblocks.suite`` * easyconfigs: ``python -m test.easyconfigs.suite`` For the EasyBuild framework unit tests, each of the test subgroups can be run separately via a dedicated Python module other than ``suite`` , to focus on testing a particular aspect. See https://github.com/easybuilders/easybuild-framework/tree/main/test/framework for an overview of the available Python modules corresponding to subgroups of tests (note: ``__init__.py`` and ``utilities.py`` are *not* such modules). For example, to run the full EasyBuild framework unit test suite using Lmod as a modules tool :: $ export TEST_EASYBUILD_MODULES_TOOL=Lmod $ python -m test.framework.suite To only run the subgroup of tests for ``filetools`` :: $ python -m test.framework.filetools Since EasyBuild v2.8.2, tests can be *filtered* by name. Simply add the string to filter with to the test command. For example, to run only the tests containing the word ``load`` in the subgroup ``modules`` , run :: $ python -m test.framework.modules load Filtered ModulesTest tests using 'load', retained 2/19 tests: test_load, test_load_in_hierarchy .. ---------------------------------------------------------------------- Ran 2 tests in 2.688s OK This works with as many filter words as you want to use. For example, to run every test method in ``modules`` containing the words ``load`` or ``bash`` : :: $ python -m test.framework.modules load bash .. _unit_tests_results: Results ~~~~~~~ The test results will be printed as the unit test suite progresses, potentially producing a lot of information for failing tests to help determine the cause of the failure. It may thus be useful to capture the output for later inspection, for example :: python -m test.framework.suite 2>&1 | tee eb_test.log .. note :: Some tests will be skipped deliberately, because of missing optional dependencies or other provisions, for example a GitHub token. The output of the unit tests will clearly indicate which tests were skipped. .. _unit_tests_examples: Examples ^^^^^^^^ A successful run of the EasyBuild framework test suite, without skipped tests :: $ python -m test.framework.suite Running tests... ---------------------------------------------------------------------- .......................................................................................................................................................................................................................................................... ---------------------------------------------------------------------- Ran 250 tests in 1404.897s OK A run with a couple of deliberately skipped tests and a single failed test (denoted by ``F`` ), along with the corresponding traceback :: $ python -m test.framework.suite Running tests... ---------------------------------------------------------------------- ................Skipping test_from_pr, no GitHub token available? .Skipping test_from_pr, no GitHub token available? ......F..............(skipping GitRepository test) ..(skipping SvnRepository test) ..................................................................................................................Skipping test_fetch_easyconfigs_from_pr, no GitHub token available? .Skipping test_read, no GitHub token available? .Skipping test_read_api, no GitHub token available? .Skipping test_walk, no GitHub token available? ............................................................................................. ====================================================================== FAIL: Test listing easyblock hierarchy. ---------------------------------------------------------------------- Traceback (most recent call last): File \"/tmp/example/easybuild-framework/test/framework/options.py\", line 544, in test_list_easyblocks self.assertTrue(re.search(pat, outtxt), \"Pattern '%s' is found in output of --list-easyblocks: %s\" % (pat, outtxt)) AssertionError: Pattern 'EasyBlock\\n' is found in output of --list-easyblocks: ---------------------------------------------------------------------- Ran 250 tests in 2641.200s FAILED (failures=1) ERROR: Not all tests were successful. Log available at /tmp/example/easybuild-dy2ZTx/easybuild-tests-l0doQ2.log","title":"Unit tests"},{"location":"useful-links/","text":"Useful links \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Useful_links.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Useful_links.rst in easybuilders/easybuild repo target: docs/useful-links.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _useful_links: Useful links ============ Tools used to convert from other wiki formats and prepare .rst when in pre-production mode: * http://johnmacfarlane.net/pandoc/try/?text=%0A&from=markdown_github&to=rst * http://rst.ninjs.org Sphinx and Read the Docs reference documents online =================================================== * https://github.com/rtfd/readthedocs.org * http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html * http://matplotlib.org/sampledoc/cheatsheet.html * http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html * http://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html * http://docutils.sourceforge.net/docs/user/rst/quickref.html * http://nipy.org/devel/guidelines/sphinx_helpers.html * https://pythonhosted.org/an_example_pypi_project/sphinx.html * http://openmdao.org/docs/documenting/sphinx.html Third party Sphinx examples, themes and possible extensions =========================================================== * http://sphinx.readthedocs.org/en/latest/examples.html * http://django.readthedocs.org/en/latest/ * http://docs.cython.org/index.html * http://docs.writethedocs.org/tools/sphinx-themes/ * http://ryan-roemer.github.io/sphinx-bootstrap-theme/examples.html * http://django-profiletools.readthedocs.org/en/latest/ * http://pythonhosted.org/korean/ * https://pythonhosted.org/cloud_sptheme/cloud_theme.html#features * http://openmdao.org/docs/documenting/sphinx.html * http://sphinx-doc.org/genindex.html","title":"Useful links"},{"location":"useful-links/#useful-links","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Useful_links.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Useful_links.rst in easybuilders/easybuild repo target: docs/useful-links.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _useful_links: Useful links ============ Tools used to convert from other wiki formats and prepare .rst when in pre-production mode: * http://johnmacfarlane.net/pandoc/try/?text=%0A&from=markdown_github&to=rst * http://rst.ninjs.org Sphinx and Read the Docs reference documents online =================================================== * https://github.com/rtfd/readthedocs.org * http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html * http://matplotlib.org/sampledoc/cheatsheet.html * http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html * http://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html * http://docutils.sourceforge.net/docs/user/rst/quickref.html * http://nipy.org/devel/guidelines/sphinx_helpers.html * https://pythonhosted.org/an_example_pypi_project/sphinx.html * http://openmdao.org/docs/documenting/sphinx.html Third party Sphinx examples, themes and possible extensions =========================================================== * http://sphinx.readthedocs.org/en/latest/examples.html * http://django.readthedocs.org/en/latest/ * http://docs.cython.org/index.html * http://docs.writethedocs.org/tools/sphinx-themes/ * http://ryan-roemer.github.io/sphinx-bootstrap-theme/examples.html * http://django-profiletools.readthedocs.org/en/latest/ * http://pythonhosted.org/korean/ * https://pythonhosted.org/cloud_sptheme/cloud_theme.html#features * http://openmdao.org/docs/documenting/sphinx.html * http://sphinx-doc.org/genindex.html","title":"Useful links"},{"location":"useful-scripts/","text":"Useful scripts \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Useful-scripts.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Useful-scripts.rst in easybuilders/easybuild repo target: docs/useful-scripts.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _useful_scripts: Useful scripts ============== A couple of useful stand-alone scripts are provided along with the EasyBuild framework. The latest stable version of these scripts is available in the ``easybuild-framework`` GitHub repository at https://github.com/easybuilders/easybuild-framework/tree/main/easybuild/scripts. This documentation provides some information on how to use these scripts. .. _fix_broken_easyconfigs_script: ``fix_broken_easyconfigs.py`` ----------------------------- *download from:* https://github.com/easybuilders/easybuild-framework/blob/main/easybuild/scripts/fix_broken_easyconfigs.py To fix easyconfig files that are broken due to relying on functionality that is no longer supported in EasyBuild v2.x, the ``fix_broken_easyconfigs.py`` script can be used. This script rewrites easyconfig files that are broken because they still: * rely on the automagic fallback to the generic ``ConfigureMake`` easyblock (see :ref: `depr_ConfigureMake_fallback_eb1` ) * define the ``premakeopts`` and/or ``makeopts`` eaysconfig parameters (see :ref: `depr_premakeopts_makeopts_eb1` ) * use the ``shared_lib_ext`` 'constant' (see :ref: `depr_shared_lib_ext_eb1` ) * incorrectly use the ``license`` easyconfig parameter (see :ref: `depr_license_eb1` ) The script accepts a list of easyconfig files or directories containing easyconfig files ( ``.eb`` ) as arguments, and will consider all easyconfig files it can find. Only easyconfig files that are considered broken (according to one or more of the aspects listed above) are patched; other easyconfigs will be left untouched. To determine whether ``easyblock = 'ConfigureMake'`` should be added in an easyconfig file that does not include any ``easyblock`` specification yet, the easyblocks available in the active Python search path (i.e., the ones listed in the output of ``eb --list-easyblocks`` , see also :ref: `list_easyblocks` ) are taken into account. A backup copy is created for each easyconfig file that is being patched. Example usage :: $ python easybuild/scripts/fix_broken_easyconfigs.py broken.eb myeasyconfigs GCC-4.9.2.eb == 2015-03-05 17:02:22,438 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO Processing 3 easyconfigs == 2015-03-05 17:02:22,454 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO Backed up broken.eb to broken.eb.bk == 2015-03-05 17:02:22,454 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO broken.eb: fixed == 2015-03-05 17:02:22,458 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO /home/example/myeasyconfigs/HPL-2.1-intel-2015a.eb: nothing to fix == 2015-03-05 17:02:22,461 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO GCC-4.9.2.eb: nothing to fix This results in ``broken.eb`` being rewritten/fixed, after creating a backup copy ``broken.eb.bk`` :: $ diff -u broken.eb.bk broken.eb --- broken.eb.bk 2015-02-25 14:45:52.000000000 +0100 +++ broken.eb 2015-03-05 16:51:44.000000000 +0100 @@ -1,4 +1,6 @@ # licenseheader +easyblock = 'ConfigureMake' + name = 'foo' version = '1.2.3' @@ -7,7 +9,7 @@ toolchain = {'name': 'bar', 'version': '3.2.1'} -premakeopts = 'FOO=libfoo.%s' % shared_lib_ext -makeopts = 'CC=gcc' +prebuildopts = 'FOO=libfoo.%s' % SHLIB_EXT +buildopts = 'CC=gcc' -license = 'foo.lic' +license_file = 'foo.lic' .. _install_EasyBuild_develop_script: ``install-EasyBuild-develop.sh`` -------------------------------- *download from:* https://github.com/easybuilders/easybuild-framework/blob/main/easybuild/scripts/install-EasyBuild-develop.sh A script to set up an EasyBuild development environment. For more information, see :ref: `install_latest_develop_using_script` . .. _clean_gists_script: ``clean_gists.py`` -------------------------------- *download from:* https://github.com/easybuilders/easybuild-framework/blob/main/easybuild/scripts/clean_gists.py When using ``--from-pr`` in combination with ``-upload-test-report`` (see https://github.com/easybuilders/easybuild/wiki/Review-process-for-contributions#automated-testing-of-easyconfigs-pull-requests), you can end up with a bunch of gists in your GitHub account containing test reports, that may no longer be relevant. To help with that the ``clean_gists.py`` script is available, to clean up gists containing test reports: * ``clean_gists.py -p`` : delete all gists from closed pull requests (default action if no other action is specified) * ``clean_gists.py -a`` : delete all gists generated by Easybuild * ``clean_gists.py -o`` : delete all gists without a matching pull request (created by using ``-upload-test-report`` without ``--from-pr`` ) By default, the script will use the same GitHub account that Easybuild uses (see ``--github-user`` ); to specify a different GitHub account, use ``-g`` . The script expects that a valid GitHub token for the used GitHub account username is available, see :ref: `github_token` .","title":"Useful scripts"},{"location":"useful-scripts/#useful-scripts","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Useful-scripts.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Useful-scripts.rst in easybuilders/easybuild repo target: docs/useful-scripts.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _useful_scripts: Useful scripts ============== A couple of useful stand-alone scripts are provided along with the EasyBuild framework. The latest stable version of these scripts is available in the ``easybuild-framework`` GitHub repository at https://github.com/easybuilders/easybuild-framework/tree/main/easybuild/scripts. This documentation provides some information on how to use these scripts. .. _fix_broken_easyconfigs_script: ``fix_broken_easyconfigs.py`` ----------------------------- *download from:* https://github.com/easybuilders/easybuild-framework/blob/main/easybuild/scripts/fix_broken_easyconfigs.py To fix easyconfig files that are broken due to relying on functionality that is no longer supported in EasyBuild v2.x, the ``fix_broken_easyconfigs.py`` script can be used. This script rewrites easyconfig files that are broken because they still: * rely on the automagic fallback to the generic ``ConfigureMake`` easyblock (see :ref: `depr_ConfigureMake_fallback_eb1` ) * define the ``premakeopts`` and/or ``makeopts`` eaysconfig parameters (see :ref: `depr_premakeopts_makeopts_eb1` ) * use the ``shared_lib_ext`` 'constant' (see :ref: `depr_shared_lib_ext_eb1` ) * incorrectly use the ``license`` easyconfig parameter (see :ref: `depr_license_eb1` ) The script accepts a list of easyconfig files or directories containing easyconfig files ( ``.eb`` ) as arguments, and will consider all easyconfig files it can find. Only easyconfig files that are considered broken (according to one or more of the aspects listed above) are patched; other easyconfigs will be left untouched. To determine whether ``easyblock = 'ConfigureMake'`` should be added in an easyconfig file that does not include any ``easyblock`` specification yet, the easyblocks available in the active Python search path (i.e., the ones listed in the output of ``eb --list-easyblocks`` , see also :ref: `list_easyblocks` ) are taken into account. A backup copy is created for each easyconfig file that is being patched. Example usage :: $ python easybuild/scripts/fix_broken_easyconfigs.py broken.eb myeasyconfigs GCC-4.9.2.eb == 2015-03-05 17:02:22,438 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO Processing 3 easyconfigs == 2015-03-05 17:02:22,454 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO Backed up broken.eb to broken.eb.bk == 2015-03-05 17:02:22,454 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO broken.eb: fixed == 2015-03-05 17:02:22,458 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO /home/example/myeasyconfigs/HPL-2.1-intel-2015a.eb: nothing to fix == 2015-03-05 17:02:22,461 fix_broken_easyconfigs.FIX_BROKEN_EASYCONFIGS INFO GCC-4.9.2.eb: nothing to fix This results in ``broken.eb`` being rewritten/fixed, after creating a backup copy ``broken.eb.bk`` :: $ diff -u broken.eb.bk broken.eb --- broken.eb.bk 2015-02-25 14:45:52.000000000 +0100 +++ broken.eb 2015-03-05 16:51:44.000000000 +0100 @@ -1,4 +1,6 @@ # licenseheader +easyblock = 'ConfigureMake' + name = 'foo' version = '1.2.3' @@ -7,7 +9,7 @@ toolchain = {'name': 'bar', 'version': '3.2.1'} -premakeopts = 'FOO=libfoo.%s' % shared_lib_ext -makeopts = 'CC=gcc' +prebuildopts = 'FOO=libfoo.%s' % SHLIB_EXT +buildopts = 'CC=gcc' -license = 'foo.lic' +license_file = 'foo.lic' .. _install_EasyBuild_develop_script: ``install-EasyBuild-develop.sh`` -------------------------------- *download from:* https://github.com/easybuilders/easybuild-framework/blob/main/easybuild/scripts/install-EasyBuild-develop.sh A script to set up an EasyBuild development environment. For more information, see :ref: `install_latest_develop_using_script` . .. _clean_gists_script: ``clean_gists.py`` -------------------------------- *download from:* https://github.com/easybuilders/easybuild-framework/blob/main/easybuild/scripts/clean_gists.py When using ``--from-pr`` in combination with ``-upload-test-report`` (see https://github.com/easybuilders/easybuild/wiki/Review-process-for-contributions#automated-testing-of-easyconfigs-pull-requests), you can end up with a bunch of gists in your GitHub account containing test reports, that may no longer be relevant. To help with that the ``clean_gists.py`` script is available, to clean up gists containing test reports: * ``clean_gists.py -p`` : delete all gists from closed pull requests (default action if no other action is specified) * ``clean_gists.py -a`` : delete all gists generated by Easybuild * ``clean_gists.py -o`` : delete all gists without a matching pull request (created by using ``-upload-test-report`` without ``--from-pr`` ) By default, the script will use the same GitHub account that Easybuild uses (see ``--github-user`` ); to specify a different GitHub account, use ``-g`` . The script expects that a valid GitHub token for the used GitHub account username is available, see :ref: `github_token` .","title":"Useful scripts"},{"location":"using-easybuild/","text":"Using the EasyBuild command line \u00b6 All available easyconfig parameters \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Using_the_EasyBuild_command_line.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Using_the_EasyBuild_command_line.rst in easybuilders/easybuild repo target: docs/using-easybuild.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _using_the_easybuild_command_line: Using the EasyBuild command line ================================ Basic usage of EasyBuild is described in the following sections, covering the most important range of topics if you are new to EasyBuild. ``eb`` is EasyBuild\u2019s main command line tool, to interact with the EasyBuild framework and hereby the most common command line options are being documented. .. _specifying_easyconfigs: Specifying builds ----------------- To instruct EasyBuild which software packages it should build/install and which build parameters it should use, one or more *easyconfig files* (see :ref: `easyconfig_files` ) must be specified. This can be done in a number of ways: * :ref: `specifying_easyconfigs_single` * :ref: `specifying_easyconfigs_command_line` * :ref: `specifying_easyconfigs_set_of_easyconfigs` * using ``eb --from-pr`` (see :ref: `github_from_pr` ) Whenever EasyBuild searches for *explicitly specified* easyconfig files, it considers a couple of locations, i.e. (in order of preference): (i) the local working directory (ii) the robot search path (see :ref: `robot_search_path` ) (iii) the path to easyconfig files that are part of the active EasyBuild installation (which is included in the default robot search path) These locations are only considered for easyconfig files that are specified only by filename or using a relative path, *not* for easyconfig files that are specified via an absolute path. The dependencies are resolved using the robot search path (see :ref: `robot_search_path` ). .. note :: For easyconfig files specified on the ``eb`` command line, the *full* robot search path is only considered since EasyBuild v2.0.0. Earlier versions only considered the local working directory and the easyconfig files that are part of the active EasyBuild installation for *explicitly specified* easyconfig files. .. _specifying_easyconfigs_single: By providing a single easyconfig file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The most basic usage is to simply provide the name of an easyconfig file to the ``eb`` command. EasyBuild will (try and) locate the easyconfig file, and perform the installation as specified by that easyconfig file. For example, to build and install ``HPL`` using the ``goolf`` toolchain :: $ eb HPL-2.0-goolf-1.4.10.eb --robot [...] == building and installing GCC/4.7.2... [...] == building and installing goolf/1.4.10... [...] == building and installing HPL/2.0-goolf-1.4.10... == fetching files... == creating build dir, resetting environment... == unpacking... == patching... == preparing... == configuring... == building... == testing... == installing... == taking care of extensions... == packaging... == postprocessing... == sanity checking... == cleaning up... == creating module... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/.local/easybuild/software/HPL/2.0-goolf-1.4.10/easybuild/easybuild-HPL-2.0-20141031.223237.log == Build succeeded for 9 out of 9 == temporary log file /tmp/easybuild-UOEWix/easybuild-NiswcV.log has been removed. == temporary directory /tmp/easybuild-UOEWix has been removed. Then, we can actually load the freshly installed HPL module :: $ module load HPL/2.0-goolf-1.4.10 $ which xhpl /home/example/.local/easybuild/software/HPL/2.0-goolf-1.4.10/bin/xhpl All easyconfig file names' suffixes are ``.eb`` and follow format :: ``<name>-<version>-<toolchain>-<versionsuffix>`` This is a crucial design aspect, since the dependency resolution mechanism (see :ref: `use_robot` ) relies upon this convention. .. tip :: You may wish to modify the installation prefix (e.g., using ``--prefix`` or by defining ``$EASYBUILD_PREFIX`` ), in order to redefine the build/install/source path prefix to be used; default value is: ``$HOME/.local/easybuild`` . .. _specifying_easyconfigs_command_line: Via command line options ~~~~~~~~~~~~~~~~~~~~~~~~ An alternative approach is to only use command line options to specify which software to build. Refer to the ``Software search and build options`` section in the ``eb --help`` output for an overview of the available command line options for this purpose (cfr. :ref: `basic_usage_help` ). Here is how to build and install last version of HPCG (that EasyBuild is aware of) using the ``goolf/1.4.10`` toolchain :: $ eb --software-name=HPCG --toolchain=goolf,1.4.10 [...] == building and installing HPCG/2.1-goolf-1.4.10... [...] == COMPLETED: Installation ended successfully [...] At this point, a module ``HPCG/2.1-goolf-1.4.10`` should have been installed. .. _specifying_easyconfigs_set_of_easyconfigs: By providing a set of easyconfig files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Multiple easyconfig files can be provided as well, either directly or by specifying a directory that contains easyconfig files. For example, to build and install both HPCG and GCC with a single command, simply list the easyconfigs for both on the ``eb`` command line (note that HPCG is not being reinstalled, since a matching module is already available) :: $ eb HPCG-2.1-goolf-1.4.10.eb GCC-4.8.3.eb [...] == HPCG/2.1-goolf-1.4.10 is already installed (module found), skipping [...] == building and installing GCC/4.8.3... [...] == Build succeeded for 1 out of 1 [...] When one or more directories are provided, EasyBuild will (recursively) traverse them to find easyconfig files. For example: :: $ find set_of_easyconfigs/ -type f set_of_easyconfigs/GCC-4.8.3.eb set_of_easyconfigs/foo.txt set_of_easyconfigs/tools/HPCG-2.1-goolf-1.4.10.eb :: $ eb set_of_easyconfigs/ == temporary log file in case of crash /tmp/easybuild-1yxCvv/easybuild-NeNmZr.log == HPCG/2.1-goolf-1.4.10 is already installed (module found), skipping == GCC/4.8.3 is already installed (module found), skipping == No easyconfigs left to be built. == Build succeeded for 0 out of 0 == temporary log file /tmp/easybuild-1yxCvv/easybuild-NeNmZr.log has been removed. == temporary directory /tmp/easybuild-1yxCvv has been removed. .. note :: EasyBuild will only pick up the files which end with ``.eb`` ; anything else will be ignored. .. tip :: Calling EasyBuild is designed as an `idempotent` operation; if a module is available that matches with an provided easyconfig file, the installation will simply be skipped. Commonly used command line options ---------------------------------- Command line help, ``--help`` / ``-H`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Detailed information about the usage of the eb command is available via the ``--help`` , ``-H`` , ``-h`` help options. Refer to page :ref: `basic_usage_help` for more detailed information. .. note :: ``--help`` / ``-H`` spit out the long help info (i.e. including long option names), ``-h`` only includes short option names. .. tip :: This is the best way to query for certain information, esp. recent features, since this is in sync with the actual EasyBuild version being used. Report version, ``--version`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can query which EasyBuild version you are using with ``--version`` :: $ eb --version This is EasyBuild 1.15.2 (framework: 1.15.2, easyblocks: 1.15.2) on host example.local. .. tip :: Asking EasyBuild to print own its version is a quick way to ensure that ``$PYTHONPATH`` is set up correctly, so that the entire EasyBuild installation (framework and easyblocks) is available. .. _list_toolchains: List of known toolchains, ``--list-toolchains`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For an overview of known toolchains, use ``eb --list-toolchains`` . Toolchains have brief mnemonic names, for example: * ``goolf`` stands for ``GCC, OpenMPI, OpenBLAS/LAPACK, FFTW and ScaLAPACK`` * ``iimpi`` stands for ``icc/ifort, impi`` * ``cgmvolf`` stands for ``Clang/GCC, MVAPICH2, OpenBLAS/LAPACK, FFTW`` The complete table of available toolchains is available at :ref: `toolchains_table` . .. _list_easyblocks: List of available easyblocks, ``--list-easyblocks`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can obtain a list of available :ref: `easyblocks` via ``--list-easyblocks`` . The ``--list-easyblocks`` command line option prints the easyblocks in a hierarchical way, showing the inheritance patterns, with the \"base\" easyblock class ``EasyBlock`` on top. Software-specific easyblocks have a name that starts with ``EB_`` ; the ones that do not are generic easyblocks. (cfr. :ref: `easyblocks` for the distinction between both types of easyblocks). For example, a list of easyblocks can be obtained with :: $ eb --list-easyblocks To see more details about the available easyblocks, i.e., in which Python module the class is defined, and where it is located, use ``--list-easyblocks=detailed`` . Refer to page :ref: `basic_usage_easyblocks` for more information. .. _avail_easyconfig_params: All available easyconfig parameters, ``--avail-easyconfig-params`` / ``-a`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ EasyBuild provides a significant amount of easyconfig parameters. An overview of all available easyconfig parameters can be obtained via ``eb --avail-easyconfig-params`` , or ``eb -a`` for short. Refer to page :ref: `easyconfig_params` for more information, the possible parameters are a very rich set. Combine -a with ``--easyblock/-e`` to include parameters that are specific to a particular easyblock. For example :: $ eb -a -e EB_WRF If you want to see the full output of running this command, look at :doc: `eb_a_e_EB_WRF` . Enable debug logging, ``--debug`` / ``-d`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use ``eb --debug/-d`` to enable debug logging, to include all details of how EasyBuild performed a build in the log file :: $ eb HPCG-2.1-goolf-1.4.10.eb -d .. tip :: You may enable this by default via adding ``debug = True`` in your EasyBuild configuration file .. note :: Debug log files are significantly larger than non-debug logs, so be aware. .. _rebuild_option: Rebuild installation, ``--rebuild`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use ``eb --rebuild`` to rebuild a given easyconfig/module. .. warning :: Use with care, since the reinstallation of existing modules will be done without requesting confirmation first! .. tip :: Combine ``--rebuild`` with ``--dry-run`` to get a good view on which installations will be rebuilt. (cfr. :ref: `get_an_overview` ) .. note :: To create a backup of existing modules that are regenerated when ``--rebuild`` is used, use ``--backup-modules`` (see also :ref: `backup_modules` ). .. _force_option: Forced reinstallation, ``--force`` / ``-f`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use ``eb --force`` / ``-f`` to force the reinstallation of a given easyconfig/module. The behavior of ``--force`` is the same as ``--rebuild`` and ``--ignore-osdeps`` . .. warning :: Use with care, since the reinstallation of existing modules will be done without requesting confirmation first! .. tip :: Combine ``--force`` with ``--dry-run`` to get a good view on which installations will be forced. (cfr. :ref: `get_an_overview` ) .. note :: To create a backup of existing modules that are regenerated when ``--force`` is used, use ``--backup-modules`` (see also :ref: `backup_modules` ). .. _searching_for_easyconfigs: Searching for easyconfigs, ``--search`` / ``-S`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Searching for available easyconfig files can be done using the ``--search`` (long output) and ``-S`` (short output) command line options. All easyconfig files available in the robot search path are considered (see :ref: `robot_search_path` ), and searching is done `case-insensitive` . For example, to see which easyconfig files are available for the software package named `Mesquite` :: $ eb --search mesquite == temporary log file in case of crash /tmp/eb-_TYdTf/easybuild-iRJ2vb.log == Searching (case-insensitive) for 'mesquite' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs * /Users/kehoste/work/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite/Mesquite-2.3.0-goolf-1.4.10.eb * /Users/kehoste/work/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite/Mesquite-2.3.0-ictce-4.1.13.eb * /Users/kehoste/work/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite/Mesquite-2.3.0-ictce-5.3.0.eb == temporary log file(s) /tmp/eb-_TYdTf/easybuild-iRJ2vb.log* have been removed. == temporary directory /tmp/eb-_TYdTf has been removed. The same query with ``-S`` is more readable, when there is a joint path that can be collapsed to a variable like ``$CFGS1`` :: $ eb -S mesquite == temporary log file in case of crash /tmp/eb-5diJjn/easybuild-nUXlkj.log == Searching (case-insensitive) for 'mesquite' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs CFGS1=/home/example/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite * $CFGS1/Mesquite-2.3.0-goolf-1.4.10.eb * $CFGS1/Mesquite-2.3.0-ictce-4.1.13.eb * $CFGS1/Mesquite-2.3.0-ictce-5.3.0.eb == temporary log file(s) /tmp/eb-5diJjn/easybuild-nUXlkj.log* have been removed. == temporary directory /tmp/eb-5diJjn has been removed. For more specific searching, a regular expression pattern can be supplied (since EasyBuild v2.1.1). For example, to search which easyconfig files are available for GCC v4.6.x, without listing easyconfig files that use GCC v4.6.x as a toolchain :: $ eb -S ^GCC-4.6 == temporary log file in case of crash /tmp/eb-PpwTwm/easybuild-b8yrOG.log == Searching (case-insensitive) for '^GCC-4.6' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs CFGS1=/home/example/easybuild-easyconfigs/easybuild/easyconfigs/g/GCC * $CFGS1/GCC-4.6.3-CLooG-PPL.eb * $CFGS1/GCC-4.6.3.eb * $CFGS1/GCC-4.6.4.eb == temporary log file(s) /tmp/eb-PpwTwm/easybuild-b8yrOG.log* have been removed. == temporary directory /tmp/eb-PpwTwm has been removed. Or, to find all easyconfig files for Python versions 2.7.8 and 2.7.9 that use the ``intel`` toolchain :: $ eb -S '^Python-2.7.[89].*intel' == temporary log file in case of crash /tmp/eb-Dv5LEJ/easybuild-xpGGSF.log == Searching (case-insensitive) for '^Python-2.7.[89].*intel' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs CFGS1=/home/example/easybuild-easyconfigs/easybuild/easyconfigs/p/Python * $CFGS1/Python-2.7.8-intel-2014.06.eb * $CFGS1/Python-2.7.8-intel-2014b.eb * $CFGS1/Python-2.7.8-intel-2015a.eb * $CFGS1/Python-2.7.9-intel-2015a-bare.eb * $CFGS1/Python-2.7.9-intel-2015a.eb == temporary log file(s) /tmp/eb-Dv5LEJ/easybuild-xpGGSF.log* have been removed. == temporary directory /tmp/eb-Dv5LEJ has been removed. .. note :: Prior to EasyBuild v2.1.1, the full path to easyconfig files was considered when matching the search pattern. Starting with EasyBuild v2.1.1, only the filename of the easyconfig file itself is taken into account. .. _use_robot: Enabling dependency resolution, ``--robot`` / ``-r`` and ``--robot-paths`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ EasyBuild supports installing an entire software stack, including the required toolchain if needed, with a single ``eb`` invocation. To enable dependency resolution, use the ``--robot`` command line option (or ``-r`` for short) :: $ eb mpiBLAST-1.6.0-goolf-1.4.10.eb --robot [...] == building and installing GCC/4.7.2... [...] == building and installing hwloc/1.6.2-GCC-4.7.2... [...] == building and installing OpenMPI/1.6.4-GCC-4.7.2... [...] == building and installing gompi/1.4.10... [...] == building and installing OpenBLAS/0.2.6-gompi-1.4.10-LAPACK-3.4.2... [...] == building and installing FFTW/3.3.3-gompi-1.4.10... [...] == building and installing ScaLAPACK/2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2... [...] == building and installing goolf/1.4.10... [...] == building and installing mpiBLAST/1.6.0-goolf-1.4.10... [...] == Build succeeded for 9 out of 9 The dependency resolution mechanism will construct a full dependency graph for the software package(s) being installed, after which a list of dependencies is composed for which no module is available yet. Each of the retained dependencies will then be built and installed, in the required order as indicated by the dependency graph. .. tip :: Using ``--robot`` is particularly useful for software packages that have an extensive list of dependencies, or when reinstalling software using a different compiler toolchain (you can use the ``--try-toolchain`` command line option in combination with ``--robot`` ). .. note :: Unless dependency resolution is enabled, EasyBuid requires that modules are available for every dependency. If ``--robot`` is not used and one or more modules are missing, ``eb`` will exit with an error stating that a module for a particular dependency could not be found. For example :: add_dependencies: no module 'GCC/4.7.2' found for dependency {...} .. _robot_search_path: Searching for easyconfigs: the robot search path ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For each dependency that does not have a matching module installed yet, EasyBuild requires a corresponding easyconfig file. If no such easyconfig file was specified on the ``eb`` command line, the dependency resolution mechanism will try to locate one in the `robot search path` . Searching for easyconfigs is done based on filename (see also :ref: `what_is_an_easyconfig` ), with filenames being derived from the dependency specification (i.e. software name/version, toolchain and version suffix). For each entry in the robot search path, a couple of different filepaths are considered, mostly determined by the software name. For example, when looking for an easyconfig for ``OpenMPI`` version ``1.6.4`` and version suffix ``-test`` with toolchain ``GCC/4.7.2`` , the following filepaths are considered (relative to each entry in the robot search path): * ``OpenMPI/1.6.4-GCC-4.7.2-test.eb`` * ``OpenMPI/OpenMPI-1.6.4-GCC-4.7.2-test.eb`` * ``o/OpenMPI/OpenMPI-1.6.4-GCC-4.7.2-test.eb`` * ``OpenMPI-1.6.4-GCC-4.7.2-test.eb`` .. note :: Sometimes easyconfig files are needed even when the modules for the dependencies are already available, i.e., whenever the information provided by the dependency specification (software name/version, toolchain and version suffix) is not sufficient. This is the case when using ``--dry-run`` to construct the complete dependency graph, or when the active module naming scheme requires some additional information (e.g., the ``moduleclass`` ). .. note :: If EasyBuild is unable to locate required easyconfigs, an appropriate error message will be shown. For example:: Irresolvable dependencies encountered: GCC/4.7.2 or :: Failed to find easyconfig file 'GCC-4.7.2.eb' when determining module name for: {...} Default robot search path +++++++++++++++++++++++++ By default, EasyBuild will only include the collection of easyconfig files that is part of the EasyBuild installation in the robot search path. More specifically, only directories listed in the `Python search path` (partially specified by the ``$PYTHONPATH`` environment variable) that contain a subdirectory named ``easybuild/easyconfigs`` are considered part of the robot search path (in the order they are encountered). .. _controlling_robot_search_path: Controlling the robot search path ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To control the robot search path, you can specify a (colon-separated list of) path(s) to ``--robot`` / ``-r`` and/or ``--robot-paths`` (or, equivalently, ``$EASYBUILD_ROBOT`` and/or ``$EASYBUILD_ROBOT_PATHS`` ) :: eb --robot=$PWD:$HOME ... These two configuration options each serve a particular purpose, and together define the robot search path: * ``--robot`` , ``-r`` : * intended to be used (only) as a command line option to ``eb`` (although it can also be defined through another configuration type) * enables the dependency resolution mechanism (disabled by default) * optionally a list of paths can be specified, which is included *first* in the robot search path * by default, the corresponding list of paths is *empty* * ``--robot-paths`` : * intended to be defined in an EasyBuild configuration file, or via ``$EASYBUILD_ROBOT_PATHS`` * does *not* enable the dependency resolution mechanism * the specified list of paths is included *last* in the robot search path * by default, only the path to the easyconfig files that are part of the EasyBuild installation is listed * **note** : setting this configuration option implies redefining the default robot search path, unless a prepending/appending list of paths is specified, see :ref: `robot_search_path_prepend_append` For both options, the list of paths should be specified as a colon-separated ( ``:`` ) list. By combining ``--robot`` and ``--robot-paths`` using the different configuration types (see also :ref: `configuration_types` ), you have full control over the robot search path: which paths are included, the order of those paths, whether or not the easyconfig files that are part of the EasyBuild installation should be considered, etc. A constant named ``DEFAULT_ROBOT_PATHS`` is available that can be used (only) in EasyBuild configuration files to refer to the default robot search path, i.e. the path to the easyconfigs that are part of the EasyBuild installation. For more information on using constants in EasyBuild configuration files, see :ref: `configuration_file_templates_constants` . .. tip :: Only use ``--robot`` to enable the dependency resolution mechanism; define ``robot-paths`` in your EasyBuild configuration file or via ``$EASYBUILD_ROBOT_PATHS`` to specify which sets of easyconfig files EasyBuild should consider, and in which order. By means of exception, a path can be specified to ``--robot`` to give a specific set of easyconfig files precedence over others, for example when testing modified easyconfig files. .. note :: The paths specified on the configuration type with the highest order of preference *replace* any paths specified otherwise, i.e. values are not retained across configuration types. That is: ``--robot`` *overrides* the value in ``$EASYBUILD_ROBOT`` , ``$EASYBUILD_ROBOT_PATHS`` *overrides* the ``robot-paths`` specification in an EasyBuild configuration file, etc. Of course, the value specified for ``--robot`` does not directly affect the value specified for ``--robot-paths`` , on any configuration level, and vice versa. For more information on the relation between the different configuration types, see :ref: `configuration_types` . .. _robot_search_path_prepend_append: Prepending and/or appending to the default robot search path ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Prepending or appending to the default robot search path is supported via the ``--robot-paths`` configuration option. To *prepend* one or more paths, a list of paths followed by a ' ``:`` ' should be specified. Analogously, to *append* one or more paths, a list of paths preceded by a ' ``:`` ' should be specified. For example: * ``export EASYBUILD_ROBOT_PATHS=/tmp/$USER:`` specifies to prepend ``/tmp/$USER`` to the robot search path * ``--robot-paths :$HOME/eb:$HOME/test`` specifies to append ``$HOME/eb`` and ``$HOME/test`` to the robot search path (in that order) * ``--robot-paths=/tmp/$USER::$HOME/test`` specifies to prepend ``/tmp/$USER`` *and* append ``$HOME/test`` to the robot search path Example use case ++++++++++++++++ For example, say we want to configure EasyBuild to behave as follows w.r.t. the robot search path: * (always) prefer easyconfig files in the archive/repository over the ones that are included in the EasyBuild installation (i) * consider easyconfig files located in the current directory or home directory first (in that order), before any others (ii) Matching setup: * satisfy (i) using ``robot-paths`` in one of the active EasyBuild configuration files (see also :ref: `list_of_configuration_files` ) :: [basic] repositorypath = /home/example/easybuild/easyconfigs_archive robot-paths = %(repositorypath)s:%(DEFAULT_ROBOT_PATHS)s * satisfy (ii) via ``--robot`` on the ``eb`` command line:: eb mpiBLAST-1.6.0-goolf-1.4.10.eb --robot $PWD:$HOME .. _get_an_overview: Getting an overview of planned installations ``--dry-run`` / ``-D`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can do a \"dry-run\" overview by supplying ``-D/--dry-run`` (typically combined with ``--robot`` , in the form of ``-Dr`` ) :: $ eb mpiBLAST-1.6.0-goolf-1.4.10.eb -Dr == temporary log file in case of crash /tmp/easybuild-vyNQhw/easybuild-pO8EJv.log Dry run: printing build status of easyconfigs and dependencies CFGS=/home/example/.local/easybuild/software/EasyBuild/1.15.2/lib/python2.7/site-packages/easybuild_easyconfigs-1.15.2.0-py2.7.egg/easybuild/easyconfigs * [x] $CFGS/g/GCC/GCC-4.7.2.eb (module: GCC/4.7.2) * [x] $CFGS/h/hwloc/hwloc-1.6.2-GCC-4.7.2.eb (module: hwloc/1.6.2-GCC-4.7.2) * [x] $CFGS/o/OpenMPI/OpenMPI-1.6.4-GCC-4.7.2.eb (module: OpenMPI/1.6.4-GCC-4.7.2) * [x] $CFGS/g/gompi/gompi-1.4.10.eb (module: gompi/1.4.10) * [ ] $CFGS/o/OpenBLAS/OpenBLAS-0.2.6-gompi-1.4.10-LAPACK-3.4.2.eb (module: OpenBLAS/0.2.6-gompi-1.4.10-LAPACK-3.4.2) * [ ] $CFGS/f/FFTW/FFTW-3.3.3-gompi-1.4.10.eb (module: FFTW/3.3.3-gompi-1.4.10) * [ ] $CFGS/s/ScaLAPACK/ScaLAPACK-2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2.eb (module: ScaLAPACK/2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2) * [ ] $CFGS/g/goolf/goolf-1.4.10.eb (module: goolf/1.4.10) * [ ] $CFGS/m/mpiBLAST/mpiBLAST-1.6.0-goolf-1.4.10.eb (module: mpiBLAST/1.6.0-goolf-1.4.10) == temporary log file /tmp/easybuild-vyNQhw/easybuild-pO8EJv.log has been removed. == temporary directory /tmp/easybuild-vyNQhw has been removed. Note how the different status symbols denote distinct handling states by EasyBuild: * ``[ ]`` The build is not available, EasyBuild will deliver it * ``[x]`` The build is available, EasyBuild will skip building this module * ``[F]`` The build is available, however EasyBuild has been asked to force a rebuild via ``--force`` and will do so * ``[R]`` The build is available, and the application will be rebuilt as request via ``--rebuild`` .. note :: Since EasyBuild v2.4.0, a detailed overview of the build and install procedure that EasyBuild will be execute can be obtained using ``--extended-dry-run`` or ``-x`` , see :ref: `extended_dry_run` . .. _eb_missing: Getting an overview of missing installations ``--missing-modules`` / ``-M`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v3.9.1, you can obtain a list of missing installations (i.e. easyconfigs for which no corresponding environment module file is available yet) using ``eb --missing-modules`` (or ``-eb -M`` for short) :: $ eb TensorFlow-1.13.1-foss-2019a-Python-3.7.2.eb --missing-modules == temporary log file in case of crash /tmp/eb-bjCz9b/easybuild-CSAvhK.log 2 out of 54 required modules missing: * Bazel/0.20.0-GCCcore-8.2.0 (Bazel-0.20.0-GCCcore-8.2.0.eb) * TensorFlow/1.13.1-foss-2019a-Python-3.7.2 (TensorFlow-1.13.1-foss-2019a-Python-3.7.2.eb) == Temporary log file(s) /tmp/eb-bjCz9b/easybuild-CSAvhK.log* have been removed. == Temporary directory /tmp/eb-bjCz9b has been removed. Note that dependency resolution is enabled automatically (i.e., ``--robot`` is implied when using ``--missing-modules`` or ``-M`` ). .. _tweaking_easyconfigs_using_try: Tweaking existing easyconfig files, using ``--try-*`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Making minor changes to existing easyconfig files can be done straight from the ``eb`` command line. This way, having to manually copying and editing easyconfig files can be avoided. Tweaking existing easyconfig files can be done using the ``--try-*`` command line options. For each of the software build options that can be used as an alternative to specifying easyconfig file names, a matching ``--try-X`` command line options is available: * ``--try-toolchain`` to try using the toolchain with the given name and version * format: ``--try-toolchain=<name>,<version>`` * ``--try-toolchain-name`` to try using the latest toolchain version of a toolchain * ``--try-toolchain-version`` to try using a different toolchain version * ``--try-software-version`` to try building a different software version * ``--try-amend`` to try tweaking a different easyconfig parameter * format: ``--try-amend=<param>=<value>`` * only supports string and list-of-strings value types For example, to build and install WRF and its dependencies with a different toolchain version :: $ eb WRF-3.5.1-goolf-1.4.10-dmpar.eb --try-toolchain-version=1.5.14 -Dr == temporary log file in case of crash /tmp/easybuild-Y9WApt/easybuild-VmPiOH.log Dry run: printing build status of easyconfigs and dependencies * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/g/GCC/GCC-4.8.2.eb (module: GCC/4.8.2) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/h/hwloc/hwloc-1.8.1-GCC-4.8.2.eb (module: hwloc/1.8.1-GCC-4.8.2) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/o/OpenMPI/OpenMPI-1.6.5-GCC-4.8.2.eb (module: OpenMPI/1.6.5-GCC-4.8.2) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/g/gompi/gompi-1.5.14.eb (module: gompi/1.5.14) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/o/OpenBLAS/OpenBLAS-0.2.8-gompi-1.5.14-LAPACK-3.5.0.eb (module: OpenBLAS/0.2.8-gompi-1.5.14-LAPACK-3.5.0) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/f/FFTW/FFTW-3.3.4-gompi-1.5.14.eb (module: FFTW/3.3.4-gompi-1.5.14) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/s/ScaLAPACK/ScaLAPACK-2.0.2-gompi-1.5.14-OpenBLAS-0.2.8-LAPACK-3.5.0.eb (module: ScaLAPACK/2.0.2-gompi-1.5.14-OpenBLAS-0.2.8-LAPACK-3.5.0) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/g/goolf/goolf-1.5.14.eb (module: goolf/1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/zlib-1.2.7-goolf-1.5.14.eb (module: zlib/1.2.7-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/Szip-2.1-goolf-1.5.14.eb (module: Szip/2.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/ncurses-5.9-goolf-1.5.14.eb (module: ncurses/5.9-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/flex-2.5.37-goolf-1.5.14.eb (module: flex/2.5.37-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/M4-1.4.16-goolf-1.5.14.eb (module: M4/1.4.16-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/JasPer-1.900.1-goolf-1.5.14.eb (module: JasPer/1.900.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/HDF5-1.8.10-patch1-goolf-1.5.14.eb (module: HDF5/1.8.10-patch1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/tcsh-6.18.01-goolf-1.5.14.eb (module: tcsh/6.18.01-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/Bison-2.7-goolf-1.5.14.eb (module: Bison/2.7-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/Doxygen-1.8.3.1-goolf-1.5.14.eb (module: Doxygen/1.8.3.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/netCDF-4.2.1.1-goolf-1.5.14.eb (module: netCDF/4.2.1.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/netCDF-Fortran-4.2-goolf-1.5.14.eb (module: netCDF-Fortran/4.2-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/WRF-3.5.1-goolf-1.5.14-dmpar.eb (module: WRF/3.5.1-goolf-1.5.14-dmpar) == temporary log file /tmp/easybuild-Y9WApt/easybuild-VmPiOH.log has been removed. == temporary directory /tmp/easybuild-Y9WApt has been removed. .. note :: The ``--try-*`` command line options behave as expected when combined with ``--robot`` . For example: a modified toolchain specified via ``--try-toolchain`` only trickles down until the toolchain level (not deeper). This makes for a particularly powerful combo for rebuilding entire software stacks using a different toolchain. .. note :: Modifying the software version does **not** trickle down the entire software stack, even when combined with ``--robot`` , since a software version is tied to a particular software package.","title":"Using EasyBuild"},{"location":"using-easybuild/#using-the-easybuild-command-line","text":"","title":"Using the EasyBuild command line"},{"location":"using-easybuild/#all-available-easyconfig-parameters","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Using_the_EasyBuild_command_line.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Using_the_EasyBuild_command_line.rst in easybuilders/easybuild repo target: docs/using-easybuild.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _using_the_easybuild_command_line: Using the EasyBuild command line ================================ Basic usage of EasyBuild is described in the following sections, covering the most important range of topics if you are new to EasyBuild. ``eb`` is EasyBuild\u2019s main command line tool, to interact with the EasyBuild framework and hereby the most common command line options are being documented. .. _specifying_easyconfigs: Specifying builds ----------------- To instruct EasyBuild which software packages it should build/install and which build parameters it should use, one or more *easyconfig files* (see :ref: `easyconfig_files` ) must be specified. This can be done in a number of ways: * :ref: `specifying_easyconfigs_single` * :ref: `specifying_easyconfigs_command_line` * :ref: `specifying_easyconfigs_set_of_easyconfigs` * using ``eb --from-pr`` (see :ref: `github_from_pr` ) Whenever EasyBuild searches for *explicitly specified* easyconfig files, it considers a couple of locations, i.e. (in order of preference): (i) the local working directory (ii) the robot search path (see :ref: `robot_search_path` ) (iii) the path to easyconfig files that are part of the active EasyBuild installation (which is included in the default robot search path) These locations are only considered for easyconfig files that are specified only by filename or using a relative path, *not* for easyconfig files that are specified via an absolute path. The dependencies are resolved using the robot search path (see :ref: `robot_search_path` ). .. note :: For easyconfig files specified on the ``eb`` command line, the *full* robot search path is only considered since EasyBuild v2.0.0. Earlier versions only considered the local working directory and the easyconfig files that are part of the active EasyBuild installation for *explicitly specified* easyconfig files. .. _specifying_easyconfigs_single: By providing a single easyconfig file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The most basic usage is to simply provide the name of an easyconfig file to the ``eb`` command. EasyBuild will (try and) locate the easyconfig file, and perform the installation as specified by that easyconfig file. For example, to build and install ``HPL`` using the ``goolf`` toolchain :: $ eb HPL-2.0-goolf-1.4.10.eb --robot [...] == building and installing GCC/4.7.2... [...] == building and installing goolf/1.4.10... [...] == building and installing HPL/2.0-goolf-1.4.10... == fetching files... == creating build dir, resetting environment... == unpacking... == patching... == preparing... == configuring... == building... == testing... == installing... == taking care of extensions... == packaging... == postprocessing... == sanity checking... == cleaning up... == creating module... == COMPLETED: Installation ended successfully == Results of the build can be found in the log file /home/example/.local/easybuild/software/HPL/2.0-goolf-1.4.10/easybuild/easybuild-HPL-2.0-20141031.223237.log == Build succeeded for 9 out of 9 == temporary log file /tmp/easybuild-UOEWix/easybuild-NiswcV.log has been removed. == temporary directory /tmp/easybuild-UOEWix has been removed. Then, we can actually load the freshly installed HPL module :: $ module load HPL/2.0-goolf-1.4.10 $ which xhpl /home/example/.local/easybuild/software/HPL/2.0-goolf-1.4.10/bin/xhpl All easyconfig file names' suffixes are ``.eb`` and follow format :: ``<name>-<version>-<toolchain>-<versionsuffix>`` This is a crucial design aspect, since the dependency resolution mechanism (see :ref: `use_robot` ) relies upon this convention. .. tip :: You may wish to modify the installation prefix (e.g., using ``--prefix`` or by defining ``$EASYBUILD_PREFIX`` ), in order to redefine the build/install/source path prefix to be used; default value is: ``$HOME/.local/easybuild`` . .. _specifying_easyconfigs_command_line: Via command line options ~~~~~~~~~~~~~~~~~~~~~~~~ An alternative approach is to only use command line options to specify which software to build. Refer to the ``Software search and build options`` section in the ``eb --help`` output for an overview of the available command line options for this purpose (cfr. :ref: `basic_usage_help` ). Here is how to build and install last version of HPCG (that EasyBuild is aware of) using the ``goolf/1.4.10`` toolchain :: $ eb --software-name=HPCG --toolchain=goolf,1.4.10 [...] == building and installing HPCG/2.1-goolf-1.4.10... [...] == COMPLETED: Installation ended successfully [...] At this point, a module ``HPCG/2.1-goolf-1.4.10`` should have been installed. .. _specifying_easyconfigs_set_of_easyconfigs: By providing a set of easyconfig files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Multiple easyconfig files can be provided as well, either directly or by specifying a directory that contains easyconfig files. For example, to build and install both HPCG and GCC with a single command, simply list the easyconfigs for both on the ``eb`` command line (note that HPCG is not being reinstalled, since a matching module is already available) :: $ eb HPCG-2.1-goolf-1.4.10.eb GCC-4.8.3.eb [...] == HPCG/2.1-goolf-1.4.10 is already installed (module found), skipping [...] == building and installing GCC/4.8.3... [...] == Build succeeded for 1 out of 1 [...] When one or more directories are provided, EasyBuild will (recursively) traverse them to find easyconfig files. For example: :: $ find set_of_easyconfigs/ -type f set_of_easyconfigs/GCC-4.8.3.eb set_of_easyconfigs/foo.txt set_of_easyconfigs/tools/HPCG-2.1-goolf-1.4.10.eb :: $ eb set_of_easyconfigs/ == temporary log file in case of crash /tmp/easybuild-1yxCvv/easybuild-NeNmZr.log == HPCG/2.1-goolf-1.4.10 is already installed (module found), skipping == GCC/4.8.3 is already installed (module found), skipping == No easyconfigs left to be built. == Build succeeded for 0 out of 0 == temporary log file /tmp/easybuild-1yxCvv/easybuild-NeNmZr.log has been removed. == temporary directory /tmp/easybuild-1yxCvv has been removed. .. note :: EasyBuild will only pick up the files which end with ``.eb`` ; anything else will be ignored. .. tip :: Calling EasyBuild is designed as an `idempotent` operation; if a module is available that matches with an provided easyconfig file, the installation will simply be skipped. Commonly used command line options ---------------------------------- Command line help, ``--help`` / ``-H`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Detailed information about the usage of the eb command is available via the ``--help`` , ``-H`` , ``-h`` help options. Refer to page :ref: `basic_usage_help` for more detailed information. .. note :: ``--help`` / ``-H`` spit out the long help info (i.e. including long option names), ``-h`` only includes short option names. .. tip :: This is the best way to query for certain information, esp. recent features, since this is in sync with the actual EasyBuild version being used. Report version, ``--version`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can query which EasyBuild version you are using with ``--version`` :: $ eb --version This is EasyBuild 1.15.2 (framework: 1.15.2, easyblocks: 1.15.2) on host example.local. .. tip :: Asking EasyBuild to print own its version is a quick way to ensure that ``$PYTHONPATH`` is set up correctly, so that the entire EasyBuild installation (framework and easyblocks) is available. .. _list_toolchains: List of known toolchains, ``--list-toolchains`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ For an overview of known toolchains, use ``eb --list-toolchains`` . Toolchains have brief mnemonic names, for example: * ``goolf`` stands for ``GCC, OpenMPI, OpenBLAS/LAPACK, FFTW and ScaLAPACK`` * ``iimpi`` stands for ``icc/ifort, impi`` * ``cgmvolf`` stands for ``Clang/GCC, MVAPICH2, OpenBLAS/LAPACK, FFTW`` The complete table of available toolchains is available at :ref: `toolchains_table` . .. _list_easyblocks: List of available easyblocks, ``--list-easyblocks`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can obtain a list of available :ref: `easyblocks` via ``--list-easyblocks`` . The ``--list-easyblocks`` command line option prints the easyblocks in a hierarchical way, showing the inheritance patterns, with the \"base\" easyblock class ``EasyBlock`` on top. Software-specific easyblocks have a name that starts with ``EB_`` ; the ones that do not are generic easyblocks. (cfr. :ref: `easyblocks` for the distinction between both types of easyblocks). For example, a list of easyblocks can be obtained with :: $ eb --list-easyblocks To see more details about the available easyblocks, i.e., in which Python module the class is defined, and where it is located, use ``--list-easyblocks=detailed`` . Refer to page :ref: `basic_usage_easyblocks` for more information. .. _avail_easyconfig_params: All available easyconfig parameters, ``--avail-easyconfig-params`` / ``-a`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ EasyBuild provides a significant amount of easyconfig parameters. An overview of all available easyconfig parameters can be obtained via ``eb --avail-easyconfig-params`` , or ``eb -a`` for short. Refer to page :ref: `easyconfig_params` for more information, the possible parameters are a very rich set. Combine -a with ``--easyblock/-e`` to include parameters that are specific to a particular easyblock. For example :: $ eb -a -e EB_WRF If you want to see the full output of running this command, look at :doc: `eb_a_e_EB_WRF` . Enable debug logging, ``--debug`` / ``-d`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use ``eb --debug/-d`` to enable debug logging, to include all details of how EasyBuild performed a build in the log file :: $ eb HPCG-2.1-goolf-1.4.10.eb -d .. tip :: You may enable this by default via adding ``debug = True`` in your EasyBuild configuration file .. note :: Debug log files are significantly larger than non-debug logs, so be aware. .. _rebuild_option: Rebuild installation, ``--rebuild`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use ``eb --rebuild`` to rebuild a given easyconfig/module. .. warning :: Use with care, since the reinstallation of existing modules will be done without requesting confirmation first! .. tip :: Combine ``--rebuild`` with ``--dry-run`` to get a good view on which installations will be rebuilt. (cfr. :ref: `get_an_overview` ) .. note :: To create a backup of existing modules that are regenerated when ``--rebuild`` is used, use ``--backup-modules`` (see also :ref: `backup_modules` ). .. _force_option: Forced reinstallation, ``--force`` / ``-f`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use ``eb --force`` / ``-f`` to force the reinstallation of a given easyconfig/module. The behavior of ``--force`` is the same as ``--rebuild`` and ``--ignore-osdeps`` . .. warning :: Use with care, since the reinstallation of existing modules will be done without requesting confirmation first! .. tip :: Combine ``--force`` with ``--dry-run`` to get a good view on which installations will be forced. (cfr. :ref: `get_an_overview` ) .. note :: To create a backup of existing modules that are regenerated when ``--force`` is used, use ``--backup-modules`` (see also :ref: `backup_modules` ). .. _searching_for_easyconfigs: Searching for easyconfigs, ``--search`` / ``-S`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Searching for available easyconfig files can be done using the ``--search`` (long output) and ``-S`` (short output) command line options. All easyconfig files available in the robot search path are considered (see :ref: `robot_search_path` ), and searching is done `case-insensitive` . For example, to see which easyconfig files are available for the software package named `Mesquite` :: $ eb --search mesquite == temporary log file in case of crash /tmp/eb-_TYdTf/easybuild-iRJ2vb.log == Searching (case-insensitive) for 'mesquite' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs * /Users/kehoste/work/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite/Mesquite-2.3.0-goolf-1.4.10.eb * /Users/kehoste/work/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite/Mesquite-2.3.0-ictce-4.1.13.eb * /Users/kehoste/work/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite/Mesquite-2.3.0-ictce-5.3.0.eb == temporary log file(s) /tmp/eb-_TYdTf/easybuild-iRJ2vb.log* have been removed. == temporary directory /tmp/eb-_TYdTf has been removed. The same query with ``-S`` is more readable, when there is a joint path that can be collapsed to a variable like ``$CFGS1`` :: $ eb -S mesquite == temporary log file in case of crash /tmp/eb-5diJjn/easybuild-nUXlkj.log == Searching (case-insensitive) for 'mesquite' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs CFGS1=/home/example/easybuild-easyconfigs/easybuild/easyconfigs/m/Mesquite * $CFGS1/Mesquite-2.3.0-goolf-1.4.10.eb * $CFGS1/Mesquite-2.3.0-ictce-4.1.13.eb * $CFGS1/Mesquite-2.3.0-ictce-5.3.0.eb == temporary log file(s) /tmp/eb-5diJjn/easybuild-nUXlkj.log* have been removed. == temporary directory /tmp/eb-5diJjn has been removed. For more specific searching, a regular expression pattern can be supplied (since EasyBuild v2.1.1). For example, to search which easyconfig files are available for GCC v4.6.x, without listing easyconfig files that use GCC v4.6.x as a toolchain :: $ eb -S ^GCC-4.6 == temporary log file in case of crash /tmp/eb-PpwTwm/easybuild-b8yrOG.log == Searching (case-insensitive) for '^GCC-4.6' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs CFGS1=/home/example/easybuild-easyconfigs/easybuild/easyconfigs/g/GCC * $CFGS1/GCC-4.6.3-CLooG-PPL.eb * $CFGS1/GCC-4.6.3.eb * $CFGS1/GCC-4.6.4.eb == temporary log file(s) /tmp/eb-PpwTwm/easybuild-b8yrOG.log* have been removed. == temporary directory /tmp/eb-PpwTwm has been removed. Or, to find all easyconfig files for Python versions 2.7.8 and 2.7.9 that use the ``intel`` toolchain :: $ eb -S '^Python-2.7.[89].*intel' == temporary log file in case of crash /tmp/eb-Dv5LEJ/easybuild-xpGGSF.log == Searching (case-insensitive) for '^Python-2.7.[89].*intel' in /home/example/easybuild-easyconfigs/easybuild/easyconfigs CFGS1=/home/example/easybuild-easyconfigs/easybuild/easyconfigs/p/Python * $CFGS1/Python-2.7.8-intel-2014.06.eb * $CFGS1/Python-2.7.8-intel-2014b.eb * $CFGS1/Python-2.7.8-intel-2015a.eb * $CFGS1/Python-2.7.9-intel-2015a-bare.eb * $CFGS1/Python-2.7.9-intel-2015a.eb == temporary log file(s) /tmp/eb-Dv5LEJ/easybuild-xpGGSF.log* have been removed. == temporary directory /tmp/eb-Dv5LEJ has been removed. .. note :: Prior to EasyBuild v2.1.1, the full path to easyconfig files was considered when matching the search pattern. Starting with EasyBuild v2.1.1, only the filename of the easyconfig file itself is taken into account. .. _use_robot: Enabling dependency resolution, ``--robot`` / ``-r`` and ``--robot-paths`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ EasyBuild supports installing an entire software stack, including the required toolchain if needed, with a single ``eb`` invocation. To enable dependency resolution, use the ``--robot`` command line option (or ``-r`` for short) :: $ eb mpiBLAST-1.6.0-goolf-1.4.10.eb --robot [...] == building and installing GCC/4.7.2... [...] == building and installing hwloc/1.6.2-GCC-4.7.2... [...] == building and installing OpenMPI/1.6.4-GCC-4.7.2... [...] == building and installing gompi/1.4.10... [...] == building and installing OpenBLAS/0.2.6-gompi-1.4.10-LAPACK-3.4.2... [...] == building and installing FFTW/3.3.3-gompi-1.4.10... [...] == building and installing ScaLAPACK/2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2... [...] == building and installing goolf/1.4.10... [...] == building and installing mpiBLAST/1.6.0-goolf-1.4.10... [...] == Build succeeded for 9 out of 9 The dependency resolution mechanism will construct a full dependency graph for the software package(s) being installed, after which a list of dependencies is composed for which no module is available yet. Each of the retained dependencies will then be built and installed, in the required order as indicated by the dependency graph. .. tip :: Using ``--robot`` is particularly useful for software packages that have an extensive list of dependencies, or when reinstalling software using a different compiler toolchain (you can use the ``--try-toolchain`` command line option in combination with ``--robot`` ). .. note :: Unless dependency resolution is enabled, EasyBuid requires that modules are available for every dependency. If ``--robot`` is not used and one or more modules are missing, ``eb`` will exit with an error stating that a module for a particular dependency could not be found. For example :: add_dependencies: no module 'GCC/4.7.2' found for dependency {...} .. _robot_search_path: Searching for easyconfigs: the robot search path ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ For each dependency that does not have a matching module installed yet, EasyBuild requires a corresponding easyconfig file. If no such easyconfig file was specified on the ``eb`` command line, the dependency resolution mechanism will try to locate one in the `robot search path` . Searching for easyconfigs is done based on filename (see also :ref: `what_is_an_easyconfig` ), with filenames being derived from the dependency specification (i.e. software name/version, toolchain and version suffix). For each entry in the robot search path, a couple of different filepaths are considered, mostly determined by the software name. For example, when looking for an easyconfig for ``OpenMPI`` version ``1.6.4`` and version suffix ``-test`` with toolchain ``GCC/4.7.2`` , the following filepaths are considered (relative to each entry in the robot search path): * ``OpenMPI/1.6.4-GCC-4.7.2-test.eb`` * ``OpenMPI/OpenMPI-1.6.4-GCC-4.7.2-test.eb`` * ``o/OpenMPI/OpenMPI-1.6.4-GCC-4.7.2-test.eb`` * ``OpenMPI-1.6.4-GCC-4.7.2-test.eb`` .. note :: Sometimes easyconfig files are needed even when the modules for the dependencies are already available, i.e., whenever the information provided by the dependency specification (software name/version, toolchain and version suffix) is not sufficient. This is the case when using ``--dry-run`` to construct the complete dependency graph, or when the active module naming scheme requires some additional information (e.g., the ``moduleclass`` ). .. note :: If EasyBuild is unable to locate required easyconfigs, an appropriate error message will be shown. For example:: Irresolvable dependencies encountered: GCC/4.7.2 or :: Failed to find easyconfig file 'GCC-4.7.2.eb' when determining module name for: {...} Default robot search path +++++++++++++++++++++++++ By default, EasyBuild will only include the collection of easyconfig files that is part of the EasyBuild installation in the robot search path. More specifically, only directories listed in the `Python search path` (partially specified by the ``$PYTHONPATH`` environment variable) that contain a subdirectory named ``easybuild/easyconfigs`` are considered part of the robot search path (in the order they are encountered). .. _controlling_robot_search_path: Controlling the robot search path ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To control the robot search path, you can specify a (colon-separated list of) path(s) to ``--robot`` / ``-r`` and/or ``--robot-paths`` (or, equivalently, ``$EASYBUILD_ROBOT`` and/or ``$EASYBUILD_ROBOT_PATHS`` ) :: eb --robot=$PWD:$HOME ... These two configuration options each serve a particular purpose, and together define the robot search path: * ``--robot`` , ``-r`` : * intended to be used (only) as a command line option to ``eb`` (although it can also be defined through another configuration type) * enables the dependency resolution mechanism (disabled by default) * optionally a list of paths can be specified, which is included *first* in the robot search path * by default, the corresponding list of paths is *empty* * ``--robot-paths`` : * intended to be defined in an EasyBuild configuration file, or via ``$EASYBUILD_ROBOT_PATHS`` * does *not* enable the dependency resolution mechanism * the specified list of paths is included *last* in the robot search path * by default, only the path to the easyconfig files that are part of the EasyBuild installation is listed * **note** : setting this configuration option implies redefining the default robot search path, unless a prepending/appending list of paths is specified, see :ref: `robot_search_path_prepend_append` For both options, the list of paths should be specified as a colon-separated ( ``:`` ) list. By combining ``--robot`` and ``--robot-paths`` using the different configuration types (see also :ref: `configuration_types` ), you have full control over the robot search path: which paths are included, the order of those paths, whether or not the easyconfig files that are part of the EasyBuild installation should be considered, etc. A constant named ``DEFAULT_ROBOT_PATHS`` is available that can be used (only) in EasyBuild configuration files to refer to the default robot search path, i.e. the path to the easyconfigs that are part of the EasyBuild installation. For more information on using constants in EasyBuild configuration files, see :ref: `configuration_file_templates_constants` . .. tip :: Only use ``--robot`` to enable the dependency resolution mechanism; define ``robot-paths`` in your EasyBuild configuration file or via ``$EASYBUILD_ROBOT_PATHS`` to specify which sets of easyconfig files EasyBuild should consider, and in which order. By means of exception, a path can be specified to ``--robot`` to give a specific set of easyconfig files precedence over others, for example when testing modified easyconfig files. .. note :: The paths specified on the configuration type with the highest order of preference *replace* any paths specified otherwise, i.e. values are not retained across configuration types. That is: ``--robot`` *overrides* the value in ``$EASYBUILD_ROBOT`` , ``$EASYBUILD_ROBOT_PATHS`` *overrides* the ``robot-paths`` specification in an EasyBuild configuration file, etc. Of course, the value specified for ``--robot`` does not directly affect the value specified for ``--robot-paths`` , on any configuration level, and vice versa. For more information on the relation between the different configuration types, see :ref: `configuration_types` . .. _robot_search_path_prepend_append: Prepending and/or appending to the default robot search path ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Prepending or appending to the default robot search path is supported via the ``--robot-paths`` configuration option. To *prepend* one or more paths, a list of paths followed by a ' ``:`` ' should be specified. Analogously, to *append* one or more paths, a list of paths preceded by a ' ``:`` ' should be specified. For example: * ``export EASYBUILD_ROBOT_PATHS=/tmp/$USER:`` specifies to prepend ``/tmp/$USER`` to the robot search path * ``--robot-paths :$HOME/eb:$HOME/test`` specifies to append ``$HOME/eb`` and ``$HOME/test`` to the robot search path (in that order) * ``--robot-paths=/tmp/$USER::$HOME/test`` specifies to prepend ``/tmp/$USER`` *and* append ``$HOME/test`` to the robot search path Example use case ++++++++++++++++ For example, say we want to configure EasyBuild to behave as follows w.r.t. the robot search path: * (always) prefer easyconfig files in the archive/repository over the ones that are included in the EasyBuild installation (i) * consider easyconfig files located in the current directory or home directory first (in that order), before any others (ii) Matching setup: * satisfy (i) using ``robot-paths`` in one of the active EasyBuild configuration files (see also :ref: `list_of_configuration_files` ) :: [basic] repositorypath = /home/example/easybuild/easyconfigs_archive robot-paths = %(repositorypath)s:%(DEFAULT_ROBOT_PATHS)s * satisfy (ii) via ``--robot`` on the ``eb`` command line:: eb mpiBLAST-1.6.0-goolf-1.4.10.eb --robot $PWD:$HOME .. _get_an_overview: Getting an overview of planned installations ``--dry-run`` / ``-D`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ You can do a \"dry-run\" overview by supplying ``-D/--dry-run`` (typically combined with ``--robot`` , in the form of ``-Dr`` ) :: $ eb mpiBLAST-1.6.0-goolf-1.4.10.eb -Dr == temporary log file in case of crash /tmp/easybuild-vyNQhw/easybuild-pO8EJv.log Dry run: printing build status of easyconfigs and dependencies CFGS=/home/example/.local/easybuild/software/EasyBuild/1.15.2/lib/python2.7/site-packages/easybuild_easyconfigs-1.15.2.0-py2.7.egg/easybuild/easyconfigs * [x] $CFGS/g/GCC/GCC-4.7.2.eb (module: GCC/4.7.2) * [x] $CFGS/h/hwloc/hwloc-1.6.2-GCC-4.7.2.eb (module: hwloc/1.6.2-GCC-4.7.2) * [x] $CFGS/o/OpenMPI/OpenMPI-1.6.4-GCC-4.7.2.eb (module: OpenMPI/1.6.4-GCC-4.7.2) * [x] $CFGS/g/gompi/gompi-1.4.10.eb (module: gompi/1.4.10) * [ ] $CFGS/o/OpenBLAS/OpenBLAS-0.2.6-gompi-1.4.10-LAPACK-3.4.2.eb (module: OpenBLAS/0.2.6-gompi-1.4.10-LAPACK-3.4.2) * [ ] $CFGS/f/FFTW/FFTW-3.3.3-gompi-1.4.10.eb (module: FFTW/3.3.3-gompi-1.4.10) * [ ] $CFGS/s/ScaLAPACK/ScaLAPACK-2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2.eb (module: ScaLAPACK/2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2) * [ ] $CFGS/g/goolf/goolf-1.4.10.eb (module: goolf/1.4.10) * [ ] $CFGS/m/mpiBLAST/mpiBLAST-1.6.0-goolf-1.4.10.eb (module: mpiBLAST/1.6.0-goolf-1.4.10) == temporary log file /tmp/easybuild-vyNQhw/easybuild-pO8EJv.log has been removed. == temporary directory /tmp/easybuild-vyNQhw has been removed. Note how the different status symbols denote distinct handling states by EasyBuild: * ``[ ]`` The build is not available, EasyBuild will deliver it * ``[x]`` The build is available, EasyBuild will skip building this module * ``[F]`` The build is available, however EasyBuild has been asked to force a rebuild via ``--force`` and will do so * ``[R]`` The build is available, and the application will be rebuilt as request via ``--rebuild`` .. note :: Since EasyBuild v2.4.0, a detailed overview of the build and install procedure that EasyBuild will be execute can be obtained using ``--extended-dry-run`` or ``-x`` , see :ref: `extended_dry_run` . .. _eb_missing: Getting an overview of missing installations ``--missing-modules`` / ``-M`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Since EasyBuild v3.9.1, you can obtain a list of missing installations (i.e. easyconfigs for which no corresponding environment module file is available yet) using ``eb --missing-modules`` (or ``-eb -M`` for short) :: $ eb TensorFlow-1.13.1-foss-2019a-Python-3.7.2.eb --missing-modules == temporary log file in case of crash /tmp/eb-bjCz9b/easybuild-CSAvhK.log 2 out of 54 required modules missing: * Bazel/0.20.0-GCCcore-8.2.0 (Bazel-0.20.0-GCCcore-8.2.0.eb) * TensorFlow/1.13.1-foss-2019a-Python-3.7.2 (TensorFlow-1.13.1-foss-2019a-Python-3.7.2.eb) == Temporary log file(s) /tmp/eb-bjCz9b/easybuild-CSAvhK.log* have been removed. == Temporary directory /tmp/eb-bjCz9b has been removed. Note that dependency resolution is enabled automatically (i.e., ``--robot`` is implied when using ``--missing-modules`` or ``-M`` ). .. _tweaking_easyconfigs_using_try: Tweaking existing easyconfig files, using ``--try-*`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Making minor changes to existing easyconfig files can be done straight from the ``eb`` command line. This way, having to manually copying and editing easyconfig files can be avoided. Tweaking existing easyconfig files can be done using the ``--try-*`` command line options. For each of the software build options that can be used as an alternative to specifying easyconfig file names, a matching ``--try-X`` command line options is available: * ``--try-toolchain`` to try using the toolchain with the given name and version * format: ``--try-toolchain=<name>,<version>`` * ``--try-toolchain-name`` to try using the latest toolchain version of a toolchain * ``--try-toolchain-version`` to try using a different toolchain version * ``--try-software-version`` to try building a different software version * ``--try-amend`` to try tweaking a different easyconfig parameter * format: ``--try-amend=<param>=<value>`` * only supports string and list-of-strings value types For example, to build and install WRF and its dependencies with a different toolchain version :: $ eb WRF-3.5.1-goolf-1.4.10-dmpar.eb --try-toolchain-version=1.5.14 -Dr == temporary log file in case of crash /tmp/easybuild-Y9WApt/easybuild-VmPiOH.log Dry run: printing build status of easyconfigs and dependencies * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/g/GCC/GCC-4.8.2.eb (module: GCC/4.8.2) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/h/hwloc/hwloc-1.8.1-GCC-4.8.2.eb (module: hwloc/1.8.1-GCC-4.8.2) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/o/OpenMPI/OpenMPI-1.6.5-GCC-4.8.2.eb (module: OpenMPI/1.6.5-GCC-4.8.2) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/g/gompi/gompi-1.5.14.eb (module: gompi/1.5.14) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/o/OpenBLAS/OpenBLAS-0.2.8-gompi-1.5.14-LAPACK-3.5.0.eb (module: OpenBLAS/0.2.8-gompi-1.5.14-LAPACK-3.5.0) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/f/FFTW/FFTW-3.3.4-gompi-1.5.14.eb (module: FFTW/3.3.4-gompi-1.5.14) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/s/ScaLAPACK/ScaLAPACK-2.0.2-gompi-1.5.14-OpenBLAS-0.2.8-LAPACK-3.5.0.eb (module: ScaLAPACK/2.0.2-gompi-1.5.14-OpenBLAS-0.2.8-LAPACK-3.5.0) * [x] /home/example/work/easybuild-easyconfigs/easybuild/easyconfigs/g/goolf/goolf-1.5.14.eb (module: goolf/1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/zlib-1.2.7-goolf-1.5.14.eb (module: zlib/1.2.7-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/Szip-2.1-goolf-1.5.14.eb (module: Szip/2.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/ncurses-5.9-goolf-1.5.14.eb (module: ncurses/5.9-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/flex-2.5.37-goolf-1.5.14.eb (module: flex/2.5.37-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/M4-1.4.16-goolf-1.5.14.eb (module: M4/1.4.16-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/JasPer-1.900.1-goolf-1.5.14.eb (module: JasPer/1.900.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/HDF5-1.8.10-patch1-goolf-1.5.14.eb (module: HDF5/1.8.10-patch1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/tcsh-6.18.01-goolf-1.5.14.eb (module: tcsh/6.18.01-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/Bison-2.7-goolf-1.5.14.eb (module: Bison/2.7-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/Doxygen-1.8.3.1-goolf-1.5.14.eb (module: Doxygen/1.8.3.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/netCDF-4.2.1.1-goolf-1.5.14.eb (module: netCDF/4.2.1.1-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/netCDF-Fortran-4.2-goolf-1.5.14.eb (module: netCDF-Fortran/4.2-goolf-1.5.14) * [ ] /tmp/easybuild-Y9WApt/tweaked_easyconfigs/WRF-3.5.1-goolf-1.5.14-dmpar.eb (module: WRF/3.5.1-goolf-1.5.14-dmpar) == temporary log file /tmp/easybuild-Y9WApt/easybuild-VmPiOH.log has been removed. == temporary directory /tmp/easybuild-Y9WApt has been removed. .. note :: The ``--try-*`` command line options behave as expected when combined with ``--robot`` . For example: a modified toolchain specified via ``--try-toolchain`` only trickles down until the toolchain level (not deeper). This makes for a particularly powerful combo for rebuilding entire software stacks using a different toolchain. .. note :: Modifying the software version does **not** trickle down the entire software stack, even when combined with ``--robot`` , since a software version is tied to a particular software package.","title":"All available easyconfig parameters"},{"location":"using-external-modules/","text":"Using external modules \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Using_external_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Using_external_modules.rst in easybuilders/easybuild repo target: docs/using-external-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _using_external_modules: Using external modules ====================== Since EasyBuild v2.1, support for using modules that were not installed via EasyBuild is available. We refer to such modules as *external modules* . This can be useful to reuse vendor-supplied modules, for example on Cray systems. .. contents :: :depth: 3 :backlinks: none Using external modules as dependencies --------------------------------------- External modules can be used as dependencies, by including the module name in the ``dependencies`` list (see :ref: `dependency_specs` ), along with the ``EXTERNAL_MODULE`` constant marker. For example, to specify the readily available module ``fftw/3.3.4.2`` as a dependency :: dependencies = [('fftw/3.3.4.2', EXTERNAL_MODULE)] For such dependencies, EasyBuild will: * load the module before initiating the software build and install procedure * include a ' ``module load`` ' statement in the generated module file (for non-build dependencies) If the specified module is not available, EasyBuild will exit with an error message stating that the dependency can not be resolved because the module could not be found. It will *not* search for a matching easyconfig file in order to try and install the module to resolve the dependency. .. _using_external_modules_metadata: Metadata for external modules ----------------------------- Since very little information is available for external modules based on the dependency specification alone (i.e., only the module name), metadata can be supplied to EasyBuild for external modules. Using the ``--external-modules-metadata`` configuration option, the location of one or more files can be specified that provide such metadata. The files are expected to be in INI format, with a section per module name and key-value assignments denoting the metadata specific to that module. Format :: [modulename] key1 = value1 key2 = value2, value3 Default ~~~~~~~ Up until EasyBuild v2.6.0, no metadata for external modules was available by default. Since EasyBuild v2.7.0, a file providing metadata for Cray-provided modules on Cray systems is included, and is active by default (i.e., unless other files are specified via ``--external-modules-metadata`` ); see https://github.com/easybuilders/easybuild-framework/blob/main/etc/cray_external_modules_metadata.cfg. Using wildcards ~~~~~~~~~~~~~~~ Since EasyBuild v4.1.0, you can use so-called *glob patterns* to specify a list of paths to ``--external-modules-metadata`` , using wildcard characters like ``*`` and ``?`` . For example, to specify that the metadata for external modules in all ``*.cfg`` files in the directory ``/example`` should be taken into account, you can use :: export EASYBUILD_EXTERNAL_MODULES_METADATA='/example/*.cfg' Example ~~~~~~~ For example, the following file provides metadata for a handful of modules that may be provided on Cray systems :: [cray-hdf5/1.8.13] name = HDF5 version = 1.8.13 prefix = HDF5_DIR [cray-hdf5-parallel/1.8.13] name = HDF5 version = 1.8.13 prefix = /opt/cray/hdf5-parallel/1.8.13/GNU/49 [cray-netcdf/4.3.2] name = netCDF, netCDF-Fortran version = 4.3.2, 4.3.2 prefix = NETCDF_DIR [fftw/3.3.4.5] name = FFTW version = 3.3.4.5 prefix = FFTW_INC/.. Supported metadata values ~~~~~~~~~~~~~~~~~~~~~~~~~ The following keys are supported: * ``name`` : specifies the software name(s) that is (are) provided by the module * ``version`` : specifies the software version(s) that is (are) provided by the module * ``prefix`` : specifies the installation prefix of the software that is provided by the module For ``prefix`` , a couple of different options are available, i.e.: * specifying an absolute path (cfr. ``cray-hdf5-parallel/1.8.13`` in the example above) * specifying the environment variable that is defined by the module and provides the installation prefix (cfr. ``cray-netcdf/4.3.2`` in the example above) * this can be optionally combined with a relative path that serves as a 'correction' (cfr. ``fftw/3.3.4.5`` in the example above) *[supported since EasyBuild v2.7.0]* Any other keys are simply ignored. .. note :: When both ``name`` and ``version`` are specified, they must provide an *equal number of values* (see for example the ``cray-netcdf`` example above). Handling of provided metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the provided metadata, EasyBuild will define environment variables that are also defined by modules that are generated by EasyBuild itself, if an external module for which metadata is available is loaded as a dependency. In particular, for each software name that is specified: * the corresponding environment variable ``$EBROOT<NAME>`` is defined to the specified ``prefix`` value (if any) * the corresponding environment variable ``$EBVERSION<NAME>`` is defined to the corresponding ``version`` value (if any) For example, for the external modules for which metadata is provided in the example above, the following environment variables are set in the build environment when the module is used as a dependency: * for ``cray-hdf5/1.8.1.13`` : * ``$EBROOTHDF5`` = ``$HDF5_DIR`` * ``$EBVERSIONHDF5`` = ``1.8.13`` * for ``cray-hdf5-parallel/1.8.13`` : * ``$EBROOTHDF5`` = ``/opt/cray/hdf5-parallel/1.8.13/GNU/49`` * ``$EBVERSIONHDF5`` = ``1.8.13`` * for ``cray-netcdf/4.3.2`` : * ``$EBROOTNETCDF`` = ``$NETCDF_DIR`` * ``$EBROOTNETCDFMINFORTRAN`` = ``$NETCDF_DIR`` * ``$EBVERSIONNETCDF`` = ``4.3.2`` * ``$EBVERSIONNETCDFMINFORTRAN`` = ``4.3.2`` * for ``fftw/3.3.4.5`` : * ``$EBROOTFFTW`` = ``$FFTW_INC/../`` * ``$EBVERSIONFFTW`` = ``3.3.4.5`` The ``get_software_root`` and ``get_software_version`` functions that are commonly used occasionally in easyblocks pick up the ``$EBROOT*`` and ``$EBVERSION*`` environment variables, respectively.","title":"Using external modules"},{"location":"using-external-modules/#using-external-modules","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Using_external_modules.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Using_external_modules.rst in easybuilders/easybuild repo target: docs/using-external-modules.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _using_external_modules: Using external modules ====================== Since EasyBuild v2.1, support for using modules that were not installed via EasyBuild is available. We refer to such modules as *external modules* . This can be useful to reuse vendor-supplied modules, for example on Cray systems. .. contents :: :depth: 3 :backlinks: none Using external modules as dependencies --------------------------------------- External modules can be used as dependencies, by including the module name in the ``dependencies`` list (see :ref: `dependency_specs` ), along with the ``EXTERNAL_MODULE`` constant marker. For example, to specify the readily available module ``fftw/3.3.4.2`` as a dependency :: dependencies = [('fftw/3.3.4.2', EXTERNAL_MODULE)] For such dependencies, EasyBuild will: * load the module before initiating the software build and install procedure * include a ' ``module load`` ' statement in the generated module file (for non-build dependencies) If the specified module is not available, EasyBuild will exit with an error message stating that the dependency can not be resolved because the module could not be found. It will *not* search for a matching easyconfig file in order to try and install the module to resolve the dependency. .. _using_external_modules_metadata: Metadata for external modules ----------------------------- Since very little information is available for external modules based on the dependency specification alone (i.e., only the module name), metadata can be supplied to EasyBuild for external modules. Using the ``--external-modules-metadata`` configuration option, the location of one or more files can be specified that provide such metadata. The files are expected to be in INI format, with a section per module name and key-value assignments denoting the metadata specific to that module. Format :: [modulename] key1 = value1 key2 = value2, value3 Default ~~~~~~~ Up until EasyBuild v2.6.0, no metadata for external modules was available by default. Since EasyBuild v2.7.0, a file providing metadata for Cray-provided modules on Cray systems is included, and is active by default (i.e., unless other files are specified via ``--external-modules-metadata`` ); see https://github.com/easybuilders/easybuild-framework/blob/main/etc/cray_external_modules_metadata.cfg. Using wildcards ~~~~~~~~~~~~~~~ Since EasyBuild v4.1.0, you can use so-called *glob patterns* to specify a list of paths to ``--external-modules-metadata`` , using wildcard characters like ``*`` and ``?`` . For example, to specify that the metadata for external modules in all ``*.cfg`` files in the directory ``/example`` should be taken into account, you can use :: export EASYBUILD_EXTERNAL_MODULES_METADATA='/example/*.cfg' Example ~~~~~~~ For example, the following file provides metadata for a handful of modules that may be provided on Cray systems :: [cray-hdf5/1.8.13] name = HDF5 version = 1.8.13 prefix = HDF5_DIR [cray-hdf5-parallel/1.8.13] name = HDF5 version = 1.8.13 prefix = /opt/cray/hdf5-parallel/1.8.13/GNU/49 [cray-netcdf/4.3.2] name = netCDF, netCDF-Fortran version = 4.3.2, 4.3.2 prefix = NETCDF_DIR [fftw/3.3.4.5] name = FFTW version = 3.3.4.5 prefix = FFTW_INC/.. Supported metadata values ~~~~~~~~~~~~~~~~~~~~~~~~~ The following keys are supported: * ``name`` : specifies the software name(s) that is (are) provided by the module * ``version`` : specifies the software version(s) that is (are) provided by the module * ``prefix`` : specifies the installation prefix of the software that is provided by the module For ``prefix`` , a couple of different options are available, i.e.: * specifying an absolute path (cfr. ``cray-hdf5-parallel/1.8.13`` in the example above) * specifying the environment variable that is defined by the module and provides the installation prefix (cfr. ``cray-netcdf/4.3.2`` in the example above) * this can be optionally combined with a relative path that serves as a 'correction' (cfr. ``fftw/3.3.4.5`` in the example above) *[supported since EasyBuild v2.7.0]* Any other keys are simply ignored. .. note :: When both ``name`` and ``version`` are specified, they must provide an *equal number of values* (see for example the ``cray-netcdf`` example above). Handling of provided metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Using the provided metadata, EasyBuild will define environment variables that are also defined by modules that are generated by EasyBuild itself, if an external module for which metadata is available is loaded as a dependency. In particular, for each software name that is specified: * the corresponding environment variable ``$EBROOT<NAME>`` is defined to the specified ``prefix`` value (if any) * the corresponding environment variable ``$EBVERSION<NAME>`` is defined to the corresponding ``version`` value (if any) For example, for the external modules for which metadata is provided in the example above, the following environment variables are set in the build environment when the module is used as a dependency: * for ``cray-hdf5/1.8.1.13`` : * ``$EBROOTHDF5`` = ``$HDF5_DIR`` * ``$EBVERSIONHDF5`` = ``1.8.13`` * for ``cray-hdf5-parallel/1.8.13`` : * ``$EBROOTHDF5`` = ``/opt/cray/hdf5-parallel/1.8.13/GNU/49`` * ``$EBVERSIONHDF5`` = ``1.8.13`` * for ``cray-netcdf/4.3.2`` : * ``$EBROOTNETCDF`` = ``$NETCDF_DIR`` * ``$EBROOTNETCDFMINFORTRAN`` = ``$NETCDF_DIR`` * ``$EBVERSIONNETCDF`` = ``4.3.2`` * ``$EBVERSIONNETCDFMINFORTRAN`` = ``4.3.2`` * for ``fftw/3.3.4.5`` : * ``$EBROOTFFTW`` = ``$FFTW_INC/../`` * ``$EBVERSIONFFTW`` = ``3.3.4.5`` The ``get_software_root`` and ``get_software_version`` functions that are commonly used occasionally in easyblocks pick up the ``$EBROOT*`` and ``$EBVERSION*`` environment variables, respectively.","title":"Using external modules"},{"location":"what-is-easybuild/","text":"What is EasyBuild? \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Introduction.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Introduction.rst in easybuilders/easybuild repo target: docs/what-is-easybuild.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _what_is_easybuild: What is EasyBuild? ------------------ EasyBuild is a software build and installation framework that allows you to manage (scientific) software on High Performance Computing (HPC) systems in an efficient way. It is motivated by the need for a tool that combines the following features: * a **flexible framework** for building/installing (scientific) software * fully **automates** software builds * divert from the standard ``configure`` / ``make`` / ``make install`` with custom procedures * allows for easily **reproducing** previous builds * keep the software build recipes/specifications **simple and human-readable** * supports **co-existence of versions/builds** via dedicated installation prefix and module files * enables **sharing** with the HPC community (win-win situation) * automagic **dependency resolution** * **retain logs** for traceability of the build processes Some key features of EasyBuild: * build & install (scientific) software **fully autonomously** * also interactive installers, code patching, generating module file, ... * easily :ref: `configurable <configuring_easybuild>` : config file/environment/command line * including aspects like module naming scheme * thorough logging and archiving (see :doc: `Logfiles` ) * entire build process is logged thoroughly, logs are stored in install directory; * easyconfig file used for build is archived (install directory + file/svn/git repo) * automatic **dependency resolution** (see :ref: `use_robot` ) * build entire software stack with a single command, using ``--robot`` * building software in **parallel** * robust and thoroughly tested code base, fully unit-tested before each release * thriving, growing **community** Take a look at our HUST'14 workshop paper `Modern Scientific Software Management Using EasyBuild and Lmod` ( `download PDF here <https://easybuilders.github.io/easybuild/files/hust14_paper.pdf> `_ ) and use that as a reference in case you present academic work mentioning EasyBuild.","title":"What is EasyBuild?"},{"location":"what-is-easybuild/#what-is-easybuild","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Introduction.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Introduction.rst in easybuilders/easybuild repo target: docs/what-is-easybuild.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _what_is_easybuild: What is EasyBuild? ------------------ EasyBuild is a software build and installation framework that allows you to manage (scientific) software on High Performance Computing (HPC) systems in an efficient way. It is motivated by the need for a tool that combines the following features: * a **flexible framework** for building/installing (scientific) software * fully **automates** software builds * divert from the standard ``configure`` / ``make`` / ``make install`` with custom procedures * allows for easily **reproducing** previous builds * keep the software build recipes/specifications **simple and human-readable** * supports **co-existence of versions/builds** via dedicated installation prefix and module files * enables **sharing** with the HPC community (win-win situation) * automagic **dependency resolution** * **retain logs** for traceability of the build processes Some key features of EasyBuild: * build & install (scientific) software **fully autonomously** * also interactive installers, code patching, generating module file, ... * easily :ref: `configurable <configuring_easybuild>` : config file/environment/command line * including aspects like module naming scheme * thorough logging and archiving (see :doc: `Logfiles` ) * entire build process is logged thoroughly, logs are stored in install directory; * easyconfig file used for build is archived (install directory + file/svn/git repo) * automatic **dependency resolution** (see :ref: `use_robot` ) * build entire software stack with a single command, using ``--robot`` * building software in **parallel** * robust and thoroughly tested code base, fully unit-tested before each release * thriving, growing **community** Take a look at our HUST'14 workshop paper `Modern Scientific Software Management Using EasyBuild and Lmod` ( `download PDF here <https://easybuilders.github.io/easybuild/files/hust14_paper.pdf> `_ ) and use that as a reference in case you present academic work mentioning EasyBuild.","title":"What is EasyBuild?"},{"location":"wrapping-dependencies/","text":"Wrapping dependencies \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Wrapping_dependencies.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Wrapping_dependencies.rst in easybuilders/easybuild repo target: docs/wrapping-dependencies.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _wrapping_dependencies: Wrapping dependencies ===================== Since EasyBuild v3.7.0 a special-purpose generic easyblock named ``ModuleRC`` is available, which can be used to generate a (software-specific) ``.modulerc`` file (as opposed to generating an actual module file). .. note :: For compatibility with the different modules tools supported by EasyBuild (see :ref: `modules_tool` ), the ``.modulerc`` file is always generated in Tcl syntax (for now), regardless of the module syntax that is used for module files. Only Lmod 7.8 (or later) supports ``.modulerc.lua`` files in Lua syntax. The ``ModuleRC`` easyblock supports including ``module-version`` in the generated ``.modulerc`` file, which defines a so-called *\"symbolic version\"* . This can be used to install a *\"wrapper\"* for a particular module, which can be useful in the context of dependencies. For example, it can be used to avoid depending on a specific version of a particular software package by specifying the dependency only on the ``<major>.<minor>`` version instead (i.e., without including the \"subminor\" version, which usually corresponds to a bugfix release). One particular example where this is employed is for ``Java`` . Since the ``2018b`` generation of the :ref: `common_toolchains` , we use a wrapper for ``Java`` (e.g., ``Java/1.8`` ), rather than depending on a specific version (e.g., ``Java/1.8.0_181`` ): .. code :: # specify dependency on Java/1.8 \"wrapper\", rather than a specific Java version dependencies = [('Java', '1.8', '', SYSTEM)] This has a couple of advantages: * it helps with avoiding version conflicts on the ``Java`` dependency used by two (or more) otherwise independent module files; * it allows to perform an in-place update of the ``Java`` wrapper to a more recent ``Java`` (bugfix) release in the blink of an eye, since it only involves re-generating a ``.modulerc`` file (as opposed to performing actual installation and generating a module file); in addition, it doesn't require updating/re-generating existing module files that depend on the ``Java`` wrapper (since the version of the wrapper does not change) Since ``ModuleRC`` is a generic easyblock , it can also be employed to install module \"wrappers\" for dependencies other than ``Java`` .","title":"Wrapping dependencies"},{"location":"wrapping-dependencies/#wrapping-dependencies","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Wrapping_dependencies.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Wrapping_dependencies.rst in easybuilders/easybuild repo target: docs/wrapping-dependencies.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _wrapping_dependencies: Wrapping dependencies ===================== Since EasyBuild v3.7.0 a special-purpose generic easyblock named ``ModuleRC`` is available, which can be used to generate a (software-specific) ``.modulerc`` file (as opposed to generating an actual module file). .. note :: For compatibility with the different modules tools supported by EasyBuild (see :ref: `modules_tool` ), the ``.modulerc`` file is always generated in Tcl syntax (for now), regardless of the module syntax that is used for module files. Only Lmod 7.8 (or later) supports ``.modulerc.lua`` files in Lua syntax. The ``ModuleRC`` easyblock supports including ``module-version`` in the generated ``.modulerc`` file, which defines a so-called *\"symbolic version\"* . This can be used to install a *\"wrapper\"* for a particular module, which can be useful in the context of dependencies. For example, it can be used to avoid depending on a specific version of a particular software package by specifying the dependency only on the ``<major>.<minor>`` version instead (i.e., without including the \"subminor\" version, which usually corresponds to a bugfix release). One particular example where this is employed is for ``Java`` . Since the ``2018b`` generation of the :ref: `common_toolchains` , we use a wrapper for ``Java`` (e.g., ``Java/1.8`` ), rather than depending on a specific version (e.g., ``Java/1.8.0_181`` ): .. code :: # specify dependency on Java/1.8 \"wrapper\", rather than a specific Java version dependencies = [('Java', '1.8', '', SYSTEM)] This has a couple of advantages: * it helps with avoiding version conflicts on the ``Java`` dependency used by two (or more) otherwise independent module files; * it allows to perform an in-place update of the ``Java`` wrapper to a more recent ``Java`` (bugfix) release in the blink of an eye, since it only involves re-generating a ``.modulerc`` file (as opposed to performing actual installation and generating a module file); in addition, it doesn't require updating/re-generating existing module files that depend on the ``Java`` wrapper (since the version of the wrapper does not change) Since ``ModuleRC`` is a generic easyblock , it can also be employed to install module \"wrappers\" for dependencies other than ``Java`` .","title":"Wrapping dependencies"},{"location":"writing-easyconfig-files/","text":"Writing easyconfig files \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Writing_easyconfig_files.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Writing_easyconfig_files.rst in easybuilders/easybuild repo target: docs/writing-easyconfig-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _writing_easyconfig_files: Writing easyconfig files: the basics ==================================== This page explains all the basic information about how to write easyconfig files. For software builds that follow established build patterns, an easyconfig is all that you need to create in order to build and install the software and the corresponding module file. Luckily, the majority of software delivery mechanisms are being designed around either autotools or CMake or, perhaps, some simple file extraction/copy pattern. In that case, a *generic easyblock* can be leveraged; see :ref: `generic_easyblocks` . Yet, in case the software build calls for more elaborate steps (scientific software never fails to surprise us in this regard), a software-specific easyblock may be required; see :ref: `implementing_easyblocks` . .. contents :: :depth: 3 :backlinks: none .. _what_is_an_easyconfig: What is an easyconfig (file)? ----------------------------- An easyconfig file serves as a `build specification` for EasyBuild. It consists of a plain text file (in Python syntax) with mostly `key-value` assignment to define **easyconfig parameters** . Easyconfigs typically follow a (fixed) strict naming scheme, i.e. ``<name>-<version>[-<toolchain>][<versionsuffix>].eb`` . The ``-<toolchain>`` label (which includes the toolchain name and version) is omitted when a :ref: `system_toolchain` is used. The ``<versionsuffix>`` label is omitted when the version suffix is empty. .. note :: the filename of an easyconfig is only important w.r.t. dependency resolution ( ``--robot`` ), see :ref: `use_robot` . Example: .. code :: python # easyconfig file for GCC v4.8.3 name = 'GCC' version = '4.8.3' ... .. tip :: Comments can be included in easyconfig files using the hash ( ``#`` ) character (just like in Python code). Available easyconfig parameters ------------------------------- About 50 different (generic) easyconfig parameters are supported currently. An overview of all available easyconfig parameters is available via the ``-a`` command line option. By default, the parameters specific to generic (default) easyblock ``ConfigureMake`` are included; using ``--easyblock`` / ``-e`` parameters that are specific to a particular easyblock can be consulted. See :ref: `easyconfig_params` for more details. Example :: $ eb -a -e Binary Available easyconfig parameters (* indicates specific for the Binary EasyBlock) MANDATORY --------- [..] name: Name of software (default: None) [...] EASYBLOCK-SPECIFIC ------------------ install_cmd(*): Install command to be used. (default: None) [...] Mandatory easyconfig parameters ------------------------------- A handful of easyconfig parameters are `mandatory` : * **name, version** : specify what software (version) to build * **homepage, description** : metadata (used for module help) * **toolchain** : specifies name and version of compiler toolchain to use * format: dictionary with name/version keys, e.g., ``{'name': 'foo', 'version': '1.2.3'}`` * a list of supported toolchains can be found :ref: `here <vsd_list_toolchains>` Remarks: * some others are planned to be required in the future * `docurls, software license, software license urls` Example: .. code :: python name = 'HPL' version = '2.0' homepage = 'http://www.netlib.org/benchmark/hpl/' description = \"High Performance Computing Linpack Benchmark\" toolchain = { 'name' : 'goolf' , 'version' : '1.4.10' } [ ... ] Common easyconfig parameters ---------------------------- This section includes an overview of some commonly used (optional) easyconfig parameters. .. _common_easyconfig_param_sources: Source files, patches and checksums ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * **sources** : list of source files (filenames only) * **source urls** : list of URLs where sources can be downloaded * **patches** : list of patch files to be applied ( ``.patch`` extension) * **checksums** : list of checksums for source and patch files Remarks: * sources are downloaded (best effort), unless already available * proxy settings are taken into account, since the `urllib2 Python package <https://docs.python.org/2/library/urllib2.html> `_ is used for downloading (since EasyBuild v2.0) * patches need to be EasyBuild-compatible * unified diff format ( ``diff -ruN`` ) * patched locations relative to unpacked sources * see :ref: `common_easyconfig_param_sources_patches` for more information on ``patches`` * see :ref: `common_easyconfig_param_sources_checksums` for more information on ``checksums`` * ``sources`` is usually specified as a list of strings representing filenames for source files, but other formats are supported too, see :ref: `common_easyconfig_param_sources_alt` Example: .. code :: python name = 'HPL' version = '2.2' [ ... ] source_urls = [ 'http://www.netlib.org/benchmark/hpl' ] sources = [ 'hpl- %(version)s .tar.gz' ] # fix Make dependencies, so parallel build also works patches = [ 'HPL_parallel-make.patch' ] checksums = [ 'ac7534163a09e21a5fa763e4e16dfc119bc84043f6e6a807aba666518f8df440' ] [ ... ] .. note :: Rather than hardcoding the version (and name) in the list of sources, a string template `%(version)s` can be used, see also :ref: `easyconfig_param_templates` . .. _common_easyconfig_param_sources_patches: Patches ^^^^^^^ Patches can be provided via the ``patches`` easyconfig parameter (list). A patch can be defined as: * a ``string`` , * a ``tuple`` of 2 elements, or * a ``dict`` The most straight-forward use-case is ``string`` , which contains the name of the patch file (and must have ``.patch`` extension). A ``tuple`` adds the possibility to specify where patch should be applied. This is mostly needed if a patch file adds new files or it is generally not possible to determine the starting directory. The first element is the patch file and the second is either the patch level (as an integer) which is used in the patch command ( ``patch -p<n>`` ) or a directory relative to the unpacked source dir. .. note :: ``tuple`` also has a special use case if the patch file has any other extension than ``.patch`` . In this case, the first tuple argument is a file which should be copied to the unpacked source dir and the second tuple argument is the target path, where the files should be copied to (relative to the unpacked source dir). See below for an example of this use case. A ``dict`` adds the ability to pass the ``patch`` command additional arguments. For example, the ``--binary`` flag is needed to patch files with CRLF endings. The ``dict`` has a required ``filename`` key, with ``level`` and ``opts`` being optional ones. .. note :: Specifying only ``filename`` in ``dict`` is the same as using a plain ``string`` definition. Specifying ``filename`` and ``level`` is same as using a ``tuple`` definition. Example: .. code :: python patches = [ # a simple patch file 'name-versions-fix.patch' , # when creating only new files by patch file, you need to specify the level: ( 'name-versions-fix.patch' , 1 ), # apply the patch in a (sub-)subdirectory inside the source tree ( 'name-versions-fix.patch' , 'src/subfolder' ), # copy file to target_path folder ( 'Makefile' , 'target_path' ), # specify patch file and optionally level and opts for patch command { 'filename' : 'name-versions-fix.patch' , 'level' : 1 , 'opts' : '-l' } ] .. _common_easyconfig_param_sources_checksums: Checksums ^^^^^^^^^ Checksums for source files and patches can be provided via the ``checksums`` easyconfig parameter. EasyBuild does not enforce checksums to be available for all source files and patches. Provided checksums will be 'consumed' first for the specified sources (in order), and subsequently also for patches. Nevertheless, providing checksums for *all* source files and patches is highly recommended. If checksums are provided, the checksum of the corresponding source files and patches is verified to match. The ``checksums`` easyconfig parameter is usually defined as a list of strings. Until EasyBuild v3.3.0, only MD5 checksums could be provided through a list of strings. Since EasyBuild v3.3.0, the checksum type is determined by looking at the length of the string: * 32-character strings are considered to be MD5 checksums ( ``md5`` ) * 64-character strings are considered to be SHA256 checksums ( ``sha256`` ) * (other lengths will result in an error message) The intention is to move towards making ``sha256`` the recommended and default checksum type. Other checksum types are also supported: ``adler32`` , ``crc32`` , ``sha1`` , ``sha512`` , ``size`` (filesize in bytes). To provide checksum values of a specific type, elements of the ``checksums`` list can also be 2-element tuples of the form ``('<checksum type>', '<checksum value>')`` . For example: .. code :: python checksums = [( 'sha512' , 'f962008105639f58e9a4455c8057933ab0a5e2f43db8340ae1e1afe6dc2d24105bfca3b2e1f79cb242495ca4eb363c9820d8cea6084df9d62c4c3e5211d99266' )] .. _inject_checksums: Adding or replacing checksums using ``--inject-checksums`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Using the ``--inject-checksums`` command line option, you can let EasyBuild add or update checksums in one or more easyconfig files (which is significantly more convenient than doing it manually). With ``--inject-checksums`` , checksums are injected for all sources and patches (if any), as well as for all sources & patches of every extension listed in ``exts_list`` (if any, see :ref: `module_extensions` ). If the sources (& patches) are not available yet, EasyBuild will try to download them first; i.e., the ``fetch`` step is run prior to computing & injecting the checksums. A backup is created of every easyconfig file that is touched by ``--inject-checksums`` , to avoid accidental loss of information. Backups are given an additional extension of the form ``.bak_<year><month><day><hour><min><sec>`` . .. note :: To clean up backup easyconfig files, you can use this one-liner :: find . -name '*.eb.bak_*' | xargs rm -v The ``-v`` option makes ``rm`` print the path of files that are being removed. **Do use this with care; just run** ``find . -name '*.eb.bak_*'`` **first in case of doubt!** Multilple easyconfigs can be specified when using ``--inject-checksums`` , they will be processed in sequence. In addition, you can also combine ``--inject-checksums`` with ``--robot`` , see :ref: `inject_checksums_robot_synergy` . .. _inject_checksums_adding: Adding checksums when none are specified yet ******************************************** If the easyconfig file does not specify any checksums yet, they are simply injected after the ``sources`` (or ``patches`` , if present) specification when ``--inject-checksums`` is used. For example :: $ eb bzip2-1.0.6.eb --inject-checksums == temporary log file in case of crash /tmp/eb-Vm6w3e/easybuild-cAVQl6.log == injecting sha256 checksums in /example/bzip2-1.0.6.eb == fetching sources & patches for bzip2-1.0.6.eb... == backup of easyconfig file saved to /example/bzip2-1.0.6.eb.bak_20170824200906... == injecting sha256 checksums for sources & patches in bzip2-1.0.6.eb... == * bzip2-1.0.6.tar.gz: a2848f34fcd5d6cf47def00461fcb528a0484d8edef8208d6d2e2909dc61d9cd == Temporary log file(s) /tmp/eb-Vm6w3e/easybuild-cAVQl6.log* have been removed. == Temporary directory /tmp/eb-Vm6w3e has been removed. The backup easyconfig file can be used to double-check the difference between the original easyconfig file and the one produced by ``--inject-checksums`` :: $ diff -u /example/bzip2-1.0.6.eb.bak_20170824200906 /example/bzip2-1.0.6.eb diff --git a//example/bzip2-1.0.6.eb.bak_20170824200906 b/example/bzip2-1.0.6.eb index 46b2debed..2eb73f15a 100644 --- a/example/bzip2-1.0.6.eb.bak_20170824200906 +++ b/example/bzip2-1.0.6.eb @@ -9,8 +9,9 @@ compressors), whilst being around twice as fast at compression and six times fas toolchain = SYSTEM toolchainopts = {'pic': True} -sources = [SOURCE_TAR_GZ] source_urls = ['http://www.bzip.org/%(version)s/'] +sources = [SOURCE_TAR_GZ] +checksums = ['a2848f34fcd5d6cf47def00461fcb528a0484d8edef8208d6d2e2909dc61d9cd'] buildopts = \"CC=gcc CFLAGS='-Wall -Winline -O3 -fPIC -g $(BIGFILES)'\" .. note :: Along with injecting checksums, EasyBuild will also reorder the ``source_urls`` , ``sources`` and ``patches`` specifications, in that order and if they are present, and include the ``checksums`` specification afterwards. This is done to facilitate working towards a uniform style in easyconfig files, which also applies to the order of specified easyconfig parameters. .. _inject_checksums_replacing: Replacing existing checksums **************************** When one or more checksums are already specified, EasyBuild requires the use of ``--force`` together with ``--inject-checksums`` to replace those checksums. A clear warning will be printed to notify that existing checksums will be replaced. For example :: $ eb bzip2-1.0.6.eb --inject-checksums == temporary log file in case of crash /tmp/eb-WhSwVH/easybuild-HCODnl.log == injecting sha256 checksums in /example/bzip2-1.0.6.eb == fetching sources & patches for bzip2-1.0.6.eb... ERROR: Found existing checksums, use --force to overwrite them .. code :: bash $ eb bzip2-1.0.6.eb --inject-checksums --force == temporary log file in case of crash /tmp/eb-dS2QLa/easybuild-JGxOzC.log == injecting sha256 checksums in /example/bzip2-1.0.6.eb == fetching sources & patches for bzip2-1.0.6.eb... WARNING: Found existing checksums in bzip2-1.0.6.eb, overwriting them ( due to use of --force ) ... == backup of easyconfig file saved to /example/bzip2-1.0.6.eb.bak_20170824203850... == injecting sha256 checksums for sources & patches in bzip2-1.0.6.eb... ... .. note :: Any existing checksums are *blindly* replaced when ``--inject-checksums --force`` is used: the existing checksums are *not verified* to be correct as during normal use of EasyBuild (since that would kind of defeat the purpose of ``--inject-checksums`` ). In addition, it also doesn't matter whether or not checksums are available for all sources & patches: with ``--inject-checksums`` , checksums will be added for *all* sources and patches, including for extensions listed in ``exts_list`` (if any). .. _inject_checksums_robot_synergy: Synergy between ``--inject-checksums`` and ``--robot`` ****************************************************** When ``--inject-checksums`` is combined with ``--robot`` , checksums are injected for *each* easyconfig file in the dependency graph for which no module is available yet. For example, to inject checksums in *every* easyconfig file required to build HPL 2.2 with the ``foss/2017a`` toolchain :: $ MODULEPATH= eb HPL-2.2-foss-2017a.eb --installpath /tmp/$USER/sandbox --inject-checksums --robot == temporary log file in case of crash /tmp/eb-8HpJc3/easybuild-H35khM.log == resolving dependencies ... ... == injecting sha256 checksums in /example/GCCcore-6.3.0.eb ... == injecting sha256 checksums in /example/OpenMPI-2.0.2-GCC-6.3.0-2.27.eb ... == injecting sha256 checksums in /example/FFTW-3.3.6-gompi-2017a.eb ... == injecting sha256 checksums in /example/HPL-2.2-foss-2017a.eb ... .. note :: We are clearing ``$MODULEPATH`` and specifying a custom (empty) location to ``--installpath`` to avoid that EasyBuild skips any easyconfig because a corresponding module is already available. .. _inject_checksums_type: Type of checksum to inject ************************** By default, ``--inject-checksums`` will compute & inject ``SHA256`` checksums, but a different checksum type can be specified as an argument (e.g., ``--inject-checksums md5`` ). .. note :: Because of the optional argument that can be passed to ``--inject-checksums`` , you should not specify an easyconfig file name directly after the ``--inject-checksums`` , since it will be assumed to specify a checksum type, which will result in an error message like :: $ eb --inject-checksums bzip2-1.0.6.eb Usage: eb [options] easyconfig [...] eb: error: option --inject-checksums: invalid choice: 'bzip2-1.0.6.eb' (choose from 'adler32', 'crc32', 'md5', 'sha1', 'sha256', 'sha512', 'size') .. _common_easyconfig_param_sources_alt: Alternative formats for ``sources`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ In some cases, it can be required to provide additional information next to the name of a source file, e.g., a custom extraction command (because the one derived from the file extension is not correct), or an altername filename that should be used to download the source file. This can be specified using a Python dictionary value in the ``sources`` easyconfig parameter. Since EasyBuild v3.3.0, three keys are supported: * ``filename`` ( *mandatory* ): filename of source file * ``download_filename`` : filename that should be used when downloading this source file; the downloaded file will be saved using the ``filename`` value * ``extract_cmd`` : custom extraction command for this source file * ``source_urls`` : source URLs to consider for downloading this source file * ``git_config`` : see :ref: `common_easyconfig_param_sources_git_config` For example: .. code :: python sources = [{ 'source_urls' : [ 'https://example.com' ], 'filename' : 'example- %(version)s .gz' , 'download_filename' : 'example.gz' , # provided source tarball is not versioned... 'extract_cmd' : \"tar xfvz %s \" , # source file is actually a gzipped tarball (filename should be .tar.gz) }] .. note :: Custom extraction commands can also be specified as a 2-element tuple, but this format has been deprecated in favor of the Python dictionary format described above; see also :ref: `depr_sources_2_element_tuple` . Using ``download_instructions`` for user-side part of installation ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ In some cases, getting some of the files required for an installation cannot be automated. Reasons for this include: * there is a manual stage to combine multiple downloaded files into the required installation file * the file requires a login to download You can use the ``download_instructions`` parameter to specify steps for the user to do. This parameter takes string value and prints it whenever build fails because any file needed was not found. If ``download_instructions`` is not specified, Easybuild prints the default message stating the paths that were tested. .. code :: python download_instructions = \"\"\" Step 1: Go to example.com and download example.jar. Step 2: Install example.jar (ensure Java is installed). Step 3: Go to the installation directory and create Tarball of its contents (tar -czvf example.tar.gz *). Step 4: Move created Tarball into the same directory, where your easyconfig is located and run build again. \"\"\" .. _common_easyconfig_param_sources_git_config: Downloading from a Git repository ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v3.7.0, support for downloading directly from a Git repository is available. When ``git_config`` is provided for a particular source file (see :ref: `common_easyconfig_param_sources_alt` ), EasyBuild will create a source tarball after downloading the specified Git repository. The value for ``git_config`` is a Python dictionary, where the following keys are *mandatory* : * ``url`` : the URL where the Git repository is located * ``repo_name`` : the name of the Git repository The value for ``filename`` in the source specification *must* end in ``.tar.gz`` (because a gzipped tarball will be created from the cloned repository). In addition, either of the following keys *must* also be defined: * ``tag`` : the specific tag to download * ``commit`` : the specific commit ID to download If a recursive checkout should be made of the repository, the ``recursive`` key can be set to ``True`` . To also retain the ``.git`` directory (which holds the Git metadata for the repository), you can set the ``keep_git_dir`` to ``True`` (supported since EasyBuild v4.2.0). A different name for the top-level directory can be specified via ``clone_into`` ; by default the name of the repository is used. Examples: * creating a source tarball named ``example-main.tar.gz`` of the ``main`` branch of a (fictional) ``test`` repository from ``https://agitserver.org/example`` , and use ``example-test`` as top-level directory name: .. code :: sources = [{ 'filename': 'example-main.tar.gz', 'git_config': { 'url': 'https://agitserver.org/example', 'repo_name': 'test', 'tag': 'main', 'clone_into': 'example-test', }, }] * creating a source tarball named ``example-20180920.tar.gz`` of the recursive checkout of commit ``abcdef12`` of the ``test`` repository from ``https://agitserver.org/example`` : .. code :: sources = [{ 'filename': 'example-20180920.tar.gz', 'git_config': { 'url': 'https://agitserver.org/example', 'repo_name': 'test', 'commit': 'abcdef12', 'recursive': True, 'keep_git_dir': True, }, }] .. note :: Because the source tarball is created locally (by running ``tar cfvz`` on the directory containing the cloned repository), the (SHA256) checksum is not guaranteed to be the same across different systems. Whenever you have the option to download a source tarball (or equivalent) directly (for example from GitHub, which also allows downloading a tarball of a specific commit), we strongly recommend you to do so, ``git_config`` is intended for other Git repos. .. _dependency_specs: Dependencies ~~~~~~~~~~~~ * **dependencies** : build/runtime dependencies * **builddependencies** : build-only dependencies (not in module) * **hiddendependencies** : dependencies via hidden modules (see also :ref: `hide_deps` ) * **osdependencies** : system dependencies (package names) Remarks: * modules must exist for all (non-system) dependencies * (non-system) dependencies can be resolved via ``--robot`` * format: ``(<name>, <version>[, <versionsuffix>[, <toolchain>]])`` Example: .. code :: python name = 'GTI' ... toolchain = { 'name' : 'goolf' , 'version' : '1.5.14' } dependencies = [( 'PnMPI' , '1.2.0' )] builddependencies = [( 'CMake' , '2.8.12' , '' , ( 'GCC' , '4.8.2' ))] For each of the specified (build) dependencies, the corresponding module will be loaded in the build environment defined by EasyBuild. For the *runtime* dependencies, ``module load`` statements will be included in the generated module file. .. note :: By default, EasyBuild will try to resolve dependencies using the same toolchain as specified for the software being installed. As of v3.0, if no easyconfig exists to resolve a dependency using the default toolchain EasyBuild will search for the dependency using a compatible subtoolchain. A different toolchain can be specified on a per-dependency level (cfr. the ``CMake`` build dependency in the example above). Alternatively, you can instruct EasyBuild to use the most minimal (sub)toolchain when resolving dependencies, see :ref: `minimal_toolchains` . Loading of modules for dependencies with a ``system`` toolchain ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ When a :ref: `system_toolchain` is used, the modules for each of the (build) dependencies are *always* loaded, regardless of the toolchain version (as opposed the behaviour with the ``dummy`` toolchain in EasyBuild versions prior to v4.0, see :ref: `system_toolchain_motivation_deprecating_dummy` ). Specifying dependencies using ``system`` toolchain ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To make EasyBuild resolve a dependency using the ``system`` toolchain, simply use the ``SYSTEM`` template constant as the 4th value in the tuple representing the dependency specification. For example, to specify PnMPI version 1.2.0 built with the ``system`` toolchain as a (runtime) dependency :: dependencies = [('PnMPI', '1.2.0', '', SYSTEM)] Using external modules as dependencies ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v2.1, specifying modules that are not provided via EasyBuild as dependencies is also supported. See :ref: `using_external_modules` for more information. Extensions ~~~~~~~~~~ Besides dependencies, which are found outside the software being built but are part of the site's EasyBuild installation, it is also possible to incorporate extensions to the software within the build. This is done via the ``exts_list`` array. Each entry in ``exts_list`` is a three-component tuple, with the name and version number, and a dictionary of configuration options for the entry: .. code :: python exts_list = [ ( 'name' , 'version' , { 'option' : 'value' , 'option' : 'value' }) ] The latter may contain essentially any of the full easyconfig parameters, including ``buildopts`` , ``installopts`` , etc. Among those options, the following exceptions and special cases should be noted: * **nosource** : If set ``True`` , no download will be done * **source_tmpl** : Template string for the file to be downloaded * default is ``'%(name)s-%(version)s.tar.gz'`` * ``%(name)s`` and ``%(version)s`` come from the ``exts_list`` entry (above) * **sources** : Dictionary specifying details of where to download the extension * equivalent to a single entry from the easyconfig ``sources`` list * preferred to use of ``source_tmpl`` * **start_dir** : If not set, will be derived; the easyconfig value will not be used .. code :: python exts_list = [ ( 'llvmlite' , '0.26.0' , { 'source_urls' : [ 'https://pypi.python.org/packages/source/l/llvmlite/' ], 'patches' : [ 'llvmlite-0.26.0_fix-ffi-Makefile.patch' ], 'checksums' : [ '13e84fe6ebb0667233074b429fd44955f309dead3161ec89d9169145dbad2ebf' , # llvmlite-0.26.0.tar.gz '40e6fe6de48709b45daebf8082f65ac26f73a4afdf58fc1e8099b97c575fecae' , # llvmlite-0.26.0_fix-ffi-Makefile.patch ], }), ( 'singledispatch' , '3.4.0.3' , { 'source_urls' : [ 'https://pypi.python.org/packages/source/s/singledispatch/' ], 'checksums' : [ '5b06af87df13818d14f08a028e42f566640aef80805c3b50c5056b086e3c2b9c' ], }), ( name , version , { 'source_urls' : [ 'https://pypi.python.org/packages/source/n/numba/' ], 'checksums' : [ 'c62121b2d384d8b4d244ef26c1cf8bb5cb819278a80b893bf41918ad6d391258' ], }), ] That third instance uses the ``name`` and ``version`` variables defined in the easyconfig file. Since EasyBuild v4.2.2, a single-entry ``sources`` dictionary (see :ref: `_common_easyconfig_param_sources_alt` ) may be included in an ``exts_list`` entry. For example, to download Git sources from a private repository and convert them to a tar-ball for installation: .. code :: python exts_defaultclass = 'PythonPackage' exts_list = [ ( 'pyCAP' , '0.1' , { 'sources' : { 'filename' : ' %(name)s - %(version)s .tar.gz' , 'git_config' : { 'url' : 'ssh://nero.stanford.edu/data/git/Analysis' , 'repo_name' : 'pyCAP' , 'tag' : ' %(version)s ' , } } }), ] Here, the template strings ``%(name)s`` and ``%(version)s`` will be substituted from the ``exts_list`` entry elements (\"pyCAP\" and \"0.1\", respectively), not from the easyconfig values. .. _configure_build_install_command_options: Configure/build/install command options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * **configopts** : options for configure command * **preconfigopts** : options used as prefix for configure command In analogy to `configure` , also `build` and `install` commands are tuneable: * **buildopts, prebuildopts** : options for build command * **installopts, preinstallopts** : options for install command Example: .. code :: python easyblock = 'ConfigureMake' ... # configure with: ./autogen.sh && ./configure CC=\"$CC\" CFLAGS=\"$CFLAGS\" preconfigopts = \"./autogen.sh && \" buildopts = 'CC=\"$CC\" CFLAGS=\"$CFLAGS\"' # install with: make install PREFIX=<installation prefix> installopts = 'PREFIX= %(installdir)s ' .. note :: For more details w.r.t. use of string templates like ``%(installdir)s`` , see :ref: `easyconfig_param_templates` . .. _configure_build_install_command_options_iterate: List of configure/build/install options ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ In some cases, the *configure-build-install* cycle must be executed multiple times during a single installation, using different options for one or more steps. EasyBuild supports specifying a *list* of strings, each of which specifying a particular set of options to use. For example, to perform the installation procedure with three different sets of configuration options: .. code :: python configopts = [ \"--common-opt --one --one-more\" , \"--common-opt --two\" , \"--common-opt --three\" , ] This way, EasyBuild will perform the *configure-build-install* cycle **three** times: * configure using ``--common-opt --one --one-more`` , build and install * configure using ``--common-opt --two`` , build and install on top of the existing installation * configure using ``--common-opt --three`` , build and install once more on top of what is installed already During this process, the environment is reset and the build directory is cleaned up after each cycle, while the installation directory is left untouched (in order to not destroy the result of earlier cycles). If several ``(pre){config|build|install}opts`` parameters are defined as being a list of strings, the number of items in the lists must be the same. Any of these parameters defined as a single string value are just reused for each of the cycles performed. For example: .. code :: python easyblock = 'ConfigureMake' configopts = [ '--one' , '--two' , '--three' ] buildopts = 'lib' preinstallopts = [ 'TYPE=one' , 'TYPE=two' , 'TYPE=three' ] would result in: * ``./configure --prefix=... --one; make lib; TYPE=one make install`` * ``./configure --prefix=... --two; make lib; TYPE=two make install`` * ``./configure --prefix=... --three; make lib; TYPE=three make install`` An example use case of this is building FFTW with different precisions, see the `FFTW easyconfig files <https://github.com/easybuilders/easybuild-easyconfigs/tree/main/easybuild/easyconfigs/f/FFTW> `_ . Sanity check ~~~~~~~~~~~~ Custom paths and commands to be used in the sanity check step can be specified using the respective parameters. These are used to make sure that an installation didn't (partly) fail unnoticed. * **sanity_check_paths** : files/directories that must get installed * **sanity_check_commands** : (simple) commands that must work when the installed module is loaded Remarks: * format: Python dictionary with ( `only` ) ``files`` / ``dirs`` keys * values must be lists of (tuples of) strings, one of both **must** be non-empty * paths are `relative` to installation directory * for a path specified as a tuple, only one of the specified paths must be available * default values: * paths: non-empty ``bin`` and ``lib`` or ``lib64`` directories * commands: none Example: .. code :: python sanity_check_paths = { 'files' : [ \"bin/xhpl\" ], 'dirs' : [], } .. _writing_easyconfigs_easyblock_spec: Easyblock specification ~~~~~~~~~~~~~~~~~~~~~~~ To make EasyBuild use a specific (usually generic) easyblock the **easyblock** parameter can be used. By default, EasyBuild will assume that the easyblock to use can be derived from the software name. For example: for ``GCC`` , EasyBuild will look for an easyblock class named ``EB_GCC`` in the Python module ``easybuild.easyblocks.gcc`` . A list of available easyblocks is available via ``--list-easyblocks`` (see also :ref: `list_easyblocks` ); generic easyblocks are the ones for which the name does *not* start with ``EB_`` . Example: .. code :: python easyblock = 'CMakeMake' name = 'GTI' version = '1.2.0' ... .. tip :: It is highly recommended to use existing (generic) easyblocks, where applicable. This avoids the need for creating (and maintaining) new easyblocks. Typically, generic easyblocks support several custom easyconfig parameters which allow to steer their behavior (see also :ref: `avail_easyconfig_params` ). Example: .. code :: python easyblock = 'Binary' [ ... ] install_cmd = \"./install.bin\" [ ... ] Module class ~~~~~~~~~~~~ The category to which the software belongs to can be specified using the **moduleclass** easyconfig parameter. By default, the ``base`` module class is used (which should be replaced with a more appropriate category). EasyBuild enforces that only known module classes can be specified (to avoid misclassification due to typos). The default list of module classes is available via ``--show-default-moduleclasses`` ; additional module classes can be defined via the ``--moduleclasses`` configure option. Example: .. code :: python name = 'GCC' [ ... ] moduleclass = 'compiler' .. note :: By default, EasyBuild will create a symlink to the generated module file in a module class-specific path. This behavior is configurable through the module naming scheme being used. .. tip :: The module class may play a significant role in other aspects. For example, the alternative (hierarchical) module naming scheme ``HierarchicalMNS`` heavily relies on the ``moduleclass`` parameter for discriminating compilers and MPI libraries. Tweaking existing easyconfig files ---------------------------------- The ability to modify easyconfig files on the fly with EasyBuild, provides a very powerful and flexible feature to describe builds, without having to manually create all the input files. Tweaking existing easyconfigs can be done using the ``--try-*`` command lines options. See :ref: `tweaking_easyconfigs_using_try` for more details. Example: * GCC version update:: eb GCC-4.9.0.eb --try-software-version=4.9.1 * install WRF + its dozen dependencies with a different toolchain (!):: eb WRF-3.5.1-ictce-5.3.0-dmpar.eb --try-toolchain=intel,2014b -r .. _easyconfig_param_templates: Dynamic values for easyconfig parameters ---------------------------------------- String templates are completed using the value of particular easyconfig parameters, typically ``name`` and/or ``version`` . These help to avoid hardcoding values in multiple locations. A list of available string templates can be obtained using ``--avail-easyconfig-templates`` . Additionally, constants that can be used in easyconfig files are available via ``--avail-easyconfig-constants`` . Example: .. code :: python name = 'GCC' version = '4.8.3' ... source_urls = [ # http://ftpmirror.gnu.org/gcc/gcc-4.8.3 'http://ftpmirror.gnu.org/ %(namelower)s / %(namelower)s - %(version)s ' , ] sources = [ SOURCELOWER_TAR_GZ ] # gcc-4.8.3.tar.gz ... .. note :: Proper use of string templates is important, in particular to avoid hardcoding the software version in multiple locations of an easyconfig file; this is critical to make ``--try-software-version`` behave as expected (see also :ref: `tweaking_easyconfigs_using_try` ). Version-specific documentation relevant to easyconfigs ------------------------------------------------------ * :ref: `Available config file constants <avail_cfgfile_constants>` * :ref: `Available easyconfig parameters <vsd_avail_easyconfig_params>` * :ref: `Constants available for easyconfig files <avail_easyconfig_constants>` * :ref: `License constants available for easyconfig files <avail_easyconfig_licenses>` * :ref: `List of available easyblocks <vsd_list_easyblocks>` * :ref: `List of available toolchain options <avail_toolchain_opts>` * :ref: `List of known toolchains <vsd_list_toolchains>` * :ref: `List of supported software <list_software>` * :ref: `Overview of generic easyblocks <generic_easyblocks>` * :ref: `Templates available for easyconfig files <avail_easyconfig_templates>` Contributing easyconfigs ------------------------ **Contribute your working easyconfig files!** Share your expertise with the community, avoid duplicate work, especially if: * the software package is not supported yet * an existing easyconfig needs (non-trivial) changes for a different version/toolchain * it is a frequently used software package (compilers, MPI, etc.) See :ref: `contributing` for more information.","title":"Writing easyconfig files"},{"location":"writing-easyconfig-files/#writing-easyconfig-files","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Writing_easyconfig_files.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Writing_easyconfig_files.rst in easybuilders/easybuild repo target: docs/writing-easyconfig-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _writing_easyconfig_files: Writing easyconfig files: the basics ==================================== This page explains all the basic information about how to write easyconfig files. For software builds that follow established build patterns, an easyconfig is all that you need to create in order to build and install the software and the corresponding module file. Luckily, the majority of software delivery mechanisms are being designed around either autotools or CMake or, perhaps, some simple file extraction/copy pattern. In that case, a *generic easyblock* can be leveraged; see :ref: `generic_easyblocks` . Yet, in case the software build calls for more elaborate steps (scientific software never fails to surprise us in this regard), a software-specific easyblock may be required; see :ref: `implementing_easyblocks` . .. contents :: :depth: 3 :backlinks: none .. _what_is_an_easyconfig: What is an easyconfig (file)? ----------------------------- An easyconfig file serves as a `build specification` for EasyBuild. It consists of a plain text file (in Python syntax) with mostly `key-value` assignment to define **easyconfig parameters** . Easyconfigs typically follow a (fixed) strict naming scheme, i.e. ``<name>-<version>[-<toolchain>][<versionsuffix>].eb`` . The ``-<toolchain>`` label (which includes the toolchain name and version) is omitted when a :ref: `system_toolchain` is used. The ``<versionsuffix>`` label is omitted when the version suffix is empty. .. note :: the filename of an easyconfig is only important w.r.t. dependency resolution ( ``--robot`` ), see :ref: `use_robot` . Example: .. code :: python # easyconfig file for GCC v4.8.3 name = 'GCC' version = '4.8.3' ... .. tip :: Comments can be included in easyconfig files using the hash ( ``#`` ) character (just like in Python code). Available easyconfig parameters ------------------------------- About 50 different (generic) easyconfig parameters are supported currently. An overview of all available easyconfig parameters is available via the ``-a`` command line option. By default, the parameters specific to generic (default) easyblock ``ConfigureMake`` are included; using ``--easyblock`` / ``-e`` parameters that are specific to a particular easyblock can be consulted. See :ref: `easyconfig_params` for more details. Example :: $ eb -a -e Binary Available easyconfig parameters (* indicates specific for the Binary EasyBlock) MANDATORY --------- [..] name: Name of software (default: None) [...] EASYBLOCK-SPECIFIC ------------------ install_cmd(*): Install command to be used. (default: None) [...] Mandatory easyconfig parameters ------------------------------- A handful of easyconfig parameters are `mandatory` : * **name, version** : specify what software (version) to build * **homepage, description** : metadata (used for module help) * **toolchain** : specifies name and version of compiler toolchain to use * format: dictionary with name/version keys, e.g., ``{'name': 'foo', 'version': '1.2.3'}`` * a list of supported toolchains can be found :ref: `here <vsd_list_toolchains>` Remarks: * some others are planned to be required in the future * `docurls, software license, software license urls` Example: .. code :: python name = 'HPL' version = '2.0' homepage = 'http://www.netlib.org/benchmark/hpl/' description = \"High Performance Computing Linpack Benchmark\" toolchain = { 'name' : 'goolf' , 'version' : '1.4.10' } [ ... ] Common easyconfig parameters ---------------------------- This section includes an overview of some commonly used (optional) easyconfig parameters. .. _common_easyconfig_param_sources: Source files, patches and checksums ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * **sources** : list of source files (filenames only) * **source urls** : list of URLs where sources can be downloaded * **patches** : list of patch files to be applied ( ``.patch`` extension) * **checksums** : list of checksums for source and patch files Remarks: * sources are downloaded (best effort), unless already available * proxy settings are taken into account, since the `urllib2 Python package <https://docs.python.org/2/library/urllib2.html> `_ is used for downloading (since EasyBuild v2.0) * patches need to be EasyBuild-compatible * unified diff format ( ``diff -ruN`` ) * patched locations relative to unpacked sources * see :ref: `common_easyconfig_param_sources_patches` for more information on ``patches`` * see :ref: `common_easyconfig_param_sources_checksums` for more information on ``checksums`` * ``sources`` is usually specified as a list of strings representing filenames for source files, but other formats are supported too, see :ref: `common_easyconfig_param_sources_alt` Example: .. code :: python name = 'HPL' version = '2.2' [ ... ] source_urls = [ 'http://www.netlib.org/benchmark/hpl' ] sources = [ 'hpl- %(version)s .tar.gz' ] # fix Make dependencies, so parallel build also works patches = [ 'HPL_parallel-make.patch' ] checksums = [ 'ac7534163a09e21a5fa763e4e16dfc119bc84043f6e6a807aba666518f8df440' ] [ ... ] .. note :: Rather than hardcoding the version (and name) in the list of sources, a string template `%(version)s` can be used, see also :ref: `easyconfig_param_templates` . .. _common_easyconfig_param_sources_patches: Patches ^^^^^^^ Patches can be provided via the ``patches`` easyconfig parameter (list). A patch can be defined as: * a ``string`` , * a ``tuple`` of 2 elements, or * a ``dict`` The most straight-forward use-case is ``string`` , which contains the name of the patch file (and must have ``.patch`` extension). A ``tuple`` adds the possibility to specify where patch should be applied. This is mostly needed if a patch file adds new files or it is generally not possible to determine the starting directory. The first element is the patch file and the second is either the patch level (as an integer) which is used in the patch command ( ``patch -p<n>`` ) or a directory relative to the unpacked source dir. .. note :: ``tuple`` also has a special use case if the patch file has any other extension than ``.patch`` . In this case, the first tuple argument is a file which should be copied to the unpacked source dir and the second tuple argument is the target path, where the files should be copied to (relative to the unpacked source dir). See below for an example of this use case. A ``dict`` adds the ability to pass the ``patch`` command additional arguments. For example, the ``--binary`` flag is needed to patch files with CRLF endings. The ``dict`` has a required ``filename`` key, with ``level`` and ``opts`` being optional ones. .. note :: Specifying only ``filename`` in ``dict`` is the same as using a plain ``string`` definition. Specifying ``filename`` and ``level`` is same as using a ``tuple`` definition. Example: .. code :: python patches = [ # a simple patch file 'name-versions-fix.patch' , # when creating only new files by patch file, you need to specify the level: ( 'name-versions-fix.patch' , 1 ), # apply the patch in a (sub-)subdirectory inside the source tree ( 'name-versions-fix.patch' , 'src/subfolder' ), # copy file to target_path folder ( 'Makefile' , 'target_path' ), # specify patch file and optionally level and opts for patch command { 'filename' : 'name-versions-fix.patch' , 'level' : 1 , 'opts' : '-l' } ] .. _common_easyconfig_param_sources_checksums: Checksums ^^^^^^^^^ Checksums for source files and patches can be provided via the ``checksums`` easyconfig parameter. EasyBuild does not enforce checksums to be available for all source files and patches. Provided checksums will be 'consumed' first for the specified sources (in order), and subsequently also for patches. Nevertheless, providing checksums for *all* source files and patches is highly recommended. If checksums are provided, the checksum of the corresponding source files and patches is verified to match. The ``checksums`` easyconfig parameter is usually defined as a list of strings. Until EasyBuild v3.3.0, only MD5 checksums could be provided through a list of strings. Since EasyBuild v3.3.0, the checksum type is determined by looking at the length of the string: * 32-character strings are considered to be MD5 checksums ( ``md5`` ) * 64-character strings are considered to be SHA256 checksums ( ``sha256`` ) * (other lengths will result in an error message) The intention is to move towards making ``sha256`` the recommended and default checksum type. Other checksum types are also supported: ``adler32`` , ``crc32`` , ``sha1`` , ``sha512`` , ``size`` (filesize in bytes). To provide checksum values of a specific type, elements of the ``checksums`` list can also be 2-element tuples of the form ``('<checksum type>', '<checksum value>')`` . For example: .. code :: python checksums = [( 'sha512' , 'f962008105639f58e9a4455c8057933ab0a5e2f43db8340ae1e1afe6dc2d24105bfca3b2e1f79cb242495ca4eb363c9820d8cea6084df9d62c4c3e5211d99266' )] .. _inject_checksums: Adding or replacing checksums using ``--inject-checksums`` ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Using the ``--inject-checksums`` command line option, you can let EasyBuild add or update checksums in one or more easyconfig files (which is significantly more convenient than doing it manually). With ``--inject-checksums`` , checksums are injected for all sources and patches (if any), as well as for all sources & patches of every extension listed in ``exts_list`` (if any, see :ref: `module_extensions` ). If the sources (& patches) are not available yet, EasyBuild will try to download them first; i.e., the ``fetch`` step is run prior to computing & injecting the checksums. A backup is created of every easyconfig file that is touched by ``--inject-checksums`` , to avoid accidental loss of information. Backups are given an additional extension of the form ``.bak_<year><month><day><hour><min><sec>`` . .. note :: To clean up backup easyconfig files, you can use this one-liner :: find . -name '*.eb.bak_*' | xargs rm -v The ``-v`` option makes ``rm`` print the path of files that are being removed. **Do use this with care; just run** ``find . -name '*.eb.bak_*'`` **first in case of doubt!** Multilple easyconfigs can be specified when using ``--inject-checksums`` , they will be processed in sequence. In addition, you can also combine ``--inject-checksums`` with ``--robot`` , see :ref: `inject_checksums_robot_synergy` . .. _inject_checksums_adding: Adding checksums when none are specified yet ******************************************** If the easyconfig file does not specify any checksums yet, they are simply injected after the ``sources`` (or ``patches`` , if present) specification when ``--inject-checksums`` is used. For example :: $ eb bzip2-1.0.6.eb --inject-checksums == temporary log file in case of crash /tmp/eb-Vm6w3e/easybuild-cAVQl6.log == injecting sha256 checksums in /example/bzip2-1.0.6.eb == fetching sources & patches for bzip2-1.0.6.eb... == backup of easyconfig file saved to /example/bzip2-1.0.6.eb.bak_20170824200906... == injecting sha256 checksums for sources & patches in bzip2-1.0.6.eb... == * bzip2-1.0.6.tar.gz: a2848f34fcd5d6cf47def00461fcb528a0484d8edef8208d6d2e2909dc61d9cd == Temporary log file(s) /tmp/eb-Vm6w3e/easybuild-cAVQl6.log* have been removed. == Temporary directory /tmp/eb-Vm6w3e has been removed. The backup easyconfig file can be used to double-check the difference between the original easyconfig file and the one produced by ``--inject-checksums`` :: $ diff -u /example/bzip2-1.0.6.eb.bak_20170824200906 /example/bzip2-1.0.6.eb diff --git a//example/bzip2-1.0.6.eb.bak_20170824200906 b/example/bzip2-1.0.6.eb index 46b2debed..2eb73f15a 100644 --- a/example/bzip2-1.0.6.eb.bak_20170824200906 +++ b/example/bzip2-1.0.6.eb @@ -9,8 +9,9 @@ compressors), whilst being around twice as fast at compression and six times fas toolchain = SYSTEM toolchainopts = {'pic': True} -sources = [SOURCE_TAR_GZ] source_urls = ['http://www.bzip.org/%(version)s/'] +sources = [SOURCE_TAR_GZ] +checksums = ['a2848f34fcd5d6cf47def00461fcb528a0484d8edef8208d6d2e2909dc61d9cd'] buildopts = \"CC=gcc CFLAGS='-Wall -Winline -O3 -fPIC -g $(BIGFILES)'\" .. note :: Along with injecting checksums, EasyBuild will also reorder the ``source_urls`` , ``sources`` and ``patches`` specifications, in that order and if they are present, and include the ``checksums`` specification afterwards. This is done to facilitate working towards a uniform style in easyconfig files, which also applies to the order of specified easyconfig parameters. .. _inject_checksums_replacing: Replacing existing checksums **************************** When one or more checksums are already specified, EasyBuild requires the use of ``--force`` together with ``--inject-checksums`` to replace those checksums. A clear warning will be printed to notify that existing checksums will be replaced. For example :: $ eb bzip2-1.0.6.eb --inject-checksums == temporary log file in case of crash /tmp/eb-WhSwVH/easybuild-HCODnl.log == injecting sha256 checksums in /example/bzip2-1.0.6.eb == fetching sources & patches for bzip2-1.0.6.eb... ERROR: Found existing checksums, use --force to overwrite them .. code :: bash $ eb bzip2-1.0.6.eb --inject-checksums --force == temporary log file in case of crash /tmp/eb-dS2QLa/easybuild-JGxOzC.log == injecting sha256 checksums in /example/bzip2-1.0.6.eb == fetching sources & patches for bzip2-1.0.6.eb... WARNING: Found existing checksums in bzip2-1.0.6.eb, overwriting them ( due to use of --force ) ... == backup of easyconfig file saved to /example/bzip2-1.0.6.eb.bak_20170824203850... == injecting sha256 checksums for sources & patches in bzip2-1.0.6.eb... ... .. note :: Any existing checksums are *blindly* replaced when ``--inject-checksums --force`` is used: the existing checksums are *not verified* to be correct as during normal use of EasyBuild (since that would kind of defeat the purpose of ``--inject-checksums`` ). In addition, it also doesn't matter whether or not checksums are available for all sources & patches: with ``--inject-checksums`` , checksums will be added for *all* sources and patches, including for extensions listed in ``exts_list`` (if any). .. _inject_checksums_robot_synergy: Synergy between ``--inject-checksums`` and ``--robot`` ****************************************************** When ``--inject-checksums`` is combined with ``--robot`` , checksums are injected for *each* easyconfig file in the dependency graph for which no module is available yet. For example, to inject checksums in *every* easyconfig file required to build HPL 2.2 with the ``foss/2017a`` toolchain :: $ MODULEPATH= eb HPL-2.2-foss-2017a.eb --installpath /tmp/$USER/sandbox --inject-checksums --robot == temporary log file in case of crash /tmp/eb-8HpJc3/easybuild-H35khM.log == resolving dependencies ... ... == injecting sha256 checksums in /example/GCCcore-6.3.0.eb ... == injecting sha256 checksums in /example/OpenMPI-2.0.2-GCC-6.3.0-2.27.eb ... == injecting sha256 checksums in /example/FFTW-3.3.6-gompi-2017a.eb ... == injecting sha256 checksums in /example/HPL-2.2-foss-2017a.eb ... .. note :: We are clearing ``$MODULEPATH`` and specifying a custom (empty) location to ``--installpath`` to avoid that EasyBuild skips any easyconfig because a corresponding module is already available. .. _inject_checksums_type: Type of checksum to inject ************************** By default, ``--inject-checksums`` will compute & inject ``SHA256`` checksums, but a different checksum type can be specified as an argument (e.g., ``--inject-checksums md5`` ). .. note :: Because of the optional argument that can be passed to ``--inject-checksums`` , you should not specify an easyconfig file name directly after the ``--inject-checksums`` , since it will be assumed to specify a checksum type, which will result in an error message like :: $ eb --inject-checksums bzip2-1.0.6.eb Usage: eb [options] easyconfig [...] eb: error: option --inject-checksums: invalid choice: 'bzip2-1.0.6.eb' (choose from 'adler32', 'crc32', 'md5', 'sha1', 'sha256', 'sha512', 'size') .. _common_easyconfig_param_sources_alt: Alternative formats for ``sources`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ In some cases, it can be required to provide additional information next to the name of a source file, e.g., a custom extraction command (because the one derived from the file extension is not correct), or an altername filename that should be used to download the source file. This can be specified using a Python dictionary value in the ``sources`` easyconfig parameter. Since EasyBuild v3.3.0, three keys are supported: * ``filename`` ( *mandatory* ): filename of source file * ``download_filename`` : filename that should be used when downloading this source file; the downloaded file will be saved using the ``filename`` value * ``extract_cmd`` : custom extraction command for this source file * ``source_urls`` : source URLs to consider for downloading this source file * ``git_config`` : see :ref: `common_easyconfig_param_sources_git_config` For example: .. code :: python sources = [{ 'source_urls' : [ 'https://example.com' ], 'filename' : 'example- %(version)s .gz' , 'download_filename' : 'example.gz' , # provided source tarball is not versioned... 'extract_cmd' : \"tar xfvz %s \" , # source file is actually a gzipped tarball (filename should be .tar.gz) }] .. note :: Custom extraction commands can also be specified as a 2-element tuple, but this format has been deprecated in favor of the Python dictionary format described above; see also :ref: `depr_sources_2_element_tuple` . Using ``download_instructions`` for user-side part of installation ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ In some cases, getting some of the files required for an installation cannot be automated. Reasons for this include: * there is a manual stage to combine multiple downloaded files into the required installation file * the file requires a login to download You can use the ``download_instructions`` parameter to specify steps for the user to do. This parameter takes string value and prints it whenever build fails because any file needed was not found. If ``download_instructions`` is not specified, Easybuild prints the default message stating the paths that were tested. .. code :: python download_instructions = \"\"\" Step 1: Go to example.com and download example.jar. Step 2: Install example.jar (ensure Java is installed). Step 3: Go to the installation directory and create Tarball of its contents (tar -czvf example.tar.gz *). Step 4: Move created Tarball into the same directory, where your easyconfig is located and run build again. \"\"\" .. _common_easyconfig_param_sources_git_config: Downloading from a Git repository ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v3.7.0, support for downloading directly from a Git repository is available. When ``git_config`` is provided for a particular source file (see :ref: `common_easyconfig_param_sources_alt` ), EasyBuild will create a source tarball after downloading the specified Git repository. The value for ``git_config`` is a Python dictionary, where the following keys are *mandatory* : * ``url`` : the URL where the Git repository is located * ``repo_name`` : the name of the Git repository The value for ``filename`` in the source specification *must* end in ``.tar.gz`` (because a gzipped tarball will be created from the cloned repository). In addition, either of the following keys *must* also be defined: * ``tag`` : the specific tag to download * ``commit`` : the specific commit ID to download If a recursive checkout should be made of the repository, the ``recursive`` key can be set to ``True`` . To also retain the ``.git`` directory (which holds the Git metadata for the repository), you can set the ``keep_git_dir`` to ``True`` (supported since EasyBuild v4.2.0). A different name for the top-level directory can be specified via ``clone_into`` ; by default the name of the repository is used. Examples: * creating a source tarball named ``example-main.tar.gz`` of the ``main`` branch of a (fictional) ``test`` repository from ``https://agitserver.org/example`` , and use ``example-test`` as top-level directory name: .. code :: sources = [{ 'filename': 'example-main.tar.gz', 'git_config': { 'url': 'https://agitserver.org/example', 'repo_name': 'test', 'tag': 'main', 'clone_into': 'example-test', }, }] * creating a source tarball named ``example-20180920.tar.gz`` of the recursive checkout of commit ``abcdef12`` of the ``test`` repository from ``https://agitserver.org/example`` : .. code :: sources = [{ 'filename': 'example-20180920.tar.gz', 'git_config': { 'url': 'https://agitserver.org/example', 'repo_name': 'test', 'commit': 'abcdef12', 'recursive': True, 'keep_git_dir': True, }, }] .. note :: Because the source tarball is created locally (by running ``tar cfvz`` on the directory containing the cloned repository), the (SHA256) checksum is not guaranteed to be the same across different systems. Whenever you have the option to download a source tarball (or equivalent) directly (for example from GitHub, which also allows downloading a tarball of a specific commit), we strongly recommend you to do so, ``git_config`` is intended for other Git repos. .. _dependency_specs: Dependencies ~~~~~~~~~~~~ * **dependencies** : build/runtime dependencies * **builddependencies** : build-only dependencies (not in module) * **hiddendependencies** : dependencies via hidden modules (see also :ref: `hide_deps` ) * **osdependencies** : system dependencies (package names) Remarks: * modules must exist for all (non-system) dependencies * (non-system) dependencies can be resolved via ``--robot`` * format: ``(<name>, <version>[, <versionsuffix>[, <toolchain>]])`` Example: .. code :: python name = 'GTI' ... toolchain = { 'name' : 'goolf' , 'version' : '1.5.14' } dependencies = [( 'PnMPI' , '1.2.0' )] builddependencies = [( 'CMake' , '2.8.12' , '' , ( 'GCC' , '4.8.2' ))] For each of the specified (build) dependencies, the corresponding module will be loaded in the build environment defined by EasyBuild. For the *runtime* dependencies, ``module load`` statements will be included in the generated module file. .. note :: By default, EasyBuild will try to resolve dependencies using the same toolchain as specified for the software being installed. As of v3.0, if no easyconfig exists to resolve a dependency using the default toolchain EasyBuild will search for the dependency using a compatible subtoolchain. A different toolchain can be specified on a per-dependency level (cfr. the ``CMake`` build dependency in the example above). Alternatively, you can instruct EasyBuild to use the most minimal (sub)toolchain when resolving dependencies, see :ref: `minimal_toolchains` . Loading of modules for dependencies with a ``system`` toolchain ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ When a :ref: `system_toolchain` is used, the modules for each of the (build) dependencies are *always* loaded, regardless of the toolchain version (as opposed the behaviour with the ``dummy`` toolchain in EasyBuild versions prior to v4.0, see :ref: `system_toolchain_motivation_deprecating_dummy` ). Specifying dependencies using ``system`` toolchain ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ To make EasyBuild resolve a dependency using the ``system`` toolchain, simply use the ``SYSTEM`` template constant as the 4th value in the tuple representing the dependency specification. For example, to specify PnMPI version 1.2.0 built with the ``system`` toolchain as a (runtime) dependency :: dependencies = [('PnMPI', '1.2.0', '', SYSTEM)] Using external modules as dependencies ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Since EasyBuild v2.1, specifying modules that are not provided via EasyBuild as dependencies is also supported. See :ref: `using_external_modules` for more information. Extensions ~~~~~~~~~~ Besides dependencies, which are found outside the software being built but are part of the site's EasyBuild installation, it is also possible to incorporate extensions to the software within the build. This is done via the ``exts_list`` array. Each entry in ``exts_list`` is a three-component tuple, with the name and version number, and a dictionary of configuration options for the entry: .. code :: python exts_list = [ ( 'name' , 'version' , { 'option' : 'value' , 'option' : 'value' }) ] The latter may contain essentially any of the full easyconfig parameters, including ``buildopts`` , ``installopts`` , etc. Among those options, the following exceptions and special cases should be noted: * **nosource** : If set ``True`` , no download will be done * **source_tmpl** : Template string for the file to be downloaded * default is ``'%(name)s-%(version)s.tar.gz'`` * ``%(name)s`` and ``%(version)s`` come from the ``exts_list`` entry (above) * **sources** : Dictionary specifying details of where to download the extension * equivalent to a single entry from the easyconfig ``sources`` list * preferred to use of ``source_tmpl`` * **start_dir** : If not set, will be derived; the easyconfig value will not be used .. code :: python exts_list = [ ( 'llvmlite' , '0.26.0' , { 'source_urls' : [ 'https://pypi.python.org/packages/source/l/llvmlite/' ], 'patches' : [ 'llvmlite-0.26.0_fix-ffi-Makefile.patch' ], 'checksums' : [ '13e84fe6ebb0667233074b429fd44955f309dead3161ec89d9169145dbad2ebf' , # llvmlite-0.26.0.tar.gz '40e6fe6de48709b45daebf8082f65ac26f73a4afdf58fc1e8099b97c575fecae' , # llvmlite-0.26.0_fix-ffi-Makefile.patch ], }), ( 'singledispatch' , '3.4.0.3' , { 'source_urls' : [ 'https://pypi.python.org/packages/source/s/singledispatch/' ], 'checksums' : [ '5b06af87df13818d14f08a028e42f566640aef80805c3b50c5056b086e3c2b9c' ], }), ( name , version , { 'source_urls' : [ 'https://pypi.python.org/packages/source/n/numba/' ], 'checksums' : [ 'c62121b2d384d8b4d244ef26c1cf8bb5cb819278a80b893bf41918ad6d391258' ], }), ] That third instance uses the ``name`` and ``version`` variables defined in the easyconfig file. Since EasyBuild v4.2.2, a single-entry ``sources`` dictionary (see :ref: `_common_easyconfig_param_sources_alt` ) may be included in an ``exts_list`` entry. For example, to download Git sources from a private repository and convert them to a tar-ball for installation: .. code :: python exts_defaultclass = 'PythonPackage' exts_list = [ ( 'pyCAP' , '0.1' , { 'sources' : { 'filename' : ' %(name)s - %(version)s .tar.gz' , 'git_config' : { 'url' : 'ssh://nero.stanford.edu/data/git/Analysis' , 'repo_name' : 'pyCAP' , 'tag' : ' %(version)s ' , } } }), ] Here, the template strings ``%(name)s`` and ``%(version)s`` will be substituted from the ``exts_list`` entry elements (\"pyCAP\" and \"0.1\", respectively), not from the easyconfig values. .. _configure_build_install_command_options: Configure/build/install command options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * **configopts** : options for configure command * **preconfigopts** : options used as prefix for configure command In analogy to `configure` , also `build` and `install` commands are tuneable: * **buildopts, prebuildopts** : options for build command * **installopts, preinstallopts** : options for install command Example: .. code :: python easyblock = 'ConfigureMake' ... # configure with: ./autogen.sh && ./configure CC=\"$CC\" CFLAGS=\"$CFLAGS\" preconfigopts = \"./autogen.sh && \" buildopts = 'CC=\"$CC\" CFLAGS=\"$CFLAGS\"' # install with: make install PREFIX=<installation prefix> installopts = 'PREFIX= %(installdir)s ' .. note :: For more details w.r.t. use of string templates like ``%(installdir)s`` , see :ref: `easyconfig_param_templates` . .. _configure_build_install_command_options_iterate: List of configure/build/install options ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ In some cases, the *configure-build-install* cycle must be executed multiple times during a single installation, using different options for one or more steps. EasyBuild supports specifying a *list* of strings, each of which specifying a particular set of options to use. For example, to perform the installation procedure with three different sets of configuration options: .. code :: python configopts = [ \"--common-opt --one --one-more\" , \"--common-opt --two\" , \"--common-opt --three\" , ] This way, EasyBuild will perform the *configure-build-install* cycle **three** times: * configure using ``--common-opt --one --one-more`` , build and install * configure using ``--common-opt --two`` , build and install on top of the existing installation * configure using ``--common-opt --three`` , build and install once more on top of what is installed already During this process, the environment is reset and the build directory is cleaned up after each cycle, while the installation directory is left untouched (in order to not destroy the result of earlier cycles). If several ``(pre){config|build|install}opts`` parameters are defined as being a list of strings, the number of items in the lists must be the same. Any of these parameters defined as a single string value are just reused for each of the cycles performed. For example: .. code :: python easyblock = 'ConfigureMake' configopts = [ '--one' , '--two' , '--three' ] buildopts = 'lib' preinstallopts = [ 'TYPE=one' , 'TYPE=two' , 'TYPE=three' ] would result in: * ``./configure --prefix=... --one; make lib; TYPE=one make install`` * ``./configure --prefix=... --two; make lib; TYPE=two make install`` * ``./configure --prefix=... --three; make lib; TYPE=three make install`` An example use case of this is building FFTW with different precisions, see the `FFTW easyconfig files <https://github.com/easybuilders/easybuild-easyconfigs/tree/main/easybuild/easyconfigs/f/FFTW> `_ . Sanity check ~~~~~~~~~~~~ Custom paths and commands to be used in the sanity check step can be specified using the respective parameters. These are used to make sure that an installation didn't (partly) fail unnoticed. * **sanity_check_paths** : files/directories that must get installed * **sanity_check_commands** : (simple) commands that must work when the installed module is loaded Remarks: * format: Python dictionary with ( `only` ) ``files`` / ``dirs`` keys * values must be lists of (tuples of) strings, one of both **must** be non-empty * paths are `relative` to installation directory * for a path specified as a tuple, only one of the specified paths must be available * default values: * paths: non-empty ``bin`` and ``lib`` or ``lib64`` directories * commands: none Example: .. code :: python sanity_check_paths = { 'files' : [ \"bin/xhpl\" ], 'dirs' : [], } .. _writing_easyconfigs_easyblock_spec: Easyblock specification ~~~~~~~~~~~~~~~~~~~~~~~ To make EasyBuild use a specific (usually generic) easyblock the **easyblock** parameter can be used. By default, EasyBuild will assume that the easyblock to use can be derived from the software name. For example: for ``GCC`` , EasyBuild will look for an easyblock class named ``EB_GCC`` in the Python module ``easybuild.easyblocks.gcc`` . A list of available easyblocks is available via ``--list-easyblocks`` (see also :ref: `list_easyblocks` ); generic easyblocks are the ones for which the name does *not* start with ``EB_`` . Example: .. code :: python easyblock = 'CMakeMake' name = 'GTI' version = '1.2.0' ... .. tip :: It is highly recommended to use existing (generic) easyblocks, where applicable. This avoids the need for creating (and maintaining) new easyblocks. Typically, generic easyblocks support several custom easyconfig parameters which allow to steer their behavior (see also :ref: `avail_easyconfig_params` ). Example: .. code :: python easyblock = 'Binary' [ ... ] install_cmd = \"./install.bin\" [ ... ] Module class ~~~~~~~~~~~~ The category to which the software belongs to can be specified using the **moduleclass** easyconfig parameter. By default, the ``base`` module class is used (which should be replaced with a more appropriate category). EasyBuild enforces that only known module classes can be specified (to avoid misclassification due to typos). The default list of module classes is available via ``--show-default-moduleclasses`` ; additional module classes can be defined via the ``--moduleclasses`` configure option. Example: .. code :: python name = 'GCC' [ ... ] moduleclass = 'compiler' .. note :: By default, EasyBuild will create a symlink to the generated module file in a module class-specific path. This behavior is configurable through the module naming scheme being used. .. tip :: The module class may play a significant role in other aspects. For example, the alternative (hierarchical) module naming scheme ``HierarchicalMNS`` heavily relies on the ``moduleclass`` parameter for discriminating compilers and MPI libraries. Tweaking existing easyconfig files ---------------------------------- The ability to modify easyconfig files on the fly with EasyBuild, provides a very powerful and flexible feature to describe builds, without having to manually create all the input files. Tweaking existing easyconfigs can be done using the ``--try-*`` command lines options. See :ref: `tweaking_easyconfigs_using_try` for more details. Example: * GCC version update:: eb GCC-4.9.0.eb --try-software-version=4.9.1 * install WRF + its dozen dependencies with a different toolchain (!):: eb WRF-3.5.1-ictce-5.3.0-dmpar.eb --try-toolchain=intel,2014b -r .. _easyconfig_param_templates: Dynamic values for easyconfig parameters ---------------------------------------- String templates are completed using the value of particular easyconfig parameters, typically ``name`` and/or ``version`` . These help to avoid hardcoding values in multiple locations. A list of available string templates can be obtained using ``--avail-easyconfig-templates`` . Additionally, constants that can be used in easyconfig files are available via ``--avail-easyconfig-constants`` . Example: .. code :: python name = 'GCC' version = '4.8.3' ... source_urls = [ # http://ftpmirror.gnu.org/gcc/gcc-4.8.3 'http://ftpmirror.gnu.org/ %(namelower)s / %(namelower)s - %(version)s ' , ] sources = [ SOURCELOWER_TAR_GZ ] # gcc-4.8.3.tar.gz ... .. note :: Proper use of string templates is important, in particular to avoid hardcoding the software version in multiple locations of an easyconfig file; this is critical to make ``--try-software-version`` behave as expected (see also :ref: `tweaking_easyconfigs_using_try` ). Version-specific documentation relevant to easyconfigs ------------------------------------------------------ * :ref: `Available config file constants <avail_cfgfile_constants>` * :ref: `Available easyconfig parameters <vsd_avail_easyconfig_params>` * :ref: `Constants available for easyconfig files <avail_easyconfig_constants>` * :ref: `License constants available for easyconfig files <avail_easyconfig_licenses>` * :ref: `List of available easyblocks <vsd_list_easyblocks>` * :ref: `List of available toolchain options <avail_toolchain_opts>` * :ref: `List of known toolchains <vsd_list_toolchains>` * :ref: `List of supported software <list_software>` * :ref: `Overview of generic easyblocks <generic_easyblocks>` * :ref: `Templates available for easyconfig files <avail_easyconfig_templates>` Contributing easyconfigs ------------------------ **Contribute your working easyconfig files!** Share your expertise with the community, avoid duplicate work, especially if: * the software package is not supported yet * an existing easyconfig needs (non-trivial) changes for a different version/toolchain * it is a frequently used software package (compilers, MPI, etc.) See :ref: `contributing` for more information.","title":"Writing easyconfig files"},{"location":"writing-yeb-easyconfig-files/","text":"Writing easyconfig files in YAML syntax (.yeb format) \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Writing_yeb_easyconfig_files.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Writing_yeb_easyconfig_files.rst in easybuilders/easybuild repo target: docs/writing-yeb-easyconfig-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _easyconfig_yeb_format: Writing easyconfig files in YAML syntax (``.yeb`` format) **[IN DEVELOPMENT]** ============================================================================== .. note :: Because support for easyconfig files in YAML syntax (a.k.a. ``.yeb`` files) is still *in development* , using them currently requires enabling the use of experimental features ( ``--experimental`` ), see also :ref: `experimental_features` . An up-to-date overview of current progress on support for ``.yeb`` easyconfigs is available at https://github.com/easybuilders/easybuild-framework/issues/1407. Useful links: * YAML syntax specification: http://www.yaml.org/spec/1.2/spec.html .. contents :: :depth: 3 :backlinks: none .. _easyconfig_yeb_format_requirements: Requirements ------------ To use ``.yeb`` easyconfigs, you need to have: * an EasyBuild (development) version which is aware of the ``.yeb`` format (i.e., version 2.3.0dev or higher) * `PyYAML <https://pypi.python.org/pypi/PyYAML> `_ installed and available in your Python search path (via ``$PYTHONPATH`` for example), such that ``import yaml`` works .. _easyconfig_yeb_format_syntax: Syntax ------ .. _easyconfig_yeb_format_syntax_YAML_header: YAML header (optional) ~~~~~~~~~~~~~~~~~~~~~~ Easyconfig files in YAML syntax can start with a standard YAML header. It consists of two lines: * a line with a ' ``%YAML`` ' *directive* which also indicates the YAML version being used (the latest YAML version is 1.2, and dates from 2009); * followed by a *document marker* line ' ``---`` ' (which is used to separate directives from content) For example :: %YAML 1.2 --- This header is optional, but we recommend including it; one advantage is that editor will use proper syntax highlighting for YAML when the ``%YAML`` directory is included. .. _easyconfig_yeb_format_syntax_comments: Comments ~~~~~~~~ Comments can be included anywhere, and are prefixed with a hash character ``#`` :: # this is a comment .. _easyconfig_yeb_format_syntax_internal_variables: Internal variables ~~~~~~~~~~~~~~~~~~ To define and use temporary/internal variables in easyconfig files, which can be useful to avoid hardcoding (partial) easyconfig parameter values, the YAML anchor/alias functionality can be used (see also http://www.yaml.org/spec/1.2/spec.html#id2765878). A value can be marked for future reference via an *anchor* , using the ampersand character ' ``&`` '. Referring to it later is done using an asterisk character ' ``*`` '. Typically, internal variables are defined at the top of the ``.yeb`` easyconfig file using a list named ``_internal_variables_`` , but this is just a matter of style; anchors can be defined throughout the entire file if desired. For example, referring to the Python version being used in both the ``versionsuffix`` and list of dependencies can be done as follows :: _internal_variables_: - &pyver 2.7.10 versionsuffix: !join [-Python-, *pyver] dependencies: - [Python, *pyver] In this example, the ``!join`` is used to concatenate two string values, see also :ref: `easyconfig_yeb_format_syntax_string_concatenation` . A more elaborate example of this is the :ref: `easyconfig_yeb_format_examples_goolf1410` example easyconfig. .. _easyconfig_yeb_format_syntax_string_concatenation: Concatenating strings and/or variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The standard YAML format does not support the notion of string concatenation. Since concatenating string values is a common pattern in easyconfig files, the EasyBuild framework defines the ``!join`` operator to support this. For example, defining a ``versionsuffix`` that contains the Python version being used (which may be referred to elsewhere too) can be done as follows :: _internal_variables_: - &pyver 2.7.10 versionsuffix: !join [-Python-, *pyver] .. _easyconfig_yeb_format_syntax_escaping: Escaping string values with single or double quotes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Strings in YAML can be unquoted. However, when they contain special characters they need to be escaped by either single- or double-quoting the string. Special characters that require single quotes are: `:` `{` `}` `[` `]` `,` `&` `*` `#` `?` `|` `-` `<` `>` `=` `!` `%` `@` and `\\` `. When using single-quoted strings, any single quote inside the string must be doubled to escape it. If the string contains control characters such as `\\n` , it must be escaped with double quotes. .. _easyconfig_yeb_format_syntax_easyconfig_parameters: Easyconfig parameter values ~~~~~~~~~~~~~~~~~~~~~~~~~~~ To define an easyconfig parameter, simply use ``<key>: <value>`` (i.e., use a colon ``:`` as a separator). In YAML terminology, an easyconfig file is expressed as a *mapping* , with easyconfig parameters as keys. Three types of values ( *nodes* ) are supported: *scalars* (strings, integers), *sequences* (lists) and *mappings* (dictionaries). .. _easyconfig_yeb_format_syntax_scalars: Scalar values ############# Using scalar values is straight-forward, no special syntax is required. For string values, no quotes must be used (in general). However, quotes are sometimes required to escape characters that have special meaning in YAML (like ' ``:`` '). (Also see: :ref: `easyconfig_yeb_format_syntax_escaping` ) It's worth noting that there's a subtle difference between using single and double quotes, see `Flow Scalar Styles <http://www.yaml.org/spec/1.2/spec.html#id2786942> `_ . Examples :: name: gzip version: 1.6 # single quotes are required for string values representing URLs, to escape the ':' homepage: 'http://www.gnu.org/software/gzip/' parallel: 1 Multiline strings can be expressed using indentation :: description: gzip is a popular data compression program as a replacement for compress .. _easyconfig_yeb_format_syntax_sequences: Sequences ######### Sequence values (a.k.a. lists) can be expressed in different ways, depending on their size. If there are a limited number of (short) entries the value can be expressed on a single line, using square brackets ' ``[`` ' ' ``]`` ' and with comma ' ``,`` ' as separator. Example :: # quotes are required to escape the ':' source_urls: ['http://ftpmirror.gnu.org/gzip/', 'ftp://ftp.gnu.org/gnu/gzip/'] Alternatively indentation can be used for scope, with each entry on its own line, indicated with a dash and a space ``- `` . Example :: # no quotes required here, since there's no ambiguity w.r.t. ':' source_urls: - http://ftpmirror.gnu.org/gzip/ - http://ftp.gnu.org/gnu/gzip/ - ftp://ftp.gnu.org/gnu/gzip/ .. _easyconfig_yeb_format_syntax_mappings: Mappings ######## Mapping values (a.k.a. dictionaries) are expressed using a colon ' ``:`` ' and space as key-value separator, a comma ' ``,`` ' to key-value pairs, and curly braces ' ``{`` ' ' ``}`` ' to mark the start/end. For example :: toolchain: {name: intel, version: 2015b} .. _easyconfig_yeb_format_syntax_nesting: Nesting ####### Different types of values can be nested. For example, sequence values can be used in a mapping :: sanity_check_paths: { files: [bin/gunzip, bin/gzip, bin/uncompress], dirs: [], } And sequences of sequences are also supported :: osdependencies - zlib - [openssl-devel, libssl-dev, libopenssl-devel] .. _easyconfig_yeb_format_syntax_template_values_constants: Templates values and constants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Template values can be specified as a part of string values, using ``%(template_name)`` . Template constants are injected by the easyconfig ``.yeb`` parser as *node anchors* , and can be referred to with an *alias node* , i.e. using an asterisk ``*`` . For example :: source_urls: [*GNU_SOURCE] sources: ['%(name)s-%(version)s.tar.gz'] # equivalent with [*SOURCE_TAR_GZ] See also :ref: `easyconfig_param_templates` . .. _easyconfig_yeb_format_syntax_dependencies: Dependencies ~~~~~~~~~~~~ We updated the way dependencies are specified to match with the new toolchain format ( :ref: `easyconfig_yeb_format_new` ) The format is a bit more verbose than before, but easier to read. Each dependency is a list entry, indicated by a dash and space ( `- ` ). Each entry can specify a ``name: version`` key-value pair, and a ``versionsuffix`` and ``toolchain`` . Only the ``name: version`` pair is required. Dependencies can also be external modules. In this case, the dependency has to be specified with a ``name`` and the marker ``external_module: True`` . The boolean value is not case-sensitive. A straightforward example :: dependencies: - libreadline: 6.3 - Tcl: 8.6.4 - name: fftw/3.3.4.4 external_module: True builddependencies: # empty versionsuffix, different toolchain (GCC/4.9.2) - CMake: 3.2.2 toolchain: GCC, 4.9.2 A more complicated example from a toolchain easyconfig, where also the ``!join`` operator (see :ref: `easyconfig_yeb_format_syntax_string_concatenation` ) and internal variables (see :ref: `easyconfig_yeb_format_syntax_internal_variables` ) are used :: _internal_variables_: - &comp_name GCC - &comp_version 4.7.2 - &comp [*comp_name, *comp_version] - &blaslib OpenBLAS - &blasver 0.2.6 - &blas !join [*blaslib, -, *blasver] - &blas_suff -LAPACK-3.4.2 - &comp_mpi_tc [gompi, 1.4.10] dependencies: - *comp_name: *comp_version - OpenMPI: 1.6.4 toolchain: *comp - *blaslib: *blasver versionsuffix: *blas_suff toolchain: *comp_mpi_tc - FFTW: 3.3.3 toolchain: *comp_mpi_tc - ScaLAPACK: 2.0.2 versionsuffix: !join [-, *blas, *blas_suff] toolchain: *comp_mpi_tc For the full version of this easyconfig file, see the example ``.yeb`` easyconfig :ref: `easyconfig_yeb_format_examples_goolf1410` . .. _easyconfig_yeb_format_new: OS dependencies and sanity check paths ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To specify parameters that used to contain tuples such as ``osdependencies`` and ``sanity_check_paths`` , simply use lists (sequences) instead of tuples. For example :: # note: this is eb syntax, will not work in .yeb files osdependencies = [('openssl-devel', 'libssl-dev', 'libopenssl-devel')] Becomes :: osdependencies: [[openssl-devel, libssl-dev, libopenssl-devel]] And :: # note: this is eb syntax, will not work in .yeb files sanity_check_paths = { 'files': ['fileA', ('fileB', 'fileC')], 'dirs' : ['dirA', 'dirB'], } Becomes :: sanity_check_paths: { files: [fileA, [fileB, fileC]], dirs: [dirA, dirB] } Shorthands for common easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Toolchain format ################ The easyconfig parameter ``toolchain`` in .eb files is defined as a dictionary ``{'name':'foo', 'version':'bar'}`` . In the .yeb format, this can be done much easier by just using ``name, version`` . E.g :: # note: this is eb syntax, will not work in yeb files toolchain = {'name':'intel', 'version':'2015b'} becomes :: toolchain: intel, 2015b .. _easyconfig_yeb_format_examples: Examples -------- .. _easyconfig_yeb_format_examples_gzip16_GCC492: gzip-1.6-GCC-4.9.2.yeb ~~~~~~~~~~~~~~~~~~~~~~ Example easyconfig for gzip v1.6 using the ``GCC/4.9.2`` toolchain. .. code :: %YAML 1.2 --- easyblock: ConfigureMake name: gzip version: 1.6 homepage: 'http://www.gnu.org/software/gzip/' description: gzip is a popular data compression program as a replacement for compress toolchain: GCC, 4.9.2 # http://ftp.gnu.org/gnu/gzip/gzip-1.6.tar.gz source_urls: [*GNU_SOURCE] sources: [%(name)s-%(version)s.tar.gz] # make sure the gzip, gunzip and compress binaries are available after installation sanity_check_paths: { files: [bin/gunzip, bin/gzip, bin/uncompress], dirs: [], } moduleclass: tools .. _easyconfig_yeb_format_examples_goolf1410: goolf-1.4.10.yeb ~~~~~~~~~~~~~~~~ Easyconfig file in YAML syntax for the goolf v1.4.10 toolchain. .. code :: _internal_variables_: - &version 1.4.10 - &comp_name GCC - &comp_version 4.7.2 - &comp [ *comp_name, * comp_version] - &blaslib OpenBLAS - &blasver 0.2.6 - &blas !join [ *blaslib, -, * blasver] - &blas_suff -LAPACK-3.4.2 - &comp_mpi_tc [gompi, *version] easyblock: Toolchain name: goolf version: *version homepage: (none) description: | GNU Compiler Collection (GCC) based compiler toolchain, including OpenMPI for MPI support, OpenBLAS (BLAS and LAPACK support), FFTW and ScaLAPACK. toolchain: {name: system, version: system} # compiler toolchain dependencies # we need GCC and OpenMPI as explicit dependencies instead of gompi toolchain # because of toolchain preparation functions dependencies: - *comp_name: * comp_version - OpenMPI: 1.6.4 toolchain: *comp - *blaslib: * blasver versionsuffix: *blas_suff toolchain: *comp_mpi_tc - FFTW: 3.3.3 toolchain: *comp_mpi_tc - ScaLAPACK: 2.0.2 versionsuffix: !join [-, *blas, * blas_suff] toolchain: *comp_mpi_tc moduleclass: toolchain Python-2.7.10-intel-2015b.yeb ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. code :: _internal_variables_: - &numpyversion 1.9.2 - &scipyversion 0.15.1 easyblock: ConfigureMake name: Python version: 2.7.10 homepage: http://python.org/ description: | Python is a programming language that lets you work more quickly and integrate your systems more effectively. toolchain: intel, 2015b toolchainopts: {pic: True, opt: True, optarch: True} source_urls: ['http://www.python.org/ftp/python/%(version)s/'] sources: [*SOURCE_TGZ] # python needs bzip2 to build the bz2 package dependencies: [ - bzip2: 1.0.6 - zlib: 1.2.8 - libreadline: 6.3 - ncurses: 5.9 - SQLite: 3.8.10.2 - Tk: 8.4.6 versionsuffix: -no-X11 # - OpenSSL: 1.0.1m # OS dependency should be preferred if the os version is more recent then this version, its # nice to have an up to date openssl for security reasons ] osdependencies: [[openssl-devel, libssl-dev, libopenssl-devel]] # order is important! # package versions updated May 28th 2015 exts_list: [ [setuptools, '16.0', { source_urls: [\"https://pypi.python.org/packages/source/s/setuptools/\"], }], [pip, 7.0.1, { source_urls: [\"https://pypi.python.org/packages/source/p/pip/\"], }], [nose, 1.3.6, { source_urls: [\"https://pypi.python.org/packages/source/n/nose/\"], }], [numpy, *numpyversion, { source_urls: [ [!join [\"http://sourceforge.net/projects/numpy/files/NumPy/\", *numpyversion], download] ], patches: [ numpy-1.8.0-mkl.patch, # % numpyversion, ], }], [scipy, *scipyversion, { source_urls: [ [!join [\"http://sourceforge.net/projects/scipy/files/scipy/\", *scipyversion], download]], }], [blist, 1.3.6, { source_urls: [\"https://pypi.python.org/packages/source/b/blist/\"], }], [mpi4py, 1.3.1, { source_urls: [\"http://bitbucket.org/mpi4py/mpi4py/downloads/\"], }], [paycheck, 1.0.2, { source_urls: [\"https://pypi.python.org/packages/source/p/paycheck/\"], }], [argparse, 1.3.0, { source_urls: [\"https://pypi.python.org/packages/source/a/argparse/\"], }], [pbr, 1.0.1, { source_urls: [\"https://pypi.python.org/packages/source/p/pbr/\"], }], [lockfile, 0.10.2, { source_urls: [\"https://pypi.python.org/packages/source/l/lockfile/\"], }], [Cython, '0.22', { source_urls: [\"http://www.cython.org/release/\"], }], [six, 1.9.0, { source_urls: [\"https://pypi.python.org/packages/source/s/six/\"], }], [dateutil, 2.4.2, { source_tmpl: python-%(name)s-%(version)s.tar.gz, source_urls: [\"https://pypi.python.org/packages/source/p/python-dateutil/\"], }], [deap, 1.0.2, { # escaped with quotes because yaml values can't start with % source_tmpl: \"%(name)s-%(version)s.post2.tar.gz\", source_urls: [\"https://pypi.python.org/packages/source/d/deap/\"], }], [decorator, 3.4.2, { source_urls: [\"https://pypi.python.org/packages/source/d/decorator/\"], }], [arff, 2.0.2, { source_tmpl: liac-%(name)s-%(version)s.zip, source_urls: [\"https://pypi.python.org/packages/source/l/liac-arff/\"], }], [pycrypto, 2.6.1, { modulename: Crypto, source_urls: [\"http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/\"], }], [ecdsa, '0.13', { source_urls: [\"https://pypi.python.org/packages/source/e/ecdsa/\"], }], [paramiko, 1.15.2, { source_urls: [\"https://pypi.python.org/packages/source/p/paramiko/\"], }], [pyparsing, 2.0.3, { source_urls: [\"https://pypi.python.org/packages/source/p/pyparsing/\"], }], [netifaces, 0.10.4, { source_urls: [\"https://pypi.python.org/packages/source/n/netifaces\"], }], [netaddr, 0.7.14, { source_urls: [\"https://pypi.python.org/packages/source/n/netaddr\"], }], [mock, 1.0.1, { source_urls: [\"https://pypi.python.org/packages/source/m/mock\"], }], [pytz, '2015.4', { source_urls: [\"https://pypi.python.org/packages/source/p/pytz\"], }], [pandas, 0.16.1, { source_urls: [\"https://pypi.python.org/packages/source/p/pandas\"], }], ] moduleclass: lang","title":"Writing easyconfig files in YAML syntax (.yeb format)"},{"location":"writing-yeb-easyconfig-files/#writing-easyconfig-files-in-yaml-syntax-yeb-format","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Writing_yeb_easyconfig_files.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Writing_yeb_easyconfig_files.rst in easybuilders/easybuild repo target: docs/writing-yeb-easyconfig-files.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _easyconfig_yeb_format: Writing easyconfig files in YAML syntax (``.yeb`` format) **[IN DEVELOPMENT]** ============================================================================== .. note :: Because support for easyconfig files in YAML syntax (a.k.a. ``.yeb`` files) is still *in development* , using them currently requires enabling the use of experimental features ( ``--experimental`` ), see also :ref: `experimental_features` . An up-to-date overview of current progress on support for ``.yeb`` easyconfigs is available at https://github.com/easybuilders/easybuild-framework/issues/1407. Useful links: * YAML syntax specification: http://www.yaml.org/spec/1.2/spec.html .. contents :: :depth: 3 :backlinks: none .. _easyconfig_yeb_format_requirements: Requirements ------------ To use ``.yeb`` easyconfigs, you need to have: * an EasyBuild (development) version which is aware of the ``.yeb`` format (i.e., version 2.3.0dev or higher) * `PyYAML <https://pypi.python.org/pypi/PyYAML> `_ installed and available in your Python search path (via ``$PYTHONPATH`` for example), such that ``import yaml`` works .. _easyconfig_yeb_format_syntax: Syntax ------ .. _easyconfig_yeb_format_syntax_YAML_header: YAML header (optional) ~~~~~~~~~~~~~~~~~~~~~~ Easyconfig files in YAML syntax can start with a standard YAML header. It consists of two lines: * a line with a ' ``%YAML`` ' *directive* which also indicates the YAML version being used (the latest YAML version is 1.2, and dates from 2009); * followed by a *document marker* line ' ``---`` ' (which is used to separate directives from content) For example :: %YAML 1.2 --- This header is optional, but we recommend including it; one advantage is that editor will use proper syntax highlighting for YAML when the ``%YAML`` directory is included. .. _easyconfig_yeb_format_syntax_comments: Comments ~~~~~~~~ Comments can be included anywhere, and are prefixed with a hash character ``#`` :: # this is a comment .. _easyconfig_yeb_format_syntax_internal_variables: Internal variables ~~~~~~~~~~~~~~~~~~ To define and use temporary/internal variables in easyconfig files, which can be useful to avoid hardcoding (partial) easyconfig parameter values, the YAML anchor/alias functionality can be used (see also http://www.yaml.org/spec/1.2/spec.html#id2765878). A value can be marked for future reference via an *anchor* , using the ampersand character ' ``&`` '. Referring to it later is done using an asterisk character ' ``*`` '. Typically, internal variables are defined at the top of the ``.yeb`` easyconfig file using a list named ``_internal_variables_`` , but this is just a matter of style; anchors can be defined throughout the entire file if desired. For example, referring to the Python version being used in both the ``versionsuffix`` and list of dependencies can be done as follows :: _internal_variables_: - &pyver 2.7.10 versionsuffix: !join [-Python-, *pyver] dependencies: - [Python, *pyver] In this example, the ``!join`` is used to concatenate two string values, see also :ref: `easyconfig_yeb_format_syntax_string_concatenation` . A more elaborate example of this is the :ref: `easyconfig_yeb_format_examples_goolf1410` example easyconfig. .. _easyconfig_yeb_format_syntax_string_concatenation: Concatenating strings and/or variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The standard YAML format does not support the notion of string concatenation. Since concatenating string values is a common pattern in easyconfig files, the EasyBuild framework defines the ``!join`` operator to support this. For example, defining a ``versionsuffix`` that contains the Python version being used (which may be referred to elsewhere too) can be done as follows :: _internal_variables_: - &pyver 2.7.10 versionsuffix: !join [-Python-, *pyver] .. _easyconfig_yeb_format_syntax_escaping: Escaping string values with single or double quotes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Strings in YAML can be unquoted. However, when they contain special characters they need to be escaped by either single- or double-quoting the string. Special characters that require single quotes are: `:` `{` `}` `[` `]` `,` `&` `*` `#` `?` `|` `-` `<` `>` `=` `!` `%` `@` and `\\` `. When using single-quoted strings, any single quote inside the string must be doubled to escape it. If the string contains control characters such as `\\n` , it must be escaped with double quotes. .. _easyconfig_yeb_format_syntax_easyconfig_parameters: Easyconfig parameter values ~~~~~~~~~~~~~~~~~~~~~~~~~~~ To define an easyconfig parameter, simply use ``<key>: <value>`` (i.e., use a colon ``:`` as a separator). In YAML terminology, an easyconfig file is expressed as a *mapping* , with easyconfig parameters as keys. Three types of values ( *nodes* ) are supported: *scalars* (strings, integers), *sequences* (lists) and *mappings* (dictionaries). .. _easyconfig_yeb_format_syntax_scalars: Scalar values ############# Using scalar values is straight-forward, no special syntax is required. For string values, no quotes must be used (in general). However, quotes are sometimes required to escape characters that have special meaning in YAML (like ' ``:`` '). (Also see: :ref: `easyconfig_yeb_format_syntax_escaping` ) It's worth noting that there's a subtle difference between using single and double quotes, see `Flow Scalar Styles <http://www.yaml.org/spec/1.2/spec.html#id2786942> `_ . Examples :: name: gzip version: 1.6 # single quotes are required for string values representing URLs, to escape the ':' homepage: 'http://www.gnu.org/software/gzip/' parallel: 1 Multiline strings can be expressed using indentation :: description: gzip is a popular data compression program as a replacement for compress .. _easyconfig_yeb_format_syntax_sequences: Sequences ######### Sequence values (a.k.a. lists) can be expressed in different ways, depending on their size. If there are a limited number of (short) entries the value can be expressed on a single line, using square brackets ' ``[`` ' ' ``]`` ' and with comma ' ``,`` ' as separator. Example :: # quotes are required to escape the ':' source_urls: ['http://ftpmirror.gnu.org/gzip/', 'ftp://ftp.gnu.org/gnu/gzip/'] Alternatively indentation can be used for scope, with each entry on its own line, indicated with a dash and a space ``- `` . Example :: # no quotes required here, since there's no ambiguity w.r.t. ':' source_urls: - http://ftpmirror.gnu.org/gzip/ - http://ftp.gnu.org/gnu/gzip/ - ftp://ftp.gnu.org/gnu/gzip/ .. _easyconfig_yeb_format_syntax_mappings: Mappings ######## Mapping values (a.k.a. dictionaries) are expressed using a colon ' ``:`` ' and space as key-value separator, a comma ' ``,`` ' to key-value pairs, and curly braces ' ``{`` ' ' ``}`` ' to mark the start/end. For example :: toolchain: {name: intel, version: 2015b} .. _easyconfig_yeb_format_syntax_nesting: Nesting ####### Different types of values can be nested. For example, sequence values can be used in a mapping :: sanity_check_paths: { files: [bin/gunzip, bin/gzip, bin/uncompress], dirs: [], } And sequences of sequences are also supported :: osdependencies - zlib - [openssl-devel, libssl-dev, libopenssl-devel] .. _easyconfig_yeb_format_syntax_template_values_constants: Templates values and constants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Template values can be specified as a part of string values, using ``%(template_name)`` . Template constants are injected by the easyconfig ``.yeb`` parser as *node anchors* , and can be referred to with an *alias node* , i.e. using an asterisk ``*`` . For example :: source_urls: [*GNU_SOURCE] sources: ['%(name)s-%(version)s.tar.gz'] # equivalent with [*SOURCE_TAR_GZ] See also :ref: `easyconfig_param_templates` . .. _easyconfig_yeb_format_syntax_dependencies: Dependencies ~~~~~~~~~~~~ We updated the way dependencies are specified to match with the new toolchain format ( :ref: `easyconfig_yeb_format_new` ) The format is a bit more verbose than before, but easier to read. Each dependency is a list entry, indicated by a dash and space ( `- ` ). Each entry can specify a ``name: version`` key-value pair, and a ``versionsuffix`` and ``toolchain`` . Only the ``name: version`` pair is required. Dependencies can also be external modules. In this case, the dependency has to be specified with a ``name`` and the marker ``external_module: True`` . The boolean value is not case-sensitive. A straightforward example :: dependencies: - libreadline: 6.3 - Tcl: 8.6.4 - name: fftw/3.3.4.4 external_module: True builddependencies: # empty versionsuffix, different toolchain (GCC/4.9.2) - CMake: 3.2.2 toolchain: GCC, 4.9.2 A more complicated example from a toolchain easyconfig, where also the ``!join`` operator (see :ref: `easyconfig_yeb_format_syntax_string_concatenation` ) and internal variables (see :ref: `easyconfig_yeb_format_syntax_internal_variables` ) are used :: _internal_variables_: - &comp_name GCC - &comp_version 4.7.2 - &comp [*comp_name, *comp_version] - &blaslib OpenBLAS - &blasver 0.2.6 - &blas !join [*blaslib, -, *blasver] - &blas_suff -LAPACK-3.4.2 - &comp_mpi_tc [gompi, 1.4.10] dependencies: - *comp_name: *comp_version - OpenMPI: 1.6.4 toolchain: *comp - *blaslib: *blasver versionsuffix: *blas_suff toolchain: *comp_mpi_tc - FFTW: 3.3.3 toolchain: *comp_mpi_tc - ScaLAPACK: 2.0.2 versionsuffix: !join [-, *blas, *blas_suff] toolchain: *comp_mpi_tc For the full version of this easyconfig file, see the example ``.yeb`` easyconfig :ref: `easyconfig_yeb_format_examples_goolf1410` . .. _easyconfig_yeb_format_new: OS dependencies and sanity check paths ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To specify parameters that used to contain tuples such as ``osdependencies`` and ``sanity_check_paths`` , simply use lists (sequences) instead of tuples. For example :: # note: this is eb syntax, will not work in .yeb files osdependencies = [('openssl-devel', 'libssl-dev', 'libopenssl-devel')] Becomes :: osdependencies: [[openssl-devel, libssl-dev, libopenssl-devel]] And :: # note: this is eb syntax, will not work in .yeb files sanity_check_paths = { 'files': ['fileA', ('fileB', 'fileC')], 'dirs' : ['dirA', 'dirB'], } Becomes :: sanity_check_paths: { files: [fileA, [fileB, fileC]], dirs: [dirA, dirB] } Shorthands for common easyconfig parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Toolchain format ################ The easyconfig parameter ``toolchain`` in .eb files is defined as a dictionary ``{'name':'foo', 'version':'bar'}`` . In the .yeb format, this can be done much easier by just using ``name, version`` . E.g :: # note: this is eb syntax, will not work in yeb files toolchain = {'name':'intel', 'version':'2015b'} becomes :: toolchain: intel, 2015b .. _easyconfig_yeb_format_examples: Examples -------- .. _easyconfig_yeb_format_examples_gzip16_GCC492: gzip-1.6-GCC-4.9.2.yeb ~~~~~~~~~~~~~~~~~~~~~~ Example easyconfig for gzip v1.6 using the ``GCC/4.9.2`` toolchain. .. code :: %YAML 1.2 --- easyblock: ConfigureMake name: gzip version: 1.6 homepage: 'http://www.gnu.org/software/gzip/' description: gzip is a popular data compression program as a replacement for compress toolchain: GCC, 4.9.2 # http://ftp.gnu.org/gnu/gzip/gzip-1.6.tar.gz source_urls: [*GNU_SOURCE] sources: [%(name)s-%(version)s.tar.gz] # make sure the gzip, gunzip and compress binaries are available after installation sanity_check_paths: { files: [bin/gunzip, bin/gzip, bin/uncompress], dirs: [], } moduleclass: tools .. _easyconfig_yeb_format_examples_goolf1410: goolf-1.4.10.yeb ~~~~~~~~~~~~~~~~ Easyconfig file in YAML syntax for the goolf v1.4.10 toolchain. .. code :: _internal_variables_: - &version 1.4.10 - &comp_name GCC - &comp_version 4.7.2 - &comp [ *comp_name, * comp_version] - &blaslib OpenBLAS - &blasver 0.2.6 - &blas !join [ *blaslib, -, * blasver] - &blas_suff -LAPACK-3.4.2 - &comp_mpi_tc [gompi, *version] easyblock: Toolchain name: goolf version: *version homepage: (none) description: | GNU Compiler Collection (GCC) based compiler toolchain, including OpenMPI for MPI support, OpenBLAS (BLAS and LAPACK support), FFTW and ScaLAPACK. toolchain: {name: system, version: system} # compiler toolchain dependencies # we need GCC and OpenMPI as explicit dependencies instead of gompi toolchain # because of toolchain preparation functions dependencies: - *comp_name: * comp_version - OpenMPI: 1.6.4 toolchain: *comp - *blaslib: * blasver versionsuffix: *blas_suff toolchain: *comp_mpi_tc - FFTW: 3.3.3 toolchain: *comp_mpi_tc - ScaLAPACK: 2.0.2 versionsuffix: !join [-, *blas, * blas_suff] toolchain: *comp_mpi_tc moduleclass: toolchain Python-2.7.10-intel-2015b.yeb ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. code :: _internal_variables_: - &numpyversion 1.9.2 - &scipyversion 0.15.1 easyblock: ConfigureMake name: Python version: 2.7.10 homepage: http://python.org/ description: | Python is a programming language that lets you work more quickly and integrate your systems more effectively. toolchain: intel, 2015b toolchainopts: {pic: True, opt: True, optarch: True} source_urls: ['http://www.python.org/ftp/python/%(version)s/'] sources: [*SOURCE_TGZ] # python needs bzip2 to build the bz2 package dependencies: [ - bzip2: 1.0.6 - zlib: 1.2.8 - libreadline: 6.3 - ncurses: 5.9 - SQLite: 3.8.10.2 - Tk: 8.4.6 versionsuffix: -no-X11 # - OpenSSL: 1.0.1m # OS dependency should be preferred if the os version is more recent then this version, its # nice to have an up to date openssl for security reasons ] osdependencies: [[openssl-devel, libssl-dev, libopenssl-devel]] # order is important! # package versions updated May 28th 2015 exts_list: [ [setuptools, '16.0', { source_urls: [\"https://pypi.python.org/packages/source/s/setuptools/\"], }], [pip, 7.0.1, { source_urls: [\"https://pypi.python.org/packages/source/p/pip/\"], }], [nose, 1.3.6, { source_urls: [\"https://pypi.python.org/packages/source/n/nose/\"], }], [numpy, *numpyversion, { source_urls: [ [!join [\"http://sourceforge.net/projects/numpy/files/NumPy/\", *numpyversion], download] ], patches: [ numpy-1.8.0-mkl.patch, # % numpyversion, ], }], [scipy, *scipyversion, { source_urls: [ [!join [\"http://sourceforge.net/projects/scipy/files/scipy/\", *scipyversion], download]], }], [blist, 1.3.6, { source_urls: [\"https://pypi.python.org/packages/source/b/blist/\"], }], [mpi4py, 1.3.1, { source_urls: [\"http://bitbucket.org/mpi4py/mpi4py/downloads/\"], }], [paycheck, 1.0.2, { source_urls: [\"https://pypi.python.org/packages/source/p/paycheck/\"], }], [argparse, 1.3.0, { source_urls: [\"https://pypi.python.org/packages/source/a/argparse/\"], }], [pbr, 1.0.1, { source_urls: [\"https://pypi.python.org/packages/source/p/pbr/\"], }], [lockfile, 0.10.2, { source_urls: [\"https://pypi.python.org/packages/source/l/lockfile/\"], }], [Cython, '0.22', { source_urls: [\"http://www.cython.org/release/\"], }], [six, 1.9.0, { source_urls: [\"https://pypi.python.org/packages/source/s/six/\"], }], [dateutil, 2.4.2, { source_tmpl: python-%(name)s-%(version)s.tar.gz, source_urls: [\"https://pypi.python.org/packages/source/p/python-dateutil/\"], }], [deap, 1.0.2, { # escaped with quotes because yaml values can't start with % source_tmpl: \"%(name)s-%(version)s.post2.tar.gz\", source_urls: [\"https://pypi.python.org/packages/source/d/deap/\"], }], [decorator, 3.4.2, { source_urls: [\"https://pypi.python.org/packages/source/d/decorator/\"], }], [arff, 2.0.2, { source_tmpl: liac-%(name)s-%(version)s.zip, source_urls: [\"https://pypi.python.org/packages/source/l/liac-arff/\"], }], [pycrypto, 2.6.1, { modulename: Crypto, source_urls: [\"http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/\"], }], [ecdsa, '0.13', { source_urls: [\"https://pypi.python.org/packages/source/e/ecdsa/\"], }], [paramiko, 1.15.2, { source_urls: [\"https://pypi.python.org/packages/source/p/paramiko/\"], }], [pyparsing, 2.0.3, { source_urls: [\"https://pypi.python.org/packages/source/p/pyparsing/\"], }], [netifaces, 0.10.4, { source_urls: [\"https://pypi.python.org/packages/source/n/netifaces\"], }], [netaddr, 0.7.14, { source_urls: [\"https://pypi.python.org/packages/source/n/netaddr\"], }], [mock, 1.0.1, { source_urls: [\"https://pypi.python.org/packages/source/m/mock\"], }], [pytz, '2015.4', { source_urls: [\"https://pypi.python.org/packages/source/p/pytz\"], }], [pandas, 0.16.1, { source_urls: [\"https://pypi.python.org/packages/source/p/pandas\"], }], ] moduleclass: lang","title":"Writing easyconfig files in YAML syntax (.yeb format)"},{"location":"api/","text":"API \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/api.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/api.rst in easybuilders/easybuild repo target: docs/api/index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"API"},{"location":"api/#api","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/api.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/api.rst in easybuilders/easybuild repo target: docs/api/index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"API"},{"location":"demos/","text":"Demos \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/index.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/index.rst in easybuilders/easybuild repo target: docs/demos/index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demos"},{"location":"demos/#demos","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/index.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/index.rst in easybuilders/easybuild repo target: docs/demos/index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demos"},{"location":"demos/bootstrapping/","text":"Demo: bootstrapping EasyBuild \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/bootstrapping.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/bootstrapping.rst in easybuilders/easybuild repo target: docs/demos/bootstrapping.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demo: bootstrapping EasyBuild"},{"location":"demos/bootstrapping/#demo-bootstrapping-easybuild","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/bootstrapping.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/bootstrapping.rst in easybuilders/easybuild repo target: docs/demos/bootstrapping.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demo: bootstrapping EasyBuild"},{"location":"demos/configuring/","text":"Demo: configuring EasyBuild \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/configuring.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/configuring.rst in easybuilders/easybuild repo target: docs/demos/configuring.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demo: configuring EasyBuild"},{"location":"demos/configuring/#demo-configuring-easybuild","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/configuring.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/configuring.rst in easybuilders/easybuild repo target: docs/demos/configuring.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demo: configuring EasyBuild"},{"location":"demos/review-pr/","text":"Demo: reviewing easyconfig pull requests with eb --review-pr \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/review_pr.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/review_pr.rst in easybuilders/easybuild repo target: docs/demos/review-pr.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demo: reviewing easyconfig pull requests with `eb --review-pr`"},{"location":"demos/review-pr/#demo-reviewing-easyconfig-pull-requests-with-eb-review-pr","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/demos/review_pr.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/demos/review_pr.rst in easybuilders/easybuild repo target: docs/demos/review-pr.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Demo: reviewing easyconfig pull requests with eb --review-pr"},{"location":"easybuild-v4/overview-of-changes/","text":"Overview of changes in EasyBuild v4.0 \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/EasyBuild4-overview-of-changes.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/EasyBuild4-overview-of-changes.rst in easybuilders/easybuild repo target: docs/easybuild-v4/overview-of-changes.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _eb4_changes_overview: Overview of changes in EasyBuild version 4.0 ============================================ This page provides a concise overview of the most prominent changes in EasyBuild version 4.0, compared to the latest EasyBuild v3.x (version 3.9.4). A detailed overview with links to the pull requests in which the changes are made is available in the :ref: `release_notes` (see :ref: `release_notes_eb400` in particular). .. contents :: :depth: 2 :backlinks: none :local: .. _eb4_changes_significant_enhancements: Significant enhancements in EasyBuild v4.0 ------------------------------------------ Various significant enhancements are included in EasyBuild v4.0, including: * :ref: `eb4_no_required_deps` * :ref: `eb4_python3_support` * :ref: `eb4_custom_easyblocks` * :ref: `eb4_2019b_common_toolchains` * :ref: `eb4_changes_local_variables` .. _eb4_no_required_deps: No more required Python packages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To simplify the installation of EasyBuild, **no Python packages other than the ones included in the Python standard library are required** for EasyBuild v4.0. More specifically: * ``setuptools`` **is no longer a required dependency** , neither for using EasyBuild nor for installing it. This change was motivated by the various problems with installing EasyBuild that were reported, which could often be attributed to ``setuptools`` in one way or another (ancient versions being installed via the OS package manager, quirky or broken functionality in specific versions, etc.). * ``vsc-base`` **and** ``vsc-install`` **are no longer required dependencies** . The relevant parts of these packages were ingested into the EasyBuild framework codebase itself (see also :ref: `eb4_changes_ingested_vsc_base` ), mostly to facilitate making EasyBuild compatible with Python 3. Note that specific Python packages may currently still be required for certain EasyBuild functionality outside of the core functionality of building and installing scientific software, including ``keyring`` for the GitHub integration features (see :ref: `integration_with_github` ), etc. .. _eb4_python3_support: Support for running EasyBuild on top of Python 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A significant effort has been made to ensure that the EasyBuild framework and the easyblocks included with EasyBuild are **compatible with Python 3** , while retaining the compatibility with Python 2. Currently supported Python versions include: ``2.6`` , ``2.7`` , ``3.5`` , ``3.6`` , ``3.7`` . To achieve this in a maintainable way, the ``easybuild.tools.py2vs3`` package was introduced. For more details, please see :ref: `py2_py3_compatibility` . .. _eb4_custom_easyblocks: Custom software-specific easyblocks for ``iccifort``, ``numexpr``, ``OpenMPI`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A couple of **additional custom software-specific easyblocks** were added in EasyBuild v4.0, including: * ``iccifort`` : to install ``icc`` and ``ifort`` together in a single prefix, and use that installation as a toolchain * ``numexpr`` : to ensure that ``numexpr`` is linked with Intel MKL's VML when it is available * ``OpenMPI`` : to improve the (default) configuration of ``OpenMPI`` based on installed OS packages (for example for InfiniBand support) and available dependencies In addition, various (generic and software-specific) easyblocks were improved and enhanced (see :ref: `release_notes` for more details). .. _eb4_2019b_common_toolchains: 2019b update of common toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The ``2019b`` update of the common toolchains is included with EasyBuild v4.0; see also :ref: `common_toolchains` . .. _eb4_changes_local_variables: Local variables in easyconfigs should follow recommended naming scheme ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A recommended naming scheme for local variables in easyconfig files was introduced. If an easyconfig file contains local variables that do not follow the recommended naming scheme, a warning will be printed (by default). For more information, see :ref: `easyconfig_files_local_variables` . .. _eb4_changes_backwards_incompatible: Backwards-incompatible changes in EasyBuild v4.0 ------------------------------------------------ A couple of *backwards-incompatible* changes were made in EasyBuild v4.0: * :ref: `eb4_changes_fixed_installdir_naming_scheme` * :ref: `eb4_changes_relocated_stuff` * :ref: `eb4_changes_ingested_vsc_base` * :ref: `eb4_changes_py2vs3` .. note :: **Other than the changed default configuration, these changes are mainly important for developers of the EasyBuild framework and easyblock implementers.** .. _eb4_changes_fixed_installdir_naming_scheme: ``--fixed-installdir-naming-scheme`` enabled by default ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **The** ``--fixed-installdir-naming-scheme`` **was changed to be** *enabled* **by default, which makes the name of the software installation directory independent of the module naming scheme being used.** With this configuration setting enabled, the name of software installation directories will match the module name generated by the (default) ``EasyBuildMNS`` module naming scheme. So, for an easyconfig file ``example-1.2.3-foss-2019b.eb`` , the software installation directory will always be ``<prefix>/software/example/1.2.3-foss-2019b`` , regardless of the active module naming scheme. This change was done to make it easier to generate module files using one or more additional module naming scheme (using ``--module-only`` ) for already existing software installations. Only when the name of the software installation directories is independent of the module naming scheme being used during the (first) installation is it possible to later generate additional module files using a different module naming scheme. .. note :: Having ``--fixed-installdir-naming-scheme`` enabled should not cause problems in existing setups. Mixing different naming schemes for software installations directories in a single software stack works just fine; it's mostly a matter of inconsistency that could be confusing for humans. .. _eb4_changes_fixed_installdir_naming_scheme_disabling: Disabling ``--fixed-installdir-naming-scheme`` ++++++++++++++++++++++++++++++++++++++++++++++ If you are using a module naming scheme other than the default ``EasyBuildMNS`` , you may prefer disabling ``--fixed-installdir-naming-scheme`` to maintain consistency in the names of software installation directories. *Do note that this implies that you won't be able to generate additional modules files using a different module naming scheme for existing installations.* To disable ``--fixed-installdir-naming-scheme`` , you can either * disable the ``fixed-installdir-naming-scheme`` configuration option in the ``[override]`` section of an EasyBuild configuration file :: [override] fixed-installdir-naming-scheme = 0 (see also :ref: `configuration_file` ) * set the ``$EASYBUILD_DISABLE_FIXED_INSTALLDIR_NAMING_SCHEME`` environment variable:: export EASYBUILD_DISABLE_FIXED_INSTALLDIR_NAMING_SCHEME=1 (see also :ref: `configuration_env_vars` ) * use the ``--disable-fixed-installdir-naming-scheme ...`` command line option:: eb --disable-fixed-installdir-naming-scheme ... (see also :ref: `configuration_cmdline` ) .. _eb4_changes_relocated_stuff: Relocated functions, classes and constants in EasyBuild framework ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **A limited number of functions, classes and constants have been relocated in the EasyBuild framework.** This was done mostly to ensure that the ``__init__.py`` files that define packages are empty, other than the ``pkgutil.extend_path`` (which replaces the ``pkg_resources.declare_namespace`` which requires ``setuptools`` , see also :ref: `eb4_no_required_deps` ). Making EasyBuild compatible with Python 3 also required some similar changes, see :ref: `eb4_changes_py2vs3` . A detailed overview of relocated functions and constants is available at :ref: `eb4_relocated_functions_classes_constants` . .. _eb4_changes_ingested_vsc_base: Ingested functionality from ``vsc-base`` and ``vsc-install`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The **functionality from the** ``vsc-base`` **and** ``vsc-install`` **packages required by EasyBuild has been ingested in the EasyBuild framework**, see also :ref: `eb4_no_required_deps` . This has primarily been done in the new ``easybuild.base`` package, so in general imports from a module in the ``vsc.utils`` package should be replaced with a corresponding import statement from that same module in the ``easybuild.base`` package. A number of specific functions and classes have been placed in existing modules in the ``easybuild.tools`` package instead. The affected functions are listed in :ref: `eb4_relocated_functions_classes_constants` . .. _eb4_changes_ingested_vsc_base_fake_vsc_namespace: Fake ``vsc`` namespace ++++++++++++++++++++++ To avoid that any functionality is imported from an already installed ``vsc-base`` (or ``vsc-install`` ) package, which could lead to strange side-effects, a fake ``vsc`` namespace is injected since EasyBuild v4.0. If an import from ``vsc.utils.*`` is detected (for example from an easyblock or from a module that is included via one of the ``--include-*`` options), an error like this will be produced :: ERROR: Detected import from 'vsc' namespace in /home/example/old_easyblock.py (line 7) vsc-base & vsc-install were ingested into the EasyBuild framework in EasyBuild v4.0 The functionality you need may be available in the 'easybuild.base.*' namespace. .. _eb4_changes_py2vs3: Functions & classes that must be imported from the ``easybuild.tools.py2vs3`` namespace ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **A handful functions and classes that could be imported directly from the Python standard library should now be imported from the ** ``easybuild.tools.py2vs3`` ** namespace instead** (perhaps under a different name), to ensure compatibility with Python 2 and 3. See :ref: `py2_py3_compatibility` for more information. The affected functions are also included in :ref: `eb4_relocated_functions_classes_constants` . .. _eb4_changes_deprecated: Deprecated functionality in EasyBuild v4.0 ------------------------------------------ Some functionality was deprecated in EasyBuild v4.0, and will no longer be supported in EasyBuild v5.0. If you trigger any deprecated functionality, a warning message will be printed. .. _eb4_changes_dummy_tc: Deprecated ``dummy`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The ``dummy`` toolchain is now deprecated, and has been replaced with the ``system`` toolchain. For more information, please consult :ref: `system_toolchain` .","title":"Overview of changes in EasyBuild v4.0"},{"location":"easybuild-v4/overview-of-changes/#overview-of-changes-in-easybuild-v40","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/EasyBuild4-overview-of-changes.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/EasyBuild4-overview-of-changes.rst in easybuilders/easybuild repo target: docs/easybuild-v4/overview-of-changes.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _eb4_changes_overview: Overview of changes in EasyBuild version 4.0 ============================================ This page provides a concise overview of the most prominent changes in EasyBuild version 4.0, compared to the latest EasyBuild v3.x (version 3.9.4). A detailed overview with links to the pull requests in which the changes are made is available in the :ref: `release_notes` (see :ref: `release_notes_eb400` in particular). .. contents :: :depth: 2 :backlinks: none :local: .. _eb4_changes_significant_enhancements: Significant enhancements in EasyBuild v4.0 ------------------------------------------ Various significant enhancements are included in EasyBuild v4.0, including: * :ref: `eb4_no_required_deps` * :ref: `eb4_python3_support` * :ref: `eb4_custom_easyblocks` * :ref: `eb4_2019b_common_toolchains` * :ref: `eb4_changes_local_variables` .. _eb4_no_required_deps: No more required Python packages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ To simplify the installation of EasyBuild, **no Python packages other than the ones included in the Python standard library are required** for EasyBuild v4.0. More specifically: * ``setuptools`` **is no longer a required dependency** , neither for using EasyBuild nor for installing it. This change was motivated by the various problems with installing EasyBuild that were reported, which could often be attributed to ``setuptools`` in one way or another (ancient versions being installed via the OS package manager, quirky or broken functionality in specific versions, etc.). * ``vsc-base`` **and** ``vsc-install`` **are no longer required dependencies** . The relevant parts of these packages were ingested into the EasyBuild framework codebase itself (see also :ref: `eb4_changes_ingested_vsc_base` ), mostly to facilitate making EasyBuild compatible with Python 3. Note that specific Python packages may currently still be required for certain EasyBuild functionality outside of the core functionality of building and installing scientific software, including ``keyring`` for the GitHub integration features (see :ref: `integration_with_github` ), etc. .. _eb4_python3_support: Support for running EasyBuild on top of Python 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A significant effort has been made to ensure that the EasyBuild framework and the easyblocks included with EasyBuild are **compatible with Python 3** , while retaining the compatibility with Python 2. Currently supported Python versions include: ``2.6`` , ``2.7`` , ``3.5`` , ``3.6`` , ``3.7`` . To achieve this in a maintainable way, the ``easybuild.tools.py2vs3`` package was introduced. For more details, please see :ref: `py2_py3_compatibility` . .. _eb4_custom_easyblocks: Custom software-specific easyblocks for ``iccifort``, ``numexpr``, ``OpenMPI`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A couple of **additional custom software-specific easyblocks** were added in EasyBuild v4.0, including: * ``iccifort`` : to install ``icc`` and ``ifort`` together in a single prefix, and use that installation as a toolchain * ``numexpr`` : to ensure that ``numexpr`` is linked with Intel MKL's VML when it is available * ``OpenMPI`` : to improve the (default) configuration of ``OpenMPI`` based on installed OS packages (for example for InfiniBand support) and available dependencies In addition, various (generic and software-specific) easyblocks were improved and enhanced (see :ref: `release_notes` for more details). .. _eb4_2019b_common_toolchains: 2019b update of common toolchains ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The ``2019b`` update of the common toolchains is included with EasyBuild v4.0; see also :ref: `common_toolchains` . .. _eb4_changes_local_variables: Local variables in easyconfigs should follow recommended naming scheme ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A recommended naming scheme for local variables in easyconfig files was introduced. If an easyconfig file contains local variables that do not follow the recommended naming scheme, a warning will be printed (by default). For more information, see :ref: `easyconfig_files_local_variables` . .. _eb4_changes_backwards_incompatible: Backwards-incompatible changes in EasyBuild v4.0 ------------------------------------------------ A couple of *backwards-incompatible* changes were made in EasyBuild v4.0: * :ref: `eb4_changes_fixed_installdir_naming_scheme` * :ref: `eb4_changes_relocated_stuff` * :ref: `eb4_changes_ingested_vsc_base` * :ref: `eb4_changes_py2vs3` .. note :: **Other than the changed default configuration, these changes are mainly important for developers of the EasyBuild framework and easyblock implementers.** .. _eb4_changes_fixed_installdir_naming_scheme: ``--fixed-installdir-naming-scheme`` enabled by default ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **The** ``--fixed-installdir-naming-scheme`` **was changed to be** *enabled* **by default, which makes the name of the software installation directory independent of the module naming scheme being used.** With this configuration setting enabled, the name of software installation directories will match the module name generated by the (default) ``EasyBuildMNS`` module naming scheme. So, for an easyconfig file ``example-1.2.3-foss-2019b.eb`` , the software installation directory will always be ``<prefix>/software/example/1.2.3-foss-2019b`` , regardless of the active module naming scheme. This change was done to make it easier to generate module files using one or more additional module naming scheme (using ``--module-only`` ) for already existing software installations. Only when the name of the software installation directories is independent of the module naming scheme being used during the (first) installation is it possible to later generate additional module files using a different module naming scheme. .. note :: Having ``--fixed-installdir-naming-scheme`` enabled should not cause problems in existing setups. Mixing different naming schemes for software installations directories in a single software stack works just fine; it's mostly a matter of inconsistency that could be confusing for humans. .. _eb4_changes_fixed_installdir_naming_scheme_disabling: Disabling ``--fixed-installdir-naming-scheme`` ++++++++++++++++++++++++++++++++++++++++++++++ If you are using a module naming scheme other than the default ``EasyBuildMNS`` , you may prefer disabling ``--fixed-installdir-naming-scheme`` to maintain consistency in the names of software installation directories. *Do note that this implies that you won't be able to generate additional modules files using a different module naming scheme for existing installations.* To disable ``--fixed-installdir-naming-scheme`` , you can either * disable the ``fixed-installdir-naming-scheme`` configuration option in the ``[override]`` section of an EasyBuild configuration file :: [override] fixed-installdir-naming-scheme = 0 (see also :ref: `configuration_file` ) * set the ``$EASYBUILD_DISABLE_FIXED_INSTALLDIR_NAMING_SCHEME`` environment variable:: export EASYBUILD_DISABLE_FIXED_INSTALLDIR_NAMING_SCHEME=1 (see also :ref: `configuration_env_vars` ) * use the ``--disable-fixed-installdir-naming-scheme ...`` command line option:: eb --disable-fixed-installdir-naming-scheme ... (see also :ref: `configuration_cmdline` ) .. _eb4_changes_relocated_stuff: Relocated functions, classes and constants in EasyBuild framework ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **A limited number of functions, classes and constants have been relocated in the EasyBuild framework.** This was done mostly to ensure that the ``__init__.py`` files that define packages are empty, other than the ``pkgutil.extend_path`` (which replaces the ``pkg_resources.declare_namespace`` which requires ``setuptools`` , see also :ref: `eb4_no_required_deps` ). Making EasyBuild compatible with Python 3 also required some similar changes, see :ref: `eb4_changes_py2vs3` . A detailed overview of relocated functions and constants is available at :ref: `eb4_relocated_functions_classes_constants` . .. _eb4_changes_ingested_vsc_base: Ingested functionality from ``vsc-base`` and ``vsc-install`` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The **functionality from the** ``vsc-base`` **and** ``vsc-install`` **packages required by EasyBuild has been ingested in the EasyBuild framework**, see also :ref: `eb4_no_required_deps` . This has primarily been done in the new ``easybuild.base`` package, so in general imports from a module in the ``vsc.utils`` package should be replaced with a corresponding import statement from that same module in the ``easybuild.base`` package. A number of specific functions and classes have been placed in existing modules in the ``easybuild.tools`` package instead. The affected functions are listed in :ref: `eb4_relocated_functions_classes_constants` . .. _eb4_changes_ingested_vsc_base_fake_vsc_namespace: Fake ``vsc`` namespace ++++++++++++++++++++++ To avoid that any functionality is imported from an already installed ``vsc-base`` (or ``vsc-install`` ) package, which could lead to strange side-effects, a fake ``vsc`` namespace is injected since EasyBuild v4.0. If an import from ``vsc.utils.*`` is detected (for example from an easyblock or from a module that is included via one of the ``--include-*`` options), an error like this will be produced :: ERROR: Detected import from 'vsc' namespace in /home/example/old_easyblock.py (line 7) vsc-base & vsc-install were ingested into the EasyBuild framework in EasyBuild v4.0 The functionality you need may be available in the 'easybuild.base.*' namespace. .. _eb4_changes_py2vs3: Functions & classes that must be imported from the ``easybuild.tools.py2vs3`` namespace ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **A handful functions and classes that could be imported directly from the Python standard library should now be imported from the ** ``easybuild.tools.py2vs3`` ** namespace instead** (perhaps under a different name), to ensure compatibility with Python 2 and 3. See :ref: `py2_py3_compatibility` for more information. The affected functions are also included in :ref: `eb4_relocated_functions_classes_constants` . .. _eb4_changes_deprecated: Deprecated functionality in EasyBuild v4.0 ------------------------------------------ Some functionality was deprecated in EasyBuild v4.0, and will no longer be supported in EasyBuild v5.0. If you trigger any deprecated functionality, a warning message will be printed. .. _eb4_changes_dummy_tc: Deprecated ``dummy`` toolchain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The ``dummy`` toolchain is now deprecated, and has been replaced with the ``system`` toolchain. For more information, please consult :ref: `system_toolchain` .","title":"Overview of changes in EasyBuild v4.0"},{"location":"easybuild-v4/overview-relocated-functions-constants/","text":"Overview of relocated functions, classes and constants in EasyBuild v4.0 \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/EasyBuild4-overview-relocated-functions-constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/EasyBuild4-overview-relocated-functions-constants.rst in easybuilders/easybuild repo target: docs/easybuild-v4/overview-relocated-functions-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _eb4_relocated_functions_classes_constants: Overview of relocated functions, classes and constants in EasyBuild v4.0 ======================================================================== This page provides an alphabetical overview of relocated functions, classes and constants in EasyBuild version 4.0; see :ref: `eb4_changes_backwards_incompatible` for motivation and high-level information. .. _eb4_relocated_basestring: ``basestring`` type ------------------- Rather than using the ``basestring`` type from the Python 2 standard library directly (for example in an ``isinstance`` expression), the ``string_type`` type from the ``easybuild.tools.py2vs3`` package should be used instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_configparser: ``configparser`` module ------------------------ The ``configparser`` module that is part of the Python 2 standard library (via ``ConfigParser`` ) must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_DEVEL_MODULE_SUFFIX: ``DEVEL_MODULE_SUFFIX`` constant -------------------------------- The ``DEVEL_MODULE_SUFFIX`` constant was relocated from ``easybuild.tools.module_naming_scheme`` to ``easybuild.tools.module_naming_scheme.mns`` . .. _eb4_relocated_DUMMY_TOOLCHAIN_NAME_VERSION: ``DUMMY_TOOLCHAIN_NAME`` and ``DUMMY_TOOLCHAIN_VERSION`` constants ------------------------------------------------------------------ The ``DUMMY_TOOLCHAIN_NAME`` and ``DUMMY_TOOLCHAIN_VERSION`` constants were relocated from ``easybuild.tools.toolchain`` to ``easybuild.tools.toolchain.toolchain`` . .. note :: Since the ``dummy`` toolchain has been deprecated and is replaced by the ``system`` toolchain (see :ref: `system_toolchain` ), you should use the ``is_system_toolchain`` function or ``Toolchain.is_system_toolchain`` method to check whether a toolchain is a ``dummy`` or ``system`` toolchain, rather than using these constants directly (or using the ``SYSTEM_TOOLCHAIN-*`` equivalents). .. _eb4_relocated_FrozenDictKnownKeys: ``FrozenDictKnownKeys`` class ----------------------------- The ``FrozenDictKnownKeys`` class from ``vsc.utils.missing`` is now available from ``easybuild.base.frozendict`` . .. _eb4_relocated_GEENRAL_CLASS: ``GENERAL_CLASS`` constant -------------------------- The ``GENERAL_CLASS`` constant was relocated from ``easybuild.tools.module_naming_scheme`` to ``easybuild.tools.config`` . .. _eb4_relocated_get_class_for: ``get_class_for`` function -------------------------- The ``get_class_for`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_get_subclasses: ``get_subclasses`` function --------------------------- The ``get_subclasses`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_INDENT_4SPACES: ``INDENT_4SPACES`` constant --------------------------- The ``INDENT_4SPACES`` constants was relocated from ``easybuild.framework.easyconfig.format.format`` to ``easybuild.tools.utilities`` . .. _eb4_relocated_mk_rst_table: ``mk_rst_table`` function -------------------------- The ``mk_rst_table`` function from ``vsc.utils.docs`` is now available from ``easybuild.tools.docs`` . .. _eb4_relocated_ModuleNamingScheme: ``ModuleNamingScheme`` class ---------------------------- The ``ModuleNamingScheme`` class was relocated from ``easybuild.tools.module_naming_scheme`` to ``easybuild.tools.module_naming_scheme.mns`` . .. _eb4_relocated_nub: ``nub`` function ---------------- The ``nub`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_OrderedDict: ``OrderedDict`` class --------------------- The ``OrderedDict`` class that is part of the Python 2 standard library (via ``collections`` ) must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_reload: ``reload`` function ------------------- The ``reload`` function that is a built-in function of the Python 2 standard library must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_shell_quote: ``shell_quote`` function ------------------------ The ``shell_quote`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_sched_getaffinity: ``sched_getaffinity`` function ------------------------------ The ``sched_getaffinity`` function from ``vsc.utils.affinity`` is now available from ``easybuild.tools.systemtools`` . .. _eb4_relocated_Singleton: ``Singleton`` class ------------------- The ``Singleton`` class from ``vsc.utils.patterns`` is now available from ``easybuild.tools.config`` . .. _eb4_relocated_StringIO: ``StringIO`` class ------------------ Rather than importing the ``StringIO`` class from the ``StringIO`` module of the Python 2 standard library, it should be imported from the ``easybuild.tools.py2vs3`` package instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_subprocess_Popen: ``subprocess.Popen`` function ----------------------------- Rather than using the ``subprocess.Popen`` function directly, the ``subprocess_popen_text`` function from the ``easybuild.tools.py2vs3`` package should be used instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_urlencode: ``urlencode`` function ---------------------- Rather than importing the ``urlencode`` function from the ``urllib`` module of the Python 2 standard library, it should be imported from the ``easybuild.tools.py2vs3`` package instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_urllib: ``urllib`` module ----------------- Rather than using the ``urllib`` module from the Python 2 standard library directly, the ``std_urllib`` module from the ``easybuild.tools.py2vs3`` package should be used instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_urllib2: ``urllib2`` module ------------------ Functions that were imported from the ``urllib2`` package that is part of the Python 2 standard library must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_vsc_utils_modules: ``vsc.utils.*`` modules ----------------------- The functionality from the following ``vsc.utils.*`` modules required by EasyBuild has been ingested in the corresponding ``easybuild.base.*`` module: * ``vsc.utils.exceptions`` * ``vsc.utils.fancylogger`` * ``vsc.utils.generaloption`` * ``vsc.utils.optcomplete`` * ``vsc.utils.rest`` * ``vsc.utils.testing`` * ``vsc.utils.wrapper`` See also :ref: `eb4_no_required_deps` .","title":"Overview of relocated functions, classes and constants in EasyBuild v4.0"},{"location":"easybuild-v4/overview-relocated-functions-constants/#overview-of-relocated-functions-classes-and-constants-in-easybuild-v40","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/EasyBuild4-overview-relocated-functions-constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/EasyBuild4-overview-relocated-functions-constants.rst in easybuilders/easybuild repo target: docs/easybuild-v4/overview-relocated-functions-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _eb4_relocated_functions_classes_constants: Overview of relocated functions, classes and constants in EasyBuild v4.0 ======================================================================== This page provides an alphabetical overview of relocated functions, classes and constants in EasyBuild version 4.0; see :ref: `eb4_changes_backwards_incompatible` for motivation and high-level information. .. _eb4_relocated_basestring: ``basestring`` type ------------------- Rather than using the ``basestring`` type from the Python 2 standard library directly (for example in an ``isinstance`` expression), the ``string_type`` type from the ``easybuild.tools.py2vs3`` package should be used instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_configparser: ``configparser`` module ------------------------ The ``configparser`` module that is part of the Python 2 standard library (via ``ConfigParser`` ) must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_DEVEL_MODULE_SUFFIX: ``DEVEL_MODULE_SUFFIX`` constant -------------------------------- The ``DEVEL_MODULE_SUFFIX`` constant was relocated from ``easybuild.tools.module_naming_scheme`` to ``easybuild.tools.module_naming_scheme.mns`` . .. _eb4_relocated_DUMMY_TOOLCHAIN_NAME_VERSION: ``DUMMY_TOOLCHAIN_NAME`` and ``DUMMY_TOOLCHAIN_VERSION`` constants ------------------------------------------------------------------ The ``DUMMY_TOOLCHAIN_NAME`` and ``DUMMY_TOOLCHAIN_VERSION`` constants were relocated from ``easybuild.tools.toolchain`` to ``easybuild.tools.toolchain.toolchain`` . .. note :: Since the ``dummy`` toolchain has been deprecated and is replaced by the ``system`` toolchain (see :ref: `system_toolchain` ), you should use the ``is_system_toolchain`` function or ``Toolchain.is_system_toolchain`` method to check whether a toolchain is a ``dummy`` or ``system`` toolchain, rather than using these constants directly (or using the ``SYSTEM_TOOLCHAIN-*`` equivalents). .. _eb4_relocated_FrozenDictKnownKeys: ``FrozenDictKnownKeys`` class ----------------------------- The ``FrozenDictKnownKeys`` class from ``vsc.utils.missing`` is now available from ``easybuild.base.frozendict`` . .. _eb4_relocated_GEENRAL_CLASS: ``GENERAL_CLASS`` constant -------------------------- The ``GENERAL_CLASS`` constant was relocated from ``easybuild.tools.module_naming_scheme`` to ``easybuild.tools.config`` . .. _eb4_relocated_get_class_for: ``get_class_for`` function -------------------------- The ``get_class_for`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_get_subclasses: ``get_subclasses`` function --------------------------- The ``get_subclasses`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_INDENT_4SPACES: ``INDENT_4SPACES`` constant --------------------------- The ``INDENT_4SPACES`` constants was relocated from ``easybuild.framework.easyconfig.format.format`` to ``easybuild.tools.utilities`` . .. _eb4_relocated_mk_rst_table: ``mk_rst_table`` function -------------------------- The ``mk_rst_table`` function from ``vsc.utils.docs`` is now available from ``easybuild.tools.docs`` . .. _eb4_relocated_ModuleNamingScheme: ``ModuleNamingScheme`` class ---------------------------- The ``ModuleNamingScheme`` class was relocated from ``easybuild.tools.module_naming_scheme`` to ``easybuild.tools.module_naming_scheme.mns`` . .. _eb4_relocated_nub: ``nub`` function ---------------- The ``nub`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_OrderedDict: ``OrderedDict`` class --------------------- The ``OrderedDict`` class that is part of the Python 2 standard library (via ``collections`` ) must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_reload: ``reload`` function ------------------- The ``reload`` function that is a built-in function of the Python 2 standard library must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_shell_quote: ``shell_quote`` function ------------------------ The ``shell_quote`` function from ``vsc.utils.missing`` is now available from ``easybuild.tools.utilities`` . .. _eb4_relocated_sched_getaffinity: ``sched_getaffinity`` function ------------------------------ The ``sched_getaffinity`` function from ``vsc.utils.affinity`` is now available from ``easybuild.tools.systemtools`` . .. _eb4_relocated_Singleton: ``Singleton`` class ------------------- The ``Singleton`` class from ``vsc.utils.patterns`` is now available from ``easybuild.tools.config`` . .. _eb4_relocated_StringIO: ``StringIO`` class ------------------ Rather than importing the ``StringIO`` class from the ``StringIO`` module of the Python 2 standard library, it should be imported from the ``easybuild.tools.py2vs3`` package instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_subprocess_Popen: ``subprocess.Popen`` function ----------------------------- Rather than using the ``subprocess.Popen`` function directly, the ``subprocess_popen_text`` function from the ``easybuild.tools.py2vs3`` package should be used instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_urlencode: ``urlencode`` function ---------------------- Rather than importing the ``urlencode`` function from the ``urllib`` module of the Python 2 standard library, it should be imported from the ``easybuild.tools.py2vs3`` package instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_urllib: ``urllib`` module ----------------- Rather than using the ``urllib`` module from the Python 2 standard library directly, the ``std_urllib`` module from the ``easybuild.tools.py2vs3`` package should be used instead, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_urllib2: ``urllib2`` module ------------------ Functions that were imported from the ``urllib2`` package that is part of the Python 2 standard library must now be imported from the ``easybuild.tools.py2vs3`` package, to ensure that the code is compatible with both Python 2 and 3. See also :ref: `py2_py3_compatibility` . .. _eb4_relocated_vsc_utils_modules: ``vsc.utils.*`` modules ----------------------- The functionality from the following ``vsc.utils.*`` modules required by EasyBuild has been ingested in the corresponding ``easybuild.base.*`` module: * ``vsc.utils.exceptions`` * ``vsc.utils.fancylogger`` * ``vsc.utils.generaloption`` * ``vsc.utils.optcomplete`` * ``vsc.utils.rest`` * ``vsc.utils.testing`` * ``vsc.utils.wrapper`` See also :ref: `eb4_no_required_deps` .","title":"Overview of relocated functions, classes and constants in EasyBuild v4.0"},{"location":"legacy/configuration/","text":"Legacy configuration \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/Configuration_Legacy.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Configuration_Legacy.rst in easybuilders/easybuild repo target: docs/legacy/configuration.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _configuring_easybuild_legacy: Configuration Legacy ==================== .. XXX - UPDATE BY VERSION Legacy configuration is currently **deprecated!** If you are a new user of EasyBuild you can safely ignore everything below this line, refer instead to :doc: `Configuration` . -------- Porting from legacy configuration style --------------------------------------- In EasyBuild v1.x, a couple of configuration options, other than the standard ones aligned with variables, are available that follow the **legacy configuration style** , including: - the ``-C`` and ``--config`` command line arguments ( **use** ``--configfiles`` **instead** ) - the ``$EASYBUILDCONFIG`` environment variable ( **use** ``$EASYBUILD_CONFIGFILES`` **instead** ) - the default path ``$HOME/.easybuild/config.py`` ( **new-style default path is** ``$XDG_CONFIG_HOME/easybuild/config.cfg`` ) - the legacy fallback path ``<installpath>/easybuild/easybuild_config.py`` ( **only default/fallback path is** ``$XDG_CONFIG_HOME/easybuild/config.cfg`` ) Likewise, the following legacy environment variables allowed to override selected configuration settings: - ``$EASYBUILDBUILDPATH`` : build path to be used by EasyBuild ( **use** ``$EASYBUILD_BUILDPATH`` **instead** ) - ``$EASYBUILDINSTALLPATH`` : install path to be used by EasyBuild ( **use** ``$EASYBUILD_INSTALLPATH`` **instead** ) - ``$EASYBUILDSOURCEPATH`` : source path to be used by EasyBuild ( **use** ``$EASYBUILD_SOURCEPATH`` **instead** ) - ``$EASYBUILDPREFIX`` : build/install/source path prefix to be used ( **use** ``$EASYBUILD_PREFIX`` **instead** ) We *strongly* advise to switch to the new way of configuring EasyBuild as soon as possible, since the legacy configuration style will no longer be supported in EasyBuild v2.x. How EasyBuild used to be configured in the early days ----------------------------------------------------- Configuring `EasyBuild` is done by providing a configuration file. EasyBuild expects the configuration file to contain valid Python code, because it executes its contents (using ``exec`` ). The rationale is that this approach provides a lot of flexibility for configuring EasyBuild. EasyBuild will use the file that is provided by the path/filename in the following order of preference: - path/filename specified on the EasyBuild command line (using ``--config`` ), - path/filename obtained from the environment variable ``EASYBUILDCONFIG`` (if it is defined) - ``$HOME/.easybuild/config.py`` (as of EasyBuild v1.1) - the (default) configuration file at ``<path where EasyBuild was installed>/easybuild/easybuild_config.py`` Configuration variables ~~~~~~~~~~~~~~~~~~~~~~~ The configuration file must define the following five variables: ``build_path`` , ``install_path`` , ``source_path`` , ``repository`` , and ``log_format`` . If one of them is not defined, EasyBuild will complain and exit. Build path (required) ^^^^^^^^^^^^^^^^^^^^^ The ``build_path`` variable specifies the directory in which EasyBuild builds its software packages. Each software package is (by default) built in a subdirectory of the ``build_path`` under ``<name>/<version>/<toolchain><versionsuffix>`` . Note that the build directories are emptied by EasyBuild when the installation is completed (by default). Install path (required) ^^^^^^^^^^^^^^^^^^^^^^^ The ``install_path`` variable specifies the directory in which EasyBuild installs software packages and the corresponding module files. The packages themselves are installed under ``install_path/software`` in their own subdirectory aptly named ``<name>/<version>-<toolchain><versionsuffix>`` (by default), where name is the package name. The corresponding module files are installed under ``install_path/modules`` . **Setting $MODULEPATH** After the configuration, you need to make sure that ``$MODULEPATH`` environment variable is extended with the ``modules/all`` subdirectory of the ``install_path`` , i.e.: .. code :: bash export MODULEPATH = <install_path>/modules/all: $MODULEPATH It is probably a good idea to add this to your (favourite) shell .rc file, e.g., ``.bashrc`` , and/or the ``.profile`` login scripts, so you do not need to adjust the ``$MODULEPATH`` variable every time you start a new session. Source path (required) ^^^^^^^^^^^^^^^^^^^^^^ The ``source_path`` variable specifies the directory in which EasyBuild looks for software source and install files. Similarly to the configuration file lookup, EasyBuild looks for the installation files as given by the ``sources`` variable in the .eb easyconfig file, in the following order of preference: - ``<source_path>/<name>`` : a subdirectory determined by the name of the software package - ``<source_path>/<letter>/<name>`` : in the style of the ``easyblocks`` / ``easyconfigs`` directories: in a subdirectory determined by the first letter (in lower case) of the software package and by its full ``name`` - ``<source_path>`` : directly in the source path Note that these locations are also used when EasyBuild looks for patch files in addition to the various ``easybuild/easyconfigs`` directories that are listed in the ``$PYTHONPATH`` . .. _configparser: http://docs.python.org/2/library/configparser.html","title":"Legacy configuration"},{"location":"legacy/configuration/#legacy-configuration","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/Configuration_Legacy.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/Configuration_Legacy.rst in easybuilders/easybuild repo target: docs/legacy/configuration.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _configuring_easybuild_legacy: Configuration Legacy ==================== .. XXX - UPDATE BY VERSION Legacy configuration is currently **deprecated!** If you are a new user of EasyBuild you can safely ignore everything below this line, refer instead to :doc: `Configuration` . -------- Porting from legacy configuration style --------------------------------------- In EasyBuild v1.x, a couple of configuration options, other than the standard ones aligned with variables, are available that follow the **legacy configuration style** , including: - the ``-C`` and ``--config`` command line arguments ( **use** ``--configfiles`` **instead** ) - the ``$EASYBUILDCONFIG`` environment variable ( **use** ``$EASYBUILD_CONFIGFILES`` **instead** ) - the default path ``$HOME/.easybuild/config.py`` ( **new-style default path is** ``$XDG_CONFIG_HOME/easybuild/config.cfg`` ) - the legacy fallback path ``<installpath>/easybuild/easybuild_config.py`` ( **only default/fallback path is** ``$XDG_CONFIG_HOME/easybuild/config.cfg`` ) Likewise, the following legacy environment variables allowed to override selected configuration settings: - ``$EASYBUILDBUILDPATH`` : build path to be used by EasyBuild ( **use** ``$EASYBUILD_BUILDPATH`` **instead** ) - ``$EASYBUILDINSTALLPATH`` : install path to be used by EasyBuild ( **use** ``$EASYBUILD_INSTALLPATH`` **instead** ) - ``$EASYBUILDSOURCEPATH`` : source path to be used by EasyBuild ( **use** ``$EASYBUILD_SOURCEPATH`` **instead** ) - ``$EASYBUILDPREFIX`` : build/install/source path prefix to be used ( **use** ``$EASYBUILD_PREFIX`` **instead** ) We *strongly* advise to switch to the new way of configuring EasyBuild as soon as possible, since the legacy configuration style will no longer be supported in EasyBuild v2.x. How EasyBuild used to be configured in the early days ----------------------------------------------------- Configuring `EasyBuild` is done by providing a configuration file. EasyBuild expects the configuration file to contain valid Python code, because it executes its contents (using ``exec`` ). The rationale is that this approach provides a lot of flexibility for configuring EasyBuild. EasyBuild will use the file that is provided by the path/filename in the following order of preference: - path/filename specified on the EasyBuild command line (using ``--config`` ), - path/filename obtained from the environment variable ``EASYBUILDCONFIG`` (if it is defined) - ``$HOME/.easybuild/config.py`` (as of EasyBuild v1.1) - the (default) configuration file at ``<path where EasyBuild was installed>/easybuild/easybuild_config.py`` Configuration variables ~~~~~~~~~~~~~~~~~~~~~~~ The configuration file must define the following five variables: ``build_path`` , ``install_path`` , ``source_path`` , ``repository`` , and ``log_format`` . If one of them is not defined, EasyBuild will complain and exit. Build path (required) ^^^^^^^^^^^^^^^^^^^^^ The ``build_path`` variable specifies the directory in which EasyBuild builds its software packages. Each software package is (by default) built in a subdirectory of the ``build_path`` under ``<name>/<version>/<toolchain><versionsuffix>`` . Note that the build directories are emptied by EasyBuild when the installation is completed (by default). Install path (required) ^^^^^^^^^^^^^^^^^^^^^^^ The ``install_path`` variable specifies the directory in which EasyBuild installs software packages and the corresponding module files. The packages themselves are installed under ``install_path/software`` in their own subdirectory aptly named ``<name>/<version>-<toolchain><versionsuffix>`` (by default), where name is the package name. The corresponding module files are installed under ``install_path/modules`` . **Setting $MODULEPATH** After the configuration, you need to make sure that ``$MODULEPATH`` environment variable is extended with the ``modules/all`` subdirectory of the ``install_path`` , i.e.: .. code :: bash export MODULEPATH = <install_path>/modules/all: $MODULEPATH It is probably a good idea to add this to your (favourite) shell .rc file, e.g., ``.bashrc`` , and/or the ``.profile`` login scripts, so you do not need to adjust the ``$MODULEPATH`` variable every time you start a new session. Source path (required) ^^^^^^^^^^^^^^^^^^^^^^ The ``source_path`` variable specifies the directory in which EasyBuild looks for software source and install files. Similarly to the configuration file lookup, EasyBuild looks for the installation files as given by the ``sources`` variable in the .eb easyconfig file, in the following order of preference: - ``<source_path>/<name>`` : a subdirectory determined by the name of the software package - ``<source_path>/<letter>/<name>`` : in the style of the ``easyblocks`` / ``easyconfigs`` directories: in a subdirectory determined by the first letter (in lower case) of the software package and by its full ``name`` - ``<source_path>`` : directly in the source path Note that these locations are also used when EasyBuild looks for patch files in addition to the various ``easybuild/easyconfigs`` directories that are listed in the ``$PYTHONPATH`` . .. _configparser: http://docs.python.org/2/library/configparser.html","title":"Legacy configuration"},{"location":"version-specific/","text":"Overview of version specific (auto-generated) documentation pages \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/index.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/index.rst in easybuilders/easybuild repo target: docs/version-specific/index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Overview of version specific (auto-generated) documentation pages"},{"location":"version-specific/#overview-of-version-specific-auto-generated-documentation-pages","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/index.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/index.rst in easybuilders/easybuild repo target: docs/version-specific/index.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Overview of version specific (auto-generated) documentation pages"},{"location":"version-specific/config-file-constants/","text":"Constants available (only) in configuration files \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/config_file_constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/config_file_constants.rst in easybuilders/easybuild repo target: docs/version-specific/config-file-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Constants available (only) in configuration files"},{"location":"version-specific/config-file-constants/#constants-available-only-in-configuration-files","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/config_file_constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/config_file_constants.rst in easybuilders/easybuild repo target: docs/version-specific/config-file-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Constants available (only) in configuration files"},{"location":"version-specific/easyblocks/","text":"List of easyblocks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyblocks.rst in easybuilders/easybuild repo target: docs/version-specific/easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"List of easyblocks"},{"location":"version-specific/easyblocks/#list-of-easyblocks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyblocks.rst in easybuilders/easybuild repo target: docs/version-specific/easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"List of easyblocks"},{"location":"version-specific/easyconfig-constants/","text":"Constants that can be used in easyconfigs \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_constants.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Constants that can be used in easyconfigs"},{"location":"version-specific/easyconfig-constants/#constants-that-can-be-used-in-easyconfigs","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_constants.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Constants that can be used in easyconfigs"},{"location":"version-specific/easyconfig-license-constants/","text":"Output of eb --list-easyblocks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_license_constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_license_constants.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-license-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Output of `eb --list-easyblocks`"},{"location":"version-specific/easyconfig-license-constants/#output-of-eb-list-easyblocks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_license_constants.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_license_constants.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-license-constants.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Output of eb --list-easyblocks"},{"location":"version-specific/easyconfig-parameters/","text":"Available easyconfig parameters \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_parameters.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_parameters.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-parameters.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available easyconfig parameters"},{"location":"version-specific/easyconfig-parameters/#available-easyconfig-parameters","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_parameters.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_parameters.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-parameters.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available easyconfig parameters"},{"location":"version-specific/easyconfig-templates/","text":"Available template values for easyconfigs \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_templates.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_templates.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-templates.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available template values for easyconfigs"},{"location":"version-specific/easyconfig-templates/#available-template-values-for-easyconfigs","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/easyconfig_templates.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/easyconfig_templates.rst in easybuilders/easybuild repo target: docs/version-specific/easyconfig-templates.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available template values for easyconfigs"},{"location":"version-specific/eb-a-wrf/","text":"Available easyconfig parameters for WRF easyblock \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_a_e_EB_WRF.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_a_e_EB_WRF.rst in easybuilders/easybuild repo target: docs/version-specific/eb-a-wrf.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available easyconfig parameters for WRF easyblock"},{"location":"version-specific/eb-a-wrf/#available-easyconfig-parameters-for-wrf-easyblock","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_a_e_EB_WRF.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_a_e_EB_WRF.rst in easybuilders/easybuild repo target: docs/version-specific/eb-a-wrf.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available easyconfig parameters for WRF easyblock"},{"location":"version-specific/eb-help/","text":"Output of eb --help \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_help.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_help.rst in easybuilders/easybuild repo target: docs/version-specific/eb-help.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Output of `eb --help`"},{"location":"version-specific/eb-help/#output-of-eb-help","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_help.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_help.rst in easybuilders/easybuild repo target: docs/version-specific/eb-help.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Output of eb --help"},{"location":"version-specific/eb-list-easyblocks/","text":"Output of eb --list-easyblocks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_list_easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_list_easyblocks.rst in easybuilders/easybuild repo target: docs/version-specific/eb-list-easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Output of `eb --list-easyblocks`"},{"location":"version-specific/eb-list-easyblocks/#output-of-eb-list-easyblocks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_list_easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_list_easyblocks.rst in easybuilders/easybuild repo target: docs/version-specific/eb-list-easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Output of eb --list-easyblocks"},{"location":"version-specific/eb-list-toolchains/","text":"Output of eb --list-toolchains \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_list_toolchains.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_list_toolchains.rst in easybuilders/easybuild repo target: docs/version-specific/eb-list-toolchains.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _toolchains_table: List of known toolchains ======================== The list of known toolchains can easily be obtained with :: $ eb --list-toolchains List of known toolchains (toolchainname: module[,module...]): [...] An up-to-date overview of known toolchains is available at :ref: `vsd_list_toolchains` . .. note :: The `system` toolchain is a special case, see :ref: `system_toolchain` .","title":"Output of `eb --list-toolchains`"},{"location":"version-specific/eb-list-toolchains/#output-of-eb-list-toolchains","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/eb_list_toolchains.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/eb_list_toolchains.rst in easybuilders/easybuild repo target: docs/version-specific/eb-list-toolchains.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information. .. _toolchains_table: List of known toolchains ======================== The list of known toolchains can easily be obtained with :: $ eb --list-toolchains List of known toolchains (toolchainname: module[,module...]): [...] An up-to-date overview of known toolchains is available at :ref: `vsd_list_toolchains` . .. note :: The `system` toolchain is a special case, see :ref: `system_toolchain` .","title":"Output of eb --list-toolchains"},{"location":"version-specific/generic-easyblocks/","text":"Overview of generic easyblocks \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/generic_easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/generic_easyblocks.rst in easybuilders/easybuild repo target: docs/version-specific/generic-easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Overview of generic easyblocks"},{"location":"version-specific/generic-easyblocks/#overview-of-generic-easyblocks","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/generic_easyblocks.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/generic_easyblocks.rst in easybuilders/easybuild repo target: docs/version-specific/generic-easyblocks.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Overview of generic easyblocks"},{"location":"version-specific/supported-software/","text":"List of supported software \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/Supported_software.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/Supported_software.rst in easybuilders/easybuild repo target: docs/version-specific/supported-software.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"List of supported software"},{"location":"version-specific/supported-software/#list-of-supported-software","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/Supported_software.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/Supported_software.rst in easybuilders/easybuild repo target: docs/version-specific/supported-software.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"List of supported software"},{"location":"version-specific/toolchain-opts/","text":"Available toolchain options (by toolchain) \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/toolchain_opts.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/toolchain_opts.rst in easybuilders/easybuild repo target: docs/version-specific/toolchain-opts.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available toolchain options (by toolchain)"},{"location":"version-specific/toolchain-opts/#available-toolchain-options-by-toolchain","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/toolchain_opts.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/toolchain_opts.rst in easybuilders/easybuild repo target: docs/version-specific/toolchain-opts.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"Available toolchain options (by toolchain)"},{"location":"version-specific/toolchain/","text":"List of known toolchains \u00b6 Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/toolchains.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/toolchains.rst in easybuilders/easybuild repo target: docs/version-specific/toolchains.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"List of known toolchains"},{"location":"version-specific/toolchain/#list-of-known-toolchains","text":"Warning This page will soon replace https://docs.easybuild.io/en/latest/version-specific/toolchains.html . It still needs to be ported from reStructuredText (.rst) to MarkDown (.md), and you can help with that! source: docs/version-specific/toolchains.rst in easybuilders/easybuild repo target: docs/version-specific/toolchains.md in easybuilders/easybuild-docs repo See https://github.com/easybuilders/easybuild-docs for more information.","title":"List of known toolchains"}]}